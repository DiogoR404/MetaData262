[{"path":"./test262/test/built-ins/Array/prototype/flat/array-like-objects.js","esid":" sec-array.prototype.flat\r","description":" >\rarray-like objects can be flattened\r\n","includes":["compareArray.js\r"],"features":["Array.prototype.flat\r"]},{"path":"./test262/test/built-ins/Array/prototype/flat/bound-function-call.js","esid":" sec-array.prototype.flat\r","description":" >\rusing bound functions\r\n","includes":["compareArray.js\r"],"features":["Array.prototype.flat\r"]},{"path":"./test262/test/built-ins/Array/prototype/flat/call-with-boolean.js","esid":" sec-array.prototype.flat\r","description":" Array.prototype.flat applied to boolean primitive\r","includes":["compareArray.js\r"]},{"path":"./test262/test/built-ins/Array/prototype/flat/empty-array-elements.js","esid":" sec-array.prototype.flat\r","description":" >\rarrays with empty arrays elements\r\n","includes":["compareArray.js\r"],"features":["Array.prototype.flat\r"]},{"path":"./test262/test/built-ins/Array/prototype/flat/empty-object-elements.js","esid":" sec-array.prototype.flat\r","description":" >\rarrays with empty object elements\r\n","includes":["compareArray.js\r"],"features":["Array.prototype.flat\r"]},{"path":"./test262/test/built-ins/Array/prototype/flat/length.js","esid":" sec-array.prototype.flat\r","description":" Array.prototype.flat.length value and descriptor.\r","info":" >\r17 ECMAScript Standard Built-in Objects\r\n","includes":["propertyHelper.js\r"],"features":["Array.prototype.flat\r"]},{"path":"./test262/test/built-ins/Array/prototype/flat/name.js","esid":" sec-array.prototype.flat\r","description":" >\rArray.prototype.flat.name value and descriptor.\r\n","info":" >\r17 ECMAScript Standard Built-in Objects\r\n","includes":["propertyHelper.js\r"],"features":["Array.prototype.flat\r"]},{"path":"./test262/test/built-ins/Array/prototype/flat/non-numeric-depth-should-not-throw.js","esid":" sec-array.prototype.flat\r","description":" >\rif the argument is a string or object, the depthNum is 0\r\n","includes":["compareArray.js\r"],"features":["Array.prototype.flat\r"]},{"path":"./test262/test/built-ins/Array/prototype/flat/non-object-ctor-throws.js","esid":" sec-array.prototype.flat\r","description":" >\rBehavior when `constructor` property is neither an Object nor undefined\r\n- if IsConstructor(C) is false, throw a TypeError exception.\r\n","features":["Array.prototype.flat\r"]},{"path":"./test262/test/built-ins/Array/prototype/flat/not-a-constructor.js","esid":" sec-ecmascript-standard-built-in-objects\r","description":" >\rArray.prototype.flat does not implement [[Construct]], is not new-able\r\n","info":" |\rECMAScript Function Objects\r\n\r\nBuilt-in function objects that are not identified as constructors do not\r\nimplement the [[Construct]] internal method unless otherwise specified in\r\nthe description of a particular function.\r\n\r\nsec-evaluatenew\r\n\r\n...\r\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\r\n...\r\n","includes":["isConstructor.js\r"],"features":["Reflect.construct","arrow-function\r"]},{"path":"./test262/test/built-ins/Array/prototype/flat/null-undefined-elements.js","esid":" sec-array.prototype.flat\r","description":" >\rarrays with null, and undefined\r\n","includes":["compareArray.js\r"],"features":["Array.prototype.flat\r"]},{"path":"./test262/test/built-ins/Array/prototype/flat/null-undefined-input-throws.js","esid":" sec-array.prototype.flat\r","description":" >\rnull or undefined should throw TypeError Exception\r\n","features":["Array.prototype.flat\r"]},{"path":"./test262/test/built-ins/Array/prototype/flat/positive-infinity.js","esid":" sec-array.prototype.flat\r","description":" >\rif the argument is a positive infinity, the depthNum is max depth of the array\r\n","includes":["compareArray.js\r"],"features":["Array.prototype.flat\r"]},{"path":"./test262/test/built-ins/Array/prototype/flat/prop-desc.js","esid":" sec-array.prototype.flat\r","description":" Property type and descriptor.\r","info":" >\r17 ECMAScript Standard Built-in Objects\r\n","includes":["propertyHelper.js\r"],"features":["Array.prototype.flat\r"]},{"path":"./test262/test/built-ins/Array/prototype/flat/proxy-access-count.js","esid":" sec-array.prototype.flat\r","description":" >\rproperties are accessed correct number of times by .flat\r\n","info":" |\rArray.prototype.flat( [ depth ] )\r\n\r\n...\r\n6. Perform ? FlattenIntoArray(A, O, sourceLen, 0, depthNum).\r\n\r\nFlattenIntoArray (target, source, sourceLen, start, depth [ , mapperFunction, thisArg ])\r\n\r\n3. Repeat, while sourceIndex < sourceLen\r\na. Let P be ! ToString(sourceIndex).\r\nb. Let exists be ? HasProperty(source, P).\r\nc. If exists is true, then\r\ni. Let element be ? Get(source, P).\r\n","features":["Array.prototype.flat\r"],"includes":["compareArray.js\r"]},{"path":"./test262/test/built-ins/Array/prototype/flat/symbol-object-create-null-depth-throws.js","esid":" sec-array.prototype.flat\r","description":" >\rif the argument is a Symbol or Object null, it throws exception\r\n","features":["Array.prototype.flat\r"]},{"path":"./test262/test/built-ins/Array/prototype/flat/target-array-non-extensible.js","esid":" sec-array.prototype.flat\r","description":" >\rTypeError is thrown if CreateDataProperty fails.\r\n(result object is non-extensible, source array is not flattened)\r\n","info":" |\rArray.prototype.flat ( [ depth ] )\r\n\r\n[...]\r\n6. Perform ? FlattenIntoArray(A, O, sourceLen, 0, depthNum).\r\n\r\nFlattenIntoArray ( target, source, sourceLen, start, depth [ , mapperFunction, thisArg ] )\r\n\r\n[...]\r\n9. Repeat, while sourceIndex < sourceLen\r\n[...]\r\nc. If exists is true, then\r\n[...]\r\nv. If shouldFlatten is true, then\r\n[...]\r\nvi. Else,\r\n[...]\r\n2. Perform ? CreateDataPropertyOrThrow(target, ! ToString(targetIndex), element).\r\n[...]\r\n\r\nCreateDataPropertyOrThrow ( O, P, V )\r\n\r\n[...]\r\n3. Let success be ? CreateDataProperty(O, P, V).\r\n4. If success is false, throw a TypeError exception.\r\n","features":["Symbol.species\r"]},{"path":"./test262/test/built-ins/Array/prototype/flat/target-array-with-non-configurable-property.js","esid":" sec-array.prototype.flat\r","description":" >\rTypeError is thrown if CreateDataProperty fails.\r\n(result object's \"0\" is non-configurable, source array gets flattened)\r\n","info":" |\rArray.prototype.flat ( [ depth ] )\r\n\r\n[...]\r\n6. Perform ? FlattenIntoArray(A, O, sourceLen, 0, depthNum).\r\n\r\nFlattenIntoArray ( target, source, sourceLen, start, depth [ , mapperFunction, thisArg ] )\r\n\r\n[...]\r\n9. Repeat, while sourceIndex < sourceLen\r\n[...]\r\nc. If exists is true, then\r\n[...]\r\nv. If shouldFlatten is true, then\r\n[...]\r\n2. Set targetIndex to ? FlattenIntoArray(target, element, elementLen, targetIndex, depth - 1).\r\n[...]\r\n\r\nCreateDataPropertyOrThrow ( O, P, V )\r\n\r\n[...]\r\n3. Let success be ? CreateDataProperty(O, P, V).\r\n4. If success is false, throw a TypeError exception.\r\n","features":["Symbol.species\r"]},{"path":"./test262/test/built-ins/Array/prototype/flat/target-array-with-non-writable-property.js","esid":" sec-array.prototype.flat\r","description":" >\rNon-writable properties are overwritten by CreateDataProperty.\r\n(result object's \"0\" is non-writable, source array gets flattened)\r\n","info":" |\rArray.prototype.flat ( [ depth ] )\r\n\r\n[...]\r\n6. Perform ? FlattenIntoArray(A, O, sourceLen, 0, depthNum).\r\n\r\nFlattenIntoArray ( target, source, sourceLen, start, depth [ , mapperFunction, thisArg ] )\r\n\r\n[...]\r\n9. Repeat, while sourceIndex < sourceLen\r\n[...]\r\nc. If exists is true, then\r\n[...]\r\nv. If shouldFlatten is true, then\r\n[...]\r\n2. Set targetIndex to ? FlattenIntoArray(target, element, elementLen, targetIndex, depth - 1).\r\n[...]\r\n","features":["Symbol.species\r"],"includes":["propertyHelper.js\r"]},{"path":"./test262/test/built-ins/Array/prototype/flatMap/array-like-objects-nested.js","esid":" sec-array.prototype.flatMap\r","description":" >\rDoes not flatten array-like objects nested into the main array\r\n","info":" |\rFlattenIntoArray(target, source, sourceLen, start, depth [ , mapperFunction, thisArg ])\r\n\r\n1. Let targetIndex be start.\r\n2. Let sourceIndex be 0.\r\n3. Repeat, while sourceIndex < sourceLen\r\na. Let P be ! ToString(sourceIndex).\r\nb. Let exists be ? HasProperty(source, P).\r\nc. If exists is true, then\r\ni. Let element be ? Get(source, P).\r\nii. If mapperFunction is present, then\r\n1. Assert: thisArg is present.\r\n2. Set element to ? Call(mapperFunction, thisArg , « element, sourceIndex, source »).\r\niii. Let shouldFlatten be false.\r\niv. If depth > 0, then\r\n1. Set shouldFlatten to ? IsArray(element).\r\nv. If shouldFlatten is true, then\r\n1. Let elementLen be ? ToLength(? Get(element, \"length\")).\r\n2. Set targetIndex to ? FlattenIntoArray(target, element, elementLen, targetIndex, depth - 1).\r\nvi. Else,\r\n1. If targetIndex ≥ 253-1, throw a TypeError exception.\r\n2. Perform ? CreateDataPropertyOrThrow(target, ! ToString(targetIndex), element).\r\n3. Increase targetIndex by 1.\r\n","includes":["compareArray.js\r"],"features":["Array.prototype.flatMap","Int32Array\r"]},{"path":"./test262/test/built-ins/Array/prototype/flatMap/array-like-objects-poisoned-length.js","esid":" sec-array.prototype.flatMap\r","description":" >\rObserve abrupt completion in poisoned lengths of array-like objects\r\n","info":" |\rArray.prototype.flatMap ( mapperFunction [ , thisArg ] )\r\n\r\n1. Let O be ? ToObject(this value).\r\n2. Let sourceLen be ? ToLength(? Get(O, \"length\")).\r\n","features":["Array.prototype.flatMap","Symbol.toPrimitive\r"]},{"path":"./test262/test/built-ins/Array/prototype/flatMap/array-like-objects-typedarrays.js","esid":" sec-array.prototype.flatMap\r","description":" >\rarray-like objects can be flattened (typedArrays)\r\n","info":" |\rArray.prototype.flatMap ( mapperFunction [ , thisArg ] )\r\n\r\n1. Let O be ? ToObject(this value).\r\n2. Let sourceLen be ? ToLength(? Get(O, \"length\")).\r\n...\r\n5. Let A be ? ArraySpeciesCreate(O, 0).\r\n...\r\n\r\nArraySpeciesCreate ( originalArray, length )\r\n\r\n3. Let isArray be ? IsArray(originalArray).\r\n4. If isArray is false, return ? ArrayCreate(length).\r\n5. Let C be ? Get(originalArray, \"constructor\").\r\n","includes":["compareArray.js\r"],"features":["Array.prototype.flatMap","Int32Array\r"]},{"path":"./test262/test/built-ins/Array/prototype/flatMap/array-like-objects.js","esid":" sec-array.prototype.flatMap\r","description":" >\rarray-like objects can be flattened\r\n","info":" |\rArray.prototype.flatMap ( mapperFunction [ , thisArg ] )\r\n\r\n1. Let O be ? ToObject(this value).\r\n2. Let sourceLen be ? ToLength(? Get(O, \"length\")).\r\n...\r\n5. Let A be ? ArraySpeciesCreate(O, 0).\r\n...\r\n\r\nArraySpeciesCreate ( originalArray, length )\r\n\r\n3. Let isArray be ? IsArray(originalArray).\r\n4. If isArray is false, return ? ArrayCreate(length).\r\n\r\nFlattenIntoArray(target, source, sourceLen, start, depth [ , mapperFunction, thisArg ])\r\n\r\n1. Let targetIndex be start.\r\n2. Let sourceIndex be 0.\r\n3. Repeat, while sourceIndex < sourceLen\r\na. Let P be ! ToString(sourceIndex).\r\nb. Let exists be ? HasProperty(source, P).\r\nc. If exists is true, then\r\n...\r\n** Skip if property does not exist **\r\n","includes":["compareArray.js\r"],"features":["Array.prototype.flatMap\r"]},{"path":"./test262/test/built-ins/Array/prototype/flatMap/bound-function-argument.js","esid":" sec-array.prototype.flatMap\r","description":" >\rBehavior when given a bound function\r\n","includes":["compareArray.js\r"],"features":["Array.prototype.flatMap\r"]},{"path":"./test262/test/built-ins/Array/prototype/flatMap/call-with-boolean.js","esid":" sec-array.prototype.flatMap\r","description":" Array.prototype.flatMap applied to boolean primitive\r","includes":["compareArray.js\r"]},{"path":"./test262/test/built-ins/Array/prototype/flatMap/depth-always-one.js","esid":" sec-array.prototype.flatMap\r","description":" >\rBehavior when array is depth more than 1\r\n","includes":["compareArray.js\r"],"features":["Array.prototype.flatMap\r"]},{"path":"./test262/test/built-ins/Array/prototype/flatMap/length.js","esid":" sec-array.prototype.flatMap\r","description":" Array.prototype.flatMap.length value and descriptor.\r","info":" >\r17 ECMAScript Standard Built-in Objects\r\n","includes":["propertyHelper.js\r"],"features":["Array.prototype.flatMap\r"]},{"path":"./test262/test/built-ins/Array/prototype/flatMap/name.js","esid":" sec-array.prototype.flatmap\r","description":" Array.prototype.flatmap name value and descriptor.\r","info":" >\r17 ECMAScript Standard Built-in Objects\r\n","includes":["propertyHelper.js\r"],"features":["Array.prototype.flatMap\r"]},{"path":"./test262/test/built-ins/Array/prototype/flatMap/non-callable-argument-throws.js","esid":" sec-array.prototype.flatMap\r","description":" >\rnon callable argument should throw TypeError Exception\r\n","info":" |\rArray.prototype.flatMap ( mapperFunction [ , thisArg ] )\r\n\r\n1. Let O be ? ToObject(this value).\r\n2. Let sourceLen be ? ToLength(? Get(O, \"length\")).\r\n3. If IsCallable(mapperFunction) is false, throw a TypeError exception.\r\n...\r\n","features":["Array.prototype.flatMap","Symbol\r"]},{"path":"./test262/test/built-ins/Array/prototype/flatMap/not-a-constructor.js","esid":" sec-ecmascript-standard-built-in-objects\r","description":" >\rArray.prototype.flatMap does not implement [[Construct]], is not new-able\r\n","info":" |\rECMAScript Function Objects\r\n\r\nBuilt-in function objects that are not identified as constructors do not\r\nimplement the [[Construct]] internal method unless otherwise specified in\r\nthe description of a particular function.\r\n\r\nsec-evaluatenew\r\n\r\n...\r\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\r\n...\r\n","includes":["isConstructor.js\r"],"features":["Reflect.construct","Array.prototype.flatMap","arrow-function\r"]},{"path":"./test262/test/built-ins/Array/prototype/flatMap/prop-desc.js","esid":" sec-array.prototype.flatMap\r","description":" Property type and descriptor.\r","info":" >\r17 ECMAScript Standard Built-in Objects\r\n\r\nEvery other data property described in clauses 18 through 26 and in Annex B.2\r\nhas the attributes { [[Writable]]: true, [[Enumerable]]: false,\r\n[[Configurable]]: true } unless otherwise specified.\r\n","includes":["propertyHelper.js\r"],"features":["Array.prototype.flatMap\r"]},{"path":"./test262/test/built-ins/Array/prototype/flatMap/proxy-access-count.js","esid":" sec-array.prototype.flatMap\r","description":" >\rproperties are accessed correct number of times by .flatMap\r\n","info":" |\rArray.prototype.flatMap ( mapperFunction [ , thisArg ] )\r\n\r\n...\r\n6. Perform ? FlattenIntoArray(A, O, sourceLen, 0, 1, mapperFunction, T).\r\n\r\nFlattenIntoArray (target, source, sourceLen, start, depth [ , mapperFunction, thisArg ])\r\n\r\n3. Repeat, while sourceIndex < sourceLen\r\na. Let P be ! ToString(sourceIndex).\r\nb. Let exists be ? HasProperty(source, P).\r\nc. If exists is true, then\r\ni. Let element be ? Get(source, P).\r\n","features":["Array.prototype.flatMap\r"],"includes":["compareArray.js\r"]},{"path":"./test262/test/built-ins/Array/prototype/flatMap/target-array-non-extensible.js","esid":" sec-array.prototype.flatmap\r","description":" >\rTypeError is thrown if CreateDataProperty fails.\r\n(result object is non-extensible, source array gets flattened)\r\n","info":" |\rArray.prototype.flatMap ( mapperFunction [ , thisArg ] )\r\n\r\n[...]\r\n6. Perform ? FlattenIntoArray(A, O, sourceLen, 0, depthNum).\r\n\r\nFlattenIntoArray ( target, source, sourceLen, start, depth [ , mapperFunction, thisArg ] )\r\n\r\n[...]\r\n9. Repeat, while sourceIndex < sourceLen\r\n[...]\r\nc. If exists is true, then\r\n[...]\r\nv. If shouldFlatten is true, then\r\n[...]\r\n2. Set targetIndex to ? FlattenIntoArray(target, element, elementLen, targetIndex, depth - 1).\r\n[...]\r\n\r\nCreateDataPropertyOrThrow ( O, P, V )\r\n\r\n[...]\r\n3. Let success be ? CreateDataProperty(O, P, V).\r\n4. If success is false, throw a TypeError exception.\r\n","features":["Symbol.species\r"]},{"path":"./test262/test/built-ins/Array/prototype/flatMap/target-array-with-non-configurable-property.js","esid":" sec-array.prototype.flatmap\r","description":" >\rTypeError is thrown if CreateDataProperty fails.\r\n(result object's \"0\" is non-configurable, source array is not flattened)\r\n","info":" |\rArray.prototype.flatMap ( mapperFunction [ , thisArg ] )\r\n\r\n[...]\r\n6. Perform ? FlattenIntoArray(A, O, sourceLen, 0, depthNum).\r\n\r\nFlattenIntoArray ( target, source, sourceLen, start, depth [ , mapperFunction, thisArg ] )\r\n\r\n[...]\r\n9. Repeat, while sourceIndex < sourceLen\r\n[...]\r\nc. If exists is true, then\r\n[...]\r\nv. If shouldFlatten is true, then\r\n[...]\r\nvi. Else,\r\n[...]\r\n2. Perform ? CreateDataPropertyOrThrow(target, ! ToString(targetIndex), element).\r\n[...]\r\n\r\nCreateDataPropertyOrThrow ( O, P, V )\r\n\r\n[...]\r\n3. Let success be ? CreateDataProperty(O, P, V).\r\n4. If success is false, throw a TypeError exception.\r\n","features":["Symbol.species\r"]},{"path":"./test262/test/built-ins/Array/prototype/flatMap/target-array-with-non-writable-property.js","esid":" sec-array.prototype.flatmap\r","description":" >\rNon-writable properties are overwritten by CreateDataProperty.\r\n(result object's \"0\" is non-writable, source array is not flattened)\r\n","info":" |\rArray.prototype.flatMap ( mapperFunction [ , thisArg ] )\r\n\r\n[...]\r\n6. Perform ? FlattenIntoArray(A, O, sourceLen, 0, depthNum).\r\n\r\nFlattenIntoArray ( target, source, sourceLen, start, depth [ , mapperFunction, thisArg ] )\r\n\r\n[...]\r\n9. Repeat, while sourceIndex < sourceLen\r\n[...]\r\nc. If exists is true, then\r\n[...]\r\nv. If shouldFlatten is true, then\r\n[...]\r\nvi. Else,\r\n[...]\r\n2. Perform ? CreateDataPropertyOrThrow(target, ! ToString(targetIndex), element).\r\n[...]\r\n","features":["Symbol.species\r"],"includes":["propertyHelper.js\r"]},{"path":"./test262/test/built-ins/Array/prototype/flatMap/this-value-ctor-non-object.js","esid":" sec-array.prototype.flatMap\r","description":" >\rAssert behavior if this value has a custom non-object constructor property\r\n","info":" |\rArray.prototype.flatMap ( mapperFunction [ , thisArg ] )\r\n\r\n1. Let O be ? ToObject(this value).\r\n2. Let sourceLen be ? ToLength(? Get(O, \"length\")).\r\n...\r\n5. Let A be ? ArraySpeciesCreate(O, 0).\r\n...\r\n\r\nArraySpeciesCreate ( originalArray, length )\r\n\r\n3. Let isArray be ? IsArray(originalArray).\r\n4. If isArray is false, return ? ArrayCreate(length).\r\n5. Let C be ? Get(originalArray, \"constructor\").\r\n6. If IsConstructor(C) is true, then\r\na. Let thisRealm be the current Realm Record.\r\nb. Let realmC be ? GetFunctionRealm(C).\r\nc. If thisRealm and realmC are not the same Realm Record, then\r\ni. If SameValue(C, realmC.[[Intrinsics]].[[%Array%]]) is true, set C to undefined.\r\n7. If Type(C) is Object, then\r\na. Set C to ? Get(C, @@species).\r\nb. If C is null, set C to undefined.\r\n8. If C is undefined, return ? ArrayCreate(length).\r\n9. If IsConstructor(C) is false, throw a TypeError exception.\r\n","features":["Array.prototype.flatMap","Symbol\r"],"includes":["compareArray.js\r"]},{"path":"./test262/test/built-ins/Array/prototype/flatMap/this-value-ctor-object-species-bad-throws.js","esid":" sec-array.prototype.flatMap\r","description":" >\rAssert behavior if this value has a custom object constructor property species\r\n","info":" |\rArray.prototype.flatMap ( mapperFunction [ , thisArg ] )\r\n\r\n1. Let O be ? ToObject(this value).\r\n2. Let sourceLen be ? ToLength(? Get(O, \"length\")).\r\n...\r\n5. Let A be ? ArraySpeciesCreate(O, 0).\r\n...\r\n\r\nArraySpeciesCreate ( originalArray, length )\r\n\r\n3. Let isArray be ? IsArray(originalArray).\r\n4. If isArray is false, return ? ArrayCreate(length).\r\n5. Let C be ? Get(originalArray, \"constructor\").\r\n6. If IsConstructor(C) is true, then\r\na. Let thisRealm be the current Realm Record.\r\nb. Let realmC be ? GetFunctionRealm(C).\r\nc. If thisRealm and realmC are not the same Realm Record, then\r\ni. If SameValue(C, realmC.[[Intrinsics]].[[%Array%]]) is true, set C to undefined.\r\n7. If Type(C) is Object, then\r\na. Set C to ? Get(C, @@species).\r\nb. If C is null, set C to undefined.\r\n8. If C is undefined, return ? ArrayCreate(length).\r\n9. If IsConstructor(C) is false, throw a TypeError exception.\r\n10. Return ? Construct(C, « length »).\r\n","features":["Array.prototype.flatMap","Symbol","Symbol.species\r"],"includes":["compareArray.js\r"]},{"path":"./test262/test/built-ins/Array/prototype/flatMap/this-value-ctor-object-species-custom-ctor-poisoned-throws.js","esid":" sec-array.prototype.flatMap\r","description":" >\rAssert behavior if this value has a poisoned custom species constructor\r\n","info":" |\rArray.prototype.flatMap ( mapperFunction [ , thisArg ] )\r\n\r\n1. Let O be ? ToObject(this value).\r\n2. Let sourceLen be ? ToLength(? Get(O, \"length\")).\r\n...\r\n5. Let A be ? ArraySpeciesCreate(O, 0).\r\n6. Perform ? FlattenIntoArray(A, O, sourceLen, 0, 1, mapperFunction, T).\r\n7. Return A.\r\n\r\nArraySpeciesCreate ( originalArray, length )\r\n\r\n3. Let isArray be ? IsArray(originalArray).\r\n4. If isArray is false, return ? ArrayCreate(length).\r\n5. Let C be ? Get(originalArray, \"constructor\").\r\n6. If IsConstructor(C) is true, then\r\n...\r\n7. If Type(C) is Object, then\r\na. Set C to ? Get(C, @@species).\r\nb. If C is null, set C to undefined.\r\n8. If C is undefined, return ? ArrayCreate(length).\r\n9. If IsConstructor(C) is false, throw a TypeError exception.\r\n10. Return ? Construct(C, « length »).\r\n","features":["Array.prototype.flatMap","Symbol","Symbol.species\r"]},{"path":"./test262/test/built-ins/Array/prototype/flatMap/this-value-ctor-object-species-custom-ctor.js","esid":" sec-array.prototype.flatMap\r","description":" >\rAssert behavior if this value has a custom species constructor\r\n","info":" |\rArray.prototype.flatMap ( mapperFunction [ , thisArg ] )\r\n\r\n1. Let O be ? ToObject(this value).\r\n2. Let sourceLen be ? ToLength(? Get(O, \"length\")).\r\n...\r\n5. Let A be ? ArraySpeciesCreate(O, 0).\r\n6. Perform ? FlattenIntoArray(A, O, sourceLen, 0, 1, mapperFunction, T).\r\n7. Return A.\r\n\r\nArraySpeciesCreate ( originalArray, length )\r\n\r\n3. Let isArray be ? IsArray(originalArray).\r\n4. If isArray is false, return ? ArrayCreate(length).\r\n5. Let C be ? Get(originalArray, \"constructor\").\r\n6. If IsConstructor(C) is true, then\r\n...\r\n7. If Type(C) is Object, then\r\na. Set C to ? Get(C, @@species).\r\nb. If C is null, set C to undefined.\r\n8. If C is undefined, return ? ArrayCreate(length).\r\n9. If IsConstructor(C) is false, throw a TypeError exception.\r\n10. Return ? Construct(C, « length »).\r\n\r\nFlattenIntoArray(target, source, sourceLen, start, depth [ , mapperFunction, thisArg ])\r\n\r\n3. Repeat, while sourceIndex < sourceLen\r\na. Let P be ! ToString(sourceIndex).\r\nb. Let exists be ? HasProperty(source, P).\r\nc. If exists is true, then\r\n...\r\nvi. Else,\r\n...\r\n2. Perform ? CreateDataPropertyOrThrow(target, ! ToString(targetIndex), element).\r\n","features":["Array.prototype.flatMap","Symbol","Symbol.species\r"],"includes":["propertyHelper.js\r"]},{"path":"./test262/test/built-ins/Array/prototype/flatMap/this-value-ctor-object-species.js","esid":" sec-array.prototype.flatMap\r","description":" >\rAssert behavior if this value has a custom object constructor property\r\n","info":" |\rArray.prototype.flatMap ( mapperFunction [ , thisArg ] )\r\n\r\n1. Let O be ? ToObject(this value).\r\n2. Let sourceLen be ? ToLength(? Get(O, \"length\")).\r\n...\r\n5. Let A be ? ArraySpeciesCreate(O, 0).\r\n...\r\n\r\nArraySpeciesCreate ( originalArray, length )\r\n\r\n3. Let isArray be ? IsArray(originalArray).\r\n4. If isArray is false, return ? ArrayCreate(length).\r\n5. Let C be ? Get(originalArray, \"constructor\").\r\n6. If IsConstructor(C) is true, then\r\na. Let thisRealm be the current Realm Record.\r\nb. Let realmC be ? GetFunctionRealm(C).\r\nc. If thisRealm and realmC are not the same Realm Record, then\r\ni. If SameValue(C, realmC.[[Intrinsics]].[[%Array%]]) is true, set C to undefined.\r\n7. If Type(C) is Object, then\r\na. Set C to ? Get(C, @@species).\r\nb. If C is null, set C to undefined.\r\n8. If C is undefined, return ? ArrayCreate(length).\r\n9. If IsConstructor(C) is false, throw a TypeError exception.\r\n10. Return ? Construct(C, « length »).\r\n","features":["Array.prototype.flatMap","Symbol","Symbol.species\r"],"includes":["compareArray.js\r"]},{"path":"./test262/test/built-ins/Array/prototype/flatMap/this-value-null-undefined-throws.js","esid":" sec-array.prototype.flatMap\r","description":" >\rThrow a TypeError if this value is null or undefined\r\n","info":" |\rArray.prototype.flatMap ( mapperFunction [ , thisArg ] )\r\n\r\n1. Let O be ? ToObject(this value).\r\n...\r\n","features":["Array.prototype.flatMap\r"]},{"path":"./test262/test/built-ins/Array/prototype/flatMap/thisArg-argument.js","esid":" sec-array.prototype.flatMap\r","description":" >\rBehavior when thisArg is provided\r\nArray.prototype.flatMap ( mapperFunction [ , thisArg ] )\r\n","flags":["onlyStrict\r"],"includes":["compareArray.js\r"],"features":["Array.prototype.flatMap\r"]},{"path":"./test262/test/built-ins/Array/prototype/methods-called-as-functions.js","esid":" sec-properties-of-the-array-prototype-object\r","description":" >\rArray.prototype methods resolve `this` value using strict mode semantics,\r\nthrowing TypeError if called as top-level function.\r\n","info":" |\rArray.prototype.concat ( ...items )\r\n\r\n1. Let O be ? ToObject(this value).\r\n\r\nToObject ( argument )\r\n\r\nArgument Type: Undefined\r\nResult: Throw a TypeError exception.\r\n","features":["Symbol","Symbol.isConcatSpreadable","Symbol.iterator","Symbol.species","Array.prototype.flat","Array.prototype.flatMap\r"]},{"path":"./test262/test/built-ins/Array/prototype/Symbol.unscopables/value.js","esid":" sec-array.prototype-@@unscopables\r","description":" >\rInitial value of `Symbol.unscopables` property\r\n","info":" |\r22.1.3.32 Array.prototype [ @@unscopables ]\r\n\r\n1. Let unscopableList be ObjectCreate(null).\r\n2. Perform CreateDataProperty(unscopableList, \"copyWithin\", true).\r\n3. Perform CreateDataProperty(unscopableList, \"entries\", true).\r\n4. Perform CreateDataProperty(unscopableList, \"fill\", true).\r\n5. Perform CreateDataProperty(unscopableList, \"find\", true).\r\n6. Perform CreateDataProperty(unscopableList, \"findIndex\", true).\r\n7. Perform CreateDataProperty(unscopableList, \"flat\", true).\r\n8. Perform CreateDataProperty(unscopableList, \"flatMap\", true).\r\n9. Perform CreateDataProperty(unscopableList, \"includes\", true).\r\n10. Perform CreateDataProperty(unscopableList, \"keys\", true).\r\n11. Perform CreateDataProperty(unscopableList, \"values\", true).\r\n12. Assert: Each of the above calls returns true.\r\n13. Return unscopableList.\r\n\r\n","includes":["propertyHelper.js\r"],"features":["Symbol.unscopables\r"]},{"path":"./test262/test/built-ins/Atomics/notify/bad-range.js","esid":" sec-atomics.notify\r","description":" >\rTest range checking of Atomics.notify on arrays that allow atomic operations\r\n","info":" |\rAtomics.notify( typedArray, index, count )\r\n\r\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray, true).\r\n..\r\n\r\n","includes":["testAtomics.js\r"],"features":["ArrayBuffer","Atomics","DataView","SharedArrayBuffer","Symbol","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/notify/count-boundary-cases.js","esid":" sec-atomics.notify\r","description":" >\rAllowed boundary cases for 'count' argument to Atomics.notify\r\n","info":" |\rAtomics.notify( typedArray, index, count )\r\n\r\n...\r\n3. If count is undefined, let c be +∞.\r\n4. Else,\r\na. Let intCount be ? ToInteger(count).\r\n...\r\n\r\nToInteger ( argument )\r\n\r\n1. Let number be ? ToNumber(argument).\r\n2. If number is NaN, return +0.\r\n3. If number is +0, -0, +∞, or -∞, return number.\r\n4. Return the number value that is the same sign as number\r\nand whose magnitude is floor(abs(number)).\r\n\r\n","features":["Atomics","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/notify/count-defaults-to-infinity-missing.js","esid":" sec-atomics.notify\r","description":" >\rDefault to +Infinity when missing 'count' argument to Atomics.notify\r\n","info":" |\rAtomics.notify( typedArray, index, count )\r\n\r\n...\r\n3. If count is undefined, let c be +∞.\r\n...\r\n\r\n","includes":["atomicsHelper.js\r"],"features":["Atomics","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/notify/count-defaults-to-infinity-undefined.js","esid":" sec-atomics.notify\r","description":" >\rUndefined count arg should result in an infinite count\r\n","info":" |\rAtomics.notify( typedArray, index, count )\r\n\r\n3.If count is undefined, let c be +∞.\r\n\r\n","includes":["atomicsHelper.js\r"],"features":["Atomics","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/notify/count-from-nans.js","esid":" sec-atomics.notify\r","description":" >\rNaNs are converted to 0 for 'count' argument to Atomics.notify\r\n","info":" |\rAtomics.notify( typedArray, index, count )\r\n\r\n...\r\n3. If count is undefined, let c be +∞.\r\n4. Else,\r\na. Let intCount be ? ToInteger(count).\r\n...\r\n\r\nToInteger ( argument )\r\n\r\n...\r\n2. If number is NaN, return +0.\r\n...\r\n\r\n","includes":["nans.js\r"],"features":["Atomics","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/notify/count-symbol-throws.js","esid":" sec-atomics.notify\r","description":" >\rReturn abrupt when symbol passed for 'count' argument to Atomics.notify\r\n","info":" |\rAtomics.notify( typedArray, index, count )\r\n\r\n...\r\n3. If count is undefined, let c be +∞.\r\n4. Else,\r\na. Let intCount be ? ToInteger(count).\r\n...\r\n\r\n","features":["Atomics","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/notify/count-tointeger-throws-then-wake-throws.js","esid":" sec-atomics.notify\r","description":" >\rReturn abrupt when ToInteger throws an exception on 'count' argument to Atomics.notify\r\n","info":" |\rAtomics.notify( typedArray, index, count )\r\n\r\n...\r\n3. If count is undefined, let c be +∞.\r\n4. Else,\r\na. Let intCount be ? ToInteger(count).\r\n...\r\n\r\n","features":["Atomics","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/notify/length.js","esid":" sec-atomics.notify\r","description":" >\rAtomics.notify.length is 3.\r\n","info":" |\rAtomics.notify ( ia, index, count )\r\n\r\n17 ECMAScript Standard Built-in Objects:\r\nEvery built-in Function object, including constructors, has a length\r\nproperty whose value is an integer. Unless otherwise specified, this\r\nvalue is equal to the largest number of named arguments shown in the\r\nsubclause headings for the function description, including optional\r\nparameters. However, rest parameters shown using the form “...name”\r\nare not included in the default argument count.\r\n\r\nUnless otherwise specified, the length property of a built-in Function\r\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\r\n[[Configurable]]: true }.\r\n","includes":["propertyHelper.js\r"],"features":["Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/notify/name.js","esid":" sec-atomics.notify\r","description":" >\rAtomics.notify.name is \"notify\".\r\n","includes":["propertyHelper.js\r"],"features":["Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/notify/negative-count.js","esid":" sec-atomics.notify\r","description":" >\rTest that Atomics.notify notifies zero waiters if the count is negative\r\n","includes":["atomicsHelper.js\r"],"features":["Atomics","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/notify/negative-index-throws.js","esid":" sec-atomics.notify\r","description":" >\rThrows a RangeError is index < 0\r\n","info":" |\rAtomics.notify( typedArray, index, count )\r\n\r\n2.Let i be ? ValidateAtomicAccess(typedArray, index).\r\n...\r\n2.Let accessIndex be ? ToIndex(requestIndex).\r\n...\r\n2.b If integerIndex < 0, throw a RangeError exception\r\n","features":["Atomics","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/notify/non-int32-typedarray-throws.js","esid":" sec-atomics.notify\r","description":" >\rThrows a TypeError if typedArray arg is not an Int32Array\r\n","info":" |\rAtomics.notify( typedArray, index, count )\r\n\r\n1.Let buffer be ? ValidateSharedIntegerTypedArray(typedArray, true).\r\n...\r\n5.If onlyInt32 is true, then\r\nIf typeName is not \"Int32Array\", throw a TypeError exception.\r\n","features":["Atomics","Float32Array","Float64Array","Int8Array","TypedArray","Uint16Array","Uint8Array","Uint8ClampedArray\r"]},{"path":"./test262/test/built-ins/Atomics/notify/non-shared-bufferdata-count-evaluation-throws.js","esid":" sec-atomics.notify\r","description":" >\rEvaluates count before returning 0, when TA.buffer is not a SharedArrayBuffer\r\n","info":" |\rAtomics.notify( typedArray, index, count )\r\n\r\nLet buffer be ? ValidateIntegerTypedArray(typedArray, true).\r\n...\r\nElse,\r\nLet intCount be ? ToInteger(count).\r\nLet c be max(intCount, 0).\r\n...\r\nIf IsSharedArrayBuffer(buffer) is false, return 0.\r\n\r\n\r\n","features":["ArrayBuffer","Atomics","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/notify/non-shared-bufferdata-index-evaluation-throws.js","esid":" sec-atomics.notify\r","description":" >\rEvaluates index before returning 0, when TA.buffer is not a SharedArrayBuffer\r\n","info":" |\rAtomics.notify( typedArray, index, count )\r\n\r\nLet buffer be ? ValidateIntegerTypedArray(typedArray, true).\r\nLet i be ? ValidateAtomicAccess(typedArray, index).\r\n...\r\nIf IsSharedArrayBuffer(buffer) is false, return 0.\r\n\r\n","features":["ArrayBuffer","Atomics","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/notify/non-shared-bufferdata-non-shared-int-views-throws.js","esid":" sec-atomics.notify\r","description":" >\rAtomics.notify throws on non-shared integer TypedArrays\r\n","features":["ArrayBuffer","Atomics","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/notify/non-shared-bufferdata-returns-0.js","esid":" sec-atomics.notify\r","description":" >\rReturns 0, when TA.buffer is not a SharedArrayBuffer\r\n","info":" |\rAtomics.notify( typedArray, index, count )\r\n\r\nLet buffer be ? ValidateIntegerTypedArray(typedArray, true).\r\n...\r\nIf IsSharedArrayBuffer(buffer) is false, return 0.\r\n\r\n","features":["ArrayBuffer","Atomics","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/notify/non-shared-int-views.js","esid":" sec-atomics.notify\r","description":" >\rTest Atomics.notify on non-shared integer TypedArrays\r\n","features":["Atomics","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/notify/non-views.js","esid":" sec-atomics.notify\r","description":" >\rTest Atomics.notify on view values other than TypedArrays\r\n","includes":["testAtomics.js\r"],"features":["ArrayBuffer","Atomics","DataView","SharedArrayBuffer","Symbol","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/notify/not-a-constructor.js","esid":" sec-ecmascript-standard-built-in-objects\r","description":" >\rAtomics.notify does not implement [[Construct]], is not new-able\r\n","info":" |\rECMAScript Function Objects\r\n\r\nBuilt-in function objects that are not identified as constructors do not\r\nimplement the [[Construct]] internal method unless otherwise specified in\r\nthe description of a particular function.\r\n\r\nsec-evaluatenew\r\n\r\n...\r\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\r\n...\r\n","includes":["isConstructor.js\r"],"features":["Reflect.construct","Atomics","arrow-function","TypedArray","SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/Atomics/notify/not-an-object-throws.js","esid":" sec-atomics.notify\r","description":" >\rThrows a TypeError if typedArray arg is not an Object\r\n","info":" |\rAtomics.notify( typedArray, index, count )\r\n\r\n1.Let buffer be ? ValidateSharedIntegerTypedArray(typedArray, true).\r\n...\r\n2. if Type(typedArray) is not Object, throw a TypeError exception\r\n","features":["Atomics","Symbol\r"]},{"path":"./test262/test/built-ins/Atomics/notify/notify-all-on-loc.js","esid":" sec-atomics.notify\r","description":" >\rTest that Atomics.notify notifies all waiters on a location, but does not\r\nnotify waiters on other locations.\r\n","includes":["atomicsHelper.js\r"],"features":["Atomics","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/notify/notify-all.js","esid":" sec-atomics.notify\r","description":" >\rTest that Atomics.notify notifies all waiters if that's what the count is.\r\n","includes":["atomicsHelper.js\r"],"features":["Atomics","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/notify/notify-in-order-one-time.js","esid":" sec-atomics.notify\r","description":" >\rTest that Atomics.notify notifies agents in the order they are waiting.\r\n","includes":["atomicsHelper.js\r"],"features":["Atomics","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/notify/notify-in-order.js","esid":" sec-atomics.notify\r","description":" >\rTest that Atomics.notify notifies agents in the order they are waiting.\r\n","includes":["atomicsHelper.js\r"],"features":["Atomics","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/notify/notify-nan.js","esid":" sec-atomics.notify\r","description":" >\rTest that Atomics.nofity nofities zero waiters if the count is NaN\r\n","includes":["atomicsHelper.js\r"],"features":["Atomics","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/notify/notify-one.js","esid":" sec-atomics.notify\r","description":" >\rTest that Atomics.notify notifies one waiter if that's what the count is.\r\n","includes":["atomicsHelper.js\r"],"features":["Atomics","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/notify/notify-renotify-noop.js","esid":" sec-atomics.notify\r","description":" >\rTest that Atomics.notify on awoken waiter is a noop.\r\n","includes":["atomicsHelper.js\r"],"features":["Atomics","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/notify/notify-two.js","esid":" sec-atomics.notify\r","description":" >\rTest that Atomics.notify notifies two waiters if that's what the count is.\r\n","includes":["atomicsHelper.js\r"],"features":["Atomics","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/notify/notify-with-no-agents-waiting.js","esid":" sec-atomics.notify\r","description":" >\rTest that Atomics.notify notifies zero waiters if there are no agents waiting.\r\n","includes":["atomicsHelper.js\r"],"features":["Atomics","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/notify/notify-with-no-matching-agents-waiting.js","esid":" sec-atomics.notify\r","description":" >\rTest that Atomics.notify notifies zero waiters if there are no waiters\r\nat the index specified.\r\n","includes":["atomicsHelper.js\r"],"features":["Atomics","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/notify/notify-zero.js","esid":" sec-atomics.notify\r","description":" >\rTest that Atomics.notify notifies zero waiters if that's what the count is.\r\n","includes":["atomicsHelper.js\r"],"features":["Atomics","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/notify/null-bufferdata-throws.js","esid":" sec-atomics.notify\r","description":" >\rA null value for bufferData (detached) throws a TypeError\r\n","info":" |\rAtomics.notify( typedArray, index, count )\r\n\r\nLet buffer be ? ValidateIntegerTypedArray(typedArray, true).\r\n...\r\n\r\nLet buffer be ? ValidateTypedArray(typedArray).\r\n...\r\n\r\nIf IsDetachedBuffer(buffer) is true, throw a TypeError exception.\r\n...\r\n\r\nIf arrayBuffer.[[ArrayBufferData]] is null, return true.\r\n\r\n","includes":["detachArrayBuffer.js\r"],"features":["ArrayBuffer","Atomics","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/notify/out-of-range-index-throws.js","esid":" sec-atomics.notify\r","description":" >\rThrows a RangeError if value of index arg is out of range\r\ninfo: |\r\nAtomics.notify( typedArray, index, count )\r\n\r\n2.Let i be ? ValidateAtomicAccess(typedArray, index).\r\n...\r\n2.Let accessIndex be ? ToIndex(requestIndex).\r\n...\r\n5. If accessIndex ≥ length, throw a RangeError exception.\r\n","info":" |\rAtomics.notify( typedArray, index, count )\r\n\r\n2.Let i be ? ValidateAtomicAccess(typedArray, index).\r\n...\r\n2.Let accessIndex be ? ToIndex(requestIndex).\r\n...\r\n5. If accessIndex ≥ length, throw a RangeError exception.\r\n","features":["Atomics","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/notify/symbol-for-index-throws.js","esid":" sec-atomics.notify\r","description":" >\rReturn abrupt when ToInteger throws for 'index' argument to Atomics.notify\r\n","info":" |\rAtomics.notify( typedArray, index, value, timeout )\r\n\r\n2. Let i be ? ValidateAtomicAccess(typedArray, index).\r\n\r\nValidateAtomicAccess( typedArray, requestIndex )\r\n\r\n2. Let accessIndex be ? ToIndex(requestIndex).\r\n\r\nToIndex ( value )\r\n\r\n2. Else,\r\na. Let integerIndex be ? ToInteger(value).\r\n\r\nToInteger(value)\r\n\r\n1. Let number be ? ToNumber(argument).\r\n\r\nSymbol --> Throw a TypeError exception.\r\n\r\n","features":["Atomics","SharedArrayBuffer","Symbol","Symbol.toPrimitive","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/notify/undefined-index-defaults-to-zero.js","esid":" sec-atomics.notify\r","description":" >\rAn undefined index arg should translate to 0\r\n","info":" |\rAtomics.notify( typedArray, index, count )\r\n\r\n2.Let i be ? ValidateAtomicAccess(typedArray, index).\r\n...\r\n2.Let accessIndex be ? ToIndex(requestIndex).\r\n\r\n9.If IsSharedArrayBuffer(buffer) is false, throw a TypeError exception.\r\n...\r\n3.If bufferData is a Data Block, return false\r\n\r\nIf value is undefined, then\r\nLet index be 0.\r\n","includes":["atomicsHelper.js\r"],"features":["Atomics","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/notify/validate-arraytype-before-count-coercion.js","esid":" sec-atomics.notify\r","description":" >\rTypedArray type is validated before `count` argument is coerced.\r\n","info":" |\r24.4.12 Atomics.notify ( typedArray, index, count )\r\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray, true).\r\n...\r\n\r\n24.4.1.1 ValidateSharedIntegerTypedArray ( typedArray [ , onlyInt32 ] )\r\n...\r\n4. Let typeName be typedArray.[[TypedArrayName]].\r\n5. If onlyInt32 is true, then\r\na. If typeName is not \"Int32Array\", throw a TypeError exception.\r\n6. Else,\r\na. If typeName is not \"Int8Array\", \"Uint8Array\", \"Int16Array\", \"Uint16Array\", \"Int32Array\",\r\nor \"Uint32Array\", throw a TypeError exception.\r\n...\r\n","features":["Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/notify/validate-arraytype-before-index-coercion.js","esid":" sec-atomics.notify\r","description":" >\rTypedArray type is validated before `index` argument is coerced.\r\n","info":" |\r24.4.12 Atomics.notify ( typedArray, index, count )\r\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray, true).\r\n...\r\n\r\n24.4.1.1 ValidateSharedIntegerTypedArray ( typedArray [ , onlyInt32 ] )\r\n...\r\n4. Let typeName be typedArray.[[TypedArrayName]].\r\n5. If onlyInt32 is true, then\r\na. If typeName is not \"Int32Array\", throw a TypeError exception.\r\n6. Else,\r\na. If typeName is not \"Int8Array\", \"Uint8Array\", \"Int16Array\", \"Uint16Array\", \"Int32Array\",\r\nor \"Uint32Array\", throw a TypeError exception.\r\n...\r\n","features":["Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/wait/false-for-timeout-agent.js","esid":" sec-atomics.wait\r","description":" >\rFalse timeout arg should result in an +0 timeout\r\n","info":" |\rAtomics.wait( typedArray, index, value, timeout )\r\n\r\n4. Let q be ? ToNumber(timeout).\r\n\r\nBoolean -> If argument is true, return 1. If argument is false, return +0.\r\n\r\n","includes":["atomicsHelper.js\r"],"features":["Atomics","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/wait/nan-for-timeout.js","esid":" sec-atomics.wait\r","description":" >\rNaN timeout arg should result in an infinite timeout\r\n","info":" |\rAtomics.wait( typedArray, index, value, timeout )\r\n\r\n4.Let q be ? ToNumber(timeout).\r\n...\r\nUndefinedReturn NaN.\r\n5.If q is NaN, let t be +∞, else let t be max(q, 0)\r\n\r\n","includes":["atomicsHelper.js\r"],"features":["Atomics","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/wait/negative-timeout-agent.js","esid":" sec-atomics.wait\r","description":" >\rTest that Atomics.wait times out with a negative timeout\r\n","includes":["atomicsHelper.js\r"],"features":["Atomics","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/wait/no-spurious-wakeup-no-operation.js","esid":" sec-atomics.wait\r","description":" >\rTest that Atomics.wait returns the right result when it timed out and that\r\nthe time to time out is reasonable.\r\ninfo: |\r\n17. Let awoken be Suspend(WL, W, t).\r\n18. If awoken is true, then\r\na. Assert: W is not on the list of waiters in WL.\r\n19. Else,\r\na.Perform RemoveWaiter(WL, W).\r\n","info":" |\r17. Let awoken be Suspend(WL, W, t).\r\n18. If awoken is true, then\r\na. Assert: W is not on the list of waiters in WL.\r\n19. Else,\r\na.Perform RemoveWaiter(WL, W).\r\n","includes":["atomicsHelper.js\r"],"features":["Atomics","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/wait/no-spurious-wakeup-on-add.js","esid":" sec-atomics.wait\r","description":" >\rWaiter does not spuriously notify on index which is subject to Add operation\r\n","includes":["atomicsHelper.js\r"],"features":["Atomics","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/wait/no-spurious-wakeup-on-and.js","esid":" sec-atomics.wait\r","description":" >\rWaiter does not spuriously notify on index which is subject to And operation\r\n","includes":["atomicsHelper.js\r"],"features":["Atomics","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/wait/no-spurious-wakeup-on-compareExchange.js","esid":" sec-atomics.wait\r","description":" >\rWaiter does not spuriously notify on index which is subject to compareExchange operation\r\n","includes":["atomicsHelper.js\r"],"features":["Atomics","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/wait/no-spurious-wakeup-on-exchange.js","esid":" sec-atomics.wait\r","description":" >\rWaiter does not spuriously notify on index which is subject to exchange operation\r\n","includes":["atomicsHelper.js\r"],"features":["Atomics","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/wait/no-spurious-wakeup-on-or.js","esid":" sec-atomics.wait\r","description":" >\rWaiter does not spuriously notify on index which is subject to Or operation\r\n","includes":["atomicsHelper.js\r"],"features":["Atomics","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/wait/no-spurious-wakeup-on-store.js","esid":" sec-atomics.wait\r","description":" >\rWaiter does not spuriously notify on index which is subject to Store operation\r\n","includes":["atomicsHelper.js\r"],"features":["Atomics","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/wait/no-spurious-wakeup-on-sub.js","esid":" sec-atomics.wait\r","description":" >\rWaiter does not spuriously notify on index which is subject to Sub operation\r\n","includes":["atomicsHelper.js\r"],"features":["Atomics","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/wait/no-spurious-wakeup-on-xor.js","esid":" sec-atomics.wait\r","description":" >\rWaiter does not spuriously notify on index which is subject to xor operation\r\n","includes":["atomicsHelper.js\r"],"features":["Atomics","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/wait/null-for-timeout-agent.js","esid":" sec-atomics.wait\r","description":" >\rFalse timeout arg should result in an +0 timeout\r\n","info":" |\rAtomics.wait( typedArray, index, value, timeout )\r\n\r\n4. Let q be ? ToNumber(timeout).\r\n\r\nNull -> Return +0.\r\n\r\n","includes":["atomicsHelper.js\r"],"features":["Atomics","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/wait/object-for-timeout-agent.js","esid":" sec-atomics.wait\r","description":" >\rFalse timeout arg should result in an +0 timeout\r\n","info":" |\rAtomics.wait( typedArray, index, value, timeout )\r\n\r\n4. Let q be ? ToNumber(timeout).\r\n\r\nNull -> Return +0.\r\n\r\n","includes":["atomicsHelper.js\r"],"features":["Atomics","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/wait/poisoned-object-for-timeout-throws-agent.js","esid":" sec-atomics.wait\r","description":" >\rFalse timeout arg should result in an +0 timeout\r\n","info":" |\rAtomics.wait( typedArray, index, value, timeout )\r\n\r\n4. Let q be ? ToNumber(timeout).\r\n\r\nNull -> Return +0.\r\n\r\n","includes":["atomicsHelper.js\r"],"features":["Atomics","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/wait/symbol-for-index-throws-agent.js","esid":" sec-atomics.wait\r","description":" >\rThrows a TypeError if index arg can not be converted to an Integer\r\n","info":" |\rAtomics.wait( typedArray, index, value, timeout )\r\n\r\n2. Let i be ? ValidateAtomicAccess(typedArray, index).\r\n\r\nValidateAtomicAccess( typedArray, requestIndex )\r\n\r\n2. Let accessIndex be ? ToIndex(requestIndex).\r\n\r\nToIndex ( value )\r\n\r\n2. Else,\r\na. Let integerIndex be ? ToInteger(value).\r\n\r\nToInteger(value)\r\n\r\n1. Let number be ? ToNumber(argument).\r\n\r\nSymbol --> Throw a TypeError exception.\r\n\r\n","includes":["atomicsHelper.js\r"],"features":["Atomics","SharedArrayBuffer","Symbol","Symbol.toPrimitive","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/wait/symbol-for-timeout-throws-agent.js","esid":" sec-atomics.wait\r","description":" >\rThrows a TypeError if index arg can not be converted to an Integer\r\n","info":" |\rAtomics.wait( typedArray, index, value, timeout )\r\n\r\n4. Let q be ? ToNumber(timeout).\r\n\r\nSymbol --> Throw a TypeError exception.\r\n\r\n","includes":["atomicsHelper.js\r"],"features":["Atomics","SharedArrayBuffer","Symbol","Symbol.toPrimitive","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/wait/symbol-for-value-throws-agent.js","esid":" sec-atomics.wait\r","description":" >\rThrows a TypeError if value arg is a Symbol\r\n","info":" |\rAtomics.wait( typedArray, index, value, timeout )\r\n\r\n3. Let v be ? ToInt32(value).\r\n\r\nToInt32(value)\r\n\r\n1.Let number be ? ToNumber(argument).\r\n\r\nSymbol --> Throw a TypeError exception.\r\n\r\n","includes":["atomicsHelper.js\r"],"features":["Atomics","SharedArrayBuffer","Symbol","Symbol.toPrimitive","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/wait/true-for-timeout-agent.js","esid":" sec-atomics.wait\r","description":" >\rTrue timeout arg should result in an +0 timeout\r\n","info":" |\rAtomics.wait( typedArray, index, value, timeout )\r\n\r\n4. Let q be ? ToNumber(timeout).\r\n\r\nBoolean -> If argument is true, return 1. If argument is false, return +0.\r\n\r\n","includes":["atomicsHelper.js\r"],"features":["Atomics","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/wait/undefined-for-timeout.js","esid":" sec-atomics.wait\r","description":" >\rUndefined timeout arg should result in an infinite timeout\r\n","info":" |\rAtomics.wait( typedArray, index, value, timeout )\r\n\r\n4.Let q be ? ToNumber(timeout).\r\n...\r\nUndefinedReturn NaN.\r\n5.If q is NaN, let t be +∞, else let t be max(q, 0)\r\n\r\n","includes":["atomicsHelper.js\r"],"features":["Atomics","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/wait/undefined-index-defaults-to-zero.js","esid":" sec-atomics.wait\r","description":" >\rAn undefined index arg should translate to 0\r\n","info":" |\rAtomics.wait( typedArray, index, value, timeout )\r\n\r\n2.Let i be ? ValidateAtomicAccess(typedArray, index).\r\n...\r\n2.Let accessIndex be ? ToIndex(requestIndex).\r\n\r\n9.If IsSharedArrayBuffer(buffer) is false, throw a TypeError exception.\r\n...\r\n3.If bufferData is a Data Block, return false\r\n\r\nIf value is undefined, then\r\nLet index be 0.\r\n\r\n","includes":["atomicsHelper.js\r"],"features":["Atomics","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/wait/wait-index-value-not-equal.js","esid":" sec-atomics.wait\r","description":" >\rReturns \"not-equal\" when value of index is not equal\r\n","info":" |\rAtomics.wait( typedArray, index, value, timeout )\r\n\r\n14.If v is not equal to w, then\r\na.Perform LeaveCriticalSection(WL).\r\nb. Return the String \"not-equal\".\r\n\r\n","includes":["atomicsHelper.js\r"],"features":["Atomics","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/wait/waiterlist-block-indexedposition-wake.js","esid":" sec-atomics.wait\r","description":" >\rGet the correct WaiterList\r\n","info":" |\rAtomics.wait( typedArray, index, value, timeout )\r\n\r\n...\r\n11. Let WL be GetWaiterList(block, indexedPosition).\r\n...\r\n\r\n\r\nGetWaiterList( block, i )\r\n\r\n...\r\n4. Return the WaiterList that is referenced by the pair (block, i).\r\n\r\n","includes":["atomicsHelper.js\r"],"features":["Atomics","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/wait/waiterlist-order-of-operations-is-fifo.js","esid":" sec-atomics.wait\r","description":" >\rNew waiters should be applied to the end of the list and woken by order they entered the list (FIFO)\r\n","info":" |\rAtomics.wait( typedArray, index, value, timeout )\r\n\r\n16.Perform AddWaiter(WL, W).\r\n...\r\n3.Add W to the end of the list of waiters in WL.\r\n\r\n","includes":["atomicsHelper.js\r"],"features":["Atomics","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/wait/was-woken-before-timeout.js","esid":" sec-atomics.wait\r","description":" >\rTest that Atomics.wait returns the right result when it was awoken before\r\na timeout\r\n","info":" |\rAtomics.wait( typedArray, index, value, timeout )\r\n\r\n2.Let i be ? ValidateAtomicAccess(typedArray, index).\r\n...\r\n2.Let accessIndex be ? ToIndex(requestIndex).\r\n\r\n9.If IsSharedArrayBuffer(buffer) is false, throw a TypeError exception.\r\n...\r\n3.If bufferData is a Data Block, return false\r\n\r\nIf value is undefined, then\r\nLet index be 0.\r\n","includes":["atomicsHelper.js\r"],"features":["Atomics","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/false-for-timeout-agent.js","esid":" sec-atomics.waitasync\r","description":" >\rFalse timeout arg should result in an +0 timeout\r\n","info":" |\rAtomics.waitAsync( typedArray, index, value, timeout )\r\n\r\n1. Return DoWait(async, typedArray, index, value, timeout).\r\n\r\nDoWait ( mode, typedArray, index, value, timeout )\r\n\r\n6. Let q be ? ToNumber(timeout).\r\n\r\n","flags":["async\r"],"includes":["atomicsHelper.js\r"],"features":["Atomics.waitAsync","SharedArrayBuffer","TypedArray","Atomics","arrow-function","async-functions\r"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/implicit-infinity-for-timeout.js","esid":" sec-atomics.waitasync\r","description":" >\rUndefined timeout arg is coerced to zero\r\n","info":" |\rAtomics.waitAsync( typedArray, index, value, timeout )\r\n\r\n1. Return DoWait(async, typedArray, index, value, timeout).\r\n\r\nDoWait ( mode, typedArray, index, value, timeout )\r\n\r\n6. Let q be ? ToNumber(timeout).\r\n...\r\nUndefinedReturn NaN.\r\n\r\n5.If q is NaN, let t be +∞, else let t be max(q, 0)\r\n\r\n","flags":["async\r"],"features":["Atomics.waitAsync","SharedArrayBuffer","TypedArray","Atomics","computed-property-names","Symbol","Symbol.toPrimitive","arrow-function\r"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/nan-for-timeout-agent.js","esid":" sec-atomics.waitasync\r","description":" >\rNaN timeout arg should result in an infinite timeout\r\n","info":" |\rAtomics.waitAsync( typedArray, index, value, timeout )\r\n\r\n1. Return DoWait(async, typedArray, index, value, timeout).\r\n\r\nDoWait ( mode, typedArray, index, value, timeout )\r\n\r\n6. Let q be ? ToNumber(timeout).\r\n\r\n","flags":["async\r"],"includes":["atomicsHelper.js\r"],"features":["Atomics.waitAsync","SharedArrayBuffer","TypedArray","Atomics","arrow-function","async-functions\r"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/negative-timeout-agent.js","esid":" sec-atomics.waitasync\r","description":" >\rTest that Atomics.waitAsync times out with a negative timeout\r\n","info":" |\rAtomics.waitAsync( typedArray, index, value, timeout )\r\n\r\n1. Return DoWait(async, typedArray, index, value, timeout).\r\n\r\nDoWait ( mode, typedArray, index, value, timeout )\r\n\r\n6. Let q be ? ToNumber(timeout).\r\n\r\n","flags":["async\r"],"includes":["atomicsHelper.js\r"],"features":["Atomics.waitAsync","SharedArrayBuffer","TypedArray","Atomics","arrow-function","async-functions\r"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/no-spurious-wakeup-no-operation.js","esid":" sec-atomics.waitasync\r","description":" >\rTest that Atomics.waitAsync returns the right result when it timed out and that\r\nthe time to time out is reasonable.\r\n","info":" |\rAddWaiter ( WL, waiterRecord )\r\n\r\n5. Append waiterRecord as the last element of WL.[[Waiters]]\r\n6. If waiterRecord.[[Timeout]] is finite, then in parallel,\r\na. Wait waiterRecord.[[Timeout]] milliseconds.\r\nb. Perform TriggerTimeout(WL, waiterRecord).\r\n\r\nTriggerTimeout( WL, waiterRecord )\r\n\r\n3. If waiterRecord is in WL.[[Waiters]], then\r\na. Set waiterRecord.[[Result]] to \"timed-out\".\r\nb. Perform RemoveWaiter(WL, waiterRecord).\r\nc. Perform NotifyWaiter(WL, waiterRecord).\r\n4. Perform LeaveCriticalSection(WL).\r\n\r\n","flags":["async\r"],"includes":["atomicsHelper.js\r"],"features":["Atomics.waitAsync","SharedArrayBuffer","TypedArray","Atomics","arrow-function","async-functions\r"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/no-spurious-wakeup-on-add.js","esid":" sec-atomics.waitasync\r","description":" >\rWaiter does not spuriously notify on index which is subject to Add operation\r\n","info":" |\rAddWaiter ( WL, waiterRecord )\r\n\r\n5. Append waiterRecord as the last element of WL.[[Waiters]]\r\n6. If waiterRecord.[[Timeout]] is finite, then in parallel,\r\na. Wait waiterRecord.[[Timeout]] milliseconds.\r\nb. Perform TriggerTimeout(WL, waiterRecord).\r\n\r\nTriggerTimeout( WL, waiterRecord )\r\n\r\n3. If waiterRecord is in WL.[[Waiters]], then\r\na. Set waiterRecord.[[Result]] to \"timed-out\".\r\nb. Perform RemoveWaiter(WL, waiterRecord).\r\nc. Perform NotifyWaiter(WL, waiterRecord).\r\n4. Perform LeaveCriticalSection(WL).\r\n\r\n","flags":["async\r"],"includes":["atomicsHelper.js\r"],"features":["Atomics.waitAsync","SharedArrayBuffer","TypedArray","Atomics","arrow-function","async-functions\r"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/no-spurious-wakeup-on-and.js","esid":" sec-atomics.waitasync\r","description":" >\rWaiter does not spuriously notify on index which is subject to And operation\r\n","info":" |\rAddWaiter ( WL, waiterRecord )\r\n\r\n5. Append waiterRecord as the last element of WL.[[Waiters]]\r\n6. If waiterRecord.[[Timeout]] is finite, then in parallel,\r\na. Wait waiterRecord.[[Timeout]] milliseconds.\r\nb. Perform TriggerTimeout(WL, waiterRecord).\r\n\r\nTriggerTimeout( WL, waiterRecord )\r\n\r\n3. If waiterRecord is in WL.[[Waiters]], then\r\na. Set waiterRecord.[[Result]] to \"timed-out\".\r\nb. Perform RemoveWaiter(WL, waiterRecord).\r\nc. Perform NotifyWaiter(WL, waiterRecord).\r\n4. Perform LeaveCriticalSection(WL).\r\n\r\n","flags":["async\r"],"includes":["atomicsHelper.js\r"],"features":["Atomics.waitAsync","SharedArrayBuffer","TypedArray","Atomics","arrow-function","async-functions\r"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/no-spurious-wakeup-on-compareExchange.js","esid":" sec-atomics.waitasync\r","description":" >\rWaiter does not spuriously notify on index which is subject to compareExchange operation\r\n","info":" |\rAddWaiter ( WL, waiterRecord )\r\n\r\n5. Append waiterRecord as the last element of WL.[[Waiters]]\r\n6. If waiterRecord.[[Timeout]] is finite, then in parallel,\r\na. Wait waiterRecord.[[Timeout]] milliseconds.\r\nb. Perform TriggerTimeout(WL, waiterRecord).\r\n\r\nTriggerTimeout( WL, waiterRecord )\r\n\r\n3. If waiterRecord is in WL.[[Waiters]], then\r\na. Set waiterRecord.[[Result]] to \"timed-out\".\r\nb. Perform RemoveWaiter(WL, waiterRecord).\r\nc. Perform NotifyWaiter(WL, waiterRecord).\r\n4. Perform LeaveCriticalSection(WL).\r\n\r\n","flags":["async\r"],"includes":["atomicsHelper.js\r"],"features":["Atomics.waitAsync","SharedArrayBuffer","TypedArray","Atomics","arrow-function","async-functions\r"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/no-spurious-wakeup-on-exchange.js","esid":" sec-atomics.waitasync\r","description":" >\rWaiter does not spuriously notify on index which is subject to exchange operation\r\n","info":" |\rAddWaiter ( WL, waiterRecord )\r\n\r\n5. Append waiterRecord as the last element of WL.[[Waiters]]\r\n6. If waiterRecord.[[Timeout]] is finite, then in parallel,\r\na. Wait waiterRecord.[[Timeout]] milliseconds.\r\nb. Perform TriggerTimeout(WL, waiterRecord).\r\n\r\nTriggerTimeout( WL, waiterRecord )\r\n\r\n3. If waiterRecord is in WL.[[Waiters]], then\r\na. Set waiterRecord.[[Result]] to \"timed-out\".\r\nb. Perform RemoveWaiter(WL, waiterRecord).\r\nc. Perform NotifyWaiter(WL, waiterRecord).\r\n4. Perform LeaveCriticalSection(WL).\r\n\r\n","flags":["async\r"],"includes":["atomicsHelper.js\r"],"features":["Atomics.waitAsync","SharedArrayBuffer","TypedArray","Atomics","arrow-function","async-functions\r"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/no-spurious-wakeup-on-or.js","esid":" sec-atomics.waitasync\r","description":" >\rWaiter does not spuriously notify on index which is subject to Or operation\r\n","info":" |\rAddWaiter ( WL, waiterRecord )\r\n\r\n5. Append waiterRecord as the last element of WL.[[Waiters]]\r\n6. If waiterRecord.[[Timeout]] is finite, then in parallel,\r\na. Wait waiterRecord.[[Timeout]] milliseconds.\r\nb. Perform TriggerTimeout(WL, waiterRecord).\r\n\r\nTriggerTimeout( WL, waiterRecord )\r\n\r\n3. If waiterRecord is in WL.[[Waiters]], then\r\na. Set waiterRecord.[[Result]] to \"timed-out\".\r\nb. Perform RemoveWaiter(WL, waiterRecord).\r\nc. Perform NotifyWaiter(WL, waiterRecord).\r\n4. Perform LeaveCriticalSection(WL).\r\n\r\n","flags":["async\r"],"includes":["atomicsHelper.js\r"],"features":["Atomics.waitAsync","SharedArrayBuffer","TypedArray","Atomics","arrow-function","async-functions\r"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/no-spurious-wakeup-on-store.js","esid":" sec-atomics.waitasync\r","description":" >\rWaiter does not spuriously notify on index which is subject to Store operation\r\n","info":" |\rAddWaiter ( WL, waiterRecord )\r\n\r\n5. Append waiterRecord as the last element of WL.[[Waiters]]\r\n6. If waiterRecord.[[Timeout]] is finite, then in parallel,\r\na. Wait waiterRecord.[[Timeout]] milliseconds.\r\nb. Perform TriggerTimeout(WL, waiterRecord).\r\n\r\nTriggerTimeout( WL, waiterRecord )\r\n\r\n3. If waiterRecord is in WL.[[Waiters]], then\r\na. Set waiterRecord.[[Result]] to \"timed-out\".\r\nb. Perform RemoveWaiter(WL, waiterRecord).\r\nc. Perform NotifyWaiter(WL, waiterRecord).\r\n4. Perform LeaveCriticalSection(WL).\r\n\r\n","flags":["async\r"],"includes":["atomicsHelper.js\r"],"features":["Atomics.waitAsync","SharedArrayBuffer","TypedArray","Atomics","arrow-function","async-functions\r"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/no-spurious-wakeup-on-sub.js","esid":" sec-atomics.waitasync\r","description":" >\rWaiter does not spuriously notify on index which is subject to Sub operation\r\n","info":" |\rAddWaiter ( WL, waiterRecord )\r\n\r\n5. Append waiterRecord as the last element of WL.[[Waiters]]\r\n6. If waiterRecord.[[Timeout]] is finite, then in parallel,\r\na. Wait waiterRecord.[[Timeout]] milliseconds.\r\nb. Perform TriggerTimeout(WL, waiterRecord).\r\n\r\nTriggerTimeout( WL, waiterRecord )\r\n\r\n3. If waiterRecord is in WL.[[Waiters]], then\r\na. Set waiterRecord.[[Result]] to \"timed-out\".\r\nb. Perform RemoveWaiter(WL, waiterRecord).\r\nc. Perform NotifyWaiter(WL, waiterRecord).\r\n4. Perform LeaveCriticalSection(WL).\r\n\r\n","flags":["async\r"],"includes":["atomicsHelper.js\r"],"features":["Atomics.waitAsync","SharedArrayBuffer","TypedArray","Atomics","arrow-function","async-functions\r"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/no-spurious-wakeup-on-xor.js","esid":" sec-atomics.waitasync\r","description":" >\rWaiter does not spuriously notify on index which is subject to xor operation\r\n","info":" |\rAddWaiter ( WL, waiterRecord )\r\n\r\n5. Append waiterRecord as the last element of WL.[[Waiters]]\r\n6. If waiterRecord.[[Timeout]] is finite, then in parallel,\r\na. Wait waiterRecord.[[Timeout]] milliseconds.\r\nb. Perform TriggerTimeout(WL, waiterRecord).\r\n\r\nTriggerTimeout( WL, waiterRecord )\r\n\r\n3. If waiterRecord is in WL.[[Waiters]], then\r\na. Set waiterRecord.[[Result]] to \"timed-out\".\r\nb. Perform RemoveWaiter(WL, waiterRecord).\r\nc. Perform NotifyWaiter(WL, waiterRecord).\r\n4. Perform LeaveCriticalSection(WL).\r\n\r\n","flags":["async\r"],"includes":["atomicsHelper.js\r"],"features":["Atomics.waitAsync","SharedArrayBuffer","TypedArray","Atomics","arrow-function","async-functions\r"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/null-for-timeout-agent.js","esid":" sec-atomics.waitasync\r","description":" >\rnull timeout arg should result in an +0 timeout\r\n","info":" |\rAtomics.waitAsync( typedArray, index, value, timeout )\r\n\r\n1. Return DoWait(async, typedArray, index, value, timeout).\r\n\r\nDoWait ( mode, typedArray, index, value, timeout )\r\n\r\n6. Let q be ? ToNumber(timeout).\r\n\r\nNull -> Return +0.\r\n\r\n","flags":["async\r"],"includes":["atomicsHelper.js\r"],"features":["Atomics.waitAsync","SharedArrayBuffer","TypedArray","Atomics","arrow-function","async-functions\r"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/object-for-timeout-agent.js","esid":" sec-atomics.waitasync\r","description":" >\rObject valueOf, toString, toPrimitive Zero timeout arg should result in an +0 timeout\r\n","info":" |\rAtomics.waitAsync( typedArray, index, value, timeout )\r\n\r\n1. Return DoWait(async, typedArray, index, value, timeout).\r\n\r\nDoWait ( mode, typedArray, index, value, timeout )\r\n\r\n6. Let q be ? ToNumber(timeout).\r\n\r\nObject -> Apply the following steps:\r\n\r\nLet primValue be ? ToPrimitive(argument, hint Number).\r\nReturn ? ToNumber(primValue).\r\n\r\n","flags":["async\r"],"includes":["atomicsHelper.js\r"],"features":["Atomics.waitAsync","SharedArrayBuffer","TypedArray","Atomics","arrow-function","async-functions\r"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/poisoned-object-for-timeout-throws-agent.js","esid":" sec-atomics.waitasync\r","description":" >\rFalse timeout arg should result in an +0 timeout\r\n","info":" |\rAtomics.waitAsync( typedArray, index, value, timeout )\r\n\r\n1. Return DoWait(async, typedArray, index, value, timeout).\r\n\r\nDoWait ( mode, typedArray, index, value, timeout )\r\n\r\n6. Let q be ? ToNumber(timeout).\r\n\r\nLet primValue be ? ToPrimitive(argument, hint Number).\r\nReturn ? ToNumber(primValue).\r\n\r\n","flags":["async\r"],"includes":["atomicsHelper.js\r"],"features":["Atomics.waitAsync","SharedArrayBuffer","TypedArray","Atomics","arrow-function","async-functions\r"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/returns-result-object-value-is-promise-resolves-to-ok.js","esid":" sec-atomics.waitasync\r","description":" >\rAtomics.waitAsync returns a result object containing a property named \"value\" whose value is a promise that resolves to \"ok\" and async is true.\r\n","info":" |\rAtomics.waitAsync( typedArray, index, value, timeout )\r\n\r\n1. Return DoWait(async, typedArray, index, value, timeout).\r\n\r\nDoWait ( mode, typedArray, index, value, timeout )\r\n\r\n...\r\n13. Let promiseCapability be undefined.\r\n14. If mode is async, then\r\na. Set promiseCapability to ! NewPromiseCapability(%Promise%).\r\n\r\n...\r\nPerform ! CreateDataPropertyOrThrow(_resultObject_, *\"async\"*, *true*).\r\nPerform ! CreateDataPropertyOrThrow(_resultObject_, *\"value\"*, _promiseCapability_.[[Promise]]).\r\nReturn _resultObject_.\r\n\r\n","flags":["async\r"],"features":["Atomics.waitAsync","TypedArray","SharedArrayBuffer","destructuring-binding","Atomics","arrow-function\r"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/symbol-for-index-throws-agent.js","esid":" sec-atomics.waitasync\r","description":" >\rThrows a TypeError if index arg can not be converted to an Integer\r\n","info":" |\rAtomics.waitAsync( typedArray, index, value, timeout )\r\n\r\n1. Return DoWait(async, typedArray, index, value, timeout).\r\n\r\nDoWait ( mode, typedArray, index, value, timeout )\r\n\r\n2. Let i be ? ValidateAtomicAccess(typedArray, index).\r\n\r\nValidateAtomicAccess( typedArray, requestIndex )\r\n\r\n2. Let accessIndex be ? ToIndex(requestIndex).\r\n\r\nToIndex ( value )\r\n\r\n2. Else,\r\na. Let integerIndex be ? ToInteger(value).\r\n\r\nToInteger(value)\r\n\r\n1. Let number be ? ToNumber(argument).\r\n\r\nSymbol --> Throw a TypeError exception.\r\n\r\n","flags":["async\r"],"includes":["atomicsHelper.js\r"],"features":["Atomics.waitAsync","SharedArrayBuffer","Symbol","Symbol.toPrimitive","TypedArray","Atomics","arrow-function","async-functions\r"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/symbol-for-timeout-throws-agent.js","esid":" sec-atomics.waitasync\r","description":" >\rThrows a TypeError if index arg can not be converted to an Integer\r\n","info":" |\rAtomics.waitAsync( typedArray, index, value, timeout )\r\n\r\n1. Return DoWait(async, typedArray, index, value, timeout).\r\n\r\nDoWait ( mode, typedArray, index, value, timeout )\r\n\r\n6. Let q be ? ToNumber(timeout).\r\n\r\nSymbol --> Throw a TypeError exception.\r\n\r\n","flags":["async\r"],"includes":["atomicsHelper.js\r"],"features":["Atomics.waitAsync","SharedArrayBuffer","Symbol","Symbol.toPrimitive","TypedArray","Atomics","arrow-function","async-functions\r"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/symbol-for-value-throws-agent.js","esid":" sec-atomics.waitasync\r","description":" >\rThrows a TypeError if value arg is a Symbol\r\n","info":" |\rAtomics.waitAsync( typedArray, index, value, timeout )\r\n\r\n1. Return DoWait(async, typedArray, index, value, timeout).\r\n\r\nDoWait ( mode, typedArray, index, value, timeout )\r\n\r\n5. Otherwise, let v be ? ToInt32(value).\r\n\r\nToInt32(value)\r\n\r\n1.Let number be ? ToNumber(argument).\r\n\r\nSymbol --> Throw a TypeError exception.\r\n\r\n","flags":["async\r"],"includes":["atomicsHelper.js\r"],"features":["Atomics.waitAsync","SharedArrayBuffer","Symbol","Symbol.toPrimitive","TypedArray","Atomics","arrow-function","async-functions\r"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/true-for-timeout-agent.js","esid":" sec-atomics.waitasync\r","description":" >\rTrue timeout arg should result in an +0 timeout\r\n","info":" |\rAtomics.waitAsync( typedArray, index, value, timeout )\r\n\r\n1. Return DoWait(async, typedArray, index, value, timeout).\r\n\r\nDoWait ( mode, typedArray, index, value, timeout )\r\n\r\n6. Let q be ? ToNumber(timeout).\r\n\r\n","flags":["async\r"],"includes":["atomicsHelper.js\r"],"features":["Atomics.waitAsync","SharedArrayBuffer","TypedArray","Atomics","arrow-function","async-functions\r"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/undefined-for-timeout-agent.js","esid":" sec-atomics.waitasync\r","description":" >\rUndefined timeout arg is coerced to zero\r\n","info":" |\rAtomics.waitAsync( typedArray, index, value, timeout )\r\n\r\n1. Return DoWait(async, typedArray, index, value, timeout).\r\n\r\nDoWait ( mode, typedArray, index, value, timeout )\r\n\r\n6. Let q be ? ToNumber(timeout).\r\n...\r\nUndefinedReturn NaN.\r\n\r\n5.If q is NaN, let t be +∞, else let t be max(q, 0)\r\n\r\n","flags":["async\r"],"includes":["atomicsHelper.js\r"],"features":["Atomics.waitAsync","SharedArrayBuffer","TypedArray","Atomics","arrow-function","async-functions\r"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/undefined-for-timeout.js","esid":" sec-atomics.waitasync\r","description":" >\rUndefined timeout arg is coerced to zero\r\n","info":" |\rAtomics.waitAsync( typedArray, index, value, timeout )\r\n\r\n1. Return DoWait(async, typedArray, index, value, timeout).\r\n\r\nDoWait ( mode, typedArray, index, value, timeout )\r\n\r\n6. Let q be ? ToNumber(timeout).\r\n...\r\nUndefinedReturn NaN.\r\n\r\n5.If q is NaN, let t be +∞, else let t be max(q, 0)\r\n\r\n","flags":["async\r"],"features":["Atomics.waitAsync","SharedArrayBuffer","TypedArray","Atomics","computed-property-names","Symbol","Symbol.toPrimitive","arrow-function\r"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/undefined-index-defaults-to-zero-agent.js","esid":" sec-atomics.waitasync\r","description":" >\rUndefined index arg is coerced to zero\r\n","info":" |\rAtomics.waitAsync( typedArray, index, value, timeout )\r\n\r\n1. Return DoWait(async, typedArray, index, value, timeout).\r\n\r\nDoWait ( mode, typedArray, index, value, timeout )\r\n\r\n2. Let i be ? ValidateAtomicAccess(typedArray, index).\r\n...\r\n2.Let accessIndex be ? ToIndex(requestIndex).\r\n\r\n9.If IsSharedArrayBuffer(buffer) is false, throw a TypeError exception.\r\n...\r\n3.If bufferData is a Data Block, return false\r\n\r\nIf value is undefined, then\r\nLet index be 0.\r\n\r\n","flags":["async\r"],"includes":["atomicsHelper.js\r"],"features":["Atomics.waitAsync","SharedArrayBuffer","TypedArray","Atomics","arrow-function","async-functions\r"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/value-not-equal-agent.js","esid":" sec-atomics.waitasync\r","description":" >\rReturns \"not-equal\" when value arg does not match an index in the typedArray\r\n","info":" |\rAtomics.waitAsync( typedArray, index, value, timeout )\r\n\r\n1. Return DoWait(async, typedArray, index, value, timeout).\r\n\r\nDoWait ( mode, typedArray, index, value, timeout )\r\n\r\n16. Let w be ! AtomicLoad(typedArray, i).\r\n17. If v is not equal to w, then\r\na. Perform LeaveCriticalSection(WL).\r\nb. If mode is sync, then\r\ni. Return the String \"not-equal\".\r\nc. Perform ! Call(capability.[[Resolve]], undefined, « \"not-equal\" »).\r\nd. Return promiseCapability.[[Promise]].\r\n\r\n","flags":["async\r"],"includes":["atomicsHelper.js\r"],"features":["Atomics.waitAsync","SharedArrayBuffer","TypedArray","Atomics","arrow-function","async-functions\r"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/waiterlist-block-indexedposition-wake.js","esid":" sec-atomics.waitasync\r","description":" >\rGet the correct WaiterList\r\n","info":" |\rAtomics.waitAsync( typedArray, index, value, timeout )\r\n\r\n1. Return DoWait(async, typedArray, index, value, timeout).\r\n\r\nDoWait ( mode, typedArray, index, value, timeout )\r\n\r\n11. Let indexedPosition be (i × 4) + offset.\r\n12. Let WL be GetWaiterList(block, indexedPosition).\r\n\r\nGetWaiterList( block, i )\r\n\r\n...\r\n4. Return the WaiterList that is referenced by the pair (block, i).\r\n\r\n","flags":["async\r"],"includes":["atomicsHelper.js\r"],"features":["Atomics.waitAsync","SharedArrayBuffer","TypedArray","Atomics","arrow-function","async-functions\r"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/was-woken-before-timeout.js","esid":" sec-atomics.waitasync\r","description":" >\rTest that Atomics.waitAsync returns the right result when it was awoken before\r\na timeout\r\n","flags":["async\r"],"includes":["atomicsHelper.js\r"],"features":["Atomics.waitAsync","SharedArrayBuffer","TypedArray","Atomics","arrow-function","async-functions\r"]},{"path":"./test262/test/built-ins/Object/fromEntries/empty-iterable.js","esid":" sec-object.fromentries\r","description":" When given an empty list, makes an empty object.\r","info":" |\rObject.fromEntries ( iterable )\r\n\r\n...\r\n4. Let stepsDefine be the algorithm steps defined in CreateDataPropertyOnObject Functions.\r\n5. Let adder be CreateBuiltinFunction(stepsDefine, « »).\r\n6. Return ? AddEntriesFromIterable(obj, iterable, adder).\r\n\r\n","features":["Object.fromEntries\r"]},{"path":"./test262/test/built-ins/Object/fromEntries/evaluation-order.js","esid":" sec-object.fromentries\r","description":" Evaluation order is iterator.next(), get '0', get '1', toPropertyKey, repeat.\r","info":" |\rObject.fromEntries ( iterable )\r\n\r\n...\r\n4. Let stepsDefine be the algorithm steps defined in CreateDataPropertyOnObject Functions.\r\n5. Let adder be CreateBuiltinFunction(stepsDefine, « »).\r\n6. Return ? AddEntriesFromIterable(obj, iterable, adder).\r\n\r\n","includes":["compareArray.js\r"],"features":["Symbol.iterator","Object.fromEntries\r"]},{"path":"./test262/test/built-ins/Object/fromEntries/iterator-closed-for-null-entry.js","esid":" sec-object.fromentries\r","description":" Closes iterators when they return entries which are null.\r","info":" |\rObject.fromEntries ( iterable )\r\n\r\n...\r\n4. Let stepsDefine be the algorithm steps defined in CreateDataPropertyOnObject Functions.\r\n5. Let adder be CreateBuiltinFunction(stepsDefine, « »).\r\n6. Return ? AddEntriesFromIterable(obj, iterable, adder).\r\n\r\nAddEntriesFromIterable ( target, iterable, adder )\r\n\r\n...\r\n4. Repeat,\r\n...\r\nd. If Type(nextItem) is not Object, then\r\ni. Let error be ThrowCompletion(a newly created TypeError object).\r\nii. Return ? IteratorClose(iteratorRecord, error).\r\n\r\n","features":["Symbol.iterator","Object.fromEntries\r"]},{"path":"./test262/test/built-ins/Object/fromEntries/iterator-closed-for-string-entry.js","esid":" sec-object.fromentries\r","description":" Closes iterators when they return entries which are strings.\r","info":" |\rObject.fromEntries ( iterable )\r\n\r\n...\r\n4. Let stepsDefine be the algorithm steps defined in CreateDataPropertyOnObject Functions.\r\n5. Let adder be CreateBuiltinFunction(stepsDefine, « »).\r\n6. Return ? AddEntriesFromIterable(obj, iterable, adder).\r\n\r\nAddEntriesFromIterable ( target, iterable, adder )\r\n\r\n...\r\n4. Repeat,\r\n...\r\nd. If Type(nextItem) is not Object, then\r\ni. Let error be ThrowCompletion(a newly created TypeError object).\r\nii. Return ? IteratorClose(iteratorRecord, error).\r\n\r\n","features":["Symbol.iterator","Object.fromEntries\r"]},{"path":"./test262/test/built-ins/Object/fromEntries/iterator-closed-for-throwing-entry-key-accessor.js","esid":" sec-object.fromentries\r","description":" Closes iterators when accessing an entry's key throws.\r","info":" |\rObject.fromEntries ( iterable )\r\n\r\n...\r\n4. Let stepsDefine be the algorithm steps defined in CreateDataPropertyOnObject Functions.\r\n5. Let adder be CreateBuiltinFunction(stepsDefine, « »).\r\n6. Return ? AddEntriesFromIterable(obj, iterable, adder).\r\n\r\nAddEntriesFromIterable ( target, iterable, adder )\r\n\r\n...\r\n4. Repeat,\r\n...\r\ne. Let k be Get(nextItem, \"0\").\r\nf. If k is an abrupt completion, return ? IteratorClose(iteratorRecord, k).\r\n\r\n","features":["Symbol.iterator","Object.fromEntries\r"]},{"path":"./test262/test/built-ins/Object/fromEntries/iterator-closed-for-throwing-entry-key-tostring.js","esid":" sec-object.fromentries\r","description":" Closes iterators when toString on a key throws.\r","info":" |\rObject.fromEntries ( iterable )\r\n\r\n...\r\n4. Let stepsDefine be the algorithm steps defined in CreateDataPropertyOnObject Functions.\r\n5. Let adder be CreateBuiltinFunction(stepsDefine, « »).\r\n6. Return ? AddEntriesFromIterable(obj, iterable, adder).\r\n\r\nAddEntriesFromIterable ( target, iterable, adder )\r\n\r\n...\r\n4. Repeat,\r\n...\r\ne. Let k be Get(nextItem, \"0\").\r\nf. If k is an abrupt completion, return ? IteratorClose(iteratorRecord, k).\r\n\r\n","features":["Symbol.iterator","Object.fromEntries\r"]},{"path":"./test262/test/built-ins/Object/fromEntries/iterator-closed-for-throwing-entry-value-accessor.js","esid":" sec-object.fromentries\r","description":" Closes iterators when accessing an entry's value throws.\r","info":" |\rObject.fromEntries ( iterable )\r\n\r\n...\r\n4. Let stepsDefine be the algorithm steps defined in CreateDataPropertyOnObject Functions.\r\n5. Let adder be CreateBuiltinFunction(stepsDefine, « »).\r\n6. Return ? AddEntriesFromIterable(obj, iterable, adder).\r\n\r\nAddEntriesFromIterable ( target, iterable, adder )\r\n\r\n...\r\n4. Repeat,\r\n...\r\ng. Let v be Get(nextItem, \"1\").\r\nh. If v is an abrupt completion, return ? IteratorClose(iteratorRecord, v).\r\n\r\n","features":["Symbol.iterator","Object.fromEntries\r"]},{"path":"./test262/test/built-ins/Object/fromEntries/iterator-not-closed-for-next-returning-non-object.js","esid":" sec-object.fromentries\r","description":" Does not close iterators with a `next` method which returns a non-object.\r","info":" |\rObject.fromEntries ( iterable )\r\n\r\n...\r\n4. Let stepsDefine be the algorithm steps defined in CreateDataPropertyOnObject Functions.\r\n5. Let adder be CreateBuiltinFunction(stepsDefine, « »).\r\n6. Return ? AddEntriesFromIterable(obj, iterable, adder).\r\n\r\nAddEntriesFromIterable ( target, iterable, adder )\r\n\r\n...\r\n4. Repeat,\r\na. Let next be ? IteratorStep(iteratorRecord).\r\n\r\n\r\nIteratorStep ( iteratorRecord )\r\n\r\n1. Let result be ? IteratorNext(iteratorRecord).\r\n\r\n\r\nIteratorNext ( iteratorRecord [ , value ] )\r\n\r\n...\r\n3. If Type(result) is not Object, throw a TypeError exception.\r\n\r\n","features":["Symbol.iterator","Object.fromEntries\r"]},{"path":"./test262/test/built-ins/Object/fromEntries/iterator-not-closed-for-throwing-done-accessor.js","esid":" sec-object.fromentries\r","description":" Does not close iterators with a `done` accessor which throws.\r","info":" |\rObject.fromEntries ( iterable )\r\n\r\n...\r\n4. Let stepsDefine be the algorithm steps defined in CreateDataPropertyOnObject Functions.\r\n5. Let adder be CreateBuiltinFunction(stepsDefine, « »).\r\n6. Return ? AddEntriesFromIterable(obj, iterable, adder).\r\n\r\nAddEntriesFromIterable ( target, iterable, adder )\r\n\r\n...\r\n4. Repeat,\r\na. Let next be ? IteratorStep(iteratorRecord).\r\n\r\n\r\nIteratorStep ( iteratorRecord )\r\n\r\n1. Let result be ? IteratorNext(iteratorRecord).\r\n\r\n\r\nIteratorNext ( iteratorRecord [ , value ] )\r\n\r\n...\r\n3. If Type(result) is not Object, throw a TypeError exception.\r\n\r\n","features":["Symbol.iterator","Object.fromEntries\r"]},{"path":"./test262/test/built-ins/Object/fromEntries/iterator-not-closed-for-throwing-next.js","esid":" sec-object.fromentries\r","description":" Does not close iterators with a `next` method which throws.\r","info":" |\rObject.fromEntries ( iterable )\r\n\r\n...\r\n4. Let stepsDefine be the algorithm steps defined in CreateDataPropertyOnObject Functions.\r\n5. Let adder be CreateBuiltinFunction(stepsDefine, « »).\r\n6. Return ? AddEntriesFromIterable(obj, iterable, adder).\r\n\r\nAddEntriesFromIterable ( target, iterable, adder )\r\n\r\n...\r\n4. Repeat,\r\na. Let next be ? IteratorStep(iteratorRecord).\r\n\r\n\r\nIteratorStep ( iteratorRecord )\r\n\r\n1. Let result be ? IteratorNext(iteratorRecord).\r\n\r\n\r\nIteratorNext ( iteratorRecord [ , value ] )\r\n\r\n...\r\n3. If Type(result) is not Object, throw a TypeError exception.\r\n\r\n","features":["Symbol.iterator","Object.fromEntries\r"]},{"path":"./test262/test/built-ins/Object/fromEntries/iterator-not-closed-for-uncallable-next.js","esid":" sec-object.fromentries\r","description":" Does not close iterators with an uncallable `next` property.\r","info":" |\rObject.fromEntries ( iterable )\r\n\r\n...\r\n4. Let stepsDefine be the algorithm steps defined in CreateDataPropertyOnObject Functions.\r\n5. Let adder be CreateBuiltinFunction(stepsDefine, « »).\r\n6. Return ? AddEntriesFromIterable(obj, iterable, adder).\r\n\r\nAddEntriesFromIterable ( target, iterable, adder )\r\n\r\n...\r\n4. Repeat,\r\na. Let next be ? IteratorStep(iteratorRecord).\r\n\r\n\r\nIteratorStep ( iteratorRecord )\r\n\r\n1. Let result be ? IteratorNext(iteratorRecord).\r\n","features":["Symbol.iterator","Object.fromEntries\r"]},{"path":"./test262/test/built-ins/Object/fromEntries/key-order.js","description":" Key enumeration order of result objects matches the order of entries in the iterable.\r","esid":" sec-object.fromentries\r","includes":["compareArray.js\r"],"features":["Object.fromEntries\r"]},{"path":"./test262/test/built-ins/Object/fromEntries/length.js","description":" Object.fromEntries.length is 1.\r","esid":" sec-object.fromentries\r","includes":["propertyHelper.js\r"],"features":["Object.fromEntries\r"]},{"path":"./test262/test/built-ins/Object/fromEntries/name.js","description":" Object.fromEntries.name is \"fromEntries\".\r","esid":" sec-object.fromentries\r","includes":["propertyHelper.js\r"],"features":["Object.fromEntries\r"]},{"path":"./test262/test/built-ins/Object/fromEntries/not-a-constructor.js","esid":" sec-ecmascript-standard-built-in-objects\r","description":" >\rObject.fromEntries does not implement [[Construct]], is not new-able\r\n","info":" |\rECMAScript Function Objects\r\n\r\nBuilt-in function objects that are not identified as constructors do not\r\nimplement the [[Construct]] internal method unless otherwise specified in\r\nthe description of a particular function.\r\n\r\nsec-evaluatenew\r\n\r\n...\r\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\r\n...\r\n","includes":["isConstructor.js\r"],"features":["Reflect.construct","Object.fromEntries","arrow-function\r"]},{"path":"./test262/test/built-ins/Object/fromEntries/prototype.js","description":" Created objects inherit from Object.prototype.\r","esid":" sec-object.fromentries\r","features":["Object.fromEntries\r"]},{"path":"./test262/test/built-ins/Object/fromEntries/requires-argument.js","esid":" sec-object.fromentries\r","description":" Throws when called without an argument.\r","info":" |\rObject.fromEntries ( iterable )\r\n\r\n1. Perform ? RequireObjectCoercible(iterable).\r\n...\r\n\r\n","features":["Object.fromEntries\r"]},{"path":"./test262/test/built-ins/Object/fromEntries/simple-properties.js","description":" Creates data properties which are enumerable, writable, and configurable.\r","esid":" sec-object.fromentries\r","includes":["propertyHelper.js\r"],"features":["Object.fromEntries\r"]},{"path":"./test262/test/built-ins/Object/fromEntries/string-entry-object-succeeds.js","description":" Succeeds when an entry object is a boxed string.\r","esid":" sec-object.fromentries\r","features":["Object.fromEntries\r"]},{"path":"./test262/test/built-ins/Object/fromEntries/string-entry-primitive-throws.js","description":" Throws when an entry object is a primitive string.\r","esid":" sec-object.fromentries\r","features":["Object.fromEntries\r"]},{"path":"./test262/test/built-ins/Object/fromEntries/string-entry-string-object-succeeds.js","description":" Succeeds when an entry object is a boxed string.\r","esid":" sec-object.fromentries\r","features":["Object.fromEntries\r"]},{"path":"./test262/test/built-ins/Object/fromEntries/supports-symbols.js","description":" Allows symbol keys.\r","esid":" sec-object.fromentries\r","features":["Symbol","Object.fromEntries\r"]},{"path":"./test262/test/built-ins/Object/fromEntries/to-property-key.js","description":" Coerces keys to strings using ToPropertyKey.\r","esid":" sec-object.fromentries\r","features":["Symbol.toPrimitive","Object.fromEntries\r"]},{"path":"./test262/test/built-ins/Object/fromEntries/uses-define-semantics.js","description":" Uses [[DefineOwnProperty]] rather than [[Set]].\r","esid":" sec-object.fromentries\r","features":["Object.fromEntries\r"]},{"path":"./test262/test/built-ins/Object/fromEntries/uses-keys-not-iterator.js","description":" Reads properties rather than iterating.\r","esid":" sec-object.fromentries\r","features":["Symbol.iterator","Object.fromEntries\r"]},{"path":"./test262/test/built-ins/String/prototype/trimEnd/length.js","esid":" sec-string.prototype.trimEnd\r","description":" >\rString.prototype.trimEnd.length is 0.\r\n","info":" >\rString.prototype.trimEnd ( )\r\n\r\n17 ECMAScript Standard Built-in Objects:\r\nEvery built-in Function object, including constructors, has a length\r\nproperty whose value is an integer. Unless otherwise specified, this\r\nvalue is equal to the largest number of named arguments shown in the\r\nsubclause headings for the function description, including optional\r\nparameters. However, rest parameters shown using the form “...name”\r\nare not included in the default argument count.\r\n\r\nUnless otherwise specified, the length property of a built-in Function\r\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\r\n[[Configurable]]: true }.\r\n","includes":["propertyHelper.js\r"],"features":["string-trimming","String.prototype.trimEnd\r"]},{"path":"./test262/test/built-ins/String/prototype/trimEnd/name.js","esid":" sec-string.prototype.trimEnd\r","description":" >\rString.prototype.trimEnd.name is \"trimEnd\".\r\n","info":" >\rString.prototype.trimEnd ( )\r\n\r\n17 ECMAScript Standard Built-in Objects:\r\nEvery built-in Function object, including constructors, that is not\r\nidentified as an anonymous function has a name property whose value\r\nis a String.\r\n\r\nUnless otherwise specified, the name property of a built-in Function\r\nobject, if it exists, has the attributes { [[Writable]]: false,\r\n[[Enumerable]]: false, [[Configurable]]: true }.\r\n","includes":["propertyHelper.js\r"],"features":["string-trimming","String.prototype.trimEnd\r"]},{"path":"./test262/test/built-ins/String/prototype/trimEnd/not-a-constructor.js","esid":" sec-ecmascript-standard-built-in-objects\r","description":" >\rString.prototype.trimEnd does not implement [[Construct]], is not new-able\r\n","info":" |\rECMAScript Function Objects\r\n\r\nBuilt-in function objects that are not identified as constructors do not\r\nimplement the [[Construct]] internal method unless otherwise specified in\r\nthe description of a particular function.\r\n\r\nsec-evaluatenew\r\n\r\n...\r\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\r\n...\r\n","includes":["isConstructor.js\r"],"features":["Reflect.construct","string-trimming","String.prototype.trimEnd","arrow-function\r"]},{"path":"./test262/test/built-ins/String/prototype/trimEnd/this-value-boolean.js","esid":" sec-string.prototype.trimEnd\r","description":" Behavior when \"this\" value is a boolean.\r","info":" |\rRuntime Semantics: TrimString ( string, where )\r\n2. Let S be ? ToString(str).\r\n\r\nToString ( argument )\r\nArgument Type: Boolean\r\nResult:\r\nIf argument is true, return \"true\".\r\nIf argument is false, return \"false\".\r\n","features":["string-trimming","String.prototype.trimEnd\r"]},{"path":"./test262/test/built-ins/String/prototype/trimEnd/this-value-line-terminator.js","esid":" sec-string.prototype.trimEnd\r","description":" TrimEnd removes all line terminators from the end of a string.\r","info":" |\rRuntime Symantics: TrimString ( string, where )\r\n...\r\n4. Else if where is \"end\", let T be a String value that is a copy of S with\r\ntrailing white space removed.\r\n...\r\n\r\nThe definition of white space is the union of WhiteSpace and LineTerminator.\r\n\r\n","features":["string-trimming","String.prototype.trimEnd\r"]},{"path":"./test262/test/built-ins/String/prototype/trimEnd/this-value-not-obj-coercible.js","esid":" sec-string.prototype.trimEnd\r","description":" The \"this\" value must be object-coercible\r","info":" |\r1. Let O be ? RequireObjectCoercible(this value).\r\n","features":["string-trimming","String.prototype.trimEnd\r"]},{"path":"./test262/test/built-ins/String/prototype/trimEnd/this-value-number.js","esid":" sec-string.prototype.trimEnd\r","description":" Behavoir when \"this\" value is a number.\r","info":" |\rRuntime Semantics: TrimString ( string, where )\r\n2. Let S be ? ToString(str).\r\n\r\nToString ( argument )\r\nArgument Type: Number\r\nResult: NumberToString(argument)\r\n","features":["string-trimming","String.prototype.trimEnd\r"]},{"path":"./test262/test/built-ins/String/prototype/trimEnd/this-value-object-cannot-convert-to-primitive-err.js","esid":" sec-string.prototype.trimEnd\r","description":" >\rThis value is an object which cannot be converted to a primitive\r\n","info":" |\rRuntime Semantics: TrimString ( string, where )\r\n1. Let str be ? RequireObjectCoercible(string).\r\n2. Let S be ? ToString(str).\r\n...\r\n\r\nToString ( argument )\r\nIf argument is Object:\r\n1. Let primValue be ? ToPrimitive(argument, hint String).\r\n...\r\n\r\nToPrimitive ( input [, PreferredType ])\r\n...\r\nb. Else if PreferredType is hint String, let hint be \"string\".\r\n...\r\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive)\r\ne. If exoticToPrim is not undefined, then\r\ni. Let result be ? Call(exoticToPrim, input, « hint »).\r\nii. If Type(result) is not Object, return result.\r\niii. Throw a TypeError exception.\r\nf. If hint is \"default\", set hint to \"number\".\r\ng. Return ? OrdinaryToPrimitive(input, hint).\r\n...\r\n\r\nOrdinaryToPrimitive( O, hint )\r\n...\r\n3. If hint is \"string\", then\r\na. Let methodNames be « \"toString\", \"valueOf\" ».\r\n...\r\n5. For each name in methodNames in List order, do\r\na. Let method be ? Get(O, name).\r\nb. If IsCallable(method) is true, then\r\ni. Let result be ? Call(method, O).\r\nii. If Type(result) is not Object, return result.\r\n6. Throw a TypeError exception.\r\n","features":["string-trimming","String.prototype.trimEnd","Symbol.toPrimitive\r"]},{"path":"./test262/test/built-ins/String/prototype/trimEnd/this-value-object-toprimitive-call-err.js","esid":" sec-string.prototype.trimEnd\r","description":" >\rAbrupt completion when getting Symbol.toPrimitive method\r\n","info":" |\rRuntime Semantics: TrimString ( string, where )\r\n1. Let str be ? RequireObjectCoercible(string).\r\n2. Let S be ? ToString(str).\r\n...\r\n\r\nToString ( argument )\r\nIf argument is Object:\r\n1. Let primValue be ? ToPrimitive(argument, hint String).\r\n...\r\n\r\nToPrimitive ( input [, PreferredType ])\r\n...\r\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive).\r\n...\r\n","features":["string-trimming","String.prototype.trimEnd","Symbol.toPrimitive\r"]},{"path":"./test262/test/built-ins/String/prototype/trimEnd/this-value-object-toprimitive-meth-err.js","esid":" sec-string.prototype.trimEnd\r","description":" >\rAbrupt completion when Symbol.toPrimitive abrupt completes.\r\n","info":" |\rRuntime Semantics: TrimString ( string, where )\r\n1. Let str be ? RequireObjectCoercible(string).\r\n2. Let S be ? ToString(str).\r\n...\r\n\r\nToString ( argument )\r\nIf argument is Object:\r\n1. Let primValue be ? ToPrimitive(argument, hint String).\r\n...\r\n\r\nToPrimitive ( input [, PreferredType ])\r\n...\r\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive).\r\ne. If exoticToPrim is not undefined, then\r\ni. Let result be ? Call(exoticToPrim, input, « hint »).\r\n...\r\n","features":["string-trimming","String.prototype.trimEnd","Symbol.toPrimitive\r"]},{"path":"./test262/test/built-ins/String/prototype/trimEnd/this-value-object-toprimitive-meth-priority.js","esid":" sec-string.prototype.trimEnd\r","description":" >\rPriority of Symbol[toPrimitive] when converting object to string for trimming\r\n","info":" |\rRuntime Semantics: TrimString ( string, where )\r\n1. Let str be ? RequireObjectCoercible(string).\r\n2. Let S be ? ToString(str).\r\n...\r\n\r\nToString ( argument )\r\nIf argument is Object:\r\n1. Let primValue be ? ToPrimitive(argument, hint String).\r\n...\r\n\r\nToPrimitive ( input [, PreferredType ])\r\n...\r\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive)\r\ne. If exoticToPrim is not undefined, then\r\ni. Let result be ? Call(exoticToPrim, input, « hint »).\r\nii. If Type(result) is not Object, return result.\r\n...\r\n","features":["string-trimming","String.prototype.trimEnd","Symbol.toPrimitive\r"]},{"path":"./test262/test/built-ins/String/prototype/trimEnd/this-value-object-toprimitive-returns-object-err.js","esid":" sec-string.prototype.trimEnd\r","description":" >\rAbrupt completion when Symbol.toPrimitive returns an object\r\n","info":" |\rRuntime Semantics: TrimString ( string, where )\r\n1. Let str be ? RequireObjectCoercible(string).\r\n2. Let S be ? ToString(str).\r\n...\r\n\r\nToString ( argument )\r\nIf arguement is Object:\r\n1. Let primValue be ? ToPrimitive(argument, hint String).\r\n...\r\n\r\nToPrimitive ( input [, PreferredType ])\r\n...\r\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive).\r\ne. If exoticToPrim is not undefined, then\r\ni. Let result be ? Call(exoticToPrim, input, « hint »).\r\nii. If Type(result) is not Object, return result.\r\niii. Throw a TypeError exception.\r\n...\r\n","features":["string-trimming","String.prototype.trimEnd","Symbol.toPrimitive\r"]},{"path":"./test262/test/built-ins/String/prototype/trimEnd/this-value-object-tostring-call-err.js","esid":" sec-string.prototype.trimEnd\r","description":" >\rAbrupt completion when getting toString method\r\n","info":" |\rRuntime Semantics: TrimString ( string, where )\r\n1. Let str be ? RequireObjectCoercible(string).\r\n2. Let S be ? ToString(str).\r\n...\r\n\r\nToString ( argument )\r\nIf argument is Object:\r\n1. Let primValue be ? ToPrimitive(argument, hint String).\r\n...\r\n\r\nToPrimitive ( input [, PreferredType ])\r\n...\r\nb. Else if PreferredType is hint String, let hint be \"string\".\r\n...\r\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive)\r\ne. If exoticToPrim is not undefined, then\r\ni. Let result be ? Call(exoticToPrim, input, « hint »).\r\nii. If Type(result) is not Object, return result.\r\niii. Throw a TypeError exception.\r\nf. If hint is \"default\", set hint to \"number\".\r\ng. Return ? OrdinaryToPrimitive(input, hint).\r\n...\r\n\r\nOrdinaryToPrimitive( O, hint )\r\n...\r\n3. If hint is \"string\", then\r\na. Let methodNames be « \"toString\", \"valueOf\" ».\r\n...\r\n5. For each name in methodNames in List order, do\r\na. Let method be ? Get(O, name).\r\n","features":["string-trimming","String.prototype.trimEnd","Symbol.toPrimitive\r"]},{"path":"./test262/test/built-ins/String/prototype/trimEnd/this-value-object-tostring-meth-err.js","esid":" sec-string.prototype.trimEnd\r","description":" >\rAbrupt completion when toString called and abrupt completes.\r\n","info":" |\rRuntime Semantics: TrimString ( string, where )\r\n1. Let str be ? RequireObjectCoercible(string).\r\n2. Let S be ? ToString(str).\r\n...\r\n\r\nToString ( argument )\r\nIf argument is Object:\r\n1. Let primValue be ? ToPrimitive(argument, hint String).\r\n...\r\n\r\nToPrimitive ( input [, PreferredType ])\r\n...\r\nb. Else if PreferredType is hint String, let hint be \"string\".\r\n...\r\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive)\r\ne. If exoticToPrim is not undefined, then\r\ni. Let result be ? Call(exoticToPrim, input, « hint »).\r\nii. If Type(result) is not Object, return result.\r\niii. Throw a TypeError exception.\r\nf. If hint is \"default\", set hint to \"number\".\r\ng. Return ? OrdinaryToPrimitive(input, hint).\r\n...\r\n\r\nOrdinaryToPrimitive( O, hint )\r\n...\r\n3. If hint is \"string\", then\r\na. Let methodNames be « \"toString\", \"valueOf\" ».\r\n...\r\n5. For each name in methodNames in List order, do\r\na. Let method be ? Get(O, name).\r\nb. If IsCallable(method) is true, then\r\ni. Let result be ? Call(method, O).\r\n","features":["string-trimming","String.prototype.trimEnd","Symbol.toPrimitive\r"]},{"path":"./test262/test/built-ins/String/prototype/trimEnd/this-value-object-tostring-meth-priority.js","esid":" sec-string.prototype.trimEnd\r","description":" >\rPriority of toString when converting object to string for trimming\r\n","info":" |\rRuntime Semantics: TrimString ( string, where )\r\n1. Let str be ? RequireObjectCoercible(string).\r\n2. Let S be ? ToString(str).\r\n...\r\n\r\nToString ( argument )\r\nIf argument is Object:\r\n1. Let primValue be ? ToPrimitive(argument, hint String).\r\n...\r\n\r\nToPrimitive ( input [, PreferredType ])\r\n...\r\nb. Else if PreferredType is hint String, let hint be \"string\".\r\n...\r\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive)\r\ne. If exoticToPrim is not undefined, then\r\ni. Let result be ? Call(exoticToPrim, input, « hint »).\r\nii. If Type(result) is not Object, return result.\r\niii. Throw a TypeError exception.\r\nf. If hint is \"default\", set hint to \"number\".\r\ng. Return ? OrdinaryToPrimitive(input, hint).\r\n...\r\n\r\nOrdinaryToPrimitive( O, hint )\r\n...\r\n3. If hint is \"string\", then\r\na. Let methodNames be « \"toString\", \"valueOf\" ».\r\n...\r\n5. For each name in methodNames in List order, do\r\na. Let method be ? Get(O, name).\r\nb. If IsCallable(method) is true, then\r\ni. Let result be ? Call(method, O).\r\nii. If Type(result) is not Object, return result.\r\n...\r\n","features":["string-trimming","String.prototype.trimEnd","Symbol.toPrimitive\r"]},{"path":"./test262/test/built-ins/String/prototype/trimEnd/this-value-object-tostring-returns-object-err.js","esid":" sec-string.prototype.trimEnd\r","description":" >\rAbrupt completion when toString called and returns an object\r\n","info":" |\rRuntime Semantics: TrimString ( string, where )\r\n1. Let str be ? RequireObjectCoercible(string).\r\n2. Let S be ? ToString(str).\r\n...\r\n\r\nToString ( argument )\r\nIf argument is Object:\r\n1. Let primValue be ? ToPrimitive(argument, hint String).\r\n...\r\n\r\nToPrimitive ( input [, PreferredType ])\r\n...\r\nb. Else if PreferredType is hint String, let hint be \"string\".\r\n...\r\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive)\r\ne. If exoticToPrim is not undefined, then\r\ni. Let result be ? Call(exoticToPrim, input, « hint »).\r\nii. If Type(result) is not Object, return result.\r\niii. Throw a TypeError exception.\r\nf. If hint is \"default\", set hint to \"number\".\r\ng. Return ? OrdinaryToPrimitive(input, hint).\r\n...\r\n\r\nOrdinaryToPrimitive( O, hint )\r\n...\r\n3. If hint is \"string\", then\r\na. Let methodNames be « \"toString\", \"valueOf\" ».\r\n...\r\n5. For each name in methodNames in List order, do\r\na. Let method be ? Get(O, name).\r\nb. If IsCallable(method) is true, then\r\ni. Let result be ? Call(method, O).\r\nii. If Type(result) is not Object, return result.\r\n6. Throw a TypeError exception.\r\n","features":["string-trimming","String.prototype.trimEnd","Symbol.toPrimitive\r"]},{"path":"./test262/test/built-ins/String/prototype/trimEnd/this-value-object-valueof-call-err.js","esid":" sec-string.prototype.trimEnd\r","description":" >\rAbrupt completion when getting valueOf method\r\n","info":" |\rRuntime Semantics: TrimString ( string, where )\r\n1. Let str be ? RequireObjectCoercible(string).\r\n2. Let S be ? ToString(str).\r\n...\r\n\r\nToString ( argument )\r\nIf argument is Object:\r\n1. Let primValue be ? ToPrimitive(argument, hint String).\r\n...\r\n\r\nToPrimitive ( input [, PreferredType ])\r\n...\r\nb. Else if PreferredType is hint String, let hint be \"string\".\r\n...\r\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive)\r\ne. If exoticToPrim is not undefined, then\r\ni. Let result be ? Call(exoticToPrim, input, « hint »).\r\nii. If Type(result) is not Object, return result.\r\niii. Throw a TypeError exception.\r\nf. If hint is \"default\", set hint to \"number\".\r\ng. Return ? OrdinaryToPrimitive(input, hint).\r\n...\r\n\r\nOrdinaryToPrimitive( O, hint )\r\n...\r\n3. If hint is \"string\", then\r\na. Let methodNames be « \"toString\", \"valueOf\" ».\r\n...\r\n5. For each name in methodNames in List order, do\r\na. Let method be ? Get(O, name).\r\n","features":["string-trimming","String.prototype.trimEnd","Symbol.toPrimitive\r"]},{"path":"./test262/test/built-ins/String/prototype/trimEnd/this-value-object-valueof-meth-err.js","esid":" sec-string.prototype.trimEnd\r","description":" >\rAbrupt completion when valueOf called and abrupt completes.\r\n","info":" |\rRuntime Semantics: TrimString ( string, where )\r\n1. Let str be ? RequireObjectCoercible(string).\r\n2. Let S be ? ToString(str).\r\n...\r\n\r\nToString ( argument )\r\nIf argument is Object:\r\n1. Let primValue be ? ToPrimitive(argument, hint String).\r\n...\r\n\r\nToPrimitive ( input [, PreferredType ])\r\n...\r\nb. Else if PreferredType is hint String, let hint be \"string\".\r\n...\r\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive)\r\ne. If exoticToPrim is not undefined, then\r\ni. Let result be ? Call(exoticToPrim, input, « hint »).\r\nii. If Type(result) is not Object, return result.\r\niii. Throw a TypeError exception.\r\nf. If hint is \"default\", set hint to \"number\".\r\ng. Return ? OrdinaryToPrimitive(input, hint).\r\n...\r\n\r\nOrdinaryToPrimitive( O, hint )\r\n...\r\n3. If hint is \"string\", then\r\na. Let methodNames be « \"toString\", \"valueOf\" ».\r\n...\r\n5. For each name in methodNames in List order, do\r\na. Let method be ? Get(O, name).\r\nb. If IsCallable(method) is true, then\r\ni. Let result be ? Call(method, O).\r\n","features":["string-trimming","String.prototype.trimEnd","Symbol.toPrimitive\r"]},{"path":"./test262/test/built-ins/String/prototype/trimEnd/this-value-object-valueof-meth-priority.js","esid":" sec-string.prototype.trimEnd\r","description":" >\rPriority of valueOf when converting object to string for trimming\r\n","info":" |\rRuntime Semantics: TrimString ( string, where )\r\n1. Let str be ? RequireObjectCoercible(string).\r\n2. Let S be ? ToString(str).\r\n...\r\n\r\nToString ( argument )\r\nIf argument is Object:\r\n1. Let primValue be ? ToPrimitive(argument, hint String).\r\n...\r\n\r\nToPrimitive ( input [, PreferredType ])\r\n...\r\nb. Else if PreferredType is hint String, let hint be \"string\".\r\n...\r\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive)\r\ne. If exoticToPrim is not undefined, then\r\ni. Let result be ? Call(exoticToPrim, input, « hint »).\r\nii. If Type(result) is not Object, return result.\r\niii. Throw a TypeError exception.\r\nf. If hint is \"default\", set hint to \"number\".\r\ng. Return ? OrdinaryToPrimitive(input, hint).\r\n...\r\n\r\nOrdinaryToPrimitive( O, hint )\r\n...\r\n3. If hint is \"string\", then\r\na. Let methodNames be « \"toString\", \"valueOf\" ».\r\n...\r\n5. For each name in methodNames in List order, do\r\na. Let method be ? Get(O, name).\r\nb. If IsCallable(method) is true, then\r\ni. Let result be ? Call(method, O).\r\nii. If Type(result) is not Object, return result.\r\n...\r\n","features":["string-trimming","String.prototype.trimEnd","Symbol.toPrimitive\r"]},{"path":"./test262/test/built-ins/String/prototype/trimEnd/this-value-object-valueof-returns-object-err.js","esid":" sec-string.prototype.trimEnd\r","description":" >\rAbrupt completion when valueOf called and returns an object\r\n","info":" |\rRuntime Semantics: TrimString ( string, where )\r\n1. Let str be ? RequireObjectCoercible(string).\r\n2. Let S be ? ToString(str).\r\n...\r\n\r\nToString ( argument )\r\nIf argument is Object:\r\n1. Let primValue be ? ToPrimitive(argument, hint String).\r\n...\r\n\r\nToPrimitive ( input [, PreferredType ])\r\n...\r\nb. Else if PreferredType is hint String, let hint be \"string\".\r\n...\r\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive)\r\ne. If exoticToPrim is not undefined, then\r\ni. Let result be ? Call(exoticToPrim, input, « hint »).\r\nii. If Type(result) is not Object, return result.\r\niii. Throw a TypeError exception.\r\nf. If hint is \"default\", set hint to \"number\".\r\ng. Return ? OrdinaryToPrimitive(input, hint).\r\n...\r\n\r\nOrdinaryToPrimitive( O, hint )\r\n...\r\n3. If hint is \"string\", then\r\na. Let methodNames be « \"toString\", \"valueOf\" ».\r\n...\r\n5. For each name in methodNames in List order, do\r\na. Let method be ? Get(O, name).\r\nb. If IsCallable(method) is true, then\r\ni. Let result be ? Call(method, O).\r\nii. If Type(result) is not Object, return result.\r\n6. Throw a TypeError exception.\r\n","features":["string-trimming","String.prototype.trimEnd","Symbol.toPrimitive\r"]},{"path":"./test262/test/built-ins/String/prototype/trimEnd/this-value-symbol-typeerror.js","esid":" sec-string.prototype.trimEnd\r","description":" Type error when \"this\" value is a Symbol\r","info":" |\rRuntime Semantics: TrimString ( string, where )\r\n2. Let S be ? ToString(str).\r\n\r\nToString ( argument )\r\nArgument Type: Symbol\r\nResult: Throw a TypeError exception\r\n","features":["string-trimming","String.prototype.trimEnd\r"]},{"path":"./test262/test/built-ins/String/prototype/trimEnd/this-value-whitespace.js","esid":" sec-string.prototype.trimEnd\r","description":" TrimEnd removes all whitespace from the end of a string.\r","info":" |\rRuntime Symantics: TrimString ( string, where )\r\n...\r\n3. Else if where is \"end\", let T be a String value that is a copy of S with\r\ntrailing white space removed.\r\n...\r\n\r\nThe definition of white space is the union of WhiteSpace and LineTerminator.\r\nWhen determining whether a Unicode code point is in Unicode general category\r\n“Zs”, code unit sequences are interpreted as UTF-16 encoded code point\r\nsequences as specified in 6.1.4.\r\n\r\n","features":["string-trimming","String.prototype.trimEnd\r"]},{"path":"./test262/test/built-ins/String/prototype/trimStart/length.js","esid":" sec-string.prototype.trimStart\r","description":" >\rString.prototype.trimStart.length is 0.\r\n","info":" >\rString.prototype.trimStart ( )\r\n\r\n17 ECMAScript Standard Built-in Objects:\r\nEvery built-in Function object, including constructors, has a length\r\nproperty whose value is an integer. Unless otherwise specified, this\r\nvalue is equal to the largest number of named arguments shown in the\r\nsubclause headings for the function description, including optional\r\nparameters. However, rest parameters shown using the form “...name”\r\nare not included in the default argument count.\r\n\r\nUnless otherwise specified, the length property of a built-in Function\r\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\r\n[[Configurable]]: true }.\r\n","includes":["propertyHelper.js\r"],"features":["string-trimming","String.prototype.trimStart\r"]},{"path":"./test262/test/built-ins/String/prototype/trimStart/name.js","esid":" sec-string.prototype.trimStart\r","description":" >\rString.prototype.trimStart.name is \"trimStart\".\r\n","info":" >\rString.prototype.trimStart ( )\r\n\r\n17 ECMAScript Standard Built-in Objects:\r\nEvery built-in Function object, including constructors, that is not\r\nidentified as an anonymous function has a name property whose value\r\nis a String.\r\n\r\nUnless otherwise specified, the name property of a built-in Function\r\nobject, if it exists, has the attributes { [[Writable]]: false,\r\n[[Enumerable]]: false, [[Configurable]]: true }.\r\n","includes":["propertyHelper.js\r"],"features":["string-trimming","String.prototype.trimStart\r"]},{"path":"./test262/test/built-ins/String/prototype/trimStart/not-a-constructor.js","esid":" sec-ecmascript-standard-built-in-objects\r","description":" >\rString.prototype.trimStart does not implement [[Construct]], is not new-able\r\n","info":" |\rECMAScript Function Objects\r\n\r\nBuilt-in function objects that are not identified as constructors do not\r\nimplement the [[Construct]] internal method unless otherwise specified in\r\nthe description of a particular function.\r\n\r\nsec-evaluatenew\r\n\r\n...\r\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\r\n...\r\n","includes":["isConstructor.js\r"],"features":["Reflect.construct","string-trimming","String.prototype.trimStart","arrow-function\r"]},{"path":"./test262/test/built-ins/String/prototype/trimStart/this-value-boolean.js","esid":" sec-string.prototype.trimStart\r","description":" Behavior when \"this\" value is a boolean.\r","info":" |\rRuntime Semantics: TrimString ( string, where )\r\n2. Let S be ? ToString(str).\r\n\r\nToString ( argument )\r\nArgument Type: Boolean\r\nResult:\r\nIf argument is true, return \"true\".\r\nIf argument is false, return \"false\".\r\n","features":["string-trimming","String.prototype.trimStart\r"]},{"path":"./test262/test/built-ins/String/prototype/trimStart/this-value-line-terminator.js","esid":" sec-string.prototype.trimStart\r","description":" TrimStart removes all line terminators from the start of a string.\r","info":" |\rRuntime Symantics: TrimString ( string, where )\r\n...\r\n4. If where is \"start\", let T be a String value that is a copy of S with\r\ntrailing white space removed.\r\n...\r\n\r\nThe definition of white space is the union of WhiteSpace and LineTerminator.\r\n\r\n","features":["string-trimming","String.prototype.trimStart\r"]},{"path":"./test262/test/built-ins/String/prototype/trimStart/this-value-not-obj-coercible.js","esid":" sec-string.prototype.trimStart\r","description":" The \"this\" value must be object-coercible\r","info":" |\r1. Let O be ? RequireObjectCoercible(this value).\r\n","features":["string-trimming","String.prototype.trimStart\r"]},{"path":"./test262/test/built-ins/String/prototype/trimStart/this-value-number.js","esid":" sec-string.prototype.trimStart\r","description":" Behavoir when \"this\" value is a number.\r","info":" |\rRuntime Semantics: TrimString ( string, where )\r\n2. Let S be ? ToString(str).\r\n\r\nToString ( argument )\r\nArgument Type: Number\r\nResult: NumberToString(argument)\r\n","features":["string-trimming","String.prototype.trimStart\r"]},{"path":"./test262/test/built-ins/String/prototype/trimStart/this-value-object-cannot-convert-to-primitive-err.js","esid":" sec-string.prototype.trimStart\r","description":" >\rThis value is an object which cannot be converted to a primitive\r\n","info":" |\rRuntime Semantics: TrimString ( string, where )\r\n1. Let str be ? RequireObjectCoercible(string).\r\n2. Let S be ? ToString(str).\r\n...\r\n\r\nToString ( argument )\r\nIf argument is Object:\r\n1. Let primValue be ? ToPrimitive(argument, hint String).\r\n...\r\n\r\nToPrimitive ( input [, PreferredType ])\r\n...\r\nb. Else if PreferredType is hint String, let hint be \"string\".\r\n...\r\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive)\r\ne. If exoticToPrim is not undefined, then\r\ni. Let result be ? Call(exoticToPrim, input, « hint »).\r\nii. If Type(result) is not Object, return result.\r\niii. Throw a TypeError exception.\r\nf. If hint is \"default\", set hint to \"number\".\r\ng. Return ? OrdinaryToPrimitive(input, hint).\r\n...\r\n\r\nOrdinaryToPrimitive( O, hint )\r\n...\r\n3. If hint is \"string\", then\r\na. Let methodNames be « \"toString\", \"valueOf\" ».\r\n...\r\n5. For each name in methodNames in List order, do\r\na. Let method be ? Get(O, name).\r\nb. If IsCallable(method) is true, then\r\ni. Let result be ? Call(method, O).\r\nii. If Type(result) is not Object, return result.\r\n6. Throw a TypeError exception.\r\n","features":["string-trimming","String.prototype.trimStart","Symbol.toPrimitive\r"]},{"path":"./test262/test/built-ins/String/prototype/trimStart/this-value-object-toprimitive-call-err.js","esid":" sec-string.prototype.trimStart\r","description":" >\rAbrupt completion when getting Symbol.toPrimitive method\r\n","info":" |\rRuntime Semantics: TrimString ( string, where )\r\n1. Let str be ? RequireObjectCoercible(string).\r\n2. Let S be ? ToString(str).\r\n...\r\n\r\nToString ( argument )\r\nIf argument is Object:\r\n1. Let primValue be ? ToPrimitive(argument, hint String).\r\n...\r\n\r\nToPrimitive ( input [, PreferredType ])\r\n...\r\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive).\r\n...\r\n","features":["string-trimming","String.prototype.trimStart","Symbol.toPrimitive\r"]},{"path":"./test262/test/built-ins/String/prototype/trimStart/this-value-object-toprimitive-meth-err.js","esid":" sec-string.prototype.trimStart\r","description":" >\rAbrupt completion when Symbol.toPrimitive abrupt completes.\r\n","info":" |\rRuntime Semantics: TrimString ( string, where )\r\n1. Let str be ? RequireObjectCoercible(string).\r\n2. Let S be ? ToString(str).\r\n...\r\n\r\nToString ( argument )\r\nIf argument is Object:\r\n1. Let primValue be ? ToPrimitive(argument, hint String).\r\n...\r\n\r\nToPrimitive ( input [, PreferredType ])\r\n...\r\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive).\r\ne. If exoticToPrim is not undefined, then\r\ni. Let result be ? Call(exoticToPrim, input, « hint »).\r\n...\r\n","features":["string-trimming","String.prototype.trimStart","Symbol.toPrimitive\r"]},{"path":"./test262/test/built-ins/String/prototype/trimStart/this-value-object-toprimitive-meth-priority.js","esid":" sec-string.prototype.trimStart\r","description":" >\rPriority of Symbol[toPrimitive] when converting object to string for trimming\r\n","info":" |\rRuntime Semantics: TrimString ( string, where )\r\n1. Let str be ? RequireObjectCoercible(string).\r\n2. Let S be ? ToString(str).\r\n...\r\n\r\nToString ( argument )\r\nIf argument is Object:\r\n1. Let primValue be ? ToPrimitive(argument, hint String).\r\n...\r\n\r\nToPrimitive ( input [, PreferredType ])\r\n...\r\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive)\r\ne. If exoticToPrim is not undefined, then\r\ni. Let result be ? Call(exoticToPrim, input, « hint »).\r\nii. If Type(result) is not Object, return result.\r\n...\r\n","features":["string-trimming","String.prototype.trimStart","Symbol.toPrimitive\r"]},{"path":"./test262/test/built-ins/String/prototype/trimStart/this-value-object-toprimitive-returns-object-err.js","esid":" sec-string.prototype.trimStart\r","description":" >\rAbrupt completion when Symbol.toPrimitive returns an object\r\n","info":" |\rRuntime Semantics: TrimString ( string, where )\r\n1. Let str be ? RequireObjectCoercible(string).\r\n2. Let S be ? ToString(str).\r\n...\r\n\r\nToString ( argument )\r\nIf arguement is Object:\r\n1. Let primValue be ? ToPrimitive(argument, hint String).\r\n...\r\n\r\nToPrimitive ( input [, PreferredType ])\r\n...\r\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive).\r\ne. If exoticToPrim is not undefined, then\r\ni. Let result be ? Call(exoticToPrim, input, « hint »).\r\nii. If Type(result) is not Object, return result.\r\niii. Throw a TypeError exception.\r\n...\r\n","features":["string-trimming","String.prototype.trimStart","Symbol.toPrimitive\r"]},{"path":"./test262/test/built-ins/String/prototype/trimStart/this-value-object-tostring-call-err.js","esid":" sec-string.prototype.trimStart\r","description":" >\rAbrupt completion when getting toString method\r\n","info":" |\rRuntime Semantics: TrimString ( string, where )\r\n1. Let str be ? RequireObjectCoercible(string).\r\n2. Let S be ? ToString(str).\r\n...\r\n\r\nToString ( argument )\r\nIf argument is Object:\r\n1. Let primValue be ? ToPrimitive(argument, hint String).\r\n...\r\n\r\nToPrimitive ( input [, PreferredType ])\r\n...\r\nb. Else if PreferredType is hint String, let hint be \"string\".\r\n...\r\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive)\r\ne. If exoticToPrim is not undefined, then\r\ni. Let result be ? Call(exoticToPrim, input, « hint »).\r\nii. If Type(result) is not Object, return result.\r\niii. Throw a TypeError exception.\r\nf. If hint is \"default\", set hint to \"number\".\r\ng. Return ? OrdinaryToPrimitive(input, hint).\r\n...\r\n\r\nOrdinaryToPrimitive( O, hint )\r\n...\r\n3. If hint is \"string\", then\r\na. Let methodNames be « \"toString\", \"valueOf\" ».\r\n...\r\n5. For each name in methodNames in List order, do\r\na. Let method be ? Get(O, name).\r\n","features":["string-trimming","String.prototype.trimStart","Symbol.toPrimitive\r"]},{"path":"./test262/test/built-ins/String/prototype/trimStart/this-value-object-tostring-meth-err.js","esid":" sec-string.prototype.trimStart\r","description":" >\rAbrupt completion when toString called and abrupt completes.\r\n","info":" |\rRuntime Semantics: TrimString ( string, where )\r\n1. Let str be ? RequireObjectCoercible(string).\r\n2. Let S be ? ToString(str).\r\n...\r\n\r\nToString ( argument )\r\nIf argument is Object:\r\n1. Let primValue be ? ToPrimitive(argument, hint String).\r\n...\r\n\r\nToPrimitive ( input [, PreferredType ])\r\n...\r\nb. Else if PreferredType is hint String, let hint be \"string\".\r\n...\r\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive)\r\ne. If exoticToPrim is not undefined, then\r\ni. Let result be ? Call(exoticToPrim, input, « hint »).\r\nii. If Type(result) is not Object, return result.\r\niii. Throw a TypeError exception.\r\nf. If hint is \"default\", set hint to \"number\".\r\ng. Return ? OrdinaryToPrimitive(input, hint).\r\n...\r\n\r\nOrdinaryToPrimitive( O, hint )\r\n...\r\n3. If hint is \"string\", then\r\na. Let methodNames be « \"toString\", \"valueOf\" ».\r\n...\r\n5. For each name in methodNames in List order, do\r\na. Let method be ? Get(O, name).\r\nb. If IsCallable(method) is true, then\r\ni. Let result be ? Call(method, O).\r\n","features":["string-trimming","String.prototype.trimStart","Symbol.toPrimitive\r"]},{"path":"./test262/test/built-ins/String/prototype/trimStart/this-value-object-tostring-meth-priority.js","esid":" sec-string.prototype.trimStart\r","description":" >\rPriority of toString when converting object to string for trimming\r\n","info":" |\rRuntime Semantics: TrimString ( string, where )\r\n1. Let str be ? RequireObjectCoercible(string).\r\n2. Let S be ? ToString(str).\r\n...\r\n\r\nToString ( argument )\r\nIf argument is Object:\r\n1. Let primValue be ? ToPrimitive(argument, hint String).\r\n...\r\n\r\nToPrimitive ( input [, PreferredType ])\r\n...\r\nb. Else if PreferredType is hint String, let hint be \"string\".\r\n...\r\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive)\r\ne. If exoticToPrim is not undefined, then\r\ni. Let result be ? Call(exoticToPrim, input, « hint »).\r\nii. If Type(result) is not Object, return result.\r\niii. Throw a TypeError exception.\r\nf. If hint is \"default\", set hint to \"number\".\r\ng. Return ? OrdinaryToPrimitive(input, hint).\r\n...\r\n\r\nOrdinaryToPrimitive( O, hint )\r\n...\r\n3. If hint is \"string\", then\r\na. Let methodNames be « \"toString\", \"valueOf\" ».\r\n...\r\n5. For each name in methodNames in List order, do\r\na. Let method be ? Get(O, name).\r\nb. If IsCallable(method) is true, then\r\ni. Let result be ? Call(method, O).\r\nii. If Type(result) is not Object, return result.\r\n...\r\n","features":["string-trimming","String.prototype.trimStart","Symbol.toPrimitive\r"]},{"path":"./test262/test/built-ins/String/prototype/trimStart/this-value-object-tostring-returns-object-err.js","esid":" sec-string.prototype.trimStart\r","description":" >\rAbrupt completion when toString called and returns an object\r\n","info":" |\rRuntime Semantics: TrimString ( string, where )\r\n1. Let str be ? RequireObjectCoercible(string).\r\n2. Let S be ? ToString(str).\r\n...\r\n\r\nToString ( argument )\r\nIf argument is Object:\r\n1. Let primValue be ? ToPrimitive(argument, hint String).\r\n...\r\n\r\nToPrimitive ( input [, PreferredType ])\r\n...\r\nb. Else if PreferredType is hint String, let hint be \"string\".\r\n...\r\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive)\r\ne. If exoticToPrim is not undefined, then\r\ni. Let result be ? Call(exoticToPrim, input, « hint »).\r\nii. If Type(result) is not Object, return result.\r\niii. Throw a TypeError exception.\r\nf. If hint is \"default\", set hint to \"number\".\r\ng. Return ? OrdinaryToPrimitive(input, hint).\r\n...\r\n\r\nOrdinaryToPrimitive( O, hint )\r\n...\r\n3. If hint is \"string\", then\r\na. Let methodNames be « \"toString\", \"valueOf\" ».\r\n...\r\n5. For each name in methodNames in List order, do\r\na. Let method be ? Get(O, name).\r\nb. If IsCallable(method) is true, then\r\ni. Let result be ? Call(method, O).\r\nii. If Type(result) is not Object, return result.\r\n6. Throw a TypeError exception.\r\n","features":["string-trimming","String.prototype.trimStart","Symbol.toPrimitive\r"]},{"path":"./test262/test/built-ins/String/prototype/trimStart/this-value-object-valueof-call-err.js","esid":" sec-string.prototype.trimStart\r","description":" >\rAbrupt completion when getting valueOf method\r\n","info":" |\rRuntime Semantics: TrimString ( string, where )\r\n1. Let str be ? RequireObjectCoercible(string).\r\n2. Let S be ? ToString(str).\r\n...\r\n\r\nToString ( argument )\r\nIf argument is Object:\r\n1. Let primValue be ? ToPrimitive(argument, hint String).\r\n...\r\n\r\nToPrimitive ( input [, PreferredType ])\r\n...\r\nb. Else if PreferredType is hint String, let hint be \"string\".\r\n...\r\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive)\r\ne. If exoticToPrim is not undefined, then\r\ni. Let result be ? Call(exoticToPrim, input, « hint »).\r\nii. If Type(result) is not Object, return result.\r\niii. Throw a TypeError exception.\r\nf. If hint is \"default\", set hint to \"number\".\r\ng. Return ? OrdinaryToPrimitive(input, hint).\r\n...\r\n\r\nOrdinaryToPrimitive( O, hint )\r\n...\r\n3. If hint is \"string\", then\r\na. Let methodNames be « \"toString\", \"valueOf\" ».\r\n...\r\n5. For each name in methodNames in List order, do\r\na. Let method be ? Get(O, name).\r\n","features":["string-trimming","Symbol.toPrimitive\r"]},{"path":"./test262/test/built-ins/String/prototype/trimStart/this-value-object-valueof-meth-err.js","esid":" sec-string.prototype.trimStart\r","description":" >\rAbrupt completion when valueOf called and abrupt completes.\r\n","info":" |\rRuntime Semantics: TrimString ( string, where )\r\n1. Let str be ? RequireObjectCoercible(string).\r\n2. Let S be ? ToString(str).\r\n...\r\n\r\nToString ( argument )\r\nIf argument is Object:\r\n1. Let primValue be ? ToPrimitive(argument, hint String).\r\n...\r\n\r\nToPrimitive ( input [, PreferredType ])\r\n...\r\nb. Else if PreferredType is hint String, let hint be \"string\".\r\n...\r\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive)\r\ne. If exoticToPrim is not undefined, then\r\ni. Let result be ? Call(exoticToPrim, input, « hint »).\r\nii. If Type(result) is not Object, return result.\r\niii. Throw a TypeError exception.\r\nf. If hint is \"default\", set hint to \"number\".\r\ng. Return ? OrdinaryToPrimitive(input, hint).\r\n...\r\n\r\nOrdinaryToPrimitive( O, hint )\r\n...\r\n3. If hint is \"string\", then\r\na. Let methodNames be « \"toString\", \"valueOf\" ».\r\n...\r\n5. For each name in methodNames in List order, do\r\na. Let method be ? Get(O, name).\r\nb. If IsCallable(method) is true, then\r\ni. Let result be ? Call(method, O).\r\n","features":["string-trimming","String.prototype.trimStart","Symbol.toPrimitive\r"]},{"path":"./test262/test/built-ins/String/prototype/trimStart/this-value-object-valueof-meth-priority.js","esid":" sec-string.prototype.trimStart\r","description":" >\rPriority of valueOf when converting object to string for trimming\r\n","info":" |\rRuntime Semantics: TrimString ( string, where )\r\n1. Let str be ? RequireObjectCoercible(string).\r\n2. Let S be ? ToString(str).\r\n...\r\n\r\nToString ( argument )\r\nIf argument is Object:\r\n1. Let primValue be ? ToPrimitive(argument, hint String).\r\n...\r\n\r\nToPrimitive ( input [, PreferredType ])\r\n...\r\nb. Else if PreferredType is hint String, let hint be \"string\".\r\n...\r\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive)\r\ne. If exoticToPrim is not undefined, then\r\ni. Let result be ? Call(exoticToPrim, input, « hint »).\r\nii. If Type(result) is not Object, return result.\r\niii. Throw a TypeError exception.\r\nf. If hint is \"default\", set hint to \"number\".\r\ng. Return ? OrdinaryToPrimitive(input, hint).\r\n...\r\n\r\nOrdinaryToPrimitive( O, hint )\r\n...\r\n3. If hint is \"string\", then\r\na. Let methodNames be « \"toString\", \"valueOf\" ».\r\n...\r\n5. For each name in methodNames in List order, do\r\na. Let method be ? Get(O, name).\r\nb. If IsCallable(method) is true, then\r\ni. Let result be ? Call(method, O).\r\nii. If Type(result) is not Object, return result.\r\n...\r\n","features":["string-trimming","String.prototype.trimStart","Symbol.toPrimitive\r"]},{"path":"./test262/test/built-ins/String/prototype/trimStart/this-value-object-valueof-returns-object-err.js","esid":" sec-string.prototype.trimStart\r","description":" >\rAbrupt completion when valueOf called and returns an object\r\n","info":" |\rRuntime Semantics: TrimString ( string, where )\r\n1. Let str be ? RequireObjectCoercible(string).\r\n2. Let S be ? ToString(str).\r\n...\r\n\r\nToString ( argument )\r\nIf argument is Object:\r\n1. Let primValue be ? ToPrimitive(argument, hint String).\r\n...\r\n\r\nToPrimitive ( input [, PreferredType ])\r\n...\r\nb. Else if PreferredType is hint String, let hint be \"string\".\r\n...\r\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive)\r\ne. If exoticToPrim is not undefined, then\r\ni. Let result be ? Call(exoticToPrim, input, « hint »).\r\nii. If Type(result) is not Object, return result.\r\niii. Throw a TypeError exception.\r\nf. If hint is \"default\", set hint to \"number\".\r\ng. Return ? OrdinaryToPrimitive(input, hint).\r\n...\r\n\r\nOrdinaryToPrimitive( O, hint )\r\n...\r\n3. If hint is \"string\", then\r\na. Let methodNames be « \"toString\", \"valueOf\" ».\r\n...\r\n5. For each name in methodNames in List order, do\r\na. Let method be ? Get(O, name).\r\nb. If IsCallable(method) is true, then\r\ni. Let result be ? Call(method, O).\r\nii. If Type(result) is not Object, return result.\r\n6. Throw a TypeError exception.\r\n","features":["string-trimming","String.prototype.trimStart","Symbol.toPrimitive\r"]},{"path":"./test262/test/built-ins/String/prototype/trimStart/this-value-symbol-typeerror.js","esid":" sec-string.prototype.trimStart\r","description":" Type error when \"this\" value is a Symbol\r","info":" |\rRuntime Semantics: TrimString ( string, where )\r\n2. Let S be ? ToString(str).\r\n\r\nToString ( argument )\r\nArgument Type: Symbol\r\nResult: Throw a TypeError exception\r\n","features":["string-trimming","String.prototype.trimStart\r"]},{"path":"./test262/test/built-ins/String/prototype/trimStart/this-value-whitespace.js","esid":" sec-string.prototype.trimStart\r","description":" TrimStart removes all whitespace from the start of a string.\r","info":" |\rRuntime Symantics: TrimString ( string, where )\r\n...\r\n3. If where is \"start\", let T be a String value that is a copy of S with\r\ntrailing white space removed.\r\n...\r\n\r\nThe definition of white space is the union of WhiteSpace and LineTerminator.\r\nWhen determining whether a Unicode code point is in Unicode general category\r\n“Zs”, code unit sequences are interpreted as UTF-16 encoded code point\r\nsequences as specified in 6.1.4.\r\n\r\n","features":["string-trimming","String.prototype.trimStart\r"]}]