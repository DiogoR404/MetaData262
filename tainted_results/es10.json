[{"path":"./test262/test/built-ins/Array/prototype/Symbol.unscopables/value.js","esid":" sec-array.prototype-@@unscopables","description":" >Initial value of `Symbol.unscopables` property\n","info":" |22.1.3.32 Array.prototype [ @@unscopables ]\n\n1. Let unscopableList be ObjectCreate(null).\n2. Perform CreateDataProperty(unscopableList, \"copyWithin\", true).\n3. Perform CreateDataProperty(unscopableList, \"entries\", true).\n4. Perform CreateDataProperty(unscopableList, \"fill\", true).\n5. Perform CreateDataProperty(unscopableList, \"find\", true).\n6. Perform CreateDataProperty(unscopableList, \"findIndex\", true).\n7. Perform CreateDataProperty(unscopableList, \"flat\", true).\n8. Perform CreateDataProperty(unscopableList, \"flatMap\", true).\n9. Perform CreateDataProperty(unscopableList, \"includes\", true).\n10. Perform CreateDataProperty(unscopableList, \"keys\", true).\n11. Perform CreateDataProperty(unscopableList, \"values\", true).\n12. Assert: Each of the above calls returns true.\n13. Return unscopableList.\n\n","includes":["propertyHelper.js"],"features":["Symbol.unscopables"]},{"path":"./test262/test/built-ins/Array/prototype/flat/array-like-objects.js","esid":" sec-array.prototype.flat","description":" >array-like objects can be flattened\n","includes":["compareArray.js"],"features":["Array.prototype.flat"]},{"path":"./test262/test/built-ins/Array/prototype/flat/bound-function-call.js","esid":" sec-array.prototype.flat","description":" >using bound functions\n","includes":["compareArray.js"],"features":["Array.prototype.flat"]},{"path":"./test262/test/built-ins/Array/prototype/flat/call-with-boolean.js","esid":" sec-array.prototype.flat","description":" Array.prototype.flat applied to boolean primitive","includes":["compareArray.js"]},{"path":"./test262/test/built-ins/Array/prototype/flat/empty-array-elements.js","esid":" sec-array.prototype.flat","description":" >arrays with empty arrays elements\n","includes":["compareArray.js"],"features":["Array.prototype.flat"]},{"path":"./test262/test/built-ins/Array/prototype/flat/empty-object-elements.js","esid":" sec-array.prototype.flat","description":" >arrays with empty object elements\n","includes":["compareArray.js"],"features":["Array.prototype.flat"]},{"path":"./test262/test/built-ins/Array/prototype/flat/length.js","esid":" sec-array.prototype.flat","description":" Array.prototype.flat.length value and descriptor.","info":" >17 ECMAScript Standard Built-in Objects\n","includes":["propertyHelper.js"],"features":["Array.prototype.flat"]},{"path":"./test262/test/built-ins/Array/prototype/flat/name.js","esid":" sec-array.prototype.flat","description":" >Array.prototype.flat.name value and descriptor.\n","info":" >17 ECMAScript Standard Built-in Objects\n","includes":["propertyHelper.js"],"features":["Array.prototype.flat"]},{"path":"./test262/test/built-ins/Array/prototype/flat/non-numeric-depth-should-not-throw.js","esid":" sec-array.prototype.flat","description":" >if the argument is a string or object, the depthNum is 0\n","includes":["compareArray.js"],"features":["Array.prototype.flat"]},{"path":"./test262/test/built-ins/Array/prototype/flat/non-object-ctor-throws.js","esid":" sec-array.prototype.flat","description":" >Behavior when `constructor` property is neither an Object nor undefined\n- if IsConstructor(C) is false, throw a TypeError exception.\n","features":["Array.prototype.flat"]},{"path":"./test262/test/built-ins/Array/prototype/flat/not-a-constructor.js","esid":" sec-ecmascript-standard-built-in-objects","description":" >Array.prototype.flat does not implement [[Construct]], is not new-able\n","info":" |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n","includes":["isConstructor.js"],"features":["Reflect.construct","arrow-function"]},{"path":"./test262/test/built-ins/Array/prototype/flat/null-undefined-elements.js","esid":" sec-array.prototype.flat","description":" >arrays with null, and undefined\n","includes":["compareArray.js"],"features":["Array.prototype.flat"]},{"path":"./test262/test/built-ins/Array/prototype/flat/null-undefined-input-throws.js","esid":" sec-array.prototype.flat","description":" >null or undefined should throw TypeError Exception\n","features":["Array.prototype.flat"]},{"path":"./test262/test/built-ins/Array/prototype/flat/positive-infinity.js","esid":" sec-array.prototype.flat","description":" >if the argument is a positive infinity, the depthNum is max depth of the array\n","includes":["compareArray.js"],"features":["Array.prototype.flat"]},{"path":"./test262/test/built-ins/Array/prototype/flat/prop-desc.js","esid":" sec-array.prototype.flat","description":" Property type and descriptor.","info":" >17 ECMAScript Standard Built-in Objects\n","includes":["propertyHelper.js"],"features":["Array.prototype.flat"]},{"path":"./test262/test/built-ins/Array/prototype/flat/proxy-access-count.js","esid":" sec-array.prototype.flat","description":" >properties are accessed correct number of times by .flat\n","info":" |Array.prototype.flat( [ depth ] )\n\n...\n6. Perform ? FlattenIntoArray(A, O, sourceLen, 0, depthNum).\n\nFlattenIntoArray (target, source, sourceLen, start, depth [ , mapperFunction, thisArg ])\n\n3. Repeat, while sourceIndex < sourceLen\na. Let P be ! ToString(sourceIndex).\nb. Let exists be ? HasProperty(source, P).\nc. If exists is true, then\ni. Let element be ? Get(source, P).\n","features":["Array.prototype.flat"],"includes":["compareArray.js"]},{"path":"./test262/test/built-ins/Array/prototype/flat/symbol-object-create-null-depth-throws.js","esid":" sec-array.prototype.flat","description":" >if the argument is a Symbol or Object null, it throws exception\n","features":["Array.prototype.flat"]},{"path":"./test262/test/built-ins/Array/prototype/flat/target-array-non-extensible.js","esid":" sec-array.prototype.flat","description":" >TypeError is thrown if CreateDataProperty fails.\n(result object is non-extensible, source array is not flattened)\n","info":" |Array.prototype.flat ( [ depth ] )\n\n[...]\n6. Perform ? FlattenIntoArray(A, O, sourceLen, 0, depthNum).\n\nFlattenIntoArray ( target, source, sourceLen, start, depth [ , mapperFunction, thisArg ] )\n\n[...]\n9. Repeat, while sourceIndex < sourceLen\n[...]\nc. If exists is true, then\n[...]\nv. If shouldFlatten is true, then\n[...]\nvi. Else,\n[...]\n2. Perform ? CreateDataPropertyOrThrow(target, ! ToString(targetIndex), element).\n[...]\n\nCreateDataPropertyOrThrow ( O, P, V )\n\n[...]\n3. Let success be ? CreateDataProperty(O, P, V).\n4. If success is false, throw a TypeError exception.\n","features":["Symbol.species"]},{"path":"./test262/test/built-ins/Array/prototype/flat/target-array-with-non-configurable-property.js","esid":" sec-array.prototype.flat","description":" >TypeError is thrown if CreateDataProperty fails.\n(result object's \"0\" is non-configurable, source array gets flattened)\n","info":" |Array.prototype.flat ( [ depth ] )\n\n[...]\n6. Perform ? FlattenIntoArray(A, O, sourceLen, 0, depthNum).\n\nFlattenIntoArray ( target, source, sourceLen, start, depth [ , mapperFunction, thisArg ] )\n\n[...]\n9. Repeat, while sourceIndex < sourceLen\n[...]\nc. If exists is true, then\n[...]\nv. If shouldFlatten is true, then\n[...]\n2. Set targetIndex to ? FlattenIntoArray(target, element, elementLen, targetIndex, depth - 1).\n[...]\n\nCreateDataPropertyOrThrow ( O, P, V )\n\n[...]\n3. Let success be ? CreateDataProperty(O, P, V).\n4. If success is false, throw a TypeError exception.\n","features":["Symbol.species"]},{"path":"./test262/test/built-ins/Array/prototype/flat/target-array-with-non-writable-property.js","esid":" sec-array.prototype.flat","description":" >Non-writable properties are overwritten by CreateDataProperty.\n(result object's \"0\" is non-writable, source array gets flattened)\n","info":" |Array.prototype.flat ( [ depth ] )\n\n[...]\n6. Perform ? FlattenIntoArray(A, O, sourceLen, 0, depthNum).\n\nFlattenIntoArray ( target, source, sourceLen, start, depth [ , mapperFunction, thisArg ] )\n\n[...]\n9. Repeat, while sourceIndex < sourceLen\n[...]\nc. If exists is true, then\n[...]\nv. If shouldFlatten is true, then\n[...]\n2. Set targetIndex to ? FlattenIntoArray(target, element, elementLen, targetIndex, depth - 1).\n[...]\n","features":["Symbol.species"],"includes":["propertyHelper.js"]},{"path":"./test262/test/built-ins/Array/prototype/flatMap/array-like-objects-nested.js","esid":" sec-array.prototype.flatMap","description":" >Does not flatten array-like objects nested into the main array\n","info":" |FlattenIntoArray(target, source, sourceLen, start, depth [ , mapperFunction, thisArg ])\n\n1. Let targetIndex be start.\n2. Let sourceIndex be 0.\n3. Repeat, while sourceIndex < sourceLen\na. Let P be ! ToString(sourceIndex).\nb. Let exists be ? HasProperty(source, P).\nc. If exists is true, then\ni. Let element be ? Get(source, P).\nii. If mapperFunction is present, then\n1. Assert: thisArg is present.\n2. Set element to ? Call(mapperFunction, thisArg , « element, sourceIndex, source »).\niii. Let shouldFlatten be false.\niv. If depth > 0, then\n1. Set shouldFlatten to ? IsArray(element).\nv. If shouldFlatten is true, then\n1. Let elementLen be ? ToLength(? Get(element, \"length\")).\n2. Set targetIndex to ? FlattenIntoArray(target, element, elementLen, targetIndex, depth - 1).\nvi. Else,\n1. If targetIndex ≥ 253-1, throw a TypeError exception.\n2. Perform ? CreateDataPropertyOrThrow(target, ! ToString(targetIndex), element).\n3. Increase targetIndex by 1.\n","includes":["compareArray.js"],"features":["Array.prototype.flatMap","Int32Array"]},{"path":"./test262/test/built-ins/Array/prototype/flatMap/array-like-objects-poisoned-length.js","esid":" sec-array.prototype.flatMap","description":" >Observe abrupt completion in poisoned lengths of array-like objects\n","info":" |Array.prototype.flatMap ( mapperFunction [ , thisArg ] )\n\n1. Let O be ? ToObject(this value).\n2. Let sourceLen be ? ToLength(? Get(O, \"length\")).\n","features":["Array.prototype.flatMap","Symbol.toPrimitive"]},{"path":"./test262/test/built-ins/Array/prototype/flatMap/array-like-objects-typedarrays.js","esid":" sec-array.prototype.flatMap","description":" >array-like objects can be flattened (typedArrays)\n","info":" |Array.prototype.flatMap ( mapperFunction [ , thisArg ] )\n\n1. Let O be ? ToObject(this value).\n2. Let sourceLen be ? ToLength(? Get(O, \"length\")).\n...\n5. Let A be ? ArraySpeciesCreate(O, 0).\n...\n\nArraySpeciesCreate ( originalArray, length )\n\n3. Let isArray be ? IsArray(originalArray).\n4. If isArray is false, return ? ArrayCreate(length).\n5. Let C be ? Get(originalArray, \"constructor\").\n","includes":["compareArray.js"],"features":["Array.prototype.flatMap","Int32Array"]},{"path":"./test262/test/built-ins/Array/prototype/flatMap/array-like-objects.js","esid":" sec-array.prototype.flatMap","description":" >array-like objects can be flattened\n","info":" |Array.prototype.flatMap ( mapperFunction [ , thisArg ] )\n\n1. Let O be ? ToObject(this value).\n2. Let sourceLen be ? ToLength(? Get(O, \"length\")).\n...\n5. Let A be ? ArraySpeciesCreate(O, 0).\n...\n\nArraySpeciesCreate ( originalArray, length )\n\n3. Let isArray be ? IsArray(originalArray).\n4. If isArray is false, return ? ArrayCreate(length).\n\nFlattenIntoArray(target, source, sourceLen, start, depth [ , mapperFunction, thisArg ])\n\n1. Let targetIndex be start.\n2. Let sourceIndex be 0.\n3. Repeat, while sourceIndex < sourceLen\na. Let P be ! ToString(sourceIndex).\nb. Let exists be ? HasProperty(source, P).\nc. If exists is true, then\n...\n** Skip if property does not exist **\n","includes":["compareArray.js"],"features":["Array.prototype.flatMap"]},{"path":"./test262/test/built-ins/Array/prototype/flatMap/bound-function-argument.js","esid":" sec-array.prototype.flatMap","description":" >Behavior when given a bound function\n","includes":["compareArray.js"],"features":["Array.prototype.flatMap"]},{"path":"./test262/test/built-ins/Array/prototype/flatMap/call-with-boolean.js","esid":" sec-array.prototype.flatMap","description":" Array.prototype.flatMap applied to boolean primitive","includes":["compareArray.js"]},{"path":"./test262/test/built-ins/Array/prototype/flatMap/depth-always-one.js","esid":" sec-array.prototype.flatMap","description":" >Behavior when array is depth more than 1\n","includes":["compareArray.js"],"features":["Array.prototype.flatMap"]},{"path":"./test262/test/built-ins/Array/prototype/flatMap/length.js","esid":" sec-array.prototype.flatMap","description":" Array.prototype.flatMap.length value and descriptor.","info":" >17 ECMAScript Standard Built-in Objects\n","includes":["propertyHelper.js"],"features":["Array.prototype.flatMap"]},{"path":"./test262/test/built-ins/Array/prototype/flatMap/name.js","esid":" sec-array.prototype.flatmap","description":" Array.prototype.flatmap name value and descriptor.","info":" >17 ECMAScript Standard Built-in Objects\n","includes":["propertyHelper.js"],"features":["Array.prototype.flatMap"]},{"path":"./test262/test/built-ins/Array/prototype/flatMap/non-callable-argument-throws.js","esid":" sec-array.prototype.flatMap","description":" >non callable argument should throw TypeError Exception\n","info":" |Array.prototype.flatMap ( mapperFunction [ , thisArg ] )\n\n1. Let O be ? ToObject(this value).\n2. Let sourceLen be ? ToLength(? Get(O, \"length\")).\n3. If IsCallable(mapperFunction) is false, throw a TypeError exception.\n...\n","features":["Array.prototype.flatMap","Symbol"]},{"path":"./test262/test/built-ins/Array/prototype/flatMap/not-a-constructor.js","esid":" sec-ecmascript-standard-built-in-objects","description":" >Array.prototype.flatMap does not implement [[Construct]], is not new-able\n","info":" |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n","includes":["isConstructor.js"],"features":["Reflect.construct","Array.prototype.flatMap","arrow-function"]},{"path":"./test262/test/built-ins/Array/prototype/flatMap/prop-desc.js","esid":" sec-array.prototype.flatMap","description":" Property type and descriptor.","info":" >17 ECMAScript Standard Built-in Objects\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2\nhas the attributes { [[Writable]]: true, [[Enumerable]]: false,\n[[Configurable]]: true } unless otherwise specified.\n","includes":["propertyHelper.js"],"features":["Array.prototype.flatMap"]},{"path":"./test262/test/built-ins/Array/prototype/flatMap/proxy-access-count.js","esid":" sec-array.prototype.flatMap","description":" >properties are accessed correct number of times by .flatMap\n","info":" |Array.prototype.flatMap ( mapperFunction [ , thisArg ] )\n\n...\n6. Perform ? FlattenIntoArray(A, O, sourceLen, 0, 1, mapperFunction, T).\n\nFlattenIntoArray (target, source, sourceLen, start, depth [ , mapperFunction, thisArg ])\n\n3. Repeat, while sourceIndex < sourceLen\na. Let P be ! ToString(sourceIndex).\nb. Let exists be ? HasProperty(source, P).\nc. If exists is true, then\ni. Let element be ? Get(source, P).\n","features":["Array.prototype.flatMap"],"includes":["compareArray.js"]},{"path":"./test262/test/built-ins/Array/prototype/flatMap/target-array-non-extensible.js","esid":" sec-array.prototype.flatmap","description":" >TypeError is thrown if CreateDataProperty fails.\n(result object is non-extensible, source array gets flattened)\n","info":" |Array.prototype.flatMap ( mapperFunction [ , thisArg ] )\n\n[...]\n6. Perform ? FlattenIntoArray(A, O, sourceLen, 0, depthNum).\n\nFlattenIntoArray ( target, source, sourceLen, start, depth [ , mapperFunction, thisArg ] )\n\n[...]\n9. Repeat, while sourceIndex < sourceLen\n[...]\nc. If exists is true, then\n[...]\nv. If shouldFlatten is true, then\n[...]\n2. Set targetIndex to ? FlattenIntoArray(target, element, elementLen, targetIndex, depth - 1).\n[...]\n\nCreateDataPropertyOrThrow ( O, P, V )\n\n[...]\n3. Let success be ? CreateDataProperty(O, P, V).\n4. If success is false, throw a TypeError exception.\n","features":["Symbol.species"]},{"path":"./test262/test/built-ins/Array/prototype/flatMap/target-array-with-non-configurable-property.js","esid":" sec-array.prototype.flatmap","description":" >TypeError is thrown if CreateDataProperty fails.\n(result object's \"0\" is non-configurable, source array is not flattened)\n","info":" |Array.prototype.flatMap ( mapperFunction [ , thisArg ] )\n\n[...]\n6. Perform ? FlattenIntoArray(A, O, sourceLen, 0, depthNum).\n\nFlattenIntoArray ( target, source, sourceLen, start, depth [ , mapperFunction, thisArg ] )\n\n[...]\n9. Repeat, while sourceIndex < sourceLen\n[...]\nc. If exists is true, then\n[...]\nv. If shouldFlatten is true, then\n[...]\nvi. Else,\n[...]\n2. Perform ? CreateDataPropertyOrThrow(target, ! ToString(targetIndex), element).\n[...]\n\nCreateDataPropertyOrThrow ( O, P, V )\n\n[...]\n3. Let success be ? CreateDataProperty(O, P, V).\n4. If success is false, throw a TypeError exception.\n","features":["Symbol.species"]},{"path":"./test262/test/built-ins/Array/prototype/flatMap/target-array-with-non-writable-property.js","esid":" sec-array.prototype.flatmap","description":" >Non-writable properties are overwritten by CreateDataProperty.\n(result object's \"0\" is non-writable, source array is not flattened)\n","info":" |Array.prototype.flatMap ( mapperFunction [ , thisArg ] )\n\n[...]\n6. Perform ? FlattenIntoArray(A, O, sourceLen, 0, depthNum).\n\nFlattenIntoArray ( target, source, sourceLen, start, depth [ , mapperFunction, thisArg ] )\n\n[...]\n9. Repeat, while sourceIndex < sourceLen\n[...]\nc. If exists is true, then\n[...]\nv. If shouldFlatten is true, then\n[...]\nvi. Else,\n[...]\n2. Perform ? CreateDataPropertyOrThrow(target, ! ToString(targetIndex), element).\n[...]\n","features":["Symbol.species"],"includes":["propertyHelper.js"]},{"path":"./test262/test/built-ins/Array/prototype/flatMap/this-value-ctor-non-object.js","esid":" sec-array.prototype.flatMap","description":" >Assert behavior if this value has a custom non-object constructor property\n","info":" |Array.prototype.flatMap ( mapperFunction [ , thisArg ] )\n\n1. Let O be ? ToObject(this value).\n2. Let sourceLen be ? ToLength(? Get(O, \"length\")).\n...\n5. Let A be ? ArraySpeciesCreate(O, 0).\n...\n\nArraySpeciesCreate ( originalArray, length )\n\n3. Let isArray be ? IsArray(originalArray).\n4. If isArray is false, return ? ArrayCreate(length).\n5. Let C be ? Get(originalArray, \"constructor\").\n6. If IsConstructor(C) is true, then\na. Let thisRealm be the current Realm Record.\nb. Let realmC be ? GetFunctionRealm(C).\nc. If thisRealm and realmC are not the same Realm Record, then\ni. If SameValue(C, realmC.[[Intrinsics]].[[%Array%]]) is true, set C to undefined.\n7. If Type(C) is Object, then\na. Set C to ? Get(C, @@species).\nb. If C is null, set C to undefined.\n8. If C is undefined, return ? ArrayCreate(length).\n9. If IsConstructor(C) is false, throw a TypeError exception.\n","features":["Array.prototype.flatMap","Symbol"],"includes":["compareArray.js"]},{"path":"./test262/test/built-ins/Array/prototype/flatMap/this-value-ctor-object-species-bad-throws.js","esid":" sec-array.prototype.flatMap","description":" >Assert behavior if this value has a custom object constructor property species\n","info":" |Array.prototype.flatMap ( mapperFunction [ , thisArg ] )\n\n1. Let O be ? ToObject(this value).\n2. Let sourceLen be ? ToLength(? Get(O, \"length\")).\n...\n5. Let A be ? ArraySpeciesCreate(O, 0).\n...\n\nArraySpeciesCreate ( originalArray, length )\n\n3. Let isArray be ? IsArray(originalArray).\n4. If isArray is false, return ? ArrayCreate(length).\n5. Let C be ? Get(originalArray, \"constructor\").\n6. If IsConstructor(C) is true, then\na. Let thisRealm be the current Realm Record.\nb. Let realmC be ? GetFunctionRealm(C).\nc. If thisRealm and realmC are not the same Realm Record, then\ni. If SameValue(C, realmC.[[Intrinsics]].[[%Array%]]) is true, set C to undefined.\n7. If Type(C) is Object, then\na. Set C to ? Get(C, @@species).\nb. If C is null, set C to undefined.\n8. If C is undefined, return ? ArrayCreate(length).\n9. If IsConstructor(C) is false, throw a TypeError exception.\n10. Return ? Construct(C, « length »).\n","features":["Array.prototype.flatMap","Symbol","Symbol.species"],"includes":["compareArray.js"]},{"path":"./test262/test/built-ins/Array/prototype/flatMap/this-value-ctor-object-species-custom-ctor-poisoned-throws.js","esid":" sec-array.prototype.flatMap","description":" >Assert behavior if this value has a poisoned custom species constructor\n","info":" |Array.prototype.flatMap ( mapperFunction [ , thisArg ] )\n\n1. Let O be ? ToObject(this value).\n2. Let sourceLen be ? ToLength(? Get(O, \"length\")).\n...\n5. Let A be ? ArraySpeciesCreate(O, 0).\n6. Perform ? FlattenIntoArray(A, O, sourceLen, 0, 1, mapperFunction, T).\n7. Return A.\n\nArraySpeciesCreate ( originalArray, length )\n\n3. Let isArray be ? IsArray(originalArray).\n4. If isArray is false, return ? ArrayCreate(length).\n5. Let C be ? Get(originalArray, \"constructor\").\n6. If IsConstructor(C) is true, then\n...\n7. If Type(C) is Object, then\na. Set C to ? Get(C, @@species).\nb. If C is null, set C to undefined.\n8. If C is undefined, return ? ArrayCreate(length).\n9. If IsConstructor(C) is false, throw a TypeError exception.\n10. Return ? Construct(C, « length »).\n","features":["Array.prototype.flatMap","Symbol","Symbol.species"]},{"path":"./test262/test/built-ins/Array/prototype/flatMap/this-value-ctor-object-species-custom-ctor.js","esid":" sec-array.prototype.flatMap","description":" >Assert behavior if this value has a custom species constructor\n","info":" |Array.prototype.flatMap ( mapperFunction [ , thisArg ] )\n\n1. Let O be ? ToObject(this value).\n2. Let sourceLen be ? ToLength(? Get(O, \"length\")).\n...\n5. Let A be ? ArraySpeciesCreate(O, 0).\n6. Perform ? FlattenIntoArray(A, O, sourceLen, 0, 1, mapperFunction, T).\n7. Return A.\n\nArraySpeciesCreate ( originalArray, length )\n\n3. Let isArray be ? IsArray(originalArray).\n4. If isArray is false, return ? ArrayCreate(length).\n5. Let C be ? Get(originalArray, \"constructor\").\n6. If IsConstructor(C) is true, then\n...\n7. If Type(C) is Object, then\na. Set C to ? Get(C, @@species).\nb. If C is null, set C to undefined.\n8. If C is undefined, return ? ArrayCreate(length).\n9. If IsConstructor(C) is false, throw a TypeError exception.\n10. Return ? Construct(C, « length »).\n\nFlattenIntoArray(target, source, sourceLen, start, depth [ , mapperFunction, thisArg ])\n\n3. Repeat, while sourceIndex < sourceLen\na. Let P be ! ToString(sourceIndex).\nb. Let exists be ? HasProperty(source, P).\nc. If exists is true, then\n...\nvi. Else,\n...\n2. Perform ? CreateDataPropertyOrThrow(target, ! ToString(targetIndex), element).\n","features":["Array.prototype.flatMap","Symbol","Symbol.species"],"includes":["propertyHelper.js"]},{"path":"./test262/test/built-ins/Array/prototype/flatMap/this-value-ctor-object-species.js","esid":" sec-array.prototype.flatMap","description":" >Assert behavior if this value has a custom object constructor property\n","info":" |Array.prototype.flatMap ( mapperFunction [ , thisArg ] )\n\n1. Let O be ? ToObject(this value).\n2. Let sourceLen be ? ToLength(? Get(O, \"length\")).\n...\n5. Let A be ? ArraySpeciesCreate(O, 0).\n...\n\nArraySpeciesCreate ( originalArray, length )\n\n3. Let isArray be ? IsArray(originalArray).\n4. If isArray is false, return ? ArrayCreate(length).\n5. Let C be ? Get(originalArray, \"constructor\").\n6. If IsConstructor(C) is true, then\na. Let thisRealm be the current Realm Record.\nb. Let realmC be ? GetFunctionRealm(C).\nc. If thisRealm and realmC are not the same Realm Record, then\ni. If SameValue(C, realmC.[[Intrinsics]].[[%Array%]]) is true, set C to undefined.\n7. If Type(C) is Object, then\na. Set C to ? Get(C, @@species).\nb. If C is null, set C to undefined.\n8. If C is undefined, return ? ArrayCreate(length).\n9. If IsConstructor(C) is false, throw a TypeError exception.\n10. Return ? Construct(C, « length »).\n","features":["Array.prototype.flatMap","Symbol","Symbol.species"],"includes":["compareArray.js"]},{"path":"./test262/test/built-ins/Array/prototype/flatMap/this-value-null-undefined-throws.js","esid":" sec-array.prototype.flatMap","description":" >Throw a TypeError if this value is null or undefined\n","info":" |Array.prototype.flatMap ( mapperFunction [ , thisArg ] )\n\n1. Let O be ? ToObject(this value).\n...\n","features":["Array.prototype.flatMap"]},{"path":"./test262/test/built-ins/Array/prototype/flatMap/thisArg-argument.js","esid":" sec-array.prototype.flatMap","description":" >Behavior when thisArg is provided\nArray.prototype.flatMap ( mapperFunction [ , thisArg ] )\n","flags":["onlyStrict"],"includes":["compareArray.js"],"features":["Array.prototype.flatMap"]},{"path":"./test262/test/built-ins/Array/prototype/methods-called-as-functions.js","esid":" sec-properties-of-the-array-prototype-object","description":" >Array.prototype methods resolve `this` value using strict mode semantics,\nthrowing TypeError if called as top-level function.\n","info":" |Array.prototype.concat ( ...items )\n\n1. Let O be ? ToObject(this value).\n\nToObject ( argument )\n\nArgument Type: Undefined\nResult: Throw a TypeError exception.\n","features":["Symbol","Symbol.isConcatSpreadable","Symbol.iterator","Symbol.species","Array.prototype.flat","Array.prototype.flatMap"]},{"path":"./test262/test/built-ins/Atomics/notify/bad-range.js","esid":" sec-atomics.notify","description":" >Test range checking of Atomics.notify on arrays that allow atomic operations\n","info":" |Atomics.notify( typedArray, index, count )\n\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray, true).\n..\n\n","includes":["testAtomics.js"],"features":["ArrayBuffer","Atomics","DataView","SharedArrayBuffer","Symbol","TypedArray"]},{"path":"./test262/test/built-ins/Atomics/notify/count-boundary-cases.js","esid":" sec-atomics.notify","description":" >Allowed boundary cases for 'count' argument to Atomics.notify\n","info":" |Atomics.notify( typedArray, index, count )\n\n...\n3. If count is undefined, let c be +∞.\n4. Else,\na. Let intCount be ? ToInteger(count).\n...\n\nToInteger ( argument )\n\n1. Let number be ? ToNumber(argument).\n2. If number is NaN, return +0.\n3. If number is +0, -0, +∞, or -∞, return number.\n4. Return the number value that is the same sign as number\nand whose magnitude is floor(abs(number)).\n\n","features":["Atomics","SharedArrayBuffer","TypedArray"]},{"path":"./test262/test/built-ins/Atomics/notify/count-defaults-to-infinity-missing.js","esid":" sec-atomics.notify","description":" >Default to +Infinity when missing 'count' argument to Atomics.notify\n","info":" |Atomics.notify( typedArray, index, count )\n\n...\n3. If count is undefined, let c be +∞.\n...\n\n","includes":["atomicsHelper.js"],"features":["Atomics","SharedArrayBuffer","TypedArray"]},{"path":"./test262/test/built-ins/Atomics/notify/count-defaults-to-infinity-undefined.js","esid":" sec-atomics.notify","description":" >Undefined count arg should result in an infinite count\n","info":" |Atomics.notify( typedArray, index, count )\n\n3.If count is undefined, let c be +∞.\n\n","includes":["atomicsHelper.js"],"features":["Atomics","SharedArrayBuffer","TypedArray"]},{"path":"./test262/test/built-ins/Atomics/notify/count-from-nans.js","esid":" sec-atomics.notify","description":" >NaNs are converted to 0 for 'count' argument to Atomics.notify\n","info":" |Atomics.notify( typedArray, index, count )\n\n...\n3. If count is undefined, let c be +∞.\n4. Else,\na. Let intCount be ? ToInteger(count).\n...\n\nToInteger ( argument )\n\n...\n2. If number is NaN, return +0.\n...\n\n","includes":["nans.js"],"features":["Atomics","SharedArrayBuffer","TypedArray"]},{"path":"./test262/test/built-ins/Atomics/notify/count-symbol-throws.js","esid":" sec-atomics.notify","description":" >Return abrupt when symbol passed for 'count' argument to Atomics.notify\n","info":" |Atomics.notify( typedArray, index, count )\n\n...\n3. If count is undefined, let c be +∞.\n4. Else,\na. Let intCount be ? ToInteger(count).\n...\n\n","features":["Atomics","SharedArrayBuffer","TypedArray"]},{"path":"./test262/test/built-ins/Atomics/notify/count-tointeger-throws-then-wake-throws.js","esid":" sec-atomics.notify","description":" >Return abrupt when ToInteger throws an exception on 'count' argument to Atomics.notify\n","info":" |Atomics.notify( typedArray, index, count )\n\n...\n3. If count is undefined, let c be +∞.\n4. Else,\na. Let intCount be ? ToInteger(count).\n...\n\n","features":["Atomics","SharedArrayBuffer","TypedArray"]},{"path":"./test262/test/built-ins/Atomics/notify/length.js","esid":" sec-atomics.notify","description":" >Atomics.notify.length is 3.\n","info":" |Atomics.notify ( ia, index, count )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form “...name”\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["Atomics"]},{"path":"./test262/test/built-ins/Atomics/notify/name.js","esid":" sec-atomics.notify","description":" >Atomics.notify.name is \"notify\".\n","includes":["propertyHelper.js"],"features":["Atomics"]},{"path":"./test262/test/built-ins/Atomics/notify/negative-count.js","esid":" sec-atomics.notify","description":" >Test that Atomics.notify notifies zero waiters if the count is negative\n","includes":["atomicsHelper.js"],"features":["Atomics","SharedArrayBuffer","TypedArray"]},{"path":"./test262/test/built-ins/Atomics/notify/negative-index-throws.js","esid":" sec-atomics.notify","description":" >Throws a RangeError is index < 0\n","info":" |Atomics.notify( typedArray, index, count )\n\n2.Let i be ? ValidateAtomicAccess(typedArray, index).\n...\n2.Let accessIndex be ? ToIndex(requestIndex).\n...\n2.b If integerIndex < 0, throw a RangeError exception\n","features":["Atomics","SharedArrayBuffer","TypedArray"]},{"path":"./test262/test/built-ins/Atomics/notify/non-int32-typedarray-throws.js","esid":" sec-atomics.notify","description":" >Throws a TypeError if typedArray arg is not an Int32Array\n","info":" |Atomics.notify( typedArray, index, count )\n\n1.Let buffer be ? ValidateSharedIntegerTypedArray(typedArray, true).\n...\n5.If onlyInt32 is true, then\nIf typeName is not \"Int32Array\", throw a TypeError exception.\n","features":["Atomics","Float32Array","Float64Array","Int8Array","TypedArray","Uint16Array","Uint8Array","Uint8ClampedArray"]},{"path":"./test262/test/built-ins/Atomics/notify/non-shared-bufferdata-count-evaluation-throws.js","esid":" sec-atomics.notify","description":" >Evaluates count before returning 0, when TA.buffer is not a SharedArrayBuffer\n","info":" |Atomics.notify( typedArray, index, count )\n\nLet buffer be ? ValidateIntegerTypedArray(typedArray, true).\n...\nElse,\nLet intCount be ? ToInteger(count).\nLet c be max(intCount, 0).\n...\nIf IsSharedArrayBuffer(buffer) is false, return 0.\n\n\n","features":["ArrayBuffer","Atomics","TypedArray"]},{"path":"./test262/test/built-ins/Atomics/notify/non-shared-bufferdata-index-evaluation-throws.js","esid":" sec-atomics.notify","description":" >Evaluates index before returning 0, when TA.buffer is not a SharedArrayBuffer\n","info":" |Atomics.notify( typedArray, index, count )\n\nLet buffer be ? ValidateIntegerTypedArray(typedArray, true).\nLet i be ? ValidateAtomicAccess(typedArray, index).\n...\nIf IsSharedArrayBuffer(buffer) is false, return 0.\n\n","features":["ArrayBuffer","Atomics","TypedArray"]},{"path":"./test262/test/built-ins/Atomics/notify/non-shared-bufferdata-non-shared-int-views-throws.js","esid":" sec-atomics.notify","description":" >Atomics.notify throws on non-shared integer TypedArrays\n","features":["ArrayBuffer","Atomics","TypedArray"]},{"path":"./test262/test/built-ins/Atomics/notify/non-shared-bufferdata-returns-0.js","esid":" sec-atomics.notify","description":" >Returns 0, when TA.buffer is not a SharedArrayBuffer\n","info":" |Atomics.notify( typedArray, index, count )\n\nLet buffer be ? ValidateIntegerTypedArray(typedArray, true).\n...\nIf IsSharedArrayBuffer(buffer) is false, return 0.\n\n","features":["ArrayBuffer","Atomics","TypedArray"]},{"path":"./test262/test/built-ins/Atomics/notify/non-shared-int-views.js","esid":" sec-atomics.notify","description":" >Test Atomics.notify on non-shared integer TypedArrays\n","features":["Atomics","SharedArrayBuffer","TypedArray"]},{"path":"./test262/test/built-ins/Atomics/notify/non-views.js","esid":" sec-atomics.notify","description":" >Test Atomics.notify on view values other than TypedArrays\n","includes":["testAtomics.js"],"features":["ArrayBuffer","Atomics","DataView","SharedArrayBuffer","Symbol","TypedArray"]},{"path":"./test262/test/built-ins/Atomics/notify/not-a-constructor.js","esid":" sec-ecmascript-standard-built-in-objects","description":" >Atomics.notify does not implement [[Construct]], is not new-able\n","info":" |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n","includes":["isConstructor.js"],"features":["Reflect.construct","Atomics","arrow-function","TypedArray","SharedArrayBuffer"]},{"path":"./test262/test/built-ins/Atomics/notify/not-an-object-throws.js","esid":" sec-atomics.notify","description":" >Throws a TypeError if typedArray arg is not an Object\n","info":" |Atomics.notify( typedArray, index, count )\n\n1.Let buffer be ? ValidateSharedIntegerTypedArray(typedArray, true).\n...\n2. if Type(typedArray) is not Object, throw a TypeError exception\n","features":["Atomics","Symbol"]},{"path":"./test262/test/built-ins/Atomics/notify/notify-all-on-loc.js","esid":" sec-atomics.notify","description":" >Test that Atomics.notify notifies all waiters on a location, but does not\nnotify waiters on other locations.\n","includes":["atomicsHelper.js"],"features":["Atomics","SharedArrayBuffer","TypedArray"]},{"path":"./test262/test/built-ins/Atomics/notify/notify-all.js","esid":" sec-atomics.notify","description":" >Test that Atomics.notify notifies all waiters if that's what the count is.\n","includes":["atomicsHelper.js"],"features":["Atomics","SharedArrayBuffer","TypedArray"]},{"path":"./test262/test/built-ins/Atomics/notify/notify-in-order-one-time.js","esid":" sec-atomics.notify","description":" >Test that Atomics.notify notifies agents in the order they are waiting.\n","includes":["atomicsHelper.js"],"features":["Atomics","SharedArrayBuffer","TypedArray"]},{"path":"./test262/test/built-ins/Atomics/notify/notify-in-order.js","esid":" sec-atomics.notify","description":" >Test that Atomics.notify notifies agents in the order they are waiting.\n","includes":["atomicsHelper.js"],"features":["Atomics","SharedArrayBuffer","TypedArray"]},{"path":"./test262/test/built-ins/Atomics/notify/notify-nan.js","esid":" sec-atomics.notify","description":" >Test that Atomics.nofity nofities zero waiters if the count is NaN\n","includes":["atomicsHelper.js"],"features":["Atomics","SharedArrayBuffer","TypedArray"]},{"path":"./test262/test/built-ins/Atomics/notify/notify-one.js","esid":" sec-atomics.notify","description":" >Test that Atomics.notify notifies one waiter if that's what the count is.\n","includes":["atomicsHelper.js"],"features":["Atomics","SharedArrayBuffer","TypedArray"]},{"path":"./test262/test/built-ins/Atomics/notify/notify-renotify-noop.js","esid":" sec-atomics.notify","description":" >Test that Atomics.notify on awoken waiter is a noop.\n","includes":["atomicsHelper.js"],"features":["Atomics","SharedArrayBuffer","TypedArray"]},{"path":"./test262/test/built-ins/Atomics/notify/notify-two.js","esid":" sec-atomics.notify","description":" >Test that Atomics.notify notifies two waiters if that's what the count is.\n","includes":["atomicsHelper.js"],"features":["Atomics","SharedArrayBuffer","TypedArray"]},{"path":"./test262/test/built-ins/Atomics/notify/notify-with-no-agents-waiting.js","esid":" sec-atomics.notify","description":" >Test that Atomics.notify notifies zero waiters if there are no agents waiting.\n","includes":["atomicsHelper.js"],"features":["Atomics","SharedArrayBuffer","TypedArray"]},{"path":"./test262/test/built-ins/Atomics/notify/notify-with-no-matching-agents-waiting.js","esid":" sec-atomics.notify","description":" >Test that Atomics.notify notifies zero waiters if there are no waiters\nat the index specified.\n","includes":["atomicsHelper.js"],"features":["Atomics","SharedArrayBuffer","TypedArray"]},{"path":"./test262/test/built-ins/Atomics/notify/notify-zero.js","esid":" sec-atomics.notify","description":" >Test that Atomics.notify notifies zero waiters if that's what the count is.\n","includes":["atomicsHelper.js"],"features":["Atomics","SharedArrayBuffer","TypedArray"]},{"path":"./test262/test/built-ins/Atomics/notify/null-bufferdata-throws.js","esid":" sec-atomics.notify","description":" >A null value for bufferData (detached) throws a TypeError\n","info":" |Atomics.notify( typedArray, index, count )\n\nLet buffer be ? ValidateIntegerTypedArray(typedArray, true).\n...\n\nLet buffer be ? ValidateTypedArray(typedArray).\n...\n\nIf IsDetachedBuffer(buffer) is true, throw a TypeError exception.\n...\n\nIf arrayBuffer.[[ArrayBufferData]] is null, return true.\n\n","includes":["detachArrayBuffer.js"],"features":["ArrayBuffer","Atomics","TypedArray"]},{"path":"./test262/test/built-ins/Atomics/notify/out-of-range-index-throws.js","esid":" sec-atomics.notify","description":" >Throws a RangeError if value of index arg is out of range\ninfo: |\nAtomics.notify( typedArray, index, count )\n\n2.Let i be ? ValidateAtomicAccess(typedArray, index).\n...\n2.Let accessIndex be ? ToIndex(requestIndex).\n...\n5. If accessIndex ≥ length, throw a RangeError exception.\n","info":" |Atomics.notify( typedArray, index, count )\n\n2.Let i be ? ValidateAtomicAccess(typedArray, index).\n...\n2.Let accessIndex be ? ToIndex(requestIndex).\n...\n5. If accessIndex ≥ length, throw a RangeError exception.\n","features":["Atomics","SharedArrayBuffer","TypedArray"]},{"path":"./test262/test/built-ins/Atomics/notify/symbol-for-index-throws.js","esid":" sec-atomics.notify","description":" >Return abrupt when ToInteger throws for 'index' argument to Atomics.notify\n","info":" |Atomics.notify( typedArray, index, value, timeout )\n\n2. Let i be ? ValidateAtomicAccess(typedArray, index).\n\nValidateAtomicAccess( typedArray, requestIndex )\n\n2. Let accessIndex be ? ToIndex(requestIndex).\n\nToIndex ( value )\n\n2. Else,\na. Let integerIndex be ? ToInteger(value).\n\nToInteger(value)\n\n1. Let number be ? ToNumber(argument).\n\nSymbol --> Throw a TypeError exception.\n\n","features":["Atomics","SharedArrayBuffer","Symbol","Symbol.toPrimitive","TypedArray"]},{"path":"./test262/test/built-ins/Atomics/notify/undefined-index-defaults-to-zero.js","esid":" sec-atomics.notify","description":" >An undefined index arg should translate to 0\n","info":" |Atomics.notify( typedArray, index, count )\n\n2.Let i be ? ValidateAtomicAccess(typedArray, index).\n...\n2.Let accessIndex be ? ToIndex(requestIndex).\n\n9.If IsSharedArrayBuffer(buffer) is false, throw a TypeError exception.\n...\n3.If bufferData is a Data Block, return false\n\nIf value is undefined, then\nLet index be 0.\n","includes":["atomicsHelper.js"],"features":["Atomics","SharedArrayBuffer","TypedArray"]},{"path":"./test262/test/built-ins/Atomics/notify/validate-arraytype-before-count-coercion.js","esid":" sec-atomics.notify","description":" >TypedArray type is validated before `count` argument is coerced.\n","info":" |24.4.12 Atomics.notify ( typedArray, index, count )\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray, true).\n...\n\n24.4.1.1 ValidateSharedIntegerTypedArray ( typedArray [ , onlyInt32 ] )\n...\n4. Let typeName be typedArray.[[TypedArrayName]].\n5. If onlyInt32 is true, then\na. If typeName is not \"Int32Array\", throw a TypeError exception.\n6. Else,\na. If typeName is not \"Int8Array\", \"Uint8Array\", \"Int16Array\", \"Uint16Array\", \"Int32Array\",\nor \"Uint32Array\", throw a TypeError exception.\n...\n","features":["Atomics"]},{"path":"./test262/test/built-ins/Atomics/notify/validate-arraytype-before-index-coercion.js","esid":" sec-atomics.notify","description":" >TypedArray type is validated before `index` argument is coerced.\n","info":" |24.4.12 Atomics.notify ( typedArray, index, count )\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray, true).\n...\n\n24.4.1.1 ValidateSharedIntegerTypedArray ( typedArray [ , onlyInt32 ] )\n...\n4. Let typeName be typedArray.[[TypedArrayName]].\n5. If onlyInt32 is true, then\na. If typeName is not \"Int32Array\", throw a TypeError exception.\n6. Else,\na. If typeName is not \"Int8Array\", \"Uint8Array\", \"Int16Array\", \"Uint16Array\", \"Int32Array\",\nor \"Uint32Array\", throw a TypeError exception.\n...\n","features":["Atomics"]},{"path":"./test262/test/built-ins/Atomics/wait/false-for-timeout-agent.js","esid":" sec-atomics.wait","description":" >False timeout arg should result in an +0 timeout\n","info":" |Atomics.wait( typedArray, index, value, timeout )\n\n4. Let q be ? ToNumber(timeout).\n\nBoolean -> If argument is true, return 1. If argument is false, return +0.\n\n","includes":["atomicsHelper.js"],"features":["Atomics","SharedArrayBuffer","TypedArray"]},{"path":"./test262/test/built-ins/Atomics/wait/nan-for-timeout.js","esid":" sec-atomics.wait","description":" >NaN timeout arg should result in an infinite timeout\n","info":" |Atomics.wait( typedArray, index, value, timeout )\n\n4.Let q be ? ToNumber(timeout).\n...\nUndefinedReturn NaN.\n5.If q is NaN, let t be +∞, else let t be max(q, 0)\n\n","includes":["atomicsHelper.js"],"features":["Atomics","SharedArrayBuffer","TypedArray"]},{"path":"./test262/test/built-ins/Atomics/wait/negative-timeout-agent.js","esid":" sec-atomics.wait","description":" >Test that Atomics.wait times out with a negative timeout\n","includes":["atomicsHelper.js"],"features":["Atomics","SharedArrayBuffer","TypedArray"]},{"path":"./test262/test/built-ins/Atomics/wait/no-spurious-wakeup-no-operation.js","esid":" sec-atomics.wait","description":" >Test that Atomics.wait returns the right result when it timed out and that\nthe time to time out is reasonable.\ninfo: |\n17. Let awoken be Suspend(WL, W, t).\n18. If awoken is true, then\na. Assert: W is not on the list of waiters in WL.\n19. Else,\na.Perform RemoveWaiter(WL, W).\n","info":" |17. Let awoken be Suspend(WL, W, t).\n18. If awoken is true, then\na. Assert: W is not on the list of waiters in WL.\n19. Else,\na.Perform RemoveWaiter(WL, W).\n","includes":["atomicsHelper.js"],"features":["Atomics","SharedArrayBuffer","TypedArray"]},{"path":"./test262/test/built-ins/Atomics/wait/no-spurious-wakeup-on-add.js","esid":" sec-atomics.wait","description":" >Waiter does not spuriously notify on index which is subject to Add operation\n","includes":["atomicsHelper.js"],"features":["Atomics","SharedArrayBuffer","TypedArray"]},{"path":"./test262/test/built-ins/Atomics/wait/no-spurious-wakeup-on-and.js","esid":" sec-atomics.wait","description":" >Waiter does not spuriously notify on index which is subject to And operation\n","includes":["atomicsHelper.js"],"features":["Atomics","SharedArrayBuffer","TypedArray"]},{"path":"./test262/test/built-ins/Atomics/wait/no-spurious-wakeup-on-compareExchange.js","esid":" sec-atomics.wait","description":" >Waiter does not spuriously notify on index which is subject to compareExchange operation\n","includes":["atomicsHelper.js"],"features":["Atomics","SharedArrayBuffer","TypedArray"]},{"path":"./test262/test/built-ins/Atomics/wait/no-spurious-wakeup-on-exchange.js","esid":" sec-atomics.wait","description":" >Waiter does not spuriously notify on index which is subject to exchange operation\n","includes":["atomicsHelper.js"],"features":["Atomics","SharedArrayBuffer","TypedArray"]},{"path":"./test262/test/built-ins/Atomics/wait/no-spurious-wakeup-on-or.js","esid":" sec-atomics.wait","description":" >Waiter does not spuriously notify on index which is subject to Or operation\n","includes":["atomicsHelper.js"],"features":["Atomics","SharedArrayBuffer","TypedArray"]},{"path":"./test262/test/built-ins/Atomics/wait/no-spurious-wakeup-on-store.js","esid":" sec-atomics.wait","description":" >Waiter does not spuriously notify on index which is subject to Store operation\n","includes":["atomicsHelper.js"],"features":["Atomics","SharedArrayBuffer","TypedArray"]},{"path":"./test262/test/built-ins/Atomics/wait/no-spurious-wakeup-on-sub.js","esid":" sec-atomics.wait","description":" >Waiter does not spuriously notify on index which is subject to Sub operation\n","includes":["atomicsHelper.js"],"features":["Atomics","SharedArrayBuffer","TypedArray"]},{"path":"./test262/test/built-ins/Atomics/wait/no-spurious-wakeup-on-xor.js","esid":" sec-atomics.wait","description":" >Waiter does not spuriously notify on index which is subject to xor operation\n","includes":["atomicsHelper.js"],"features":["Atomics","SharedArrayBuffer","TypedArray"]},{"path":"./test262/test/built-ins/Atomics/wait/null-for-timeout-agent.js","esid":" sec-atomics.wait","description":" >False timeout arg should result in an +0 timeout\n","info":" |Atomics.wait( typedArray, index, value, timeout )\n\n4. Let q be ? ToNumber(timeout).\n\nNull -> Return +0.\n\n","includes":["atomicsHelper.js"],"features":["Atomics","SharedArrayBuffer","TypedArray"]},{"path":"./test262/test/built-ins/Atomics/wait/object-for-timeout-agent.js","esid":" sec-atomics.wait","description":" >False timeout arg should result in an +0 timeout\n","info":" |Atomics.wait( typedArray, index, value, timeout )\n\n4. Let q be ? ToNumber(timeout).\n\nNull -> Return +0.\n\n","includes":["atomicsHelper.js"],"features":["Atomics","SharedArrayBuffer","TypedArray"]},{"path":"./test262/test/built-ins/Atomics/wait/poisoned-object-for-timeout-throws-agent.js","esid":" sec-atomics.wait","description":" >False timeout arg should result in an +0 timeout\n","info":" |Atomics.wait( typedArray, index, value, timeout )\n\n4. Let q be ? ToNumber(timeout).\n\nNull -> Return +0.\n\n","includes":["atomicsHelper.js"],"features":["Atomics","SharedArrayBuffer","TypedArray"]},{"path":"./test262/test/built-ins/Atomics/wait/symbol-for-index-throws-agent.js","esid":" sec-atomics.wait","description":" >Throws a TypeError if index arg can not be converted to an Integer\n","info":" |Atomics.wait( typedArray, index, value, timeout )\n\n2. Let i be ? ValidateAtomicAccess(typedArray, index).\n\nValidateAtomicAccess( typedArray, requestIndex )\n\n2. Let accessIndex be ? ToIndex(requestIndex).\n\nToIndex ( value )\n\n2. Else,\na. Let integerIndex be ? ToInteger(value).\n\nToInteger(value)\n\n1. Let number be ? ToNumber(argument).\n\nSymbol --> Throw a TypeError exception.\n\n","includes":["atomicsHelper.js"],"features":["Atomics","SharedArrayBuffer","Symbol","Symbol.toPrimitive","TypedArray"]},{"path":"./test262/test/built-ins/Atomics/wait/symbol-for-timeout-throws-agent.js","esid":" sec-atomics.wait","description":" >Throws a TypeError if index arg can not be converted to an Integer\n","info":" |Atomics.wait( typedArray, index, value, timeout )\n\n4. Let q be ? ToNumber(timeout).\n\nSymbol --> Throw a TypeError exception.\n\n","includes":["atomicsHelper.js"],"features":["Atomics","SharedArrayBuffer","Symbol","Symbol.toPrimitive","TypedArray"]},{"path":"./test262/test/built-ins/Atomics/wait/symbol-for-value-throws-agent.js","esid":" sec-atomics.wait","description":" >Throws a TypeError if value arg is a Symbol\n","info":" |Atomics.wait( typedArray, index, value, timeout )\n\n3. Let v be ? ToInt32(value).\n\nToInt32(value)\n\n1.Let number be ? ToNumber(argument).\n\nSymbol --> Throw a TypeError exception.\n\n","includes":["atomicsHelper.js"],"features":["Atomics","SharedArrayBuffer","Symbol","Symbol.toPrimitive","TypedArray"]},{"path":"./test262/test/built-ins/Atomics/wait/true-for-timeout-agent.js","esid":" sec-atomics.wait","description":" >True timeout arg should result in an +0 timeout\n","info":" |Atomics.wait( typedArray, index, value, timeout )\n\n4. Let q be ? ToNumber(timeout).\n\nBoolean -> If argument is true, return 1. If argument is false, return +0.\n\n","includes":["atomicsHelper.js"],"features":["Atomics","SharedArrayBuffer","TypedArray"]},{"path":"./test262/test/built-ins/Atomics/wait/undefined-for-timeout.js","esid":" sec-atomics.wait","description":" >Undefined timeout arg should result in an infinite timeout\n","info":" |Atomics.wait( typedArray, index, value, timeout )\n\n4.Let q be ? ToNumber(timeout).\n...\nUndefinedReturn NaN.\n5.If q is NaN, let t be +∞, else let t be max(q, 0)\n\n","includes":["atomicsHelper.js"],"features":["Atomics","SharedArrayBuffer","TypedArray"]},{"path":"./test262/test/built-ins/Atomics/wait/undefined-index-defaults-to-zero.js","esid":" sec-atomics.wait","description":" >An undefined index arg should translate to 0\n","info":" |Atomics.wait( typedArray, index, value, timeout )\n\n2.Let i be ? ValidateAtomicAccess(typedArray, index).\n...\n2.Let accessIndex be ? ToIndex(requestIndex).\n\n9.If IsSharedArrayBuffer(buffer) is false, throw a TypeError exception.\n...\n3.If bufferData is a Data Block, return false\n\nIf value is undefined, then\nLet index be 0.\n\n","includes":["atomicsHelper.js"],"features":["Atomics","SharedArrayBuffer","TypedArray"]},{"path":"./test262/test/built-ins/Atomics/wait/wait-index-value-not-equal.js","esid":" sec-atomics.wait","description":" >Returns \"not-equal\" when value of index is not equal\n","info":" |Atomics.wait( typedArray, index, value, timeout )\n\n14.If v is not equal to w, then\na.Perform LeaveCriticalSection(WL).\nb. Return the String \"not-equal\".\n\n","includes":["atomicsHelper.js"],"features":["Atomics","SharedArrayBuffer","TypedArray"]},{"path":"./test262/test/built-ins/Atomics/wait/waiterlist-block-indexedposition-wake.js","esid":" sec-atomics.wait","description":" >Get the correct WaiterList\n","info":" |Atomics.wait( typedArray, index, value, timeout )\n\n...\n11. Let WL be GetWaiterList(block, indexedPosition).\n...\n\n\nGetWaiterList( block, i )\n\n...\n4. Return the WaiterList that is referenced by the pair (block, i).\n\n","includes":["atomicsHelper.js"],"features":["Atomics","SharedArrayBuffer","TypedArray"]},{"path":"./test262/test/built-ins/Atomics/wait/waiterlist-order-of-operations-is-fifo.js","esid":" sec-atomics.wait","description":" >New waiters should be applied to the end of the list and woken by order they entered the list (FIFO)\n","info":" |Atomics.wait( typedArray, index, value, timeout )\n\n16.Perform AddWaiter(WL, W).\n...\n3.Add W to the end of the list of waiters in WL.\n\n","includes":["atomicsHelper.js"],"features":["Atomics","SharedArrayBuffer","TypedArray"]},{"path":"./test262/test/built-ins/Atomics/wait/was-woken-before-timeout.js","esid":" sec-atomics.wait","description":" >Test that Atomics.wait returns the right result when it was awoken before\na timeout\n","info":" |Atomics.wait( typedArray, index, value, timeout )\n\n2.Let i be ? ValidateAtomicAccess(typedArray, index).\n...\n2.Let accessIndex be ? ToIndex(requestIndex).\n\n9.If IsSharedArrayBuffer(buffer) is false, throw a TypeError exception.\n...\n3.If bufferData is a Data Block, return false\n\nIf value is undefined, then\nLet index be 0.\n","includes":["atomicsHelper.js"],"features":["Atomics","SharedArrayBuffer","TypedArray"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/false-for-timeout-agent.js","esid":" sec-atomics.waitasync","description":" >False timeout arg should result in an +0 timeout\n","info":" |Atomics.waitAsync( typedArray, index, value, timeout )\n\n1. Return DoWait(async, typedArray, index, value, timeout).\n\nDoWait ( mode, typedArray, index, value, timeout )\n\n6. Let q be ? ToNumber(timeout).\n\n","flags":["async"],"includes":["atomicsHelper.js"],"features":["Atomics.waitAsync","SharedArrayBuffer","TypedArray","Atomics","arrow-function","async-functions"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/implicit-infinity-for-timeout.js","esid":" sec-atomics.waitasync","description":" >Undefined timeout arg is coerced to zero\n","info":" |Atomics.waitAsync( typedArray, index, value, timeout )\n\n1. Return DoWait(async, typedArray, index, value, timeout).\n\nDoWait ( mode, typedArray, index, value, timeout )\n\n6. Let q be ? ToNumber(timeout).\n...\nUndefinedReturn NaN.\n\n5.If q is NaN, let t be +∞, else let t be max(q, 0)\n\n","flags":["async"],"features":["Atomics.waitAsync","SharedArrayBuffer","TypedArray","Atomics","computed-property-names","Symbol","Symbol.toPrimitive","arrow-function"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/nan-for-timeout-agent.js","esid":" sec-atomics.waitasync","description":" >NaN timeout arg should result in an infinite timeout\n","info":" |Atomics.waitAsync( typedArray, index, value, timeout )\n\n1. Return DoWait(async, typedArray, index, value, timeout).\n\nDoWait ( mode, typedArray, index, value, timeout )\n\n6. Let q be ? ToNumber(timeout).\n\n","flags":["async"],"includes":["atomicsHelper.js"],"features":["Atomics.waitAsync","SharedArrayBuffer","TypedArray","Atomics","arrow-function","async-functions"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/negative-timeout-agent.js","esid":" sec-atomics.waitasync","description":" >Test that Atomics.waitAsync times out with a negative timeout\n","info":" |Atomics.waitAsync( typedArray, index, value, timeout )\n\n1. Return DoWait(async, typedArray, index, value, timeout).\n\nDoWait ( mode, typedArray, index, value, timeout )\n\n6. Let q be ? ToNumber(timeout).\n\n","flags":["async"],"includes":["atomicsHelper.js"],"features":["Atomics.waitAsync","SharedArrayBuffer","TypedArray","Atomics","arrow-function","async-functions"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/no-spurious-wakeup-no-operation.js","esid":" sec-atomics.waitasync","description":" >Test that Atomics.waitAsync returns the right result when it timed out and that\nthe time to time out is reasonable.\n","info":" |AddWaiter ( WL, waiterRecord )\n\n5. Append waiterRecord as the last element of WL.[[Waiters]]\n6. If waiterRecord.[[Timeout]] is finite, then in parallel,\na. Wait waiterRecord.[[Timeout]] milliseconds.\nb. Perform TriggerTimeout(WL, waiterRecord).\n\nTriggerTimeout( WL, waiterRecord )\n\n3. If waiterRecord is in WL.[[Waiters]], then\na. Set waiterRecord.[[Result]] to \"timed-out\".\nb. Perform RemoveWaiter(WL, waiterRecord).\nc. Perform NotifyWaiter(WL, waiterRecord).\n4. Perform LeaveCriticalSection(WL).\n\n","flags":["async"],"includes":["atomicsHelper.js"],"features":["Atomics.waitAsync","SharedArrayBuffer","TypedArray","Atomics","arrow-function","async-functions"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/no-spurious-wakeup-on-add.js","esid":" sec-atomics.waitasync","description":" >Waiter does not spuriously notify on index which is subject to Add operation\n","info":" |AddWaiter ( WL, waiterRecord )\n\n5. Append waiterRecord as the last element of WL.[[Waiters]]\n6. If waiterRecord.[[Timeout]] is finite, then in parallel,\na. Wait waiterRecord.[[Timeout]] milliseconds.\nb. Perform TriggerTimeout(WL, waiterRecord).\n\nTriggerTimeout( WL, waiterRecord )\n\n3. If waiterRecord is in WL.[[Waiters]], then\na. Set waiterRecord.[[Result]] to \"timed-out\".\nb. Perform RemoveWaiter(WL, waiterRecord).\nc. Perform NotifyWaiter(WL, waiterRecord).\n4. Perform LeaveCriticalSection(WL).\n\n","flags":["async"],"includes":["atomicsHelper.js"],"features":["Atomics.waitAsync","SharedArrayBuffer","TypedArray","Atomics","arrow-function","async-functions"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/no-spurious-wakeup-on-and.js","esid":" sec-atomics.waitasync","description":" >Waiter does not spuriously notify on index which is subject to And operation\n","info":" |AddWaiter ( WL, waiterRecord )\n\n5. Append waiterRecord as the last element of WL.[[Waiters]]\n6. If waiterRecord.[[Timeout]] is finite, then in parallel,\na. Wait waiterRecord.[[Timeout]] milliseconds.\nb. Perform TriggerTimeout(WL, waiterRecord).\n\nTriggerTimeout( WL, waiterRecord )\n\n3. If waiterRecord is in WL.[[Waiters]], then\na. Set waiterRecord.[[Result]] to \"timed-out\".\nb. Perform RemoveWaiter(WL, waiterRecord).\nc. Perform NotifyWaiter(WL, waiterRecord).\n4. Perform LeaveCriticalSection(WL).\n\n","flags":["async"],"includes":["atomicsHelper.js"],"features":["Atomics.waitAsync","SharedArrayBuffer","TypedArray","Atomics","arrow-function","async-functions"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/no-spurious-wakeup-on-compareExchange.js","esid":" sec-atomics.waitasync","description":" >Waiter does not spuriously notify on index which is subject to compareExchange operation\n","info":" |AddWaiter ( WL, waiterRecord )\n\n5. Append waiterRecord as the last element of WL.[[Waiters]]\n6. If waiterRecord.[[Timeout]] is finite, then in parallel,\na. Wait waiterRecord.[[Timeout]] milliseconds.\nb. Perform TriggerTimeout(WL, waiterRecord).\n\nTriggerTimeout( WL, waiterRecord )\n\n3. If waiterRecord is in WL.[[Waiters]], then\na. Set waiterRecord.[[Result]] to \"timed-out\".\nb. Perform RemoveWaiter(WL, waiterRecord).\nc. Perform NotifyWaiter(WL, waiterRecord).\n4. Perform LeaveCriticalSection(WL).\n\n","flags":["async"],"includes":["atomicsHelper.js"],"features":["Atomics.waitAsync","SharedArrayBuffer","TypedArray","Atomics","arrow-function","async-functions"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/no-spurious-wakeup-on-exchange.js","esid":" sec-atomics.waitasync","description":" >Waiter does not spuriously notify on index which is subject to exchange operation\n","info":" |AddWaiter ( WL, waiterRecord )\n\n5. Append waiterRecord as the last element of WL.[[Waiters]]\n6. If waiterRecord.[[Timeout]] is finite, then in parallel,\na. Wait waiterRecord.[[Timeout]] milliseconds.\nb. Perform TriggerTimeout(WL, waiterRecord).\n\nTriggerTimeout( WL, waiterRecord )\n\n3. If waiterRecord is in WL.[[Waiters]], then\na. Set waiterRecord.[[Result]] to \"timed-out\".\nb. Perform RemoveWaiter(WL, waiterRecord).\nc. Perform NotifyWaiter(WL, waiterRecord).\n4. Perform LeaveCriticalSection(WL).\n\n","flags":["async"],"includes":["atomicsHelper.js"],"features":["Atomics.waitAsync","SharedArrayBuffer","TypedArray","Atomics","arrow-function","async-functions"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/no-spurious-wakeup-on-or.js","esid":" sec-atomics.waitasync","description":" >Waiter does not spuriously notify on index which is subject to Or operation\n","info":" |AddWaiter ( WL, waiterRecord )\n\n5. Append waiterRecord as the last element of WL.[[Waiters]]\n6. If waiterRecord.[[Timeout]] is finite, then in parallel,\na. Wait waiterRecord.[[Timeout]] milliseconds.\nb. Perform TriggerTimeout(WL, waiterRecord).\n\nTriggerTimeout( WL, waiterRecord )\n\n3. If waiterRecord is in WL.[[Waiters]], then\na. Set waiterRecord.[[Result]] to \"timed-out\".\nb. Perform RemoveWaiter(WL, waiterRecord).\nc. Perform NotifyWaiter(WL, waiterRecord).\n4. Perform LeaveCriticalSection(WL).\n\n","flags":["async"],"includes":["atomicsHelper.js"],"features":["Atomics.waitAsync","SharedArrayBuffer","TypedArray","Atomics","arrow-function","async-functions"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/no-spurious-wakeup-on-store.js","esid":" sec-atomics.waitasync","description":" >Waiter does not spuriously notify on index which is subject to Store operation\n","info":" |AddWaiter ( WL, waiterRecord )\n\n5. Append waiterRecord as the last element of WL.[[Waiters]]\n6. If waiterRecord.[[Timeout]] is finite, then in parallel,\na. Wait waiterRecord.[[Timeout]] milliseconds.\nb. Perform TriggerTimeout(WL, waiterRecord).\n\nTriggerTimeout( WL, waiterRecord )\n\n3. If waiterRecord is in WL.[[Waiters]], then\na. Set waiterRecord.[[Result]] to \"timed-out\".\nb. Perform RemoveWaiter(WL, waiterRecord).\nc. Perform NotifyWaiter(WL, waiterRecord).\n4. Perform LeaveCriticalSection(WL).\n\n","flags":["async"],"includes":["atomicsHelper.js"],"features":["Atomics.waitAsync","SharedArrayBuffer","TypedArray","Atomics","arrow-function","async-functions"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/no-spurious-wakeup-on-sub.js","esid":" sec-atomics.waitasync","description":" >Waiter does not spuriously notify on index which is subject to Sub operation\n","info":" |AddWaiter ( WL, waiterRecord )\n\n5. Append waiterRecord as the last element of WL.[[Waiters]]\n6. If waiterRecord.[[Timeout]] is finite, then in parallel,\na. Wait waiterRecord.[[Timeout]] milliseconds.\nb. Perform TriggerTimeout(WL, waiterRecord).\n\nTriggerTimeout( WL, waiterRecord )\n\n3. If waiterRecord is in WL.[[Waiters]], then\na. Set waiterRecord.[[Result]] to \"timed-out\".\nb. Perform RemoveWaiter(WL, waiterRecord).\nc. Perform NotifyWaiter(WL, waiterRecord).\n4. Perform LeaveCriticalSection(WL).\n\n","flags":["async"],"includes":["atomicsHelper.js"],"features":["Atomics.waitAsync","SharedArrayBuffer","TypedArray","Atomics","arrow-function","async-functions"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/no-spurious-wakeup-on-xor.js","esid":" sec-atomics.waitasync","description":" >Waiter does not spuriously notify on index which is subject to xor operation\n","info":" |AddWaiter ( WL, waiterRecord )\n\n5. Append waiterRecord as the last element of WL.[[Waiters]]\n6. If waiterRecord.[[Timeout]] is finite, then in parallel,\na. Wait waiterRecord.[[Timeout]] milliseconds.\nb. Perform TriggerTimeout(WL, waiterRecord).\n\nTriggerTimeout( WL, waiterRecord )\n\n3. If waiterRecord is in WL.[[Waiters]], then\na. Set waiterRecord.[[Result]] to \"timed-out\".\nb. Perform RemoveWaiter(WL, waiterRecord).\nc. Perform NotifyWaiter(WL, waiterRecord).\n4. Perform LeaveCriticalSection(WL).\n\n","flags":["async"],"includes":["atomicsHelper.js"],"features":["Atomics.waitAsync","SharedArrayBuffer","TypedArray","Atomics","arrow-function","async-functions"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/null-for-timeout-agent.js","esid":" sec-atomics.waitasync","description":" >null timeout arg should result in an +0 timeout\n","info":" |Atomics.waitAsync( typedArray, index, value, timeout )\n\n1. Return DoWait(async, typedArray, index, value, timeout).\n\nDoWait ( mode, typedArray, index, value, timeout )\n\n6. Let q be ? ToNumber(timeout).\n\nNull -> Return +0.\n\n","flags":["async"],"includes":["atomicsHelper.js"],"features":["Atomics.waitAsync","SharedArrayBuffer","TypedArray","Atomics","arrow-function","async-functions"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/object-for-timeout-agent.js","esid":" sec-atomics.waitasync","description":" >Object valueOf, toString, toPrimitive Zero timeout arg should result in an +0 timeout\n","info":" |Atomics.waitAsync( typedArray, index, value, timeout )\n\n1. Return DoWait(async, typedArray, index, value, timeout).\n\nDoWait ( mode, typedArray, index, value, timeout )\n\n6. Let q be ? ToNumber(timeout).\n\nObject -> Apply the following steps:\n\nLet primValue be ? ToPrimitive(argument, hint Number).\nReturn ? ToNumber(primValue).\n\n","flags":["async"],"includes":["atomicsHelper.js"],"features":["Atomics.waitAsync","SharedArrayBuffer","TypedArray","Atomics","arrow-function","async-functions"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/poisoned-object-for-timeout-throws-agent.js","esid":" sec-atomics.waitasync","description":" >False timeout arg should result in an +0 timeout\n","info":" |Atomics.waitAsync( typedArray, index, value, timeout )\n\n1. Return DoWait(async, typedArray, index, value, timeout).\n\nDoWait ( mode, typedArray, index, value, timeout )\n\n6. Let q be ? ToNumber(timeout).\n\nLet primValue be ? ToPrimitive(argument, hint Number).\nReturn ? ToNumber(primValue).\n\n","flags":["async"],"includes":["atomicsHelper.js"],"features":["Atomics.waitAsync","SharedArrayBuffer","TypedArray","Atomics","arrow-function","async-functions"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/returns-result-object-value-is-promise-resolves-to-ok.js","esid":" sec-atomics.waitasync","description":" >Atomics.waitAsync returns a result object containing a property named \"value\" whose value is a promise that resolves to \"ok\" and async is true.\n","info":" |Atomics.waitAsync( typedArray, index, value, timeout )\n\n1. Return DoWait(async, typedArray, index, value, timeout).\n\nDoWait ( mode, typedArray, index, value, timeout )\n\n...\n13. Let promiseCapability be undefined.\n14. If mode is async, then\na. Set promiseCapability to ! NewPromiseCapability(%Promise%).\n\n...\nPerform ! CreateDataPropertyOrThrow(_resultObject_, *\"async\"*, *true*).\nPerform ! CreateDataPropertyOrThrow(_resultObject_, *\"value\"*, _promiseCapability_.[[Promise]]).\nReturn _resultObject_.\n\n","flags":["async"],"features":["Atomics.waitAsync","TypedArray","SharedArrayBuffer","destructuring-binding","Atomics","arrow-function"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/symbol-for-index-throws-agent.js","esid":" sec-atomics.waitasync","description":" >Throws a TypeError if index arg can not be converted to an Integer\n","info":" |Atomics.waitAsync( typedArray, index, value, timeout )\n\n1. Return DoWait(async, typedArray, index, value, timeout).\n\nDoWait ( mode, typedArray, index, value, timeout )\n\n2. Let i be ? ValidateAtomicAccess(typedArray, index).\n\nValidateAtomicAccess( typedArray, requestIndex )\n\n2. Let accessIndex be ? ToIndex(requestIndex).\n\nToIndex ( value )\n\n2. Else,\na. Let integerIndex be ? ToInteger(value).\n\nToInteger(value)\n\n1. Let number be ? ToNumber(argument).\n\nSymbol --> Throw a TypeError exception.\n\n","flags":["async"],"includes":["atomicsHelper.js"],"features":["Atomics.waitAsync","SharedArrayBuffer","Symbol","Symbol.toPrimitive","TypedArray","Atomics","arrow-function","async-functions"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/symbol-for-timeout-throws-agent.js","esid":" sec-atomics.waitasync","description":" >Throws a TypeError if index arg can not be converted to an Integer\n","info":" |Atomics.waitAsync( typedArray, index, value, timeout )\n\n1. Return DoWait(async, typedArray, index, value, timeout).\n\nDoWait ( mode, typedArray, index, value, timeout )\n\n6. Let q be ? ToNumber(timeout).\n\nSymbol --> Throw a TypeError exception.\n\n","flags":["async"],"includes":["atomicsHelper.js"],"features":["Atomics.waitAsync","SharedArrayBuffer","Symbol","Symbol.toPrimitive","TypedArray","Atomics","arrow-function","async-functions"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/symbol-for-value-throws-agent.js","esid":" sec-atomics.waitasync","description":" >Throws a TypeError if value arg is a Symbol\n","info":" |Atomics.waitAsync( typedArray, index, value, timeout )\n\n1. Return DoWait(async, typedArray, index, value, timeout).\n\nDoWait ( mode, typedArray, index, value, timeout )\n\n5. Otherwise, let v be ? ToInt32(value).\n\nToInt32(value)\n\n1.Let number be ? ToNumber(argument).\n\nSymbol --> Throw a TypeError exception.\n\n","flags":["async"],"includes":["atomicsHelper.js"],"features":["Atomics.waitAsync","SharedArrayBuffer","Symbol","Symbol.toPrimitive","TypedArray","Atomics","arrow-function","async-functions"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/true-for-timeout-agent.js","esid":" sec-atomics.waitasync","description":" >True timeout arg should result in an +0 timeout\n","info":" |Atomics.waitAsync( typedArray, index, value, timeout )\n\n1. Return DoWait(async, typedArray, index, value, timeout).\n\nDoWait ( mode, typedArray, index, value, timeout )\n\n6. Let q be ? ToNumber(timeout).\n\n","flags":["async"],"includes":["atomicsHelper.js"],"features":["Atomics.waitAsync","SharedArrayBuffer","TypedArray","Atomics","arrow-function","async-functions"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/undefined-for-timeout-agent.js","esid":" sec-atomics.waitasync","description":" >Undefined timeout arg is coerced to zero\n","info":" |Atomics.waitAsync( typedArray, index, value, timeout )\n\n1. Return DoWait(async, typedArray, index, value, timeout).\n\nDoWait ( mode, typedArray, index, value, timeout )\n\n6. Let q be ? ToNumber(timeout).\n...\nUndefinedReturn NaN.\n\n5.If q is NaN, let t be +∞, else let t be max(q, 0)\n\n","flags":["async"],"includes":["atomicsHelper.js"],"features":["Atomics.waitAsync","SharedArrayBuffer","TypedArray","Atomics","arrow-function","async-functions"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/undefined-for-timeout.js","esid":" sec-atomics.waitasync","description":" >Undefined timeout arg is coerced to zero\n","info":" |Atomics.waitAsync( typedArray, index, value, timeout )\n\n1. Return DoWait(async, typedArray, index, value, timeout).\n\nDoWait ( mode, typedArray, index, value, timeout )\n\n6. Let q be ? ToNumber(timeout).\n...\nUndefinedReturn NaN.\n\n5.If q is NaN, let t be +∞, else let t be max(q, 0)\n\n","flags":["async"],"features":["Atomics.waitAsync","SharedArrayBuffer","TypedArray","Atomics","computed-property-names","Symbol","Symbol.toPrimitive","arrow-function"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/undefined-index-defaults-to-zero-agent.js","esid":" sec-atomics.waitasync","description":" >Undefined index arg is coerced to zero\n","info":" |Atomics.waitAsync( typedArray, index, value, timeout )\n\n1. Return DoWait(async, typedArray, index, value, timeout).\n\nDoWait ( mode, typedArray, index, value, timeout )\n\n2. Let i be ? ValidateAtomicAccess(typedArray, index).\n...\n2.Let accessIndex be ? ToIndex(requestIndex).\n\n9.If IsSharedArrayBuffer(buffer) is false, throw a TypeError exception.\n...\n3.If bufferData is a Data Block, return false\n\nIf value is undefined, then\nLet index be 0.\n\n","flags":["async"],"includes":["atomicsHelper.js"],"features":["Atomics.waitAsync","SharedArrayBuffer","TypedArray","Atomics","arrow-function","async-functions"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/value-not-equal-agent.js","esid":" sec-atomics.waitasync","description":" >Returns \"not-equal\" when value arg does not match an index in the typedArray\n","info":" |Atomics.waitAsync( typedArray, index, value, timeout )\n\n1. Return DoWait(async, typedArray, index, value, timeout).\n\nDoWait ( mode, typedArray, index, value, timeout )\n\n16. Let w be ! AtomicLoad(typedArray, i).\n17. If v is not equal to w, then\na. Perform LeaveCriticalSection(WL).\nb. If mode is sync, then\ni. Return the String \"not-equal\".\nc. Perform ! Call(capability.[[Resolve]], undefined, « \"not-equal\" »).\nd. Return promiseCapability.[[Promise]].\n\n","flags":["async"],"includes":["atomicsHelper.js"],"features":["Atomics.waitAsync","SharedArrayBuffer","TypedArray","Atomics","arrow-function","async-functions"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/waiterlist-block-indexedposition-wake.js","esid":" sec-atomics.waitasync","description":" >Get the correct WaiterList\n","info":" |Atomics.waitAsync( typedArray, index, value, timeout )\n\n1. Return DoWait(async, typedArray, index, value, timeout).\n\nDoWait ( mode, typedArray, index, value, timeout )\n\n11. Let indexedPosition be (i × 4) + offset.\n12. Let WL be GetWaiterList(block, indexedPosition).\n\nGetWaiterList( block, i )\n\n...\n4. Return the WaiterList that is referenced by the pair (block, i).\n\n","flags":["async"],"includes":["atomicsHelper.js"],"features":["Atomics.waitAsync","SharedArrayBuffer","TypedArray","Atomics","arrow-function","async-functions"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/was-woken-before-timeout.js","esid":" sec-atomics.waitasync","description":" >Test that Atomics.waitAsync returns the right result when it was awoken before\na timeout\n","flags":["async"],"includes":["atomicsHelper.js"],"features":["Atomics.waitAsync","SharedArrayBuffer","TypedArray","Atomics","arrow-function","async-functions"]},{"path":"./test262/test/built-ins/Object/fromEntries/empty-iterable.js","esid":" sec-object.fromentries","description":" When given an empty list, makes an empty object.","info":" |Object.fromEntries ( iterable )\n\n...\n4. Let stepsDefine be the algorithm steps defined in CreateDataPropertyOnObject Functions.\n5. Let adder be CreateBuiltinFunction(stepsDefine, « »).\n6. Return ? AddEntriesFromIterable(obj, iterable, adder).\n\n","features":["Object.fromEntries"]},{"path":"./test262/test/built-ins/Object/fromEntries/evaluation-order.js","esid":" sec-object.fromentries","description":" Evaluation order is iterator.next(), get '0', get '1', toPropertyKey, repeat.","info":" |Object.fromEntries ( iterable )\n\n...\n4. Let stepsDefine be the algorithm steps defined in CreateDataPropertyOnObject Functions.\n5. Let adder be CreateBuiltinFunction(stepsDefine, « »).\n6. Return ? AddEntriesFromIterable(obj, iterable, adder).\n\n","includes":["compareArray.js"],"features":["Symbol.iterator","Object.fromEntries"]},{"path":"./test262/test/built-ins/Object/fromEntries/iterator-closed-for-null-entry.js","esid":" sec-object.fromentries","description":" Closes iterators when they return entries which are null.","info":" |Object.fromEntries ( iterable )\n\n...\n4. Let stepsDefine be the algorithm steps defined in CreateDataPropertyOnObject Functions.\n5. Let adder be CreateBuiltinFunction(stepsDefine, « »).\n6. Return ? AddEntriesFromIterable(obj, iterable, adder).\n\nAddEntriesFromIterable ( target, iterable, adder )\n\n...\n4. Repeat,\n...\nd. If Type(nextItem) is not Object, then\ni. Let error be ThrowCompletion(a newly created TypeError object).\nii. Return ? IteratorClose(iteratorRecord, error).\n\n","features":["Symbol.iterator","Object.fromEntries"]},{"path":"./test262/test/built-ins/Object/fromEntries/iterator-closed-for-string-entry.js","esid":" sec-object.fromentries","description":" Closes iterators when they return entries which are strings.","info":" |Object.fromEntries ( iterable )\n\n...\n4. Let stepsDefine be the algorithm steps defined in CreateDataPropertyOnObject Functions.\n5. Let adder be CreateBuiltinFunction(stepsDefine, « »).\n6. Return ? AddEntriesFromIterable(obj, iterable, adder).\n\nAddEntriesFromIterable ( target, iterable, adder )\n\n...\n4. Repeat,\n...\nd. If Type(nextItem) is not Object, then\ni. Let error be ThrowCompletion(a newly created TypeError object).\nii. Return ? IteratorClose(iteratorRecord, error).\n\n","features":["Symbol.iterator","Object.fromEntries"]},{"path":"./test262/test/built-ins/Object/fromEntries/iterator-closed-for-throwing-entry-key-accessor.js","esid":" sec-object.fromentries","description":" Closes iterators when accessing an entry's key throws.","info":" |Object.fromEntries ( iterable )\n\n...\n4. Let stepsDefine be the algorithm steps defined in CreateDataPropertyOnObject Functions.\n5. Let adder be CreateBuiltinFunction(stepsDefine, « »).\n6. Return ? AddEntriesFromIterable(obj, iterable, adder).\n\nAddEntriesFromIterable ( target, iterable, adder )\n\n...\n4. Repeat,\n...\ne. Let k be Get(nextItem, \"0\").\nf. If k is an abrupt completion, return ? IteratorClose(iteratorRecord, k).\n\n","features":["Symbol.iterator","Object.fromEntries"]},{"path":"./test262/test/built-ins/Object/fromEntries/iterator-closed-for-throwing-entry-key-tostring.js","esid":" sec-object.fromentries","description":" Closes iterators when toString on a key throws.","info":" |Object.fromEntries ( iterable )\n\n...\n4. Let stepsDefine be the algorithm steps defined in CreateDataPropertyOnObject Functions.\n5. Let adder be CreateBuiltinFunction(stepsDefine, « »).\n6. Return ? AddEntriesFromIterable(obj, iterable, adder).\n\nAddEntriesFromIterable ( target, iterable, adder )\n\n...\n4. Repeat,\n...\ne. Let k be Get(nextItem, \"0\").\nf. If k is an abrupt completion, return ? IteratorClose(iteratorRecord, k).\n\n","features":["Symbol.iterator","Object.fromEntries"]},{"path":"./test262/test/built-ins/Object/fromEntries/iterator-closed-for-throwing-entry-value-accessor.js","esid":" sec-object.fromentries","description":" Closes iterators when accessing an entry's value throws.","info":" |Object.fromEntries ( iterable )\n\n...\n4. Let stepsDefine be the algorithm steps defined in CreateDataPropertyOnObject Functions.\n5. Let adder be CreateBuiltinFunction(stepsDefine, « »).\n6. Return ? AddEntriesFromIterable(obj, iterable, adder).\n\nAddEntriesFromIterable ( target, iterable, adder )\n\n...\n4. Repeat,\n...\ng. Let v be Get(nextItem, \"1\").\nh. If v is an abrupt completion, return ? IteratorClose(iteratorRecord, v).\n\n","features":["Symbol.iterator","Object.fromEntries"]},{"path":"./test262/test/built-ins/Object/fromEntries/iterator-not-closed-for-next-returning-non-object.js","esid":" sec-object.fromentries","description":" Does not close iterators with a `next` method which returns a non-object.","info":" |Object.fromEntries ( iterable )\n\n...\n4. Let stepsDefine be the algorithm steps defined in CreateDataPropertyOnObject Functions.\n5. Let adder be CreateBuiltinFunction(stepsDefine, « »).\n6. Return ? AddEntriesFromIterable(obj, iterable, adder).\n\nAddEntriesFromIterable ( target, iterable, adder )\n\n...\n4. Repeat,\na. Let next be ? IteratorStep(iteratorRecord).\n\n\nIteratorStep ( iteratorRecord )\n\n1. Let result be ? IteratorNext(iteratorRecord).\n\n\nIteratorNext ( iteratorRecord [ , value ] )\n\n...\n3. If Type(result) is not Object, throw a TypeError exception.\n\n","features":["Symbol.iterator","Object.fromEntries"]},{"path":"./test262/test/built-ins/Object/fromEntries/iterator-not-closed-for-throwing-done-accessor.js","esid":" sec-object.fromentries","description":" Does not close iterators with a `done` accessor which throws.","info":" |Object.fromEntries ( iterable )\n\n...\n4. Let stepsDefine be the algorithm steps defined in CreateDataPropertyOnObject Functions.\n5. Let adder be CreateBuiltinFunction(stepsDefine, « »).\n6. Return ? AddEntriesFromIterable(obj, iterable, adder).\n\nAddEntriesFromIterable ( target, iterable, adder )\n\n...\n4. Repeat,\na. Let next be ? IteratorStep(iteratorRecord).\n\n\nIteratorStep ( iteratorRecord )\n\n1. Let result be ? IteratorNext(iteratorRecord).\n\n\nIteratorNext ( iteratorRecord [ , value ] )\n\n...\n3. If Type(result) is not Object, throw a TypeError exception.\n\n","features":["Symbol.iterator","Object.fromEntries"]},{"path":"./test262/test/built-ins/Object/fromEntries/iterator-not-closed-for-throwing-next.js","esid":" sec-object.fromentries","description":" Does not close iterators with a `next` method which throws.","info":" |Object.fromEntries ( iterable )\n\n...\n4. Let stepsDefine be the algorithm steps defined in CreateDataPropertyOnObject Functions.\n5. Let adder be CreateBuiltinFunction(stepsDefine, « »).\n6. Return ? AddEntriesFromIterable(obj, iterable, adder).\n\nAddEntriesFromIterable ( target, iterable, adder )\n\n...\n4. Repeat,\na. Let next be ? IteratorStep(iteratorRecord).\n\n\nIteratorStep ( iteratorRecord )\n\n1. Let result be ? IteratorNext(iteratorRecord).\n\n\nIteratorNext ( iteratorRecord [ , value ] )\n\n...\n3. If Type(result) is not Object, throw a TypeError exception.\n\n","features":["Symbol.iterator","Object.fromEntries"]},{"path":"./test262/test/built-ins/Object/fromEntries/iterator-not-closed-for-uncallable-next.js","esid":" sec-object.fromentries","description":" Does not close iterators with an uncallable `next` property.","info":" |Object.fromEntries ( iterable )\n\n...\n4. Let stepsDefine be the algorithm steps defined in CreateDataPropertyOnObject Functions.\n5. Let adder be CreateBuiltinFunction(stepsDefine, « »).\n6. Return ? AddEntriesFromIterable(obj, iterable, adder).\n\nAddEntriesFromIterable ( target, iterable, adder )\n\n...\n4. Repeat,\na. Let next be ? IteratorStep(iteratorRecord).\n\n\nIteratorStep ( iteratorRecord )\n\n1. Let result be ? IteratorNext(iteratorRecord).\n","features":["Symbol.iterator","Object.fromEntries"]},{"path":"./test262/test/built-ins/Object/fromEntries/key-order.js","description":" Key enumeration order of result objects matches the order of entries in the iterable.","esid":" sec-object.fromentries","includes":["compareArray.js"],"features":["Object.fromEntries"]},{"path":"./test262/test/built-ins/Object/fromEntries/length.js","description":" Object.fromEntries.length is 1.","esid":" sec-object.fromentries","includes":["propertyHelper.js"],"features":["Object.fromEntries"]},{"path":"./test262/test/built-ins/Object/fromEntries/name.js","description":" Object.fromEntries.name is \"fromEntries\".","esid":" sec-object.fromentries","includes":["propertyHelper.js"],"features":["Object.fromEntries"]},{"path":"./test262/test/built-ins/Object/fromEntries/not-a-constructor.js","esid":" sec-ecmascript-standard-built-in-objects","description":" >Object.fromEntries does not implement [[Construct]], is not new-able\n","info":" |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n","includes":["isConstructor.js"],"features":["Reflect.construct","Object.fromEntries","arrow-function"]},{"path":"./test262/test/built-ins/Object/fromEntries/prototype.js","description":" Created objects inherit from Object.prototype.","esid":" sec-object.fromentries","features":["Object.fromEntries"]},{"path":"./test262/test/built-ins/Object/fromEntries/requires-argument.js","esid":" sec-object.fromentries","description":" Throws when called without an argument.","info":" |Object.fromEntries ( iterable )\n\n1. Perform ? RequireObjectCoercible(iterable).\n...\n\n","features":["Object.fromEntries"]},{"path":"./test262/test/built-ins/Object/fromEntries/simple-properties.js","description":" Creates data properties which are enumerable, writable, and configurable.","esid":" sec-object.fromentries","includes":["propertyHelper.js"],"features":["Object.fromEntries"]},{"path":"./test262/test/built-ins/Object/fromEntries/string-entry-object-succeeds.js","description":" Succeeds when an entry object is a boxed string.","esid":" sec-object.fromentries","features":["Object.fromEntries"]},{"path":"./test262/test/built-ins/Object/fromEntries/string-entry-primitive-throws.js","description":" Throws when an entry object is a primitive string.","esid":" sec-object.fromentries","features":["Object.fromEntries"]},{"path":"./test262/test/built-ins/Object/fromEntries/string-entry-string-object-succeeds.js","description":" Succeeds when an entry object is a boxed string.","esid":" sec-object.fromentries","features":["Object.fromEntries"]},{"path":"./test262/test/built-ins/Object/fromEntries/supports-symbols.js","description":" Allows symbol keys.","esid":" sec-object.fromentries","features":["Symbol","Object.fromEntries"]},{"path":"./test262/test/built-ins/Object/fromEntries/to-property-key.js","description":" Coerces keys to strings using ToPropertyKey.","esid":" sec-object.fromentries","features":["Symbol.toPrimitive","Object.fromEntries"]},{"path":"./test262/test/built-ins/Object/fromEntries/uses-define-semantics.js","description":" Uses [[DefineOwnProperty]] rather than [[Set]].","esid":" sec-object.fromentries","features":["Object.fromEntries"]},{"path":"./test262/test/built-ins/Object/fromEntries/uses-keys-not-iterator.js","description":" Reads properties rather than iterating.","esid":" sec-object.fromentries","features":["Symbol.iterator","Object.fromEntries"]},{"path":"./test262/test/built-ins/String/prototype/trimEnd/length.js","esid":" sec-string.prototype.trimEnd","description":" >String.prototype.trimEnd.length is 0.\n","info":" >String.prototype.trimEnd ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form “...name”\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["string-trimming","String.prototype.trimEnd"]},{"path":"./test262/test/built-ins/String/prototype/trimEnd/name.js","esid":" sec-string.prototype.trimEnd","description":" >String.prototype.trimEnd.name is \"trimEnd\".\n","info":" >String.prototype.trimEnd ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["string-trimming","String.prototype.trimEnd"]},{"path":"./test262/test/built-ins/String/prototype/trimEnd/not-a-constructor.js","esid":" sec-ecmascript-standard-built-in-objects","description":" >String.prototype.trimEnd does not implement [[Construct]], is not new-able\n","info":" |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n","includes":["isConstructor.js"],"features":["Reflect.construct","string-trimming","String.prototype.trimEnd","arrow-function"]},{"path":"./test262/test/built-ins/String/prototype/trimEnd/this-value-boolean.js","esid":" sec-string.prototype.trimEnd","description":" Behavior when \"this\" value is a boolean.","info":" |Runtime Semantics: TrimString ( string, where )\n2. Let S be ? ToString(str).\n\nToString ( argument )\nArgument Type: Boolean\nResult:\nIf argument is true, return \"true\".\nIf argument is false, return \"false\".\n","features":["string-trimming","String.prototype.trimEnd"]},{"path":"./test262/test/built-ins/String/prototype/trimEnd/this-value-line-terminator.js","esid":" sec-string.prototype.trimEnd","description":" TrimEnd removes all line terminators from the end of a string.","info":" |Runtime Symantics: TrimString ( string, where )\n...\n4. Else if where is \"end\", let T be a String value that is a copy of S with\ntrailing white space removed.\n...\n\nThe definition of white space is the union of WhiteSpace and LineTerminator.\n\n","features":["string-trimming","String.prototype.trimEnd"]},{"path":"./test262/test/built-ins/String/prototype/trimEnd/this-value-not-obj-coercible.js","esid":" sec-string.prototype.trimEnd","description":" The \"this\" value must be object-coercible","info":" |1. Let O be ? RequireObjectCoercible(this value).\n","features":["string-trimming","String.prototype.trimEnd"]},{"path":"./test262/test/built-ins/String/prototype/trimEnd/this-value-number.js","esid":" sec-string.prototype.trimEnd","description":" Behavoir when \"this\" value is a number.","info":" |Runtime Semantics: TrimString ( string, where )\n2. Let S be ? ToString(str).\n\nToString ( argument )\nArgument Type: Number\nResult: NumberToString(argument)\n","features":["string-trimming","String.prototype.trimEnd"]},{"path":"./test262/test/built-ins/String/prototype/trimEnd/this-value-object-cannot-convert-to-primitive-err.js","esid":" sec-string.prototype.trimEnd","description":" >This value is an object which cannot be converted to a primitive\n","info":" |Runtime Semantics: TrimString ( string, where )\n1. Let str be ? RequireObjectCoercible(string).\n2. Let S be ? ToString(str).\n...\n\nToString ( argument )\nIf argument is Object:\n1. Let primValue be ? ToPrimitive(argument, hint String).\n...\n\nToPrimitive ( input [, PreferredType ])\n...\nb. Else if PreferredType is hint String, let hint be \"string\".\n...\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive)\ne. If exoticToPrim is not undefined, then\ni. Let result be ? Call(exoticToPrim, input, « hint »).\nii. If Type(result) is not Object, return result.\niii. Throw a TypeError exception.\nf. If hint is \"default\", set hint to \"number\".\ng. Return ? OrdinaryToPrimitive(input, hint).\n...\n\nOrdinaryToPrimitive( O, hint )\n...\n3. If hint is \"string\", then\na. Let methodNames be « \"toString\", \"valueOf\" ».\n...\n5. For each name in methodNames in List order, do\na. Let method be ? Get(O, name).\nb. If IsCallable(method) is true, then\ni. Let result be ? Call(method, O).\nii. If Type(result) is not Object, return result.\n6. Throw a TypeError exception.\n","features":["string-trimming","String.prototype.trimEnd","Symbol.toPrimitive"]},{"path":"./test262/test/built-ins/String/prototype/trimEnd/this-value-object-toprimitive-call-err.js","esid":" sec-string.prototype.trimEnd","description":" >Abrupt completion when getting Symbol.toPrimitive method\n","info":" |Runtime Semantics: TrimString ( string, where )\n1. Let str be ? RequireObjectCoercible(string).\n2. Let S be ? ToString(str).\n...\n\nToString ( argument )\nIf argument is Object:\n1. Let primValue be ? ToPrimitive(argument, hint String).\n...\n\nToPrimitive ( input [, PreferredType ])\n...\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive).\n...\n","features":["string-trimming","String.prototype.trimEnd","Symbol.toPrimitive"]},{"path":"./test262/test/built-ins/String/prototype/trimEnd/this-value-object-toprimitive-meth-err.js","esid":" sec-string.prototype.trimEnd","description":" >Abrupt completion when Symbol.toPrimitive abrupt completes.\n","info":" |Runtime Semantics: TrimString ( string, where )\n1. Let str be ? RequireObjectCoercible(string).\n2. Let S be ? ToString(str).\n...\n\nToString ( argument )\nIf argument is Object:\n1. Let primValue be ? ToPrimitive(argument, hint String).\n...\n\nToPrimitive ( input [, PreferredType ])\n...\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive).\ne. If exoticToPrim is not undefined, then\ni. Let result be ? Call(exoticToPrim, input, « hint »).\n...\n","features":["string-trimming","String.prototype.trimEnd","Symbol.toPrimitive"]},{"path":"./test262/test/built-ins/String/prototype/trimEnd/this-value-object-toprimitive-meth-priority.js","esid":" sec-string.prototype.trimEnd","description":" >Priority of Symbol[toPrimitive] when converting object to string for trimming\n","info":" |Runtime Semantics: TrimString ( string, where )\n1. Let str be ? RequireObjectCoercible(string).\n2. Let S be ? ToString(str).\n...\n\nToString ( argument )\nIf argument is Object:\n1. Let primValue be ? ToPrimitive(argument, hint String).\n...\n\nToPrimitive ( input [, PreferredType ])\n...\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive)\ne. If exoticToPrim is not undefined, then\ni. Let result be ? Call(exoticToPrim, input, « hint »).\nii. If Type(result) is not Object, return result.\n...\n","features":["string-trimming","String.prototype.trimEnd","Symbol.toPrimitive"]},{"path":"./test262/test/built-ins/String/prototype/trimEnd/this-value-object-toprimitive-returns-object-err.js","esid":" sec-string.prototype.trimEnd","description":" >Abrupt completion when Symbol.toPrimitive returns an object\n","info":" |Runtime Semantics: TrimString ( string, where )\n1. Let str be ? RequireObjectCoercible(string).\n2. Let S be ? ToString(str).\n...\n\nToString ( argument )\nIf arguement is Object:\n1. Let primValue be ? ToPrimitive(argument, hint String).\n...\n\nToPrimitive ( input [, PreferredType ])\n...\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive).\ne. If exoticToPrim is not undefined, then\ni. Let result be ? Call(exoticToPrim, input, « hint »).\nii. If Type(result) is not Object, return result.\niii. Throw a TypeError exception.\n...\n","features":["string-trimming","String.prototype.trimEnd","Symbol.toPrimitive"]},{"path":"./test262/test/built-ins/String/prototype/trimEnd/this-value-object-tostring-call-err.js","esid":" sec-string.prototype.trimEnd","description":" >Abrupt completion when getting toString method\n","info":" |Runtime Semantics: TrimString ( string, where )\n1. Let str be ? RequireObjectCoercible(string).\n2. Let S be ? ToString(str).\n...\n\nToString ( argument )\nIf argument is Object:\n1. Let primValue be ? ToPrimitive(argument, hint String).\n...\n\nToPrimitive ( input [, PreferredType ])\n...\nb. Else if PreferredType is hint String, let hint be \"string\".\n...\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive)\ne. If exoticToPrim is not undefined, then\ni. Let result be ? Call(exoticToPrim, input, « hint »).\nii. If Type(result) is not Object, return result.\niii. Throw a TypeError exception.\nf. If hint is \"default\", set hint to \"number\".\ng. Return ? OrdinaryToPrimitive(input, hint).\n...\n\nOrdinaryToPrimitive( O, hint )\n...\n3. If hint is \"string\", then\na. Let methodNames be « \"toString\", \"valueOf\" ».\n...\n5. For each name in methodNames in List order, do\na. Let method be ? Get(O, name).\n","features":["string-trimming","String.prototype.trimEnd","Symbol.toPrimitive"]},{"path":"./test262/test/built-ins/String/prototype/trimEnd/this-value-object-tostring-meth-err.js","esid":" sec-string.prototype.trimEnd","description":" >Abrupt completion when toString called and abrupt completes.\n","info":" |Runtime Semantics: TrimString ( string, where )\n1. Let str be ? RequireObjectCoercible(string).\n2. Let S be ? ToString(str).\n...\n\nToString ( argument )\nIf argument is Object:\n1. Let primValue be ? ToPrimitive(argument, hint String).\n...\n\nToPrimitive ( input [, PreferredType ])\n...\nb. Else if PreferredType is hint String, let hint be \"string\".\n...\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive)\ne. If exoticToPrim is not undefined, then\ni. Let result be ? Call(exoticToPrim, input, « hint »).\nii. If Type(result) is not Object, return result.\niii. Throw a TypeError exception.\nf. If hint is \"default\", set hint to \"number\".\ng. Return ? OrdinaryToPrimitive(input, hint).\n...\n\nOrdinaryToPrimitive( O, hint )\n...\n3. If hint is \"string\", then\na. Let methodNames be « \"toString\", \"valueOf\" ».\n...\n5. For each name in methodNames in List order, do\na. Let method be ? Get(O, name).\nb. If IsCallable(method) is true, then\ni. Let result be ? Call(method, O).\n","features":["string-trimming","String.prototype.trimEnd","Symbol.toPrimitive"]},{"path":"./test262/test/built-ins/String/prototype/trimEnd/this-value-object-tostring-meth-priority.js","esid":" sec-string.prototype.trimEnd","description":" >Priority of toString when converting object to string for trimming\n","info":" |Runtime Semantics: TrimString ( string, where )\n1. Let str be ? RequireObjectCoercible(string).\n2. Let S be ? ToString(str).\n...\n\nToString ( argument )\nIf argument is Object:\n1. Let primValue be ? ToPrimitive(argument, hint String).\n...\n\nToPrimitive ( input [, PreferredType ])\n...\nb. Else if PreferredType is hint String, let hint be \"string\".\n...\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive)\ne. If exoticToPrim is not undefined, then\ni. Let result be ? Call(exoticToPrim, input, « hint »).\nii. If Type(result) is not Object, return result.\niii. Throw a TypeError exception.\nf. If hint is \"default\", set hint to \"number\".\ng. Return ? OrdinaryToPrimitive(input, hint).\n...\n\nOrdinaryToPrimitive( O, hint )\n...\n3. If hint is \"string\", then\na. Let methodNames be « \"toString\", \"valueOf\" ».\n...\n5. For each name in methodNames in List order, do\na. Let method be ? Get(O, name).\nb. If IsCallable(method) is true, then\ni. Let result be ? Call(method, O).\nii. If Type(result) is not Object, return result.\n...\n","features":["string-trimming","String.prototype.trimEnd","Symbol.toPrimitive"]},{"path":"./test262/test/built-ins/String/prototype/trimEnd/this-value-object-tostring-returns-object-err.js","esid":" sec-string.prototype.trimEnd","description":" >Abrupt completion when toString called and returns an object\n","info":" |Runtime Semantics: TrimString ( string, where )\n1. Let str be ? RequireObjectCoercible(string).\n2. Let S be ? ToString(str).\n...\n\nToString ( argument )\nIf argument is Object:\n1. Let primValue be ? ToPrimitive(argument, hint String).\n...\n\nToPrimitive ( input [, PreferredType ])\n...\nb. Else if PreferredType is hint String, let hint be \"string\".\n...\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive)\ne. If exoticToPrim is not undefined, then\ni. Let result be ? Call(exoticToPrim, input, « hint »).\nii. If Type(result) is not Object, return result.\niii. Throw a TypeError exception.\nf. If hint is \"default\", set hint to \"number\".\ng. Return ? OrdinaryToPrimitive(input, hint).\n...\n\nOrdinaryToPrimitive( O, hint )\n...\n3. If hint is \"string\", then\na. Let methodNames be « \"toString\", \"valueOf\" ».\n...\n5. For each name in methodNames in List order, do\na. Let method be ? Get(O, name).\nb. If IsCallable(method) is true, then\ni. Let result be ? Call(method, O).\nii. If Type(result) is not Object, return result.\n6. Throw a TypeError exception.\n","features":["string-trimming","String.prototype.trimEnd","Symbol.toPrimitive"]},{"path":"./test262/test/built-ins/String/prototype/trimEnd/this-value-object-valueof-call-err.js","esid":" sec-string.prototype.trimEnd","description":" >Abrupt completion when getting valueOf method\n","info":" |Runtime Semantics: TrimString ( string, where )\n1. Let str be ? RequireObjectCoercible(string).\n2. Let S be ? ToString(str).\n...\n\nToString ( argument )\nIf argument is Object:\n1. Let primValue be ? ToPrimitive(argument, hint String).\n...\n\nToPrimitive ( input [, PreferredType ])\n...\nb. Else if PreferredType is hint String, let hint be \"string\".\n...\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive)\ne. If exoticToPrim is not undefined, then\ni. Let result be ? Call(exoticToPrim, input, « hint »).\nii. If Type(result) is not Object, return result.\niii. Throw a TypeError exception.\nf. If hint is \"default\", set hint to \"number\".\ng. Return ? OrdinaryToPrimitive(input, hint).\n...\n\nOrdinaryToPrimitive( O, hint )\n...\n3. If hint is \"string\", then\na. Let methodNames be « \"toString\", \"valueOf\" ».\n...\n5. For each name in methodNames in List order, do\na. Let method be ? Get(O, name).\n","features":["string-trimming","String.prototype.trimEnd","Symbol.toPrimitive"]},{"path":"./test262/test/built-ins/String/prototype/trimEnd/this-value-object-valueof-meth-err.js","esid":" sec-string.prototype.trimEnd","description":" >Abrupt completion when valueOf called and abrupt completes.\n","info":" |Runtime Semantics: TrimString ( string, where )\n1. Let str be ? RequireObjectCoercible(string).\n2. Let S be ? ToString(str).\n...\n\nToString ( argument )\nIf argument is Object:\n1. Let primValue be ? ToPrimitive(argument, hint String).\n...\n\nToPrimitive ( input [, PreferredType ])\n...\nb. Else if PreferredType is hint String, let hint be \"string\".\n...\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive)\ne. If exoticToPrim is not undefined, then\ni. Let result be ? Call(exoticToPrim, input, « hint »).\nii. If Type(result) is not Object, return result.\niii. Throw a TypeError exception.\nf. If hint is \"default\", set hint to \"number\".\ng. Return ? OrdinaryToPrimitive(input, hint).\n...\n\nOrdinaryToPrimitive( O, hint )\n...\n3. If hint is \"string\", then\na. Let methodNames be « \"toString\", \"valueOf\" ».\n...\n5. For each name in methodNames in List order, do\na. Let method be ? Get(O, name).\nb. If IsCallable(method) is true, then\ni. Let result be ? Call(method, O).\n","features":["string-trimming","String.prototype.trimEnd","Symbol.toPrimitive"]},{"path":"./test262/test/built-ins/String/prototype/trimEnd/this-value-object-valueof-meth-priority.js","esid":" sec-string.prototype.trimEnd","description":" >Priority of valueOf when converting object to string for trimming\n","info":" |Runtime Semantics: TrimString ( string, where )\n1. Let str be ? RequireObjectCoercible(string).\n2. Let S be ? ToString(str).\n...\n\nToString ( argument )\nIf argument is Object:\n1. Let primValue be ? ToPrimitive(argument, hint String).\n...\n\nToPrimitive ( input [, PreferredType ])\n...\nb. Else if PreferredType is hint String, let hint be \"string\".\n...\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive)\ne. If exoticToPrim is not undefined, then\ni. Let result be ? Call(exoticToPrim, input, « hint »).\nii. If Type(result) is not Object, return result.\niii. Throw a TypeError exception.\nf. If hint is \"default\", set hint to \"number\".\ng. Return ? OrdinaryToPrimitive(input, hint).\n...\n\nOrdinaryToPrimitive( O, hint )\n...\n3. If hint is \"string\", then\na. Let methodNames be « \"toString\", \"valueOf\" ».\n...\n5. For each name in methodNames in List order, do\na. Let method be ? Get(O, name).\nb. If IsCallable(method) is true, then\ni. Let result be ? Call(method, O).\nii. If Type(result) is not Object, return result.\n...\n","features":["string-trimming","String.prototype.trimEnd","Symbol.toPrimitive"]},{"path":"./test262/test/built-ins/String/prototype/trimEnd/this-value-object-valueof-returns-object-err.js","esid":" sec-string.prototype.trimEnd","description":" >Abrupt completion when valueOf called and returns an object\n","info":" |Runtime Semantics: TrimString ( string, where )\n1. Let str be ? RequireObjectCoercible(string).\n2. Let S be ? ToString(str).\n...\n\nToString ( argument )\nIf argument is Object:\n1. Let primValue be ? ToPrimitive(argument, hint String).\n...\n\nToPrimitive ( input [, PreferredType ])\n...\nb. Else if PreferredType is hint String, let hint be \"string\".\n...\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive)\ne. If exoticToPrim is not undefined, then\ni. Let result be ? Call(exoticToPrim, input, « hint »).\nii. If Type(result) is not Object, return result.\niii. Throw a TypeError exception.\nf. If hint is \"default\", set hint to \"number\".\ng. Return ? OrdinaryToPrimitive(input, hint).\n...\n\nOrdinaryToPrimitive( O, hint )\n...\n3. If hint is \"string\", then\na. Let methodNames be « \"toString\", \"valueOf\" ».\n...\n5. For each name in methodNames in List order, do\na. Let method be ? Get(O, name).\nb. If IsCallable(method) is true, then\ni. Let result be ? Call(method, O).\nii. If Type(result) is not Object, return result.\n6. Throw a TypeError exception.\n","features":["string-trimming","String.prototype.trimEnd","Symbol.toPrimitive"]},{"path":"./test262/test/built-ins/String/prototype/trimEnd/this-value-symbol-typeerror.js","esid":" sec-string.prototype.trimEnd","description":" Type error when \"this\" value is a Symbol","info":" |Runtime Semantics: TrimString ( string, where )\n2. Let S be ? ToString(str).\n\nToString ( argument )\nArgument Type: Symbol\nResult: Throw a TypeError exception\n","features":["string-trimming","String.prototype.trimEnd"]},{"path":"./test262/test/built-ins/String/prototype/trimEnd/this-value-whitespace.js","esid":" sec-string.prototype.trimEnd","description":" TrimEnd removes all whitespace from the end of a string.","info":" |Runtime Symantics: TrimString ( string, where )\n...\n3. Else if where is \"end\", let T be a String value that is a copy of S with\ntrailing white space removed.\n...\n\nThe definition of white space is the union of WhiteSpace and LineTerminator.\nWhen determining whether a Unicode code point is in Unicode general category\n“Zs”, code unit sequences are interpreted as UTF-16 encoded code point\nsequences as specified in 6.1.4.\n\n","features":["string-trimming","String.prototype.trimEnd"]},{"path":"./test262/test/built-ins/String/prototype/trimStart/length.js","esid":" sec-string.prototype.trimStart","description":" >String.prototype.trimStart.length is 0.\n","info":" >String.prototype.trimStart ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form “...name”\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["string-trimming","String.prototype.trimStart"]},{"path":"./test262/test/built-ins/String/prototype/trimStart/name.js","esid":" sec-string.prototype.trimStart","description":" >String.prototype.trimStart.name is \"trimStart\".\n","info":" >String.prototype.trimStart ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["string-trimming","String.prototype.trimStart"]},{"path":"./test262/test/built-ins/String/prototype/trimStart/not-a-constructor.js","esid":" sec-ecmascript-standard-built-in-objects","description":" >String.prototype.trimStart does not implement [[Construct]], is not new-able\n","info":" |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n","includes":["isConstructor.js"],"features":["Reflect.construct","string-trimming","String.prototype.trimStart","arrow-function"]},{"path":"./test262/test/built-ins/String/prototype/trimStart/this-value-boolean.js","esid":" sec-string.prototype.trimStart","description":" Behavior when \"this\" value is a boolean.","info":" |Runtime Semantics: TrimString ( string, where )\n2. Let S be ? ToString(str).\n\nToString ( argument )\nArgument Type: Boolean\nResult:\nIf argument is true, return \"true\".\nIf argument is false, return \"false\".\n","features":["string-trimming","String.prototype.trimStart"]},{"path":"./test262/test/built-ins/String/prototype/trimStart/this-value-line-terminator.js","esid":" sec-string.prototype.trimStart","description":" TrimStart removes all line terminators from the start of a string.","info":" |Runtime Symantics: TrimString ( string, where )\n...\n4. If where is \"start\", let T be a String value that is a copy of S with\ntrailing white space removed.\n...\n\nThe definition of white space is the union of WhiteSpace and LineTerminator.\n\n","features":["string-trimming","String.prototype.trimStart"]},{"path":"./test262/test/built-ins/String/prototype/trimStart/this-value-not-obj-coercible.js","esid":" sec-string.prototype.trimStart","description":" The \"this\" value must be object-coercible","info":" |1. Let O be ? RequireObjectCoercible(this value).\n","features":["string-trimming","String.prototype.trimStart"]},{"path":"./test262/test/built-ins/String/prototype/trimStart/this-value-number.js","esid":" sec-string.prototype.trimStart","description":" Behavoir when \"this\" value is a number.","info":" |Runtime Semantics: TrimString ( string, where )\n2. Let S be ? ToString(str).\n\nToString ( argument )\nArgument Type: Number\nResult: NumberToString(argument)\n","features":["string-trimming","String.prototype.trimStart"]},{"path":"./test262/test/built-ins/String/prototype/trimStart/this-value-object-cannot-convert-to-primitive-err.js","esid":" sec-string.prototype.trimStart","description":" >This value is an object which cannot be converted to a primitive\n","info":" |Runtime Semantics: TrimString ( string, where )\n1. Let str be ? RequireObjectCoercible(string).\n2. Let S be ? ToString(str).\n...\n\nToString ( argument )\nIf argument is Object:\n1. Let primValue be ? ToPrimitive(argument, hint String).\n...\n\nToPrimitive ( input [, PreferredType ])\n...\nb. Else if PreferredType is hint String, let hint be \"string\".\n...\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive)\ne. If exoticToPrim is not undefined, then\ni. Let result be ? Call(exoticToPrim, input, « hint »).\nii. If Type(result) is not Object, return result.\niii. Throw a TypeError exception.\nf. If hint is \"default\", set hint to \"number\".\ng. Return ? OrdinaryToPrimitive(input, hint).\n...\n\nOrdinaryToPrimitive( O, hint )\n...\n3. If hint is \"string\", then\na. Let methodNames be « \"toString\", \"valueOf\" ».\n...\n5. For each name in methodNames in List order, do\na. Let method be ? Get(O, name).\nb. If IsCallable(method) is true, then\ni. Let result be ? Call(method, O).\nii. If Type(result) is not Object, return result.\n6. Throw a TypeError exception.\n","features":["string-trimming","String.prototype.trimStart","Symbol.toPrimitive"]},{"path":"./test262/test/built-ins/String/prototype/trimStart/this-value-object-toprimitive-call-err.js","esid":" sec-string.prototype.trimStart","description":" >Abrupt completion when getting Symbol.toPrimitive method\n","info":" |Runtime Semantics: TrimString ( string, where )\n1. Let str be ? RequireObjectCoercible(string).\n2. Let S be ? ToString(str).\n...\n\nToString ( argument )\nIf argument is Object:\n1. Let primValue be ? ToPrimitive(argument, hint String).\n...\n\nToPrimitive ( input [, PreferredType ])\n...\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive).\n...\n","features":["string-trimming","String.prototype.trimStart","Symbol.toPrimitive"]},{"path":"./test262/test/built-ins/String/prototype/trimStart/this-value-object-toprimitive-meth-err.js","esid":" sec-string.prototype.trimStart","description":" >Abrupt completion when Symbol.toPrimitive abrupt completes.\n","info":" |Runtime Semantics: TrimString ( string, where )\n1. Let str be ? RequireObjectCoercible(string).\n2. Let S be ? ToString(str).\n...\n\nToString ( argument )\nIf argument is Object:\n1. Let primValue be ? ToPrimitive(argument, hint String).\n...\n\nToPrimitive ( input [, PreferredType ])\n...\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive).\ne. If exoticToPrim is not undefined, then\ni. Let result be ? Call(exoticToPrim, input, « hint »).\n...\n","features":["string-trimming","String.prototype.trimStart","Symbol.toPrimitive"]},{"path":"./test262/test/built-ins/String/prototype/trimStart/this-value-object-toprimitive-meth-priority.js","esid":" sec-string.prototype.trimStart","description":" >Priority of Symbol[toPrimitive] when converting object to string for trimming\n","info":" |Runtime Semantics: TrimString ( string, where )\n1. Let str be ? RequireObjectCoercible(string).\n2. Let S be ? ToString(str).\n...\n\nToString ( argument )\nIf argument is Object:\n1. Let primValue be ? ToPrimitive(argument, hint String).\n...\n\nToPrimitive ( input [, PreferredType ])\n...\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive)\ne. If exoticToPrim is not undefined, then\ni. Let result be ? Call(exoticToPrim, input, « hint »).\nii. If Type(result) is not Object, return result.\n...\n","features":["string-trimming","String.prototype.trimStart","Symbol.toPrimitive"]},{"path":"./test262/test/built-ins/String/prototype/trimStart/this-value-object-toprimitive-returns-object-err.js","esid":" sec-string.prototype.trimStart","description":" >Abrupt completion when Symbol.toPrimitive returns an object\n","info":" |Runtime Semantics: TrimString ( string, where )\n1. Let str be ? RequireObjectCoercible(string).\n2. Let S be ? ToString(str).\n...\n\nToString ( argument )\nIf arguement is Object:\n1. Let primValue be ? ToPrimitive(argument, hint String).\n...\n\nToPrimitive ( input [, PreferredType ])\n...\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive).\ne. If exoticToPrim is not undefined, then\ni. Let result be ? Call(exoticToPrim, input, « hint »).\nii. If Type(result) is not Object, return result.\niii. Throw a TypeError exception.\n...\n","features":["string-trimming","String.prototype.trimStart","Symbol.toPrimitive"]},{"path":"./test262/test/built-ins/String/prototype/trimStart/this-value-object-tostring-call-err.js","esid":" sec-string.prototype.trimStart","description":" >Abrupt completion when getting toString method\n","info":" |Runtime Semantics: TrimString ( string, where )\n1. Let str be ? RequireObjectCoercible(string).\n2. Let S be ? ToString(str).\n...\n\nToString ( argument )\nIf argument is Object:\n1. Let primValue be ? ToPrimitive(argument, hint String).\n...\n\nToPrimitive ( input [, PreferredType ])\n...\nb. Else if PreferredType is hint String, let hint be \"string\".\n...\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive)\ne. If exoticToPrim is not undefined, then\ni. Let result be ? Call(exoticToPrim, input, « hint »).\nii. If Type(result) is not Object, return result.\niii. Throw a TypeError exception.\nf. If hint is \"default\", set hint to \"number\".\ng. Return ? OrdinaryToPrimitive(input, hint).\n...\n\nOrdinaryToPrimitive( O, hint )\n...\n3. If hint is \"string\", then\na. Let methodNames be « \"toString\", \"valueOf\" ».\n...\n5. For each name in methodNames in List order, do\na. Let method be ? Get(O, name).\n","features":["string-trimming","String.prototype.trimStart","Symbol.toPrimitive"]},{"path":"./test262/test/built-ins/String/prototype/trimStart/this-value-object-tostring-meth-err.js","esid":" sec-string.prototype.trimStart","description":" >Abrupt completion when toString called and abrupt completes.\n","info":" |Runtime Semantics: TrimString ( string, where )\n1. Let str be ? RequireObjectCoercible(string).\n2. Let S be ? ToString(str).\n...\n\nToString ( argument )\nIf argument is Object:\n1. Let primValue be ? ToPrimitive(argument, hint String).\n...\n\nToPrimitive ( input [, PreferredType ])\n...\nb. Else if PreferredType is hint String, let hint be \"string\".\n...\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive)\ne. If exoticToPrim is not undefined, then\ni. Let result be ? Call(exoticToPrim, input, « hint »).\nii. If Type(result) is not Object, return result.\niii. Throw a TypeError exception.\nf. If hint is \"default\", set hint to \"number\".\ng. Return ? OrdinaryToPrimitive(input, hint).\n...\n\nOrdinaryToPrimitive( O, hint )\n...\n3. If hint is \"string\", then\na. Let methodNames be « \"toString\", \"valueOf\" ».\n...\n5. For each name in methodNames in List order, do\na. Let method be ? Get(O, name).\nb. If IsCallable(method) is true, then\ni. Let result be ? Call(method, O).\n","features":["string-trimming","String.prototype.trimStart","Symbol.toPrimitive"]},{"path":"./test262/test/built-ins/String/prototype/trimStart/this-value-object-tostring-meth-priority.js","esid":" sec-string.prototype.trimStart","description":" >Priority of toString when converting object to string for trimming\n","info":" |Runtime Semantics: TrimString ( string, where )\n1. Let str be ? RequireObjectCoercible(string).\n2. Let S be ? ToString(str).\n...\n\nToString ( argument )\nIf argument is Object:\n1. Let primValue be ? ToPrimitive(argument, hint String).\n...\n\nToPrimitive ( input [, PreferredType ])\n...\nb. Else if PreferredType is hint String, let hint be \"string\".\n...\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive)\ne. If exoticToPrim is not undefined, then\ni. Let result be ? Call(exoticToPrim, input, « hint »).\nii. If Type(result) is not Object, return result.\niii. Throw a TypeError exception.\nf. If hint is \"default\", set hint to \"number\".\ng. Return ? OrdinaryToPrimitive(input, hint).\n...\n\nOrdinaryToPrimitive( O, hint )\n...\n3. If hint is \"string\", then\na. Let methodNames be « \"toString\", \"valueOf\" ».\n...\n5. For each name in methodNames in List order, do\na. Let method be ? Get(O, name).\nb. If IsCallable(method) is true, then\ni. Let result be ? Call(method, O).\nii. If Type(result) is not Object, return result.\n...\n","features":["string-trimming","String.prototype.trimStart","Symbol.toPrimitive"]},{"path":"./test262/test/built-ins/String/prototype/trimStart/this-value-object-tostring-returns-object-err.js","esid":" sec-string.prototype.trimStart","description":" >Abrupt completion when toString called and returns an object\n","info":" |Runtime Semantics: TrimString ( string, where )\n1. Let str be ? RequireObjectCoercible(string).\n2. Let S be ? ToString(str).\n...\n\nToString ( argument )\nIf argument is Object:\n1. Let primValue be ? ToPrimitive(argument, hint String).\n...\n\nToPrimitive ( input [, PreferredType ])\n...\nb. Else if PreferredType is hint String, let hint be \"string\".\n...\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive)\ne. If exoticToPrim is not undefined, then\ni. Let result be ? Call(exoticToPrim, input, « hint »).\nii. If Type(result) is not Object, return result.\niii. Throw a TypeError exception.\nf. If hint is \"default\", set hint to \"number\".\ng. Return ? OrdinaryToPrimitive(input, hint).\n...\n\nOrdinaryToPrimitive( O, hint )\n...\n3. If hint is \"string\", then\na. Let methodNames be « \"toString\", \"valueOf\" ».\n...\n5. For each name in methodNames in List order, do\na. Let method be ? Get(O, name).\nb. If IsCallable(method) is true, then\ni. Let result be ? Call(method, O).\nii. If Type(result) is not Object, return result.\n6. Throw a TypeError exception.\n","features":["string-trimming","String.prototype.trimStart","Symbol.toPrimitive"]},{"path":"./test262/test/built-ins/String/prototype/trimStart/this-value-object-valueof-call-err.js","esid":" sec-string.prototype.trimStart","description":" >Abrupt completion when getting valueOf method\n","info":" |Runtime Semantics: TrimString ( string, where )\n1. Let str be ? RequireObjectCoercible(string).\n2. Let S be ? ToString(str).\n...\n\nToString ( argument )\nIf argument is Object:\n1. Let primValue be ? ToPrimitive(argument, hint String).\n...\n\nToPrimitive ( input [, PreferredType ])\n...\nb. Else if PreferredType is hint String, let hint be \"string\".\n...\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive)\ne. If exoticToPrim is not undefined, then\ni. Let result be ? Call(exoticToPrim, input, « hint »).\nii. If Type(result) is not Object, return result.\niii. Throw a TypeError exception.\nf. If hint is \"default\", set hint to \"number\".\ng. Return ? OrdinaryToPrimitive(input, hint).\n...\n\nOrdinaryToPrimitive( O, hint )\n...\n3. If hint is \"string\", then\na. Let methodNames be « \"toString\", \"valueOf\" ».\n...\n5. For each name in methodNames in List order, do\na. Let method be ? Get(O, name).\n","features":["string-trimming","Symbol.toPrimitive"]},{"path":"./test262/test/built-ins/String/prototype/trimStart/this-value-object-valueof-meth-err.js","esid":" sec-string.prototype.trimStart","description":" >Abrupt completion when valueOf called and abrupt completes.\n","info":" |Runtime Semantics: TrimString ( string, where )\n1. Let str be ? RequireObjectCoercible(string).\n2. Let S be ? ToString(str).\n...\n\nToString ( argument )\nIf argument is Object:\n1. Let primValue be ? ToPrimitive(argument, hint String).\n...\n\nToPrimitive ( input [, PreferredType ])\n...\nb. Else if PreferredType is hint String, let hint be \"string\".\n...\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive)\ne. If exoticToPrim is not undefined, then\ni. Let result be ? Call(exoticToPrim, input, « hint »).\nii. If Type(result) is not Object, return result.\niii. Throw a TypeError exception.\nf. If hint is \"default\", set hint to \"number\".\ng. Return ? OrdinaryToPrimitive(input, hint).\n...\n\nOrdinaryToPrimitive( O, hint )\n...\n3. If hint is \"string\", then\na. Let methodNames be « \"toString\", \"valueOf\" ».\n...\n5. For each name in methodNames in List order, do\na. Let method be ? Get(O, name).\nb. If IsCallable(method) is true, then\ni. Let result be ? Call(method, O).\n","features":["string-trimming","String.prototype.trimStart","Symbol.toPrimitive"]},{"path":"./test262/test/built-ins/String/prototype/trimStart/this-value-object-valueof-meth-priority.js","esid":" sec-string.prototype.trimStart","description":" >Priority of valueOf when converting object to string for trimming\n","info":" |Runtime Semantics: TrimString ( string, where )\n1. Let str be ? RequireObjectCoercible(string).\n2. Let S be ? ToString(str).\n...\n\nToString ( argument )\nIf argument is Object:\n1. Let primValue be ? ToPrimitive(argument, hint String).\n...\n\nToPrimitive ( input [, PreferredType ])\n...\nb. Else if PreferredType is hint String, let hint be \"string\".\n...\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive)\ne. If exoticToPrim is not undefined, then\ni. Let result be ? Call(exoticToPrim, input, « hint »).\nii. If Type(result) is not Object, return result.\niii. Throw a TypeError exception.\nf. If hint is \"default\", set hint to \"number\".\ng. Return ? OrdinaryToPrimitive(input, hint).\n...\n\nOrdinaryToPrimitive( O, hint )\n...\n3. If hint is \"string\", then\na. Let methodNames be « \"toString\", \"valueOf\" ».\n...\n5. For each name in methodNames in List order, do\na. Let method be ? Get(O, name).\nb. If IsCallable(method) is true, then\ni. Let result be ? Call(method, O).\nii. If Type(result) is not Object, return result.\n...\n","features":["string-trimming","String.prototype.trimStart","Symbol.toPrimitive"]},{"path":"./test262/test/built-ins/String/prototype/trimStart/this-value-object-valueof-returns-object-err.js","esid":" sec-string.prototype.trimStart","description":" >Abrupt completion when valueOf called and returns an object\n","info":" |Runtime Semantics: TrimString ( string, where )\n1. Let str be ? RequireObjectCoercible(string).\n2. Let S be ? ToString(str).\n...\n\nToString ( argument )\nIf argument is Object:\n1. Let primValue be ? ToPrimitive(argument, hint String).\n...\n\nToPrimitive ( input [, PreferredType ])\n...\nb. Else if PreferredType is hint String, let hint be \"string\".\n...\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive)\ne. If exoticToPrim is not undefined, then\ni. Let result be ? Call(exoticToPrim, input, « hint »).\nii. If Type(result) is not Object, return result.\niii. Throw a TypeError exception.\nf. If hint is \"default\", set hint to \"number\".\ng. Return ? OrdinaryToPrimitive(input, hint).\n...\n\nOrdinaryToPrimitive( O, hint )\n...\n3. If hint is \"string\", then\na. Let methodNames be « \"toString\", \"valueOf\" ».\n...\n5. For each name in methodNames in List order, do\na. Let method be ? Get(O, name).\nb. If IsCallable(method) is true, then\ni. Let result be ? Call(method, O).\nii. If Type(result) is not Object, return result.\n6. Throw a TypeError exception.\n","features":["string-trimming","String.prototype.trimStart","Symbol.toPrimitive"]},{"path":"./test262/test/built-ins/String/prototype/trimStart/this-value-symbol-typeerror.js","esid":" sec-string.prototype.trimStart","description":" Type error when \"this\" value is a Symbol","info":" |Runtime Semantics: TrimString ( string, where )\n2. Let S be ? ToString(str).\n\nToString ( argument )\nArgument Type: Symbol\nResult: Throw a TypeError exception\n","features":["string-trimming","String.prototype.trimStart"]},{"path":"./test262/test/built-ins/String/prototype/trimStart/this-value-whitespace.js","esid":" sec-string.prototype.trimStart","description":" TrimStart removes all whitespace from the start of a string.","info":" |Runtime Symantics: TrimString ( string, where )\n...\n3. If where is \"start\", let T be a String value that is a copy of S with\ntrailing white space removed.\n...\n\nThe definition of white space is the union of WhiteSpace and LineTerminator.\nWhen determining whether a Unicode code point is in Unicode general category\n“Zs”, code unit sequences are interpreted as UTF-16 encoded code point\nsequences as specified in 6.1.4.\n\n","features":["string-trimming","String.prototype.trimStart"]}]