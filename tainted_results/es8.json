[{"path":"./test262/test/built-ins/ArrayBuffer/prototype/byteLength/this-is-sharedarraybuffer.js","esid":" sec-get-arraybuffer.prototype.bytelength\r","description":" Throws a TypeError exception when `this` is a SharedArrayBuffer\r","features":["align-detached-buffer-semantics-with-web-reality","SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/ArrayBuffer/prototype/maxByteLength/this-is-sharedarraybuffer.js","esid":" sec-get-arraybuffer.prototype.maxbytelength\r","description":" Throws a TypeError exception when `this` is a SharedArrayBuffer\r","info":" |\rget ArrayBuffer.prototype.maxByteLength\r\n\r\n1. Let O be the this value.\r\n2. Perform ? RequireInternalSlot(O, [[ArrayBufferData]]).\r\n3. If IsSharedArrayBuffer(O) is true, throw a TypeError exception.\r\n[...]\r\n","features":["SharedArrayBuffer","resizable-arraybuffer\r"]},{"path":"./test262/test/built-ins/ArrayBuffer/prototype/resizable/this-is-sharedarraybuffer.js","esid":" sec-get-arraybuffer.prototype.resizable\r","description":" Throws a TypeError exception when `this` is a SharedArrayBuffer\r","info":" |\rget ArrayBuffer.prototype.resizable\r\n\r\n1. Let O be the this value.\r\n2. Perform ? RequireInternalSlot(O, [[ArrayBufferData]]).\r\n3. If IsSharedArrayBuffer(O) is true, throw a TypeError exception.\r\n[...]\r\n","features":["SharedArrayBuffer","resizable-arraybuffer\r"]},{"path":"./test262/test/built-ins/ArrayBuffer/prototype/resize/this-is-sharedarraybuffer.js","esid":" sec-arraybuffer.prototype.resize\r","description":" Throws a TypeError if `this` value is a SharedArrayBuffer\r","info":" |\rArrayBuffer.prototype.resize ( newLength )\r\n\r\n1. Let O be the this value.\r\n2. Perform ? RequireInternalSlot(O, [[ArrayBufferMaxByteLength]]).\r\n3. If IsSharedArrayBuffer(O) is true, throw a TypeError exception.\r\n[...]\r\n","features":["SharedArrayBuffer","resizable-arraybuffer\r"]},{"path":"./test262/test/built-ins/ArrayBuffer/prototype/slice/this-is-sharedarraybuffer.js","esid":" sec-arraybuffer.prototype.slice\r","description":" >\rThrows a TypeError if `this` is a SharedArrayBuffer\r\n","features":["SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/ArrayBuffer/prototype/transfer/this-is-sharedarraybuffer.js","esid":" sec-arraybuffer.prototype.transfer\r","description":" Throws a TypeError if `this` value is a SharedArrayBuffer\r","info":" |\rArrayBuffer.prototype.transfer ( [ newLength ] )\r\n\r\n1. Let O be the this value.\r\n2. Perform ? RequireInternalSlot(O, [[ArrayBufferData]]).\r\n3. If IsSharedArrayBuffer(O) is true, throw a TypeError exception.\r\n[...]\r\n","features":["SharedArrayBuffer","resizable-arraybuffer\r"]},{"path":"./test262/test/built-ins/AsyncArrowFunction/is-a-constructor.js","esid":" sec-ecmascript-standard-built-in-objects\r","description":" >\rThe AsyncArrowFunction constructor implements [[Construct]]\r\n","info":" |\rIsConstructor ( argument )\r\n\r\nThe abstract operation IsConstructor takes argument argument (an ECMAScript language value).\r\nIt determines if argument is a function object with a [[Construct]] internal method.\r\nIt performs the following steps when called:\r\n\r\nIf Type(argument) is not Object, return false.\r\nIf argument has a [[Construct]] internal method, return true.\r\nReturn false.\r\n","includes":["isConstructor.js","hidden-constructors.js\r"],"features":["Reflect.construct\r"]},{"path":"./test262/test/built-ins/AsyncFunction/AsyncFunction-construct.js","author":" Brian Terlson <brian.terlson@microsoft.com>\r","esid":" sec-async-function-constructor\r","description":" >\r%AsyncFunction% creates functions with or without new and handles arguments\r\nsimilarly to functions.\r\n"},{"path":"./test262/test/built-ins/AsyncFunction/AsyncFunction-is-extensible.js","author":" Brian Terlson <brian.terlson@microsoft.com>\r","esid":" pending\r","description":" >\r%AsyncFunction% is extensible\r\n"},{"path":"./test262/test/built-ins/AsyncFunction/AsyncFunction-is-subclass.js","author":" Brian Terlson <brian.terlson@microsoft.com>\r","esid":" sec-async-function-constructor\r","description":" >\r%AsyncFunction% is a subclass of Function\r\n"},{"path":"./test262/test/built-ins/AsyncFunction/AsyncFunction-length.js","author":" Brian Terlson <brian.terlson@microsoft.com>\r","esid":" sec-async-function-constructor-length\r","description":" >\r%AsyncFunction% has a length of 1 with writable false, enumerable false, configurable true.\r\n","includes":["propertyHelper.js\r"]},{"path":"./test262/test/built-ins/AsyncFunction/AsyncFunction-name.js","author":" Brian Terlson <brian.terlson@microsoft.com>\r","esid":" sec-async-function-constructor-properties\r","description":" >\r%AsyncFunction% has a name of \"AsyncFunction\".\r\n","includes":["propertyHelper.js\r"]},{"path":"./test262/test/built-ins/AsyncFunction/AsyncFunction-prototype.js","author":" Brian Terlson <brian.terlson@microsoft.com>\r","esid":" sec-async-function-constructor-prototype\r","description":" AsyncFunction has a prototype property with writable false, enumerable false, configurable false.\r","includes":["propertyHelper.js\r"]},{"path":"./test262/test/built-ins/AsyncFunction/AsyncFunction.js","author":" Brian Terlson <brian.terlson@microsoft.com>\r","esid":" sec-async-function-objects\r","description":" >\r%AsyncFunction% exists and is a function\r\n"},{"path":"./test262/test/built-ins/AsyncFunction/AsyncFunctionPrototype-is-extensible.js","author":" Brian Terlson <brian.terlson@microsoft.com>\r","esid":" sec-sync-function-prototype-properties\r","description":" >\r%AsyncFunctionPrototype% has a [[Extensible]] of true\r\n"},{"path":"./test262/test/built-ins/AsyncFunction/AsyncFunctionPrototype-is-not-callable.js","esid":" sec-async-function-prototype-properties\r","description":" >\r%AsyncFunction.prototype% is an ordinary non-callable object.\r\n","info":" |\rProperties of the AsyncFunction Prototype Object\r\n\r\nThe AsyncFunction prototype object:\r\n\r\n[...]\r\n* is an ordinary object.\r\n* is not a function object and does not have an [[ECMAScriptCode]] internal slot\r\nor any other of the internal slots listed in Table 28.\r\n","features":["async-functions\r"]},{"path":"./test262/test/built-ins/AsyncFunction/AsyncFunctionPrototype-prototype.js","author":" Brian Terlson <brian.terlson@microsoft.com>\r","esid":" sec-sync-function-prototype-properties\r","description":" AsyncFunction.prototype has a [[prototype]] of Function.prototype\r"},{"path":"./test262/test/built-ins/AsyncFunction/AsyncFunctionPrototype-to-string.js","author":" Brian Terlson <brian.terlson@microsoft.com>\r","esid":" sec-async-function-prototype-properties-toStringTag\r","description":" >\r%AsyncFunctionPrototype% has a Symbol.toStringTag property of \"AsyncFunction\"\r\n","includes":["propertyHelper.js\r"],"features":["Symbol.toStringTag\r"]},{"path":"./test262/test/built-ins/AsyncFunction/instance-construct-throws.js","author":" Brian Terlson <brian.terlson@microsoft.com>\r","esid":" sec-async-function-instances\r","description":" >\rAsync function instances are not constructors and do not have a\r\n[[Construct]] slot.\r\n","info":" |\r25.5.1.1 AsyncFunction( p1, p2, … , pn, body )\r\n\r\n...\r\n3. Return CreateDynamicFunction(C, NewTarget, \"async\", args).\r\n\r\n19.2.1.1.1 Runtime Semantics: CreateDynamicFunction( constructor, newTarget, kind, args )\r\n\r\n...\r\n33. Perform FunctionInitialize(F, Normal, parameters, body, scope).\r\n34. If kind is \"generator\", then\r\n...\r\n35. Else if kind is \"normal\", perform MakeConstructor(F).\r\n36. NOTE: Async functions are not constructable and do not have a [[Construct]] internal method\r\nor a\"prototype\" property.\r\n...\r\n"},{"path":"./test262/test/built-ins/AsyncFunction/instance-has-name.js","author":" Brian Terlson <brian.terlson@microsoft.com>\r","esid":" sec-async-function-instances-name\r","description":" Async function declarations have a name property\r","includes":["propertyHelper.js\r"]},{"path":"./test262/test/built-ins/AsyncFunction/instance-length.js","author":" Brian Terlson <brian.terlson@microsoft.com>\r","esid":" sec-async-function-instances-length\r","description":" >\rAsync functions have a length property that is the number of expected\r\narguments.\r\n","includes":["propertyHelper.js\r"]},{"path":"./test262/test/built-ins/AsyncFunction/instance-prototype-property.js","author":" Brian Terlson <brian.terlson@microsoft.com>\r","esid":" sec-async-function-instances\r","description":" >\rAsync function instances do not have a prototype property.\r\n"},{"path":"./test262/test/built-ins/AsyncFunction/is-a-constructor.js","esid":" sec-ecmascript-standard-built-in-objects\r","description":" >\rThe AsyncFunction constructor implements [[Construct]]\r\n","info":" |\rIsConstructor ( argument )\r\n\r\nThe abstract operation IsConstructor takes argument argument (an ECMAScript language value).\r\nIt determines if argument is a function object with a [[Construct]] internal method.\r\nIt performs the following steps when called:\r\n\r\nIf Type(argument) is not Object, return false.\r\nIf argument has a [[Construct]] internal method, return true.\r\nReturn false.\r\n","includes":["isConstructor.js","hidden-constructors.js\r"],"features":["Reflect.construct\r"]},{"path":"./test262/test/built-ins/AsyncFunction/is-not-a-global.js","author":" Brian Terlson <brian.terlson@microsoft.com>\r","esid":" sec-async-function-constructor-properties\r","description":" >\r%AsyncFunction% is not exposed as a global\r\n"},{"path":"./test262/test/built-ins/AsyncFunction/proto-from-ctor-realm.js","esid":" sec-async-function-constructor-arguments\r","description":" Default [[Prototype]] value derived from realm of the NewTarget.\r","info":" |\rAsyncFunction ( p1, p2, … , pn, body )\r\n\r\n...\r\n3. Return CreateDynamicFunction(C, NewTarget, \"async\", args).\r\n\r\nRuntime Semantics: CreateDynamicFunction ( constructor, newTarget, kind, args )\r\n\r\n...\r\n9. Else if kind is \"async\", then\r\n...\r\nc. Let fallbackProto be \"%AsyncFunction.prototype%\".\r\n...\r\n18. Let proto be ? GetPrototypeFromConstructor(newTarget, fallbackProto).\r\n...\r\n\r\nGetPrototypeFromConstructor ( constructor, intrinsicDefaultProto )\r\n\r\n...\r\n3. Let proto be ? Get(constructor, \"prototype\").\r\n4. If Type(proto) is not Object, then\r\na. Let realm be ? GetFunctionRealm(constructor).\r\nb. Set proto to realm's intrinsic object named intrinsicDefaultProto.\r\n5. Return proto.\r\n","features":["async-functions","cross-realm","Reflect","Symbol\r"]},{"path":"./test262/test/built-ins/Atomics/add/bad-range.js","esid":" sec-atomics.add\r","description":" >\rTest range checking of Atomics.add on arrays that allow atomic operations\r\n","includes":["testAtomics.js","testTypedArray.js\r"],"features":["ArrayBuffer","Atomics","DataView","SharedArrayBuffer","Symbol","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/add/descriptor.js","esid":" sec-atomics.add\r","description":" Testing descriptor property of Atomics.add\r","includes":["propertyHelper.js\r"],"features":["Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/add/expected-return-value.js","esid":" sec-atomics.add\r","description":" >\rAtomics.add returns the value that existed at the\r\nindex prior to the operation.\r\n","info":" |\rAtomics.add( typedArray, index, value )\r\n\r\n1. Return ? AtomicReadModifyWrite(typedArray, index, value, add).\r\n\r\nAtomicReadModifyWrite( typedArray, index, value, op )\r\n\r\n...\r\n9. Return GetModifySetValueInBuffer(buffer, indexedPosition,\r\nelementType, v, op).\r\n\r\n\r\nGetModifySetValueInBuffer( arrayBuffer,\r\nbyteIndex, type, value, op [ , isLittleEndian ] )\r\n\r\n...\r\n16. Return RawBytesToNumber(type, rawBytesRead, isLittleEndian).\r\n\r\n","features":["Atomics","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/add/good-views.js","esid":" sec-atomics.add\r","description":" Test Atomics.add on arrays that allow atomic operations.\r","includes":["testAtomics.js","testTypedArray.js\r"],"features":["ArrayBuffer","Atomics","DataView","SharedArrayBuffer","Symbol","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/add/length.js","esid":" sec-atomics.add\r","description":" >\rAtomics.add.length is 3.\r\n","info":" |\rAtomics.add ( ia, index, val )\r\n\r\n17 ECMAScript Standard Built-in Objects:\r\nEvery built-in Function object, including constructors, has a length\r\nproperty whose value is an integer. Unless otherwise specified, this\r\nvalue is equal to the largest number of named arguments shown in the\r\nsubclause headings for the function description, including optional\r\nparameters. However, rest parameters shown using the form “...name”\r\nare not included in the default argument count.\r\n\r\nUnless otherwise specified, the length property of a built-in Function\r\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\r\n[[Configurable]]: true }.\r\n","includes":["propertyHelper.js\r"],"features":["Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/add/name.js","esid":" sec-atomics.add\r","description":" >\rAtomics.add.name is \"add\".\r\n","includes":["propertyHelper.js\r"],"features":["Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/add/non-shared-bufferdata.js","esid":" sec-atomics.add\r","description":" >\rAtomics.add will operate on TA when TA.buffer is not a SharedArrayBuffer\r\n","includes":["testTypedArray.js\r"],"features":["ArrayBuffer","Atomics","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/add/non-shared-int-views-throws.js","esid":" sec-atomics.add\r","description":" >\rAtomics.add throws when operating on non-sharable integer TypedArrays\r\n","includes":["testTypedArray.js\r"],"features":["ArrayBuffer","Atomics","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/add/non-views.js","esid":" sec-atomics.add\r","description":" >\rTest Atomics.add on view values other than TypedArrays\r\n","includes":["testAtomics.js\r"],"features":["ArrayBuffer","Atomics","DataView","SharedArrayBuffer","Symbol","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/add/not-a-constructor.js","esid":" sec-ecmascript-standard-built-in-objects\r","description":" >\rAtomics.add does not implement [[Construct]], is not new-able\r\n","info":" |\rECMAScript Function Objects\r\n\r\nBuilt-in function objects that are not identified as constructors do not\r\nimplement the [[Construct]] internal method unless otherwise specified in\r\nthe description of a particular function.\r\n\r\nsec-evaluatenew\r\n\r\n...\r\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\r\n...\r\n","includes":["isConstructor.js\r"],"features":["Reflect.construct","Atomics","arrow-function","TypedArray","SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/Atomics/add/validate-arraytype-before-index-coercion.js","esid":" sec-atomics.add\r","description":" >\rTypedArray type is validated before `index` argument is coerced.\r\n","info":" |\r24.4.2 Atomics.add ( typedArray, index, value )\r\n1. Return ? AtomicReadModifyWrite(typedArray, index, value, add).\r\n\r\n24.4.1.11 AtomicReadModifyWrite ( typedArray, index, value, op )\r\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray).\r\n...\r\n\r\n24.4.1.1 ValidateSharedIntegerTypedArray ( typedArray [ , onlyInt32 ] )\r\n...\r\n4. Let typeName be typedArray.[[TypedArrayName]].\r\n5. If onlyInt32 is true, then\r\na. If typeName is not \"Int32Array\", throw a TypeError exception.\r\n6. Else,\r\na. If typeName is not \"Int8Array\", \"Uint8Array\", \"Int16Array\", \"Uint16Array\", \"Int32Array\",\r\nor \"Uint32Array\", throw a TypeError exception.\r\n...\r\n","features":["Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/add/validate-arraytype-before-value-coercion.js","esid":" sec-atomics.add\r","description":" >\rTypedArray type is validated before `value` argument is coerced.\r\n","info":" |\r24.4.2 Atomics.add ( typedArray, index, value )\r\n1. Return ? AtomicReadModifyWrite(typedArray, index, value, add).\r\n\r\n24.4.1.11 AtomicReadModifyWrite ( typedArray, index, value, op )\r\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray).\r\n...\r\n\r\n24.4.1.1 ValidateSharedIntegerTypedArray ( typedArray [ , onlyInt32 ] )\r\n...\r\n4. Let typeName be typedArray.[[TypedArrayName]].\r\n5. If onlyInt32 is true, then\r\na. If typeName is not \"Int32Array\", throw a TypeError exception.\r\n6. Else,\r\na. If typeName is not \"Int8Array\", \"Uint8Array\", \"Int16Array\", \"Uint16Array\", \"Int32Array\",\r\nor \"Uint32Array\", throw a TypeError exception.\r\n...\r\n","features":["Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/and/bad-range.js","esid":" sec-atomics.and\r","description":" >\rTest range checking of Atomics.and on arrays that allow atomic operations\r\n","includes":["testAtomics.js","testTypedArray.js\r"],"features":["ArrayBuffer","Atomics","DataView","SharedArrayBuffer","Symbol","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/and/descriptor.js","esid":" sec-atomics.and\r","description":" Testing descriptor property of Atomics.and\r","includes":["propertyHelper.js\r"],"features":["Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/and/expected-return-value.js","esid":" sec-atomics.and\r","description":" >\rAtomics.and returns the value that existed at the\r\nindex prior to the operation.\r\n","info":" |\rAtomics.and( typedArray, index, value )\r\n\r\n1. Return ? AtomicReadModifyWrite(typedArray, index, value, and).\r\n\r\nAtomicReadModifyWrite( typedArray, index, value, op )\r\n\r\n...\r\n9. Return GetModifySetValueInBuffer(buffer, indexedPosition,\r\nelementType, v, op).\r\n\r\n\r\nGetModifySetValueInBuffer( arrayBuffer,\r\nbyteIndex, type, value, op [ , isLittleEndian ] )\r\n\r\n...\r\n16. Return RawBytesToNumber(type, rawBytesRead, isLittleEndian).\r\n\r\n","features":["Atomics","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/and/good-views.js","esid":" sec-atomics.and\r","description":" Test Atomics.and on arrays that allow atomic operations\r","includes":["testAtomics.js","testTypedArray.js\r"],"features":["ArrayBuffer","Atomics","DataView","SharedArrayBuffer","Symbol","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/and/length.js","esid":" sec-atomics.and\r","description":" >\rAtomics.and.length is 3.\r\n","info":" |\rAtomics.and ( ia, index, val )\r\n\r\n17 ECMAScript Standard Built-in Objects:\r\nEvery built-in Function object, including constructors, has a length\r\nproperty whose value is an integer. Unless otherwise specified, this\r\nvalue is equal to the largest number of named arguments shown in the\r\nsubclause headings for the function description, including optional\r\nparameters. However, rest parameters shown using the form “...name”\r\nare not included in the default argument count.\r\n\r\nUnless otherwise specified, the length property of a built-in Function\r\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\r\n[[Configurable]]: true }.\r\n","includes":["propertyHelper.js\r"],"features":["Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/and/name.js","esid":" sec-atomics.and\r","description":" >\rAtomics.and.name is \"and\".\r\n","includes":["propertyHelper.js\r"],"features":["Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/and/non-shared-bufferdata.js","esid":" sec-atomics.and\r","description":" >\rAtomics.and will operate on TA when TA.buffer is not a SharedArrayBuffer\r\n","includes":["testTypedArray.js\r"],"features":["ArrayBuffer","Atomics","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/and/non-shared-int-views-throws.js","esid":" sec-atomics.and\r","description":" >\rAtomics.and throws when operating on non-sharable integer TypedArrays\r\n","includes":["testTypedArray.js\r"],"features":["ArrayBuffer","Atomics","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/and/non-views.js","esid":" sec-atomics.and\r","description":" >\rTest Atomics.and on view values other than TypedArrays\r\n","includes":["testAtomics.js\r"],"features":["ArrayBuffer","Atomics","DataView","SharedArrayBuffer","Symbol","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/and/not-a-constructor.js","esid":" sec-ecmascript-standard-built-in-objects\r","description":" >\rAtomics.and does not implement [[Construct]], is not new-able\r\n","info":" |\rECMAScript Function Objects\r\n\r\nBuilt-in function objects that are not identified as constructors do not\r\nimplement the [[Construct]] internal method unless otherwise specified in\r\nthe description of a particular function.\r\n\r\nsec-evaluatenew\r\n\r\n...\r\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\r\n...\r\n","includes":["isConstructor.js\r"],"features":["Reflect.construct","Atomics","arrow-function","TypedArray","SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/Atomics/and/validate-arraytype-before-index-coercion.js","esid":" sec-atomics.add\r","description":" >\rTypedArray type is validated before `index` argument is coerced.\r\n","info":" |\r24.4.3 Atomics.and ( typedArray, index, value )\r\n1. Return ? AtomicReadModifyWrite(typedArray, index, value, and).\r\n\r\n24.4.1.11 AtomicReadModifyWrite ( typedArray, index, value, op )\r\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray).\r\n...\r\n\r\n24.4.1.1 ValidateSharedIntegerTypedArray ( typedArray [ , onlyInt32 ] )\r\n...\r\n4. Let typeName be typedArray.[[TypedArrayName]].\r\n5. If onlyInt32 is true, then\r\na. If typeName is not \"Int32Array\", throw a TypeError exception.\r\n6. Else,\r\na. If typeName is not \"Int8Array\", \"Uint8Array\", \"Int16Array\", \"Uint16Array\", \"Int32Array\",\r\nor \"Uint32Array\", throw a TypeError exception.\r\n...\r\n","features":["Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/and/validate-arraytype-before-value-coercion.js","esid":" sec-atomics.add\r","description":" >\rTypedArray type is validated before `value` argument is coerced.\r\n","info":" |\r24.4.3 Atomics.and ( typedArray, index, value )\r\n1. Return ? AtomicReadModifyWrite(typedArray, index, value, and).\r\n\r\n24.4.1.11 AtomicReadModifyWrite ( typedArray, index, value, op )\r\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray).\r\n...\r\n\r\n24.4.1.1 ValidateSharedIntegerTypedArray ( typedArray [ , onlyInt32 ] )\r\n...\r\n4. Let typeName be typedArray.[[TypedArrayName]].\r\n5. If onlyInt32 is true, then\r\na. If typeName is not \"Int32Array\", throw a TypeError exception.\r\n6. Else,\r\na. If typeName is not \"Int8Array\", \"Uint8Array\", \"Int16Array\", \"Uint16Array\", \"Int32Array\",\r\nor \"Uint32Array\", throw a TypeError exception.\r\n...\r\n","features":["Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/compareExchange/bad-range.js","esid":" sec-atomics.compareexchange\r","description":" >\rTest range checking of Atomics.compareExchange on arrays that allow atomic operations\r\n","includes":["testAtomics.js","testTypedArray.js\r"],"features":["ArrayBuffer","Atomics","DataView","SharedArrayBuffer","Symbol","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/compareExchange/descriptor.js","esid":" sec-atomics.compareexchange\r","description":" Testing descriptor property of Atomics.compareExchange\r","includes":["propertyHelper.js\r"],"features":["Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/compareExchange/expected-return-value.js","esid":" sec-atomics.compareExchange\r","description":" >\rAtomics.compareExchange returns the value that existed at the\r\nindex prior to the operation.\r\n","info":" |\rAtomics.compareExchange( typedArray, index, expectedValue, replacementValue )\r\n\r\n...\r\n12. Let compareExchange denote a semantic function of two List of\r\nbyte values arguments that returns the second argument if the\r\nfirst argument is element-wise equal to expectedBytes.\r\n13. Return GetModifySetValueInBuffer(buffer, indexedPosition,\r\nelementType, replacement, compareExchange).\r\n\r\n\r\nGetModifySetValueInBuffer( arrayBuffer,\r\nbyteIndex, type, value, op [ , isLittleEndian ] )\r\n\r\n...\r\n16. Return RawBytesToNumber(type, rawBytesRead, isLittleEndian).\r\n\r\n","features":["Atomics","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/compareExchange/good-views.js","esid":" sec-atomics.compareexchange\r","description":" Test Atomics.compareExchange on arrays that allow atomic operations.\r","includes":["testAtomics.js","testTypedArray.js\r"],"features":["ArrayBuffer","Atomics","DataView","SharedArrayBuffer","Symbol","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/compareExchange/length.js","esid":" sec-atomics.compareexchange\r","description":" >\rAtomics.compareExchange.length is 4.\r\n","info":" |\rAtomics.compareExchange ( ia, index, expect, replace )\r\n\r\n17 ECMAScript Standard Built-in Objects:\r\nEvery built-in Function object, including constructors, has a length\r\nproperty whose value is an integer. Unless otherwise specified, this\r\nvalue is equal to the largest number of named arguments shown in the\r\nsubclause headings for the function description, including optional\r\nparameters. However, rest parameters shown using the form “...name”\r\nare not included in the default argument count.\r\n\r\nUnless otherwise specified, the length property of a built-in Function\r\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\r\n[[Configurable]]: true }.\r\n","includes":["propertyHelper.js\r"],"features":["Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/compareExchange/name.js","esid":" sec-atomics.compareexchange\r","description":" >\rAtomics.compareExchange.name is \"compareExchange\".\r\n","includes":["propertyHelper.js\r"],"features":["Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/compareExchange/non-shared-bufferdata.js","esid":" sec-atomics.compareExchange\r","description":" >\rAtomics.compareExchange will operate on TA when TA.buffer is not a SharedArrayBuffer\r\n","includes":["testTypedArray.js\r"],"features":["ArrayBuffer","Atomics","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/compareExchange/non-shared-int-views-throws.js","esid":" sec-atomics.compareExchange\r","description":" >\rAtomics.compareExchange throws when operating on non-sharable integer TypedArrays\r\n","includes":["testTypedArray.js\r"],"features":["ArrayBuffer","Atomics","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/compareExchange/non-views.js","esid":" sec-atomics.compareexchange\r","description":" >\rTest Atomics.compareExchange on view values other than TypedArrays\r\n","includes":["testAtomics.js\r"],"features":["ArrayBuffer","Atomics","DataView","SharedArrayBuffer","Symbol","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/compareExchange/not-a-constructor.js","esid":" sec-ecmascript-standard-built-in-objects\r","description":" >\rAtomics.compareExchange does not implement [[Construct]], is not new-able\r\n","info":" |\rECMAScript Function Objects\r\n\r\nBuilt-in function objects that are not identified as constructors do not\r\nimplement the [[Construct]] internal method unless otherwise specified in\r\nthe description of a particular function.\r\n\r\nsec-evaluatenew\r\n\r\n...\r\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\r\n...\r\n","includes":["isConstructor.js\r"],"features":["Reflect.construct","Atomics","arrow-function","TypedArray","SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/Atomics/compareExchange/validate-arraytype-before-expectedValue-coercion.js","esid":" sec-atomics.compareExchange\r","description":" >\rTypedArray type is validated before `expectedValue` argument is coerced.\r\n","info":" |\r24.4.4 Atomics.compareExchange ( typedArray, index, expectedValue, replacementValue )\r\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray).\r\n...\r\n\r\n24.4.1.1 ValidateSharedIntegerTypedArray ( typedArray [ , onlyInt32 ] )\r\n...\r\n4. Let typeName be typedArray.[[TypedArrayName]].\r\n5. If onlyInt32 is true, then\r\na. If typeName is not \"Int32Array\", throw a TypeError exception.\r\n6. Else,\r\na. If typeName is not \"Int8Array\", \"Uint8Array\", \"Int16Array\", \"Uint16Array\", \"Int32Array\",\r\nor \"Uint32Array\", throw a TypeError exception.\r\n...\r\n","features":["Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/compareExchange/validate-arraytype-before-index-coercion.js","esid":" sec-atomics.compareExchange\r","description":" >\rTypedArray type is validated before `index` argument is coerced.\r\n","info":" |\r24.4.4 Atomics.compareExchange ( typedArray, index, expectedValue, replacementValue )\r\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray).\r\n...\r\n\r\n24.4.1.1 ValidateSharedIntegerTypedArray ( typedArray [ , onlyInt32 ] )\r\n...\r\n4. Let typeName be typedArray.[[TypedArrayName]].\r\n5. If onlyInt32 is true, then\r\na. If typeName is not \"Int32Array\", throw a TypeError exception.\r\n6. Else,\r\na. If typeName is not \"Int8Array\", \"Uint8Array\", \"Int16Array\", \"Uint16Array\", \"Int32Array\",\r\nor \"Uint32Array\", throw a TypeError exception.\r\n...\r\n","features":["Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/compareExchange/validate-arraytype-before-replacementValue-coercion.js","esid":" sec-atomics.compareExchange\r","description":" >\rTypedArray type is validated before `replacementValue` argument is coerced.\r\n","info":" |\r24.4.4 Atomics.compareExchange ( typedArray, index, expectedValue, replacementValue )\r\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray).\r\n...\r\n\r\n24.4.1.1 ValidateSharedIntegerTypedArray ( typedArray [ , onlyInt32 ] )\r\n...\r\n4. Let typeName be typedArray.[[TypedArrayName]].\r\n5. If onlyInt32 is true, then\r\na. If typeName is not \"Int32Array\", throw a TypeError exception.\r\n6. Else,\r\na. If typeName is not \"Int8Array\", \"Uint8Array\", \"Int16Array\", \"Uint16Array\", \"Int32Array\",\r\nor \"Uint32Array\", throw a TypeError exception.\r\n...\r\n","features":["Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/exchange/bad-range.js","esid":" sec-atomics.exchange\r","description":" >\rTest range checking of Atomics.exchange on arrays that allow atomic operations\r\n","includes":["testAtomics.js","testTypedArray.js\r"],"features":["ArrayBuffer","Atomics","DataView","SharedArrayBuffer","Symbol","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/exchange/descriptor.js","esid":" sec-atomics.exchange\r","description":" Testing descriptor property of Atomics.exchange\r","includes":["propertyHelper.js\r"],"features":["Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/exchange/expected-return-value.js","esid":" sec-atomics.exchange\r","description":" >\rAtomics.and returns the value that existed at the\r\nindex prior to the operation.\r\n","info":" |\rAtomics.exchange( typedArray, index, value )\r\n\r\n1. Return ? AtomicReadModifyWrite(typedArray, index, value, second).\r\n\r\nAtomicReadModifyWrite( typedArray, index, value, op )\r\n\r\n...\r\n9. Return GetModifySetValueInBuffer(buffer, indexedPosition,\r\nelementType, v, op).\r\n\r\n\r\nGetModifySetValueInBuffer( arrayBuffer,\r\nbyteIndex, type, value, op [ , isLittleEndian ] )\r\n\r\n...\r\n16. Return RawBytesToNumber(type, rawBytesRead, isLittleEndian).\r\n\r\n","features":["Atomics","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/exchange/good-views.js","esid":" sec-atomics.exchange\r","description":" Test Atomics.exchange on arrays that allow atomic operations.\r","includes":["testAtomics.js","testTypedArray.js\r"],"features":["ArrayBuffer","Atomics","DataView","SharedArrayBuffer","Symbol","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/exchange/length.js","esid":" sec-atomics.exchange\r","description":" >\rAtomics.exchange.length is 3.\r\n","info":" |\rAtomics.exchange ( ia, index, val )\r\n\r\n17 ECMAScript Standard Built-in Objects:\r\nEvery built-in Function object, including constructors, has a length\r\nproperty whose value is an integer. Unless otherwise specified, this\r\nvalue is equal to the largest number of named arguments shown in the\r\nsubclause headings for the function description, including optional\r\nparameters. However, rest parameters shown using the form “...name”\r\nare not included in the default argument count.\r\n\r\nUnless otherwise specified, the length property of a built-in Function\r\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\r\n[[Configurable]]: true }.\r\n","includes":["propertyHelper.js\r"],"features":["Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/exchange/name.js","esid":" sec-atomics.exchange\r","description":" >\rAtomics.exchange.name is \"exchange\".\r\n","includes":["propertyHelper.js\r"],"features":["Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/exchange/non-shared-bufferdata.js","esid":" sec-atomics.exchange\r","description":" >\rAtomics.exchange will operate on TA when TA.buffer is not a SharedArrayBuffer\r\n","includes":["testTypedArray.js\r"],"features":["ArrayBuffer","Atomics","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/exchange/non-shared-int-views-throws.js","esid":" sec-atomics.add\r","description":" >\rAtomics.add throws when operating on non-sharable integer TypedArrays\r\n","includes":["testTypedArray.js\r"],"features":["ArrayBuffer","Atomics","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/exchange/non-views.js","esid":" sec-atomics.exchange\r","description":" >\rTest Atomics.exchange on view values other than TypedArrays\r\n","includes":["testAtomics.js\r"],"features":["ArrayBuffer","Atomics","DataView","SharedArrayBuffer","Symbol","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/exchange/nonshared-int-views.js","esid":" sec-atomics.exchange\r","description":" >\rAtomics.exchange throws when operating on non-sharable integer TypedArrays\r\n","includes":["testTypedArray.js\r"],"features":["ArrayBuffer","Atomics","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/exchange/not-a-constructor.js","esid":" sec-ecmascript-standard-built-in-objects\r","description":" >\rAtomics.exchange does not implement [[Construct]], is not new-able\r\n","info":" |\rECMAScript Function Objects\r\n\r\nBuilt-in function objects that are not identified as constructors do not\r\nimplement the [[Construct]] internal method unless otherwise specified in\r\nthe description of a particular function.\r\n\r\nsec-evaluatenew\r\n\r\n...\r\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\r\n...\r\n","includes":["isConstructor.js\r"],"features":["Reflect.construct","Atomics","arrow-function","TypedArray","SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/Atomics/exchange/validate-arraytype-before-index-coercion.js","esid":" sec-atomics.exchange\r","description":" >\rTypedArray type is validated before `index` argument is coerced.\r\n","info":" |\r24.4.5 Atomics.exchange ( typedArray, index, value )\r\n1. Return ? AtomicReadModifyWrite(typedArray, index, value, second).\r\n\r\n24.4.1.11 AtomicReadModifyWrite ( typedArray, index, value, op )\r\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray).\r\n...\r\n\r\n24.4.1.1 ValidateSharedIntegerTypedArray ( typedArray [ , onlyInt32 ] )\r\n...\r\n4. Let typeName be typedArray.[[TypedArrayName]].\r\n5. If onlyInt32 is true, then\r\na. If typeName is not \"Int32Array\", throw a TypeError exception.\r\n6. Else,\r\na. If typeName is not \"Int8Array\", \"Uint8Array\", \"Int16Array\", \"Uint16Array\", \"Int32Array\",\r\nor \"Uint32Array\", throw a TypeError exception.\r\n...\r\n","features":["Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/exchange/validate-arraytype-before-value-coercion.js","esid":" sec-atomics.exchange\r","description":" >\rTypedArray type is validated before `value` argument is coerced.\r\n","info":" |\r24.4.5 Atomics.exchange ( typedArray, index, value )\r\n1. Return ? AtomicReadModifyWrite(typedArray, index, value, second).\r\n\r\n24.4.1.11 AtomicReadModifyWrite ( typedArray, index, value, op )\r\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray).\r\n...\r\n\r\n24.4.1.1 ValidateSharedIntegerTypedArray ( typedArray [ , onlyInt32 ] )\r\n...\r\n4. Let typeName be typedArray.[[TypedArrayName]].\r\n5. If onlyInt32 is true, then\r\na. If typeName is not \"Int32Array\", throw a TypeError exception.\r\n6. Else,\r\na. If typeName is not \"Int8Array\", \"Uint8Array\", \"Int16Array\", \"Uint16Array\", \"Int32Array\",\r\nor \"Uint32Array\", throw a TypeError exception.\r\n...\r\n","features":["Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/isLockFree/bigint/expected-return-value.js","esid":" sec-atomics.isLockFree\r","description":" >\rAtomics.isLockFree returns a boolean that indicates whether\r\noperations on datum of size will be performed without the agent\r\nacquiring a lock outside of size bytes.\r\n","info":" |\rAtomics.isLockFree( size )\r\n\r\n1. Let n be ? ToInteger(size).\r\n2. Let AR be the Agent Record of the surrounding agent.\r\n3. If n equals 1, return AR.[[IsLockFree1]].\r\n4. If n equals 2, return AR.[[IsLockFree2]].\r\n5. If n equals 4, return true.\r\n6. If n equals 8, return AR.[[IsLockFree8]].\r\n7. Return false.\r\n\r\n","features":["Atomics","BigInt","SharedArrayBuffer","TypedArray\r"],"includes":["testBigIntTypedArray.js\r"]},{"path":"./test262/test/built-ins/Atomics/isLockFree/corner-cases.js","esid":" sec-atomics.islockfree\r","description":" >\rTest isLockFree on various non-intuitive arguments\r\n","features":["Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/isLockFree/descriptor.js","esid":" sec-atomics.islockfree\r","description":" Testing descriptor property of Atomics.add\r","includes":["propertyHelper.js\r"],"features":["Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/isLockFree/expected-return-value.js","esid":" sec-atomics.islockfree\r","description":" >\rAtomics.isLockFree( size )\r\nLet n be ? ToInteger(size).\r\nLet AR be the Agent Record of the surrounding agent.\r\nIf n equals 1, return AR.[[IsLockFree1]].\r\nIf n equals 2, return AR.[[IsLockFree2]].\r\nIf n equals 4, return true.\r\nIf n equals 8, return AR.[[IsLockFree8]].\r\nReturn false.\r\n","features":["Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/isLockFree/length.js","esid":" sec-atomics.islockfree\r","description":" >\rAtomics.isLockFree.length is 1.\r\n","info":" |\rAtomics.isLockFree ( x )\r\n\r\n17 ECMAScript Standard Built-in Objects:\r\nEvery built-in Function object, including constructors, has a length\r\nproperty whose value is an integer. Unless otherwise specified, this\r\nvalue is equal to the largest number of named arguments shown in the\r\nsubclause headings for the function description, including optional\r\nparameters. However, rest parameters shown using the form “...name”\r\nare not included in the default argument count.\r\n\r\nUnless otherwise specified, the length property of a built-in Function\r\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\r\n[[Configurable]]: true }.\r\n","includes":["propertyHelper.js\r"],"features":["Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/isLockFree/name.js","esid":" sec-atomics.islockfree\r","description":" >\rAtomics.isLockFree.name is \"isLockFree\".\r\n","includes":["propertyHelper.js\r"],"features":["Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/isLockFree/not-a-constructor.js","esid":" sec-ecmascript-standard-built-in-objects\r","description":" >\rAtomics.isLockFree does not implement [[Construct]], is not new-able\r\n","info":" |\rECMAScript Function Objects\r\n\r\nBuilt-in function objects that are not identified as constructors do not\r\nimplement the [[Construct]] internal method unless otherwise specified in\r\nthe description of a particular function.\r\n\r\nsec-evaluatenew\r\n\r\n...\r\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\r\n...\r\n","includes":["isConstructor.js\r"],"features":["Reflect.construct","Atomics","arrow-function","TypedArray","SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/Atomics/load/bad-range.js","esid":" sec-atomics.load\r","description":" >\rTest range checking of Atomics.load on arrays that allow atomic operations\r\n","includes":["testAtomics.js","testTypedArray.js\r"],"features":["ArrayBuffer","Atomics","DataView","SharedArrayBuffer","Symbol","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/load/descriptor.js","esid":" sec-atomics.load\r","description":" Testing descriptor property of Atomics.load\r","includes":["propertyHelper.js\r"],"features":["Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/load/expected-return-value.js","esid":" sec-atomics.load\r","description":" >\rAtomics.load returns the value that existed at the\r\nindex prior to the operation.\r\n","info":" |\rAtomics.load( typedArray, index, value )\r\n\r\n1. Return ? AtomicLoad(typedArray, index).\r\n\r\nAtomicLoad( typedArray, index )\r\n\r\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray).\r\n2. Let i be ? ValidateAtomicAccess(typedArray, index).\r\n3. Let arrayTypeName be typedArray.[[TypedArrayName]].\r\n4. Let elementSize be the Number value of the Element Size value\r\nspecified in Table 56 for arrayTypeName.\r\n5. Let elementType be the String value of the Element Type value\r\nin Table 56 for arrayTypeName.\r\n6. Let offset be typedArray.[[ByteOffset]].\r\n7. Let indexedPosition be (i × elementSize) + offset.\r\n8. Return GetValueFromBuffer(buffer, indexedPosition, elementType,\r\ntrue, \"SeqCst\").\r\n\r\n","features":["Atomics","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/load/good-views.js","esid":" sec-atomics.load\r","description":" Test Atomics.load on arrays that allow atomic operations.\r","includes":["testAtomics.js","testTypedArray.js\r"],"features":["ArrayBuffer","Atomics","DataView","SharedArrayBuffer","Symbol","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/load/length.js","esid":" sec-atomics.load\r","description":" >\rAtomics.load.length is 2.\r\n","info":" |\rAtomics.load ( ia, index )\r\n\r\n17 ECMAScript Standard Built-in Objects:\r\nEvery built-in Function object, including constructors, has a length\r\nproperty whose value is an integer. Unless otherwise specified, this\r\nvalue is equal to the largest number of named arguments shown in the\r\nsubclause headings for the function description, including optional\r\nparameters. However, rest parameters shown using the form “...name”\r\nare not included in the default argument count.\r\n\r\nUnless otherwise specified, the length property of a built-in Function\r\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\r\n[[Configurable]]: true }.\r\n","includes":["propertyHelper.js\r"],"features":["Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/load/name.js","esid":" sec-atomics.load\r","description":" >\rAtomics.load.name is \"load\".\r\n","includes":["propertyHelper.js\r"],"features":["Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/load/non-shared-bufferdata.js","esid":" sec-atomics.load\r","description":" >\rAtomics.load will operate on TA when TA.buffer is not a SharedArrayBuffer\r\n","includes":["testTypedArray.js\r"],"features":["ArrayBuffer","Atomics","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/load/non-shared-int-views-throws.js","esid":" sec-atomics.load\r","description":" >\rAtomics.load throws when operating on non-sharable integer TypedArrays\r\n","includes":["testTypedArray.js\r"],"features":["ArrayBuffer","Atomics","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/load/non-views.js","esid":" sec-atomics.load\r","description":" >\rTest Atomics.load on view values other than TypedArrays\r\n","includes":["testAtomics.js\r"],"features":["ArrayBuffer","Atomics","DataView","SharedArrayBuffer","Symbol","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/load/not-a-constructor.js","esid":" sec-ecmascript-standard-built-in-objects\r","description":" >\rAtomics.load does not implement [[Construct]], is not new-able\r\n","info":" |\rECMAScript Function Objects\r\n\r\nBuilt-in function objects that are not identified as constructors do not\r\nimplement the [[Construct]] internal method unless otherwise specified in\r\nthe description of a particular function.\r\n\r\nsec-evaluatenew\r\n\r\n...\r\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\r\n...\r\n","includes":["isConstructor.js\r"],"features":["Reflect.construct","Atomics","arrow-function","TypedArray","SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/Atomics/load/validate-arraytype-before-index-coercion.js","esid":" sec-atomics.store\r","description":" >\rTypedArray type is validated before `index` argument is coerced.\r\n","info":" |\r24.4.7 Atomics.load ( typedArray, index )\r\n1. Return ? AtomicLoad(typedArray, index).\r\n\r\n24.4.1.12 AtomicLoad ( typedArray, index )\r\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray).\r\n...\r\n\r\n24.4.1.1 ValidateSharedIntegerTypedArray ( typedArray [ , onlyInt32 ] )\r\n...\r\n4. Let typeName be typedArray.[[TypedArrayName]].\r\n5. If onlyInt32 is true, then\r\na. If typeName is not \"Int32Array\", throw a TypeError exception.\r\n6. Else,\r\na. If typeName is not \"Int8Array\", \"Uint8Array\", \"Int16Array\", \"Uint16Array\", \"Int32Array\",\r\nor \"Uint32Array\", throw a TypeError exception.\r\n...\r\n","features":["Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/notify/descriptor.js","esid":" sec-atomics.notify\r","description":" Testing descriptor property of Atomics.notify\r","includes":["propertyHelper.js\r"],"features":["Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/notify/not-a-typedarray-throws.js","esid":" sec-atomics.notify\r","description":" >\rThrows a TypeError if the typedArray arg is not a TypedArray object\r\n","info":" |\rAtomics.notify( typedArray, index, count )\r\n\r\n1.Let buffer be ? ValidateSharedIntegerTypedArray(typedArray, true).\r\n...\r\n3.If typedArray does not have a [[TypedArrayName]] internal slot, throw a TypeError exception.\r\n\r\n","features":["Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/or/bad-range.js","esid":" sec-atomics.or\r","description":" >\rTest range checking of Atomics.or on arrays that allow atomic operations\r\n","includes":["testAtomics.js","testTypedArray.js\r"],"features":["ArrayBuffer","Atomics","DataView","SharedArrayBuffer","Symbol","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/or/descriptor.js","esid":" sec-atomics.or\r","description":" Testing descriptor property of Atomics.or\r","includes":["propertyHelper.js\r"],"features":["Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/or/expected-return-value.js","esid":" sec-atomics.or\r","description":" >\rAtomics.and returns the value that existed at the\r\nindex prior to the operation.\r\n","info":" |\rAtomics.or( typedArray, index, value )\r\n\r\n1. Return ? AtomicReadModifyWrite(typedArray, index, value, or).\r\n\r\nAtomicReadModifyWrite( typedArray, index, value, op )\r\n\r\n...\r\n9. Return GetModifySetValueInBuffer(buffer, indexedPosition,\r\nelementType, v, op).\r\n\r\n\r\nGetModifySetValueInBuffer( arrayBuffer,\r\nbyteIndex, type, value, op [ , isLittleEndian ] )\r\n\r\n...\r\n16. Return RawBytesToNumber(type, rawBytesRead, isLittleEndian).\r\n\r\n","features":["Atomics","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/or/good-views.js","esid":" sec-atomics.or\r","description":" Test Atomics.or on arrays that allow atomic operations\r","includes":["testAtomics.js","testTypedArray.js\r"],"features":["ArrayBuffer","Atomics","DataView","SharedArrayBuffer","Symbol","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/or/length.js","esid":" sec-atomics.or\r","description":" >\rAtomics.or.length is 3.\r\n","info":" |\rAtomics.or ( ia, index, val )\r\n\r\n17 ECMAScript Standard Built-in Objects:\r\nEvery built-in Function object, including constructors, has a length\r\nproperty whose value is an integer. Unless otherwise specified, this\r\nvalue is equal to the largest number of named arguments shown in the\r\nsubclause headings for the function description, including optional\r\nparameters. However, rest parameters shown using the form “...name”\r\nare not included in the default argument count.\r\n\r\nUnless otherwise specified, the length property of a built-in Function\r\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\r\n[[Configurable]]: true }.\r\n","includes":["propertyHelper.js\r"],"features":["Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/or/name.js","esid":" sec-atomics.or\r","description":" >\rAtomics.or.name is \"or\".\r\n","includes":["propertyHelper.js\r"],"features":["Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/or/non-shared-bufferdata.js","esid":" sec-atomics.or\r","description":" >\rAtomics.or will operate on TA when TA.buffer is not a SharedArrayBuffer\r\n","includes":["testTypedArray.js\r"],"features":["ArrayBuffer","Atomics","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/or/non-shared-int-views-throws.js","esid":" sec-atomics.and\r","description":" >\rAtomics.and throws when operating on non-sharable integer TypedArrays\r\n","includes":["testTypedArray.js\r"],"features":["ArrayBuffer","Atomics","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/or/non-views.js","esid":" sec-atomics.or\r","description":" >\rTest Atomics.or on view values other than TypedArrays\r\n","includes":["testAtomics.js\r"],"features":["ArrayBuffer","Atomics","DataView","SharedArrayBuffer","Symbol","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/or/not-a-constructor.js","esid":" sec-ecmascript-standard-built-in-objects\r","description":" >\rAtomics.or does not implement [[Construct]], is not new-able\r\n","info":" |\rECMAScript Function Objects\r\n\r\nBuilt-in function objects that are not identified as constructors do not\r\nimplement the [[Construct]] internal method unless otherwise specified in\r\nthe description of a particular function.\r\n\r\nsec-evaluatenew\r\n\r\n...\r\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\r\n...\r\n","includes":["isConstructor.js\r"],"features":["Reflect.construct","Atomics","arrow-function","TypedArray","SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/Atomics/or/validate-arraytype-before-index-coercion.js","esid":" sec-atomics.or\r","description":" >\rTypedArray type is validated before `index` argument is coerced.\r\n","info":" |\r24.4.8 Atomics.or ( typedArray, index, value )\r\n1. Return ? AtomicReadModifyWrite(typedArray, index, value, or).\r\n\r\n24.4.1.11 AtomicReadModifyWrite ( typedArray, index, value, op )\r\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray).\r\n...\r\n\r\n24.4.1.1 ValidateSharedIntegerTypedArray ( typedArray [ , onlyInt32 ] )\r\n...\r\n4. Let typeName be typedArray.[[TypedArrayName]].\r\n5. If onlyInt32 is true, then\r\na. If typeName is not \"Int32Array\", throw a TypeError exception.\r\n6. Else,\r\na. If typeName is not \"Int8Array\", \"Uint8Array\", \"Int16Array\", \"Uint16Array\", \"Int32Array\",\r\nor \"Uint32Array\", throw a TypeError exception.\r\n...\r\n","features":["Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/or/validate-arraytype-before-value-coercion.js","esid":" sec-atomics.or\r","description":" >\rTypedArray type is validated before `value` argument is coerced.\r\n","info":" |\r24.4.8 Atomics.or ( typedArray, index, value )\r\n1. Return ? AtomicReadModifyWrite(typedArray, index, value, or).\r\n\r\n24.4.1.11 AtomicReadModifyWrite ( typedArray, index, value, op )\r\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray).\r\n...\r\n\r\n24.4.1.1 ValidateSharedIntegerTypedArray ( typedArray [ , onlyInt32 ] )\r\n...\r\n4. Let typeName be typedArray.[[TypedArrayName]].\r\n5. If onlyInt32 is true, then\r\na. If typeName is not \"Int32Array\", throw a TypeError exception.\r\n6. Else,\r\na. If typeName is not \"Int8Array\", \"Uint8Array\", \"Int16Array\", \"Uint16Array\", \"Int32Array\",\r\nor \"Uint32Array\", throw a TypeError exception.\r\n...\r\n","features":["Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/prop-desc.js","esid":" sec-atomics-object\r","description":" >\rProperty descriptor of Atomics\r\n","info":" |\rThe Atomics Object\r\n\r\n...\r\nThe Atomics object does not have a [[Construct]] internal method;\r\nit is not possible to use the Atomics object as a constructor with the new operator.\r\n\r\nThe Atomics object does not have a [[Call]] internal method;\r\nit is not possible to invoke the Atomics object as a function.\r\n\r\n17 ECMAScript Standard Built-in Objects:\r\n\r\nEvery other data property described in clauses 18 through 26 and in Annex B.2\r\nhas the attributes { [[Writable]]: true, [[Enumerable]]: false,\r\n[[Configurable]]: true } unless otherwise specified.\r\n","includes":["propertyHelper.js\r"],"features":["Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/proto.js","esid":" sec-atomics-object\r","description":" >\rThe prototype of Atomics is Object.prototype\r\n","info":" |\rThe Atomics Object\r\n\r\nThe value of the [[Prototype]] internal slot of the Atomics object is the\r\nintrinsic object %ObjectPrototype%.\r\n","features":["Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/store/bad-range.js","esid":" sec-atomics.store\r","description":" >\rTest range checking of Atomics.store on arrays that allow atomic operations\r\n","includes":["testAtomics.js","testTypedArray.js\r"],"features":["ArrayBuffer","Atomics","DataView","SharedArrayBuffer","Symbol","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/store/descriptor.js","esid":" sec-atomics.store\r","description":" Testing descriptor property of Atomics.store\r","includes":["propertyHelper.js\r"],"features":["Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/store/expected-return-value-negative-zero.js","esid":" sec-atomics.store\r","description":" >\rAtomics.store calls ToInteger, which normalizes -0 to +0\r\n","features":["Atomics","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/store/expected-return-value.js","esid":" sec-atomics.store\r","description":" >\rAtomics.store returns the newly stored value\r\n","info":" |\rAtomics.store( typedArray, index, value )\r\n\r\n...\r\n3. Let v be ? ToInteger(value).\r\n...\r\n9. Perform SetValueInBuffer(buffer, indexedPosition,\r\nelementType, v, true, \"SeqCst\").\r\n10. Return v.\r\n\r\n","features":["Atomics","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/store/good-views.js","esid":" sec-atomics.store\r","description":" Test Atomics.store on arrays that allow atomic operations.\r","includes":["testAtomics.js","testTypedArray.js\r"],"features":["ArrayBuffer","Atomics","DataView","SharedArrayBuffer","Symbol","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/store/length.js","esid":" sec-atomics.store\r","description":" >\rAtomics.store.length is 3.\r\n","info":" |\rAtomics.store ( ia, index, val )\r\n\r\n17 ECMAScript Standard Built-in Objects:\r\nEvery built-in Function object, including constructors, has a length\r\nproperty whose value is an integer. Unless otherwise specified, this\r\nvalue is equal to the largest number of named arguments shown in the\r\nsubclause headings for the function description, including optional\r\nparameters. However, rest parameters shown using the form “...name”\r\nare not included in the default argument count.\r\n\r\nUnless otherwise specified, the length property of a built-in Function\r\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\r\n[[Configurable]]: true }.\r\n","includes":["propertyHelper.js\r"],"features":["Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/store/name.js","esid":" sec-atomics.store\r","description":" >\rAtomics.store.name is \"store\".\r\n","includes":["propertyHelper.js\r"],"features":["Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/store/non-shared-bufferdata.js","esid":" sec-atomics.store\r","description":" >\rAtomics.store will operate on TA when TA.buffer is not a SharedArrayBuffer\r\n","includes":["testTypedArray.js\r"],"features":["ArrayBuffer","Atomics","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/store/non-shared-int-views-throws.js","esid":" sec-atomics.store\r","description":" >\rAtomics.store throws when operating on non-sharable integer TypedArrays\r\n","includes":["testTypedArray.js\r"],"features":["ArrayBuffer","Atomics","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/store/non-views.js","esid":" sec-atomics.store\r","description":" >\rTest Atomics.store on view values other than TypedArrays\r\n","includes":["testAtomics.js\r"],"features":["ArrayBuffer","Atomics","DataView","SharedArrayBuffer","Symbol","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/store/not-a-constructor.js","esid":" sec-ecmascript-standard-built-in-objects\r","description":" >\rAtomics.store does not implement [[Construct]], is not new-able\r\n","info":" |\rECMAScript Function Objects\r\n\r\nBuilt-in function objects that are not identified as constructors do not\r\nimplement the [[Construct]] internal method unless otherwise specified in\r\nthe description of a particular function.\r\n\r\nsec-evaluatenew\r\n\r\n...\r\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\r\n...\r\n","includes":["isConstructor.js\r"],"features":["Reflect.construct","Atomics","arrow-function","TypedArray","SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/Atomics/store/validate-arraytype-before-index-coercion.js","esid":" sec-atomics.store\r","description":" >\rTypedArray type is validated before `index` argument is coerced.\r\n","info":" |\r24.4.9 Atomics.store ( typedArray, index, value )\r\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray).\r\n...\r\n\r\n24.4.1.1 ValidateSharedIntegerTypedArray ( typedArray [ , onlyInt32 ] )\r\n...\r\n4. Let typeName be typedArray.[[TypedArrayName]].\r\n5. If onlyInt32 is true, then\r\na. If typeName is not \"Int32Array\", throw a TypeError exception.\r\n6. Else,\r\na. If typeName is not \"Int8Array\", \"Uint8Array\", \"Int16Array\", \"Uint16Array\", \"Int32Array\",\r\nor \"Uint32Array\", throw a TypeError exception.\r\n...\r\n","features":["Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/store/validate-arraytype-before-value-coercion.js","esid":" sec-atomics.store\r","description":" >\rTypedArray type is validated before `value` argument is coerced.\r\n","info":" |\r24.4.9 Atomics.store ( typedArray, index, value )\r\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray).\r\n...\r\n\r\n24.4.1.1 ValidateSharedIntegerTypedArray ( typedArray [ , onlyInt32 ] )\r\n...\r\n4. Let typeName be typedArray.[[TypedArrayName]].\r\n5. If onlyInt32 is true, then\r\na. If typeName is not \"Int32Array\", throw a TypeError exception.\r\n6. Else,\r\na. If typeName is not \"Int8Array\", \"Uint8Array\", \"Int16Array\", \"Uint16Array\", \"Int32Array\",\r\nor \"Uint32Array\", throw a TypeError exception.\r\n...\r\n","features":["Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/sub/bad-range.js","esid":" sec-atomics.sub\r","description":" >\rTest range checking of Atomics.sub on arrays that allow atomic operations\r\n","includes":["testAtomics.js","testTypedArray.js\r"],"features":["ArrayBuffer","Atomics","DataView","SharedArrayBuffer","Symbol","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/sub/descriptor.js","esid":" sec-atomics.sub\r","description":" Testing descriptor property of Atomics.sub\r","includes":["propertyHelper.js\r"],"features":["Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/sub/expected-return-value.js","esid":" sec-atomics.sub\r","description":" >\rAtomics.and returns the value that existed at the\r\nindex prior to the operation.\r\n","info":" |\rAtomics.sub( typedArray, index, value )\r\n\r\n1. Return ? AtomicReadModifyWrite(typedArray, index, value, subtract).\r\n\r\nAtomicReadModifyWrite( typedArray, index, value, op )\r\n\r\n...\r\n9. Return GetModifySetValueInBuffer(buffer, indexedPosition,\r\nelementType, v, op).\r\n\r\n\r\nGetModifySetValueInBuffer( arrayBuffer,\r\nbyteIndex, type, value, op [ , isLittleEndian ] )\r\n\r\n...\r\n16. Return RawBytesToNumber(type, rawBytesRead, isLittleEndian).\r\n\r\n","features":["Atomics","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/sub/good-views.js","esid":" sec-atomics.sub\r","description":" Test Atomics.sub on arrays that allow atomic operations\r","includes":["testAtomics.js","testTypedArray.js\r"],"features":["ArrayBuffer","Atomics","DataView","SharedArrayBuffer","Symbol","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/sub/length.js","esid":" sec-atomics.sub\r","description":" >\rAtomics.sub.length is 3.\r\n","info":" |\rAtomics.sub ( ia, index, val )\r\n\r\n17 ECMAScript Standard Built-in Objects:\r\nEvery built-in Function object, including constructors, has a length\r\nproperty whose value is an integer. Unless otherwise specified, this\r\nvalue is equal to the largest number of named arguments shown in the\r\nsubclause headings for the function description, including optional\r\nparameters. However, rest parameters shown using the form “...name”\r\nare not included in the default argument count.\r\n\r\nUnless otherwise specified, the length property of a built-in Function\r\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\r\n[[Configurable]]: true }.\r\n","includes":["propertyHelper.js\r"],"features":["Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/sub/name.js","esid":" sec-atomics.sub\r","description":" >\rAtomics.sub.name is \"sub\".\r\n","includes":["propertyHelper.js\r"],"features":["Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/sub/non-shared-bufferdata.js","esid":" sec-atomics.sub\r","description":" >\rAtomics.sub will operate on TA when TA.buffer is not a SharedArrayBuffer\r\n","includes":["testTypedArray.js\r"],"features":["ArrayBuffer","Atomics","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/sub/non-shared-int-views-throws.js","esid":" sec-atomics.sub\r","description":" >\rAtomics.sub throws when operating on non-sharable integer TypedArrays\r\n","includes":["testTypedArray.js\r"],"features":["ArrayBuffer","Atomics","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/sub/non-views.js","esid":" sec-atomics.sub\r","description":" >\rTest Atomics.sub on view values other than TypedArrays\r\n","includes":["testAtomics.js\r"],"features":["ArrayBuffer","Atomics","DataView","SharedArrayBuffer","Symbol","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/sub/not-a-constructor.js","esid":" sec-ecmascript-standard-built-in-objects\r","description":" >\rAtomics.sub does not implement [[Construct]], is not new-able\r\n","info":" |\rECMAScript Function Objects\r\n\r\nBuilt-in function objects that are not identified as constructors do not\r\nimplement the [[Construct]] internal method unless otherwise specified in\r\nthe description of a particular function.\r\n\r\nsec-evaluatenew\r\n\r\n...\r\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\r\n...\r\n","includes":["isConstructor.js\r"],"features":["Reflect.construct","Atomics","arrow-function","TypedArray","SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/Atomics/sub/validate-arraytype-before-index-coercion.js","esid":" sec-atomics.sub\r","description":" >\rTypedArray type is validated before `index` argument is coerced.\r\n","info":" |\r24.4.10 Atomics.sub ( typedArray, index, value )\r\n1. Return ? AtomicReadModifyWrite(typedArray, index, value, sub).\r\n\r\n24.4.1.11 AtomicReadModifyWrite ( typedArray, index, value, op )\r\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray).\r\n...\r\n\r\n24.4.1.1 ValidateSharedIntegerTypedArray ( typedArray [ , onlyInt32 ] )\r\n...\r\n4. Let typeName be typedArray.[[TypedArrayName]].\r\n5. If onlyInt32 is true, then\r\na. If typeName is not \"Int32Array\", throw a TypeError exception.\r\n6. Else,\r\na. If typeName is not \"Int8Array\", \"Uint8Array\", \"Int16Array\", \"Uint16Array\", \"Int32Array\",\r\nor \"Uint32Array\", throw a TypeError exception.\r\n...\r\n","features":["Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/sub/validate-arraytype-before-value-coercion.js","esid":" sec-atomics.sub\r","description":" >\rTypedArray type is validated before `value` argument is coerced.\r\n","info":" |\r24.4.10 Atomics.sub ( typedArray, index, value )\r\n1. Return ? AtomicReadModifyWrite(typedArray, index, value, sub).\r\n\r\n24.4.1.11 AtomicReadModifyWrite ( typedArray, index, value, op )\r\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray).\r\n...\r\n\r\n24.4.1.1 ValidateSharedIntegerTypedArray ( typedArray [ , onlyInt32 ] )\r\n...\r\n4. Let typeName be typedArray.[[TypedArrayName]].\r\n5. If onlyInt32 is true, then\r\na. If typeName is not \"Int32Array\", throw a TypeError exception.\r\n6. Else,\r\na. If typeName is not \"Int8Array\", \"Uint8Array\", \"Int16Array\", \"Uint16Array\", \"Int32Array\",\r\nor \"Uint32Array\", throw a TypeError exception.\r\n...\r\n","features":["Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/Symbol.toStringTag.js","esid":" sec-atomics-@@tostringtag\r","description":" >\r`Symbol.toStringTag` property descriptor on Atomics\r\n","info":" |\rThe initial value of the @@toStringTag property is the String value\r\n\"Atomics\".\r\n\r\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]:\r\nfalse, [[Configurable]]: true }.\r\n","includes":["propertyHelper.js\r"],"features":["Atomics","Symbol","Symbol.toStringTag\r"]},{"path":"./test262/test/built-ins/Atomics/wait/bad-range.js","esid":" sec-atomics.wait\r","description":" >\rTest range checking of Atomics.wait on arrays that allow atomic operations\r\n","info":" |\rAtomics.wait( typedArray, index, value, timeout )\r\n\r\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray, true).\r\n...\r\n\r\n","includes":["testAtomics.js\r"],"features":["ArrayBuffer","Atomics","DataView","SharedArrayBuffer","Symbol","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/wait/cannot-suspend-throws.js","esid":" sec-atomics.wait\r","description":" >\rAtomics.wait throws if agent cannot be suspended, CanBlock is false\r\n","info":" |\rAssuming [[CanBlock]] is false for the main host.\r\n\r\nAtomics.wait( typedArray, index, value, timeout )\r\n\r\n... (after args validation)\r\n6. Let B be AgentCanSuspend().\r\n7. If B is false, throw a TypeError exception.\r\n...\r\n","features":["Atomics","SharedArrayBuffer","TypedArray\r"],"flags":["CanBlockIsFalse\r"]},{"path":"./test262/test/built-ins/Atomics/wait/descriptor.js","esid":" sec-atomics.wait\r","description":" Testing descriptor property of Atomics.wait\r","includes":["propertyHelper.js\r"],"features":["Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/wait/false-for-timeout.js","esid":" sec-atomics.wait\r","description":" >\rFalse timeout arg should result in an +0 timeout\r\n","info":" |\rAtomics.wait( typedArray, index, value, timeout )\r\n\r\n4. Let q be ? ToNumber(timeout).\r\n\r\nBoolean -> If argument is true, return 1. If argument is false, return +0.\r\n\r\n","features":["Atomics","SharedArrayBuffer","Symbol","Symbol.toPrimitive","TypedArray\r"],"flags":["CanBlockIsTrue\r"]},{"path":"./test262/test/built-ins/Atomics/wait/length.js","esid":" sec-atomics.wait\r","description":" >\rAtomics.wait.length is 4.\r\n","info":" |\rAtomics.wait ( ia, index, expect, timeout )\r\n\r\n17 ECMAScript Standard Built-in Objects:\r\nEvery built-in Function object, including constructors, has a length\r\nproperty whose value is an integer. Unless otherwise specified, this\r\nvalue is equal to the largest number of named arguments shown in the\r\nsubclause headings for the function description, including optional\r\nparameters. However, rest parameters shown using the form “...name”\r\nare not included in the default argument count.\r\n\r\nUnless otherwise specified, the length property of a built-in Function\r\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\r\n[[Configurable]]: true }.\r\n","includes":["propertyHelper.js\r"],"features":["Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/wait/name.js","esid":" sec-atomics.wait\r","description":" >\rAtomics.wait.name is \"wait\".\r\n","includes":["propertyHelper.js\r"],"features":["Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/wait/negative-index-throws.js","esid":" sec-atomics.wait\r","description":" >\rThrows a RangeError is index < 0\r\n","info":" |\rAtomics.wait( typedArray, index, value, timeout )\r\n\r\n2.Let i be ? ValidateAtomicAccess(typedArray, index).\r\n...\r\n2.Let accessIndex be ? ToIndex(requestIndex).\r\n...\r\n2.b If integerIndex < 0, throw a RangeError exception\r\n\r\n","features":["Atomics","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/wait/negative-timeout.js","esid":" sec-atomics.wait\r","description":" >\rTest that Atomics.wait times out with a negative timeout\r\n","features":["Atomics","SharedArrayBuffer","TypedArray\r"],"flags":["CanBlockIsTrue\r"]},{"path":"./test262/test/built-ins/Atomics/wait/non-int32-typedarray-throws.js","esid":" sec-atomics.wait\r","description":" >\rThrows a TypeError if typedArray arg is not an Int32Array\r\n","info":" |\rAtomics.wait( typedArray, index, value, timeout )\r\n\r\n1.Let buffer be ? ValidateSharedIntegerTypedArray(typedArray, true).\r\n...\r\n5.If onlyInt32 is true, then\r\nIf typeName is not \"Int32Array\", throw a TypeError exception.\r\n","features":["Atomics","Float32Array","Float64Array","Int8Array","TypedArray","Uint16Array","Uint8Array","Uint8ClampedArray\r"]},{"path":"./test262/test/built-ins/Atomics/wait/non-shared-bufferdata-throws.js","esid":" sec-atomics.wait\r","description":" >\rThrows a TypeError if typedArray.buffer is not a SharedArrayBuffer\r\n","info":" |\rAtomics.wait( typedArray, index, value, timeout )\r\n\r\n1.Let buffer be ? ValidateSharedIntegerTypedArray(typedArray, true).\r\n...\r\n9.If IsSharedArrayBuffer(buffer) is false, throw a TypeError exception.\r\n...\r\n4.If bufferData is a Data Block, return false.\r\n","features":["ArrayBuffer","Atomics","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/wait/not-a-typedarray-throws.js","esid":" sec-atomics.wait\r","description":" >\rThrows a TypeError if the typedArray arg is not a TypedArray object\r\n","info":" |\rAtomics.wait( typedArray, index, value, timeout )\r\n\r\n1.Let buffer be ? ValidateSharedIntegerTypedArray(typedArray, true).\r\n...\r\n3.If typedArray does not have a [[TypedArrayName]] internal slot, throw a TypeError exception.\r\n\r\n","features":["Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/wait/not-an-object-throws.js","esid":" sec-atomics.wait\r","description":" >\rThrows a TypeError if typedArray arg is not an Object\r\n","info":" |\rAtomics.wait( typedArray, index, value, timeout )\r\n\r\n1.Let buffer be ? ValidateSharedIntegerTypedArray(typedArray, true).\r\n...\r\n2. if Type(typedArray) is not Object, throw a TypeError exception\r\n","features":["Atomics","Symbol\r"]},{"path":"./test262/test/built-ins/Atomics/wait/null-bufferdata-throws.js","esid":" sec-atomics.wait\r","description":" >\rA null value for bufferData (detached) throws a TypeError\r\n","info":" |\rAtomics.wait( typedArray, index, value, timeout )\r\n\r\nLet buffer be ? ValidateIntegerTypedArray(typedArray, true).\r\n...\r\n\r\nLet buffer be ? ValidateTypedArray(typedArray).\r\n...\r\n\r\nIf IsDetachedBuffer(buffer) is true, throw a TypeError exception.\r\n...\r\n\r\nIf arrayBuffer.[[ArrayBufferData]] is null, return true.\r\n\r\n","includes":["detachArrayBuffer.js\r"],"features":["ArrayBuffer","Atomics","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/wait/null-for-timeout.js","esid":" sec-atomics.wait\r","description":" >\rThrows a TypeError if index arg can not be converted to an Integer\r\n","info":" |\rAtomics.wait( typedArray, index, value, timeout )\r\n\r\n4. Let q be ? ToNumber(timeout).\r\n\r\nNull -> Return +0.\r\n\r\n","features":["Atomics","SharedArrayBuffer","Symbol","Symbol.toPrimitive","TypedArray\r"],"flags":["CanBlockIsTrue\r"]},{"path":"./test262/test/built-ins/Atomics/wait/object-for-timeout.js","esid":" sec-atomics.wait\r","description":" >\rThrows a TypeError if index arg can not be converted to an Integer\r\n","info":" |\rAtomics.wait( typedArray, index, value, timeout )\r\n\r\n4. Let q be ? ToNumber(timeout).\r\n\r\nObject -> Apply the following steps:\r\n\r\nLet primValue be ? ToPrimitive(argument, hint Number).\r\nReturn ? ToNumber(primValue).\r\n\r\n","features":["Atomics","SharedArrayBuffer","Symbol","Symbol.toPrimitive","TypedArray\r"],"flags":["CanBlockIsTrue\r"]},{"path":"./test262/test/built-ins/Atomics/wait/out-of-range-index-throws.js","esid":" sec-atomics.wait\r","description":" >\rThrows a RangeError if value of index arg is out of range\r\n","info":" |\rAtomics.wait( typedArray, index, value, timeout )\r\n\r\n2.Let i be ? ValidateAtomicAccess(typedArray, index).\r\n...\r\n2.Let accessIndex be ? ToIndex(requestIndex).\r\n...\r\n5. If accessIndex ≥ length, throw a RangeError exception.\r\n","features":["Atomics","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/wait/poisoned-object-for-timeout-throws.js","esid":" sec-atomics.wait\r","description":" >\rThrows a TypeError if index arg can not be converted to an Integer\r\n","info":" |\rAtomics.wait( typedArray, index, value, timeout )\r\n\r\n4. Let q be ? ToNumber(timeout).\r\n\r\nObject -> Apply the following steps:\r\n\r\nLet primValue be ? ToPrimitive(argument, hint Number).\r\nReturn ? ToNumber(primValue).\r\n\r\n","features":["Atomics","SharedArrayBuffer","Symbol","Symbol.toPrimitive","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/wait/symbol-for-index-throws.js","esid":" sec-atomics.wait\r","description":" >\rThrows a TypeError if index arg can not be converted to an Integer\r\n","info":" |\rAtomics.wait( typedArray, index, value, timeout )\r\n\r\n2. Let i be ? ValidateAtomicAccess(typedArray, index).\r\n\r\nValidateAtomicAccess( typedArray, requestIndex )\r\n\r\n2. Let accessIndex be ? ToIndex(requestIndex).\r\n\r\nToIndex ( value )\r\n\r\n2. Else,\r\na. Let integerIndex be ? ToInteger(value).\r\n\r\nToInteger(value)\r\n\r\n1. Let number be ? ToNumber(argument).\r\n\r\nSymbol --> Throw a TypeError exception.\r\n\r\n","features":["Atomics","SharedArrayBuffer","Symbol","Symbol.toPrimitive","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/wait/symbol-for-timeout-throws.js","esid":" sec-atomics.wait\r","description":" >\rThrows a TypeError if index arg can not be converted to an Integer\r\n","info":" |\rAtomics.wait( typedArray, index, value, timeout )\r\n\r\n4. Let q be ? ToNumber(timeout).\r\n\r\nSymbol --> Throw a TypeError exception.\r\n\r\n","features":["Atomics","SharedArrayBuffer","Symbol","Symbol.toPrimitive","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/wait/symbol-for-value-throws.js","esid":" sec-atomics.wait\r","description":" >\rThrows a TypeError if value arg is a Symbol\r\n","info":" |\rAtomics.wait( typedArray, index, value, timeout )\r\n\r\n3. Let v be ? ToInt32(value).\r\n\r\nToInt32(value)\r\n\r\n1.Let number be ? ToNumber(argument).\r\n\r\nSymbol --> Throw a TypeError exception.\r\n\r\n","features":["Atomics","SharedArrayBuffer","Symbol","Symbol.toPrimitive","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/wait/true-for-timeout.js","esid":" sec-atomics.wait\r","description":" >\rThrows a TypeError if index arg can not be converted to an Integer\r\n","info":" |\rAtomics.wait( typedArray, index, value, timeout )\r\n\r\n4. Let q be ? ToNumber(timeout).\r\n\r\nBoolean -> If argument is true, return 1. If argument is false, return +0.\r\n\r\n","features":["Atomics","SharedArrayBuffer","Symbol","Symbol.toPrimitive","TypedArray\r"],"flags":["CanBlockIsTrue\r"]},{"path":"./test262/test/built-ins/Atomics/wait/validate-arraytype-before-index-coercion.js","esid":" sec-atomics.wait\r","description":" >\rTypedArray type is validated before `index` argument is coerced.\r\n","info":" |\r24.4.11 Atomics.wait ( typedArray, index, value, timeout )\r\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray, true).\r\n...\r\n\r\n24.4.1.1 ValidateSharedIntegerTypedArray ( typedArray [ , onlyInt32 ] )\r\n...\r\n4. Let typeName be typedArray.[[TypedArrayName]].\r\n5. If onlyInt32 is true, then\r\na. If typeName is not \"Int32Array\", throw a TypeError exception.\r\n6. Else,\r\na. If typeName is not \"Int8Array\", \"Uint8Array\", \"Int16Array\", \"Uint16Array\", \"Int32Array\",\r\nor \"Uint32Array\", throw a TypeError exception.\r\n...\r\n","features":["Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/wait/validate-arraytype-before-timeout-coercion.js","esid":" sec-atomics.notify\r","description":" >\rTypedArray type is validated before `timeout` argument is coerced.\r\n","info":" |\r24.4.11 Atomics.wait ( typedArray, index, value, timeout )\r\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray, true).\r\n...\r\n\r\n24.4.1.1 ValidateSharedIntegerTypedArray ( typedArray [ , onlyInt32 ] )\r\n...\r\n4. Let typeName be typedArray.[[TypedArrayName]].\r\n5. If onlyInt32 is true, then\r\na. If typeName is not \"Int32Array\", throw a TypeError exception.\r\n6. Else,\r\na. If typeName is not \"Int8Array\", \"Uint8Array\", \"Int16Array\", \"Uint16Array\", \"Int32Array\",\r\nor \"Uint32Array\", throw a TypeError exception.\r\n...\r\n","features":["Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/wait/validate-arraytype-before-value-coercion.js","esid":" sec-atomics.notify\r","description":" >\rTypedArray type is validated before `value` argument is coerced.\r\n","info":" |\r24.4.11 Atomics.wait ( typedArray, index, value, timeout )\r\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray, true).\r\n...\r\n\r\n24.4.1.1 ValidateSharedIntegerTypedArray ( typedArray [ , onlyInt32 ] )\r\n...\r\n4. Let typeName be typedArray.[[TypedArrayName]].\r\n5. If onlyInt32 is true, then\r\na. If typeName is not \"Int32Array\", throw a TypeError exception.\r\n6. Else,\r\na. If typeName is not \"Int8Array\", \"Uint8Array\", \"Int16Array\", \"Uint16Array\", \"Int32Array\",\r\nor \"Uint32Array\", throw a TypeError exception.\r\n...\r\n","features":["Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/wait/value-not-equal.js","esid":" sec-atomics.wait\r","description":" >\rReturns \"not-equal\" when value arg does not match an index in the typedArray\r\n","info":" |\rAtomics.wait( typedArray, index, value, timeout )\r\n\r\n3.Let v be ? ToInt32(value).\r\n...\r\n14.If v is not equal to w, then\r\na.Perform LeaveCriticalSection(WL).\r\nb. Return the String \"not-equal\".\r\n\r\n","includes":["atomicsHelper.js\r"],"features":["Atomics","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/bad-range.js","esid":" sec-atomics.waitasync\r","description":" >\rTest range checking of Atomics.waitAsync on arrays that allow atomic operations\r\n","info":" |\rAtomics.waitAsync( typedArray, index, value, timeout )\r\n\r\n1. Return DoWait(async, typedArray, index, value, timeout).\r\n\r\nDoWait ( mode, typedArray, index, value, timeout )\r\n\r\n...\r\n2. Let i be ? ValidateAtomicAccess(typedArray, index).\r\n...\r\n\r\n","includes":["testAtomics.js\r"],"features":["Atomics.waitAsync","Atomics","SharedArrayBuffer","ArrayBuffer","DataView","Symbol","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/bigint/good-views.js","esid":" sec-atomics.waitasync\r","description":" >\rTest Atomics.waitAsync on arrays that allow atomic operations\r\n","flags":["async\r"],"includes":["atomicsHelper.js\r"],"features":["Atomics.waitAsync","Atomics","BigInt\r"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/bigint/not-an-object-throws.js","esid":" sec-atomics.waitasync\r","description":" >\rThrows a TypeError if typedArray arg is not an Object\r\n","info":" |\rAtomics.waitAsync( typedArray, index, value, timeout )\r\n\r\n1. Return DoWait(async, typedArray, index, value, timeout).\r\n\r\nDoWait ( mode, typedArray, index, value, timeout )\r\n\r\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray, true).\r\n\r\nValidateSharedIntegerTypedArray ( typedArray [ , waitable ] )\r\n\r\n2. Perform ? RequireInternalSlot(typedArray, [[TypedArrayName]]).\r\n\r\nRequireInternalSlot ( O, internalSlot )\r\n\r\n1. If Type(O) is not Object, throw a TypeError exception.\r\n2. If O does not have an internalSlot internal slot, throw a TypeError exception.\r\n\r\n","features":["Atomics.waitAsync","Symbol","arrow-function","Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/descriptor.js","esid":" sec-atomics.waitasync\r","description":" Atomics.waitAsync property descriptor\r","info":" |\rES Section 17\r\n\r\nEvery other data property described in clauses 18 through 26 and in Annex\r\nB.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false,\r\n[[Configurable]]: true } unless otherwise specified.\r\n","includes":["propertyHelper.js\r"],"features":["Atomics.waitAsync","Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/false-for-timeout.js","esid":" sec-atomics.waitasync\r","description":" >\rFalse timeout arg should result in an +0 timeout\r\n","info":" |\rAtomics.waitAsync( typedArray, index, value, timeout )\r\n\r\n1. Return DoWait(async, typedArray, index, value, timeout).\r\n\r\nDoWait ( mode, typedArray, index, value, timeout )\r\n\r\n6. Let q be ? ToNumber(timeout).\r\n\r\n","flags":["async\r"],"features":["Atomics.waitAsync","SharedArrayBuffer","TypedArray","Atomics","computed-property-names","Symbol","Symbol.toPrimitive","arrow-function\r"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/good-views.js","esid":" sec-atomics.waitasync\r","description":" >\rTest Atomics.waitAsync on arrays that allow atomic operations\r\n","flags":["async\r"],"includes":["atomicsHelper.js\r"],"features":["Atomics.waitAsync","Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/is-function.js","esid":" sec-atomics.waitasync\r","description":" Atomics.waitAsync is callable\r","features":["Atomics.waitAsync","Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/length.js","esid":" sec-atomics.waitasync\r","description":" >\rAtomics.waitAsync.length is 4.\r\n","info":" |\rAtomics.waitAsync ( ia, index, expect, timeout )\r\n\r\n17 ECMAScript Standard Built-in Objects:\r\nEvery built-in Function object, including constructors, has a length\r\nproperty whose value is an integer. Unless otherwise specified, this\r\nvalue is equal to the largest number of named arguments shown in the\r\nsubclause headings for the function description, including optional\r\nparameters. However, rest parameters shown using the form “...name”\r\nare not included in the default argument count.\r\n\r\nUnless otherwise specified, the length property of a built-in Function\r\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\r\n[[Configurable]]: true }.\r\n","includes":["propertyHelper.js\r"],"features":["Atomics.waitAsync","Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/name.js","esid":" sec-atomics.waitasync\r","description":" >\rAtomics.waitAsync.name is \"waitAsync\".\r\n","includes":["propertyHelper.js\r"],"features":["Atomics.waitAsync","Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/negative-index-throws.js","esid":" sec-atomics.waitasync\r","description":" >\rThrows a RangeError is index < 0\r\n","info":" |\rAtomics.waitAsync( typedArray, index, value, timeout )\r\n\r\n1. Return DoWait(async, typedArray, index, value, timeout).\r\n\r\nDoWait ( mode, typedArray, index, value, timeout )\r\n\r\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray, true).\r\n2. Let i be ? ValidateAtomicAccess(typedArray, index).\r\n\r\n","features":["Atomics.waitAsync","SharedArrayBuffer","TypedArray","Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/negative-timeout.js","esid":" sec-atomics.waitasync\r","description":" >\rTest that Atomics.waitAsync times out with a negative timeout\r\n","info":" |\rAtomics.waitAsync( typedArray, index, value, timeout )\r\n\r\n1. Return DoWait(async, typedArray, index, value, timeout).\r\n\r\nDoWait ( mode, typedArray, index, value, timeout )\r\n\r\n6. Let q be ? ToNumber(timeout).\r\n\r\n","flags":["async\r"],"features":["Atomics.waitAsync","SharedArrayBuffer","TypedArray","Atomics","destructuring-binding","arrow-function\r"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/non-int32-typedarray-throws.js","esid":" sec-atomics.waitasync\r","description":" >\rThrows a TypeError if typedArray arg is not an Int32Array\r\n","info":" |\rAtomics.waitAsync( typedArray, index, value, timeout )\r\n\r\n1. Return DoWait(async, typedArray, index, value, timeout).\r\n\r\nDoWait ( mode, typedArray, index, value, timeout )\r\n\r\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray, true).\r\n\r\nValidateSharedIntegerTypedArray ( typedArray [ , waitable ] )\r\n\r\n5. If waitable is true, then\r\na. If typeName is not \"Int32Array\" or \"BigInt64Array\", throw a TypeError exception.\r\n\r\n","features":["Atomics.waitAsync","Float32Array","Float64Array","Int8Array","TypedArray","Uint16Array","Uint8Array","Uint8ClampedArray","arrow-function","SharedArrayBuffer","Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/non-shared-bufferdata-throws.js","esid":" sec-atomics.waitasync\r","description":" >\rThrows a TypeError if typedArray.buffer is not a SharedArrayBuffer\r\n","info":" |\rAtomics.waitAsync( typedArray, index, value, timeout )\r\n\r\n1. Return DoWait(async, typedArray, index, value, timeout).\r\n\r\nDoWait ( mode, typedArray, index, value, timeout )\r\n\r\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray, true).\r\n\r\nValidateSharedIntegerTypedArray ( typedArray [ , waitable ] )\r\n\r\n5. If waitable is true, then\r\na. If typeName is not \"Int32Array\" or \"BigInt64Array\", throw a TypeError exception.\r\n\r\n","features":["Atomics.waitAsync","ArrayBuffer","Atomics","TypedArray","arrow-function\r"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/not-a-typedarray-throws.js","esid":" sec-atomics.waitasync\r","description":" >\rThrows a TypeError if the typedArray arg is not a TypedArray object\r\n","info":" |\rAtomics.waitAsync( typedArray, index, value, timeout )\r\n\r\n1. Return DoWait(async, typedArray, index, value, timeout).\r\n\r\nDoWait ( mode, typedArray, index, value, timeout )\r\n\r\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray, true).\r\n\r\nValidateSharedIntegerTypedArray ( typedArray [ , waitable ] )\r\n\r\n2. Perform ? RequireInternalSlot(typedArray, [[TypedArrayName]]).\r\n\r\nRequireInternalSlot ( O, internalSlot )\r\n\r\n1. If Type(O) is not Object, throw a TypeError exception.\r\n2. If O does not have an internalSlot internal slot, throw a TypeError exception.\r\n\r\n","features":["Atomics.waitAsync","arrow-function","Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/not-an-object-throws.js","esid":" sec-atomics.waitasync\r","description":" >\rThrows a TypeError if typedArray arg is not an Object\r\n","info":" |\rAtomics.waitAsync( typedArray, index, value, timeout )\r\n\r\n1. Return DoWait(async, typedArray, index, value, timeout).\r\n\r\nDoWait ( mode, typedArray, index, value, timeout )\r\n\r\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray, true).\r\n\r\nValidateSharedIntegerTypedArray ( typedArray [ , waitable ] )\r\n\r\n2. Perform ? RequireInternalSlot(typedArray, [[TypedArrayName]]).\r\n\r\nRequireInternalSlot ( O, internalSlot )\r\n\r\n1. If Type(O) is not Object, throw a TypeError exception.\r\n2. If O does not have an internalSlot internal slot, throw a TypeError exception.\r\n\r\n","features":["Atomics.waitAsync","Symbol","arrow-function","Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/null-bufferdata-throws.js","esid":" sec-atomics.waitasync\r","description":" >\rA null value for bufferData throws a TypeError\r\n","info":" |\rAtomics.waitAsync( typedArray, index, value, timeout )\r\n\r\n1. Return DoWait(async, typedArray, index, value, timeout).\r\n\r\nDoWait ( mode, typedArray, index, value, timeout )\r\n\r\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray, true).\r\n\r\nValidateSharedIntegerTypedArray ( typedArray [ , waitable ] )\r\n\r\n2. Perform ? RequireInternalSlot(typedArray, [[TypedArrayName]]).\r\n\r\nRequireInternalSlot ( O, internalSlot )\r\n\r\n1. If Type(O) is not Object, throw a TypeError exception.\r\n2. If O does not have an internalSlot internal slot, throw a TypeError exception.\r\n\r\n","includes":["detachArrayBuffer.js\r"],"features":["Atomics.waitAsync","ArrayBuffer","Atomics","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/null-for-timeout.js","esid":" sec-atomics.waitasync\r","description":" >\rnull timeout arg should result in an +0 timeout\r\n","info":" |\rAtomics.waitAsync( typedArray, index, value, timeout )\r\n\r\n1. Return DoWait(async, typedArray, index, value, timeout).\r\n\r\nDoWait ( mode, typedArray, index, value, timeout )\r\n\r\n6. Let q be ? ToNumber(timeout).\r\n\r\nNull -> Return +0.\r\n\r\n","features":["Atomics.waitAsync","SharedArrayBuffer","Symbol","Symbol.toPrimitive","TypedArray","computed-property-names","Atomics","arrow-function\r"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/object-for-timeout.js","esid":" sec-atomics.waitasync\r","description":" >\rObject valueOf, toString, toPrimitive Zero timeout arg should result in an +0 timeout\r\n","info":" |\rAtomics.waitAsync( typedArray, index, value, timeout )\r\n\r\n1. Return DoWait(async, typedArray, index, value, timeout).\r\n\r\nDoWait ( mode, typedArray, index, value, timeout )\r\n\r\n6. Let q be ? ToNumber(timeout).\r\n\r\nObject -> Apply the following steps:\r\n\r\nLet primValue be ? ToPrimitive(argument, hint Number).\r\nReturn ? ToNumber(primValue).\r\n\r\n","features":["Atomics.waitAsync","SharedArrayBuffer","Symbol","Symbol.toPrimitive","TypedArray","computed-property-names","Atomics","arrow-function\r"],"flags":["async\r"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/out-of-range-index-throws.js","esid":" sec-atomics.waitasync\r","description":" >\rThrows a RangeError if value of index arg is out of range\r\n","info":" |\rAtomics.waitAsync( typedArray, index, value, timeout )\r\n\r\n1. Return DoWait(async, typedArray, index, value, timeout).\r\n\r\nDoWait ( mode, typedArray, index, value, timeout )\r\n\r\n2. Let i be ? ValidateAtomicAccess(typedArray, index).\r\n\r\n...\r\n2.Let accessIndex be ? ToIndex(requestIndex).\r\n...\r\n5. If accessIndex ≥ length, throw a RangeError exception.\r\n","features":["Atomics.waitAsync","SharedArrayBuffer","TypedArray","Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/poisoned-object-for-timeout-throws.js","esid":" sec-atomics.waitasync\r","description":" >\rThrows a TypeError if index arg can not be converted to an Integer\r\n","info":" |\rAtomics.waitAsync( typedArray, index, value, timeout )\r\n\r\n1. Return DoWait(async, typedArray, index, value, timeout).\r\n\r\nDoWait ( mode, typedArray, index, value, timeout )\r\n\r\n6. Let q be ? ToNumber(timeout).\r\n\r\nLet primValue be ? ToPrimitive(argument, hint Number).\r\nReturn ? ToNumber(primValue).\r\n\r\n","features":["Atomics.waitAsync","SharedArrayBuffer","Symbol","Symbol.toPrimitive","TypedArray","computed-property-names","Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/returns-result-object-value-is-promise-resolves-to-timed-out.js","esid":" sec-atomics.waitasync\r","description":" >\rAtomics.waitAsync returns a result object containing a promise that resolves to \"timed-out\" and async is true.\r\n","info":" |\rAtomics.waitAsync( typedArray, index, value, timeout )\r\n\r\n1. Return DoWait(async, typedArray, index, value, timeout).\r\n\r\nDoWait ( mode, typedArray, index, value, timeout )\r\n\r\n...\r\n13. Let promiseCapability be undefined.\r\n14. If mode is async, then\r\na. Set promiseCapability to ! NewPromiseCapability(%Promise%).\r\n\r\n...\r\nPerform ! CreateDataPropertyOrThrow(_resultObject_, *\"async\"*, *true*).\r\nPerform ! CreateDataPropertyOrThrow(_resultObject_, *\"value\"*, _promiseCapability_.[[Promise]]).\r\nReturn _resultObject_.\r\n\r\n","flags":["async\r"],"includes":["atomicsHelper.js\r"],"features":["Atomics.waitAsync","TypedArray","SharedArrayBuffer","destructuring-binding","Atomics","arrow-function\r"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/returns-result-object-value-is-string-not-equal.js","esid":" sec-atomics.waitasync\r","description":" >\rAtomics.waitAsync returns a result object containing a string \"not-equal\" and async is false.\r\n","info":" |\rAtomics.waitAsync( typedArray, index, value, timeout )\r\n\r\n1. Return DoWait(async, typedArray, index, value, timeout).\r\n\r\nDoWait ( mode, typedArray, index, value, timeout )\r\n\r\n...\r\n13. Let promiseCapability be undefined.\r\n14. If mode is async, then\r\na. Set promiseCapability to ! NewPromiseCapability(%Promise%).\r\n\r\n...\r\nPerform ! CreateDataPropertyOrThrow(_resultObject_, *\"async\"*, *true*).\r\nPerform ! CreateDataPropertyOrThrow(_resultObject_, *\"value\"*, _promiseCapability_.[[Promise]]).\r\nReturn _resultObject_.\r\n\r\n","features":["Atomics.waitAsync","TypedArray","SharedArrayBuffer","destructuring-binding","Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/returns-result-object-value-is-string-timed-out.js","esid":" sec-atomics.waitasync\r","description":" >\rAtomics.waitAsync returns a result object containing a string \"not-equal\" and async is false.\r\n","info":" |\rAtomics.waitAsync( typedArray, index, value, timeout )\r\n\r\n1. Return DoWait(async, typedArray, index, value, timeout).\r\n\r\nDoWait ( mode, typedArray, index, value, timeout )\r\n\r\n...\r\n13. Let promiseCapability be undefined.\r\n14. If mode is async, then\r\na. Set promiseCapability to ! NewPromiseCapability(%Promise%).\r\n\r\n...\r\nPerform ! CreateDataPropertyOrThrow(_resultObject_, *\"async\"*, *true*).\r\nPerform ! CreateDataPropertyOrThrow(_resultObject_, *\"value\"*, _promiseCapability_.[[Promise]]).\r\nReturn _resultObject_.\r\n\r\n","features":["Atomics.waitAsync","TypedArray","SharedArrayBuffer","destructuring-binding","Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/symbol-for-index-throws.js","esid":" sec-atomics.waitasync\r","description":" >\rThrows a TypeError if index arg can not be converted to an Integer\r\n","info":" |\rAtomics.waitAsync( typedArray, index, value, timeout )\r\n\r\n1. Return DoWait(async, typedArray, index, value, timeout).\r\n\r\nDoWait ( mode, typedArray, index, value, timeout )\r\n\r\n2. Let i be ? ValidateAtomicAccess(typedArray, index).\r\n\r\nValidateAtomicAccess( typedArray, requestIndex )\r\n\r\n2. Let accessIndex be ? ToIndex(requestIndex).\r\n\r\nToIndex ( value )\r\n\r\n2. Else,\r\na. Let integerIndex be ? ToInteger(value).\r\n\r\nToInteger(value)\r\n\r\n1. Let number be ? ToNumber(argument).\r\n\r\nSymbol --> Throw a TypeError exception.\r\n\r\n","features":["Atomics.waitAsync","SharedArrayBuffer","Symbol","Symbol.toPrimitive","TypedArray","computed-property-names","Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/symbol-for-timeout-throws.js","esid":" sec-atomics.waitasync\r","description":" >\rThrows a TypeError if index arg can not be converted to an Integer\r\n","info":" |\rAtomics.waitAsync( typedArray, index, value, timeout )\r\n\r\n1. Return DoWait(async, typedArray, index, value, timeout).\r\n\r\nDoWait ( mode, typedArray, index, value, timeout )\r\n\r\n6. Let q be ? ToNumber(timeout).\r\n\r\nSymbol --> Throw a TypeError exception.\r\n\r\n","features":["Atomics.waitAsync","SharedArrayBuffer","Symbol","Symbol.toPrimitive","TypedArray","computed-property-names","Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/symbol-for-value-throws.js","esid":" sec-atomics.waitasync\r","description":" >\rThrows a TypeError if value arg is a Symbol\r\n","info":" |\rAtomics.waitAsync( typedArray, index, value, timeout )\r\n\r\n1. Return DoWait(async, typedArray, index, value, timeout).\r\n\r\nDoWait ( mode, typedArray, index, value, timeout )\r\n\r\n5. Otherwise, let v be ? ToInt32(value).\r\n\r\nToInt32(value)\r\n\r\n1.Let number be ? ToNumber(argument).\r\n\r\nSymbol --> Throw a TypeError exception.\r\n\r\n","features":["Atomics.waitAsync","SharedArrayBuffer","Symbol","Symbol.toPrimitive","TypedArray","computed-property-names","Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/true-for-timeout.js","esid":" sec-atomics.waitasync\r","description":" >\rThrows a TypeError if index arg can not be converted to an Integer\r\n","info":" |\rAtomics.waitAsync( typedArray, index, value, timeout )\r\n\r\n1. Return DoWait(async, typedArray, index, value, timeout).\r\n\r\nDoWait ( mode, typedArray, index, value, timeout )\r\n\r\n6. Let q be ? ToNumber(timeout).\r\n\r\nBoolean -> If argument is true, return 1. If argument is false, return +0.\r\n\r\n","flags":["async\r"],"includes":["atomicsHelper.js\r"],"features":["Atomics.waitAsync","SharedArrayBuffer","TypedArray","Atomics","computed-property-names","Symbol","Symbol.toPrimitive","arrow-function\r"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/validate-arraytype-before-index-coercion.js","esid":" sec-atomics.waitasync\r","description":" >\rTypedArray type is validated before `index` argument is coerced.\r\n","info":" |\r1. Return DoWait(async, typedArray, index, value, timeout).\r\n\r\nDoWait ( mode, typedArray, index, value, timeout )\r\n\r\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray, true).\r\n\r\nValidateSharedIntegerTypedArray ( typedArray [ , waitable ] )\r\n\r\n1. If waitable is not present, set waitable to false.\r\n2. Perform ? RequireInternalSlot(typedArray, [[TypedArrayName]]).\r\n3. Let typeName be typedArray.[[TypedArrayName]].\r\n4. Let type be the Element Type value in Table 61 for typeName.\r\n5. If waitable is true, then\r\na. If typeName is not \"Int32Array\" or \"BigInt64Array\", throw a TypeError exception.\r\n6. Else,\r\na. If ! IsUnclampedIntegerElementType(type) is false and ! IsBigIntElementType(type) is false, throw a TypeError exception.\r\n7. Assert: typedArray has a [[ViewedArrayBuffer]] internal slot.\r\n8. Let buffer be typedArray.[[ViewedArrayBuffer]].\r\n9. If IsSharedArrayBuffer(buffer) is false, throw a TypeError exception.\r\n10. Return buffer.\r\n\r\n","features":["Atomics.waitAsync","Atomics","TypedArray","SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/validate-arraytype-before-timeout-coercion.js","esid":" sec-atomics.waitasync\r","description":" >\rTypedArray type is validated before `timeout` argument is coerced.\r\n","info":" |\r1. Return DoWait(async, typedArray, index, value, timeout).\r\n\r\nDoWait ( mode, typedArray, index, value, timeout )\r\n\r\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray, true).\r\n\r\nValidateSharedIntegerTypedArray ( typedArray [ , waitable ] )\r\n\r\n1. If waitable is not present, set waitable to false.\r\n2. Perform ? RequireInternalSlot(typedArray, [[TypedArrayName]]).\r\n3. Let typeName be typedArray.[[TypedArrayName]].\r\n4. Let type be the Element Type value in Table 61 for typeName.\r\n5. If waitable is true, then\r\na. If typeName is not \"Int32Array\" or \"BigInt64Array\", throw a TypeError exception.\r\n6. Else,\r\na. If ! IsUnclampedIntegerElementType(type) is false and ! IsBigIntElementType(type) is false, throw a TypeError exception.\r\n7. Assert: typedArray has a [[ViewedArrayBuffer]] internal slot.\r\n8. Let buffer be typedArray.[[ViewedArrayBuffer]].\r\n9. If IsSharedArrayBuffer(buffer) is false, throw a TypeError exception.\r\n10. Return buffer.\r\n\r\n","features":["Atomics.waitAsync","Atomics","TypedArray","SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/validate-arraytype-before-value-coercion.js","esid":" sec-atomics.notify\r","description":" >\rTypedArray type is validated before `value` argument is coerced.\r\n","info":" |\r1. Return DoWait(async, typedArray, index, value, timeout).\r\n\r\nDoWait ( mode, typedArray, index, value, timeout )\r\n\r\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray, true).\r\n\r\nValidateSharedIntegerTypedArray ( typedArray [ , waitable ] )\r\n\r\n1. If waitable is not present, set waitable to false.\r\n2. Perform ? RequireInternalSlot(typedArray, [[TypedArrayName]]).\r\n3. Let typeName be typedArray.[[TypedArrayName]].\r\n4. Let type be the Element Type value in Table 61 for typeName.\r\n5. If waitable is true, then\r\na. If typeName is not \"Int32Array\" or \"BigInt64Array\", throw a TypeError exception.\r\n6. Else,\r\na. If ! IsUnclampedIntegerElementType(type) is false and ! IsBigIntElementType(type) is false, throw a TypeError exception.\r\n7. Assert: typedArray has a [[ViewedArrayBuffer]] internal slot.\r\n8. Let buffer be typedArray.[[ViewedArrayBuffer]].\r\n9. If IsSharedArrayBuffer(buffer) is false, throw a TypeError exception.\r\n10. Return buffer.\r\n\r\n","features":["Atomics.waitAsync","Atomics","TypedArray","SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/Atomics/waitAsync/value-not-equal.js","esid":" sec-atomics.waitasync\r","description":" >\rReturns \"not-equal\" when value arg does not match an index in the typedArray\r\n","info":" |\rAtomics.waitAsync( typedArray, index, value, timeout )\r\n\r\n1. Return DoWait(async, typedArray, index, value, timeout).\r\n\r\nDoWait ( mode, typedArray, index, value, timeout )\r\n\r\n16. Let w be ! AtomicLoad(typedArray, i).\r\n17. If v is not equal to w, then\r\na. Perform LeaveCriticalSection(WL).\r\nb. If mode is sync, then\r\ni. Return the String \"not-equal\".\r\nc. Perform ! Call(capability.[[Resolve]], undefined, « \"not-equal\" »).\r\nd. Return promiseCapability.[[Promise]].\r\n\r\n","flags":["async\r"],"features":["Atomics.waitAsync","SharedArrayBuffer","TypedArray","computed-property-names","Symbol","Symbol.toPrimitive","Atomics","arrow-function\r"]},{"path":"./test262/test/built-ins/Atomics/xor/bad-range.js","esid":" sec-atomics.xor\r","description":" >\rTest range checking of Atomics.xor on arrays that allow atomic operations\r\n","includes":["testAtomics.js","testTypedArray.js\r"],"features":["ArrayBuffer","Atomics","DataView","SharedArrayBuffer","Symbol","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/xor/descriptor.js","esid":" sec-atomics.xor\r","description":" Testing descriptor property of Atomics.xor\r","includes":["propertyHelper.js\r"],"features":["Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/xor/expected-return-value.js","esid":" sec-atomics.xor\r","description":" >\rAtomics.xor returns the value that existed at the\r\nindex prior to the operation.\r\n","info":" |\rAtomics.xor( typedArray, index, value )\r\n\r\n1. Return ? AtomicReadModifyWrite(typedArray, index, value, xor).\r\n\r\nAtomicReadModifyWrite( typedArray, index, value, op )\r\n\r\n...\r\n9. Return GetModifySetValueInBuffer(buffer, indexedPosition,\r\nelementType, v, op).\r\n\r\n\r\nGetModifySetValueInBuffer( arrayBuffer,\r\nbyteIndex, type, value, op [ , isLittleEndian ] )\r\n\r\n...\r\n16. Return RawBytesToNumber(type, rawBytesRead, isLittleEndian).\r\n\r\n","features":["Atomics","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/xor/good-views.js","esid":" sec-atomics.xor\r","description":" Test Atomics.xor on arrays that allow atomic operations\r","includes":["testAtomics.js","testTypedArray.js\r"],"features":["ArrayBuffer","Atomics","DataView","SharedArrayBuffer","Symbol","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/xor/length.js","esid":" sec-atomics.xor\r","description":" >\rAtomics.xor.length is 3.\r\n","info":" |\rAtomics.xor ( ia, index, val )\r\n\r\n17 ECMAScript Standard Built-in Objects:\r\nEvery built-in Function object, including constructors, has a length\r\nproperty whose value is an integer. Unless otherwise specified, this\r\nvalue is equal to the largest number of named arguments shown in the\r\nsubclause headings for the function description, including optional\r\nparameters. However, rest parameters shown using the form “...name”\r\nare not included in the default argument count.\r\n\r\nUnless otherwise specified, the length property of a built-in Function\r\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\r\n[[Configurable]]: true }.\r\n","includes":["propertyHelper.js\r"],"features":["Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/xor/name.js","esid":" sec-atomics.xor\r","description":" >\rAtomics.xor.name is \"xor\".\r\n","includes":["propertyHelper.js\r"],"features":["Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/xor/non-shared-bufferdata.js","esid":" sec-atomics.and\r","description":" >\rAtomics.and will operate on TA when TA.buffer is not a SharedArrayBuffer\r\n","includes":["testTypedArray.js\r"],"features":["ArrayBuffer","Atomics","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/xor/non-shared-int-views-throws.js","esid":" sec-atomics.and\r","description":" >\rAtomics.and throws when operating on non-sharable integer TypedArrays\r\n","includes":["testTypedArray.js\r"],"features":["ArrayBuffer","Atomics","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/xor/non-views.js","esid":" sec-atomics.xor\r","description":" >\rTest Atomics.xor on view values other than TypedArrays\r\n","includes":["testAtomics.js\r"],"features":["ArrayBuffer","Atomics","DataView","SharedArrayBuffer","Symbol","TypedArray\r"]},{"path":"./test262/test/built-ins/Atomics/xor/not-a-constructor.js","esid":" sec-ecmascript-standard-built-in-objects\r","description":" >\rAtomics.xor does not implement [[Construct]], is not new-able\r\n","info":" |\rECMAScript Function Objects\r\n\r\nBuilt-in function objects that are not identified as constructors do not\r\nimplement the [[Construct]] internal method unless otherwise specified in\r\nthe description of a particular function.\r\n\r\nsec-evaluatenew\r\n\r\n...\r\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\r\n...\r\n","includes":["isConstructor.js\r"],"features":["Reflect.construct","Atomics","arrow-function","TypedArray","SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/Atomics/xor/validate-arraytype-before-index-coercion.js","esid":" sec-atomics.xor\r","description":" >\rTypedArray type is validated before `index` argument is coerced.\r\n","info":" |\r24.4.13 Atomics.xor ( typedArray, index, value )\r\n1. Return ? AtomicReadModifyWrite(typedArray, index, value, xor).\r\n\r\n24.4.1.11 AtomicReadModifyWrite ( typedArray, index, value, op )\r\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray).\r\n...\r\n\r\n24.4.1.1 ValidateSharedIntegerTypedArray ( typedArray [ , onlyInt32 ] )\r\n...\r\n4. Let typeName be typedArray.[[TypedArrayName]].\r\n5. If onlyInt32 is true, then\r\na. If typeName is not \"Int32Array\", throw a TypeError exception.\r\n6. Else,\r\na. If typeName is not \"Int8Array\", \"Uint8Array\", \"Int16Array\", \"Uint16Array\", \"Int32Array\",\r\nor \"Uint32Array\", throw a TypeError exception.\r\n...\r\n","features":["Atomics\r"]},{"path":"./test262/test/built-ins/Atomics/xor/validate-arraytype-before-value-coercion.js","esid":" sec-atomics.xor\r","description":" >\rTypedArray type is validated before `value` argument is coerced.\r\n","info":" |\r24.4.13 Atomics.xor ( typedArray, index, value )\r\n1. Return ? AtomicReadModifyWrite(typedArray, index, value, xor).\r\n\r\n24.4.1.11 AtomicReadModifyWrite ( typedArray, index, value, op )\r\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray).\r\n...\r\n\r\n24.4.1.1 ValidateSharedIntegerTypedArray ( typedArray [ , onlyInt32 ] )\r\n...\r\n4. Let typeName be typedArray.[[TypedArrayName]].\r\n5. If onlyInt32 is true, then\r\na. If typeName is not \"Int32Array\", throw a TypeError exception.\r\n6. Else,\r\na. If typeName is not \"Int8Array\", \"Uint8Array\", \"Int16Array\", \"Uint16Array\", \"Int32Array\",\r\nor \"Uint32Array\", throw a TypeError exception.\r\n...\r\n","features":["Atomics\r"]},{"path":"./test262/test/built-ins/DataView/buffer-does-not-have-arraybuffer-data-throws-sab.js","esid":" sec-dataview-buffer-byteoffset-bytelength\r","description":" >\rThrows a TypeError if buffer does not have [[ArrayBufferData]]\r\n","info":" |\r24.2.2.1 DataView (buffer, byteOffset, byteLength )\r\n\r\n...\r\n2. If Type(buffer) is not Object, throw a TypeError exception.\r\n3. If buffer does not have an [[ArrayBufferData]] internal slot, throw a\r\nTypeError exception.\r\n...\r\n","features":["SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/DataView/buffer-reference-sab.js","esid":" sec-dataview-buffer-byteoffset-bytelength\r","description":" >\rReuse buffer argument instead of making a new clone\r\n","info":" |\r24.2.2.1 DataView (buffer, byteOffset, byteLength )\r\n\r\n...\r\n14. Set O's [[ViewedArrayBuffer]] internal slot to buffer.\r\n...\r\n17. Return O.\r\n","features":["SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/DataView/byteoffset-is-negative-throws-sab.js","esid":" sec-dataview-buffer-byteoffset-bytelength\r","description":" >\rThrows a RangeError if ToInteger(byteOffset) < 0\r\n","info":" |\r24.2.2.1 DataView (buffer, byteOffset, byteLength )\r\n\r\n...\r\n4. Let numberOffset be ? ToNumber(byteOffset).\r\n5. Let offset be ToInteger(numberOffset).\r\n6. If numberOffset ≠ offset or offset < 0, throw a RangeError exception.\r\n...\r\n","features":["SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/DataView/custom-proto-access-throws-sab.js","esid":" sec-dataview-buffer-byteoffset-bytelength\r","description":" >\rReturn abrupt from newTarget's custom constructor prototype\r\n","info":" |\r24.2.2.1 DataView (buffer, byteOffset, byteLength )\r\n\r\n...\r\n12. Let O be ? OrdinaryCreateFromConstructor(NewTarget, \"%DataViewPrototype%\",\r\n« [[DataView]], [[ViewedArrayBuffer]], [[ByteLength]], [[ByteOffset]] »).\r\n...\r\n17. Return O.\r\n\r\n9.1.13 OrdinaryCreateFromConstructor ( constructor, intrinsicDefaultProto [ ,\r\ninternalSlotsList ] )\r\n\r\n...\r\n2. Let proto be ? GetPrototypeFromConstructor(constructor,\r\nintrinsicDefaultProto).\r\n3. Return ObjectCreate(proto, internalSlotsList).\r\n\r\n9.1.15 GetPrototypeFromConstructor ( constructor, intrinsicDefaultProto )\r\n\r\n...\r\n3. Let proto be ? Get(constructor, \"prototype\").\r\n...\r\n","features":["Reflect.construct","SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/DataView/custom-proto-if-not-object-fallbacks-to-default-prototype-sab.js","esid":" sec-dataview-buffer-byteoffset-bytelength\r","description":" >\rUse DataView.prototype if newTarget's prototype is not an Object\r\n","info":" |\r24.2.2.1 DataView (buffer, byteOffset, byteLength )\r\n\r\n...\r\n12. Let O be ? OrdinaryCreateFromConstructor(NewTarget, \"%DataViewPrototype%\",\r\n« [[DataView]], [[ViewedArrayBuffer]], [[ByteLength]], [[ByteOffset]] »).\r\n...\r\n17. Return O.\r\n\r\n9.1.13 OrdinaryCreateFromConstructor ( constructor, intrinsicDefaultProto [ ,\r\ninternalSlotsList ] )\r\n\r\n...\r\n2. Let proto be ? GetPrototypeFromConstructor(constructor,\r\nintrinsicDefaultProto).\r\n3. Return ObjectCreate(proto, internalSlotsList).\r\n\r\n9.1.15 GetPrototypeFromConstructor ( constructor, intrinsicDefaultProto )\r\n\r\n...\r\n3. Let proto be ? Get(constructor, \"prototype\").\r\n4. If Type(proto) is not Object, then\r\na. Let realm be ? GetFunctionRealm(constructor).\r\nb. Let proto be realm's intrinsic object named intrinsicDefaultProto.\r\n5. Return proto.\r\n...\r\n","features":["Reflect.construct","SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/DataView/custom-proto-if-object-is-used-sab.js","esid":" sec-dataview-buffer-byteoffset-bytelength\r","description":" >\rUse newTarget's custom constructor prototype if Object\r\n","info":" |\r24.2.2.1 DataView (buffer, byteOffset, byteLength )\r\n\r\n...\r\n12. Let O be ? OrdinaryCreateFromConstructor(NewTarget, \"%DataViewPrototype%\",\r\n« [[DataView]], [[ViewedArrayBuffer]], [[ByteLength]], [[ByteOffset]] »).\r\n...\r\n17. Return O.\r\n\r\n9.1.13 OrdinaryCreateFromConstructor ( constructor, intrinsicDefaultProto [ ,\r\ninternalSlotsList ] )\r\n\r\n...\r\n2. Let proto be ? GetPrototypeFromConstructor(constructor,\r\nintrinsicDefaultProto).\r\n3. Return ObjectCreate(proto, internalSlotsList).\r\n\r\n9.1.15 GetPrototypeFromConstructor ( constructor, intrinsicDefaultProto )\r\n\r\n...\r\n3. Let proto be ? Get(constructor, \"prototype\").\r\n4. If Type(proto) is not Object, then\r\na. Let realm be ? GetFunctionRealm(constructor).\r\nb. Let proto be realm's intrinsic object named intrinsicDefaultProto.\r\n5. Return proto.\r\n...\r\n","features":["Reflect.construct","SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/DataView/defined-bytelength-and-byteoffset-sab.js","esid":" sec-dataview-buffer-byteoffset-bytelength\r","description":" >\rReturn new instance from defined length and offset\r\n","info":" |\r24.2.2.1 DataView (buffer, byteOffset, byteLength )\r\n\r\n...\r\n17. Return O.\r\n","features":["SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/DataView/defined-byteoffset-sab.js","esid":" sec-dataview-buffer-byteoffset-bytelength\r","description":" >\rReturn new instance from defined offset\r\n","info":" |\r24.2.2.1 DataView (buffer, byteOffset, byteLength )\r\n\r\n...\r\n17. Return O.\r\n","features":["SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/DataView/defined-byteoffset-undefined-bytelength-sab.js","esid":" sec-dataview-buffer-byteoffset-bytelength\r","description":" >\rReturn new instance from defined byteoffset and undefined bytelength\r\n","info":" |\r24.2.2.1 DataView (buffer, byteOffset, byteLength )\r\n\r\n...\r\n8. If byteLength is either not present or undefined, then\r\na. Let viewByteLength be bufferByteLength - offset.\r\n...\r\n17. Return O.\r\n","features":["SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/DataView/excessive-bytelength-throws-sab.js","esid":" sec-dataview-buffer-byteoffset-bytelength\r","description":" >\rThrows RangeError if offset + viewByteLength > bufferByteLength\r\n","info":" |\r24.2.2.1 DataView (buffer, byteOffset, byteLength )\r\n\r\n...\r\n10. If byteLength is undefined, then\r\n...\r\n11. Else,\r\na. Let viewByteLength be ? ToLength(byteLength).\r\nb. If offset+viewByteLength > bufferByteLength, throw a RangeError\r\nexception.\r\n...\r\n","features":["SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/DataView/excessive-byteoffset-throws-sab.js","esid":" sec-dataview-buffer-byteoffset-bytelength\r","description":" >\rThrows a RangeError if offset > bufferByteLength\r\n","info":" |\r24.2.2.1 DataView (buffer, byteOffset, byteLength )\r\n\r\n...\r\n8. Let bufferByteLength be the value of buffer's [[ArrayBufferByteLength]]\r\ninternal slot.\r\n9. If offset > bufferByteLength, throw a RangeError exception.\r\n...\r\n","features":["SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/DataView/instance-extensibility-sab.js","esid":" sec-dataview-buffer-byteoffset-bytelength\r","description":" >\rThe new instance is extensible\r\n","info":" |\r24.2.2.1 DataView (buffer, byteOffset, byteLength )\r\n\r\n...\r\n12. Let O be ? OrdinaryCreateFromConstructor(NewTarget, \"%DataViewPrototype%\",\r\n« [[DataView]], [[ViewedArrayBuffer]], [[ByteLength]], [[ByteOffset]] »).\r\n...\r\n17. Return O.\r\n\r\n9.1.13 OrdinaryCreateFromConstructor ( constructor, intrinsicDefaultProto [ ,\r\ninternalSlotsList ] )\r\n\r\n...\r\n3. Return ObjectCreate(proto, internalSlotsList).\r\n\r\n9.1.12 ObjectCreate (proto [ , internalSlotsList ])\r\n\r\n...\r\n5. Set the [[Extensible]] internal slot of obj to true.\r\n...\r\n","features":["SharedArrayBuffer\r"],"includes":["propertyHelper.js\r"]},{"path":"./test262/test/built-ins/DataView/negative-bytelength-throws-sab.js","esid":" sec-dataview-buffer-byteoffset-bytelength\r","description":" >\rThrows a RangeError if ToInteger(byteLength) < 0\r\n","info":" |\r24.2.2.1 DataView (buffer, byteOffset, byteLength )\r\n\r\n...\r\n8. If byteLength is either not present or undefined, then\r\na. Let viewByteLength be bufferByteLength - offset.\r\n9. Else,\r\na. Let viewByteLength be ? ToIndex(byteLength).\r\n...\r\n\r\nToIndex ( value )\r\n\r\n1. If value is undefined, then\r\na. Let index be 0.\r\n2. Else,\r\na. Let integerIndex be ? ToInteger(value).\r\nb. If integerIndex < 0, throw a RangeError exception.\r\n...\r\n","features":["SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/DataView/negative-byteoffset-throws-sab.js","esid":" sec-dataview-buffer-byteoffset-bytelength\r","description":" >\rThrows a RangeError if ToInteger(byteOffset) < 0\r\n","info":" |\r24.2.2.1 DataView (buffer, byteOffset, byteLength )\r\n\r\n...\r\n4. Let offset be ? ToIndex(byteOffset).\r\n...\r\n\r\nToIndex ( value )\r\n\r\n1. If value is undefined, then\r\na. Let index be 0.\r\n2. Else,\r\na. Let integerIndex be ? ToInteger(value).\r\nb. If integerIndex < 0, throw a RangeError exception.\r\n...\r\n","features":["SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/DataView/newtarget-undefined-throws-sab.js","esid":" sec-dataview-buffer-byteoffset-bytelength\r","description":" >\rThrows a TypeError if NewTarget is undefined.\r\n","info":" |\r24.2.2.1 DataView (buffer, byteOffset, byteLength )\r\n\r\n1. If NewTarget is undefined, throw a TypeError exception.\r\n...\r\n","features":["SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/DataView/proto-from-ctor-realm-sab.js","esid":" sec-dataview-buffer-byteoffset-bytelength\r","description":" Default [[Prototype]] value derived from realm of the newTarget\r","info":" |\r[...]\r\n12. Let O be ? OrdinaryCreateFromConstructor(NewTarget,\r\n\"%DataViewPrototype%\", « [[DataView]], [[ViewedArrayBuffer]],\r\n[[ByteLength]], [[ByteOffset]] »).\r\n[...]\r\n\r\n9.1.14 GetPrototypeFromConstructor\r\n\r\n[...]\r\n3. Let proto be ? Get(constructor, \"prototype\").\r\n4. If Type(proto) is not Object, then\r\na. Let realm be ? GetFunctionRealm(constructor).\r\nb. Let proto be realm's intrinsic object named intrinsicDefaultProto.\r\n[...]\r\n","features":["cross-realm","Reflect","SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/DataView/prototype/buffer/return-buffer-sab.js","esid":" sec-get-dataview.prototype.buffer\r","description":" >\rReturn buffer from [[ViewedArrayBuffer]] internal slot\r\n","info":" |\r24.2.4.1 get DataView.prototype.buffer\r\n\r\n...\r\n5. Let buffer be the value of O's [[ViewedArrayBuffer]] internal slot.\r\n6. Return buffer.\r\n","features":["SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/DataView/prototype/buffer/this-has-no-dataview-internal-sab.js","esid":" sec-get-dataview.prototype.buffer\r","description":" >\rThrows a TypeError exception when `this` does not have a [[DataView]] internal\r\nslot\r\n","info":" |\r24.2.4.1 get DataView.prototype.buffer\r\n\r\n1. Let O be the this value.\r\n2. If Type(O) is not Object, throw a TypeError exception.\r\n3. If O does not have a [[DataView]] internal slot, throw a TypeError\r\nexception.\r\n...\r\n","features":["SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/DataView/prototype/byteLength/return-bytelength-sab.js","esid":" sec-get-dataview.prototype.bytelength\r","description":" >\rReturn value from [[ByteLength]] internal slot\r\n","info":" |\r24.2.4.2 get DataView.prototype.byteLength\r\n\r\n...\r\n7. Let size be the value of O's [[ByteLength]] internal slot.\r\n8. Return size.\r\n","features":["SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/DataView/prototype/byteLength/this-has-no-dataview-internal-sab.js","esid":" sec-get-dataview.prototype.bytelength\r","description":" >\rThrows a TypeError exception when `this` does not have a [[DataView]] internal\r\nslot\r\n","info":" |\r24.2.4.2 get DataView.prototype.byteLength\r\n\r\n1. Let O be the this value.\r\n2. If Type(O) is not Object, throw a TypeError exception.\r\n3. If O does not have a [[DataView]] internal slot, throw a TypeError\r\nexception.\r\n...\r\n","features":["SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/DataView/prototype/byteOffset/return-byteoffset-sab.js","esid":" sec-get-dataview.prototype.byteoffset\r","description":" >\rReturn value from [[ByteOffset]] internal slot\r\n","info":" |\r24.2.4.3 get DataView.prototype.byteOffset\r\n\r\n...\r\n7. Let offset be the value of O's [[ByteOffset]] internal slot.\r\n8. Return offset.\r\n","features":["SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/DataView/prototype/byteOffset/this-has-no-dataview-internal-sab.js","esid":" sec-get-dataview.prototype.byteoffset\r","description":" >\rThrows a TypeError exception when `this` does not have a [[DataView]] internal\r\nslot\r\n","info":" |\r24.2.4.3 get DataView.prototype.byteOffset\r\n\r\n1. Let O be the this value.\r\n2. If Type(O) is not Object, throw a TypeError exception.\r\n3. If O does not have a [[DataView]] internal slot, throw a TypeError\r\nexception.\r\n...\r\n","features":["SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/DataView/prototype/getInt32/index-is-out-of-range-sab.js","esid":" sec-dataview.prototype.getint32\r","description":" >\rThrows a RangeError if getIndex + elementSize > viewSize\r\n","info":" |\r24.2.4.9 DataView.prototype.getInt32 ( byteOffset [ , littleEndian ] )\r\n\r\n1. Let v be the this value.\r\n2. If littleEndian is not present, let littleEndian be false.\r\n3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Int32\").\r\n\r\n24.2.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\r\n\r\n...\r\n10. Let viewOffset be the value of view's [[ByteOffset]] internal slot.\r\n11. Let viewSize be the value of view's [[ByteLength]] internal slot.\r\n12. Let elementSize be the Number value of the Element Size value specified in\r\nTable 50 for Element Type type.\r\n13. If getIndex + elementSize > viewSize, throw a RangeError exception.\r\n...\r\n","features":["SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/DataView/prototype/getInt32/negative-byteoffset-throws-sab.js","esid":" sec-dataview.prototype.getint32\r","description":" >\rThrows a RangeError if getIndex < 0\r\n","info":" |\r24.2.4.9 DataView.prototype.getInt32 ( byteOffset [ , littleEndian ] )\r\n\r\n1. Let v be the this value.\r\n2. If littleEndian is not present, let littleEndian be false.\r\n3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Int32\").\r\n\r\n24.2.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\r\n\r\n...\r\n4. Let getIndex be ? ToIndex(requestIndex).\r\n...\r\n","features":["SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/DataView/prototype/getInt32/return-abrupt-from-tonumber-byteoffset-sab.js","esid":" sec-dataview.prototype.getint32\r","description":" >\rReturn abrupt from ToNumber(byteOffset)\r\n","info":" |\r24.2.4.9 DataView.prototype.getInt32 ( byteOffset [ , littleEndian ] )\r\n\r\n1. Let v be the this value.\r\n2. If littleEndian is not present, let littleEndian be false.\r\n3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Int32\").\r\n\r\n24.2.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\r\n\r\n...\r\n4. Let numberIndex be ? ToNumber(requestIndex).\r\n...\r\n","features":["SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/DataView/prototype/getInt32/return-abrupt-from-tonumber-byteoffset-symbol-sab.js","esid":" sec-dataview.prototype.getint32\r","description":" >\rReturn abrupt from ToNumber(symbol byteOffset)\r\n","info":" |\r24.2.4.9 DataView.prototype.getInt32 ( byteOffset [ , littleEndian ] )\r\n\r\n1. Let v be the this value.\r\n2. If littleEndian is not present, let littleEndian be false.\r\n3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Int32\").\r\n\r\n24.2.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\r\n\r\n...\r\n4. Let numberIndex be ? ToNumber(requestIndex).\r\n...\r\n","features":["SharedArrayBuffer","Symbol\r"]},{"path":"./test262/test/built-ins/DataView/prototype/getInt32/return-value-clean-arraybuffer-sab.js","esid":" sec-dataview.prototype.getint32\r","description":" >\rReturn value from Buffer using a clean ArrayBuffer\r\n","info":" |\r24.2.4.9 DataView.prototype.getInt32 ( byteOffset [ , littleEndian ] )\r\n\r\n1. Let v be the this value.\r\n2. If littleEndian is not present, let littleEndian be false.\r\n3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Int32\").\r\n\r\n24.2.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\r\n\r\n...\r\n14. Let bufferIndex be getIndex + viewOffset.\r\n15. Return GetValueFromBuffer(buffer, bufferIndex, type, isLittleEndian).\r\n...\r\n\r\n24.1.1.5 GetValueFromBuffer ( arrayBuffer, byteIndex, type [ , isLittleEndian\r\n] )\r\n\r\n...\r\n8. If isLittleEndian is false, reverse the order of the elements of rawValue.\r\n...\r\n","features":["SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/DataView/prototype/getInt32/return-values-custom-offset-sab.js","esid":" sec-dataview.prototype.getint32\r","description":" >\rReturn values from Buffer using a custom offset\r\n","info":" |\r24.2.4.9 DataView.prototype.getInt32 ( byteOffset [ , littleEndian ] )\r\n\r\n1. Let v be the this value.\r\n2. If littleEndian is not present, let littleEndian be false.\r\n3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Int32\").\r\n\r\n24.2.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\r\n\r\n...\r\n14. Let bufferIndex be getIndex + viewOffset.\r\n15. Return GetValueFromBuffer(buffer, bufferIndex, type, isLittleEndian).\r\n...\r\n\r\n24.1.1.5 GetValueFromBuffer ( arrayBuffer, byteIndex, type [ , isLittleEndian\r\n] )\r\n\r\n...\r\n8. If isLittleEndian is false, reverse the order of the elements of rawValue.\r\n...\r\n","features":["SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/DataView/prototype/getInt32/return-values-sab.js","esid":" sec-dataview.prototype.getint32\r","description":" >\rReturn values from Buffer\r\n","info":" |\r24.2.4.9 DataView.prototype.getInt32 ( byteOffset [ , littleEndian ] )\r\n\r\n1. Let v be the this value.\r\n2. If littleEndian is not present, let littleEndian be false.\r\n3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Int32\").\r\n\r\n24.2.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\r\n\r\n...\r\n14. Let bufferIndex be getIndex + viewOffset.\r\n15. Return GetValueFromBuffer(buffer, bufferIndex, type, isLittleEndian).\r\n...\r\n\r\n24.1.1.5 GetValueFromBuffer ( arrayBuffer, byteIndex, type [ , isLittleEndian\r\n] )\r\n\r\n...\r\n8. If isLittleEndian is false, reverse the order of the elements of rawValue.\r\n...\r\n","features":["SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/DataView/prototype/getInt32/this-has-no-dataview-internal-sab.js","esid":" sec-dataview.prototype.getint32\r","description":" >\rThrows a TypeError if this does not have a [[DataView]] internal slot\r\n","info":" |\r24.2.4.9 DataView.prototype.getInt32 ( byteOffset [ , littleEndian ] )\r\n\r\n1. Let v be the this value.\r\n2. If littleEndian is not present, let littleEndian be false.\r\n3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Int32\").\r\n\r\n24.2.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\r\n\r\n1. If Type(view) is not Object, throw a TypeError exception.\r\n2. If view does not have a [[DataView]] internal slot, throw a TypeError\r\nexception.\r\n...\r\n","features":["SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/DataView/prototype/getInt32/to-boolean-littleendian-sab.js","esid":" sec-dataview.prototype.getint32\r","description":" >\rBoolean littleEndian argument coerced in ToBoolean\r\n","info":" |\r24.2.4.9 DataView.prototype.getInt32 ( byteOffset [ , littleEndian ] )\r\n\r\n1. Let v be the this value.\r\n2. If littleEndian is not present, let littleEndian be false.\r\n3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Int32\").\r\n\r\n24.2.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\r\n\r\n...\r\n14. Let bufferIndex be getIndex + viewOffset.\r\n15. Return GetValueFromBuffer(buffer, bufferIndex, type, isLittleEndian).\r\n...\r\n\r\n24.1.1.5 GetValueFromBuffer ( arrayBuffer, byteIndex, type [ , isLittleEndian\r\n] )\r\n\r\n...\r\n8. If isLittleEndian is false, reverse the order of the elements of rawValue.\r\n...\r\n","features":["SharedArrayBuffer","Symbol\r"]},{"path":"./test262/test/built-ins/DataView/prototype/getInt32/toindex-byteoffset-sab.js","esid":" sec-dataview.prototype.getint32\r","description":" >\rToIndex conversions on byteOffset\r\n","info":" |\r24.2.4.9 DataView.prototype.getInt32 ( byteOffset [ , littleEndian ] )\r\n\r\n1. Let v be the this value.\r\n2. If littleEndian is not present, let littleEndian be false.\r\n3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Int32\").\r\n\r\n24.2.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\r\n\r\n...\r\n4. Let getIndex be ? ToIndex(requestIndex).\r\n...\r\n","features":["SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/DataView/return-abrupt-tonumber-bytelength-sab.js","esid":" sec-dataview-buffer-byteoffset-bytelength\r","description":" >\rReturn abrupt from ToLength(byteLength)\r\n","info":" |\r24.2.2.1 DataView (buffer, byteOffset, byteLength )\r\n\r\n...\r\n10. If byteLength is undefined, then\r\na. Let viewByteLength be bufferByteLength - offset.\r\n11. Else,\r\na. Let viewByteLength be ? ToLength(byteLength).\r\n...\r\n","features":["SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/DataView/return-abrupt-tonumber-bytelength-symbol-sab.js","esid":" sec-dataview-buffer-byteoffset-bytelength\r","description":" >\rReturn abrupt from ToLength(symbol byteLength)\r\n","info":" |\r24.2.2.1 DataView (buffer, byteOffset, byteLength )\r\n\r\n...\r\n10. If byteLength is undefined, then\r\na. Let viewByteLength be bufferByteLength - offset.\r\n11. Else,\r\na. Let viewByteLength be ? ToLength(byteLength).\r\n...\r\n","features":["SharedArrayBuffer","Symbol\r"]},{"path":"./test262/test/built-ins/DataView/return-abrupt-tonumber-byteoffset-sab.js","esid":" sec-dataview-buffer-byteoffset-bytelength\r","description":" >\rReturn abrupt from ToNumber(byteOffset)\r\n","info":" |\r24.2.2.1 DataView (buffer, byteOffset, byteLength )\r\n\r\n...\r\n4. Let numberOffset be ? ToNumber(byteOffset).\r\n...\r\n","features":["SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/DataView/return-abrupt-tonumber-byteoffset-symbol-sab.js","esid":" sec-dataview-buffer-byteoffset-bytelength\r","description":" >\rReturn abrupt from ToNumber(symbol byteOffset)\r\n","info":" |\r24.2.2.1 DataView (buffer, byteOffset, byteLength )\r\n\r\n...\r\n4. Let numberOffset be ? ToNumber(byteOffset).\r\n...\r\n","features":["SharedArrayBuffer","Symbol\r"]},{"path":"./test262/test/built-ins/DataView/return-instance-sab.js","esid":" sec-dataview-buffer-byteoffset-bytelength\r","description":" >\rReturns new instance\r\n","info":" |\r24.2.2.1 DataView (buffer, byteOffset, byteLength )\r\n\r\n...\r\n12. Let O be ? OrdinaryCreateFromConstructor(NewTarget, \"%DataViewPrototype%\",\r\n« [[DataView]], [[ViewedArrayBuffer]], [[ByteLength]], [[ByteOffset]] »).\r\n...\r\n17. Return O.\r\n","features":["SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/DataView/toindex-bytelength-sab.js","esid":" sec-dataview-buffer-byteoffset-bytelength\r","description":" >\rToIndex conversions on byteLength\r\n","info":" |\r24.2.2.1 DataView ( buffer, byteOffset, byteLength )\r\n\r\n...\r\n8. If byteLength is either not present or undefined, then\r\na. Let viewByteLength be bufferByteLength - offset.\r\n9. Else,\r\na. Let viewByteLength be ? ToIndex(byteLength).\r\nb. If offset + viewByteLength > bufferByteLength, throw a RangeError\r\nexception.\r\n...\r\n\r\nToIndex( value )\r\n\r\n1. If value is undefined, then\r\na. Let index be 0.\r\n2. Else,\r\na. Let integerIndex be ? ToInteger(value).\r\nb. If integerIndex < 0, throw a RangeError exception.\r\nc. Let index be ! ToLength(integerIndex).\r\nd. If SameValueZero(integerIndex, index) is false, throw a RangeError exception.\r\n3. Return index.\r\n","features":["SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/DataView/toindex-byteoffset-sab.js","esid":" sec-dataview-buffer-byteoffset-bytelength\r","description":" >\rToIndex conversions on byteOffset\r\n","info":" |\r24.2.2.1 DataView ( buffer, byteOffset, byteLength )\r\n\r\n...\r\n4. Let offset be ? ToIndex(byteOffset).\r\n...\r\n\r\nToIndex( value )\r\n\r\n1. If value is undefined, then\r\na. Let index be 0.\r\n2. Else,\r\na. Let integerIndex be ? ToInteger(value).\r\nb. If integerIndex < 0, throw a RangeError exception.\r\nc. Let index be ! ToLength(integerIndex).\r\nd. If SameValueZero(integerIndex, index) is false, throw a RangeError exception.\r\n3. Return index.\r\n","features":["SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/Function/prototype/toString/async-arrow-function.js","esid":" sec-async-arrow-function-definitions-runtime-semantics-evaluation\r","description":" Function.prototype.toString on an async arrow function\r","features":["async-functions\r"],"includes":["nativeFunctionMatcher.js\r"]},{"path":"./test262/test/built-ins/Function/prototype/toString/async-function-declaration.js","author":" Brian Terlson <brian.terlson@microsoft.com>\r","esid":" sec-function.prototype.tostring\r","description":" Function.prototype.toString on an async function declaration\r","features":["async-functions\r"],"includes":["nativeFunctionMatcher.js\r"]},{"path":"./test262/test/built-ins/Function/prototype/toString/async-function-expression.js","author":" Brian Terlson <brian.terlson@microsoft.com>\r","esid":" sec-function.prototype.tostring\r","description":" Function.prototype.toString on an async function expression\r","features":["async-functions\r"],"includes":["nativeFunctionMatcher.js\r"]},{"path":"./test262/test/built-ins/Function/prototype/toString/async-method-class-expression-static.js","esid":" sec-function.prototype.tostring\r","description":" Function.prototype.toString on an async method\r","features":["async-functions\r"],"includes":["nativeFunctionMatcher.js\r"]},{"path":"./test262/test/built-ins/Function/prototype/toString/async-method-class-expression.js","esid":" sec-function.prototype.tostring\r","description":" Function.prototype.toString on an async method\r","features":["async-functions\r"],"includes":["nativeFunctionMatcher.js\r"]},{"path":"./test262/test/built-ins/Function/prototype/toString/async-method-class-statement-static.js","esid":" sec-function.prototype.tostring\r","description":" Function.prototype.toString on an async method\r","features":["async-functions\r"],"includes":["nativeFunctionMatcher.js\r"]},{"path":"./test262/test/built-ins/Function/prototype/toString/async-method-class-statement.js","esid":" sec-function.prototype.tostring\r","description":" Function.prototype.toString on an async method\r","features":["async-functions\r"],"includes":["nativeFunctionMatcher.js\r"]},{"path":"./test262/test/built-ins/Function/prototype/toString/async-method-object.js","author":" Brian Terlson <brian.terlson@microsoft.com>\r","esid":" sec-function.prototype.tostring\r","description":" Function.prototype.toString on an async method\r","features":["async-functions\r"],"includes":["nativeFunctionMatcher.js\r"]},{"path":"./test262/test/built-ins/Function/prototype/toString/AsyncFunction.js","author":" Brian Terlson <brian.terlson@microsoft.com>\r","esid":" sec-function.prototype.tostring\r","description":" >\rFunction.prototype.toString on an async function created with the\r\nAsyncFunction constructor.\r\n","features":["async-functions\r"],"includes":["nativeFunctionMatcher.js\r"]},{"path":"./test262/test/built-ins/Function/prototype/toString/proxy-async-function.js","esid":" sec-function.prototype.tostring\r","description":" >\rtoString of Proxy for function target does not throw (Async Function Expression)\r\n","info":" |\r...\r\nIf Type(func) is Object and IsCallable(func) is true, then return an\r\nimplementation-dependent String source code representation of func.\r\nThe representation must have the syntax of a NativeFunction.\r\n...\r\n\r\nNativeFunction:\r\nfunction IdentifierName_opt ( FormalParameters ) { [ native code ] }\r\n\r\n","features":["async-functions","Proxy\r"],"includes":["nativeFunctionMatcher.js\r"]},{"path":"./test262/test/built-ins/Function/prototype/toString/proxy-async-method-definition.js","esid":" sec-function.prototype.tostring\r","description":" >\rtoString of Proxy for function target does not throw (Async Method Definition)\r\n","info":" |\r...\r\nIf Type(func) is Object and IsCallable(func) is true, then return an\r\nimplementation-dependent String source code representation of func.\r\nThe representation must have the syntax of a NativeFunction.\r\n...\r\n\r\nNativeFunction:\r\nfunction IdentifierName_opt ( FormalParameters ) { [ native code ] }\r\n\r\n","features":["async-functions","Proxy\r"],"includes":["nativeFunctionMatcher.js\r"]},{"path":"./test262/test/built-ins/Object/prototype/toString/proxy-function-async.js","esid":" sec-object.prototype.tostring\r","description":" Proxy of async function is treated as a function.\r","info":" |\rProxyCreate ( target, handler )\r\n\r\n[...]\r\n7. If IsCallable(target) is true, then\r\na. Set P.[[Call]] as specified in 9.5.12.\r\n\r\nObject.prototype.toString ( )\r\n\r\n[...]\r\n7. Else if O has a [[Call]] internal method, let builtinTag be \"Function\".\r\n","features":["async-functions","Proxy","Symbol.toStringTag\r"]},{"path":"./test262/test/built-ins/Object/prototype/toString/proxy-function.js","esid":" sec-object.prototype.tostring\r","description":" Proxy of an function is treated as an function\r","info":" |\r[...]\r\n\r\n9.5.14 ProxyCreate(target, handler)\r\n\r\n[...]\r\n7. If IsCallable(target) is true, then\r\na. Set the [[Call]] internal method of P as specified in 9.5.12.\r\n[...]\r\n\r\n","features":["generators","async-functions","Proxy","Symbol.toStringTag\r"]},{"path":"./test262/test/built-ins/Object/prototype/toString/symbol-tag-non-str-proxy-function.js","esid":" sec-object.prototype.tostring\r","description":" >\rNon-string values of `Symbol.toStringTag` property are ignored.\r\n","info":" |\rProxyCreate ( target, handler )\r\n\r\n[...]\r\n7. If IsCallable(target) is true, then\r\na. Set P.[[Call]] as specified in 9.5.12.\r\n\r\nObject.prototype.toString ( )\r\n\r\n[...]\r\n7. Else if O has a [[Call]] internal method, let builtinTag be \"Function\".\r\n[...]\r\n15. Let tag be ? Get(O, @@toStringTag).\r\n16. If Type(tag) is not String, set tag to builtinTag.\r\n17. Return the string-concatenation of \"[object \", tag, and \"]\".\r\n","features":["generators","async-functions","Proxy","Symbol.toStringTag\r"]},{"path":"./test262/test/built-ins/Object/prototype/__defineGetter__/define-abrupt.js","esid":" sec-additional-properties-of-the-object.prototype-object\r","description":" Behavior when [[DefineOwnProperty]] returns an abrupt completion\r","info":" |\r[...]\r\n5. Perform ? DefinePropertyOrThrow(O, key, desc).\r\n","features":["Proxy","__getter__\r"]},{"path":"./test262/test/built-ins/Object/prototype/__defineGetter__/define-existing.js","esid":" sec-additional-properties-of-the-object.prototype-object\r","description":" Behavior when property exists and is configurable\r","info":" |\r[...]\r\n3. Let desc be PropertyDescriptor{[[Get]]: getter, [[Enumerable]]: true,\r\n[[Configurable]]: true}.\r\n4. Let key be ? ToPropertyKey(P).\r\n5. Perform ? DefinePropertyOrThrow(O, key, desc).\r\n6. Return undefined.\r\n","includes":["propertyHelper.js\r"],"features":["__getter__\r"]},{"path":"./test262/test/built-ins/Object/prototype/__defineGetter__/define-new.js","esid":" sec-additional-properties-of-the-object.prototype-object\r","description":" Behavior when property does not exist\r","info":" |\r[...]\r\n3. Let desc be PropertyDescriptor{[[Get]]: getter, [[Enumerable]]: true,\r\n[[Configurable]]: true}.\r\n4. Let key be ? ToPropertyKey(P).\r\n5. Perform ? DefinePropertyOrThrow(O, key, desc).\r\n6. Return undefined.\r\n","includes":["propertyHelper.js\r"],"features":["__getter__\r"]},{"path":"./test262/test/built-ins/Object/prototype/__defineGetter__/define-non-configurable.js","esid":" sec-additional-properties-of-the-object.prototype-object\r","description":" Behavior when property exists and is not configurable\r","info":" |\r[...]\r\n5. Perform ? DefinePropertyOrThrow(O, key, desc).\r\n","features":["__getter__\r"]},{"path":"./test262/test/built-ins/Object/prototype/__defineGetter__/define-non-extensible.js","esid":" sec-additional-properties-of-the-object.prototype-object\r","description":" Behavior when \"this\" value is not extensible\r","info":" |\r[...]\r\n5. Perform ? DefinePropertyOrThrow(O, key, desc).\r\n","features":["__getter__\r"]},{"path":"./test262/test/built-ins/Object/prototype/__defineGetter__/getter-non-callable.js","esid":" sec-additional-properties-of-the-object.prototype-object\r","description":" Behavior when getter is not callable\r","info":" |\r[...]\r\n2. If IsCallable(getter) is false, throw a TypeError exception.\r\n","features":["Symbol","__getter__\r"]},{"path":"./test262/test/built-ins/Object/prototype/__defineGetter__/key-invalid.js","esid":" sec-additional-properties-of-the-object.prototype-object\r","description":" Behavior when property key cannot be derived\r","info":" |\r[...]\r\n4. Let key be ? ToPropertyKey(P).\r\n","features":["__getter__\r"]},{"path":"./test262/test/built-ins/Object/prototype/__defineGetter__/length.js","esid":" sec-additional-properties-of-the-object.prototype-object\r","description":" Object.prototype.__defineGetter__ `length` property\r","info":" |\rES6 Section 17:\r\nEvery built-in Function object, including constructors, has a length\r\nproperty whose value is an integer. Unless otherwise specified, this value\r\nis equal to the largest number of named arguments shown in the subclause\r\nheadings for the function description, including optional parameters.\r\n\r\n[...]\r\n\r\nUnless otherwise specified, the length property of a built-in Function\r\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\r\n[[Configurable]]: true }.\r\n","includes":["propertyHelper.js\r"],"features":["__getter__\r"]},{"path":"./test262/test/built-ins/Object/prototype/__defineGetter__/name.js","esid":" sec-additional-properties-of-the-object.prototype-object\r","description":" Object.prototype.__defineGetter__ `name` property\r","info":" |\rES6 Section 17:\r\n\r\nEvery built-in Function object, including constructors, that is not\r\nidentified as an anonymous function has a name property whose value is a\r\nString. Unless otherwise specified, this value is the name that is given to\r\nthe function in this specification.\r\n\r\n[...]\r\n\r\nUnless otherwise specified, the name property of a built-in Function\r\nobject, if it exists, has the attributes { [[Writable]]: false,\r\n[[Enumerable]]: false, [[Configurable]]: true }.\r\n","includes":["propertyHelper.js\r"],"features":["__getter__\r"]},{"path":"./test262/test/built-ins/Object/prototype/__defineGetter__/this-non-obj.js","esid":" sec-additional-properties-of-the-object.prototype-object\r","description":" Behavior when \"this\" value is not Object-coercible\r","info":" |\r1. Let O be ? ToObject(this value).\r\n","features":["__getter__\r"]},{"path":"./test262/test/built-ins/Object/prototype/__defineSetter__/define-abrupt.js","esid":" sec-additional-properties-of-the-object.prototype-object\r","description":" Behavior when [[DefineOwnProperty]] returns an abrupt completion\r","info":" |\r[...]\r\n5. Perform ? DefinePropertyOrThrow(O, key, desc).\r\n","features":["Proxy","__setter__\r"]},{"path":"./test262/test/built-ins/Object/prototype/__defineSetter__/define-existing.js","esid":" sec-additional-properties-of-the-object.prototype-object\r","description":" Behavior when property exists and is configurable\r","info":" |\r[...]\r\n3. Let desc be PropertyDescriptor{[[Set]]: setter, [[Enumerable]]: true,\r\n[[Configurable]]: true}.\r\n4. Let key be ? ToPropertyKey(P).\r\n5. Perform ? DefinePropertyOrThrow(O, key, desc).\r\n6. Return undefined.\r\n","includes":["propertyHelper.js\r"],"features":["__setter__\r"]},{"path":"./test262/test/built-ins/Object/prototype/__defineSetter__/define-new.js","esid":" sec-additional-properties-of-the-object.prototype-object\r","description":" Behavior when property does not exist\r","info":" |\r[...]\r\n3. Let desc be PropertyDescriptor{[[Set]]: setter, [[Enumerable]]: true,\r\n[[Configurable]]: true}.\r\n4. Let key be ? ToPropertyKey(P).\r\n5. Perform ? DefinePropertyOrThrow(O, key, desc).\r\n6. Return undefined.\r\n","includes":["propertyHelper.js\r"],"features":["__setter__\r"]},{"path":"./test262/test/built-ins/Object/prototype/__defineSetter__/define-non-configurable.js","esid":" sec-additional-properties-of-the-object.prototype-object\r","description":" Behavior when property exists and is not configurable\r","info":" |\r[...]\r\n5. Perform ? DefinePropertyOrThrow(O, key, desc).\r\n","features":["__setter__\r"]},{"path":"./test262/test/built-ins/Object/prototype/__defineSetter__/define-non-extensible.js","esid":" sec-additional-properties-of-the-object.prototype-object\r","description":" Behavior when \"this\" value is not extensible\r","info":" |\r[...]\r\n5. Perform ? DefinePropertyOrThrow(O, key, desc).\r\n","features":["__setter__\r"]},{"path":"./test262/test/built-ins/Object/prototype/__defineSetter__/key-invalid.js","esid":" sec-additional-properties-of-the-object.prototype-object\r","description":" Behavior when property key cannot be derived\r","info":" |\r[...]\r\n4. Let key be ? ToPropertyKey(P).\r\n","features":["__setter__\r"]},{"path":"./test262/test/built-ins/Object/prototype/__defineSetter__/length.js","esid":" sec-additional-properties-of-the-object.prototype-object\r","description":" Object.prototype.__defineSetter__ `length` property\r","info":" |\rES6 Section 17:\r\nEvery built-in Function object, including constructors, has a length\r\nproperty whose value is an integer. Unless otherwise specified, this value\r\nis equal to the largest number of named arguments shown in the subclause\r\nheadings for the function description, including optional parameters.\r\n\r\n[...]\r\n\r\nUnless otherwise specified, the length property of a built-in Function\r\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\r\n[[Configurable]]: true }.\r\n","includes":["propertyHelper.js\r"],"features":["__setter__\r"]},{"path":"./test262/test/built-ins/Object/prototype/__defineSetter__/name.js","esid":" sec-additional-properties-of-the-object.prototype-object\r","description":" Object.prototype.__defineSetter__ `name` property\r","info":" |\rES6 Section 17:\r\n\r\nEvery built-in Function object, including constructors, that is not\r\nidentified as an anonymous function has a name property whose value is a\r\nString. Unless otherwise specified, this value is the name that is given to\r\nthe function in this specification.\r\n\r\n[...]\r\n\r\nUnless otherwise specified, the name property of a built-in Function\r\nobject, if it exists, has the attributes { [[Writable]]: false,\r\n[[Enumerable]]: false, [[Configurable]]: true }.\r\n","includes":["propertyHelper.js\r"],"features":["__setter__\r"]},{"path":"./test262/test/built-ins/Object/prototype/__defineSetter__/setter-non-callable.js","esid":" sec-additional-properties-of-the-object.prototype-object\r","description":" Behavior when getter is not callable\r","info":" |\r[...]\r\n2. If IsCallable(setter) is false, throw a TypeError exception.\r\n","features":["Symbol","__setter__\r"]},{"path":"./test262/test/built-ins/Object/prototype/__defineSetter__/this-non-obj.js","esid":" sec-additional-properties-of-the-object.prototype-object\r","description":" Behavior when \"this\" value is not Object-coercible\r","info":" |\r1. Let O be ? ToObject(this value).\r\n","features":["__setter__\r"]},{"path":"./test262/test/built-ins/Object/prototype/__lookupGetter__/key-invalid.js","esid":" sec-additional-properties-of-the-object.prototype-object\r","description":" Behavior when property key cannot be derived\r","info":" |\r[...]\r\n2. Let key be ? ToPropertyKey(P).\r\n","features":["__getter__\r"]},{"path":"./test262/test/built-ins/Object/prototype/__lookupGetter__/length.js","esid":" sec-additional-properties-of-the-object.prototype-object\r","description":" Object.prototype.__lookupGetter__ `length` property\r","info":" |\rES6 Section 17:\r\nEvery built-in Function object, including constructors, has a length\r\nproperty whose value is an integer. Unless otherwise specified, this value\r\nis equal to the largest number of named arguments shown in the subclause\r\nheadings for the function description, including optional parameters.\r\n\r\n[...]\r\n\r\nUnless otherwise specified, the length property of a built-in Function\r\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\r\n[[Configurable]]: true }.\r\n","includes":["propertyHelper.js\r"],"features":["__getter__\r"]},{"path":"./test262/test/built-ins/Object/prototype/__lookupGetter__/lookup-not-found.js","esid":" sec-additional-properties-of-the-object.prototype-object\r","description":" Behavior when property does not exist in prototype chain\r","info":" |\r[...]\r\n4. Repeat\r\na. Let desc be ? O.[[GetOwnProperty]](key).\r\nb. If desc is not undefined, then\r\ni. If IsAccessorDescriptor(desc) is true, return desc.[[Get]].\r\nii. Return undefined.\r\nc. Let O be ? O.[[GetPrototypeOf]]().\r\nd. If O is null, return undefined.\r\n","features":["__getter__\r"]},{"path":"./test262/test/built-ins/Object/prototype/__lookupGetter__/lookup-own-acsr-w-getter.js","esid":" sec-additional-properties-of-the-object.prototype-object\r","description":" >\rBehavior when \"this\" value defines a like-named accessor property with a\r\n`get` method\r\n","info":" |\r[...]\r\n4. Repeat\r\na. Let desc be ? O.[[GetOwnProperty]](key).\r\nb. If desc is not undefined, then\r\ni. If IsAccessorDescriptor(desc) is true, return desc.[[Get]].\r\nii. Return undefined.\r\nc. Let O be ? O.[[GetPrototypeOf]]().\r\nd. If O is null, return undefined.\r\n","features":["__getter__\r"]},{"path":"./test262/test/built-ins/Object/prototype/__lookupGetter__/lookup-own-acsr-wo-getter.js","esid":" sec-additional-properties-of-the-object.prototype-object\r","description":" >\rBehavior when \"this\" value defines a like-named accessor property without a\r\n`get` method\r\n","info":" |\r[...]\r\n4. Repeat\r\na. Let desc be ? O.[[GetOwnProperty]](key).\r\nb. If desc is not undefined, then\r\ni. If IsAccessorDescriptor(desc) is true, return desc.[[Get]].\r\nii. Return undefined.\r\nc. Let O be ? O.[[GetPrototypeOf]]().\r\nd. If O is null, return undefined.\r\n","features":["__getter__\r"]},{"path":"./test262/test/built-ins/Object/prototype/__lookupGetter__/lookup-own-data.js","esid":" sec-additional-properties-of-the-object.prototype-object\r","description":" Behavior when \"this\" value defines a like-named data property\r","info":" |\r[...]\r\n4. Repeat\r\na. Let desc be ? O.[[GetOwnProperty]](key).\r\nb. If desc is not undefined, then\r\ni. If IsAccessorDescriptor(desc) is true, return desc.[[Get]].\r\nii. Return undefined.\r\nc. Let O be ? O.[[GetPrototypeOf]]().\r\nd. If O is null, return undefined.\r\n","features":["__getter__\r"]},{"path":"./test262/test/built-ins/Object/prototype/__lookupGetter__/lookup-own-get-err.js","esid":" sec-additional-properties-of-the-object.prototype-object\r","description":" >\rBehavior when [[GetOwnProperty]] of \"this\" value returns an abrupt\r\ncompletion\r\n","info":" |\r[...]\r\n4. Repeat\r\na. Let desc be ? O.[[GetOwnProperty]](key).\r\nb. If desc is not undefined, then\r\ni. If IsAccessorDescriptor(desc) is true, return desc.[[Get]].\r\nii. Return undefined.\r\nc. Let O be ? O.[[GetPrototypeOf]]().\r\nd. If O is null, return undefined.\r\n","features":["Proxy","__getter__\r"]},{"path":"./test262/test/built-ins/Object/prototype/__lookupGetter__/lookup-own-proto-err.js","esid":" sec-additional-properties-of-the-object.prototype-object\r","description":" >\rBehavior when [[GetPrototypeOf]] of \"this\" value returns an abrupt\r\ncompletion\r\n","info":" |\r[...]\r\n4. Repeat\r\na. Let desc be ? O.[[GetOwnProperty]](key).\r\nb. If desc is not undefined, then\r\ni. If IsAccessorDescriptor(desc) is true, return desc.[[Get]].\r\nii. Return undefined.\r\nc. Let O be ? O.[[GetPrototypeOf]]().\r\nd. If O is null, return undefined.\r\n","features":["Proxy","__getter__\r"]},{"path":"./test262/test/built-ins/Object/prototype/__lookupGetter__/lookup-proto-acsr-w-getter.js","esid":" sec-additional-properties-of-the-object.prototype-object\r","description":" >\rBehavior when prototype defines a like-named accessor property with a `get`\r\nmethod\r\n","info":" |\r[...]\r\n4. Repeat\r\na. Let desc be ? O.[[GetOwnProperty]](key).\r\nb. If desc is not undefined, then\r\ni. If IsAccessorDescriptor(desc) is true, return desc.[[Get]].\r\nii. Return undefined.\r\nc. Let O be ? O.[[GetPrototypeOf]]().\r\nd. If O is null, return undefined.\r\n","features":["__getter__\r"]},{"path":"./test262/test/built-ins/Object/prototype/__lookupGetter__/lookup-proto-acsr-wo-getter.js","esid":" sec-additional-properties-of-the-object.prototype-object\r","description":" >\rBehavior when prototype defines a like-named accessor property without a\r\n`get` method\r\n","info":" |\r[...]\r\n4. Repeat\r\na. Let desc be ? O.[[GetOwnProperty]](key).\r\nb. If desc is not undefined, then\r\ni. If IsAccessorDescriptor(desc) is true, return desc.[[Get]].\r\nii. Return undefined.\r\nc. Let O be ? O.[[GetPrototypeOf]]().\r\nd. If O is null, return undefined.\r\n","features":["__getter__\r"]},{"path":"./test262/test/built-ins/Object/prototype/__lookupGetter__/lookup-proto-data.js","esid":" sec-additional-properties-of-the-object.prototype-object\r","description":" Behavior when prototype defines a like-named data property\r","info":" |\r[...]\r\n4. Repeat\r\na. Let desc be ? O.[[GetOwnProperty]](key).\r\nb. If desc is not undefined, then\r\ni. If IsAccessorDescriptor(desc) is true, return desc.[[Get]].\r\nii. Return undefined.\r\nc. Let O be ? O.[[GetPrototypeOf]]().\r\nd. If O is null, return undefined.\r\n","features":["__getter__\r"]},{"path":"./test262/test/built-ins/Object/prototype/__lookupGetter__/lookup-proto-get-err.js","esid":" sec-additional-properties-of-the-object.prototype-object\r","description":" >\rBehavior when [[GetOwnProperty]] of prototype returns an abrupt completion\r\n","info":" |\r[...]\r\n4. Repeat\r\na. Let desc be ? O.[[GetOwnProperty]](key).\r\nb. If desc is not undefined, then\r\ni. If IsAccessorDescriptor(desc) is true, return desc.[[Get]].\r\nii. Return undefined.\r\nc. Let O be ? O.[[GetPrototypeOf]]().\r\nd. If O is null, return undefined.\r\n","features":["Proxy","__getter__\r"]},{"path":"./test262/test/built-ins/Object/prototype/__lookupGetter__/lookup-proto-proto-err.js","esid":" sec-additional-properties-of-the-object.prototype-object\r","description":" >\rBehavior when [[GetPrototypeOf]] of prototype returns an abrupt completion\r\n","info":" |\r[...]\r\n4. Repeat\r\na. Let desc be ? O.[[GetOwnProperty]](key).\r\nb. If desc is not undefined, then\r\ni. If IsAccessorDescriptor(desc) is true, return desc.[[Get]].\r\nii. Return undefined.\r\nc. Let O be ? O.[[GetPrototypeOf]]().\r\nd. If O is null, return undefined.\r\n","features":["Proxy","__getter__\r"]},{"path":"./test262/test/built-ins/Object/prototype/__lookupGetter__/name.js","esid":" sec-additional-properties-of-the-object.prototype-object\r","description":" Object.prototype.__lookupGetter__ `name` property\r","info":" |\rES6 Section 17:\r\n\r\nEvery built-in Function object, including constructors, that is not\r\nidentified as an anonymous function has a name property whose value is a\r\nString. Unless otherwise specified, this value is the name that is given to\r\nthe function in this specification.\r\n\r\n[...]\r\n\r\nUnless otherwise specified, the name property of a built-in Function\r\nobject, if it exists, has the attributes { [[Writable]]: false,\r\n[[Enumerable]]: false, [[Configurable]]: true }.\r\n","includes":["propertyHelper.js\r"],"features":["__getter__\r"]},{"path":"./test262/test/built-ins/Object/prototype/__lookupGetter__/this-non-obj.js","esid":" sec-additional-properties-of-the-object.prototype-object\r","description":" Behavior when \"this\" value is not Object-coercible\r","info":" |\r1. Let O be ? ToObject(this value).\r\n","features":["__getter__\r"]},{"path":"./test262/test/built-ins/Object/prototype/__lookupSetter__/key-invalid.js","esid":" sec-additional-properties-of-the-object.prototype-object\r","description":" Behavior when property key cannot be derived\r","info":" |\r[...]\r\n2. Let key be ? ToPropertyKey(P).\r\n","features":["__setter__\r"]},{"path":"./test262/test/built-ins/Object/prototype/__lookupSetter__/length.js","esid":" sec-additional-properties-of-the-object.prototype-object\r","description":" Object.prototype.__lookupSetter__ `length` property\r","info":" |\rES6 Section 17:\r\nEvery built-in Function object, including constructors, has a length\r\nproperty whose value is an integer. Unless otherwise specified, this value\r\nis equal to the largest number of named arguments shown in the subclause\r\nheadings for the function description, including optional parameters.\r\n\r\n[...]\r\n\r\nUnless otherwise specified, the length property of a built-in Function\r\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\r\n[[Configurable]]: true }.\r\n","includes":["propertyHelper.js\r"],"features":["__setter__\r"]},{"path":"./test262/test/built-ins/Object/prototype/__lookupSetter__/lookup-not-found.js","esid":" sec-additional-properties-of-the-object.prototype-object\r","description":" Behavior when property does not exist in prototype chain\r","info":" |\r[...]\r\n4. Repeat\r\na. Let desc be ? O.[[GetOwnProperty]](key).\r\nb. If desc is not undefined, then\r\ni. If IsAccessorDescriptor(desc) is true, return desc.[[Get]].\r\nii. Return undefined.\r\nc. Let O be ? O.[[GetPrototypeOf]]().\r\nd. If O is null, return undefined.\r\n","features":["__setter__\r"]},{"path":"./test262/test/built-ins/Object/prototype/__lookupSetter__/lookup-own-acsr-w-setter.js","esid":" sec-additional-properties-of-the-object.prototype-object\r","description":" >\rBehavior when \"this\" value defines a like-named accessor property with a\r\n`set` method\r\n","info":" |\r[...]\r\n4. Repeat\r\na. Let desc be ? O.[[GetOwnProperty]](key).\r\nb. If desc is not undefined, then\r\ni. If IsAccessorDescriptor(desc) is true, return desc.[[Set]].\r\nii. Return undefined.\r\nc. Let O be ? O.[[GetPrototypeOf]]().\r\nd. If O is null, return undefined.\r\n","features":["__setter__\r"]},{"path":"./test262/test/built-ins/Object/prototype/__lookupSetter__/lookup-own-acsr-wo-setter.js","esid":" sec-additional-properties-of-the-object.prototype-object\r","description":" >\rBehavior when \"this\" value defines a like-named accessor property without a\r\n`set` method\r\n","info":" |\r[...]\r\n4. Repeat\r\na. Let desc be ? O.[[GetOwnProperty]](key).\r\nb. If desc is not undefined, then\r\ni. If IsAccessorDescriptor(desc) is true, return desc.[[Set]].\r\nii. Return undefined.\r\nc. Let O be ? O.[[GetPrototypeOf]]().\r\nd. If O is null, return undefined.\r\n","features":["__setter__\r"]},{"path":"./test262/test/built-ins/Object/prototype/__lookupSetter__/lookup-own-data.js","esid":" sec-additional-properties-of-the-object.prototype-object\r","description":" Behavior when \"this\" value defines a like-named data property\r","info":" |\r[...]\r\n4. Repeat\r\na. Let desc be ? O.[[GetOwnProperty]](key).\r\nb. If desc is not undefined, then\r\ni. If IsAccessorDescriptor(desc) is true, return desc.[[Get]].\r\nii. Return undefined.\r\nc. Let O be ? O.[[GetPrototypeOf]]().\r\nd. If O is null, return undefined.\r\n","features":["__setter__\r"]},{"path":"./test262/test/built-ins/Object/prototype/__lookupSetter__/lookup-own-get-err.js","esid":" sec-additional-properties-of-the-object.prototype-object\r","description":" >\rBehavior when [[GetOwnProperty]] of \"this\" value returns an abrupt\r\ncompletion\r\n","info":" |\r[...]\r\n4. Repeat\r\na. Let desc be ? O.[[GetOwnProperty]](key).\r\nb. If desc is not undefined, then\r\ni. If IsAccessorDescriptor(desc) is true, return desc.[[Set]].\r\nii. Return undefined.\r\nc. Let O be ? O.[[GetPrototypeOf]]().\r\nd. If O is null, return undefined.\r\n","features":["Proxy","__setter__\r"]},{"path":"./test262/test/built-ins/Object/prototype/__lookupSetter__/lookup-own-proto-err.js","esid":" sec-additional-properties-of-the-object.prototype-object\r","description":" >\rBehavior when [[GetPrototypeOf]] of \"this\" value returns an abrupt\r\ncompletion\r\n","info":" |\r[...]\r\n4. Repeat\r\na. Let desc be ? O.[[GetOwnProperty]](key).\r\nb. If desc is not undefined, then\r\ni. If IsAccessorDescriptor(desc) is true, return desc.[[Get]].\r\nii. Return undefined.\r\nc. Let O be ? O.[[GetPrototypeOf]]().\r\nd. If O is null, return undefined.\r\n","features":["Proxy","__setter__\r"]},{"path":"./test262/test/built-ins/Object/prototype/__lookupSetter__/lookup-proto-acsr-w-setter.js","esid":" sec-additional-properties-of-the-object.prototype-object\r","description":" >\rBehavior when prototype defines a like-named accessor property with a `get`\r\nmethod\r\n","info":" |\r[...]\r\n4. Repeat\r\na. Let desc be ? O.[[GetOwnProperty]](key).\r\nb. If desc is not undefined, then\r\ni. If IsAccessorDescriptor(desc) is true, return desc.[[Set]].\r\nii. Return undefined.\r\nc. Let O be ? O.[[GetPrototypeOf]]().\r\nd. If O is null, return undefined.\r\n","features":["__setter__\r"]},{"path":"./test262/test/built-ins/Object/prototype/__lookupSetter__/lookup-proto-acsr-wo-setter.js","esid":" sec-additional-properties-of-the-object.prototype-object\r","description":" >\rBehavior when prototype defines a like-named accessor property without a\r\n`get` method\r\n","info":" |\r[...]\r\n4. Repeat\r\na. Let desc be ? O.[[GetOwnProperty]](key).\r\nb. If desc is not undefined, then\r\ni. If IsAccessorDescriptor(desc) is true, return desc.[[Set]].\r\nii. Return undefined.\r\nc. Let O be ? O.[[GetPrototypeOf]]().\r\nd. If O is null, return undefined.\r\n","features":["__setter__\r"]},{"path":"./test262/test/built-ins/Object/prototype/__lookupSetter__/lookup-proto-data.js","esid":" sec-additional-properties-of-the-object.prototype-object\r","description":" Behavior when prototype defines a like-named data property\r","info":" |\r[...]\r\n4. Repeat\r\na. Let desc be ? O.[[GetOwnProperty]](key).\r\nb. If desc is not undefined, then\r\ni. If IsAccessorDescriptor(desc) is true, return desc.[[Get]].\r\nii. Return undefined.\r\nc. Let O be ? O.[[GetPrototypeOf]]().\r\nd. If O is null, return undefined.\r\n","features":["__setter__\r"]},{"path":"./test262/test/built-ins/Object/prototype/__lookupSetter__/lookup-proto-get-err.js","esid":" sec-additional-properties-of-the-object.prototype-object\r","description":" >\rBehavior when [[GetOwnProperty]] of prototype returns an abrupt completion\r\n","info":" |\r[...]\r\n4. Repeat\r\na. Let desc be ? O.[[GetOwnProperty]](key).\r\nb. If desc is not undefined, then\r\ni. If IsAccessorDescriptor(desc) is true, return desc.[[Set]].\r\nii. Return undefined.\r\nc. Let O be ? O.[[GetPrototypeOf]]().\r\nd. If O is null, return undefined.\r\n","features":["Proxy","__setter__\r"]},{"path":"./test262/test/built-ins/Object/prototype/__lookupSetter__/lookup-proto-proto-err.js","esid":" sec-additional-properties-of-the-object.prototype-object\r","description":" >\rBehavior when [[GetPrototypeOf]] of prototype returns an abrupt completion\r\n","info":" |\r[...]\r\n4. Repeat\r\na. Let desc be ? O.[[GetOwnProperty]](key).\r\nb. If desc is not undefined, then\r\ni. If IsAccessorDescriptor(desc) is true, return desc.[[Set]].\r\nii. Return undefined.\r\nc. Let O be ? O.[[GetPrototypeOf]]().\r\nd. If O is null, return undefined.\r\n","features":["Proxy","__setter__\r"]},{"path":"./test262/test/built-ins/Object/prototype/__lookupSetter__/name.js","esid":" sec-additional-properties-of-the-object.prototype-object\r","description":" Object.prototype.__lookupSetter__ `name` property\r","info":" |\rES6 Section 17:\r\n\r\nEvery built-in Function object, including constructors, that is not\r\nidentified as an anonymous function has a name property whose value is a\r\nString. Unless otherwise specified, this value is the name that is given to\r\nthe function in this specification.\r\n\r\n[...]\r\n\r\nUnless otherwise specified, the name property of a built-in Function\r\nobject, if it exists, has the attributes { [[Writable]]: false,\r\n[[Enumerable]]: false, [[Configurable]]: true }.\r\n","includes":["propertyHelper.js\r"],"features":["__setter__\r"]},{"path":"./test262/test/built-ins/Object/prototype/__lookupSetter__/this-non-obj.js","esid":" sec-additional-properties-of-the-object.prototype-object\r","description":" Behavior when \"this\" value is not Object-coercible\r","info":" |\r1. Let O be ? ToObject(this value).\r\n","features":["__setter__\r"]},{"path":"./test262/test/built-ins/Object/seal/seal-asyncarrowfunction.js","esid":" sec-object.seal\r","description":" >\rObject.seal AsyncArrowFunction\r\n","info":" |\rIf Type(O) is not Object, return O.\r\nLet status be ? SetIntegrityLevel(O, sealed).\r\n\r\nSetIntegrityLevel ( O, level )\r\n\r\nAssert: Type(O) is Object.\r\nAssert: level is either sealed or frozen.\r\nLet status be ? O.[[PreventExtensions]]().\r\nIf status is false, return false.\r\nLet keys be ? O.[[OwnPropertyKeys]]().\r\nIf level is sealed, then\r\nFor each element k of keys, do\r\nPerform ? DefinePropertyOrThrow(O, k, PropertyDescriptor { [[Configurable]]: false }).\r\nElse,\r\nAssert: level is frozen.\r\nFor each element k of keys, do\r\nLet currentDesc be ? O.[[GetOwnProperty]](k).\r\nIf currentDesc is not undefined, then\r\nIf IsAccessorDescriptor(currentDesc) is true, then\r\nLet desc be the PropertyDescriptor { [[Configurable]]: false }.\r\nElse,\r\nLet desc be the PropertyDescriptor { [[Configurable]]: false, [[Writable]]: false }.\r\nPerform ? DefinePropertyOrThrow(O, k, desc).\r\nReturn true.\r\n\r\n"},{"path":"./test262/test/built-ins/Object/seal/seal-asyncfunction.js","esid":" sec-object.seal\r","description":" >\rObject.seal AsyncFunction\r\n","info":" |\rIf Type(O) is not Object, return O.\r\nLet status be ? SetIntegrityLevel(O, sealed).\r\n\r\nSetIntegrityLevel ( O, level )\r\n\r\nAssert: Type(O) is Object.\r\nAssert: level is either sealed or frozen.\r\nLet status be ? O.[[PreventExtensions]]().\r\nIf status is false, return false.\r\nLet keys be ? O.[[OwnPropertyKeys]]().\r\nIf level is sealed, then\r\nFor each element k of keys, do\r\nPerform ? DefinePropertyOrThrow(O, k, PropertyDescriptor { [[Configurable]]: false }).\r\nElse,\r\nAssert: level is frozen.\r\nFor each element k of keys, do\r\nLet currentDesc be ? O.[[GetOwnProperty]](k).\r\nIf currentDesc is not undefined, then\r\nIf IsAccessorDescriptor(currentDesc) is true, then\r\nLet desc be the PropertyDescriptor { [[Configurable]]: false }.\r\nElse,\r\nLet desc be the PropertyDescriptor { [[Configurable]]: false, [[Writable]]: false }.\r\nPerform ? DefinePropertyOrThrow(O, k, desc).\r\nReturn true.\r\n\r\n"},{"path":"./test262/test/built-ins/Object/seal/seal-sharedarraybuffer.js","esid":" sec-object.seal\r","description":" >\rObject.seal SharedArrayBuffer\r\n","info":" |\rIf Type(O) is not Object, return O.\r\nLet status be ? SetIntegrityLevel(O, sealed).\r\n\r\nSetIntegrityLevel ( O, level )\r\n\r\nAssert: Type(O) is Object.\r\nAssert: level is either sealed or frozen.\r\nLet status be ? O.[[PreventExtensions]]().\r\nIf status is false, return false.\r\nLet keys be ? O.[[OwnPropertyKeys]]().\r\nIf level is sealed, then\r\nFor each element k of keys, do\r\nPerform ? DefinePropertyOrThrow(O, k, PropertyDescriptor { [[Configurable]]: false }).\r\nElse,\r\nAssert: level is frozen.\r\nFor each element k of keys, do\r\nLet currentDesc be ? O.[[GetOwnProperty]](k).\r\nIf currentDesc is not undefined, then\r\nIf IsAccessorDescriptor(currentDesc) is true, then\r\nLet desc be the PropertyDescriptor { [[Configurable]]: false }.\r\nElse,\r\nLet desc be the PropertyDescriptor { [[Configurable]]: false, [[Writable]]: false }.\r\nPerform ? DefinePropertyOrThrow(O, k, desc).\r\nReturn true.\r\n","features":["SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/allocation-limit.js","esid":" sec-sharedarraybuffer-length\r","description":" >\rThrows a RangeError if requested Data Block is too large.\r\n","info":" |\rSharedArrayBuffer( length )\r\n\r\n...\r\n3. Return AllocateSharedArrayBuffer(NewTarget, byteLength).\r\n\r\n6.2.7.2 CreateSharedByteDataBlock(size)\r\n...\r\n2. Let db be a new Shared Data Block value consisting of size\r\nbytes. If it is impossible to create such a Shared Data Block,\r\nthrow a RangeError exception.\r\n...\r\n","features":["SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/data-allocation-after-object-creation.js","esid":" sec-sharedarraybuffer-length\r","description":" >\rThe new SharedArrayBuffer instance is created prior to allocating the Data Block.\r\n","info":" |\rSharedArrayBuffer( length )\r\n\r\n...\r\n3. Return AllocateSharedArrayBuffer(NewTarget, byteLength).\r\n\r\nAllocateSharedArrayBuffer( constructor, byteLength )\r\n1. Let obj be ? OrdinaryCreateFromConstructor(constructor, \"%SharedArrayBufferPrototype%\",\r\n«[[ArrayBufferData]], [[ArrayBufferByteLength]]» ).\r\n...\r\n3. Let block be ? CreateByteDataBlock(byteLength).\r\n...\r\n","features":["SharedArrayBuffer","Reflect.construct\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/init-zero.js","esid":" sec-createsharedbytedatablock\r","description":" All bytes are initialized to zero\r","features":["SharedArrayBuffer","DataView\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/is-a-constructor.js","esid":" sec-ecmascript-standard-built-in-objects\r","description":" >\rThe SharedArrayBuffer constructor implements [[Construct]]\r\n","info":" |\rIsConstructor ( argument )\r\n\r\nThe abstract operation IsConstructor takes argument argument (an ECMAScript language value).\r\nIt determines if argument is a function object with a [[Construct]] internal method.\r\nIt performs the following steps when called:\r\n\r\nIf Type(argument) is not Object, return false.\r\nIf argument has a [[Construct]] internal method, return true.\r\nReturn false.\r\n","includes":["isConstructor.js\r"],"features":["Reflect.construct","SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/length-is-absent.js","esid":" sec-sharedarraybuffer-length\r","description":" >\rReturns an empty instance if length is absent\r\n","info":" |\rSharedArrayBuffer( length )\r\n\r\n1. If NewTarget is undefined, throw a TypeError exception.\r\n2. Let byteLength be ? ToIndex(length).\r\n3. Return ? AllocateSharedArrayBuffer(NewTarget, byteLength).\r\n","features":["SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/length-is-too-large-throws.js","esid":" sec-sharedarraybuffer-length\r","description":" >\rThrows a RangeError if length >= 2 ** 53\r\n","info":" |\rSharedArrayBuffer( length )\r\n\r\n1. If NewTarget is undefined, throw a TypeError exception.\r\n2. Let byteLength be ? ToIndex(length).\r\n\r\nToIndex( value )\r\n\r\n1. If value is undefined, then\r\na. Let index be 0.\r\n2. Else,\r\na. Let integerIndex be ? ToInteger(value).\r\nb. If integerIndex < 0, throw a RangeError exception.\r\n...\r\n","features":["SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/length.js","esid":" sec-sharedarraybuffer-constructor\r","description":" >\rSharedArrayBuffer.length is 1.\r\n","info":" |\rSharedArrayBuffer( length )\r\n\r\nECMAScript Standard Built-in Objects:\r\n\r\nEvery built-in function object, including constructors, has a length\r\nproperty whose value is an integer. Unless otherwise specified, this\r\nvalue is equal to the largest number of named arguments shown in the\r\nsubclause headings for the function description. Optional parameters\r\n(which are indicated with brackets: [ ]) or rest parameters (which\r\nare shown using the form «...name») are not included in the default\r\nargument count.\r\n\r\nUnless otherwise specified, the length property of a built-in function\r\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\r\n[[Configurable]]: true }.\r\n","includes":["propertyHelper.js\r"],"features":["SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/negative-length-throws.js","esid":" sec-sharedarraybuffer-length\r","description":" >\rThrows a Range Error if length represents an integer < 0\r\n","info":" |\rSharedArrayBuffer( length )\r\n\r\n1. If NewTarget is undefined, throw a TypeError exception.\r\n2. Let byteLength be ? ToIndex(length).\r\n\r\nToIndex( value )\r\n\r\n1. If value is undefined, then\r\na. Let index be 0.\r\n2. Else,\r\na. Let integerIndex be ? ToInteger(value).\r\nb. If integerIndex < 0, throw a RangeError exception.\r\n...\r\n","features":["SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/newtarget-prototype-is-not-object.js","esid":" sec-sharedarraybuffer-length\r","description":" >\r[[Prototype]] defaults to %SharedArrayBufferPrototype% if NewTarget.prototype is not an object.\r\n","info":" |\rSharedArrayBuffer( length )\r\n\r\nSharedArrayBuffer called with argument length performs the following steps:\r\n\r\n...\r\n3. Return AllocateSharedArrayBuffer(NewTarget, byteLength).\r\n\r\nAllocateSharedArrayBuffer( constructor, byteLength )\r\n1. Let obj be ? OrdinaryCreateFromConstructor(constructor, \"%SharedArrayBufferPrototype%\",\r\n«[[ArrayBufferData]], [[ArrayBufferByteLength]]» ).\r\n...\r\n","features":["SharedArrayBuffer","Symbol","Reflect.construct\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/options-maxbytelength-diminuitive.js","esid":" sec-sharedarraybuffer-constructor\r","description":" |\rInvoked with an options object whose `maxByteLength` property is less than\r\nthe length.\r\n","info":" |\rSharedArrayBuffer( length [ , options ] )\r\n\r\n1. If NewTarget is undefined, throw a TypeError exception.\r\n2. Let byteLength be ? ToIndex(length).\r\n3. Let requestedMaxByteLength be ? GetArrayBufferMaxByteLengthOption(options).\r\n4. If requestedMaxByteLength is empty, then\r\na. [...]\r\n5. If byteLength > requestedMaxByteLength, throw a RangeError exception.\r\n","features":["SharedArrayBuffer","resizable-arraybuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/options-maxbytelength-excessive.js","esid":" sec-sharedarraybuffer-constructor\r","description":" |\rInvoked with an options object whose `maxByteLength` property exceeds the\r\nmaximum length value\r\n","info":" |\rSharedArrayBuffer( length [ , options ] )\r\n\r\n1. If NewTarget is undefined, throw a TypeError exception.\r\n2. Let byteLength be ? ToIndex(length).\r\n3. Let requestedMaxByteLength be ? GetArrayBufferMaxByteLengthOption(options).\r\n[...]\r\n\r\n1.1.5 GetArrayBufferMaxByteLengthOption ( options )\r\n\r\n1. If Type(options) is not Object, return empty.\r\n2. Let maxByteLength be ? Get(options, \"maxByteLength\").\r\n3. If maxByteLength is undefined, return empty.\r\n4. Return ? ToIndex(maxByteLength).\r\n","features":["SharedArrayBuffer","resizable-arraybuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/options-maxbytelength-negative.js","esid":" sec-sharedarraybuffer-constructor\r","description":" Invoked with an options object whose `maxByteLength` property is negative\r","info":" |\rSharedArrayBuffer( length [ , options ] )\r\n\r\n1. If NewTarget is undefined, throw a TypeError exception.\r\n2. Let byteLength be ? ToIndex(length).\r\n3. Let requestedMaxByteLength be ? GetArrayBufferMaxByteLengthOption(options).\r\n[...]\r\n\r\n1.1.5 GetArrayBufferMaxByteLengthOption ( options )\r\n\r\n1. If Type(options) is not Object, return empty.\r\n2. Let maxByteLength be ? Get(options, \"maxByteLength\").\r\n3. If maxByteLength is undefined, return empty.\r\n4. Return ? ToIndex(maxByteLength).\r\n","features":["SharedArrayBuffer","resizable-arraybuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/options-maxbytelength-object.js","esid":" sec-sharedarraybuffer-constructor\r","description":" |\rInvoked with an options object whose `maxByteLength` property cannot be\r\ncoerced to a primitive value\r\n","info":" |\rSharedArrayBuffer( length [ , options ] )\r\n\r\n1. If NewTarget is undefined, throw a TypeError exception.\r\n2. Let byteLength be ? ToIndex(length).\r\n3. Let requestedMaxByteLength be ? GetArrayBufferMaxByteLengthOption(options).\r\n[...]\r\n\r\n1.1.5 GetArrayBufferMaxByteLengthOption ( options )\r\n\r\n1. If Type(options) is not Object, return empty.\r\n2. Let maxByteLength be ? Get(options, \"maxByteLength\").\r\n3. If maxByteLength is undefined, return empty.\r\n4. Return ? ToIndex(maxByteLength).\r\n","features":["SharedArrayBuffer","resizable-arraybuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/options-maxbytelength-poisoned.js","esid":" sec-sharedarraybuffer-constructor\r","description":" Invoked with an options object whose `maxByteLength` property throws\r","info":" |\rSharedArrayBuffer( length [ , options ] )\r\n\r\n1. If NewTarget is undefined, throw a TypeError exception.\r\n2. Let byteLength be ? ToIndex(length).\r\n3. Let requestedMaxByteLength be ? GetArrayBufferMaxByteLengthOption(options).\r\n[...]\r\n\r\n1.1.5 GetArrayBufferMaxByteLengthOption ( options )\r\n\r\n1. If Type(options) is not Object, return empty.\r\n2. Let maxByteLength be ? Get(options, \"maxByteLength\").\r\n","features":["SharedArrayBuffer","resizable-arraybuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/options-maxbytelength-undefined.js","esid":" sec-sharedarraybuffer-constructor\r","description":" Invoked with an options object whose `maxByteLength` property is undefined\r","info":" |\rSharedArrayBuffer( length [ , options ] )\r\n\r\n1. If NewTarget is undefined, throw a TypeError exception.\r\n2. Let byteLength be ? ToIndex(length).\r\n3. Let requestedMaxByteLength be ? GetArrayBufferMaxByteLengthOption(options).\r\n4. If requestedMaxByteLength is empty, then\r\na. Return ? AllocateSharedArrayBuffer(NewTarget, byteLength).\r\n\r\n1.1.5 GetArrayBufferMaxByteLengthOption ( options )\r\n\r\n1. If Type(options) is not Object, return empty.\r\n2. Let maxByteLength be ? Get(options, \"maxByteLength\").\r\n3. If maxByteLength is undefined, return empty.\r\n","features":["SharedArrayBuffer","resizable-arraybuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/proto-from-ctor-realm.js","esid":" sec-sharedarraybuffer-length\r","description":" Default [[Prototype]] value derived from realm of the newTarget\r","info":" |\r[...]\r\n3. Return ? AllocateSharedArrayBuffer(NewTarget, byteLength).\r\n\r\n9.1.14 GetPrototypeFromConstructor\r\n\r\n[...]\r\n3. Let proto be ? Get(constructor, \"prototype\").\r\n4. If Type(proto) is not Object, then\r\na. Let realm be ? GetFunctionRealm(constructor).\r\nb. Let proto be realm's intrinsic object named intrinsicDefaultProto.\r\n[...]\r\n","features":["SharedArrayBuffer","cross-realm","Reflect\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/byteLength/invoked-as-accessor.js","description":" Requires this value to have a [[ArrayBufferData]] internal slot\r","features":["SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/byteLength/invoked-as-func.js","description":" Throws a TypeError exception when invoked as a function\r","features":["SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/byteLength/length.js","description":" >\rget SharedArrayBuffer.prototype.byteLength.length is 0.\r\n","includes":["propertyHelper.js\r"],"features":["SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/byteLength/name.js","description":" >\rget SharedArrayBuffer.prototype.byteLength\r\n\r\n","includes":["propertyHelper.js\r"],"features":["SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/byteLength/prop-desc.js","description":" >\r\"byteLength\" property of SharedArrayBuffer.prototype\r\n","includes":["propertyHelper.js\r"],"features":["SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/byteLength/return-bytelength.js","description":" Return value from [[ByteLength]] internal slot\r","features":["SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/byteLength/this-has-no-typedarrayname-internal.js","description":" >\rThrows a TypeError exception when `this` does not have a [[ArrayBufferData]]\r\ninternal slot\r\n","features":["SharedArrayBuffer","DataView","Int8Array\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/byteLength/this-is-arraybuffer.js","esid":" sec-get-sharedarraybuffer.prototype.bytelength\r","description":" Throws a TypeError exception when `this` is an ArrayBuffer\r","features":["SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/byteLength/this-is-not-object.js","description":" Throws a TypeError exception when `this` is not Object\r","features":["SharedArrayBuffer","Symbol\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/constructor.js","description":" >\rThe `SharedArrayBuffer.prototype.constructor` property descriptor.\r\n","includes":["propertyHelper.js\r"],"features":["SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/grow/descriptor.js","esid":" sec-sharedarraybuffer.prototype.grow\r","description":" >\rSharedArrayBuffer.prototype.grow has default data property attributes.\r\n","info":" |\rSharedArrayBuffer.prototype.grow ( newLength )\r\n\r\n17 ECMAScript Standard Built-in Objects:\r\nEvery other data property described in clauses 18 through 26 and in\r\nAnnex B.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false,\r\n[[Configurable]]: true } unless otherwise specified.\r\n","includes":["propertyHelper.js\r"],"features":["SharedArrayBuffer","resizable-arraybuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/grow/extensible.js","esid":" sec-sharedarraybuffer.prototype.grow\r","description":" SharedArrayBuffer.prototype.grow is extensible.\r","info":" |\rSharedArrayBuffer.prototype.grow ( newLength )\r\n\r\n17 ECMAScript Standard Built-in Objects:\r\nUnless specified otherwise, the [[Extensible]] internal slot\r\nof a built-in object initially has the value true.\r\n","features":["SharedArrayBuffer","resizable-arraybuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/grow/grow-larger-size.js","esid":" sec-sharedarraybuffer.prototype.grow\r","description":" >\rBehavior when attempting to grow a growable array buffer to a larger size\r\n","info":" |\rSharedArrayBuffer.prototype.grow ( newLength )\r\n\r\n1. Let O be the this value.\r\n2. Perform ? RequireInternalSlot(O, [[ArrayBufferMaxByteLength]]).\r\n3. If IsSharedArrayBuffer(O) is false throw a TypeError exception.\r\n4. Let newByteLength be ? ToIntegerOrInfinity(newLength).\r\n5. Let hostHandled be ? HostGrowSharedArrayBuffer(O, newByteLength).\r\n6. If hostHandled is handled, return undefined.\r\n[...]\r\n","features":["SharedArrayBuffer","resizable-arraybuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/grow/grow-same-size.js","esid":" sec-sharedarraybuffer.prototype.grow\r","description":" >\rBehavior when attempting to grow a growable array buffer to its current size\r\n","info":" |\rSharedArrayBuffer.prototype.grow ( newLength )\r\n\r\n1. Let O be the this value.\r\n2. Perform ? RequireInternalSlot(O, [[ArrayBufferMaxByteLength]]).\r\n3. If IsSharedArrayBuffer(O) is false throw a TypeError exception.\r\n4. Let newByteLength be ? ToIntegerOrInfinity(newLength).\r\n5. Let hostHandled be ? HostGrowSharedArrayBuffer(O, newByteLength).\r\n6. If hostHandled is handled, return undefined.\r\n[...]\r\n","features":["SharedArrayBuffer","resizable-arraybuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/grow/grow-smaller-size.js","esid":" sec-sharedarraybuffer.prototype.grow\r","description":" >\rBehavior when attempting to grow a growable array buffer to a smaller size\r\n","info":" |\rSharedArrayBuffer.prototype.grow ( newLength )\r\n\r\n1. Let O be the this value.\r\n2. Perform ? RequireInternalSlot(O, [[ArrayBufferMaxByteLength]]).\r\n3. If IsSharedArrayBuffer(O) is false throw a TypeError exception.\r\n4. Let newByteLength be ? ToIntegerOrInfinity(newLength).\r\n5. Let hostHandled be ? HostGrowSharedArrayBuffer(O, newByteLength).\r\n6. If hostHandled is handled, return undefined.\r\n[...]\r\n","features":["SharedArrayBuffer","resizable-arraybuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/grow/length.js","esid":" sec-sharedarraybuffer.prototype.grow\r","description":" >\rSharedArrayBuffer.prototype.grow.length is 1.\r\n","info":" |\rSharedArrayBuffer.prototype.grow ( newLength )\r\n\r\n17 ECMAScript Standard Built-in Objects:\r\nEvery built-in Function object, including constructors, has a length\r\nproperty whose value is an integer. Unless otherwise specified, this\r\nvalue is equal to the largest number of named arguments shown in the\r\nsubclause headings for the function description, including optional\r\nparameters. However, rest parameters shown using the form “...name”\r\nare not included in the default argument count.\r\n\r\nUnless otherwise specified, the length property of a built-in Function\r\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\r\n[[Configurable]]: true }.\r\n","includes":["propertyHelper.js\r"],"features":["SharedArrayBuffer","resizable-arraybuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/grow/name.js","esid":" sec-sharedarraybuffer.prototype.grow\r","description":" >\rSharedArrayBuffer.prototype.grow.name is \"grow\".\r\n","info":" |\rSharedArrayBuffer.prototype.grow ( newLength )\r\n\r\n17 ECMAScript Standard Built-in Objects:\r\nEvery built-in Function object, including constructors, that is not\r\nidentified as an anonymous function has a name property whose value\r\nis a String.\r\n\r\nUnless otherwise specified, the name property of a built-in Function\r\nobject, if it exists, has the attributes { [[Writable]]: false,\r\n[[Enumerable]]: false, [[Configurable]]: true }.\r\n","features":["SharedArrayBuffer","resizable-arraybuffer\r"],"includes":["propertyHelper.js\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/grow/new-length-excessive.js","esid":" sec-sharedarraybuffer.prototype.grow\r","description":" >\rThrows a RangeError the newLength value is larger than the max byte length\r\n","info":" |\rSharedArrayBuffer.prototype.grow ( newLength )\r\n\r\n1. Let O be the this value.\r\n2. Perform ? RequireInternalSlot(O, [[ArrayBufferMaxByteLength]]).\r\n3. If IsSharedArrayBuffer(O) is false, throw a TypeError exception.\r\n4. Let newByteLength be ? ToIntegerOrInfinity(newLength).\r\n5. If newByteLength < 0 or newByteLength > O.[[ArrayBufferMaxByteLength]],\r\nthrow a RangeError exception.\r\n[...]\r\n","features":["SharedArrayBuffer","resizable-arraybuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/grow/new-length-negative.js","esid":" sec-sharedarraybuffer.prototype.grow\r","description":" >\rThrows a RangeError the newLength value is less than zero\r\n","info":" |\rSharedArrayBuffer.prototype.grow ( newLength )\r\n\r\n1. Let O be the this value.\r\n2. Perform ? RequireInternalSlot(O, [[ArrayBufferMaxByteLength]]).\r\n3. If IsSharedArrayBuffer(O) is false, throw a TypeError exception.\r\n4. Let newByteLength be ? ToIntegerOrInfinity(newLength).\r\n5. If newByteLength < 0 or newByteLength > O.[[ArrayBufferMaxByteLength]],\r\nthrow a RangeError exception.\r\n[...]\r\n","features":["SharedArrayBuffer","resizable-arraybuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/grow/new-length-non-number.js","esid":" sec-sharedarraybuffer.prototype.grow\r","description":" Throws a TypeError if provided length cannot be coerced to a number\r","info":" |\rSharedArrayBuffer.prototype.grow ( newLength )\r\n\r\n1. Let O be the this value.\r\n2. Perform ? RequireInternalSlot(O, [[ArrayBufferMaxByteLength]]).\r\n3. If IsSharedArrayBuffer(O) is false, throw a TypeError exception.\r\n4. Let newByteLength be ? ToIntegerOrInfinity(newLength).\r\n[...]\r\n","features":["SharedArrayBuffer","resizable-arraybuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/grow/nonconstructor.js","esid":" sec-sharedarraybuffer.prototype.grow\r","description":" >\rSharedArrayBuffer.prototype.grow is not a constructor function.\r\n","info":" |\rSharedArrayBuffer.prototype.grow ( newLength )\r\n\r\n17 ECMAScript Standard Built-in Objects:\r\nBuilt-in function objects that are not identified as constructors do not\r\nimplement the [[Construct]] internal method unless otherwise specified\r\nin the description of a particular function.\r\n","features":["SharedArrayBuffer","resizable-arraybuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/grow/this-is-not-arraybuffer-object.js","esid":" sec-sharedarraybuffer.prototype.grow\r","description":" >\rThrows a TypeError if `this` does not have an [[ArrayBufferData]] internal slot.\r\n","info":" |\rSharedArrayBuffer.prototype.grow ( newLength )\r\n\r\n1. Let O be the this value.\r\n2. Perform ? RequireInternalSlot(O, [[ArrayBufferMaxByteLength]]).\r\n[...]\r\n","features":["SharedArrayBuffer","resizable-arraybuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/grow/this-is-not-resizable-arraybuffer-object.js","esid":" sec-sharedarraybuffer.prototype.grow\r","description":" >\rThrows a TypeError if `this` does not have an [[ArrayBufferMaxByteLength]] internal slot.\r\n","info":" |\rSharedArrayBuffer.prototype.grow ( newLength )\r\n\r\n1. Let O be the this value.\r\n2. Perform ? RequireInternalSlot(O, [[ArrayBufferMaxByteLength]]).\r\n[...]\r\n","features":["SharedArrayBuffer","resizable-arraybuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/grow/this-is-sharedarraybuffer.js","esid":" sec-sharedarraybuffer.prototype.grow\r","description":" Throws a TypeError if `this` value is an ArrayBuffer\r","info":" |\rSharedArrayBuffer.prototype.grow ( newLength )\r\n\r\n1. Let O be the this value.\r\n2. Perform ? RequireInternalSlot(O, [[ArrayBufferMaxByteLength]]).\r\n3. If IsSharedArrayBuffer(O) is false, throw a TypeError exception.\r\n[...]\r\n","features":["ArrayBuffer","SharedArrayBuffer","resizable-arraybuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/growable/invoked-as-accessor.js","esid":" sec-get-sharedarraybuffer.prototype.growable\r","description":" Requires this value to have a [[ArrayBufferData]] internal slot\r","info":" |\rget SharedArrayBuffer.prototype.growable\r\n\r\n1. Let O be the this value.\r\n2. Perform ? RequireInternalSlot(O, [[ArrayBufferData]]).\r\n[...]\r\n","features":["SharedArrayBuffer","resizable-arraybuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/growable/invoked-as-func.js","esid":" sec-get-sharedarraybuffer.prototype.growable\r","description":" Throws a TypeError exception when invoked as a function\r","info":" |\rget SharedArrayBuffer.prototype.growable\r\n\r\n1. Let O be the this value.\r\n2. Perform ? RequireInternalSlot(O, [[ArrayBufferData]]).\r\n[...]\r\n","features":["SharedArrayBuffer","resizable-arraybuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/growable/length.js","esid":" sec-get-sharedarraybuffer.prototype.growable\r","description":" >\rget SharedArrayBuffer.prototype.growable.length is 0.\r\n","info":" |\rget SharedArrayBuffer.prototype.resizeable\r\n\r\n17 ECMAScript Standard Built-in Objects:\r\nEvery built-in Function object, including constructors, has a length\r\nproperty whose value is an integer. Unless otherwise specified, this\r\nvalue is equal to the largest number of named arguments shown in the\r\nsubclause headings for the function description, including optional\r\nparameters. However, rest parameters shown using the form “...name”\r\nare not included in the default argument count.\r\n\r\nUnless otherwise specified, the length property of a built-in Function\r\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\r\n[[Configurable]]: true }.\r\n","includes":["propertyHelper.js\r"],"features":["SharedArrayBuffer","resizable-arraybuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/growable/name.js","esid":" sec-get-sharedarraybuffer.prototype.growable\r","description":" >\rget SharedArrayBuffer.prototype.growable\r\n\r\n17 ECMAScript Standard Built-in Objects\r\n\r\nFunctions that are specified as get or set accessor functions of built-in\r\nproperties have \"get \" or \"set \" prepended to the property name string.\r\n\r\n","includes":["propertyHelper.js\r"],"features":["SharedArrayBuffer","resizable-arraybuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/growable/prop-desc.js","esid":" sec-get-sharedarraybuffer.prototype.growable\r","description":" >\r\"growable\" property of SharedArrayBuffer.prototype\r\n","info":" |\rSharedArrayBuffer.prototype.growable is an accessor property whose set accessor\r\nfunction is undefined.\r\n\r\nSection 17: Every accessor property described in clauses 18 through 26 and in\r\nAnnex B.2 has the attributes {[[Enumerable]]: false, [[Configurable]]: true }\r\n","includes":["propertyHelper.js\r"],"features":["SharedArrayBuffer","resizable-arraybuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/growable/return-growable.js","esid":" sec-get-sharedarraybuffer.prototype.growable\r","description":" Return value according to [[ArrayBufferMaxByteLength]] internal slot\r","info":" |\rget SharedArrayBuffer.prototype.growable\r\n\r\n1. Let O be the this value.\r\n2. Perform ? RequireInternalSlot(O, [[ArrayBufferData]]).\r\n3. If IsSharedArrayBuffer(O) is false, throw a TypeError exception.\r\n4. Return IsResizableArrayBuffer(O).\r\n\r\nIsResizableArrayBuffer ( arrayBuffer )\r\n\r\n1. Assert: Type(arrayBuffer) is Object and arrayBuffer has an\r\n[[ArrayBufferData]] internal slot.\r\n2. If buffer has an [[ArrayBufferMaxByteLength]] internal slot, return true.\r\n3. Return false.\r\n","features":["SharedArrayBuffer","resizable-arraybuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/growable/this-has-no-arraybufferdata-internal.js","esid":" sec-get-sharedarraybuffer.prototype.growable\r","description":" >\rThrows a TypeError exception when `this` does not have a [[ArrayBufferData]]\r\ninternal slot\r\n","info":" |\rget SharedArrayBuffer.prototype.growable\r\n\r\n1. Let O be the this value.\r\n2. Perform ? RequireInternalSlot(O, [[ArrayBufferData]]).\r\n[...]\r\n","features":["DataView","SharedArrayBuffer","TypedArray","resizable-arraybuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/growable/this-is-arraybuffer.js","esid":" sec-get-sharedarraybuffer.prototype.growable\r","description":" Throws a TypeError exception when `this` is an ArrayBuffer\r","info":" |\rget SharedArrayBuffer.prototype.growable\r\n\r\n1. Let O be the this value.\r\n2. Perform ? RequireInternalSlot(O, [[ArrayBufferData]]).\r\n3. If IsSharedArrayBuffer(O) is false, throw a TypeError exception.\r\n[...]\r\n","features":["ArrayBuffer","SharedArrayBuffer","resizable-arraybuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/growable/this-is-not-object.js","esid":" sec-get-sharedarraybuffer.prototype.growable\r","description":" Throws a TypeError exception when `this` is not Object\r","info":" |\rget SharedArrayBuffer.prototype.growable\r\n\r\n1. Let O be the this value.\r\n2. Perform ? RequireInternalSlot(O, [[ArrayBufferData]]).\r\n[...]\r\n","features":["SharedArrayBuffer","Symbol","resizable-arraybuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/maxByteLength/invoked-as-accessor.js","esid":" sec-get-sharedarraybuffer.prototype.maxbytelength\r","description":" Requires this value to have a [[ArrayBufferData]] internal slot\r","info":" |\rget SharedArrayBuffer.prototype.maxByteLength\r\n\r\n1. Let O be the this value.\r\n2. Perform ? RequireInternalSlot(O, [[ArrayBufferData]]).\r\n[...]\r\n","features":["SharedArrayBuffer","resizable-arraybuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/maxByteLength/invoked-as-func.js","esid":" sec-get-sharedarraybuffer.prototype.maxbytelength\r","description":" Throws a TypeError exception when invoked as a function\r","info":" |\rget SharedArrayBuffer.prototype.maxByteLength\r\n\r\n1. Let O be the this value.\r\n2. Perform ? RequireInternalSlot(O, [[ArrayBufferData]]).\r\n[...]\r\n","features":["SharedArrayBuffer","resizable-arraybuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/maxByteLength/length.js","esid":" sec-get-sharedarraybuffer.prototype.maxbytelength\r","description":" >\rget SharedArrayBuffer.prototype.maxByteLength.length is 0.\r\n","info":" |\rget SharedArrayBuffer.prototype.maxByteLength\r\n\r\n17 ECMAScript Standard Built-in Objects:\r\nEvery built-in Function object, including constructors, has a length\r\nproperty whose value is an integer. Unless otherwise specified, this\r\nvalue is equal to the largest number of named arguments shown in the\r\nsubclause headings for the function description, including optional\r\nparameters. However, rest parameters shown using the form “...name”\r\nare not included in the default argument count.\r\n\r\nUnless otherwise specified, the length property of a built-in Function\r\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\r\n[[Configurable]]: true }.\r\n","includes":["propertyHelper.js\r"],"features":["SharedArrayBuffer","resizable-arraybuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/maxByteLength/name.js","esid":" sec-get-sharedarraybuffer.prototype.maxbytelength\r","description":" >\rget SharedArrayBuffer.prototype.maxByteLength\r\n\r\n17 ECMAScript Standard Built-in Objects\r\n\r\nFunctions that are specified as get or set accessor functions of built-in\r\nproperties have \"get \" or \"set \" prepended to the property name string.\r\n\r\n","includes":["propertyHelper.js\r"],"features":["SharedArrayBuffer","resizable-arraybuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/maxByteLength/prop-desc.js","esid":" sec-get-sharedarraybuffer.prototype.maxbytelength\r","description":" >\r\"maxByteLength\" property of SharedArrayBuffer.prototype\r\n","info":" |\rSharedArrayBuffer.prototype.maxByteLength is an accessor property whose set\r\naccessor function is undefined.\r\n\r\nSection 17: Every accessor property described in clauses 18 through 26 and in\r\nAnnex B.2 has the attributes {[[Enumerable]]: false, [[Configurable]]: true }\r\n","includes":["propertyHelper.js\r"],"features":["SharedArrayBuffer","resizable-arraybuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/maxByteLength/return-maxbytelength-growable.js","esid":" sec-get-sharedarraybuffer.prototype.maxbytelength\r","description":" Return value from [[ArrayBufferMaxByteLength]] internal slot\r","info":" |\r24.1.4.1 get SharedArrayBuffer.prototype.maxByteLength\r\n\r\n1. Let O be the this value.\r\n2. Perform ? RequireInternalSlot(O, [[ArrayBufferData]]).\r\n3. If IsSharedArrayBuffer(O) is false, throw a TypeError exception.\r\n4. If IsResizableArrayBuffer(O) is true, then\r\na. Let length be O.[[ArrayBufferMaxByteLength]].\r\n5. Else,\r\n[...]\r\n6. Return 𝔽(length).\r\n","features":["SharedArrayBuffer","resizable-arraybuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/maxByteLength/return-maxbytelength-non-growable.js","esid":" sec-get-sharedarraybuffer.prototype.maxbytelength\r","description":" Return value from [[ArrayBufferByteLength]] internal slot\r","info":" |\r24.1.4.1 get SharedArrayBuffer.prototype.maxByteLength\r\n\r\n1. Let O be the this value.\r\n2. Perform ? RequireInternalSlot(O, [[ArrayBufferData]]).\r\n3. If IsSharedArrayBuffer(O) is false, throw a TypeError exception.\r\n4. If IsResizableArrayBuffer(O) is true, then\r\n[...]\r\n5. Else,\r\na. Let length be O.[[ArrayBufferByteLength]].\r\n6. Return 𝔽(length).\r\n","features":["SharedArrayBuffer","resizable-arraybuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/maxByteLength/this-has-no-arraybufferdata-internal.js","esid":" sec-get-sharedarraybuffer.prototype.maxbytelength\r","description":" >\rThrows a TypeError exception when `this` does not have a [[ArrayBufferData]]\r\ninternal slot\r\n","info":" |\rget SharedArrayBuffer.prototype.maxByteLength\r\n\r\n1. Let O be the this value.\r\n2. Perform ? RequireInternalSlot(O, [[ArrayBufferData]]).\r\n[...]\r\n","features":["DataView","SharedArrayBuffer","TypedArray","resizable-arraybuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/maxByteLength/this-is-arraybuffer.js","esid":" sec-get-sharedarraybuffer.prototype.maxbytelength\r","description":" Throws a TypeError exception when `this` is an ArrayBuffer\r","info":" |\rget SharedArrayBuffer.prototype.maxByteLength\r\n\r\n1. Let O be the this value.\r\n2. Perform ? RequireInternalSlot(O, [[ArrayBufferData]]).\r\n3. If IsSharedArrayBuffer(O) is false, throw a TypeError exception.\r\n[...]\r\n","features":["ArrayBuffer","SharedArrayBuffer","resizable-arraybuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/maxByteLength/this-is-not-object.js","esid":" sec-get-sharedarraybuffer.prototype.maxbytelength\r","description":" Throws a TypeError exception when `this` is not Object\r","info":" |\rget SharedArrayBuffer.prototype.maxByteLength\r\n\r\n1. Let O be the this value.\r\n2. Perform ? RequireInternalSlot(O, [[ArrayBufferData]]).\r\n[...]\r\n","features":["SharedArrayBuffer","Symbol","resizable-arraybuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/prop-desc.js","esid":" sec-sharedarraybuffer.prototype\r","description":" Property descriptor of the 'prototype' property\r","info":" |\rThis property has the attributes { [[Writable]]: false, [[Enumerable]]:\r\nfalse, [[Configurable]]: false }.\r\n","includes":["propertyHelper.js\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/slice/context-is-not-arraybuffer-object.js","description":" >\rThrows a TypeError if `this` does not have an [[ArrayBufferData]] internal slot.\r\n","features":["SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/slice/context-is-not-object.js","description":" >\rThrows a TypeError if `this` is not an Object.\r\n","info":" |\rSharedArrayBuffer.prototype.slice ( start, end )\r\n","features":["SharedArrayBuffer","Symbol\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/slice/descriptor.js","description":" >\rSharedArrayBuffer.prototype.slice has default data property attributes.\r\n","info":" |\rSharedArrayBuffer.prototype.slice ( start, end )\r\n\r\n17 ECMAScript Standard Built-in Objects:\r\nEvery other data property described in clauses 18 through 26 and in\r\nAnnex B.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false,\r\n[[Configurable]]: true } unless otherwise specified.\r\n","includes":["propertyHelper.js\r"],"features":["SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/slice/end-default-if-absent.js","description":" >\rThe `end` index defaults to [[ArrayBufferByteLength]] if absent.\r\n","info":" |\rSharedArrayBuffer.prototype.slice ( start, end )\r\n\r\n","features":["SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/slice/end-default-if-undefined.js","description":" >\rThe `end` index defaults to [[ArrayBufferByteLength]] if undefined.\r\n","info":" |\rSharedArrayBuffer.prototype.slice ( start, end )\r\n\r\n","features":["SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/slice/end-exceeds-length.js","description":" >\rLarge `end` index is clamped to [[ArrayBufferByteLength]].\r\n","info":" |\rSharedArrayBuffer.prototype.slice ( start, end )\r\n\r\n","features":["SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/slice/extensible.js","description":" >\rSharedArrayBuffer.prototype.slice is extensible.\r\n","info":" |\rSharedArrayBuffer.prototype.slice ( start, end )\r\n\r\n17 ECMAScript Standard Built-in Objects:\r\nUnless specified otherwise, the [[Extensible]] internal slot\r\nof a built-in object initially has the value true.\r\n","features":["SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/slice/length.js","description":" >\rSharedArrayBuffer.prototype.slice.length is 2.\r\n","info":" |\rSharedArrayBuffer.prototype.slice ( start, end )\r\n\r\n17 ECMAScript Standard Built-in Objects:\r\nEvery built-in Function object, including constructors, has a length\r\nproperty whose value is an integer. Unless otherwise specified, this\r\nvalue is equal to the largest number of named arguments shown in the\r\nsubclause headings for the function description, including optional\r\nparameters. However, rest parameters shown using the form “...name”\r\nare not included in the default argument count.\r\n\r\nUnless otherwise specified, the length property of a built-in Function\r\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\r\n[[Configurable]]: true }.\r\n","includes":["propertyHelper.js\r"],"features":["SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/slice/name.js","description":" >\rSharedArrayBuffer.prototype.slice.name is \"slice\".\r\n","info":" |\rSharedArrayBuffer.prototype.slice ( start, end )\r\n\r\n17 ECMAScript Standard Built-in Objects:\r\nEvery built-in Function object, including constructors, that is not\r\nidentified as an anonymous function has a name property whose value\r\nis a String.\r\n\r\nUnless otherwise specified, the name property of a built-in Function\r\nobject, if it exists, has the attributes { [[Writable]]: false,\r\n[[Enumerable]]: false, [[Configurable]]: true }.\r\n","includes":["propertyHelper.js\r"],"features":["SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/slice/negative-end.js","description":" >\rNegative `end` index is relative to [[ArrayBufferByteLength]].\r\n","info":" |\rSharedArrayBuffer.prototype.slice ( start, end )\r\n\r\n","features":["SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/slice/negative-start.js","description":" >\rNegative `start` index is relative to [[ArrayBufferByteLength]].\r\n","info":" |\rSharedArrayBuffer.prototype.slice ( start, end )\r\n\r\n","features":["SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/slice/nonconstructor.js","description":" >\rSharedArrayBuffer.prototype.slice is not a constructor function.\r\n","info":" |\rSharedArrayBuffer.prototype.slice ( start, end )\r\n\r\n17 ECMAScript Standard Built-in Objects:\r\nBuilt-in function objects that are not identified as constructors do not\r\nimplement the [[Construct]] internal method unless otherwise specified\r\nin the description of a particular function.\r\n","features":["SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/slice/not-a-constructor.js","esid":" sec-ecmascript-standard-built-in-objects\r","description":" >\rSharedArrayBuffer.prototype.slice does not implement [[Construct]], is not new-able\r\n","info":" |\rECMAScript Function Objects\r\n\r\nBuilt-in function objects that are not identified as constructors do not\r\nimplement the [[Construct]] internal method unless otherwise specified in\r\nthe description of a particular function.\r\n\r\nsec-evaluatenew\r\n\r\n...\r\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\r\n...\r\n","includes":["isConstructor.js\r"],"features":["Reflect.construct","SharedArrayBuffer","arrow-function\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/slice/number-conversion.js","description":" >\rToInteger(start) is called before ToInteger(end).\r\n","info":" |\rSharedArrayBuffer.prototype.slice ( start, end )\r\n\r\n","features":["SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/slice/species-constructor-is-not-object.js","description":" >\rThrows TypeError if `constructor` property is not an object.\r\n","info":" |\rSharedArrayBuffer.prototype.slice ( start, end )\r\n\r\n","features":["SharedArrayBuffer","Symbol\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/slice/species-constructor-is-undefined.js","description":" >\rUses default constructor is `constructor` property is undefined.\r\n","info":" |\rSharedArrayBuffer.prototype.slice ( start, end )\r\n","features":["SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/slice/species-is-not-constructor.js","description":" >\rThrows a TypeError if species constructor is not a constructor function.\r\n","info":" |\rSharedArrayBuffer.prototype.slice ( start, end )\r\n\r\n","features":["SharedArrayBuffer","Symbol.species\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/slice/species-is-not-object.js","description":" >\rThrows a TypeError if species constructor is not an object.\r\n","info":" |\rSharedArrayBuffer.prototype.slice ( start, end )\r\n\r\n","features":["SharedArrayBuffer","Symbol.species\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/slice/species-is-null.js","description":" >\rUses default constructor is species constructor is null.\r\n","info":" |\rSharedArrayBuffer.prototype.slice ( start, end )\r\n\r\n","features":["SharedArrayBuffer","Symbol.species\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/slice/species-is-undefined.js","description":" >\rUses default constructor is species constructor is undefined.\r\n","info":" |\rSharedArrayBuffer.prototype.slice ( start, end )\r\n\r\n","features":["SharedArrayBuffer","Symbol.species\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/slice/species-returns-larger-arraybuffer.js","description":" >\rDoes not throw TypeError if new SharedArrayBuffer is too large.\r\n","info":" |\rSharedArrayBuffer.prototype.slice ( start, end )\r\n\r\n","features":["SharedArrayBuffer","Symbol.species\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/slice/species-returns-not-arraybuffer.js","description":" >\rThrows a TypeError if new object is not an SharedArrayBuffer instance.\r\n","info":" |\rSharedArrayBuffer.prototype.slice ( start, end )\r\n\r\n","features":["SharedArrayBuffer","Symbol.species\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/slice/species-returns-same-arraybuffer.js","description":" >\rThrows a TypeError if species constructor returns `this` value.\r\n","info":" |\rSharedArrayBuffer.prototype.slice ( start, end )\r\n\r\n","features":["SharedArrayBuffer","Symbol.species\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/slice/species-returns-smaller-arraybuffer.js","description":" >\rThrows a TypeError if new SharedArrayBuffer is too small.\r\n","info":" |\rSharedArrayBuffer.prototype.slice ( start, end )\r\n\r\n","features":["SharedArrayBuffer","Symbol.species\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/slice/species.js","description":" >\rNew SharedArrayBuffer instance is created from SpeciesConstructor.\r\n","info":" |\rSharedArrayBuffer.prototype.slice ( start, end )\r\n\r\n","features":["SharedArrayBuffer","Symbol.species\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/slice/start-default-if-absent.js","description":" >\rThe `start` index defaults to 0 if absent.\r\n","info":" |\rSharedArrayBuffer.prototype.slice ( start, end )\r\n\r\n","features":["SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/slice/start-default-if-undefined.js","description":" >\rThe `start` index defaults to 0 if undefined.\r\n","info":" |\rSharedArrayBuffer.prototype.slice ( start, end )\r\n","features":["SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/slice/start-exceeds-end.js","description":" >\rReturns zero-length buffer if `start` index exceeds `end` index.\r\n","info":" |\rSharedArrayBuffer.prototype.slice ( start, end )\r\n\r\n","features":["SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/slice/start-exceeds-length.js","description":" >\rLarge `start` index is clamped to [[ArrayBufferByteLength]].\r\n","info":" |\rSharedArrayBuffer.prototype.slice ( start, end )\r\n","features":["SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/slice/this-is-arraybuffer.js","esid":" sec-sharedarraybuffer.prototype.slice\r","description":" >\rThrows a TypeError if `this` is an ArrayBuffer\r\n","features":["ArrayBuffer","SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/slice/tointeger-conversion-end.js","description":" >\rThe `end` index parameter is converted to an integral numeric value.\r\n","info":" |\rSharedArrayBuffer.prototype.slice ( start, end )\r\n","features":["SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/slice/tointeger-conversion-start.js","description":" >\rThe `start` index parameter is converted to an integral numeric value.\r\n","info":" |\rSharedArrayBuffer.prototype.slice ( start, end )\r\n","features":["SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype/Symbol.toStringTag.js","description":" >\r`Symbol.toStringTag` property descriptor\r\n","info":" |\rThe initial value of the @@toStringTag property is the String value\r\n\"SharedArrayBuffer\".\r\n\r\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]:\r\nfalse, [[Configurable]]: true }.\r\n","includes":["propertyHelper.js\r"],"features":["SharedArrayBuffer","Symbol.toStringTag\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/prototype-from-newtarget.js","esid":" sec-sharedarraybuffer-length\r","description":" >\rThe [[Prototype]] internal slot is computed from NewTarget.\r\n","info":" |\rSharedArrayBuffer( length )\r\n\r\nSharedArrayBuffer called with argument length performs the following steps:\r\n\r\n...\r\n3. Return AllocateSharedArrayBuffer(NewTarget, byteLength).\r\n\r\nAllocateSharedArrayBuffer( constructor, byteLength )\r\n1. Let obj be ? OrdinaryCreateFromConstructor(constructor, \"%SharedArrayBufferPrototype%\",\r\n«[[ArrayBufferData]], [[ArrayBufferByteLength]]» ).\r\n...\r\n","features":["Reflect","Reflect.construct","SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/return-abrupt-from-length-symbol.js","esid":" sec-sharedarraybuffer-length\r","description":" >\rThrows a TypeError if length is a symbol\r\n","info":" |\rSharedArrayBuffer( length )\r\n\r\n1. If NewTarget is undefined, throw a TypeError exception.\r\n2. Let byteLength be ? ToIndex(length).\r\n...\r\n","features":["SharedArrayBuffer","Symbol\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/return-abrupt-from-length.js","esid":" sec-sharedarraybuffer-length\r","description":" >\rReturn abrupt from ToIndex(length)\r\n","info":" |\rSharedArrayBuffer( length )\r\n\r\n1. If NewTarget is undefined, throw a TypeError exception.\r\n2. Let byteLength be ? ToIndex(length).\r\n...\r\n","features":["SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/toindex-length.js","esid":" sec-sharedarraybuffer-length\r","description":" >\rThe `length` parameter is converted to a value numeric index value.\r\n","info":" |\rSharedArrayBuffer( length )\r\n\r\n1. If NewTarget is undefined, throw a TypeError exception.\r\n2. Let byteLength be ? ToIndex(length).\r\n3. Return ? AllocateSharedArrayBuffer(NewTarget, byteLength).\r\n\r\nToIndex( value )\r\n\r\n1. If value is undefined, then\r\na. Let index be 0.\r\n2. Else,\r\na. Let integerIndex be ? ToInteger(value).\r\nb. If integerIndex < 0, throw a RangeError exception.\r\nc. Let index be ! ToLength(integerIndex).\r\nd. If SameValueZero(integerIndex, index) is false, throw a RangeError exception.\r\n3. Return index.\r\n","features":["SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/undefined-newtarget-throws.js","esid":" sec-sharedarraybuffer-length\r","description":" >\rThrows a TypeError if SharedArrayBuffer is called as a function.\r\n","info":" |\rSharedArrayBuffer( length )\r\n\r\nSharedArrayBuffer called with argument length performs the following steps:\r\n\r\n1. If NewTarget is undefined, throw a TypeError exception.\r\n...\r\n","features":["SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/SharedArrayBuffer/zero-length.js","esid":" sec-sharedarraybuffer-length\r","description":" >\rThe `length` parameter can be zero.\r\n","info":" |\rSharedArrayBuffer( length )\r\n\r\n...\r\n2. Let numberLength be ToNumber(length).\r\n3. Let byteLength be ToLength(numberLength).\r\n4. ReturnIfAbrupt(byteLength).\r\n5. If SameValueZero(numberLength, byteLength) is false, throw a RangeError exception.\r\n...\r\n","features":["SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/String/prototype/padEnd/exception-fill-string-symbol.js","esid":" sec-string.prototype.padend\r","description":" String#padEnd should fail if given a Symbol fillString.\r","author":" Jordan Harband\r","features":["Symbol\r"]},{"path":"./test262/test/built-ins/String/prototype/padEnd/exception-not-object-coercible.js","esid":" sec-string.prototype.padend\r","description":" >\rString#padEnd should fail if given a null or undefined value,\r\nor an object not coercible to a string.\r\n","author":" Jordan Harband\r"},{"path":"./test262/test/built-ins/String/prototype/padEnd/exception-symbol.js","esid":" sec-string.prototype.padend\r","description":" String#padEnd should fail if given a Symbol receiver.\r","author":" Jordan Harband\r","features":["Symbol\r"]},{"path":"./test262/test/built-ins/String/prototype/padEnd/fill-string-empty.js","esid":" sec-string.prototype.padend\r","description":" >\rString#padEnd should return the string unchanged when\r\nan explicit empty string is provided\r\n","author":" Jordan Harband\r"},{"path":"./test262/test/built-ins/String/prototype/padEnd/fill-string-non-strings.js","esid":" sec-string.prototype.padend\r","description":" String#padEnd should stringify a non-string fillString value\r","author":" Jordan Harband\r"},{"path":"./test262/test/built-ins/String/prototype/padEnd/fill-string-omitted.js","esid":" sec-string.prototype.padend\r","description":" String#padEnd should default to a fillString of \" \" when omitted\r","author":" Jordan Harband\r"},{"path":"./test262/test/built-ins/String/prototype/padEnd/function-length.js","esid":" sec-string.prototype.padend\r","description":" String#padEnd should have length 1\r","author":" Jordan Harband\r","includes":["propertyHelper.js\r"]},{"path":"./test262/test/built-ins/String/prototype/padEnd/function-name.js","esid":" sec-string.prototype.padend\r","description":" String#padEnd should have name property with value 'padEnd'\r","author":" Jordan Harband\r","includes":["propertyHelper.js\r"]},{"path":"./test262/test/built-ins/String/prototype/padEnd/max-length-not-greater-than-string.js","esid":" sec-string.prototype.padend\r","description":" >\rString#padEnd should return the string unchanged when an integer max\r\nlength is not greater than the string length\r\n","author":" Jordan Harband\r"},{"path":"./test262/test/built-ins/String/prototype/padEnd/normal-operation.js","esid":" sec-string.prototype.padend\r","description":" String#padEnd should work in the general case\r","author":" Jordan Harband\r"},{"path":"./test262/test/built-ins/String/prototype/padEnd/not-a-constructor.js","esid":" sec-ecmascript-standard-built-in-objects\r","description":" >\rString.prototype.padEnd does not implement [[Construct]], is not new-able\r\n","info":" |\rECMAScript Function Objects\r\n\r\nBuilt-in function objects that are not identified as constructors do not\r\nimplement the [[Construct]] internal method unless otherwise specified in\r\nthe description of a particular function.\r\n\r\nsec-evaluatenew\r\n\r\n...\r\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\r\n...\r\n","includes":["isConstructor.js\r"],"features":["Reflect.construct","arrow-function\r"]},{"path":"./test262/test/built-ins/String/prototype/padEnd/observable-operations.js","esid":" sec-string.prototype.padend\r","description":" String#padEnd should perform observable operations in the correct order\r","author":" Jordan Harband\r"},{"path":"./test262/test/built-ins/String/prototype/padStart/exception-fill-string-symbol.js","esid":" sec-string.prototype.padstart\r","description":" String#padStart should fail if given a Symbol fillString.\r","author":" Jordan Harband\r","features":["Symbol\r"]},{"path":"./test262/test/built-ins/String/prototype/padStart/exception-not-object-coercible.js","esid":" sec-string.prototype.padstart\r","description":" >\rString#padStart should fail if given a null or undefined value,\r\nor an object not coercible to a string.\r\n","author":" Jordan Harband\r"},{"path":"./test262/test/built-ins/String/prototype/padStart/exception-symbol.js","esid":" sec-string.prototype.padstart\r","description":" String#padStart should fail if given a Symbol receiver.\r","author":" Jordan Harband\r","features":["Symbol\r"]},{"path":"./test262/test/built-ins/String/prototype/padStart/fill-string-empty.js","esid":" sec-string.prototype.padstart\r","description":" >\rString#padStart should return the string unchanged when\r\nan explicit empty string is provided\r\n","author":" Jordan Harband\r"},{"path":"./test262/test/built-ins/String/prototype/padStart/fill-string-non-strings.js","esid":" sec-string.prototype.padstart\r","description":" String#padStart should stringify a non-string fillString value\r","author":" Jordan Harband\r"},{"path":"./test262/test/built-ins/String/prototype/padStart/fill-string-omitted.js","esid":" sec-string.prototype.padstart\r","description":" String#padStart should default to a fillString of \" \" when omitted\r","author":" Jordan Harband\r"},{"path":"./test262/test/built-ins/String/prototype/padStart/function-length.js","esid":" sec-string.prototype.padstart\r","description":" String#padStart should have length 1\r","author":" Jordan Harband\r","includes":["propertyHelper.js\r"]},{"path":"./test262/test/built-ins/String/prototype/padStart/function-name.js","esid":" sec-string.prototype.padstart\r","description":" String#padStart should have name property with value 'padStart'\r","author":" Jordan Harband\r","includes":["propertyHelper.js\r"]},{"path":"./test262/test/built-ins/String/prototype/padStart/max-length-not-greater-than-string.js","esid":" sec-string.prototype.padstart\r","description":" >\rString#padStart should return the string unchanged when an integer max\r\nlength is not greater than the string length\r\n","author":" Jordan Harband\r"},{"path":"./test262/test/built-ins/String/prototype/padStart/normal-operation.js","esid":" sec-string.prototype.padstart\r","description":" String#padStart should work in the general case\r","author":" Jordan Harband\r"},{"path":"./test262/test/built-ins/String/prototype/padStart/not-a-constructor.js","esid":" sec-ecmascript-standard-built-in-objects\r","description":" >\rString.prototype.padStart does not implement [[Construct]], is not new-able\r\n","info":" |\rECMAScript Function Objects\r\n\r\nBuilt-in function objects that are not identified as constructors do not\r\nimplement the [[Construct]] internal method unless otherwise specified in\r\nthe description of a particular function.\r\n\r\nsec-evaluatenew\r\n\r\n...\r\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\r\n...\r\n","includes":["isConstructor.js\r"],"features":["Reflect.construct","arrow-function\r"]},{"path":"./test262/test/built-ins/String/prototype/padStart/observable-operations.js","esid":" sec-string.prototype.padstart\r","description":" String#padStart should perform observable operations in the correct order\r","author":" Jordan Harband\r"},{"path":"./test262/test/built-ins/Symbol/asyncIterator/cross-realm.js","esid":" sec-symbol.asynciterator\r","description":" Value shared by all realms\r","info":" |\rUnless otherwise specified, well-known symbols values are shared by all\r\nrealms.\r\n","features":["cross-realm","Symbol.asyncIterator\r"]},{"path":"./test262/test/built-ins/Symbol/asyncIterator/prop-desc.js","esid":" sec-symbol.asynciterator\r","description":" >\r`Symbol.asyncIterator` property descriptor\r\n","info":" |\rThis property has the attributes { [[Writable]]: false, [[Enumerable]]:\r\nfalse, [[Configurable]]: false }.\r\n","includes":["propertyHelper.js\r"],"features":["Symbol.asyncIterator\r"]},{"path":"./test262/test/built-ins/TypedArray/prototype/set/typedarray-arg-set-values-diff-buffer-other-type-conversions-sab.js","esid":" sec-%typedarray%.prototype.set-typedarray-offset\r","description":" >\rSet converted values from different buffer of different types and different type instances\r\n","includes":["byteConversionValues.js","testTypedArray.js\r"],"features":["SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/TypedArray/prototype/set/typedarray-arg-set-values-diff-buffer-other-type-sab.js","esid":" sec-%typedarray%.prototype.set-typedarray-offset\r","description":" >\rSet values from different instances using the different buffer and different\r\ntype.\r\n","includes":["testTypedArray.js","compareArray.js\r"],"features":["SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/TypedArray/prototype/set/typedarray-arg-set-values-diff-buffer-same-type-sab.js","esid":" sec-%typedarray%.prototype.set-typedarray-offset\r","description":" >\rSet values from different instances using the different buffer and same\r\nconstructor. srcBuffer values are cached.\r\n","includes":["testTypedArray.js","compareArray.js\r"],"features":["SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/TypedArray/prototype/set/typedarray-arg-set-values-same-buffer-same-type-sab.js","esid":" sec-%typedarray%.prototype.set-typedarray-offset\r","description":" >\rSet values from different instances using the same buffer and same\r\nconstructor. srcBuffer values are cached.\r\n","includes":["testTypedArray.js","compareArray.js\r"],"features":["SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/bufferbyteoffset-throws-from-modulo-element-size-sab.js","esid":" sec-typedarray-buffer-byteoffset-length\r","description":" >\rThrows a RangeError if bufferByteLength modulo elementSize ≠ 0\r\n","info":" |\r22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\r\n\r\nThis description applies only if the TypedArray function is called with at\r\nleast one argument and the Type of the first argument is Object and that\r\nobject has an [[ArrayBufferData]] internal slot.\r\n\r\n\r\nLet elementSize be the Number value of the Element Size value in Table 56 for constructorName.*\r\n...\r\nIf length is either not present or undefined, then\r\na. If bufferByteLength modulo elementSize ≠ 0, throw a RangeError exception.\r\n...\r\n\r\n* Int8Array, Uint8Array, Uint8ClampedArray all have element size 1, so will never fail.\r\n\r\n","includes":["testTypedArray.js\r"],"features":["SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/byteoffset-is-negative-throws-sab.js","esid":" sec-typedarray-buffer-byteoffset-length\r","description":" >\rThrows a RangeError if ToInteger(byteOffset) is < 0\r\n","info":" |\r22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\r\n\r\nThis description applies only if the TypedArray function is called with at\r\nleast one argument and the Type of the first argument is Object and that\r\nobject has an [[ArrayBufferData]] internal slot.\r\n\r\n...\r\n7. Let offset be ? ToInteger(byteOffset).\r\n8. If offset < 0, throw a RangeError exception.\r\n...\r\n","includes":["testTypedArray.js\r"],"features":["SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/byteoffset-is-negative-zero-sab.js","esid":" pending\r","description":" >\rTypedArray's [[ByteOffset]] internal slot is always a positive number, test with negative zero.\r\n","info":" |\r%TypedArray% ( buffer [ , byteOffset [ , length ] ] )\r\n\r\n...\r\n6. Let offset be ? ToInteger(byteOffset).\r\n7. If offset < 0, throw a RangeError exception.\r\n8. If offset is -0, let offset be +0.\r\n...\r\n","includes":["testTypedArray.js\r"],"features":["SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/byteoffset-is-symbol-throws-sab.js","esid":" sec-typedarray-buffer-byteoffset-length\r","description":" >\rReturn abrupt from parsing integer value from byteOffset as a symbol\r\n","info":" |\r22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\r\n\r\nThis description applies only if the TypedArray function is called with at\r\nleast one argument and the Type of the first argument is Object and that\r\nobject has an [[ArrayBufferData]] internal slot.\r\n\r\n...\r\n7. Let offset be ? ToInteger(byteOffset).\r\n...\r\n","includes":["testTypedArray.js\r"],"features":["Symbol","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/byteoffset-throws-from-modulo-element-size-sab.js","esid":" sec-typedarray-buffer-byteoffset-length\r","description":" >\rThrows a RangeError if ToInteger(byteOffset) modulo elementSize is not 0\r\n","info":" |\r22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\r\n\r\nThis description applies only if the TypedArray function is called with at\r\nleast one argument and the Type of the first argument is Object and that\r\nobject has an [[ArrayBufferData]] internal slot.\r\n\r\n\r\nLet elementSize be the Number value of the Element Size value in Table 56 for constructorName.*\r\n\r\n...\r\nIf offset modulo elementSize ≠ 0, throw a RangeError exception.\r\n...\r\n\r\n* Int8Array, Uint8Array, Uint8ClampedArray all have element size 1, so will never fail.\r\n\r\n","includes":["testTypedArray.js\r"],"features":["SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/byteoffset-to-number-throws-sab.js","esid":" sec-typedarray-buffer-byteoffset-length\r","description":" >\rReturn abrupt from parsing integer value from byteOffset\r\n","info":" |\r22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\r\n\r\nThis description applies only if the TypedArray function is called with at\r\nleast one argument and the Type of the first argument is Object and that\r\nobject has an [[ArrayBufferData]] internal slot.\r\n\r\n...\r\n7. Let offset be ? ToInteger(byteOffset).\r\n...\r\n","includes":["testTypedArray.js\r"],"features":["SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/custom-proto-access-throws-sab.js","esid":" sec-typedarray-buffer-byteoffset-length\r","description":" >\rReturn abrupt completion getting newTarget's prototype\r\n","info":" |\r22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\r\n\r\nThis description applies only if the TypedArray function is called with at\r\nleast one argument and the Type of the first argument is Object and that\r\nobject has an [[ArrayBufferData]] internal slot.\r\n\r\n...\r\n4. Let O be ? AllocateTypedArray(constructorName, NewTarget,\r\n%TypedArrayPrototype%).\r\n...\r\n\r\n22.2.4.2.1 Runtime Semantics: AllocateTypedArray (constructorName, newTarget,\r\ndefaultProto [ , length ])\r\n\r\n1. Let proto be ? GetPrototypeFromConstructor(newTarget, defaultProto).\r\n...\r\n\r\n9.1.15 GetPrototypeFromConstructor ( constructor, intrinsicDefaultProto )\r\n\r\n...\r\n3. Let proto be ? Get(constructor, \"prototype\").\r\n...\r\n","includes":["testTypedArray.js\r"],"features":["Reflect","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/defined-length-and-offset-sab.js","esid":" sec-typedarray-buffer-byteoffset-length\r","description":" >\rReturn new typedArray from defined length and offset\r\n","info":" |\r22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\r\n\r\nThis description applies only if the TypedArray function is called with at\r\nleast one argument and the Type of the first argument is Object and that\r\nobject has an [[ArrayBufferData]] internal slot.\r\n","includes":["testTypedArray.js\r"],"features":["SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/defined-length-sab.js","esid":" sec-typedarray-buffer-byteoffset-length\r","description":" >\rReturn new typedArray from defined length\r\n","info":" |\r22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\r\n\r\nThis description applies only if the TypedArray function is called with at\r\nleast one argument and the Type of the first argument is Object and that\r\nobject has an [[ArrayBufferData]] internal slot.\r\n\r\n","includes":["testTypedArray.js\r"],"features":["SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/defined-negative-length-sab.js","esid":" sec-typedarray-buffer-byteoffset-length\r","description":" >\rThrows RangeError for negative ToInteger(length)\r\n","info":" |\r22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\r\n\r\nThis description applies only if the TypedArray function is called with at\r\nleast one argument and the Type of the first argument is Object and that\r\nobject has an [[ArrayBufferData]] internal slot.\r\n\r\n","includes":["testTypedArray.js\r"],"features":["SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/defined-offset-sab.js","esid":" sec-typedarray-buffer-byteoffset-length\r","description":" >\rReturn new typedArray from defined offset\r\n","info":" |\r22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\r\n\r\nThis description applies only if the TypedArray function is called with at\r\nleast one argument and the Type of the first argument is Object and that\r\nobject has an [[ArrayBufferData]] internal slot.\r\n","includes":["testTypedArray.js\r"],"features":["SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/excessive-length-throws-sab.js","esid":" sec-typedarray-buffer-byteoffset-length\r","description":" >\rIf offset + newByteLength > bufferByteLength, throw a RangeError exception.\r\n","info":" |\r22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\r\n\r\nThis description applies only if the TypedArray function is called with at\r\nleast one argument and the Type of the first argument is Object and that\r\nobject has an [[ArrayBufferData]] internal slot.\r\n\r\n...\r\n14. Else,\r\na. Let newLength be ? ToLength(length).\r\nb. Let newByteLength be newLength × elementSize.\r\nc. If offset+newByteLength > bufferByteLength, throw a RangeError exception.\r\n...\r\n","includes":["testTypedArray.js\r"],"features":["SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/excessive-offset-throws-sab.js","esid":" sec-typedarray-buffer-byteoffset-length\r","description":" >\rThrows a RangeError if bufferByteLength - ToInteger(byteOffset) < 0\r\n","info":" |\r22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\r\n\r\nThis description applies only if the TypedArray function is called with at\r\nleast one argument and the Type of the first argument is Object and that\r\nobject has an [[ArrayBufferData]] internal slot.\r\n\r\n...\r\n13. If length is undefined, then\r\na. If bufferByteLength modulo elementSize ≠ 0, throw a RangeError exception.\r\nb. Let newByteLength be bufferByteLength - offset.\r\nc. If newByteLength < 0, throw a RangeError exception.\r\n...\r\n","includes":["testTypedArray.js\r"],"features":["SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/invoked-with-undefined-newtarget-sab.js","esid":" sec-typedarray-buffer-byteoffset-length\r","description":" >\rThrows a TypeError if NewTarget is undefined.\r\n","info":" |\r22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\r\n\r\nThis description applies only if the TypedArray function is called with at\r\nleast one argument and the Type of the first argument is Object and that\r\nobject has an [[ArrayBufferData]] internal slot.\r\n\r\n...\r\n2. If NewTarget is undefined, throw a TypeError exception.\r\n...\r\n","includes":["testTypedArray.js\r"],"features":["SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/is-referenced-sab.js","esid":" sec-typedarray-buffer-byteoffset-length\r","description":" >\rReuse buffer argument instead of making a new clone\r\n","info":" |\r22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\r\n\r\nThis description applies only if the TypedArray function is called with at\r\nleast one argument and the Type of the first argument is Object and that\r\nobject has an [[ArrayBufferData]] internal slot.\r\n\r\n...\r\n15. Set O's [[ViewedArrayBuffer]] internal slot to buffer.\r\n...\r\n","includes":["testTypedArray.js\r"],"features":["SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/length-access-throws-sab.js","esid":" sec-typedarray-buffer-byteoffset-length\r","description":" >\rReturns abrupt from ToLength(length)\r\n","info":" |\r22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\r\n\r\nThis description applies only if the TypedArray function is called with at\r\nleast one argument and the Type of the first argument is Object and that\r\nobject has an [[ArrayBufferData]] internal slot.\r\n\r\n...\r\n14. Else,\r\na. Let newLength be ? ToLength(length).\r\n...\r\n","includes":["testTypedArray.js\r"],"features":["SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/length-is-symbol-throws-sab.js","esid":" sec-typedarray-buffer-byteoffset-length\r","description":" >\rThrows a TypeError if length is a Symbol\r\n","info":" |\r22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\r\n\r\nThis description applies only if the TypedArray function is called with at\r\nleast one argument and the Type of the first argument is Object and that\r\nobject has an [[ArrayBufferData]] internal slot.\r\n\r\n...\r\n14. Else,\r\na. Let newLength be ? ToLength(length).\r\n...\r\n","includes":["testTypedArray.js\r"],"features":["Symbol","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/new-instance-extensibility-sab.js","esid":" sec-typedarray-buffer-byteoffset-length\r","description":" >\rThe new typedArray instance from a buffer argument is extensible\r\n","info":" |\r22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\r\n\r\n...\r\n4. Let O be ? AllocateTypedArray(constructorName, NewTarget,\r\n\"%TypedArrayPrototype%\").\r\n...\r\n\r\n22.2.4.2.1 Runtime Semantics: AllocateTypedArray (constructorName, newTarget,\r\ndefaultProto [ , length ])\r\n\r\n...\r\n2. Let obj be IntegerIndexedObjectCreate(proto, « [[ViewedArrayBuffer]],\r\n[[TypedArrayName]], [[ByteLength]], [[ByteOffset]], [[ArrayLength]] »).\r\n...\r\n\r\n9.4.5.7 IntegerIndexedObjectCreate (prototype, internalSlotsList)\r\n\r\n...\r\n11. Set the [[Extensible]] internal slot of A to true.\r\n...\r\n","includes":["testTypedArray.js\r"],"features":["SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/proto-from-ctor-realm-sab.js","esid":" sec-typedarray-buffer-byteoffset-length\r","description":" Default [[Prototype]] value derived from realm of the newTarget\r","info":" |\r[...]\r\n4. Let O be ? AllocateTypedArray(constructorName, NewTarget,\r\n\"%TypedArrayPrototype%\").\r\n[...]\r\n\r\n22.2.4.2.1 Runtime Semantics: AllocateTypedArray\r\n\r\n1. Let proto be ? GetPrototypeFromConstructor(newTarget, defaultProto).\r\n[...]\r\n\r\n9.1.14 GetPrototypeFromConstructor\r\n\r\n[...]\r\n3. Let proto be ? Get(constructor, \"prototype\").\r\n4. If Type(proto) is not Object, then\r\na. Let realm be ? GetFunctionRealm(constructor).\r\nb. Let proto be realm's intrinsic object named intrinsicDefaultProto.\r\n5. Return proto.\r\n","includes":["testTypedArray.js\r"],"features":["cross-realm","SharedArrayBuffer","Reflect","TypedArray\r"]},{"path":"./test262/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/returns-new-instance-sab.js","esid":" sec-typedarray-buffer-byteoffset-length\r","description":" >\rReturn new typedArray from undefined offset and length\r\n","info":" |\r22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\r\n\r\nThis description applies only if the TypedArray function is called with at\r\nleast one argument and the Type of the first argument is Object and that\r\nobject has an [[ArrayBufferData]] internal slot.\r\n","includes":["testTypedArray.js\r"],"features":["SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/toindex-bytelength-sab.js","esid":" sec-typedarray-buffer-byteoffset-length\r","description":" >\rToIndex(length) operations\r\n","info":" |\r22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\r\n\r\nThis description applies only if the TypedArray function is called with at\r\nleast one argument and the Type of the first argument is Object and that\r\nobject has an [[ArrayBufferData]] internal slot.\r\n\r\n...\r\n11. If length is either not present or undefined, then\r\n...\r\n12. Else,\r\na. Let newLength be ? ToIndex(length).\r\n...\r\n","includes":["testTypedArray.js\r"],"features":["SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/toindex-byteoffset-sab.js","esid":" sec-typedarray-buffer-byteoffset-length\r","description":" >\rToIndex(byteOffset) operations\r\n","info":" |\r22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\r\n\r\nThis description applies only if the TypedArray function is called with at\r\nleast one argument and the Type of the first argument is Object and that\r\nobject has an [[ArrayBufferData]] internal slot.\r\n\r\n...\r\n7. Let offset be ? ToIndex(byteOffset).\r\n8. If offset modulo elementSize ≠ 0, throw a RangeError exception.\r\n...\r\n","includes":["testTypedArray.js\r"],"features":["SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/typedarray-backed-by-sharedarraybuffer.js","esid":" sec-typedarray-typedarray\r","description":" >\rPassing a SharedArrayBuffer-backed TypedArray to a TypedArray constructor\r\nproduces an ArrayBuffer-backed TypedArray.\r\n","includes":["testTypedArray.js\r"],"features":["SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/use-custom-proto-if-object-sab.js","esid":" sec-typedarray-buffer-byteoffset-length\r","description":" >\rUse prototype from new target if it's an Object\r\n","info":" |\r22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\r\n\r\nThis description applies only if the TypedArray function is called with at\r\nleast one argument and the Type of the first argument is Object and that\r\nobject has an [[ArrayBufferData]] internal slot.\r\n\r\n...\r\n4. Let O be ? AllocateTypedArray(constructorName, NewTarget,\r\n%TypedArrayPrototype%).\r\n...\r\n\r\n22.2.4.2.1 Runtime Semantics: AllocateTypedArray (constructorName, newTarget,\r\ndefaultProto [ , length ])\r\n\r\n1. Let proto be ? GetPrototypeFromConstructor(newTarget, defaultProto).\r\n2. Let obj be IntegerIndexedObjectCreate (proto, «[[ViewedArrayBuffer]],\r\n[[TypedArrayName]], [[ByteLength]], [[ByteOffset]], [[ArrayLength]]» ).\r\n...\r\n\r\n9.4.5.7 IntegerIndexedObjectCreate (prototype, internalSlotsList)\r\n\r\n...\r\n10. Set the [[Prototype]] internal slot of A to prototype.\r\n...\r\n12. Return A.\r\n","includes":["testTypedArray.js\r"],"features":["SharedArrayBuffer","Reflect","TypedArray\r"]},{"path":"./test262/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/use-default-proto-if-custom-proto-is-not-object-sab.js","esid":" sec-typedarray-buffer-byteoffset-length\r","description":" >\rUse prototype from %TypedArray% if newTarget's prototype is not an Object\r\n","info":" |\r22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\r\n\r\nThis description applies only if the TypedArray function is called with at\r\nleast one argument and the Type of the first argument is Object and that\r\nobject has an [[ArrayBufferData]] internal slot.\r\n\r\n...\r\n4. Let O be ? AllocateTypedArray(constructorName, NewTarget,\r\n%TypedArrayPrototype%).\r\n...\r\n\r\n22.2.4.2.1 Runtime Semantics: AllocateTypedArray (constructorName, newTarget,\r\ndefaultProto [ , length ])\r\n\r\n1. Let proto be ? GetPrototypeFromConstructor(newTarget, defaultProto).\r\n2. Let obj be IntegerIndexedObjectCreate (proto, «[[ViewedArrayBuffer]],\r\n[[TypedArrayName]], [[ByteLength]], [[ByteOffset]], [[ArrayLength]]» ).\r\n...\r\n\r\n9.4.5.7 IntegerIndexedObjectCreate (prototype, internalSlotsList)\r\n\r\n...\r\n10. Set the [[Prototype]] internal slot of A to prototype.\r\n...\r\n12. Return A.\r\n","includes":["testTypedArray.js\r"],"features":["SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/TypedArrayConstructors/ctors-bigint/buffer-arg/bufferbyteoffset-throws-from-modulo-element-size-sab.js","esid":" sec-typedarray-buffer-byteoffset-length\r","description":" >\rThrows a RangeError if bufferByteLength modulo elementSize ≠ 0\r\n","info":" |\r22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\r\n\r\nThis description applies only if the TypedArray function is called with at\r\nleast one argument and the Type of the first argument is Object and that\r\nobject has an [[ArrayBufferData]] internal slot.\r\n\r\n...\r\n13. If length is undefined, then\r\na. If bufferByteLength modulo elementSize ≠ 0, throw a RangeError exception.\r\n...\r\n","includes":["testBigIntTypedArray.js\r"],"features":["BigInt","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/TypedArrayConstructors/ctors-bigint/buffer-arg/byteoffset-is-negative-throws-sab.js","esid":" sec-typedarray-buffer-byteoffset-length\r","description":" >\rThrows a RangeError if ToInteger(byteOffset) is < 0\r\n","info":" |\r22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\r\n\r\nThis description applies only if the TypedArray function is called with at\r\nleast one argument and the Type of the first argument is Object and that\r\nobject has an [[ArrayBufferData]] internal slot.\r\n\r\n...\r\n7. Let offset be ? ToInteger(byteOffset).\r\n8. If offset < 0, throw a RangeError exception.\r\n...\r\n","includes":["testBigIntTypedArray.js\r"],"features":["BigInt","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/TypedArrayConstructors/ctors-bigint/buffer-arg/byteoffset-is-negative-zero-sab.js","esid":" pending\r","description":" >\rTypedArray's [[ByteOffset]] internal slot is always a positive number, test with negative zero.\r\n","info":" |\r%TypedArray% ( buffer [ , byteOffset [ , length ] ] )\r\n\r\n...\r\n6. Let offset be ? ToInteger(byteOffset).\r\n7. If offset < 0, throw a RangeError exception.\r\n8. If offset is -0, let offset be +0.\r\n...\r\n","includes":["testBigIntTypedArray.js\r"],"features":["BigInt","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/TypedArrayConstructors/ctors-bigint/buffer-arg/byteoffset-is-symbol-throws-sab.js","esid":" sec-typedarray-buffer-byteoffset-length\r","description":" >\rReturn abrupt from parsing integer value from byteOffset as a symbol\r\n","info":" |\r22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\r\n\r\nThis description applies only if the TypedArray function is called with at\r\nleast one argument and the Type of the first argument is Object and that\r\nobject has an [[ArrayBufferData]] internal slot.\r\n\r\n...\r\n7. Let offset be ? ToInteger(byteOffset).\r\n...\r\n","includes":["testBigIntTypedArray.js\r"],"features":["BigInt","Symbol","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/TypedArrayConstructors/ctors-bigint/buffer-arg/byteoffset-throws-from-modulo-element-size-sab.js","esid":" sec-typedarray-buffer-byteoffset-length\r","description":" >\rThrows a RangeError if ToInteger(byteOffset) modulo elementSize is not 0\r\n","info":" |\r22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\r\n\r\nThis description applies only if the TypedArray function is called with at\r\nleast one argument and the Type of the first argument is Object and that\r\nobject has an [[ArrayBufferData]] internal slot.\r\n\r\n...\r\n10. If offset modulo elementSize ≠ 0, throw a RangeError exception.\r\n...\r\n","includes":["testBigIntTypedArray.js\r"],"features":["BigInt","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/TypedArrayConstructors/ctors-bigint/buffer-arg/byteoffset-to-number-throws-sab.js","esid":" sec-typedarray-buffer-byteoffset-length\r","description":" >\rReturn abrupt from parsing integer value from byteOffset\r\n","info":" |\r22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\r\n\r\nThis description applies only if the TypedArray function is called with at\r\nleast one argument and the Type of the first argument is Object and that\r\nobject has an [[ArrayBufferData]] internal slot.\r\n\r\n...\r\n7. Let offset be ? ToInteger(byteOffset).\r\n...\r\n","includes":["testBigIntTypedArray.js\r"],"features":["BigInt","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/TypedArrayConstructors/ctors-bigint/buffer-arg/custom-proto-access-throws-sab.js","esid":" sec-typedarray-buffer-byteoffset-length\r","description":" >\rReturn abrupt completion getting newTarget's prototype\r\n","info":" |\r22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\r\n\r\nThis description applies only if the TypedArray function is called with at\r\nleast one argument and the Type of the first argument is Object and that\r\nobject has an [[ArrayBufferData]] internal slot.\r\n\r\n...\r\n4. Let O be ? AllocateTypedArray(constructorName, NewTarget,\r\n%TypedArrayPrototype%).\r\n...\r\n\r\n22.2.4.2.1 Runtime Semantics: AllocateTypedArray (constructorName, newTarget,\r\ndefaultProto [ , length ])\r\n\r\n1. Let proto be ? GetPrototypeFromConstructor(newTarget, defaultProto).\r\n...\r\n\r\n9.1.15 GetPrototypeFromConstructor ( constructor, intrinsicDefaultProto )\r\n\r\n...\r\n3. Let proto be ? Get(constructor, \"prototype\").\r\n...\r\n","includes":["testBigIntTypedArray.js\r"],"features":["BigInt","Reflect","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/TypedArrayConstructors/ctors-bigint/buffer-arg/defined-length-and-offset-sab.js","esid":" sec-typedarray-buffer-byteoffset-length\r","description":" >\rReturn new typedArray from defined length and offset\r\n","info":" |\r22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\r\n\r\nThis description applies only if the TypedArray function is called with at\r\nleast one argument and the Type of the first argument is Object and that\r\nobject has an [[ArrayBufferData]] internal slot.\r\n","includes":["testBigIntTypedArray.js\r"],"features":["BigInt","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/TypedArrayConstructors/ctors-bigint/buffer-arg/defined-length-sab.js","esid":" sec-typedarray-buffer-byteoffset-length\r","description":" >\rReturn new typedArray from defined length\r\n","info":" |\r22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\r\n\r\nThis description applies only if the TypedArray function is called with at\r\nleast one argument and the Type of the first argument is Object and that\r\nobject has an [[ArrayBufferData]] internal slot.\r\n\r\n","includes":["testBigIntTypedArray.js\r"],"features":["BigInt","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/TypedArrayConstructors/ctors-bigint/buffer-arg/defined-negative-length-sab.js","esid":" sec-typedarray-buffer-byteoffset-length\r","description":" >\rThrows RangeError for negative ToInteger(length)\r\n","info":" |\r22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\r\n\r\nThis description applies only if the TypedArray function is called with at\r\nleast one argument and the Type of the first argument is Object and that\r\nobject has an [[ArrayBufferData]] internal slot.\r\n\r\n","includes":["testBigIntTypedArray.js\r"],"features":["BigInt","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/TypedArrayConstructors/ctors-bigint/buffer-arg/defined-offset-sab.js","esid":" sec-typedarray-buffer-byteoffset-length\r","description":" >\rReturn new typedArray from defined offset\r\n","info":" |\r22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\r\n\r\nThis description applies only if the TypedArray function is called with at\r\nleast one argument and the Type of the first argument is Object and that\r\nobject has an [[ArrayBufferData]] internal slot.\r\n","includes":["testBigIntTypedArray.js\r"],"features":["BigInt","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/TypedArrayConstructors/ctors-bigint/buffer-arg/excessive-length-throws-sab.js","esid":" sec-typedarray-buffer-byteoffset-length\r","description":" >\rIf offset + newByteLength > bufferByteLength, throw a RangeError exception.\r\n","info":" |\r22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\r\n\r\nThis description applies only if the TypedArray function is called with at\r\nleast one argument and the Type of the first argument is Object and that\r\nobject has an [[ArrayBufferData]] internal slot.\r\n\r\n...\r\n14. Else,\r\na. Let newLength be ? ToLength(length).\r\nb. Let newByteLength be newLength × elementSize.\r\nc. If offset+newByteLength > bufferByteLength, throw a RangeError exception.\r\n...\r\n","includes":["testBigIntTypedArray.js\r"],"features":["BigInt","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/TypedArrayConstructors/ctors-bigint/buffer-arg/excessive-offset-throws-sab.js","esid":" sec-typedarray-buffer-byteoffset-length\r","description":" >\rThrows a RangeError if bufferByteLength - ToInteger(byteOffset) < 0\r\n","info":" |\r22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\r\n\r\nThis description applies only if the TypedArray function is called with at\r\nleast one argument and the Type of the first argument is Object and that\r\nobject has an [[ArrayBufferData]] internal slot.\r\n\r\n...\r\n13. If length is undefined, then\r\na. If bufferByteLength modulo elementSize ≠ 0, throw a RangeError exception.\r\nb. Let newByteLength be bufferByteLength - offset.\r\nc. If newByteLength < 0, throw a RangeError exception.\r\n...\r\n","includes":["testBigIntTypedArray.js\r"],"features":["BigInt","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/TypedArrayConstructors/ctors-bigint/buffer-arg/invoked-with-undefined-newtarget-sab.js","esid":" sec-typedarray-buffer-byteoffset-length\r","description":" >\rThrows a TypeError if NewTarget is undefined.\r\n","info":" |\r22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\r\n\r\nThis description applies only if the TypedArray function is called with at\r\nleast one argument and the Type of the first argument is Object and that\r\nobject has an [[ArrayBufferData]] internal slot.\r\n\r\n...\r\n2. If NewTarget is undefined, throw a TypeError exception.\r\n...\r\n","includes":["testBigIntTypedArray.js\r"],"features":["BigInt","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/TypedArrayConstructors/ctors-bigint/buffer-arg/is-referenced-sab.js","esid":" sec-typedarray-buffer-byteoffset-length\r","description":" >\rReuse buffer argument instead of making a new clone\r\n","info":" |\r22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\r\n\r\nThis description applies only if the TypedArray function is called with at\r\nleast one argument and the Type of the first argument is Object and that\r\nobject has an [[ArrayBufferData]] internal slot.\r\n\r\n...\r\n15. Set O's [[ViewedArrayBuffer]] internal slot to buffer.\r\n...\r\n","includes":["testBigIntTypedArray.js\r"],"features":["BigInt","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/TypedArrayConstructors/ctors-bigint/buffer-arg/length-access-throws-sab.js","esid":" sec-typedarray-buffer-byteoffset-length\r","description":" >\rReturns abrupt from ToLength(length)\r\n","info":" |\r22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\r\n\r\nThis description applies only if the TypedArray function is called with at\r\nleast one argument and the Type of the first argument is Object and that\r\nobject has an [[ArrayBufferData]] internal slot.\r\n\r\n...\r\n14. Else,\r\na. Let newLength be ? ToLength(length).\r\n...\r\n","includes":["testBigIntTypedArray.js\r"],"features":["BigInt","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/TypedArrayConstructors/ctors-bigint/buffer-arg/length-is-symbol-throws-sab.js","esid":" sec-typedarray-buffer-byteoffset-length\r","description":" >\rThrows a TypeError if length is a Symbol\r\n","info":" |\r22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\r\n\r\nThis description applies only if the TypedArray function is called with at\r\nleast one argument and the Type of the first argument is Object and that\r\nobject has an [[ArrayBufferData]] internal slot.\r\n\r\n...\r\n14. Else,\r\na. Let newLength be ? ToLength(length).\r\n...\r\n","includes":["testBigIntTypedArray.js\r"],"features":["BigInt","Symbol","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/TypedArrayConstructors/ctors-bigint/buffer-arg/new-instance-extensibility-sab.js","esid":" sec-typedarray-buffer-byteoffset-length\r","description":" >\rThe new typedArray instance from a buffer argument is extensible\r\n","info":" |\r22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\r\n\r\n...\r\n4. Let O be ? AllocateTypedArray(constructorName, NewTarget,\r\n\"%TypedArrayPrototype%\").\r\n...\r\n\r\n22.2.4.2.1 Runtime Semantics: AllocateTypedArray (constructorName, newTarget,\r\ndefaultProto [ , length ])\r\n\r\n...\r\n2. Let obj be IntegerIndexedObjectCreate(proto, « [[ViewedArrayBuffer]],\r\n[[TypedArrayName]], [[ByteLength]], [[ByteOffset]], [[ArrayLength]] »).\r\n...\r\n\r\n9.4.5.7 IntegerIndexedObjectCreate (prototype, internalSlotsList)\r\n\r\n...\r\n11. Set the [[Extensible]] internal slot of A to true.\r\n...\r\n","includes":["testBigIntTypedArray.js\r"],"features":["BigInt","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/TypedArrayConstructors/ctors-bigint/buffer-arg/proto-from-ctor-realm-sab.js","esid":" sec-typedarray-buffer-byteoffset-length\r","description":" Default [[Prototype]] value derived from realm of the newTarget\r","info":" |\r[...]\r\n4. Let O be ? AllocateTypedArray(constructorName, NewTarget,\r\n\"%TypedArrayPrototype%\").\r\n[...]\r\n\r\n22.2.4.2.1 Runtime Semantics: AllocateTypedArray\r\n\r\n1. Let proto be ? GetPrototypeFromConstructor(newTarget, defaultProto).\r\n[...]\r\n\r\n9.1.14 GetPrototypeFromConstructor\r\n\r\n[...]\r\n3. Let proto be ? Get(constructor, \"prototype\").\r\n4. If Type(proto) is not Object, then\r\na. Let realm be ? GetFunctionRealm(constructor).\r\nb. Let proto be realm's intrinsic object named intrinsicDefaultProto.\r\n5. Return proto.\r\n","includes":["testBigIntTypedArray.js\r"],"features":["BigInt","cross-realm","SharedArrayBuffer","Reflect","TypedArray\r"]},{"path":"./test262/test/built-ins/TypedArrayConstructors/ctors-bigint/buffer-arg/returns-new-instance-sab.js","esid":" sec-typedarray-buffer-byteoffset-length\r","description":" >\rReturn new typedArray from undefined offset and length\r\n","info":" |\r22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\r\n\r\nThis description applies only if the TypedArray function is called with at\r\nleast one argument and the Type of the first argument is Object and that\r\nobject has an [[ArrayBufferData]] internal slot.\r\n","includes":["testBigIntTypedArray.js\r"],"features":["BigInt","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/TypedArrayConstructors/ctors-bigint/buffer-arg/toindex-bytelength-sab.js","esid":" sec-typedarray-buffer-byteoffset-length\r","description":" >\rToIndex(length) operations\r\n","info":" |\r22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\r\n\r\nThis description applies only if the TypedArray function is called with at\r\nleast one argument and the Type of the first argument is Object and that\r\nobject has an [[ArrayBufferData]] internal slot.\r\n\r\n...\r\n11. If length is either not present or undefined, then\r\n...\r\n12. Else,\r\na. Let newLength be ? ToIndex(length).\r\n...\r\n","includes":["testBigIntTypedArray.js\r"],"features":["BigInt","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/TypedArrayConstructors/ctors-bigint/buffer-arg/toindex-byteoffset-sab.js","esid":" sec-typedarray-buffer-byteoffset-length\r","description":" >\rToIndex(byteOffset) operations\r\n","info":" |\r22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\r\n\r\nThis description applies only if the TypedArray function is called with at\r\nleast one argument and the Type of the first argument is Object and that\r\nobject has an [[ArrayBufferData]] internal slot.\r\n\r\n...\r\n7. Let offset be ? ToIndex(byteOffset).\r\n8. If offset modulo elementSize ≠ 0, throw a RangeError exception.\r\n...\r\n","includes":["testBigIntTypedArray.js\r"],"features":["BigInt","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/TypedArrayConstructors/ctors-bigint/buffer-arg/typedarray-backed-by-sharedarraybuffer.js","esid":" sec-typedarray-typedarray\r","description":" >\rPassing a SharedArrayBuffer-backed TypedArray to a TypedArray constructor\r\nproduces an ArrayBuffer-backed TypedArray.\r\n","includes":["testBigIntTypedArray.js\r"],"features":["BigInt","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/TypedArrayConstructors/ctors-bigint/buffer-arg/use-custom-proto-if-object-sab.js","esid":" sec-typedarray-buffer-byteoffset-length\r","description":" >\rUse prototype from new target if it's an Object\r\n","info":" |\r22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\r\n\r\nThis description applies only if the TypedArray function is called with at\r\nleast one argument and the Type of the first argument is Object and that\r\nobject has an [[ArrayBufferData]] internal slot.\r\n\r\n...\r\n4. Let O be ? AllocateTypedArray(constructorName, NewTarget,\r\n%TypedArrayPrototype%).\r\n...\r\n\r\n22.2.4.2.1 Runtime Semantics: AllocateTypedArray (constructorName, newTarget,\r\ndefaultProto [ , length ])\r\n\r\n1. Let proto be ? GetPrototypeFromConstructor(newTarget, defaultProto).\r\n2. Let obj be IntegerIndexedObjectCreate (proto, «[[ViewedArrayBuffer]],\r\n[[TypedArrayName]], [[ByteLength]], [[ByteOffset]], [[ArrayLength]]» ).\r\n...\r\n\r\n9.4.5.7 IntegerIndexedObjectCreate (prototype, internalSlotsList)\r\n\r\n...\r\n10. Set the [[Prototype]] internal slot of A to prototype.\r\n...\r\n12. Return A.\r\n","includes":["testBigIntTypedArray.js\r"],"features":["BigInt","SharedArrayBuffer","Reflect","TypedArray\r"]},{"path":"./test262/test/built-ins/TypedArrayConstructors/ctors-bigint/buffer-arg/use-default-proto-if-custom-proto-is-not-object-sab.js","esid":" sec-typedarray-buffer-byteoffset-length\r","description":" >\rUse prototype from %TypedArray% if newTarget's prototype is not an Object\r\n","info":" |\r22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\r\n\r\nThis description applies only if the TypedArray function is called with at\r\nleast one argument and the Type of the first argument is Object and that\r\nobject has an [[ArrayBufferData]] internal slot.\r\n\r\n...\r\n4. Let O be ? AllocateTypedArray(constructorName, NewTarget,\r\n%TypedArrayPrototype%).\r\n...\r\n\r\n22.2.4.2.1 Runtime Semantics: AllocateTypedArray (constructorName, newTarget,\r\ndefaultProto [ , length ])\r\n\r\n1. Let proto be ? GetPrototypeFromConstructor(newTarget, defaultProto).\r\n2. Let obj be IntegerIndexedObjectCreate (proto, «[[ViewedArrayBuffer]],\r\n[[TypedArrayName]], [[ByteLength]], [[ByteOffset]], [[ArrayLength]]» ).\r\n...\r\n\r\n9.4.5.7 IntegerIndexedObjectCreate (prototype, internalSlotsList)\r\n\r\n...\r\n10. Set the [[Prototype]] internal slot of A to prototype.\r\n...\r\n12. Return A.\r\n","includes":["testBigIntTypedArray.js\r"],"features":["BigInt","SharedArrayBuffer","TypedArray\r"]},{"path":"./test262/test/built-ins/TypedArrayConstructors/internals/Delete/BigInt/indexed-value-sab-non-strict.js","esid":" sec-integer-indexed-exotic-objects-delete-p\r","description":" >\rReturn value from valid numeric index, with SharedArrayBuffer\r\n","flags":["noStrict\r"],"includes":["testTypedArray.js\r"],"features":["align-detached-buffer-semantics-with-web-reality","TypedArray","SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/TypedArrayConstructors/internals/Delete/BigInt/indexed-value-sab-strict.js","esid":" sec-integer-indexed-exotic-objects-delete-p\r","description":" >\rThrows TypeError exception in strict mode.\r\n","flags":["onlyStrict\r"],"includes":["testTypedArray.js\r"],"features":["align-detached-buffer-semantics-with-web-reality","TypedArray","SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/TypedArrayConstructors/internals/Delete/indexed-value-sab-non-strict.js","esid":" sec-integer-indexed-exotic-objects-delete-p\r","description":" >\rReturn value from valid numeric index, with SharedArrayBuffer\r\n","flags":["noStrict\r"],"includes":["testTypedArray.js\r"],"features":["align-detached-buffer-semantics-with-web-reality","TypedArray","SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/TypedArrayConstructors/internals/Delete/indexed-value-sab-strict.js","esid":" sec-integer-indexed-exotic-objects-delete-p\r","description":" >\rThrows TypeError exception in strict mode.\r\n","flags":["onlyStrict\r"],"includes":["testTypedArray.js\r"],"features":["align-detached-buffer-semantics-with-web-reality","TypedArray","SharedArrayBuffer\r"]},{"path":"./test262/test/built-ins/TypedArrayConstructors/internals/Get/indexed-value-sab.js","esid":" sec-integer-indexed-exotic-objects-get-p-receiver\r","description":" >\rReturn value from valid numeric index, with SharedArrayBuffer\r\n","includes":["testTypedArray.js\r"],"features":["TypedArray","SharedArrayBuffer\r"]},{"path":"./test262/test/language/block-scope/syntax/redeclaration/async-function-name-redeclaration-attempt-with-async-function.js","description":" redeclaration with AsyncFunctionDeclaration (AsyncFunctionDeclaration in BlockStatement)\r","esid":" sec-block-static-semantics-early-errors\r","features":["async-functions\r"],"flags":["generated\r"],"negative":{"phase":"parse\r","type":"SyntaxError\r"},"info":" |\rBlock : { StatementList }\r\n\r\nIt is a Syntax Error if the LexicallyDeclaredNames of StatementList contains\r\nany duplicate entries.\r\n\r\n"},{"path":"./test262/test/language/block-scope/syntax/redeclaration/async-function-name-redeclaration-attempt-with-class.js","description":" redeclaration with ClassDeclaration (AsyncFunctionDeclaration in BlockStatement)\r","esid":" sec-block-static-semantics-early-errors\r","features":["async-functions\r"],"flags":["generated\r"],"negative":{"phase":"parse\r","type":"SyntaxError\r"},"info":" |\rBlock : { StatementList }\r\n\r\nIt is a Syntax Error if the LexicallyDeclaredNames of StatementList contains\r\nany duplicate entries.\r\n\r\n"},{"path":"./test262/test/language/block-scope/syntax/redeclaration/async-function-name-redeclaration-attempt-with-const.js","description":" redeclaration with const-LexicalDeclaration (AsyncFunctionDeclaration in BlockStatement)\r","esid":" sec-block-static-semantics-early-errors\r","features":["async-functions\r"],"flags":["generated\r"],"negative":{"phase":"parse\r","type":"SyntaxError\r"},"info":" |\rBlock : { StatementList }\r\n\r\nIt is a Syntax Error if the LexicallyDeclaredNames of StatementList contains\r\nany duplicate entries.\r\n\r\n"},{"path":"./test262/test/language/block-scope/syntax/redeclaration/async-function-name-redeclaration-attempt-with-function.js","description":" redeclaration with FunctionDeclaration (AsyncFunctionDeclaration in BlockStatement)\r","esid":" sec-block-static-semantics-early-errors\r","features":["async-functions\r"],"flags":["generated\r"],"negative":{"phase":"parse\r","type":"SyntaxError\r"},"info":" |\rBlock : { StatementList }\r\n\r\nIt is a Syntax Error if the LexicallyDeclaredNames of StatementList contains\r\nany duplicate entries.\r\n\r\n"},{"path":"./test262/test/language/block-scope/syntax/redeclaration/async-function-name-redeclaration-attempt-with-generator.js","description":" redeclaration with GeneratorDeclaration (AsyncFunctionDeclaration in BlockStatement)\r","esid":" sec-block-static-semantics-early-errors\r","features":["generators","async-functions\r"],"flags":["generated\r"],"negative":{"phase":"parse\r","type":"SyntaxError\r"},"info":" |\rBlock : { StatementList }\r\n\r\nIt is a Syntax Error if the LexicallyDeclaredNames of StatementList contains\r\nany duplicate entries.\r\n\r\n"},{"path":"./test262/test/language/block-scope/syntax/redeclaration/async-function-name-redeclaration-attempt-with-let.js","description":" redeclaration with let-LexicalDeclaration (AsyncFunctionDeclaration in BlockStatement)\r","esid":" sec-block-static-semantics-early-errors\r","features":["async-functions\r"],"flags":["generated\r"],"negative":{"phase":"parse\r","type":"SyntaxError\r"},"info":" |\rBlock : { StatementList }\r\n\r\nIt is a Syntax Error if the LexicallyDeclaredNames of StatementList contains\r\nany duplicate entries.\r\n\r\n"},{"path":"./test262/test/language/block-scope/syntax/redeclaration/async-function-name-redeclaration-attempt-with-var.js","description":" redeclaration with VariableDeclaration (AsyncFunctionDeclaration in BlockStatement)\r","esid":" sec-block-static-semantics-early-errors\r","features":["async-functions\r"],"flags":["generated\r"],"negative":{"phase":"parse\r","type":"SyntaxError\r"},"info":" |\rBlock : { StatementList }\r\n\r\nIt is a Syntax Error if any element of the LexicallyDeclaredNames of\r\nStatementList also occurs in the VarDeclaredNames of StatementList.\r\n\r\n"},{"path":"./test262/test/language/block-scope/syntax/redeclaration/class-name-redeclaration-attempt-with-async-function.js","description":" redeclaration with AsyncFunctionDeclaration (ClassDeclaration in BlockStatement)\r","esid":" sec-block-static-semantics-early-errors\r","features":["async-functions\r"],"flags":["generated\r"],"negative":{"phase":"parse\r","type":"SyntaxError\r"},"info":" |\rBlock : { StatementList }\r\n\r\nIt is a Syntax Error if the LexicallyDeclaredNames of StatementList contains\r\nany duplicate entries.\r\n\r\n"},{"path":"./test262/test/language/block-scope/syntax/redeclaration/const-name-redeclaration-attempt-with-async-function.js","description":" redeclaration with AsyncFunctionDeclaration (LexicalDeclaration (const) in BlockStatement)\r","esid":" sec-block-static-semantics-early-errors\r","features":["async-functions\r"],"flags":["generated\r"],"negative":{"phase":"parse\r","type":"SyntaxError\r"},"info":" |\rBlock : { StatementList }\r\n\r\nIt is a Syntax Error if the LexicallyDeclaredNames of StatementList contains\r\nany duplicate entries.\r\n\r\n"},{"path":"./test262/test/language/block-scope/syntax/redeclaration/fn-scope-var-name-redeclaration-attempt-with-async-function.js","description":" redeclaration with AsyncFunctionDeclaration (VariableDeclaration in BlockStatement inside a function)\r","esid":" sec-block-static-semantics-early-errors\r","features":["async-functions\r"],"flags":["generated\r"],"negative":{"phase":"parse\r","type":"SyntaxError\r"},"info":" |\rBlock : { StatementList }\r\n\r\nIt is a Syntax Error if any element of the LexicallyDeclaredNames of\r\nStatementList also occurs in the VarDeclaredNames of StatementList.\r\n\r\n"},{"path":"./test262/test/language/block-scope/syntax/redeclaration/function-name-redeclaration-attempt-with-async-function.js","description":" redeclaration with AsyncFunctionDeclaration (FunctionDeclaration in BlockStatement)\r","esid":" sec-block-static-semantics-early-errors\r","features":["async-functions\r"],"flags":["generated\r"],"negative":{"phase":"parse\r","type":"SyntaxError\r"},"info":" |\rBlock : { StatementList }\r\n\r\nIt is a Syntax Error if the LexicallyDeclaredNames of StatementList contains\r\nany duplicate entries.\r\n\r\n"},{"path":"./test262/test/language/block-scope/syntax/redeclaration/generator-name-redeclaration-attempt-with-async-function.js","description":" redeclaration with AsyncFunctionDeclaration (GeneratorDeclaration in BlockStatement)\r","esid":" sec-block-static-semantics-early-errors\r","features":["async-functions","generators\r"],"flags":["generated\r"],"negative":{"phase":"parse\r","type":"SyntaxError\r"},"info":" |\rBlock : { StatementList }\r\n\r\nIt is a Syntax Error if the LexicallyDeclaredNames of StatementList contains\r\nany duplicate entries.\r\n\r\n"},{"path":"./test262/test/language/block-scope/syntax/redeclaration/inner-block-var-name-redeclaration-attempt-with-async-function.js","description":" redeclaration with AsyncFunctionDeclaration (VariableDeclaration in a BlockStatement inside a BlockStatement)\r","esid":" sec-block-static-semantics-early-errors\r","features":["async-functions\r"],"flags":["generated\r"],"negative":{"phase":"parse\r","type":"SyntaxError\r"},"info":" |\rBlock : { StatementList }\r\n\r\nIt is a Syntax Error if any element of the LexicallyDeclaredNames of\r\nStatementList also occurs in the VarDeclaredNames of StatementList.\r\n\r\nStatic Semantics: VarDeclaredNames\r\n\r\nBlock : { }\r\n\r\n1. Return a new empty List.\r\n\r\nStatementList : StatementList StatementListItem\r\n\r\n1. Let names be VarDeclaredNames of StatementList.\r\n2. Append to names the elements of the VarDeclaredNames of StatementListItem.\r\n3. Return names.\r\n\r\nStatementListItem : Declaration\r\n\r\n1. Return a new empty List.\r\n\r\n"},{"path":"./test262/test/language/block-scope/syntax/redeclaration/inner-block-var-redeclaration-attempt-after-async-function.js","description":" redeclaration with AsyncFunctionDeclaration (VariableDeclaration in a BlockStatement inside a BlockStatement)\r","esid":" sec-block-static-semantics-early-errors\r","features":["async-functions\r"],"flags":["generated\r"],"negative":{"phase":"parse\r","type":"SyntaxError\r"},"info":" |\rBlock : { StatementList }\r\n\r\nIt is a Syntax Error if any element of the LexicallyDeclaredNames of\r\nStatementList also occurs in the VarDeclaredNames of StatementList.\r\n\r\nStatic Semantics: VarDeclaredNames\r\n\r\nBlock : { }\r\n\r\n1. Return a new empty List.\r\n\r\nStatementList : StatementList StatementListItem\r\n\r\n1. Let names be VarDeclaredNames of StatementList.\r\n2. Append to names the elements of the VarDeclaredNames of StatementListItem.\r\n3. Return names.\r\n\r\nStatementListItem : Declaration\r\n\r\n1. Return a new empty List.\r\n\r\n"},{"path":"./test262/test/language/block-scope/syntax/redeclaration/let-name-redeclaration-attempt-with-async-function.js","description":" redeclaration with AsyncFunctionDeclaration (LexicalDeclaration (let) in BlockStatement)\r","esid":" sec-block-static-semantics-early-errors\r","features":["async-functions\r"],"flags":["generated\r"],"negative":{"phase":"parse\r","type":"SyntaxError\r"},"info":" |\rBlock : { StatementList }\r\n\r\nIt is a Syntax Error if the LexicallyDeclaredNames of StatementList contains\r\nany duplicate entries.\r\n\r\n"},{"path":"./test262/test/language/block-scope/syntax/redeclaration/var-name-redeclaration-attempt-with-async-function.js","description":" redeclaration with AsyncFunctionDeclaration (VariableDeclaration in BlockStatement)\r","esid":" sec-block-static-semantics-early-errors\r","features":["async-functions\r"],"flags":["generated\r"],"negative":{"phase":"parse\r","type":"SyntaxError\r"},"info":" |\rBlock : { StatementList }\r\n\r\nIt is a Syntax Error if any element of the LexicallyDeclaredNames of\r\nStatementList also occurs in the VarDeclaredNames of StatementList.\r\n\r\n"},{"path":"./test262/test/language/block-scope/syntax/redeclaration/var-redeclaration-attempt-after-async-function.js","description":" redeclaration with AsyncFunctionDeclaration (VariableDeclaration in BlockStatement)\r","esid":" sec-block-static-semantics-early-errors\r","features":["async-functions\r"],"flags":["generated\r"],"negative":{"phase":"parse\r","type":"SyntaxError\r"},"info":" |\rBlock : { StatementList }\r\n\r\nIt is a Syntax Error if any element of the LexicallyDeclaredNames of\r\nStatementList also occurs in the VarDeclaredNames of StatementList.\r\n\r\n"},{"path":"./test262/test/language/eval-code/direct/async-func-decl-a-following-parameter-is-named-arguments-declare-arguments-and-assign.js","description":" Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a following parameter is named |arguments|.)\r","esid":" sec-evaldeclarationinstantiation\r","features":["globalThis\r"],"flags":["generated","async","noStrict\r"]},{"path":"./test262/test/language/eval-code/direct/async-func-decl-a-following-parameter-is-named-arguments-declare-arguments.js","description":" Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a following parameter is named |arguments|.)\r","esid":" sec-evaldeclarationinstantiation\r","features":["globalThis\r"],"flags":["generated","async","noStrict\r"]},{"path":"./test262/test/language/eval-code/direct/async-func-decl-a-preceding-parameter-is-named-arguments-declare-arguments-and-assign.js","description":" Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a preceding parameter is named |arguments|.)\r","esid":" sec-evaldeclarationinstantiation\r","features":["globalThis\r"],"flags":["generated","async","noStrict\r"]},{"path":"./test262/test/language/eval-code/direct/async-func-decl-a-preceding-parameter-is-named-arguments-declare-arguments.js","description":" Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a preceding parameter is named |arguments|.)\r","esid":" sec-evaldeclarationinstantiation\r","features":["globalThis\r"],"flags":["generated","async","noStrict\r"]},{"path":"./test262/test/language/eval-code/direct/async-func-decl-fn-body-cntns-arguments-func-decl-declare-arguments-and-assign.js","description":" Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| function declaration.)\r","esid":" sec-evaldeclarationinstantiation\r","features":["globalThis\r"],"flags":["generated","async","noStrict\r"]},{"path":"./test262/test/language/eval-code/direct/async-func-decl-fn-body-cntns-arguments-func-decl-declare-arguments.js","description":" Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| function declaration.)\r","esid":" sec-evaldeclarationinstantiation\r","features":["globalThis\r"],"flags":["generated","async","noStrict\r"]},{"path":"./test262/test/language/eval-code/direct/async-func-decl-fn-body-cntns-arguments-lex-bind-declare-arguments-and-assign.js","description":" Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| lexical binding.)\r","esid":" sec-evaldeclarationinstantiation\r","features":["globalThis\r"],"flags":["generated","async","noStrict\r"]},{"path":"./test262/test/language/eval-code/direct/async-func-decl-fn-body-cntns-arguments-lex-bind-declare-arguments.js","description":" Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| lexical binding.)\r","esid":" sec-evaldeclarationinstantiation\r","features":["globalThis\r"],"flags":["generated","async","noStrict\r"]},{"path":"./test262/test/language/eval-code/direct/async-func-decl-fn-body-cntns-arguments-var-bind-declare-arguments-and-assign.js","description":" Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| var-binding.)\r","esid":" sec-evaldeclarationinstantiation\r","features":["globalThis\r"],"flags":["generated","async","noStrict\r"]},{"path":"./test262/test/language/eval-code/direct/async-func-decl-fn-body-cntns-arguments-var-bind-declare-arguments.js","description":" Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| var-binding.)\r","esid":" sec-evaldeclarationinstantiation\r","features":["globalThis\r"],"flags":["generated","async","noStrict\r"]},{"path":"./test262/test/language/eval-code/direct/async-func-decl-no-pre-existing-arguments-bindings-are-present-declare-arguments-and-assign.js","description":" Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when no pre-existing |arguments| bindings are present.)\r","esid":" sec-evaldeclarationinstantiation\r","features":["globalThis\r"],"flags":["generated","async","noStrict\r"]},{"path":"./test262/test/language/eval-code/direct/async-func-decl-no-pre-existing-arguments-bindings-are-present-declare-arguments.js","description":" Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when no pre-existing |arguments| bindings are present.)\r","esid":" sec-evaldeclarationinstantiation\r","features":["globalThis\r"],"flags":["generated","async","noStrict\r"]},{"path":"./test262/test/language/eval-code/direct/async-func-expr-named-a-following-parameter-is-named-arguments-declare-arguments-and-assign.js","description":" Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a following parameter is named |arguments|.)\r","esid":" sec-evaldeclarationinstantiation\r","features":["globalThis\r"],"flags":["generated","async","noStrict\r"]},{"path":"./test262/test/language/eval-code/direct/async-func-expr-named-a-following-parameter-is-named-arguments-declare-arguments.js","description":" Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a following parameter is named |arguments|.)\r","esid":" sec-evaldeclarationinstantiation\r","features":["globalThis\r"],"flags":["generated","async","noStrict\r"]},{"path":"./test262/test/language/eval-code/direct/async-func-expr-named-a-preceding-parameter-is-named-arguments-declare-arguments-and-assign.js","description":" Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a preceding parameter is named |arguments|.)\r","esid":" sec-evaldeclarationinstantiation\r","features":["globalThis\r"],"flags":["generated","async","noStrict\r"]},{"path":"./test262/test/language/eval-code/direct/async-func-expr-named-a-preceding-parameter-is-named-arguments-declare-arguments.js","description":" Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a preceding parameter is named |arguments|.)\r","esid":" sec-evaldeclarationinstantiation\r","features":["globalThis\r"],"flags":["generated","async","noStrict\r"]},{"path":"./test262/test/language/eval-code/direct/async-func-expr-named-fn-body-cntns-arguments-func-decl-declare-arguments-and-assign.js","description":" Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| function declaration.)\r","esid":" sec-evaldeclarationinstantiation\r","features":["globalThis\r"],"flags":["generated","async","noStrict\r"]},{"path":"./test262/test/language/eval-code/direct/async-func-expr-named-fn-body-cntns-arguments-func-decl-declare-arguments.js","description":" Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| function declaration.)\r","esid":" sec-evaldeclarationinstantiation\r","features":["globalThis\r"],"flags":["generated","async","noStrict\r"]},{"path":"./test262/test/language/eval-code/direct/async-func-expr-named-fn-body-cntns-arguments-lex-bind-declare-arguments-and-assign.js","description":" Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| lexical binding.)\r","esid":" sec-evaldeclarationinstantiation\r","features":["globalThis\r"],"flags":["generated","async","noStrict\r"]},{"path":"./test262/test/language/eval-code/direct/async-func-expr-named-fn-body-cntns-arguments-lex-bind-declare-arguments.js","description":" Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| lexical binding.)\r","esid":" sec-evaldeclarationinstantiation\r","features":["globalThis\r"],"flags":["generated","async","noStrict\r"]},{"path":"./test262/test/language/eval-code/direct/async-func-expr-named-fn-body-cntns-arguments-var-bind-declare-arguments-and-assign.js","description":" Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| var-binding.)\r","esid":" sec-evaldeclarationinstantiation\r","features":["globalThis\r"],"flags":["generated","async","noStrict\r"]},{"path":"./test262/test/language/eval-code/direct/async-func-expr-named-fn-body-cntns-arguments-var-bind-declare-arguments.js","description":" Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| var-binding.)\r","esid":" sec-evaldeclarationinstantiation\r","features":["globalThis\r"],"flags":["generated","async","noStrict\r"]},{"path":"./test262/test/language/eval-code/direct/async-func-expr-named-no-pre-existing-arguments-bindings-are-present-declare-arguments-and-assign.js","description":" Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when no pre-existing |arguments| bindings are present.)\r","esid":" sec-evaldeclarationinstantiation\r","features":["globalThis\r"],"flags":["generated","async","noStrict\r"]},{"path":"./test262/test/language/eval-code/direct/async-func-expr-named-no-pre-existing-arguments-bindings-are-present-declare-arguments.js","description":" Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when no pre-existing |arguments| bindings are present.)\r","esid":" sec-evaldeclarationinstantiation\r","features":["globalThis\r"],"flags":["generated","async","noStrict\r"]},{"path":"./test262/test/language/eval-code/direct/async-func-expr-nameless-a-following-parameter-is-named-arguments-declare-arguments-and-assign.js","description":" Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a following parameter is named |arguments|.)\r","esid":" sec-evaldeclarationinstantiation\r","features":["globalThis\r"],"flags":["generated","async","noStrict\r"]},{"path":"./test262/test/language/eval-code/direct/async-func-expr-nameless-a-following-parameter-is-named-arguments-declare-arguments.js","description":" Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a following parameter is named |arguments|.)\r","esid":" sec-evaldeclarationinstantiation\r","features":["globalThis\r"],"flags":["generated","async","noStrict\r"]},{"path":"./test262/test/language/eval-code/direct/async-func-expr-nameless-a-preceding-parameter-is-named-arguments-declare-arguments-and-assign.js","description":" Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a preceding parameter is named |arguments|.)\r","esid":" sec-evaldeclarationinstantiation\r","features":["globalThis\r"],"flags":["generated","async","noStrict\r"]},{"path":"./test262/test/language/eval-code/direct/async-func-expr-nameless-a-preceding-parameter-is-named-arguments-declare-arguments.js","description":" Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a preceding parameter is named |arguments|.)\r","esid":" sec-evaldeclarationinstantiation\r","features":["globalThis\r"],"flags":["generated","async","noStrict\r"]},{"path":"./test262/test/language/eval-code/direct/async-func-expr-nameless-fn-body-cntns-arguments-func-decl-declare-arguments-and-assign.js","description":" Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| function declaration.)\r","esid":" sec-evaldeclarationinstantiation\r","features":["globalThis\r"],"flags":["generated","async","noStrict\r"]},{"path":"./test262/test/language/eval-code/direct/async-func-expr-nameless-fn-body-cntns-arguments-func-decl-declare-arguments.js","description":" Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| function declaration.)\r","esid":" sec-evaldeclarationinstantiation\r","features":["globalThis\r"],"flags":["generated","async","noStrict\r"]},{"path":"./test262/test/language/eval-code/direct/async-func-expr-nameless-fn-body-cntns-arguments-lex-bind-declare-arguments-and-assign.js","description":" Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| lexical binding.)\r","esid":" sec-evaldeclarationinstantiation\r","features":["globalThis\r"],"flags":["generated","async","noStrict\r"]},{"path":"./test262/test/language/eval-code/direct/async-func-expr-nameless-fn-body-cntns-arguments-lex-bind-declare-arguments.js","description":" Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| lexical binding.)\r","esid":" sec-evaldeclarationinstantiation\r","features":["globalThis\r"],"flags":["generated","async","noStrict\r"]},{"path":"./test262/test/language/eval-code/direct/async-func-expr-nameless-fn-body-cntns-arguments-var-bind-declare-arguments-and-assign.js","description":" Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| var-binding.)\r","esid":" sec-evaldeclarationinstantiation\r","features":["globalThis\r"],"flags":["generated","async","noStrict\r"]},{"path":"./test262/test/language/eval-code/direct/async-func-expr-nameless-fn-body-cntns-arguments-var-bind-declare-arguments.js","description":" Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| var-binding.)\r","esid":" sec-evaldeclarationinstantiation\r","features":["globalThis\r"],"flags":["generated","async","noStrict\r"]},{"path":"./test262/test/language/eval-code/direct/async-func-expr-nameless-no-pre-existing-arguments-bindings-are-present-declare-arguments-and-assign.js","description":" Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when no pre-existing |arguments| bindings are present.)\r","esid":" sec-evaldeclarationinstantiation\r","features":["globalThis\r"],"flags":["generated","async","noStrict\r"]},{"path":"./test262/test/language/eval-code/direct/async-func-expr-nameless-no-pre-existing-arguments-bindings-are-present-declare-arguments.js","description":" Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when no pre-existing |arguments| bindings are present.)\r","esid":" sec-evaldeclarationinstantiation\r","features":["globalThis\r"],"flags":["generated","async","noStrict\r"]},{"path":"./test262/test/language/eval-code/direct/async-meth-a-following-parameter-is-named-arguments-declare-arguments-and-assign.js","description":" Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a following parameter is named |arguments|.)\r","esid":" sec-evaldeclarationinstantiation\r","features":["globalThis\r"],"flags":["generated","async","noStrict\r"]},{"path":"./test262/test/language/eval-code/direct/async-meth-a-following-parameter-is-named-arguments-declare-arguments.js","description":" Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a following parameter is named |arguments|.)\r","esid":" sec-evaldeclarationinstantiation\r","features":["globalThis\r"],"flags":["generated","async","noStrict\r"]},{"path":"./test262/test/language/eval-code/direct/async-meth-a-preceding-parameter-is-named-arguments-declare-arguments-and-assign.js","description":" Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a preceding parameter is named |arguments|.)\r","esid":" sec-evaldeclarationinstantiation\r","features":["globalThis\r"],"flags":["generated","async","noStrict\r"]},{"path":"./test262/test/language/eval-code/direct/async-meth-a-preceding-parameter-is-named-arguments-declare-arguments.js","description":" Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a preceding parameter is named |arguments|.)\r","esid":" sec-evaldeclarationinstantiation\r","features":["globalThis\r"],"flags":["generated","async","noStrict\r"]},{"path":"./test262/test/language/eval-code/direct/async-meth-fn-body-cntns-arguments-func-decl-declare-arguments-and-assign.js","description":" Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| function declaration.)\r","esid":" sec-evaldeclarationinstantiation\r","features":["globalThis\r"],"flags":["generated","async","noStrict\r"]},{"path":"./test262/test/language/eval-code/direct/async-meth-fn-body-cntns-arguments-func-decl-declare-arguments.js","description":" Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| function declaration.)\r","esid":" sec-evaldeclarationinstantiation\r","features":["globalThis\r"],"flags":["generated","async","noStrict\r"]},{"path":"./test262/test/language/eval-code/direct/async-meth-fn-body-cntns-arguments-lex-bind-declare-arguments-and-assign.js","description":" Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| lexical binding.)\r","esid":" sec-evaldeclarationinstantiation\r","features":["globalThis\r"],"flags":["generated","async","noStrict\r"]},{"path":"./test262/test/language/eval-code/direct/async-meth-fn-body-cntns-arguments-lex-bind-declare-arguments.js","description":" Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| lexical binding.)\r","esid":" sec-evaldeclarationinstantiation\r","features":["globalThis\r"],"flags":["generated","async","noStrict\r"]},{"path":"./test262/test/language/eval-code/direct/async-meth-fn-body-cntns-arguments-var-bind-declare-arguments-and-assign.js","description":" Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| var-binding.)\r","esid":" sec-evaldeclarationinstantiation\r","features":["globalThis\r"],"flags":["generated","async","noStrict\r"]},{"path":"./test262/test/language/eval-code/direct/async-meth-fn-body-cntns-arguments-var-bind-declare-arguments.js","description":" Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| var-binding.)\r","esid":" sec-evaldeclarationinstantiation\r","features":["globalThis\r"],"flags":["generated","async","noStrict\r"]},{"path":"./test262/test/language/eval-code/direct/async-meth-no-pre-existing-arguments-bindings-are-present-declare-arguments-and-assign.js","description":" Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when no pre-existing |arguments| bindings are present.)\r","esid":" sec-evaldeclarationinstantiation\r","features":["globalThis\r"],"flags":["generated","async","noStrict\r"]},{"path":"./test262/test/language/eval-code/direct/async-meth-no-pre-existing-arguments-bindings-are-present-declare-arguments.js","description":" Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when no pre-existing |arguments| bindings are present.)\r","esid":" sec-evaldeclarationinstantiation\r","features":["globalThis\r"],"flags":["generated","async","noStrict\r"]},{"path":"./test262/test/language/expressions/assignmenttargettype/direct-asyncarrowfunction-1.js","description":" Static Semantics AssignmentTargetType, Return invalid. (Direct assignment)\r","flags":["generated\r"],"negative":{"phase":"parse\r","type":"SyntaxError\r"},"info":" |\rDirect assignment\r\n\r\nAsyncArrowFunction\r\nStatic Semantics AssignmentTargetType, Return invalid.\r\n\r\n"},{"path":"./test262/test/language/expressions/assignmenttargettype/parenthesized-primaryexpression-asyncfunctionexpression.js","description":" PrimaryExpression AsyncFunctionExpression; Return invalid. (ParenthesizedExpression)\r","esid":" sec-grouping-operator-static-semantics-assignmenttargettype\r","flags":["generated\r"],"negative":{"phase":"parse\r","type":"SyntaxError\r"},"info":" |\rParenthesizedExpression: (Expression)\r\n\r\nReturn AssignmentTargetType of Expression.\r\n"},{"path":"./test262/test/language/expressions/assignmenttargettype/parenthesized-primaryexpression-asyncgeneratorexpression.js","description":" PrimaryExpression AsyncGeneratorExpression; Return invalid. (ParenthesizedExpression)\r","esid":" sec-grouping-operator-static-semantics-assignmenttargettype\r","flags":["generated\r"],"negative":{"phase":"parse\r","type":"SyntaxError\r"},"info":" |\rParenthesizedExpression: (Expression)\r\n\r\nReturn AssignmentTargetType of Expression.\r\n"},{"path":"./test262/test/language/expressions/async-arrow-function/arrow-returns-promise.js","author":" Brian Terlson <brian.terlson@microsoft.com>\r","esid":" pending\r","description":" >\rAsync arrow functions return promises\r\n","flags":["async\r"]},{"path":"./test262/test/language/expressions/async-arrow-function/async-lineterminator-identifier-throws.js","esid":" prod-AsyncArrowFunction\r","description":" >\rasync arrows cannot have a line terminator between \"async\" and the AsyncArrowBindingIdentifier\r\n","info":" |\r14.7 Async Arrow Function Definitions\r\n\r\nAsyncArrowFunction:\r\nasync [no LineTerminator here] AsyncArrowBindingIdentifier [no LineTerminator here] => AsyncConciseBody\r\n[...]\r\n"},{"path":"./test262/test/language/expressions/async-arrow-function/await-as-param-ident-nested-arrow-parameter-position.js","esid":" sec-async-arrow-function-definitions\r","description":" >\rIt is a SyntaxError if FormalParameters' default expressions contains await.\r\n","negative":{"phase":"parse\r","type":"SyntaxError\r"}},{"path":"./test262/test/language/expressions/async-arrow-function/await-as-param-nested-arrow-body-position.js","esid":" sec-async-arrow-function-definitions\r","description":" >\rIt is a SyntaxError if FormalParameters' default expressions contains await.\r\n","negative":{"phase":"parse\r","type":"SyntaxError\r"}},{"path":"./test262/test/language/expressions/async-arrow-function/await-as-param-nested-arrow-parameter-position.js","esid":" sec-async-arrow-function-definitions\r","description":" >\rIt is a SyntaxError if FormalParameters' default expressions contains await.\r\n","negative":{"phase":"parse\r","type":"SyntaxError\r"}},{"path":"./test262/test/language/expressions/async-arrow-function/await-as-param-rest-nested-arrow-parameter-position.js","esid":" sec-async-arrow-function-definitions\r","description":" >\rIt is a SyntaxError if FormalParameters' default expressions contains await.\r\n","negative":{"phase":"parse\r","type":"SyntaxError\r"}},{"path":"./test262/test/language/expressions/async-arrow-function/dflt-params-abrupt.js","description":" Abrupt completion returned by evaluation of initializer (async arrow function expression)\r","esid":" sec-async-arrow-function-definitions\r","features":["default-parameters","async-functions\r"],"flags":["generated","async\r"],"info":" |\r14.7 Async Arrow Function Definitions\r\n\r\nAsyncArrowFunction :\r\n...\r\nCoverCallExpressionAndAsyncArrowHead => AsyncConciseBody\r\n\r\nAsyncConciseBody :\r\n{ AsyncFunctionBody }\r\n\r\n...\r\n\r\nSupplemental Syntax\r\n\r\nWhen processing an instance of the production AsyncArrowFunction :\r\nCoverCallExpressionAndAsyncArrowHead => AsyncConciseBody the interpretation of\r\nCoverCallExpressionAndAsyncArrowHead is refined using the following grammar:\r\n\r\nAsyncArrowHead :\r\nasync ArrowFormalParameters\r\n\r\n\r\n14.1.19 Runtime Semantics: IteratorBindingInitialization\r\n\r\nFormalsList : FormalsList , FormalParameter\r\n\r\n1. Let status be the result of performing IteratorBindingInitialization for\r\nFormalsList using iteratorRecord and environment as the arguments.\r\n2. ReturnIfAbrupt(status).\r\n3. Return the result of performing IteratorBindingInitialization for\r\nFormalParameter using iteratorRecord and environment as the arguments.\r\n\r\n"},{"path":"./test262/test/language/expressions/async-arrow-function/dflt-params-arg-val-not-undefined.js","description":" Use of initializer when argument value is not `undefined` (async arrow function expression)\r","esid":" sec-async-arrow-function-definitions\r","features":["default-parameters","async-functions\r"],"flags":["generated","async\r"],"info":" |\r14.7 Async Arrow Function Definitions\r\n\r\nAsyncArrowFunction :\r\n...\r\nCoverCallExpressionAndAsyncArrowHead => AsyncConciseBody\r\n\r\nAsyncConciseBody :\r\n{ AsyncFunctionBody }\r\n\r\n...\r\n\r\nSupplemental Syntax\r\n\r\nWhen processing an instance of the production AsyncArrowFunction :\r\nCoverCallExpressionAndAsyncArrowHead => AsyncConciseBody the interpretation of\r\nCoverCallExpressionAndAsyncArrowHead is refined using the following grammar:\r\n\r\nAsyncArrowHead :\r\nasync ArrowFormalParameters\r\n\r\n\r\n14.1.19 Runtime Semantics: IteratorBindingInitialization\r\n\r\nFormalsList : FormalsList , FormalParameter\r\n\r\n[...]\r\n23. Let iteratorRecord be Record {[[Iterator]]:\r\nCreateListIterator(argumentsList), [[Done]]: false}.\r\n24. If hasDuplicates is true, then\r\n[...]\r\n25. Else,\r\na. Perform ? IteratorBindingInitialization for formals with\r\niteratorRecord and env as arguments.\r\n[...]\r\n\r\n"},{"path":"./test262/test/language/expressions/async-arrow-function/dflt-params-arg-val-undefined.js","description":" Use of initializer when argument value is `undefined` (async arrow function expression)\r","esid":" sec-async-arrow-function-definitions\r","features":["default-parameters","async-functions\r"],"flags":["generated","async\r"],"info":" |\r14.7 Async Arrow Function Definitions\r\n\r\nAsyncArrowFunction :\r\n...\r\nCoverCallExpressionAndAsyncArrowHead => AsyncConciseBody\r\n\r\nAsyncConciseBody :\r\n{ AsyncFunctionBody }\r\n\r\n...\r\n\r\nSupplemental Syntax\r\n\r\nWhen processing an instance of the production AsyncArrowFunction :\r\nCoverCallExpressionAndAsyncArrowHead => AsyncConciseBody the interpretation of\r\nCoverCallExpressionAndAsyncArrowHead is refined using the following grammar:\r\n\r\nAsyncArrowHead :\r\nasync ArrowFormalParameters\r\n\r\n\r\n14.1.19 Runtime Semantics: IteratorBindingInitialization\r\n\r\nFormalsList : FormalsList , FormalParameter\r\n\r\n[...]\r\n23. Let iteratorRecord be Record {[[Iterator]]:\r\nCreateListIterator(argumentsList), [[Done]]: false}.\r\n24. If hasDuplicates is true, then\r\n[...]\r\n25. Else,\r\na. Perform ? IteratorBindingInitialization for formals with\r\niteratorRecord and env as arguments.\r\n[...]\r\n\r\n"},{"path":"./test262/test/language/expressions/async-arrow-function/dflt-params-ref-later.js","description":" Referencing a parameter that occurs later in the ParameterList (async arrow function expression)\r","esid":" sec-async-arrow-function-definitions\r","features":["default-parameters","async-functions\r"],"flags":["generated","async\r"],"info":" |\r14.7 Async Arrow Function Definitions\r\n\r\nAsyncArrowFunction :\r\n...\r\nCoverCallExpressionAndAsyncArrowHead => AsyncConciseBody\r\n\r\nAsyncConciseBody :\r\n{ AsyncFunctionBody }\r\n\r\n...\r\n\r\nSupplemental Syntax\r\n\r\nWhen processing an instance of the production AsyncArrowFunction :\r\nCoverCallExpressionAndAsyncArrowHead => AsyncConciseBody the interpretation of\r\nCoverCallExpressionAndAsyncArrowHead is refined using the following grammar:\r\n\r\nAsyncArrowHead :\r\nasync ArrowFormalParameters\r\n\r\n\r\n14.1.19 Runtime Semantics: IteratorBindingInitialization\r\n\r\nFormalsList : FormalsList , FormalParameter\r\n\r\n1. Let status be the result of performing IteratorBindingInitialization for\r\nFormalsList using iteratorRecord and environment as the arguments.\r\n2. ReturnIfAbrupt(status).\r\n3. Return the result of performing IteratorBindingInitialization for\r\nFormalParameter using iteratorRecord and environment as the arguments.\r\n\r\n"},{"path":"./test262/test/language/expressions/async-arrow-function/dflt-params-ref-prior.js","description":" Referencing a parameter that occurs earlier in the ParameterList (async arrow function expression)\r","esid":" sec-async-arrow-function-definitions\r","features":["default-parameters","async-functions\r"],"flags":["generated","async\r"],"info":" |\r14.7 Async Arrow Function Definitions\r\n\r\nAsyncArrowFunction :\r\n...\r\nCoverCallExpressionAndAsyncArrowHead => AsyncConciseBody\r\n\r\nAsyncConciseBody :\r\n{ AsyncFunctionBody }\r\n\r\n...\r\n\r\nSupplemental Syntax\r\n\r\nWhen processing an instance of the production AsyncArrowFunction :\r\nCoverCallExpressionAndAsyncArrowHead => AsyncConciseBody the interpretation of\r\nCoverCallExpressionAndAsyncArrowHead is refined using the following grammar:\r\n\r\nAsyncArrowHead :\r\nasync ArrowFormalParameters\r\n\r\n\r\n14.1.19 Runtime Semantics: IteratorBindingInitialization\r\n\r\nFormalsList : FormalsList , FormalParameter\r\n\r\n1. Let status be the result of performing IteratorBindingInitialization for\r\nFormalsList using iteratorRecord and environment as the arguments.\r\n2. ReturnIfAbrupt(status).\r\n3. Return the result of performing IteratorBindingInitialization for\r\nFormalParameter using iteratorRecord and environment as the arguments.\r\n\r\n"},{"path":"./test262/test/language/expressions/async-arrow-function/dflt-params-ref-self.js","description":" Referencing a parameter from within its own initializer (async arrow function expression)\r","esid":" sec-async-arrow-function-definitions\r","features":["default-parameters","async-functions\r"],"flags":["generated","async\r"],"info":" |\r14.7 Async Arrow Function Definitions\r\n\r\nAsyncArrowFunction :\r\n...\r\nCoverCallExpressionAndAsyncArrowHead => AsyncConciseBody\r\n\r\nAsyncConciseBody :\r\n{ AsyncFunctionBody }\r\n\r\n...\r\n\r\nSupplemental Syntax\r\n\r\nWhen processing an instance of the production AsyncArrowFunction :\r\nCoverCallExpressionAndAsyncArrowHead => AsyncConciseBody the interpretation of\r\nCoverCallExpressionAndAsyncArrowHead is refined using the following grammar:\r\n\r\nAsyncArrowHead :\r\nasync ArrowFormalParameters\r\n\r\n\r\n14.1.19 Runtime Semantics: IteratorBindingInitialization\r\n\r\nFormalsList : FormalsList , FormalParameter\r\n\r\n1. Let status be the result of performing IteratorBindingInitialization for\r\nFormalsList using iteratorRecord and environment as the arguments.\r\n2. ReturnIfAbrupt(status).\r\n3. Return the result of performing IteratorBindingInitialization for\r\nFormalParameter using iteratorRecord and environment as the arguments.\r\n\r\n"},{"path":"./test262/test/language/expressions/async-arrow-function/dflt-params-rest.js","description":" RestParameter does not support an initializer (async arrow function expression)\r","esid":" sec-async-arrow-function-definitions\r","features":["default-parameters\r"],"flags":["generated\r"],"negative":{"phase":"parse\r","type":"SyntaxError\r"},"info":" |\r14.7 Async Arrow Function Definitions\r\n\r\nAsyncArrowFunction :\r\n...\r\nCoverCallExpressionAndAsyncArrowHead => AsyncConciseBody\r\n\r\nAsyncConciseBody :\r\n{ AsyncFunctionBody }\r\n\r\n...\r\n\r\nSupplemental Syntax\r\n\r\nWhen processing an instance of the production AsyncArrowFunction :\r\nCoverCallExpressionAndAsyncArrowHead => AsyncConciseBody the interpretation of\r\nCoverCallExpressionAndAsyncArrowHead is refined using the following grammar:\r\n\r\nAsyncArrowHead :\r\nasync ArrowFormalParameters\r\n\r\n14.1 Function Definitions\r\n\r\nSyntax\r\n\r\nFunctionRestParameter[Yield] :\r\n\r\nBindingRestElement[?Yield]\r\n\r\n13.3.3 Destructuring Binding Patterns\r\n\r\nSyntax\r\n\r\nBindingRestElement[Yield] :\r\n\r\n...BindingIdentifier[?Yield]\r\n...BindingPattern[?Yield]\r\n\r\n"},{"path":"./test262/test/language/expressions/async-arrow-function/dflt-params-trailing-comma.js","description":" A trailing comma should not increase the respective length, using default parameters (async arrow function expression)\r","esid":" sec-async-arrow-function-definitions\r","features":["async-functions\r"],"flags":["generated","async\r"],"info":" |\r14.7 Async Arrow Function Definitions\r\n\r\nAsyncArrowFunction :\r\n...\r\nCoverCallExpressionAndAsyncArrowHead => AsyncConciseBody\r\n\r\nAsyncConciseBody :\r\n{ AsyncFunctionBody }\r\n\r\n...\r\n\r\nSupplemental Syntax\r\n\r\nWhen processing an instance of the production AsyncArrowFunction :\r\nCoverCallExpressionAndAsyncArrowHead => AsyncConciseBody the interpretation of\r\nCoverCallExpressionAndAsyncArrowHead is refined using the following grammar:\r\n\r\nAsyncArrowHead :\r\nasync ArrowFormalParameters\r\n\r\n\r\nTrailing comma in the parameters list\r\n\r\n14.1 Function Definitions\r\n\r\nFormalParameters[Yield, Await] : FormalParameterList[?Yield, ?Await] ,\r\n"},{"path":"./test262/test/language/expressions/async-arrow-function/early-errors-arrow-arguments-in-formal-parameters.js","author":" Brian Terlson <brian.terlson@microsoft.com>\r","esid":" pending\r","description":" It is a SyntaxError if FormalParameters contains arguments\r","negative":{"phase":"parse\r","type":"SyntaxError\r"},"flags":["onlyStrict\r"]},{"path":"./test262/test/language/expressions/async-arrow-function/early-errors-arrow-await-in-formals-default.js","author":" Brian Terlson <brian.terlson@microsoft.com>\r","esid":" pending\r","description":" It is a SyntaxError if FormalParameters' default expressions contains await\r","negative":{"phase":"parse\r","type":"SyntaxError\r"}},{"path":"./test262/test/language/expressions/async-arrow-function/early-errors-arrow-body-contains-super-property.js","author":" Brian Terlson <brian.terlson@microsoft.com>\r","esid":" pending\r","description":" It is a syntax error if AsyncFunctionBody contains SuperProperty is true\r","negative":{"phase":"parse\r","type":"SyntaxError\r"}},{"path":"./test262/test/language/expressions/async-arrow-function/early-errors-arrow-eval-in-formal-parameters.js","author":" Brian Terlson <brian.terlson@microsoft.com>\r","esid":" pending\r","description":" It is a SyntaxError if FormalParameters contains eval\r","negative":{"phase":"parse\r","type":"SyntaxError\r"},"flags":["onlyStrict\r"]},{"path":"./test262/test/language/expressions/async-arrow-function/early-errors-arrow-formals-body-duplicate.js","author":" Brian Terlson <brian.terlson@microsoft.com>\r","esid":" pending\r","description":" It is a SyntaxError if BoundNames of FormalParameters also occurs in the LexicallyDeclaredNames of AsyncFunctionBody\r","negative":{"phase":"parse\r","type":"SyntaxError\r"}},{"path":"./test262/test/language/expressions/async-arrow-function/escaped-async-line-terminator.js","esid":" sec-async-arrow-function-definitions\r","description":" >\rEscaped \"async\" followed by a line-terminator is not misinterpreted as an AsyncArrowFunction.\r\n","info":" |\r14.7 Async Function Definitions\r\n\r\nasync [no LineTerminator here] AsyncArrowBindingIdentifier[?Yield] [no LineTerminator here] => AsyncConciseBody[?In]\r\n\r\n5.1.5 Grammar Notation\r\n\r\nTerminal symbols are shown\r\nin fixed width font, both in the productions of the grammars and throughout this\r\nspecification whenever the text directly refers to such a terminal symbol. These\r\nare to appear in a script exactly as written. All terminal symbol code points\r\nspecified in this way are to be understood as the appropriate Unicode code points\r\nfrom the Basic Latin range, as opposed to any similar-looking code points from\r\nother Unicode ranges.\r\n","features":["async-functions\r"]},{"path":"./test262/test/language/expressions/async-arrow-function/escaped-async.js","esid":" sec-grammar-notation\r","description":" >\rThe `async` contextual keyword must not contain Unicode escape sequences.\r\n","info":" |\rTerminal symbols are shown\r\nin fixed width font, both in the productions of the grammars and throughout this\r\nspecification whenever the text directly refers to such a terminal symbol. These\r\nare to appear in a script exactly as written. All terminal symbol code points\r\nspecified in this way are to be understood as the appropriate Unicode code points\r\nfrom the Basic Latin range, as opposed to any similar-looking code points from\r\nother Unicode ranges.\r\n","negative":{"phase":"parse\r","type":"SyntaxError\r"},"features":["async-functions\r"]},{"path":"./test262/test/language/expressions/async-arrow-function/eval-var-scope-syntax-err.js","description":" sloppy direct eval in params introduces var (async arrow function expression in sloppy code)\r","esid":" sec-async-arrow-function-definitions\r","features":["default-parameters","async-functions\r"],"flags":["generated","async","noStrict\r"],"info":" |\r14.7 Async Arrow Function Definitions\r\n\r\nAsyncArrowFunction :\r\n...\r\nCoverCallExpressionAndAsyncArrowHead => AsyncConciseBody\r\n\r\nAsyncConciseBody :\r\n{ AsyncFunctionBody }\r\n\r\n...\r\n\r\nSupplemental Syntax\r\n\r\nWhen processing an instance of the production AsyncArrowFunction :\r\nCoverCallExpressionAndAsyncArrowHead => AsyncConciseBody the interpretation of\r\nCoverCallExpressionAndAsyncArrowHead is refined using the following grammar:\r\n\r\nAsyncArrowHead :\r\nasync ArrowFormalParameters\r\n\r\n\r\n\nRuntime Semantics: IteratorBindingInitialization\r\nFormalParameter : BindingElement\r\n\r\n1. Return the result of performing IteratorBindingInitialization for BindingElement with arguments iteratorRecord and environment.\r\n\r\n"},{"path":"./test262/test/language/expressions/async-arrow-function/forbidden-ext/b1/async-arrow-function-forbidden-ext-direct-access-prop-arguments.js","description":" Forbidden extension, f.arguments (async arrow function expression)\r","esid":" sec-async-arrow-function-definitions\r","features":["arrow-function","async-functions\r"],"flags":["generated","noStrict","async\r"],"info":" |\rAsyncArrowFunction :\r\n...\r\nCoverCallExpressionAndAsyncArrowHead => AsyncConciseBody\r\n\r\nAsyncConciseBody :\r\n{ AsyncFunctionBody }\r\n\r\n\r\nECMAScript function objects defined using syntactic constructors in strict mode code must\r\nnot be created with own properties named \"caller\" or \"arguments\". Such own properties also\r\nmust not be created for function objects defined using an ArrowFunction, MethodDefinition,\r\nGeneratorDeclaration, GeneratorExpression, AsyncGeneratorDeclaration, AsyncGeneratorExpression,\r\nClassDeclaration, ClassExpression, AsyncFunctionDeclaration, AsyncFunctionExpression, or\r\nAsyncArrowFunction regardless of whether the definition is contained in strict mode code.\r\nBuilt-in functions, strict functions created using the Function constructor, generator functions\r\ncreated using the Generator constructor, async functions created using the AsyncFunction\r\nconstructor, and functions created using the bind method also must not be created with such own\r\nproperties.\r\n\r\n"},{"path":"./test262/test/language/expressions/async-arrow-function/forbidden-ext/b1/async-arrow-function-forbidden-ext-direct-access-prop-caller.js","description":" Forbidden extension, o.caller (async arrow function expression)\r","esid":" sec-async-arrow-function-definitions\r","features":["arrow-function","async-functions\r"],"flags":["generated","noStrict","async\r"],"info":" |\rAsyncArrowFunction :\r\n...\r\nCoverCallExpressionAndAsyncArrowHead => AsyncConciseBody\r\n\r\nAsyncConciseBody :\r\n{ AsyncFunctionBody }\r\n\r\n\r\nECMAScript function objects defined using syntactic constructors in strict mode code must\r\nnot be created with own properties named \"caller\" or \"arguments\". Such own properties also\r\nmust not be created for function objects defined using an ArrowFunction, MethodDefinition,\r\nGeneratorDeclaration, GeneratorExpression, AsyncGeneratorDeclaration, AsyncGeneratorExpression,\r\nClassDeclaration, ClassExpression, AsyncFunctionDeclaration, AsyncFunctionExpression, or\r\nAsyncArrowFunction regardless of whether the definition is contained in strict mode code.\r\nBuilt-in functions, strict functions created using the Function constructor, generator functions\r\ncreated using the Generator constructor, async functions created using the AsyncFunction\r\nconstructor, and functions created using the bind method also must not be created with such own\r\nproperties.\r\n\r\n"},{"path":"./test262/test/language/expressions/async-arrow-function/forbidden-ext/b2/async-arrow-function-forbidden-ext-indirect-access-own-prop-caller-get.js","description":" Forbidden extension, o.caller (async arrow function expression)\r","esid":" sec-async-arrow-definitions\r","features":["arrow-function","async-functions\r"],"flags":["generated","noStrict","async\r"],"info":" |\rAsyncArrowFunction :\r\n...\r\nCoverCallExpressionAndAsyncArrowHead => AsyncConciseBody\r\n\r\nAsyncConciseBody :\r\n{ AsyncFunctionBody }\r\n\r\n\r\nIf an implementation extends any function object with an own property named \"caller\" the value of\r\nthat property, as observed using [[Get]] or [[GetOwnProperty]], must not be a strict function\r\nobject. If it is an accessor property, the function that is the value of the property's [[Get]]\r\nattribute must never return a strict function when called.\r\n\r\n"},{"path":"./test262/test/language/expressions/async-arrow-function/forbidden-ext/b2/async-arrow-function-forbidden-ext-indirect-access-own-prop-caller-value.js","description":" Forbidden extension, o.caller (async arrow function expression)\r","esid":" sec-async-arrow-definitions\r","features":["arrow-function","async-functions\r"],"flags":["generated","noStrict","async\r"],"info":" |\rAsyncArrowFunction :\r\n...\r\nCoverCallExpressionAndAsyncArrowHead => AsyncConciseBody\r\n\r\nAsyncConciseBody :\r\n{ AsyncFunctionBody }\r\n\r\n\r\nIf an implementation extends any function object with an own property named \"caller\" the value of\r\nthat property, as observed using [[Get]] or [[GetOwnProperty]], must not be a strict function\r\nobject. If it is an accessor property, the function that is the value of the property's [[Get]]\r\nattribute must never return a strict function when called.\r\n\r\n"},{"path":"./test262/test/language/expressions/async-arrow-function/forbidden-ext/b2/async-arrow-function-forbidden-ext-indirect-access-prop-caller.js","description":" Forbidden extension, o.caller (async arrow function expression)\r","esid":" sec-async-arrow-definitions\r","features":["arrow-function","async-functions\r"],"flags":["generated","noStrict","async\r"],"info":" |\rAsyncArrowFunction :\r\n...\r\nCoverCallExpressionAndAsyncArrowHead => AsyncConciseBody\r\n\r\nAsyncConciseBody :\r\n{ AsyncFunctionBody }\r\n\r\n\r\nIf an implementation extends any function object with an own property named \"caller\" the value of\r\nthat property, as observed using [[Get]] or [[GetOwnProperty]], must not be a strict function\r\nobject. If it is an accessor property, the function that is the value of the property's [[Get]]\r\nattribute must never return a strict function when called.\r\n\r\n"},{"path":"./test262/test/language/expressions/async-arrow-function/name.js","esid":" sec-async-arrow-function-definitions-runtime-semantics-evaluation\r","description":" Assignment of function `name` attribute\r","info":" |\rAsyncArrowFunction : async AsyncArrowBindingIdentifier => AsyncConciseBody\r\n\r\n1. Let scope be the LexicalEnvironment of the running execution context.\r\n2. Let parameters be AsyncArrowBindingIdentifier.\r\n3. Let closure be ! AsyncFunctionCreate(Arrow, parameters, AsyncConciseBody,\r\nscope, \"\").\r\n...\r\n5. Return closure.\r\n\r\nAsyncArrowFunction : CoverCallExpressionAndAsyncArrowHead => AsyncConciseBody\r\n\r\n1. Let scope be the LexicalEnvironment of the running execution context.\r\n2. Let head be CoveredAsyncArrowHead of CoverCallExpressionAndAsyncArrowHead.\r\n3. Let parameters be the ArrowFormalParameters of head.\r\n4. Let closure be ! AsyncFunctionCreate(Arrow, parameters, AsyncConciseBody,\r\nscope, \"\").\r\n...\r\n6. Return closure.\n","includes":["propertyHelper.js\r"]},{"path":"./test262/test/language/expressions/async-arrow-function/params-trailing-comma-multiple.js","description":" A trailing comma should not increase the respective length, using multiple parameters (async arrow function expression)\r","esid":" sec-async-arrow-function-definitions\r","features":["async-functions\r"],"flags":["generated","async\r"],"info":" |\r14.7 Async Arrow Function Definitions\r\n\r\nAsyncArrowFunction :\r\n...\r\nCoverCallExpressionAndAsyncArrowHead => AsyncConciseBody\r\n\r\nAsyncConciseBody :\r\n{ AsyncFunctionBody }\r\n\r\n...\r\n\r\nSupplemental Syntax\r\n\r\nWhen processing an instance of the production AsyncArrowFunction :\r\nCoverCallExpressionAndAsyncArrowHead => AsyncConciseBody the interpretation of\r\nCoverCallExpressionAndAsyncArrowHead is refined using the following grammar:\r\n\r\nAsyncArrowHead :\r\nasync ArrowFormalParameters\r\n\r\n\r\nTrailing comma in the parameters list\r\n\r\n14.1 Function Definitions\r\n\r\nFormalParameters[Yield, Await] : FormalParameterList[?Yield, ?Await] ,\r\n"},{"path":"./test262/test/language/expressions/async-arrow-function/params-trailing-comma-single.js","description":" A trailing comma should not increase the respective length, using a single parameter (async arrow function expression)\r","esid":" sec-async-arrow-function-definitions\r","features":["async-functions\r"],"flags":["generated","async\r"],"info":" |\r14.7 Async Arrow Function Definitions\r\n\r\nAsyncArrowFunction :\r\n...\r\nCoverCallExpressionAndAsyncArrowHead => AsyncConciseBody\r\n\r\nAsyncConciseBody :\r\n{ AsyncFunctionBody }\r\n\r\n...\r\n\r\nSupplemental Syntax\r\n\r\nWhen processing an instance of the production AsyncArrowFunction :\r\nCoverCallExpressionAndAsyncArrowHead => AsyncConciseBody the interpretation of\r\nCoverCallExpressionAndAsyncArrowHead is refined using the following grammar:\r\n\r\nAsyncArrowHead :\r\nasync ArrowFormalParameters\r\n\r\n\r\nTrailing comma in the parameters list\r\n\r\n14.1 Function Definitions\r\n\r\nFormalParameters[Yield, Await] : FormalParameterList[?Yield, ?Await] ,\r\n"},{"path":"./test262/test/language/expressions/async-arrow-function/rest-params-trailing-comma-early-error.js","description":" It's a syntax error if a FunctionRestParameter is followed by a trailing comma (async arrow function expression)\r","esid":" sec-async-arrow-function-definitions\r","flags":["generated\r"],"negative":{"phase":"parse\r","type":"SyntaxError\r"},"info":" |\r14.7 Async Arrow Function Definitions\r\n\r\nAsyncArrowFunction :\r\n...\r\nCoverCallExpressionAndAsyncArrowHead => AsyncConciseBody\r\n\r\nAsyncConciseBody :\r\n{ AsyncFunctionBody }\r\n\r\n...\r\n\r\nSupplemental Syntax\r\n\r\nWhen processing an instance of the production AsyncArrowFunction :\r\nCoverCallExpressionAndAsyncArrowHead => AsyncConciseBody the interpretation of\r\nCoverCallExpressionAndAsyncArrowHead is refined using the following grammar:\r\n\r\nAsyncArrowHead :\r\nasync ArrowFormalParameters\r\n\r\nTrailing comma in the parameters list\r\n\r\n14.1 Function Definitions\r\n\r\nFormalParameters[Yield, Await] :\r\n[empty]\r\nFunctionRestParameter[?Yield, ?Await]\r\nFormalParameterList[?Yield, ?Await]\r\nFormalParameterList[?Yield, ?Await] ,\r\nFormalParameterList[?Yield, ?Await] , FunctionRestParameter[?Yield, ?Await]\r\n"},{"path":"./test262/test/language/expressions/async-arrow-function/try-reject-finally-reject.js","author":" Caitlin Potter <caitp@igalia.com>\r","esid":" pending\r","description":" >\rImplementations must defer rejecting an async function's Promise until after\r\nall finally blocks have been evaluated.\r\n","flags":["async\r"]},{"path":"./test262/test/language/expressions/async-arrow-function/try-reject-finally-return.js","author":" Caitlin Potter <caitp@igalia.com>\r","esid":" pending\r","description":" >\rImplementations must defer rejecting an async function's Promise until after\r\nall finally blocks have been evaluated.\r\n","flags":["async\r"]},{"path":"./test262/test/language/expressions/async-arrow-function/try-reject-finally-throw.js","author":" Caitlin Potter <caitp@igalia.com>\r","esid":" pending\r","description":" >\rImplementations must defer rejecting an async function's Promise until after\r\nall finally blocks have been evaluated.\r\n","flags":["async\r"]},{"path":"./test262/test/language/expressions/async-arrow-function/try-return-finally-reject.js","author":" Caitlin Potter <caitp@igalia.com>\r","esid":" pending\r","description":" >\rImplementations must defer resolving an async function's Promise until after\r\nall finally blocks have been evaluated.\r\n","flags":["async\r"]},{"path":"./test262/test/language/expressions/async-arrow-function/try-return-finally-return.js","author":" Caitlin Potter <caitp@igalia.com>\r","esid":" pending\r","description":" >\rImplementations must defer resolving an async function's Promise until after\r\nall finally blocks have been evaluated.\r\n","flags":["async\r"]},{"path":"./test262/test/language/expressions/async-arrow-function/try-return-finally-throw.js","author":" Caitlin Potter <caitp@igalia.com>\r","esid":" pending\r","description":" >\rImplementations must defer resolving an async function's Promise until after\r\nall finally blocks have been evaluated.\r\n","flags":["async\r"]},{"path":"./test262/test/language/expressions/async-arrow-function/try-throw-finally-reject.js","author":" Caitlin Potter <caitp@igalia.com>\r","esid":" pending\r","description":" >\rImplementations must defer rejecting an async function's Promise until after\r\nall finally blocks have been evaluated.\r\n","flags":["async\r"]},{"path":"./test262/test/language/expressions/async-arrow-function/try-throw-finally-return.js","author":" Caitlin Potter <caitp@igalia.com>\r","esid":" pending\r","description":" >\rImplementations must defer rejecting an async function's Promise until after\r\nall finally blocks have been evaluated.\r\n","flags":["async\r"]},{"path":"./test262/test/language/expressions/async-arrow-function/try-throw-finally-throw.js","author":" Caitlin Potter <caitp@igalia.com>\r","esid":" pending\r","description":" >\rImplementations must defer rejecting an async function's Promise until after\r\nall finally blocks have been evaluated.\r\n","flags":["async\r"]},{"path":"./test262/test/language/expressions/async-arrow-function/unscopables-with-in-nested-fn.js","description":" Symbol.unscopables behavior across scope boundaries (async arrow function expression)\r","esid":" sec-async-arrow-function-definitions\r","features":["globalThis","Symbol.unscopables","async-functions\r"],"flags":["generated","noStrict","async\r"],"info":" |\r14.7 Async Arrow Function Definitions\r\n\r\nAsyncArrowFunction :\r\n...\r\nCoverCallExpressionAndAsyncArrowHead => AsyncConciseBody\r\n\r\nAsyncConciseBody :\r\n{ AsyncFunctionBody }\r\n\r\n...\r\n\r\nSupplemental Syntax\r\n\r\nWhen processing an instance of the production AsyncArrowFunction :\r\nCoverCallExpressionAndAsyncArrowHead => AsyncConciseBody the interpretation of\r\nCoverCallExpressionAndAsyncArrowHead is refined using the following grammar:\r\n\r\nAsyncArrowHead :\r\nasync ArrowFormalParameters\r\n\r\n\r\n...\r\nLet envRec be lex's EnvironmentRecord.\r\nLet exists be ? envRec.HasBinding(name).\r\n\r\nHasBinding\r\n\r\n...\r\nIf the withEnvironment flag of envRec is false, return true.\r\nLet unscopables be ? Get(bindings, @@unscopables).\r\nIf Type(unscopables) is Object, then\r\nLet blocked be ToBoolean(? Get(unscopables, N)).\r\nIf blocked is true, return false.\r\n\r\n(The `with` Statement) Runtime Semantics: Evaluation\r\n\r\n...\r\nSet the withEnvironment flag of newEnv’s EnvironmentRecord to true.\r\n...\r\n\r\n"},{"path":"./test262/test/language/expressions/async-arrow-function/unscopables-with.js","description":" Symbol.unscopables behavior across scope boundaries (async arrow function expression)\r","esid":" sec-async-arrow-function-definitions\r","features":["globalThis","Symbol.unscopables","async-functions\r"],"flags":["generated","noStrict","async\r"],"info":" |\r14.7 Async Arrow Function Definitions\r\n\r\nAsyncArrowFunction :\r\n...\r\nCoverCallExpressionAndAsyncArrowHead => AsyncConciseBody\r\n\r\nAsyncConciseBody :\r\n{ AsyncFunctionBody }\r\n\r\n...\r\n\r\nSupplemental Syntax\r\n\r\nWhen processing an instance of the production AsyncArrowFunction :\r\nCoverCallExpressionAndAsyncArrowHead => AsyncConciseBody the interpretation of\r\nCoverCallExpressionAndAsyncArrowHead is refined using the following grammar:\r\n\r\nAsyncArrowHead :\r\nasync ArrowFormalParameters\r\n\r\n\r\n...\r\nLet envRec be lex's EnvironmentRecord.\r\nLet exists be ? envRec.HasBinding(name).\r\n\r\nHasBinding\r\n\r\n...\r\nIf the withEnvironment flag of envRec is false, return true.\r\nLet unscopables be ? Get(bindings, @@unscopables).\r\nIf Type(unscopables) is Object, then\r\nLet blocked be ToBoolean(? Get(unscopables, N)).\r\nIf blocked is true, return false.\r\n\r\n(The `with` Statement) Runtime Semantics: Evaluation\r\n\r\n...\r\nSet the withEnvironment flag of newEnv’s EnvironmentRecord to true.\r\n...\r\n\r\n"},{"path":"./test262/test/language/expressions/async-function/early-errors-expression-binding-identifier-arguments.js","author":" Brian Terlson <brian.terlson@microsoft.com>\r","esid":" pending\r","description":" >\rIf the source code matching this production is strict code, it is a Syntax Error if BindingIdentifier is the IdentifierName arguments.\r\n","negative":{"phase":"parse\r","type":"SyntaxError\r"},"flags":["onlyStrict\r"]},{"path":"./test262/test/language/expressions/async-function/early-errors-expression-binding-identifier-eval.js","author":" Brian Terlson <brian.terlson@microsoft.com>\r","esid":" pending\r","description":" >\rIf the source code matching this production is strict code, it is a Syntax Error if BindingIdentifier is the IdentifierName eval.\r\n","negative":{"phase":"parse\r","type":"SyntaxError\r"},"flags":["onlyStrict\r"]},{"path":"./test262/test/language/expressions/async-function/early-errors-expression-body-contains-super-property.js","author":" Brian Terlson <brian.terlson@microsoft.com>\r","esid":" pending\r","description":" It is a syntax error if AsyncFunctionBody contains SuperProperty is true\r","negative":{"phase":"parse\r","type":"SyntaxError\r"}},{"path":"./test262/test/language/expressions/async-function/early-errors-expression-eval-in-formal-parameters.js","author":" Brian Terlson <brian.terlson@microsoft.com>\r","esid":" pending\r","description":" It is a SyntaxError if FormalParameters contains eval in strict mode\r","negative":{"phase":"parse\r","type":"SyntaxError\r"},"flags":["onlyStrict\r"]},{"path":"./test262/test/language/expressions/async-function/early-errors-expression-formals-body-duplicate.js","author":" Brian Terlson <brian.terlson@microsoft.com>\r","esid":" pending\r","description":" It is a SyntaxError if BoundNames of FormalParameters also occurs in the LexicallyDeclaredNames of AsyncFunctionBody\r","negative":{"phase":"parse\r","type":"SyntaxError\r"}},{"path":"./test262/test/language/expressions/async-function/early-errors-expression-not-simple-assignment-target.js","author":" Brian Terlson <brian.terlson@microsoft.com>\r","esid":" pending\r","description":" >\rAsync function expressions are not a simple assignment target.\r\n","negative":{"phase":"parse\r","type":"SyntaxError\r"}},{"path":"./test262/test/language/expressions/async-function/escaped-async.js","esid":" sec-grammar-notation\r","description":" >\rThe `async` contextual keyword must not contain Unicode escape sequences.\r\n","info":" |\rTerminal symbols are shown\r\nin fixed width font, both in the productions of the grammars and throughout this\r\nspecification whenever the text directly refers to such a terminal symbol. These\r\nare to appear in a script exactly as written. All terminal symbol code points\r\nspecified in this way are to be understood as the appropriate Unicode code points\r\nfrom the Basic Latin range, as opposed to any similar-looking code points from\r\nother Unicode ranges.\r\n","negative":{"phase":"parse\r","type":"SyntaxError\r"},"features":["async-functions\r"]},{"path":"./test262/test/language/expressions/async-function/expression-returns-promise.js","author":" Brian Terlson <brian.terlson@microsoft.com>\r","esid":" pending\r","description":" >\rAsync function expressions return promises\r\n"},{"path":"./test262/test/language/expressions/async-function/forbidden-ext/b1/async-func-expr-named-forbidden-ext-direct-access-prop-arguments.js","description":" Forbidden extension, f.arguments (async function named expression)\r","esid":" sec-async-function-definitions\r","features":["arrow-function","async-functions\r"],"flags":["generated","noStrict","async\r"],"info":" |\rAsyncFunctionExpression :\r\nasync function BindingIdentifier ( FormalParameters ) { AsyncFunctionBody }\r\n\r\n\r\nECMAScript function objects defined using syntactic constructors in strict mode code must\r\nnot be created with own properties named \"caller\" or \"arguments\". Such own properties also\r\nmust not be created for function objects defined using an ArrowFunction, MethodDefinition,\r\nGeneratorDeclaration, GeneratorExpression, AsyncGeneratorDeclaration, AsyncGeneratorExpression,\r\nClassDeclaration, ClassExpression, AsyncFunctionDeclaration, AsyncFunctionExpression, or\r\nAsyncArrowFunction regardless of whether the definition is contained in strict mode code.\r\nBuilt-in functions, strict functions created using the Function constructor, generator functions\r\ncreated using the Generator constructor, async functions created using the AsyncFunction\r\nconstructor, and functions created using the bind method also must not be created with such own\r\nproperties.\r\n\r\n"},{"path":"./test262/test/language/expressions/async-function/forbidden-ext/b1/async-func-expr-named-forbidden-ext-direct-access-prop-caller.js","description":" Forbidden extension, o.caller (async function named expression)\r","esid":" sec-async-function-definitions\r","features":["arrow-function","async-functions\r"],"flags":["generated","noStrict","async\r"],"info":" |\rAsyncFunctionExpression :\r\nasync function BindingIdentifier ( FormalParameters ) { AsyncFunctionBody }\r\n\r\n\r\nECMAScript function objects defined using syntactic constructors in strict mode code must\r\nnot be created with own properties named \"caller\" or \"arguments\". Such own properties also\r\nmust not be created for function objects defined using an ArrowFunction, MethodDefinition,\r\nGeneratorDeclaration, GeneratorExpression, AsyncGeneratorDeclaration, AsyncGeneratorExpression,\r\nClassDeclaration, ClassExpression, AsyncFunctionDeclaration, AsyncFunctionExpression, or\r\nAsyncArrowFunction regardless of whether the definition is contained in strict mode code.\r\nBuilt-in functions, strict functions created using the Function constructor, generator functions\r\ncreated using the Generator constructor, async functions created using the AsyncFunction\r\nconstructor, and functions created using the bind method also must not be created with such own\r\nproperties.\r\n\r\n"},{"path":"./test262/test/language/expressions/async-function/forbidden-ext/b1/async-func-expr-nameless-forbidden-ext-direct-access-prop-arguments.js","description":" Forbidden extension, f.arguments (async function nameless expression)\r","esid":" sec-async-function-definitions\r","features":["arrow-function","async-functions\r"],"flags":["generated","noStrict","async\r"],"info":" |\rAsyncFunctionExpression :\r\nasync function ( FormalParameters ) { AsyncFunctionBody }\r\n\r\n\r\nECMAScript function objects defined using syntactic constructors in strict mode code must\r\nnot be created with own properties named \"caller\" or \"arguments\". Such own properties also\r\nmust not be created for function objects defined using an ArrowFunction, MethodDefinition,\r\nGeneratorDeclaration, GeneratorExpression, AsyncGeneratorDeclaration, AsyncGeneratorExpression,\r\nClassDeclaration, ClassExpression, AsyncFunctionDeclaration, AsyncFunctionExpression, or\r\nAsyncArrowFunction regardless of whether the definition is contained in strict mode code.\r\nBuilt-in functions, strict functions created using the Function constructor, generator functions\r\ncreated using the Generator constructor, async functions created using the AsyncFunction\r\nconstructor, and functions created using the bind method also must not be created with such own\r\nproperties.\r\n\r\n"},{"path":"./test262/test/language/expressions/async-function/forbidden-ext/b1/async-func-expr-nameless-forbidden-ext-direct-access-prop-caller.js","description":" Forbidden extension, o.caller (async function nameless expression)\r","esid":" sec-async-function-definitions\r","features":["arrow-function","async-functions\r"],"flags":["generated","noStrict","async\r"],"info":" |\rAsyncFunctionExpression :\r\nasync function ( FormalParameters ) { AsyncFunctionBody }\r\n\r\n\r\nECMAScript function objects defined using syntactic constructors in strict mode code must\r\nnot be created with own properties named \"caller\" or \"arguments\". Such own properties also\r\nmust not be created for function objects defined using an ArrowFunction, MethodDefinition,\r\nGeneratorDeclaration, GeneratorExpression, AsyncGeneratorDeclaration, AsyncGeneratorExpression,\r\nClassDeclaration, ClassExpression, AsyncFunctionDeclaration, AsyncFunctionExpression, or\r\nAsyncArrowFunction regardless of whether the definition is contained in strict mode code.\r\nBuilt-in functions, strict functions created using the Function constructor, generator functions\r\ncreated using the Generator constructor, async functions created using the AsyncFunction\r\nconstructor, and functions created using the bind method also must not be created with such own\r\nproperties.\r\n\r\n"},{"path":"./test262/test/language/expressions/async-function/forbidden-ext/b2/async-func-expr-named-forbidden-ext-indirect-access-own-prop-caller-get.js","description":" Forbidden extension, o.caller (async function named expression)\r","esid":" sec-async-definitions\r","features":["arrow-function","async-functions\r"],"flags":["generated","noStrict","async\r"],"info":" |\rAsyncFunctionExpression :\r\nasync function BindingIdentifier ( FormalParameters ) { AsyncFunctionBody }\r\n\r\n\r\nIf an implementation extends any function object with an own property named \"caller\" the value of\r\nthat property, as observed using [[Get]] or [[GetOwnProperty]], must not be a strict function\r\nobject. If it is an accessor property, the function that is the value of the property's [[Get]]\r\nattribute must never return a strict function when called.\r\n\r\n"},{"path":"./test262/test/language/expressions/async-function/forbidden-ext/b2/async-func-expr-named-forbidden-ext-indirect-access-own-prop-caller-value.js","description":" Forbidden extension, o.caller (async function named expression)\r","esid":" sec-async-definitions\r","features":["arrow-function","async-functions\r"],"flags":["generated","noStrict","async\r"],"info":" |\rAsyncFunctionExpression :\r\nasync function BindingIdentifier ( FormalParameters ) { AsyncFunctionBody }\r\n\r\n\r\nIf an implementation extends any function object with an own property named \"caller\" the value of\r\nthat property, as observed using [[Get]] or [[GetOwnProperty]], must not be a strict function\r\nobject. If it is an accessor property, the function that is the value of the property's [[Get]]\r\nattribute must never return a strict function when called.\r\n\r\n"},{"path":"./test262/test/language/expressions/async-function/forbidden-ext/b2/async-func-expr-named-forbidden-ext-indirect-access-prop-caller.js","description":" Forbidden extension, o.caller (async function named expression)\r","esid":" sec-async-definitions\r","features":["arrow-function","async-functions\r"],"flags":["generated","noStrict","async\r"],"info":" |\rAsyncFunctionExpression :\r\nasync function BindingIdentifier ( FormalParameters ) { AsyncFunctionBody }\r\n\r\n\r\nIf an implementation extends any function object with an own property named \"caller\" the value of\r\nthat property, as observed using [[Get]] or [[GetOwnProperty]], must not be a strict function\r\nobject. If it is an accessor property, the function that is the value of the property's [[Get]]\r\nattribute must never return a strict function when called.\r\n\r\n"},{"path":"./test262/test/language/expressions/async-function/forbidden-ext/b2/async-func-expr-nameless-forbidden-ext-indirect-access-own-prop-caller-get.js","description":" Forbidden extension, o.caller (async function nameless expression)\r","esid":" sec-async-definitions\r","features":["arrow-function","async-functions\r"],"flags":["generated","noStrict","async\r"],"info":" |\rAsyncFunctionExpression :\r\nasync function ( FormalParameters ) { AsyncFunctionBody }\r\n\r\n\r\nIf an implementation extends any function object with an own property named \"caller\" the value of\r\nthat property, as observed using [[Get]] or [[GetOwnProperty]], must not be a strict function\r\nobject. If it is an accessor property, the function that is the value of the property's [[Get]]\r\nattribute must never return a strict function when called.\r\n\r\n"},{"path":"./test262/test/language/expressions/async-function/forbidden-ext/b2/async-func-expr-nameless-forbidden-ext-indirect-access-own-prop-caller-value.js","description":" Forbidden extension, o.caller (async function nameless expression)\r","esid":" sec-async-definitions\r","features":["arrow-function","async-functions\r"],"flags":["generated","noStrict","async\r"],"info":" |\rAsyncFunctionExpression :\r\nasync function ( FormalParameters ) { AsyncFunctionBody }\r\n\r\n\r\nIf an implementation extends any function object with an own property named \"caller\" the value of\r\nthat property, as observed using [[Get]] or [[GetOwnProperty]], must not be a strict function\r\nobject. If it is an accessor property, the function that is the value of the property's [[Get]]\r\nattribute must never return a strict function when called.\r\n\r\n"},{"path":"./test262/test/language/expressions/async-function/forbidden-ext/b2/async-func-expr-nameless-forbidden-ext-indirect-access-prop-caller.js","description":" Forbidden extension, o.caller (async function nameless expression)\r","esid":" sec-async-definitions\r","features":["arrow-function","async-functions\r"],"flags":["generated","noStrict","async\r"],"info":" |\rAsyncFunctionExpression :\r\nasync function ( FormalParameters ) { AsyncFunctionBody }\r\n\r\n\r\nIf an implementation extends any function object with an own property named \"caller\" the value of\r\nthat property, as observed using [[Get]] or [[GetOwnProperty]], must not be a strict function\r\nobject. If it is an accessor property, the function that is the value of the property's [[Get]]\r\nattribute must never return a strict function when called.\r\n\r\n"},{"path":"./test262/test/language/expressions/async-function/name.js","esid":" sec-async-function-definitions-runtime-semantics-evaluation\r","description":" Assignment of function `name` attribute\r","info":" |\rAsyncFunctionExpression : async function ( FormalParameters ) { AsyncFunctionBody }\r\n\r\n1. Let scope be the LexicalEnvironment of the running execution context.\r\n2. Let closure be ! AsyncFunctionCreate(Normal, FormalParameters,\r\nAsyncFunctionBody, scope, \"\").\r\n...\r\n4. Return closure.\r\n\r\nAsyncFunctionExpression : async function BindingIdentifier ( FormalParameters ) { AsyncFunctionBody }\r\n\r\n1. Let scope be the running execution context's LexicalEnvironment.\r\n2. Let funcEnv be ! NewDeclarativeEnvironment(scope).\r\n3. Let envRec be funcEnv's EnvironmentRecord.\r\n4. Let name be StringValue of BindingIdentifier.\r\n5. Perform ! envRec.CreateImmutableBinding(name).\r\n6. Let closure be ! AsyncFunctionCreate(Normal, FormalParameters,\r\nAsyncFunctionBody, funcEnv, name).\r\n...\r\n9. Return closure.\r\n","includes":["propertyHelper.js\r"]},{"path":"./test262/test/language/expressions/async-function/named-dflt-params-abrupt.js","description":" Abrupt completion returned by evaluation of initializer (async function named expression)\r","esid":" sec-async-function-definitions\r","features":["default-parameters","async-functions\r"],"flags":["generated","async\r"],"info":" |\r14.6 Async Function Definitions\r\n\r\nAsyncFunctionExpression :\r\nasync function BindingIdentifier ( FormalParameters ) { AsyncFunctionBody }\r\n\r\n\r\n14.1.19 Runtime Semantics: IteratorBindingInitialization\r\n\r\nFormalsList : FormalsList , FormalParameter\r\n\r\n1. Let status be the result of performing IteratorBindingInitialization for\r\nFormalsList using iteratorRecord and environment as the arguments.\r\n2. ReturnIfAbrupt(status).\r\n3. Return the result of performing IteratorBindingInitialization for\r\nFormalParameter using iteratorRecord and environment as the arguments.\r\n\r\n"},{"path":"./test262/test/language/expressions/async-function/named-dflt-params-arg-val-not-undefined.js","description":" Use of initializer when argument value is not `undefined` (async function named expression)\r","esid":" sec-async-function-definitions\r","features":["default-parameters","async-functions\r"],"flags":["generated","async\r"],"info":" |\r14.6 Async Function Definitions\r\n\r\nAsyncFunctionExpression :\r\nasync function BindingIdentifier ( FormalParameters ) { AsyncFunctionBody }\r\n\r\n\r\n14.1.19 Runtime Semantics: IteratorBindingInitialization\r\n\r\nFormalsList : FormalsList , FormalParameter\r\n\r\n[...]\r\n23. Let iteratorRecord be Record {[[Iterator]]:\r\nCreateListIterator(argumentsList), [[Done]]: false}.\r\n24. If hasDuplicates is true, then\r\n[...]\r\n25. Else,\r\na. Perform ? IteratorBindingInitialization for formals with\r\niteratorRecord and env as arguments.\r\n[...]\r\n\r\n"},{"path":"./test262/test/language/expressions/async-function/named-dflt-params-arg-val-undefined.js","description":" Use of initializer when argument value is `undefined` (async function named expression)\r","esid":" sec-async-function-definitions\r","features":["default-parameters","async-functions\r"],"flags":["generated","async\r"],"info":" |\r14.6 Async Function Definitions\r\n\r\nAsyncFunctionExpression :\r\nasync function BindingIdentifier ( FormalParameters ) { AsyncFunctionBody }\r\n\r\n\r\n14.1.19 Runtime Semantics: IteratorBindingInitialization\r\n\r\nFormalsList : FormalsList , FormalParameter\r\n\r\n[...]\r\n23. Let iteratorRecord be Record {[[Iterator]]:\r\nCreateListIterator(argumentsList), [[Done]]: false}.\r\n24. If hasDuplicates is true, then\r\n[...]\r\n25. Else,\r\na. Perform ? IteratorBindingInitialization for formals with\r\niteratorRecord and env as arguments.\r\n[...]\r\n\r\n"},{"path":"./test262/test/language/expressions/async-function/named-dflt-params-duplicates.js","description":" It is a Syntax Error if BoundNames of FormalParameters contains any duplicate elements. (async function named expression)\r","esid":" sec-async-function-definitions\r","features":["default-parameters","async-functions\r"],"flags":["generated\r"],"negative":{"phase":"parse\r","type":"SyntaxError\r"},"info":" |\r14.6 Async Function Definitions\r\n\r\nAsyncFunctionExpression :\r\nasync function BindingIdentifier ( FormalParameters ) { AsyncFunctionBody }\r\n\r\n\r\n14.1.2 Static Semantics: Early Errors\r\n\r\nStrictFormalParameters : FormalParameters\r\n\r\n- It is a Syntax Error if BoundNames of FormalParameters contains any\r\nduplicate elements.\r\n\r\nFormalParameters : FormalParameterList\r\n\r\n- It is a Syntax Error if IsSimpleParameterList of FormalParameterList is\r\nfalse and BoundNames of FormalParameterList contains any duplicate\r\nelements.\r\n\r\n"},{"path":"./test262/test/language/expressions/async-function/named-dflt-params-ref-later.js","description":" Referencing a parameter that occurs later in the ParameterList (async function named expression)\r","esid":" sec-async-function-definitions\r","features":["default-parameters","async-functions\r"],"flags":["generated","async\r"],"info":" |\r14.6 Async Function Definitions\r\n\r\nAsyncFunctionExpression :\r\nasync function BindingIdentifier ( FormalParameters ) { AsyncFunctionBody }\r\n\r\n\r\n14.1.19 Runtime Semantics: IteratorBindingInitialization\r\n\r\nFormalsList : FormalsList , FormalParameter\r\n\r\n1. Let status be the result of performing IteratorBindingInitialization for\r\nFormalsList using iteratorRecord and environment as the arguments.\r\n2. ReturnIfAbrupt(status).\r\n3. Return the result of performing IteratorBindingInitialization for\r\nFormalParameter using iteratorRecord and environment as the arguments.\r\n\r\n"},{"path":"./test262/test/language/expressions/async-function/named-dflt-params-ref-prior.js","description":" Referencing a parameter that occurs earlier in the ParameterList (async function named expression)\r","esid":" sec-async-function-definitions\r","features":["default-parameters","async-functions\r"],"flags":["generated","async\r"],"info":" |\r14.6 Async Function Definitions\r\n\r\nAsyncFunctionExpression :\r\nasync function BindingIdentifier ( FormalParameters ) { AsyncFunctionBody }\r\n\r\n\r\n14.1.19 Runtime Semantics: IteratorBindingInitialization\r\n\r\nFormalsList : FormalsList , FormalParameter\r\n\r\n1. Let status be the result of performing IteratorBindingInitialization for\r\nFormalsList using iteratorRecord and environment as the arguments.\r\n2. ReturnIfAbrupt(status).\r\n3. Return the result of performing IteratorBindingInitialization for\r\nFormalParameter using iteratorRecord and environment as the arguments.\r\n\r\n"},{"path":"./test262/test/language/expressions/async-function/named-dflt-params-ref-self.js","description":" Referencing a parameter from within its own initializer (async function named expression)\r","esid":" sec-async-function-definitions\r","features":["default-parameters","async-functions\r"],"flags":["generated","async\r"],"info":" |\r14.6 Async Function Definitions\r\n\r\nAsyncFunctionExpression :\r\nasync function BindingIdentifier ( FormalParameters ) { AsyncFunctionBody }\r\n\r\n\r\n14.1.19 Runtime Semantics: IteratorBindingInitialization\r\n\r\nFormalsList : FormalsList , FormalParameter\r\n\r\n1. Let status be the result of performing IteratorBindingInitialization for\r\nFormalsList using iteratorRecord and environment as the arguments.\r\n2. ReturnIfAbrupt(status).\r\n3. Return the result of performing IteratorBindingInitialization for\r\nFormalParameter using iteratorRecord and environment as the arguments.\r\n\r\n"},{"path":"./test262/test/language/expressions/async-function/named-dflt-params-trailing-comma.js","description":" A trailing comma should not increase the respective length, using default parameters (async function named expression)\r","esid":" sec-async-function-definitions\r","features":["async-functions\r"],"flags":["generated","async\r"],"info":" |\r14.6 Async Function Definitions\r\n\r\nAsyncFunctionExpression :\r\nasync function BindingIdentifier ( FormalParameters ) { AsyncFunctionBody }\r\n\r\n\r\nTrailing comma in the parameters list\r\n\r\n14.1 Function Definitions\r\n\r\nFormalParameters[Yield, Await] : FormalParameterList[?Yield, ?Await] ,\r\n"},{"path":"./test262/test/language/expressions/async-function/named-eval-var-scope-syntax-err.js","description":" sloppy direct eval in params introduces var (async function named expression in sloppy code)\r","esid":" sec-async-function-definitions\r","features":["default-parameters","async-functions\r"],"flags":["generated","async","noStrict\r"],"info":" |\r14.6 Async Function Definitions\r\n\r\nAsyncFunctionExpression :\r\nasync function BindingIdentifier ( FormalParameters ) { AsyncFunctionBody }\r\n\r\n\r\n\nRuntime Semantics: IteratorBindingInitialization\r\nFormalParameter : BindingElement\r\n\r\n1. Return the result of performing IteratorBindingInitialization for BindingElement with arguments iteratorRecord and environment.\r\n\r\n"},{"path":"./test262/test/language/expressions/async-function/named-params-trailing-comma-multiple.js","description":" A trailing comma should not increase the respective length, using multiple parameters (async function named expression)\r","esid":" sec-async-function-definitions\r","features":["async-functions\r"],"flags":["generated","async\r"],"info":" |\r14.6 Async Function Definitions\r\n\r\nAsyncFunctionExpression :\r\nasync function BindingIdentifier ( FormalParameters ) { AsyncFunctionBody }\r\n\r\n\r\nTrailing comma in the parameters list\r\n\r\n14.1 Function Definitions\r\n\r\nFormalParameters[Yield, Await] : FormalParameterList[?Yield, ?Await] ,\r\n"},{"path":"./test262/test/language/expressions/async-function/named-params-trailing-comma-single.js","description":" A trailing comma should not increase the respective length, using a single parameter (async function named expression)\r","esid":" sec-async-function-definitions\r","features":["async-functions\r"],"flags":["generated","async\r"],"info":" |\r14.6 Async Function Definitions\r\n\r\nAsyncFunctionExpression :\r\nasync function BindingIdentifier ( FormalParameters ) { AsyncFunctionBody }\r\n\r\n\r\nTrailing comma in the parameters list\r\n\r\n14.1 Function Definitions\r\n\r\nFormalParameters[Yield, Await] : FormalParameterList[?Yield, ?Await] ,\r\n"},{"path":"./test262/test/language/expressions/async-function/named-reassign-fn-name-in-body-in-arrow.js","description":" Reassignment of function name is silently ignored in non-strict mode code. (async function named expression in non-strict mode code)\r","esid":" sec-async-function-definitions\r","features":["async-functions\r"],"flags":["generated","async","noStrict\r"],"info":" |\rAsync Function Definitions\r\n\r\nAsyncFunctionExpression :\r\nasync function BindingIdentifier ( FormalParameters ) { AsyncFunctionBody }\r\n\r\n"},{"path":"./test262/test/language/expressions/async-function/named-reassign-fn-name-in-body-in-eval.js","description":" Reassignment of function name is silently ignored in non-strict mode code. (async function named expression in non-strict mode code)\r","esid":" sec-async-function-definitions\r","features":["async-functions\r"],"flags":["generated","async","noStrict\r"],"info":" |\rAsync Function Definitions\r\n\r\nAsyncFunctionExpression :\r\nasync function BindingIdentifier ( FormalParameters ) { AsyncFunctionBody }\r\n\r\n"},{"path":"./test262/test/language/expressions/async-function/named-reassign-fn-name-in-body.js","description":" Reassignment of function name is silently ignored in non-strict mode code. (async function named expression in non-strict mode code)\r","esid":" sec-async-function-definitions\r","features":["async-functions\r"],"flags":["generated","async","noStrict\r"],"info":" |\rAsync Function Definitions\r\n\r\nAsyncFunctionExpression :\r\nasync function BindingIdentifier ( FormalParameters ) { AsyncFunctionBody }\r\n\r\n"},{"path":"./test262/test/language/expressions/async-function/named-returns-async-arrow-returns-arguments-from-parent-function.js","description":" Async function returns an async function. (Named async function expression)\r","esid":" prod-AsyncFunctionExpression\r","features":["async-functions\r"],"flags":["generated","async\r"],"info":" |\rAsync Function Definitions\r\n\r\nAsyncFunctionExpression :\r\nasync [no LineTerminator here] function BindingIdentifier ( FormalParameters ) { AsyncFunctionBody }\r\n\r\n"},{"path":"./test262/test/language/expressions/async-function/named-returns-async-arrow-returns-newtarget.js","description":" Async function returns an async function. (Named async function expression)\r","esid":" prod-AsyncFunctionExpression\r","features":["async-functions\r"],"flags":["generated","async\r"],"info":" |\rAsync Function Definitions\r\n\r\nAsyncFunctionExpression :\r\nasync [no LineTerminator here] function BindingIdentifier ( FormalParameters ) { AsyncFunctionBody }\r\n\r\n"},{"path":"./test262/test/language/expressions/async-function/named-returns-async-arrow.js","description":" Async function returns an async function. (Named async function expression)\r","esid":" prod-AsyncFunctionExpression\r","features":["async-functions\r"],"flags":["generated","async\r"],"info":" |\rAsync Function Definitions\r\n\r\nAsyncFunctionExpression :\r\nasync [no LineTerminator here] function BindingIdentifier ( FormalParameters ) { AsyncFunctionBody }\r\n\r\n"},{"path":"./test262/test/language/expressions/async-function/named-returns-async-function-returns-arguments-from-own-function.js","description":" Async function returns an async function. (Named async function expression)\r","esid":" prod-AsyncFunctionExpression\r","features":["async-functions\r"],"flags":["generated","async\r"],"info":" |\rAsync Function Definitions\r\n\r\nAsyncFunctionExpression :\r\nasync [no LineTerminator here] function BindingIdentifier ( FormalParameters ) { AsyncFunctionBody }\r\n\r\n"},{"path":"./test262/test/language/expressions/async-function/named-returns-async-function-returns-newtarget.js","description":" Async function returns an async function. (Named async function expression)\r","esid":" prod-AsyncFunctionExpression\r","features":["async-functions\r"],"flags":["generated","async\r"],"info":" |\rAsync Function Definitions\r\n\r\nAsyncFunctionExpression :\r\nasync [no LineTerminator here] function BindingIdentifier ( FormalParameters ) { AsyncFunctionBody }\r\n\r\n"},{"path":"./test262/test/language/expressions/async-function/named-returns-async-function.js","description":" Async function returns an async function. (Named async function expression)\r","esid":" prod-AsyncFunctionExpression\r","features":["async-functions\r"],"flags":["generated","async\r"],"info":" |\rAsync Function Definitions\r\n\r\nAsyncFunctionExpression :\r\nasync [no LineTerminator here] function BindingIdentifier ( FormalParameters ) { AsyncFunctionBody }\r\n\r\n"},{"path":"./test262/test/language/expressions/async-function/named-strict-error-reassign-fn-name-in-body-in-arrow.js","description":" Reassignment of function name is silently ignored in non-strict mode code. (async function named expression in strict mode code)\r","esid":" sec-async-function-definitions\r","features":["async-functions\r"],"flags":["generated","async","onlyStrict\r"],"info":" |\rAsync Function Definitions\r\n\r\nAsyncFunctionExpression :\r\nasync function BindingIdentifier ( FormalParameters ) { AsyncFunctionBody }\r\n\r\n"},{"path":"./test262/test/language/expressions/async-function/named-strict-error-reassign-fn-name-in-body-in-eval.js","description":" Reassignment of function name is silently ignored in non-strict mode code. (async function named expression in strict mode code)\r","esid":" sec-async-function-definitions\r","features":["async-functions\r"],"flags":["generated","async","onlyStrict\r"],"info":" |\rAsync Function Definitions\r\n\r\nAsyncFunctionExpression :\r\nasync function BindingIdentifier ( FormalParameters ) { AsyncFunctionBody }\r\n\r\n"},{"path":"./test262/test/language/expressions/async-function/named-strict-error-reassign-fn-name-in-body.js","description":" Reassignment of function name is silently ignored in non-strict mode code. (async function named expression in strict mode code)\r","esid":" sec-async-function-definitions\r","features":["async-functions\r"],"flags":["generated","async","onlyStrict\r"],"info":" |\rAsync Function Definitions\r\n\r\nAsyncFunctionExpression :\r\nasync function BindingIdentifier ( FormalParameters ) { AsyncFunctionBody }\r\n\r\n"},{"path":"./test262/test/language/expressions/async-function/named-unscopables-with-in-nested-fn.js","description":" Symbol.unscopables behavior across scope boundaries (async function named expression)\r","esid":" sec-async-function-definitions\r","features":["globalThis","Symbol.unscopables","async-functions\r"],"flags":["generated","noStrict","async\r"],"info":" |\r14.6 Async Function Definitions\r\n\r\nAsyncFunctionExpression :\r\nasync function BindingIdentifier ( FormalParameters ) { AsyncFunctionBody }\r\n\r\n\r\n...\r\nLet envRec be lex's EnvironmentRecord.\r\nLet exists be ? envRec.HasBinding(name).\r\n\r\nHasBinding\r\n\r\n...\r\nIf the withEnvironment flag of envRec is false, return true.\r\nLet unscopables be ? Get(bindings, @@unscopables).\r\nIf Type(unscopables) is Object, then\r\nLet blocked be ToBoolean(? Get(unscopables, N)).\r\nIf blocked is true, return false.\r\n\r\n(The `with` Statement) Runtime Semantics: Evaluation\r\n\r\n...\r\nSet the withEnvironment flag of newEnv’s EnvironmentRecord to true.\r\n...\r\n\r\n"},{"path":"./test262/test/language/expressions/async-function/named-unscopables-with.js","description":" Symbol.unscopables behavior across scope boundaries (async function named expression)\r","esid":" sec-async-function-definitions\r","features":["globalThis","Symbol.unscopables","async-functions\r"],"flags":["generated","noStrict","async\r"],"info":" |\r14.6 Async Function Definitions\r\n\r\nAsyncFunctionExpression :\r\nasync function BindingIdentifier ( FormalParameters ) { AsyncFunctionBody }\r\n\r\n\r\n...\r\nLet envRec be lex's EnvironmentRecord.\r\nLet exists be ? envRec.HasBinding(name).\r\n\r\nHasBinding\r\n\r\n...\r\nIf the withEnvironment flag of envRec is false, return true.\r\nLet unscopables be ? Get(bindings, @@unscopables).\r\nIf Type(unscopables) is Object, then\r\nLet blocked be ToBoolean(? Get(unscopables, N)).\r\nIf blocked is true, return false.\r\n\r\n(The `with` Statement) Runtime Semantics: Evaluation\r\n\r\n...\r\nSet the withEnvironment flag of newEnv’s EnvironmentRecord to true.\r\n...\r\n\r\n"},{"path":"./test262/test/language/expressions/async-function/nameless-dflt-params-abrupt.js","description":" Abrupt completion returned by evaluation of initializer (async function nameless expression)\r","esid":" sec-async-function-definitions\r","features":["default-parameters","async-functions\r"],"flags":["generated","async\r"],"info":" |\r14.6 Async Function Definitions\r\n\r\nAsyncFunctionExpression :\r\nasync function ( FormalParameters ) { AsyncFunctionBody }\r\n\r\n\r\n14.1.19 Runtime Semantics: IteratorBindingInitialization\r\n\r\nFormalsList : FormalsList , FormalParameter\r\n\r\n1. Let status be the result of performing IteratorBindingInitialization for\r\nFormalsList using iteratorRecord and environment as the arguments.\r\n2. ReturnIfAbrupt(status).\r\n3. Return the result of performing IteratorBindingInitialization for\r\nFormalParameter using iteratorRecord and environment as the arguments.\r\n\r\n"},{"path":"./test262/test/language/expressions/async-function/nameless-dflt-params-arg-val-not-undefined.js","description":" Use of initializer when argument value is not `undefined` (async function nameless expression)\r","esid":" sec-async-function-definitions\r","features":["default-parameters","async-functions\r"],"flags":["generated","async\r"],"info":" |\r14.6 Async Function Definitions\r\n\r\nAsyncFunctionExpression :\r\nasync function ( FormalParameters ) { AsyncFunctionBody }\r\n\r\n\r\n14.1.19 Runtime Semantics: IteratorBindingInitialization\r\n\r\nFormalsList : FormalsList , FormalParameter\r\n\r\n[...]\r\n23. Let iteratorRecord be Record {[[Iterator]]:\r\nCreateListIterator(argumentsList), [[Done]]: false}.\r\n24. If hasDuplicates is true, then\r\n[...]\r\n25. Else,\r\na. Perform ? IteratorBindingInitialization for formals with\r\niteratorRecord and env as arguments.\r\n[...]\r\n\r\n"},{"path":"./test262/test/language/expressions/async-function/nameless-dflt-params-arg-val-undefined.js","description":" Use of initializer when argument value is `undefined` (async function nameless expression)\r","esid":" sec-async-function-definitions\r","features":["default-parameters","async-functions\r"],"flags":["generated","async\r"],"info":" |\r14.6 Async Function Definitions\r\n\r\nAsyncFunctionExpression :\r\nasync function ( FormalParameters ) { AsyncFunctionBody }\r\n\r\n\r\n14.1.19 Runtime Semantics: IteratorBindingInitialization\r\n\r\nFormalsList : FormalsList , FormalParameter\r\n\r\n[...]\r\n23. Let iteratorRecord be Record {[[Iterator]]:\r\nCreateListIterator(argumentsList), [[Done]]: false}.\r\n24. If hasDuplicates is true, then\r\n[...]\r\n25. Else,\r\na. Perform ? IteratorBindingInitialization for formals with\r\niteratorRecord and env as arguments.\r\n[...]\r\n\r\n"},{"path":"./test262/test/language/expressions/async-function/nameless-dflt-params-duplicates.js","description":" It is a Syntax Error if BoundNames of FormalParameters contains any duplicate elements. (async function nameless expression)\r","esid":" sec-async-function-definitions\r","features":["default-parameters","async-functions\r"],"flags":["generated\r"],"negative":{"phase":"parse\r","type":"SyntaxError\r"},"info":" |\r14.6 Async Function Definitions\r\n\r\nAsyncFunctionExpression :\r\nasync function ( FormalParameters ) { AsyncFunctionBody }\r\n\r\n\r\n14.1.2 Static Semantics: Early Errors\r\n\r\nStrictFormalParameters : FormalParameters\r\n\r\n- It is a Syntax Error if BoundNames of FormalParameters contains any\r\nduplicate elements.\r\n\r\nFormalParameters : FormalParameterList\r\n\r\n- It is a Syntax Error if IsSimpleParameterList of FormalParameterList is\r\nfalse and BoundNames of FormalParameterList contains any duplicate\r\nelements.\r\n\r\n"},{"path":"./test262/test/language/expressions/async-function/nameless-dflt-params-ref-later.js","description":" Referencing a parameter that occurs later in the ParameterList (async function nameless expression)\r","esid":" sec-async-function-definitions\r","features":["default-parameters","async-functions\r"],"flags":["generated","async\r"],"info":" |\r14.6 Async Function Definitions\r\n\r\nAsyncFunctionExpression :\r\nasync function ( FormalParameters ) { AsyncFunctionBody }\r\n\r\n\r\n14.1.19 Runtime Semantics: IteratorBindingInitialization\r\n\r\nFormalsList : FormalsList , FormalParameter\r\n\r\n1. Let status be the result of performing IteratorBindingInitialization for\r\nFormalsList using iteratorRecord and environment as the arguments.\r\n2. ReturnIfAbrupt(status).\r\n3. Return the result of performing IteratorBindingInitialization for\r\nFormalParameter using iteratorRecord and environment as the arguments.\r\n\r\n"},{"path":"./test262/test/language/expressions/async-function/nameless-dflt-params-ref-prior.js","description":" Referencing a parameter that occurs earlier in the ParameterList (async function nameless expression)\r","esid":" sec-async-function-definitions\r","features":["default-parameters","async-functions\r"],"flags":["generated","async\r"],"info":" |\r14.6 Async Function Definitions\r\n\r\nAsyncFunctionExpression :\r\nasync function ( FormalParameters ) { AsyncFunctionBody }\r\n\r\n\r\n14.1.19 Runtime Semantics: IteratorBindingInitialization\r\n\r\nFormalsList : FormalsList , FormalParameter\r\n\r\n1. Let status be the result of performing IteratorBindingInitialization for\r\nFormalsList using iteratorRecord and environment as the arguments.\r\n2. ReturnIfAbrupt(status).\r\n3. Return the result of performing IteratorBindingInitialization for\r\nFormalParameter using iteratorRecord and environment as the arguments.\r\n\r\n"},{"path":"./test262/test/language/expressions/async-function/nameless-dflt-params-ref-self.js","description":" Referencing a parameter from within its own initializer (async function nameless expression)\r","esid":" sec-async-function-definitions\r","features":["default-parameters","async-functions\r"],"flags":["generated","async\r"],"info":" |\r14.6 Async Function Definitions\r\n\r\nAsyncFunctionExpression :\r\nasync function ( FormalParameters ) { AsyncFunctionBody }\r\n\r\n\r\n14.1.19 Runtime Semantics: IteratorBindingInitialization\r\n\r\nFormalsList : FormalsList , FormalParameter\r\n\r\n1. Let status be the result of performing IteratorBindingInitialization for\r\nFormalsList using iteratorRecord and environment as the arguments.\r\n2. ReturnIfAbrupt(status).\r\n3. Return the result of performing IteratorBindingInitialization for\r\nFormalParameter using iteratorRecord and environment as the arguments.\r\n\r\n"},{"path":"./test262/test/language/expressions/async-function/nameless-dflt-params-trailing-comma.js","description":" A trailing comma should not increase the respective length, using default parameters (async function nameless expression)\r","esid":" sec-async-function-definitions\r","features":["async-functions\r"],"flags":["generated","async\r"],"info":" |\r14.6 Async Function Definitions\r\n\r\nAsyncFunctionExpression :\r\nasync function ( FormalParameters ) { AsyncFunctionBody }\r\n\r\n\r\nTrailing comma in the parameters list\r\n\r\n14.1 Function Definitions\r\n\r\nFormalParameters[Yield, Await] : FormalParameterList[?Yield, ?Await] ,\r\n"},{"path":"./test262/test/language/expressions/async-function/nameless-eval-var-scope-syntax-err.js","description":" sloppy direct eval in params introduces var (async function nameless expression in sloppy code)\r","esid":" sec-async-function-definitions\r","features":["default-parameters","async-functions\r"],"flags":["generated","async","noStrict\r"],"info":" |\r14.6 Async Function Definitions\r\n\r\nAsyncFunctionExpression :\r\nasync function ( FormalParameters ) { AsyncFunctionBody }\r\n\r\n\r\n\nRuntime Semantics: IteratorBindingInitialization\r\nFormalParameter : BindingElement\r\n\r\n1. Return the result of performing IteratorBindingInitialization for BindingElement with arguments iteratorRecord and environment.\r\n\r\n"},{"path":"./test262/test/language/expressions/async-function/nameless-params-trailing-comma-multiple.js","description":" A trailing comma should not increase the respective length, using multiple parameters (async function nameless expression)\r","esid":" sec-async-function-definitions\r","features":["async-functions\r"],"flags":["generated","async\r"],"info":" |\r14.6 Async Function Definitions\r\n\r\nAsyncFunctionExpression :\r\nasync function ( FormalParameters ) { AsyncFunctionBody }\r\n\r\n\r\nTrailing comma in the parameters list\r\n\r\n14.1 Function Definitions\r\n\r\nFormalParameters[Yield, Await] : FormalParameterList[?Yield, ?Await] ,\r\n"},{"path":"./test262/test/language/expressions/async-function/nameless-params-trailing-comma-single.js","description":" A trailing comma should not increase the respective length, using a single parameter (async function nameless expression)\r","esid":" sec-async-function-definitions\r","features":["async-functions\r"],"flags":["generated","async\r"],"info":" |\r14.6 Async Function Definitions\r\n\r\nAsyncFunctionExpression :\r\nasync function ( FormalParameters ) { AsyncFunctionBody }\r\n\r\n\r\nTrailing comma in the parameters list\r\n\r\n14.1 Function Definitions\r\n\r\nFormalParameters[Yield, Await] : FormalParameterList[?Yield, ?Await] ,\r\n"},{"path":"./test262/test/language/expressions/async-function/nameless-unscopables-with-in-nested-fn.js","description":" Symbol.unscopables behavior across scope boundaries (async function nameless expression)\r","esid":" sec-async-function-definitions\r","features":["globalThis","Symbol.unscopables","async-functions\r"],"flags":["generated","noStrict","async\r"],"info":" |\r14.6 Async Function Definitions\r\n\r\nAsyncFunctionExpression :\r\nasync function ( FormalParameters ) { AsyncFunctionBody }\r\n\r\n\r\n...\r\nLet envRec be lex's EnvironmentRecord.\r\nLet exists be ? envRec.HasBinding(name).\r\n\r\nHasBinding\r\n\r\n...\r\nIf the withEnvironment flag of envRec is false, return true.\r\nLet unscopables be ? Get(bindings, @@unscopables).\r\nIf Type(unscopables) is Object, then\r\nLet blocked be ToBoolean(? Get(unscopables, N)).\r\nIf blocked is true, return false.\r\n\r\n(The `with` Statement) Runtime Semantics: Evaluation\r\n\r\n...\r\nSet the withEnvironment flag of newEnv’s EnvironmentRecord to true.\r\n...\r\n\r\n"},{"path":"./test262/test/language/expressions/async-function/nameless-unscopables-with.js","description":" Symbol.unscopables behavior across scope boundaries (async function nameless expression)\r","esid":" sec-async-function-definitions\r","features":["globalThis","Symbol.unscopables","async-functions\r"],"flags":["generated","noStrict","async\r"],"info":" |\r14.6 Async Function Definitions\r\n\r\nAsyncFunctionExpression :\r\nasync function ( FormalParameters ) { AsyncFunctionBody }\r\n\r\n\r\n...\r\nLet envRec be lex's EnvironmentRecord.\r\nLet exists be ? envRec.HasBinding(name).\r\n\r\nHasBinding\r\n\r\n...\r\nIf the withEnvironment flag of envRec is false, return true.\r\nLet unscopables be ? Get(bindings, @@unscopables).\r\nIf Type(unscopables) is Object, then\r\nLet blocked be ToBoolean(? Get(unscopables, N)).\r\nIf blocked is true, return false.\r\n\r\n(The `with` Statement) Runtime Semantics: Evaluation\r\n\r\n...\r\nSet the withEnvironment flag of newEnv’s EnvironmentRecord to true.\r\n...\r\n\r\n"},{"path":"./test262/test/language/expressions/async-function/syntax-expression-is-PrimaryExpression.js","author":" Brian Terlson <brian.terlson@microsoft.com>\r","esid":" pending\r","description":" >\rAsync function expressions are PrimaryExpressions\r\n"},{"path":"./test262/test/language/expressions/async-function/try-reject-finally-reject.js","author":" Caitlin Potter <caitp@igalia.com>\r","esid":" pending\r","description":" >\rImplementations must defer rejecting an async function's Promise until after\r\nall finally blocks have been evaluated.\r\n","flags":["async\r"]},{"path":"./test262/test/language/expressions/async-function/try-reject-finally-return.js","author":" Caitlin Potter <caitp@igalia.com>\r","esid":" pending\r","description":" >\rImplementations must defer rejecting an async function's Promise until after\r\nall finally blocks have been evaluated.\r\n","flags":["async\r"]},{"path":"./test262/test/language/expressions/async-function/try-reject-finally-throw.js","author":" Caitlin Potter <caitp@igalia.com>\r","esid":" pending\r","description":" >\rImplementations must defer rejecting an async function's Promise until after\r\nall finally blocks have been evaluated.\r\n","flags":["async\r"]},{"path":"./test262/test/language/expressions/async-function/try-return-finally-reject.js","author":" Caitlin Potter <caitp@igalia.com>\r","esid":" pending\r","description":" >\rImplementations must defer resolving an async function's Promise until after\r\nall finally blocks have been evaluated.\r\n","flags":["async\r"]},{"path":"./test262/test/language/expressions/async-function/try-return-finally-return.js","author":" Caitlin Potter <caitp@igalia.com>\r","esid":" pending\r","description":" >\rImplementations must defer resolving an async function's Promise until after\r\nall finally blocks have been evaluated.\r\n","flags":["async\r"]},{"path":"./test262/test/language/expressions/async-function/try-return-finally-throw.js","author":" Caitlin Potter <caitp@igalia.com>\r","esid":" pending\r","description":" >\rImplementations must defer resolving an async function's Promise until after\r\nall finally blocks have been evaluated.\r\n","flags":["async\r"]},{"path":"./test262/test/language/expressions/async-function/try-throw-finally-reject.js","author":" Caitlin Potter <caitp@igalia.com>\r","esid":" pending\r","description":" >\rImplementations must defer rejecting an async function's Promise until after\r\nall finally blocks have been evaluated.\r\n","flags":["async\r"]},{"path":"./test262/test/language/expressions/async-function/try-throw-finally-return.js","author":" Caitlin Potter <caitp@igalia.com>\r","esid":" pending\r","description":" >\rImplementations must defer rejecting an async function's Promise until after\r\nall finally blocks have been evaluated.\r\n","flags":["async\r"]},{"path":"./test262/test/language/expressions/async-function/try-throw-finally-throw.js","author":" Caitlin Potter <caitp@igalia.com>\r","esid":" pending\r","description":" >\rImplementations must defer rejecting an async function's Promise until after\r\nall finally blocks have been evaluated.\r\n","flags":["async\r"]},{"path":"./test262/test/language/expressions/async-generator/eval-body-proto-realm.js","esid":" sec-asyncgenerator-definitions-evaluatebody\r","description":" >\rDefault [[Prototype]] value derived from realm of the async generator function.\r\n","info":" |\rRuntime Semantics: EvaluateBody\r\n\r\n...\r\n2. Let generator be ? OrdinaryCreateFromConstructor(functionObject, \"%AsyncGeneratorPrototype%\", « ... »).\r\n3. Perform ! AsyncGeneratorStart(generator, FunctionBody).\r\n4. Return Completion { [[Type]]: return, [[Value]]: generator, [[Target]]: empty }.\r\n\r\nOrdinaryCreateFromConstructor ( constructor, intrinsicDefaultProto [ , internalSlotsList ] )\r\n\r\n...\r\n2. Let proto be ? GetPrototypeFromConstructor(constructor, intrinsicDefaultProto).\r\n3. Return ObjectCreate(proto, internalSlotsList).\r\n\r\nGetPrototypeFromConstructor ( constructor, intrinsicDefaultProto )\r\n\r\n...\r\n3. Let proto be ? Get(constructor, 'prototype').\r\n4. If Type(proto) is not Object, then\r\na. Let realm be ? GetFunctionRealm(constructor).\r\nb. Set proto to realm's intrinsic object named intrinsicDefaultProto.\r\n5. Return proto.\r\n","features":["async-iteration","cross-realm","Symbol\r"]},{"path":"./test262/test/language/expressions/await/async-await-interleaved.js","author":" Maya Lekova <mslekova@chromium.org>\r","esid":" await\r","description":" >\rAwait on async functions and builtin Promises are properly interleaved,\r\nmeaning await takes only 1 tick on the microtask queue.\r\n","flags":["async\r"],"features":["async-functions\r"],"includes":["compareArray.js\r"]},{"path":"./test262/test/language/expressions/await/await-awaits-thenable-not-callable.js","author":" Brian Terlson <brian.terlson@microsoft.com>\r","esid":" pending\r","description":" >\rAwait can await any thenable. If the thenable's then is not callable,\r\nawait evaluates to the thenable\r\n","flags":["async\r"]},{"path":"./test262/test/language/expressions/await/await-awaits-thenables-that-throw.js","author":" Brian Terlson <brian.terlson@microsoft.com>\r","esid":" pending\r","description":" >\rAwait can await any thenable.\r\n","flags":["async\r"]},{"path":"./test262/test/language/expressions/await/await-awaits-thenables.js","author":" Brian Terlson <brian.terlson@microsoft.com>\r","esid":" pending\r","description":" >\rAwait can await any thenable.\r\n","flags":["async\r"]},{"path":"./test262/test/language/expressions/await/await-BindingIdentifier-in-global.js","author":" Brian Terlson <brian.terlson@microsoft.com>\r","esid":" pending\r","description":" >\rAwait is allowed as a binding identifier in global scope\r\n"},{"path":"./test262/test/language/expressions/await/await-in-nested-function.js","author":" Brian Terlson <brian.terlson@microsoft.com>\r","esid":" pending\r","description":" >\rAwait is allowed as an identifier in functions nested in async functions\r\n"},{"path":"./test262/test/language/expressions/await/await-in-nested-generator.js","author":" Brian Terlson <brian.terlson@microsoft.com>\r","esid":" pending\r","description":" >\rAwait is allowed as an identifier in generator functions nested in async functions\r\n","features":["generators\r"]},{"path":"./test262/test/language/expressions/await/await-monkey-patched-promise.js","author":" Maya Lekova <mslekova@chromium.org>\r","esid":" await\r","description":" >\rThis test demonstrates that monkey-patched \"then\" on native promises will\r\nnot get called. Adapted from example by Kevin Smith:\r\nhttps://github.com/tc39/ecma262/pull/1250#issuecomment-401082195\r\n","flags":["async\r"],"features":["async-functions\r"],"includes":["compareArray.js\r"]},{"path":"./test262/test/language/expressions/await/await-non-promise-thenable.js","author":" Maya Lekova <mslekova@chromium.org>\r","esid":" await\r","description":" >\rThis test demonstrates that \"then\" on a non-native promise\r\nwill still get called.\r\n","flags":["async\r"],"features":["async-functions\r"],"includes":["compareArray.js\r"]},{"path":"./test262/test/language/expressions/await/await-non-promise.js","author":" Maya Lekova <mslekova@chromium.org>\r","esid":" await\r","description":" >\rThis test demonstrates that \"then\" on a non-native promise\r\nwill still get called.\r\n","flags":["async\r"],"features":["async-functions\r"],"includes":["compareArray.js\r"]},{"path":"./test262/test/language/expressions/await/await-throws-rejections.js","author":" Brian Terlson <brian.terlson@microsoft.com>\r","esid":" pending\r","description":" >\rAwait throws errors from rejected promises\r\n","flags":["async\r"]},{"path":"./test262/test/language/expressions/await/syntax-await-has-UnaryExpression-with-MultiplicativeExpression.js","author":" Brian Terlson <brian.terlson@microsoft.com>\r","esid":" pending\r","description":" >\rAwait's operand is a UnaryExpression\r\n","flags":["async\r"]},{"path":"./test262/test/language/expressions/await/syntax-await-has-UnaryExpression.js","author":" Brian Terlson <brian.terlson@microsoft.com>\r","esid":" pending\r","description":" >\rAwait's operand is a UnaryExpression\r\n","flags":["async\r"]},{"path":"./test262/test/language/expressions/class/async-method/dflt-params-abrupt.js","description":" Abrupt completion returned by evaluation of initializer (class expression async method)\r","esid":" sec-class-definitions-runtime-semantics-evaluation\r","features":["default-parameters","async-functions\r"],"flags":["generated","async\r"],"info":" |\rClassExpression : class BindingIdentifieropt ClassTail\r\n\r\n1. If BindingIdentifieropt is not present, let className be undefined.\r\n2. Else, let className be StringValue of BindingIdentifier.\r\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\r\nwith argument className.\r\n[...]\r\n\r\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\r\n\r\n21. For each ClassElement m in order from methods\r\na. If IsStatic of m is false, then\r\ni. Let status be the result of performing\r\nPropertyDefinitionEvaluation for m with arguments proto and\r\nfalse.\r\n[...]\r\n\r\nRuntime Semantics: PropertyDefinitionEvaluation\r\n\r\nAsyncMethod : async PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n1. Let propKey be the result of evaluating PropertyName.\r\n2. ReturnIfAbrupt(propKey).\r\n3. If the function code for this AsyncMethod is strict mode code, let strict be true. Otherwise\r\nlet strict be false.\r\n4. Let scope be the LexicalEnvironment of the running execution context.\r\n5. Let closure be ! AsyncFunctionCreate(Method, UniqueFormalParameters, AsyncFunctionBody,\r\nscope, strict).\r\n[...]\r\n\r\n\r\n14.1.19 Runtime Semantics: IteratorBindingInitialization\r\n\r\nFormalsList : FormalsList , FormalParameter\r\n\r\n1. Let status be the result of performing IteratorBindingInitialization for\r\nFormalsList using iteratorRecord and environment as the arguments.\r\n2. ReturnIfAbrupt(status).\r\n3. Return the result of performing IteratorBindingInitialization for\r\nFormalParameter using iteratorRecord and environment as the arguments.\r\n\r\n"},{"path":"./test262/test/language/expressions/class/async-method/dflt-params-arg-val-not-undefined.js","description":" Use of initializer when argument value is not `undefined` (class expression async method)\r","esid":" sec-class-definitions-runtime-semantics-evaluation\r","features":["default-parameters","async-functions\r"],"flags":["generated","async\r"],"info":" |\rClassExpression : class BindingIdentifieropt ClassTail\r\n\r\n1. If BindingIdentifieropt is not present, let className be undefined.\r\n2. Else, let className be StringValue of BindingIdentifier.\r\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\r\nwith argument className.\r\n[...]\r\n\r\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\r\n\r\n21. For each ClassElement m in order from methods\r\na. If IsStatic of m is false, then\r\ni. Let status be the result of performing\r\nPropertyDefinitionEvaluation for m with arguments proto and\r\nfalse.\r\n[...]\r\n\r\nRuntime Semantics: PropertyDefinitionEvaluation\r\n\r\nAsyncMethod : async PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n1. Let propKey be the result of evaluating PropertyName.\r\n2. ReturnIfAbrupt(propKey).\r\n3. If the function code for this AsyncMethod is strict mode code, let strict be true. Otherwise\r\nlet strict be false.\r\n4. Let scope be the LexicalEnvironment of the running execution context.\r\n5. Let closure be ! AsyncFunctionCreate(Method, UniqueFormalParameters, AsyncFunctionBody,\r\nscope, strict).\r\n[...]\r\n\r\n\r\n14.1.19 Runtime Semantics: IteratorBindingInitialization\r\n\r\nFormalsList : FormalsList , FormalParameter\r\n\r\n[...]\r\n23. Let iteratorRecord be Record {[[Iterator]]:\r\nCreateListIterator(argumentsList), [[Done]]: false}.\r\n24. If hasDuplicates is true, then\r\n[...]\r\n25. Else,\r\na. Perform ? IteratorBindingInitialization for formals with\r\niteratorRecord and env as arguments.\r\n[...]\r\n\r\n"},{"path":"./test262/test/language/expressions/class/async-method/dflt-params-arg-val-undefined.js","description":" Use of initializer when argument value is `undefined` (class expression async method)\r","esid":" sec-class-definitions-runtime-semantics-evaluation\r","features":["default-parameters","async-functions\r"],"flags":["generated","async\r"],"info":" |\rClassExpression : class BindingIdentifieropt ClassTail\r\n\r\n1. If BindingIdentifieropt is not present, let className be undefined.\r\n2. Else, let className be StringValue of BindingIdentifier.\r\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\r\nwith argument className.\r\n[...]\r\n\r\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\r\n\r\n21. For each ClassElement m in order from methods\r\na. If IsStatic of m is false, then\r\ni. Let status be the result of performing\r\nPropertyDefinitionEvaluation for m with arguments proto and\r\nfalse.\r\n[...]\r\n\r\nRuntime Semantics: PropertyDefinitionEvaluation\r\n\r\nAsyncMethod : async PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n1. Let propKey be the result of evaluating PropertyName.\r\n2. ReturnIfAbrupt(propKey).\r\n3. If the function code for this AsyncMethod is strict mode code, let strict be true. Otherwise\r\nlet strict be false.\r\n4. Let scope be the LexicalEnvironment of the running execution context.\r\n5. Let closure be ! AsyncFunctionCreate(Method, UniqueFormalParameters, AsyncFunctionBody,\r\nscope, strict).\r\n[...]\r\n\r\n\r\n14.1.19 Runtime Semantics: IteratorBindingInitialization\r\n\r\nFormalsList : FormalsList , FormalParameter\r\n\r\n[...]\r\n23. Let iteratorRecord be Record {[[Iterator]]:\r\nCreateListIterator(argumentsList), [[Done]]: false}.\r\n24. If hasDuplicates is true, then\r\n[...]\r\n25. Else,\r\na. Perform ? IteratorBindingInitialization for formals with\r\niteratorRecord and env as arguments.\r\n[...]\r\n\r\n"},{"path":"./test262/test/language/expressions/class/async-method/dflt-params-ref-later.js","description":" Referencing a parameter that occurs later in the ParameterList (class expression async method)\r","esid":" sec-class-definitions-runtime-semantics-evaluation\r","features":["default-parameters","async-functions\r"],"flags":["generated","async\r"],"info":" |\rClassExpression : class BindingIdentifieropt ClassTail\r\n\r\n1. If BindingIdentifieropt is not present, let className be undefined.\r\n2. Else, let className be StringValue of BindingIdentifier.\r\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\r\nwith argument className.\r\n[...]\r\n\r\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\r\n\r\n21. For each ClassElement m in order from methods\r\na. If IsStatic of m is false, then\r\ni. Let status be the result of performing\r\nPropertyDefinitionEvaluation for m with arguments proto and\r\nfalse.\r\n[...]\r\n\r\nRuntime Semantics: PropertyDefinitionEvaluation\r\n\r\nAsyncMethod : async PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n1. Let propKey be the result of evaluating PropertyName.\r\n2. ReturnIfAbrupt(propKey).\r\n3. If the function code for this AsyncMethod is strict mode code, let strict be true. Otherwise\r\nlet strict be false.\r\n4. Let scope be the LexicalEnvironment of the running execution context.\r\n5. Let closure be ! AsyncFunctionCreate(Method, UniqueFormalParameters, AsyncFunctionBody,\r\nscope, strict).\r\n[...]\r\n\r\n\r\n14.1.19 Runtime Semantics: IteratorBindingInitialization\r\n\r\nFormalsList : FormalsList , FormalParameter\r\n\r\n1. Let status be the result of performing IteratorBindingInitialization for\r\nFormalsList using iteratorRecord and environment as the arguments.\r\n2. ReturnIfAbrupt(status).\r\n3. Return the result of performing IteratorBindingInitialization for\r\nFormalParameter using iteratorRecord and environment as the arguments.\r\n\r\n"},{"path":"./test262/test/language/expressions/class/async-method/dflt-params-ref-prior.js","description":" Referencing a parameter that occurs earlier in the ParameterList (class expression async method)\r","esid":" sec-class-definitions-runtime-semantics-evaluation\r","features":["default-parameters","async-functions\r"],"flags":["generated","async\r"],"info":" |\rClassExpression : class BindingIdentifieropt ClassTail\r\n\r\n1. If BindingIdentifieropt is not present, let className be undefined.\r\n2. Else, let className be StringValue of BindingIdentifier.\r\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\r\nwith argument className.\r\n[...]\r\n\r\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\r\n\r\n21. For each ClassElement m in order from methods\r\na. If IsStatic of m is false, then\r\ni. Let status be the result of performing\r\nPropertyDefinitionEvaluation for m with arguments proto and\r\nfalse.\r\n[...]\r\n\r\nRuntime Semantics: PropertyDefinitionEvaluation\r\n\r\nAsyncMethod : async PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n1. Let propKey be the result of evaluating PropertyName.\r\n2. ReturnIfAbrupt(propKey).\r\n3. If the function code for this AsyncMethod is strict mode code, let strict be true. Otherwise\r\nlet strict be false.\r\n4. Let scope be the LexicalEnvironment of the running execution context.\r\n5. Let closure be ! AsyncFunctionCreate(Method, UniqueFormalParameters, AsyncFunctionBody,\r\nscope, strict).\r\n[...]\r\n\r\n\r\n14.1.19 Runtime Semantics: IteratorBindingInitialization\r\n\r\nFormalsList : FormalsList , FormalParameter\r\n\r\n1. Let status be the result of performing IteratorBindingInitialization for\r\nFormalsList using iteratorRecord and environment as the arguments.\r\n2. ReturnIfAbrupt(status).\r\n3. Return the result of performing IteratorBindingInitialization for\r\nFormalParameter using iteratorRecord and environment as the arguments.\r\n\r\n"},{"path":"./test262/test/language/expressions/class/async-method/dflt-params-ref-self.js","description":" Referencing a parameter from within its own initializer (class expression async method)\r","esid":" sec-class-definitions-runtime-semantics-evaluation\r","features":["default-parameters","async-functions\r"],"flags":["generated","async\r"],"info":" |\rClassExpression : class BindingIdentifieropt ClassTail\r\n\r\n1. If BindingIdentifieropt is not present, let className be undefined.\r\n2. Else, let className be StringValue of BindingIdentifier.\r\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\r\nwith argument className.\r\n[...]\r\n\r\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\r\n\r\n21. For each ClassElement m in order from methods\r\na. If IsStatic of m is false, then\r\ni. Let status be the result of performing\r\nPropertyDefinitionEvaluation for m with arguments proto and\r\nfalse.\r\n[...]\r\n\r\nRuntime Semantics: PropertyDefinitionEvaluation\r\n\r\nAsyncMethod : async PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n1. Let propKey be the result of evaluating PropertyName.\r\n2. ReturnIfAbrupt(propKey).\r\n3. If the function code for this AsyncMethod is strict mode code, let strict be true. Otherwise\r\nlet strict be false.\r\n4. Let scope be the LexicalEnvironment of the running execution context.\r\n5. Let closure be ! AsyncFunctionCreate(Method, UniqueFormalParameters, AsyncFunctionBody,\r\nscope, strict).\r\n[...]\r\n\r\n\r\n14.1.19 Runtime Semantics: IteratorBindingInitialization\r\n\r\nFormalsList : FormalsList , FormalParameter\r\n\r\n1. Let status be the result of performing IteratorBindingInitialization for\r\nFormalsList using iteratorRecord and environment as the arguments.\r\n2. ReturnIfAbrupt(status).\r\n3. Return the result of performing IteratorBindingInitialization for\r\nFormalParameter using iteratorRecord and environment as the arguments.\r\n\r\n"},{"path":"./test262/test/language/expressions/class/async-method/dflt-params-trailing-comma.js","description":" A trailing comma should not increase the respective length, using default parameters (class expression async method)\r","esid":" sec-class-definitions-runtime-semantics-evaluation\r","features":["async-functions\r"],"flags":["generated","async\r"],"info":" |\rClassExpression : class BindingIdentifieropt ClassTail\r\n\r\n1. If BindingIdentifieropt is not present, let className be undefined.\r\n2. Else, let className be StringValue of BindingIdentifier.\r\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\r\nwith argument className.\r\n[...]\r\n\r\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\r\n\r\n21. For each ClassElement m in order from methods\r\na. If IsStatic of m is false, then\r\ni. Let status be the result of performing\r\nPropertyDefinitionEvaluation for m with arguments proto and\r\nfalse.\r\n[...]\r\n\r\nRuntime Semantics: PropertyDefinitionEvaluation\r\n\r\nAsyncMethod : async PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n1. Let propKey be the result of evaluating PropertyName.\r\n2. ReturnIfAbrupt(propKey).\r\n3. If the function code for this AsyncMethod is strict mode code, let strict be true. Otherwise\r\nlet strict be false.\r\n4. Let scope be the LexicalEnvironment of the running execution context.\r\n5. Let closure be ! AsyncFunctionCreate(Method, UniqueFormalParameters, AsyncFunctionBody,\r\nscope, strict).\r\n[...]\r\n\r\n\r\nTrailing comma in the parameters list\r\n\r\n14.1 Function Definitions\r\n\r\nFormalParameters[Yield, Await] : FormalParameterList[?Yield, ?Await] ,\r\n"},{"path":"./test262/test/language/expressions/class/async-method/forbidden-ext/b1/cls-expr-async-meth-forbidden-ext-direct-access-prop-arguments.js","description":" Forbidden extension, f.arguments (class expression async method)\r","esid":" sec-class-definitions-runtime-semantics-evaluation\r","features":["arrow-function","async-functions","class\r"],"flags":["generated","noStrict","async\r"],"info":" |\rClassExpression : class BindingIdentifieropt ClassTail\r\n\r\n\r\nECMAScript function objects defined using syntactic constructors in strict mode code must\r\nnot be created with own properties named \"caller\" or \"arguments\". Such own properties also\r\nmust not be created for function objects defined using an ArrowFunction, MethodDefinition,\r\nGeneratorDeclaration, GeneratorExpression, AsyncGeneratorDeclaration, AsyncGeneratorExpression,\r\nClassDeclaration, ClassExpression, AsyncFunctionDeclaration, AsyncFunctionExpression, or\r\nAsyncArrowFunction regardless of whether the definition is contained in strict mode code.\r\nBuilt-in functions, strict functions created using the Function constructor, generator functions\r\ncreated using the Generator constructor, async functions created using the AsyncFunction\r\nconstructor, and functions created using the bind method also must not be created with such own\r\nproperties.\r\n\r\n"},{"path":"./test262/test/language/expressions/class/async-method/forbidden-ext/b1/cls-expr-async-meth-forbidden-ext-direct-access-prop-caller.js","description":" Forbidden extension, o.caller (class expression async method)\r","esid":" sec-class-definitions-runtime-semantics-evaluation\r","features":["arrow-function","async-functions","class\r"],"flags":["generated","noStrict","async\r"],"info":" |\rClassExpression : class BindingIdentifieropt ClassTail\r\n\r\n\r\nECMAScript function objects defined using syntactic constructors in strict mode code must\r\nnot be created with own properties named \"caller\" or \"arguments\". Such own properties also\r\nmust not be created for function objects defined using an ArrowFunction, MethodDefinition,\r\nGeneratorDeclaration, GeneratorExpression, AsyncGeneratorDeclaration, AsyncGeneratorExpression,\r\nClassDeclaration, ClassExpression, AsyncFunctionDeclaration, AsyncFunctionExpression, or\r\nAsyncArrowFunction regardless of whether the definition is contained in strict mode code.\r\nBuilt-in functions, strict functions created using the Function constructor, generator functions\r\ncreated using the Generator constructor, async functions created using the AsyncFunction\r\nconstructor, and functions created using the bind method also must not be created with such own\r\nproperties.\r\n\r\n"},{"path":"./test262/test/language/expressions/class/async-method/forbidden-ext/b2/cls-expr-async-meth-forbidden-ext-indirect-access-own-prop-caller-get.js","description":" Forbidden extension, o.caller (class expression async method)\r","esid":" sec-class-definitions-runtime-semantics-evaluation\r","features":["arrow-function","async-functions","class\r"],"flags":["generated","noStrict","async\r"],"info":" |\rClassExpression : class BindingIdentifieropt ClassTail\r\n\r\n\r\nIf an implementation extends any function object with an own property named \"caller\" the value of\r\nthat property, as observed using [[Get]] or [[GetOwnProperty]], must not be a strict function\r\nobject. If it is an accessor property, the function that is the value of the property's [[Get]]\r\nattribute must never return a strict function when called.\r\n\r\n"},{"path":"./test262/test/language/expressions/class/async-method/forbidden-ext/b2/cls-expr-async-meth-forbidden-ext-indirect-access-own-prop-caller-value.js","description":" Forbidden extension, o.caller (class expression async method)\r","esid":" sec-class-definitions-runtime-semantics-evaluation\r","features":["arrow-function","async-functions","class\r"],"flags":["generated","noStrict","async\r"],"info":" |\rClassExpression : class BindingIdentifieropt ClassTail\r\n\r\n\r\nIf an implementation extends any function object with an own property named \"caller\" the value of\r\nthat property, as observed using [[Get]] or [[GetOwnProperty]], must not be a strict function\r\nobject. If it is an accessor property, the function that is the value of the property's [[Get]]\r\nattribute must never return a strict function when called.\r\n\r\n"},{"path":"./test262/test/language/expressions/class/async-method/forbidden-ext/b2/cls-expr-async-meth-forbidden-ext-indirect-access-prop-caller.js","description":" Forbidden extension, o.caller (class expression async method)\r","esid":" sec-class-definitions-runtime-semantics-evaluation\r","features":["arrow-function","async-functions","class\r"],"flags":["generated","noStrict","async\r"],"info":" |\rClassExpression : class BindingIdentifieropt ClassTail\r\n\r\n\r\nIf an implementation extends any function object with an own property named \"caller\" the value of\r\nthat property, as observed using [[Get]] or [[GetOwnProperty]], must not be a strict function\r\nobject. If it is an accessor property, the function that is the value of the property's [[Get]]\r\nattribute must never return a strict function when called.\r\n\r\n"},{"path":"./test262/test/language/expressions/class/async-method/params-trailing-comma-multiple.js","description":" A trailing comma should not increase the respective length, using multiple parameters (class expression async method)\r","esid":" sec-class-definitions-runtime-semantics-evaluation\r","features":["async-functions\r"],"flags":["generated","async\r"],"info":" |\rClassExpression : class BindingIdentifieropt ClassTail\r\n\r\n1. If BindingIdentifieropt is not present, let className be undefined.\r\n2. Else, let className be StringValue of BindingIdentifier.\r\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\r\nwith argument className.\r\n[...]\r\n\r\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\r\n\r\n21. For each ClassElement m in order from methods\r\na. If IsStatic of m is false, then\r\ni. Let status be the result of performing\r\nPropertyDefinitionEvaluation for m with arguments proto and\r\nfalse.\r\n[...]\r\n\r\nRuntime Semantics: PropertyDefinitionEvaluation\r\n\r\nAsyncMethod : async PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n1. Let propKey be the result of evaluating PropertyName.\r\n2. ReturnIfAbrupt(propKey).\r\n3. If the function code for this AsyncMethod is strict mode code, let strict be true. Otherwise\r\nlet strict be false.\r\n4. Let scope be the LexicalEnvironment of the running execution context.\r\n5. Let closure be ! AsyncFunctionCreate(Method, UniqueFormalParameters, AsyncFunctionBody,\r\nscope, strict).\r\n[...]\r\n\r\n\r\nTrailing comma in the parameters list\r\n\r\n14.1 Function Definitions\r\n\r\nFormalParameters[Yield, Await] : FormalParameterList[?Yield, ?Await] ,\r\n"},{"path":"./test262/test/language/expressions/class/async-method/params-trailing-comma-single.js","description":" A trailing comma should not increase the respective length, using a single parameter (class expression async method)\r","esid":" sec-class-definitions-runtime-semantics-evaluation\r","features":["async-functions\r"],"flags":["generated","async\r"],"info":" |\rClassExpression : class BindingIdentifieropt ClassTail\r\n\r\n1. If BindingIdentifieropt is not present, let className be undefined.\r\n2. Else, let className be StringValue of BindingIdentifier.\r\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\r\nwith argument className.\r\n[...]\r\n\r\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\r\n\r\n21. For each ClassElement m in order from methods\r\na. If IsStatic of m is false, then\r\ni. Let status be the result of performing\r\nPropertyDefinitionEvaluation for m with arguments proto and\r\nfalse.\r\n[...]\r\n\r\nRuntime Semantics: PropertyDefinitionEvaluation\r\n\r\nAsyncMethod : async PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n1. Let propKey be the result of evaluating PropertyName.\r\n2. ReturnIfAbrupt(propKey).\r\n3. If the function code for this AsyncMethod is strict mode code, let strict be true. Otherwise\r\nlet strict be false.\r\n4. Let scope be the LexicalEnvironment of the running execution context.\r\n5. Let closure be ! AsyncFunctionCreate(Method, UniqueFormalParameters, AsyncFunctionBody,\r\nscope, strict).\r\n[...]\r\n\r\n\r\nTrailing comma in the parameters list\r\n\r\n14.1 Function Definitions\r\n\r\nFormalParameters[Yield, Await] : FormalParameterList[?Yield, ?Await] ,\r\n"},{"path":"./test262/test/language/expressions/class/async-method/returns-async-arrow-returns-arguments-from-parent-function.js","description":" Async function returns an async function. (Async method as a ClassExpression element)\r","esid":" prod-AsyncMethod\r","features":["async-functions\r"],"flags":["generated","async\r"],"info":" |\rClassElement :\r\nMethodDefinition\r\n\r\nMethodDefinition :\r\nAsyncMethod\r\n\r\nAsync Function Definitions\r\n\r\nAsyncMethod :\r\nasync [no LineTerminator here] PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n"},{"path":"./test262/test/language/expressions/class/async-method/returns-async-arrow-returns-newtarget.js","description":" Async function returns an async function. (Async method as a ClassExpression element)\r","esid":" prod-AsyncMethod\r","features":["async-functions\r"],"flags":["generated","async\r"],"info":" |\rClassElement :\r\nMethodDefinition\r\n\r\nMethodDefinition :\r\nAsyncMethod\r\n\r\nAsync Function Definitions\r\n\r\nAsyncMethod :\r\nasync [no LineTerminator here] PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n"},{"path":"./test262/test/language/expressions/class/async-method/returns-async-arrow.js","description":" Async function returns an async function. (Async method as a ClassExpression element)\r","esid":" prod-AsyncMethod\r","features":["async-functions\r"],"flags":["generated","async\r"],"info":" |\rClassElement :\r\nMethodDefinition\r\n\r\nMethodDefinition :\r\nAsyncMethod\r\n\r\nAsync Function Definitions\r\n\r\nAsyncMethod :\r\nasync [no LineTerminator here] PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n"},{"path":"./test262/test/language/expressions/class/async-method/returns-async-function-returns-arguments-from-own-function.js","description":" Async function returns an async function. (Async method as a ClassExpression element)\r","esid":" prod-AsyncMethod\r","features":["async-functions\r"],"flags":["generated","async\r"],"info":" |\rClassElement :\r\nMethodDefinition\r\n\r\nMethodDefinition :\r\nAsyncMethod\r\n\r\nAsync Function Definitions\r\n\r\nAsyncMethod :\r\nasync [no LineTerminator here] PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n"},{"path":"./test262/test/language/expressions/class/async-method/returns-async-function-returns-newtarget.js","description":" Async function returns an async function. (Async method as a ClassExpression element)\r","esid":" prod-AsyncMethod\r","features":["async-functions\r"],"flags":["generated","async\r"],"info":" |\rClassElement :\r\nMethodDefinition\r\n\r\nMethodDefinition :\r\nAsyncMethod\r\n\r\nAsync Function Definitions\r\n\r\nAsyncMethod :\r\nasync [no LineTerminator here] PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n"},{"path":"./test262/test/language/expressions/class/async-method/returns-async-function.js","description":" Async function returns an async function. (Async method as a ClassExpression element)\r","esid":" prod-AsyncMethod\r","features":["async-functions\r"],"flags":["generated","async\r"],"info":" |\rClassElement :\r\nMethodDefinition\r\n\r\nMethodDefinition :\r\nAsyncMethod\r\n\r\nAsync Function Definitions\r\n\r\nAsyncMethod :\r\nasync [no LineTerminator here] PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n"},{"path":"./test262/test/language/expressions/class/async-method-static/dflt-params-abrupt.js","description":" Abrupt completion returned by evaluation of initializer (static class expression async method)\r","esid":" sec-class-definitions-runtime-semantics-evaluation\r","features":["default-parameters","async-functions\r"],"flags":["generated","async\r"],"info":" |\rClassExpression : class BindingIdentifieropt ClassTail\r\n\r\n1. If BindingIdentifieropt is not present, let className be undefined.\r\n2. Else, let className be StringValue of BindingIdentifier.\r\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\r\nwith argument className.\r\n[...]\r\n\r\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\r\n\r\n21. For each ClassElement m in order from methods\r\na. If IsStatic of m is false, then\r\nb. Else,\r\nLet status be the result of performing PropertyDefinitionEvaluation\r\nfor m with arguments F and false.\r\n[...]\r\n\r\nRuntime Semantics: PropertyDefinitionEvaluation\r\n\r\nAsyncMethod : async PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n1. Let propKey be the result of evaluating PropertyName.\r\n2. ReturnIfAbrupt(propKey).\r\n3. If the function code for this AsyncMethod is strict mode code, let strict be true. Otherwise\r\nlet strict be false.\r\n4. Let scope be the LexicalEnvironment of the running execution context.\r\n5. Let closure be ! AsyncFunctionCreate(Method, UniqueFormalParameters, AsyncFunctionBody,\r\nscope, strict).\r\n[...]\r\n\r\n\r\n14.1.19 Runtime Semantics: IteratorBindingInitialization\r\n\r\nFormalsList : FormalsList , FormalParameter\r\n\r\n1. Let status be the result of performing IteratorBindingInitialization for\r\nFormalsList using iteratorRecord and environment as the arguments.\r\n2. ReturnIfAbrupt(status).\r\n3. Return the result of performing IteratorBindingInitialization for\r\nFormalParameter using iteratorRecord and environment as the arguments.\r\n\r\n"},{"path":"./test262/test/language/expressions/class/async-method-static/dflt-params-arg-val-not-undefined.js","description":" Use of initializer when argument value is not `undefined` (static class expression async method)\r","esid":" sec-class-definitions-runtime-semantics-evaluation\r","features":["default-parameters","async-functions\r"],"flags":["generated","async\r"],"info":" |\rClassExpression : class BindingIdentifieropt ClassTail\r\n\r\n1. If BindingIdentifieropt is not present, let className be undefined.\r\n2. Else, let className be StringValue of BindingIdentifier.\r\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\r\nwith argument className.\r\n[...]\r\n\r\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\r\n\r\n21. For each ClassElement m in order from methods\r\na. If IsStatic of m is false, then\r\nb. Else,\r\nLet status be the result of performing PropertyDefinitionEvaluation\r\nfor m with arguments F and false.\r\n[...]\r\n\r\nRuntime Semantics: PropertyDefinitionEvaluation\r\n\r\nAsyncMethod : async PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n1. Let propKey be the result of evaluating PropertyName.\r\n2. ReturnIfAbrupt(propKey).\r\n3. If the function code for this AsyncMethod is strict mode code, let strict be true. Otherwise\r\nlet strict be false.\r\n4. Let scope be the LexicalEnvironment of the running execution context.\r\n5. Let closure be ! AsyncFunctionCreate(Method, UniqueFormalParameters, AsyncFunctionBody,\r\nscope, strict).\r\n[...]\r\n\r\n\r\n14.1.19 Runtime Semantics: IteratorBindingInitialization\r\n\r\nFormalsList : FormalsList , FormalParameter\r\n\r\n[...]\r\n23. Let iteratorRecord be Record {[[Iterator]]:\r\nCreateListIterator(argumentsList), [[Done]]: false}.\r\n24. If hasDuplicates is true, then\r\n[...]\r\n25. Else,\r\na. Perform ? IteratorBindingInitialization for formals with\r\niteratorRecord and env as arguments.\r\n[...]\r\n\r\n"},{"path":"./test262/test/language/expressions/class/async-method-static/dflt-params-arg-val-undefined.js","description":" Use of initializer when argument value is `undefined` (static class expression async method)\r","esid":" sec-class-definitions-runtime-semantics-evaluation\r","features":["default-parameters","async-functions\r"],"flags":["generated","async\r"],"info":" |\rClassExpression : class BindingIdentifieropt ClassTail\r\n\r\n1. If BindingIdentifieropt is not present, let className be undefined.\r\n2. Else, let className be StringValue of BindingIdentifier.\r\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\r\nwith argument className.\r\n[...]\r\n\r\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\r\n\r\n21. For each ClassElement m in order from methods\r\na. If IsStatic of m is false, then\r\nb. Else,\r\nLet status be the result of performing PropertyDefinitionEvaluation\r\nfor m with arguments F and false.\r\n[...]\r\n\r\nRuntime Semantics: PropertyDefinitionEvaluation\r\n\r\nAsyncMethod : async PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n1. Let propKey be the result of evaluating PropertyName.\r\n2. ReturnIfAbrupt(propKey).\r\n3. If the function code for this AsyncMethod is strict mode code, let strict be true. Otherwise\r\nlet strict be false.\r\n4. Let scope be the LexicalEnvironment of the running execution context.\r\n5. Let closure be ! AsyncFunctionCreate(Method, UniqueFormalParameters, AsyncFunctionBody,\r\nscope, strict).\r\n[...]\r\n\r\n\r\n14.1.19 Runtime Semantics: IteratorBindingInitialization\r\n\r\nFormalsList : FormalsList , FormalParameter\r\n\r\n[...]\r\n23. Let iteratorRecord be Record {[[Iterator]]:\r\nCreateListIterator(argumentsList), [[Done]]: false}.\r\n24. If hasDuplicates is true, then\r\n[...]\r\n25. Else,\r\na. Perform ? IteratorBindingInitialization for formals with\r\niteratorRecord and env as arguments.\r\n[...]\r\n\r\n"},{"path":"./test262/test/language/expressions/class/async-method-static/dflt-params-ref-later.js","description":" Referencing a parameter that occurs later in the ParameterList (static class expression async method)\r","esid":" sec-class-definitions-runtime-semantics-evaluation\r","features":["default-parameters","async-functions\r"],"flags":["generated","async\r"],"info":" |\rClassExpression : class BindingIdentifieropt ClassTail\r\n\r\n1. If BindingIdentifieropt is not present, let className be undefined.\r\n2. Else, let className be StringValue of BindingIdentifier.\r\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\r\nwith argument className.\r\n[...]\r\n\r\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\r\n\r\n21. For each ClassElement m in order from methods\r\na. If IsStatic of m is false, then\r\nb. Else,\r\nLet status be the result of performing PropertyDefinitionEvaluation\r\nfor m with arguments F and false.\r\n[...]\r\n\r\nRuntime Semantics: PropertyDefinitionEvaluation\r\n\r\nAsyncMethod : async PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n1. Let propKey be the result of evaluating PropertyName.\r\n2. ReturnIfAbrupt(propKey).\r\n3. If the function code for this AsyncMethod is strict mode code, let strict be true. Otherwise\r\nlet strict be false.\r\n4. Let scope be the LexicalEnvironment of the running execution context.\r\n5. Let closure be ! AsyncFunctionCreate(Method, UniqueFormalParameters, AsyncFunctionBody,\r\nscope, strict).\r\n[...]\r\n\r\n\r\n14.1.19 Runtime Semantics: IteratorBindingInitialization\r\n\r\nFormalsList : FormalsList , FormalParameter\r\n\r\n1. Let status be the result of performing IteratorBindingInitialization for\r\nFormalsList using iteratorRecord and environment as the arguments.\r\n2. ReturnIfAbrupt(status).\r\n3. Return the result of performing IteratorBindingInitialization for\r\nFormalParameter using iteratorRecord and environment as the arguments.\r\n\r\n"},{"path":"./test262/test/language/expressions/class/async-method-static/dflt-params-ref-prior.js","description":" Referencing a parameter that occurs earlier in the ParameterList (static class expression async method)\r","esid":" sec-class-definitions-runtime-semantics-evaluation\r","features":["default-parameters","async-functions\r"],"flags":["generated","async\r"],"info":" |\rClassExpression : class BindingIdentifieropt ClassTail\r\n\r\n1. If BindingIdentifieropt is not present, let className be undefined.\r\n2. Else, let className be StringValue of BindingIdentifier.\r\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\r\nwith argument className.\r\n[...]\r\n\r\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\r\n\r\n21. For each ClassElement m in order from methods\r\na. If IsStatic of m is false, then\r\nb. Else,\r\nLet status be the result of performing PropertyDefinitionEvaluation\r\nfor m with arguments F and false.\r\n[...]\r\n\r\nRuntime Semantics: PropertyDefinitionEvaluation\r\n\r\nAsyncMethod : async PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n1. Let propKey be the result of evaluating PropertyName.\r\n2. ReturnIfAbrupt(propKey).\r\n3. If the function code for this AsyncMethod is strict mode code, let strict be true. Otherwise\r\nlet strict be false.\r\n4. Let scope be the LexicalEnvironment of the running execution context.\r\n5. Let closure be ! AsyncFunctionCreate(Method, UniqueFormalParameters, AsyncFunctionBody,\r\nscope, strict).\r\n[...]\r\n\r\n\r\n14.1.19 Runtime Semantics: IteratorBindingInitialization\r\n\r\nFormalsList : FormalsList , FormalParameter\r\n\r\n1. Let status be the result of performing IteratorBindingInitialization for\r\nFormalsList using iteratorRecord and environment as the arguments.\r\n2. ReturnIfAbrupt(status).\r\n3. Return the result of performing IteratorBindingInitialization for\r\nFormalParameter using iteratorRecord and environment as the arguments.\r\n\r\n"},{"path":"./test262/test/language/expressions/class/async-method-static/dflt-params-ref-self.js","description":" Referencing a parameter from within its own initializer (static class expression async method)\r","esid":" sec-class-definitions-runtime-semantics-evaluation\r","features":["default-parameters","async-functions\r"],"flags":["generated","async\r"],"info":" |\rClassExpression : class BindingIdentifieropt ClassTail\r\n\r\n1. If BindingIdentifieropt is not present, let className be undefined.\r\n2. Else, let className be StringValue of BindingIdentifier.\r\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\r\nwith argument className.\r\n[...]\r\n\r\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\r\n\r\n21. For each ClassElement m in order from methods\r\na. If IsStatic of m is false, then\r\nb. Else,\r\nLet status be the result of performing PropertyDefinitionEvaluation\r\nfor m with arguments F and false.\r\n[...]\r\n\r\nRuntime Semantics: PropertyDefinitionEvaluation\r\n\r\nAsyncMethod : async PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n1. Let propKey be the result of evaluating PropertyName.\r\n2. ReturnIfAbrupt(propKey).\r\n3. If the function code for this AsyncMethod is strict mode code, let strict be true. Otherwise\r\nlet strict be false.\r\n4. Let scope be the LexicalEnvironment of the running execution context.\r\n5. Let closure be ! AsyncFunctionCreate(Method, UniqueFormalParameters, AsyncFunctionBody,\r\nscope, strict).\r\n[...]\r\n\r\n\r\n14.1.19 Runtime Semantics: IteratorBindingInitialization\r\n\r\nFormalsList : FormalsList , FormalParameter\r\n\r\n1. Let status be the result of performing IteratorBindingInitialization for\r\nFormalsList using iteratorRecord and environment as the arguments.\r\n2. ReturnIfAbrupt(status).\r\n3. Return the result of performing IteratorBindingInitialization for\r\nFormalParameter using iteratorRecord and environment as the arguments.\r\n\r\n"},{"path":"./test262/test/language/expressions/class/async-method-static/dflt-params-trailing-comma.js","description":" A trailing comma should not increase the respective length, using default parameters (static class expression async method)\r","esid":" sec-class-definitions-runtime-semantics-evaluation\r","features":["async-functions\r"],"flags":["generated","async\r"],"info":" |\rClassExpression : class BindingIdentifieropt ClassTail\r\n\r\n1. If BindingIdentifieropt is not present, let className be undefined.\r\n2. Else, let className be StringValue of BindingIdentifier.\r\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\r\nwith argument className.\r\n[...]\r\n\r\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\r\n\r\n21. For each ClassElement m in order from methods\r\na. If IsStatic of m is false, then\r\nb. Else,\r\nLet status be the result of performing PropertyDefinitionEvaluation\r\nfor m with arguments F and false.\r\n[...]\r\n\r\nRuntime Semantics: PropertyDefinitionEvaluation\r\n\r\nAsyncMethod : async PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n1. Let propKey be the result of evaluating PropertyName.\r\n2. ReturnIfAbrupt(propKey).\r\n3. If the function code for this AsyncMethod is strict mode code, let strict be true. Otherwise\r\nlet strict be false.\r\n4. Let scope be the LexicalEnvironment of the running execution context.\r\n5. Let closure be ! AsyncFunctionCreate(Method, UniqueFormalParameters, AsyncFunctionBody,\r\nscope, strict).\r\n[...]\r\n\r\n\r\nTrailing comma in the parameters list\r\n\r\n14.1 Function Definitions\r\n\r\nFormalParameters[Yield, Await] : FormalParameterList[?Yield, ?Await] ,\r\n"},{"path":"./test262/test/language/expressions/class/async-method-static/forbidden-ext/b1/cls-expr-async-meth-static-forbidden-ext-direct-access-prop-arguments.js","description":" Forbidden extension, f.arguments (static class expression async method)\r","esid":" sec-class-definitions-runtime-semantics-evaluation\r","features":["arrow-function","async-functions","class\r"],"flags":["generated","noStrict","async\r"],"info":" |\rClassExpression : class BindingIdentifieropt ClassTail\r\n\r\n\r\nECMAScript function objects defined using syntactic constructors in strict mode code must\r\nnot be created with own properties named \"caller\" or \"arguments\". Such own properties also\r\nmust not be created for function objects defined using an ArrowFunction, MethodDefinition,\r\nGeneratorDeclaration, GeneratorExpression, AsyncGeneratorDeclaration, AsyncGeneratorExpression,\r\nClassDeclaration, ClassExpression, AsyncFunctionDeclaration, AsyncFunctionExpression, or\r\nAsyncArrowFunction regardless of whether the definition is contained in strict mode code.\r\nBuilt-in functions, strict functions created using the Function constructor, generator functions\r\ncreated using the Generator constructor, async functions created using the AsyncFunction\r\nconstructor, and functions created using the bind method also must not be created with such own\r\nproperties.\r\n\r\n"},{"path":"./test262/test/language/expressions/class/async-method-static/forbidden-ext/b1/cls-expr-async-meth-static-forbidden-ext-direct-access-prop-caller.js","description":" Forbidden extension, o.caller (static class expression async method)\r","esid":" sec-class-definitions-runtime-semantics-evaluation\r","features":["arrow-function","async-functions","class\r"],"flags":["generated","noStrict","async\r"],"info":" |\rClassExpression : class BindingIdentifieropt ClassTail\r\n\r\n\r\nECMAScript function objects defined using syntactic constructors in strict mode code must\r\nnot be created with own properties named \"caller\" or \"arguments\". Such own properties also\r\nmust not be created for function objects defined using an ArrowFunction, MethodDefinition,\r\nGeneratorDeclaration, GeneratorExpression, AsyncGeneratorDeclaration, AsyncGeneratorExpression,\r\nClassDeclaration, ClassExpression, AsyncFunctionDeclaration, AsyncFunctionExpression, or\r\nAsyncArrowFunction regardless of whether the definition is contained in strict mode code.\r\nBuilt-in functions, strict functions created using the Function constructor, generator functions\r\ncreated using the Generator constructor, async functions created using the AsyncFunction\r\nconstructor, and functions created using the bind method also must not be created with such own\r\nproperties.\r\n\r\n"},{"path":"./test262/test/language/expressions/class/async-method-static/forbidden-ext/b2/cls-expr-async-meth-static-forbidden-ext-indirect-access-own-prop-caller-get.js","description":" Forbidden extension, o.caller (static class expression async method)\r","esid":" sec-class-definitions-runtime-semantics-evaluation\r","features":["arrow-function","async-functions","class\r"],"flags":["generated","noStrict","async\r"],"info":" |\rClassExpression : class BindingIdentifieropt ClassTail\r\n\r\n\r\nIf an implementation extends any function object with an own property named \"caller\" the value of\r\nthat property, as observed using [[Get]] or [[GetOwnProperty]], must not be a strict function\r\nobject. If it is an accessor property, the function that is the value of the property's [[Get]]\r\nattribute must never return a strict function when called.\r\n\r\n"},{"path":"./test262/test/language/expressions/class/async-method-static/forbidden-ext/b2/cls-expr-async-meth-static-forbidden-ext-indirect-access-own-prop-caller-value.js","description":" Forbidden extension, o.caller (static class expression async method)\r","esid":" sec-class-definitions-runtime-semantics-evaluation\r","features":["arrow-function","async-functions","class\r"],"flags":["generated","noStrict","async\r"],"info":" |\rClassExpression : class BindingIdentifieropt ClassTail\r\n\r\n\r\nIf an implementation extends any function object with an own property named \"caller\" the value of\r\nthat property, as observed using [[Get]] or [[GetOwnProperty]], must not be a strict function\r\nobject. If it is an accessor property, the function that is the value of the property's [[Get]]\r\nattribute must never return a strict function when called.\r\n\r\n"},{"path":"./test262/test/language/expressions/class/async-method-static/forbidden-ext/b2/cls-expr-async-meth-static-forbidden-ext-indirect-access-prop-caller.js","description":" Forbidden extension, o.caller (static class expression async method)\r","esid":" sec-class-definitions-runtime-semantics-evaluation\r","features":["arrow-function","async-functions","class\r"],"flags":["generated","noStrict","async\r"],"info":" |\rClassExpression : class BindingIdentifieropt ClassTail\r\n\r\n\r\nIf an implementation extends any function object with an own property named \"caller\" the value of\r\nthat property, as observed using [[Get]] or [[GetOwnProperty]], must not be a strict function\r\nobject. If it is an accessor property, the function that is the value of the property's [[Get]]\r\nattribute must never return a strict function when called.\r\n\r\n"},{"path":"./test262/test/language/expressions/class/async-method-static/params-trailing-comma-multiple.js","description":" A trailing comma should not increase the respective length, using multiple parameters (static class expression async method)\r","esid":" sec-class-definitions-runtime-semantics-evaluation\r","features":["async-functions\r"],"flags":["generated","async\r"],"info":" |\rClassExpression : class BindingIdentifieropt ClassTail\r\n\r\n1. If BindingIdentifieropt is not present, let className be undefined.\r\n2. Else, let className be StringValue of BindingIdentifier.\r\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\r\nwith argument className.\r\n[...]\r\n\r\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\r\n\r\n21. For each ClassElement m in order from methods\r\na. If IsStatic of m is false, then\r\nb. Else,\r\nLet status be the result of performing PropertyDefinitionEvaluation\r\nfor m with arguments F and false.\r\n[...]\r\n\r\nRuntime Semantics: PropertyDefinitionEvaluation\r\n\r\nAsyncMethod : async PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n1. Let propKey be the result of evaluating PropertyName.\r\n2. ReturnIfAbrupt(propKey).\r\n3. If the function code for this AsyncMethod is strict mode code, let strict be true. Otherwise\r\nlet strict be false.\r\n4. Let scope be the LexicalEnvironment of the running execution context.\r\n5. Let closure be ! AsyncFunctionCreate(Method, UniqueFormalParameters, AsyncFunctionBody,\r\nscope, strict).\r\n[...]\r\n\r\n\r\nTrailing comma in the parameters list\r\n\r\n14.1 Function Definitions\r\n\r\nFormalParameters[Yield, Await] : FormalParameterList[?Yield, ?Await] ,\r\n"},{"path":"./test262/test/language/expressions/class/async-method-static/params-trailing-comma-single.js","description":" A trailing comma should not increase the respective length, using a single parameter (static class expression async method)\r","esid":" sec-class-definitions-runtime-semantics-evaluation\r","features":["async-functions\r"],"flags":["generated","async\r"],"info":" |\rClassExpression : class BindingIdentifieropt ClassTail\r\n\r\n1. If BindingIdentifieropt is not present, let className be undefined.\r\n2. Else, let className be StringValue of BindingIdentifier.\r\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\r\nwith argument className.\r\n[...]\r\n\r\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\r\n\r\n21. For each ClassElement m in order from methods\r\na. If IsStatic of m is false, then\r\nb. Else,\r\nLet status be the result of performing PropertyDefinitionEvaluation\r\nfor m with arguments F and false.\r\n[...]\r\n\r\nRuntime Semantics: PropertyDefinitionEvaluation\r\n\r\nAsyncMethod : async PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n1. Let propKey be the result of evaluating PropertyName.\r\n2. ReturnIfAbrupt(propKey).\r\n3. If the function code for this AsyncMethod is strict mode code, let strict be true. Otherwise\r\nlet strict be false.\r\n4. Let scope be the LexicalEnvironment of the running execution context.\r\n5. Let closure be ! AsyncFunctionCreate(Method, UniqueFormalParameters, AsyncFunctionBody,\r\nscope, strict).\r\n[...]\r\n\r\n\r\nTrailing comma in the parameters list\r\n\r\n14.1 Function Definitions\r\n\r\nFormalParameters[Yield, Await] : FormalParameterList[?Yield, ?Await] ,\r\n"},{"path":"./test262/test/language/expressions/class/async-method-static/returns-async-arrow-returns-arguments-from-parent-function.js","description":" Async function returns an async function. (Static async method as a ClassExpression element)\r","esid":" prod-AsyncMethod\r","features":["async-functions\r"],"flags":["generated","async\r"],"info":" |\rClassElement :\r\nstatic MethodDefinition\r\n\r\nMethodDefinition :\r\nAsyncMethod\r\n\r\nAsync Function Definitions\r\n\r\nAsyncMethod :\r\nasync [no LineTerminator here] PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n"},{"path":"./test262/test/language/expressions/class/async-method-static/returns-async-arrow-returns-newtarget.js","description":" Async function returns an async function. (Static async method as a ClassExpression element)\r","esid":" prod-AsyncMethod\r","features":["async-functions\r"],"flags":["generated","async\r"],"info":" |\rClassElement :\r\nstatic MethodDefinition\r\n\r\nMethodDefinition :\r\nAsyncMethod\r\n\r\nAsync Function Definitions\r\n\r\nAsyncMethod :\r\nasync [no LineTerminator here] PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n"},{"path":"./test262/test/language/expressions/class/async-method-static/returns-async-arrow.js","description":" Async function returns an async function. (Static async method as a ClassExpression element)\r","esid":" prod-AsyncMethod\r","features":["async-functions\r"],"flags":["generated","async\r"],"info":" |\rClassElement :\r\nstatic MethodDefinition\r\n\r\nMethodDefinition :\r\nAsyncMethod\r\n\r\nAsync Function Definitions\r\n\r\nAsyncMethod :\r\nasync [no LineTerminator here] PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n"},{"path":"./test262/test/language/expressions/class/async-method-static/returns-async-function-returns-arguments-from-own-function.js","description":" Async function returns an async function. (Static async method as a ClassExpression element)\r","esid":" prod-AsyncMethod\r","features":["async-functions\r"],"flags":["generated","async\r"],"info":" |\rClassElement :\r\nstatic MethodDefinition\r\n\r\nMethodDefinition :\r\nAsyncMethod\r\n\r\nAsync Function Definitions\r\n\r\nAsyncMethod :\r\nasync [no LineTerminator here] PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n"},{"path":"./test262/test/language/expressions/class/async-method-static/returns-async-function-returns-newtarget.js","description":" Async function returns an async function. (Static async method as a ClassExpression element)\r","esid":" prod-AsyncMethod\r","features":["async-functions\r"],"flags":["generated","async\r"],"info":" |\rClassElement :\r\nstatic MethodDefinition\r\n\r\nMethodDefinition :\r\nAsyncMethod\r\n\r\nAsync Function Definitions\r\n\r\nAsyncMethod :\r\nasync [no LineTerminator here] PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n"},{"path":"./test262/test/language/expressions/class/async-method-static/returns-async-function.js","description":" Async function returns an async function. (Static async method as a ClassExpression element)\r","esid":" prod-AsyncMethod\r","features":["async-functions\r"],"flags":["generated","async\r"],"info":" |\rClassElement :\r\nstatic MethodDefinition\r\n\r\nMethodDefinition :\r\nAsyncMethod\r\n\r\nAsync Function Definitions\r\n\r\nAsyncMethod :\r\nasync [no LineTerminator here] PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n"},{"path":"./test262/test/language/expressions/class/cpn-class-expr-accessors-computed-property-name-from-async-arrow-function-expression.js","description":" Computed property name from function expression (ComputedPropertyName in ClassExpression)\r","esid":" prod-ComputedPropertyName\r","features":["computed-property-names\r"],"flags":["generated\r"],"info":" |\rClassExpression:\r\nclassBindingIdentifier opt ClassTail\r\n\r\nClassTail:\r\nClassHeritage opt { ClassBody opt }\r\n\r\nClassBody:\r\nClassElementList\r\n\r\nClassElementList:\r\nClassElement\r\n\r\nClassElement:\r\nMethodDefinition\r\n\r\nMethodDefinition:\r\nPropertyName ...\r\nget PropertyName ...\r\nset PropertyName ...\r\n\r\nPropertyName:\r\nComputedPropertyName\r\n\r\nComputedPropertyName:\r\n[ AssignmentExpression ]\r\n"},{"path":"./test262/test/language/expressions/class/cpn-class-expr-computed-property-name-from-async-arrow-function-expression.js","description":" Computed property name from function expression (ComputedPropertyName in ClassExpression)\r","esid":" prod-ComputedPropertyName\r","features":["computed-property-names\r"],"flags":["generated\r"],"info":" |\rClassExpression:\r\nclassBindingIdentifier opt ClassTail\r\n\r\nClassTail:\r\nClassHeritage opt { ClassBody opt }\r\n\r\nClassBody:\r\nClassElementList\r\n\r\nClassElementList:\r\nClassElement\r\n\r\nClassElement:\r\nMethodDefinition\r\n\r\nMethodDefinition:\r\nPropertyName ...\r\nget PropertyName ...\r\nset PropertyName ...\r\n\r\nPropertyName:\r\nComputedPropertyName\r\n\r\nComputedPropertyName:\r\n[ AssignmentExpression ]\r\n"},{"path":"./test262/test/language/expressions/class/elements/syntax/valid/grammar-special-prototype-async-meth-valid.js","description":" Async Methods can be named \"prototype\" (class expression)\r","esid":" prod-ClassElement\r","features":["async-functions","class\r"],"flags":["generated\r"],"includes":["propertyHelper.js\r"],"info":" |\rRuntime Semantics: ClassDefinitionEvaluation\r\n\r\nClassTail : ClassHeritage_opt { ClassBody_opt }\r\n\r\n[...]\r\n6. Let proto be OrdinaryObjectCreate(protoParent).\r\n[...]\r\n14. Perform MakeConstructor(F, false, proto).\r\n[...]\r\n20. For each ClassElement m in order from methods, do\r\na. If IsStatic of m is false, then\r\ni. Let status be PropertyDefinitionEvaluation of m with arguments proto and false.\r\n[...]\r\n\r\nRuntime Semantics: PropertyDefinitionEvaluation\r\n\r\nWith parameters object and enumerable.\r\n\r\nAsyncMethod : async PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n[...]\r\n8. Let desc be the PropertyDescriptor { [[Value]]: closure, [[Writable]]: true, [[Enumerable]]: enumerable, [[Configurable]]: true }.\r\n9. Return ? DefinePropertyOrThrow(object, propKey, desc).\r\n\r\n"},{"path":"./test262/test/language/expressions/class/heritage-arrow-function.js","esid":" sec-runtime-semantics-classdefinitionevaluation\r","description":" >\rThrow a TypeError exception if IsConstructor(superclass) is false (async arrow)\r\n","info":" |\rRuntime Semantics: ClassDefinitionEvaluation\r\n\r\nClassTail : ClassHeritage { ClassBody }\r\n...\r\n\r\n5. Else,\r\nSet the running execution context's LexicalEnvironment to classScope.\r\nLet superclassRef be the result of evaluating ClassHeritage.\r\nSet the running execution context's LexicalEnvironment to env.\r\nLet superclass be ? GetValue(superclassRef).\r\nIf superclass is null, then\r\nLet protoParent be null.\r\nLet constructorParent be %Function.prototype%.\r\nElse if IsConstructor(superclass) is false, throw a TypeError exception.\r\n...\r\n","features":["class\r"]},{"path":"./test262/test/language/expressions/class/heritage-async-arrow-function.js","esid":" sec-runtime-semantics-classdefinitionevaluation\r","description":" >\rThrow a TypeError exception if IsConstructor(superclass) is false (async arrow)\r\n","info":" |\rRuntime Semantics: ClassDefinitionEvaluation\r\n\r\nClassTail : ClassHeritage { ClassBody }\r\n...\r\n\r\n5. Else,\r\nSet the running execution context's LexicalEnvironment to classScope.\r\nLet superclassRef be the result of evaluating ClassHeritage.\r\nSet the running execution context's LexicalEnvironment to env.\r\nLet superclass be ? GetValue(superclassRef).\r\nIf superclass is null, then\r\nLet protoParent be null.\r\nLet constructorParent be %Function.prototype%.\r\nElse if IsConstructor(superclass) is false, throw a TypeError exception.\r\n...\r\n","features":["class\r"]},{"path":"./test262/test/language/expressions/class/subclass-builtins/subclass-SharedArrayBuffer.js","description":" new SubSharedArrayBuffer() instanceof SharedArrayBuffer (Subclass instanceof Heritage)\r","features":["SharedArrayBuffer\r"],"flags":["generated\r"]},{"path":"./test262/test/language/expressions/import.meta/syntax/goal-async-function-params-or-body.js","esid":" sec-left-hand-side-expressions-static-semantics-early-errors\r","description":" >\rAn Syntax Error is thrown when the syntactic goal symbol is AsyncFunctionBody or FormalParameters.\r\n","info":" |\rIt is an early Syntax Error if Module is not the syntactic goal symbol.\r\n","features":["import.meta","async-functions\r"]},{"path":"./test262/test/language/expressions/new.target/unary-expr.js","esid":" prod-UnaryExpression\r","description":" >\rWhile increments and decrements are restricted to use with NewTarget,\r\nother unary operators should not throw SyntaxError.\r\n","info":" |\rUnaryExpression[Yield, Await]:\r\nUpdateExpression[?Yield, ?Await]:\r\nLeftHandSideExpression[?Yield, ?Await]:\r\nNewExpression[?Yield, ?Await]:\r\nMemberExpression[Yield, Await]:\r\nMetaProperty:\r\nNewTarget\r\n","features":["new.target","async-functions\r"],"flags":["async\r"]},{"path":"./test262/test/language/expressions/object/cpn-obj-lit-computed-property-name-from-async-arrow-function-expression.js","description":" Computed property name from function expression (ComputedPropertyName in ObjectLiteral)\r","esid":" prod-ComputedPropertyName\r","features":["computed-property-names\r"],"flags":["generated\r"],"info":" |\rObjectLiteral:\r\n{ PropertyDefinitionList }\r\n\r\nPropertyDefinitionList:\r\nPropertyDefinition\r\n\r\nPropertyDefinition:\r\nPropertyName: AssignmentExpression\r\n\r\nPropertyName:\r\nComputedPropertyName\r\n\r\nComputedPropertyName:\r\n[ AssignmentExpression ]\r\n"},{"path":"./test262/test/language/expressions/object/method-definition/async-meth-dflt-params-abrupt.js","description":" Abrupt completion returned by evaluation of initializer (async method)\r","esid":" sec-async-function-definitions\r","features":["default-parameters","async-functions\r"],"flags":["generated","async\r"],"info":" |\r14.6 Async Function Definitions\r\n\r\nAsyncMethod :\r\nasync PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n\r\n14.1.19 Runtime Semantics: IteratorBindingInitialization\r\n\r\nFormalsList : FormalsList , FormalParameter\r\n\r\n1. Let status be the result of performing IteratorBindingInitialization for\r\nFormalsList using iteratorRecord and environment as the arguments.\r\n2. ReturnIfAbrupt(status).\r\n3. Return the result of performing IteratorBindingInitialization for\r\nFormalParameter using iteratorRecord and environment as the arguments.\r\n\r\n"},{"path":"./test262/test/language/expressions/object/method-definition/async-meth-dflt-params-arg-val-not-undefined.js","description":" Use of initializer when argument value is not `undefined` (async method)\r","esid":" sec-async-function-definitions\r","features":["default-parameters","async-functions\r"],"flags":["generated","async\r"],"info":" |\r14.6 Async Function Definitions\r\n\r\nAsyncMethod :\r\nasync PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n\r\n14.1.19 Runtime Semantics: IteratorBindingInitialization\r\n\r\nFormalsList : FormalsList , FormalParameter\r\n\r\n[...]\r\n23. Let iteratorRecord be Record {[[Iterator]]:\r\nCreateListIterator(argumentsList), [[Done]]: false}.\r\n24. If hasDuplicates is true, then\r\n[...]\r\n25. Else,\r\na. Perform ? IteratorBindingInitialization for formals with\r\niteratorRecord and env as arguments.\r\n[...]\r\n\r\n"},{"path":"./test262/test/language/expressions/object/method-definition/async-meth-dflt-params-arg-val-undefined.js","description":" Use of initializer when argument value is `undefined` (async method)\r","esid":" sec-async-function-definitions\r","features":["default-parameters","async-functions\r"],"flags":["generated","async\r"],"info":" |\r14.6 Async Function Definitions\r\n\r\nAsyncMethod :\r\nasync PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n\r\n14.1.19 Runtime Semantics: IteratorBindingInitialization\r\n\r\nFormalsList : FormalsList , FormalParameter\r\n\r\n[...]\r\n23. Let iteratorRecord be Record {[[Iterator]]:\r\nCreateListIterator(argumentsList), [[Done]]: false}.\r\n24. If hasDuplicates is true, then\r\n[...]\r\n25. Else,\r\na. Perform ? IteratorBindingInitialization for formals with\r\niteratorRecord and env as arguments.\r\n[...]\r\n\r\n"},{"path":"./test262/test/language/expressions/object/method-definition/async-meth-dflt-params-ref-later.js","description":" Referencing a parameter that occurs later in the ParameterList (async method)\r","esid":" sec-async-function-definitions\r","features":["default-parameters","async-functions\r"],"flags":["generated","async\r"],"info":" |\r14.6 Async Function Definitions\r\n\r\nAsyncMethod :\r\nasync PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n\r\n14.1.19 Runtime Semantics: IteratorBindingInitialization\r\n\r\nFormalsList : FormalsList , FormalParameter\r\n\r\n1. Let status be the result of performing IteratorBindingInitialization for\r\nFormalsList using iteratorRecord and environment as the arguments.\r\n2. ReturnIfAbrupt(status).\r\n3. Return the result of performing IteratorBindingInitialization for\r\nFormalParameter using iteratorRecord and environment as the arguments.\r\n\r\n"},{"path":"./test262/test/language/expressions/object/method-definition/async-meth-dflt-params-ref-prior.js","description":" Referencing a parameter that occurs earlier in the ParameterList (async method)\r","esid":" sec-async-function-definitions\r","features":["default-parameters","async-functions\r"],"flags":["generated","async\r"],"info":" |\r14.6 Async Function Definitions\r\n\r\nAsyncMethod :\r\nasync PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n\r\n14.1.19 Runtime Semantics: IteratorBindingInitialization\r\n\r\nFormalsList : FormalsList , FormalParameter\r\n\r\n1. Let status be the result of performing IteratorBindingInitialization for\r\nFormalsList using iteratorRecord and environment as the arguments.\r\n2. ReturnIfAbrupt(status).\r\n3. Return the result of performing IteratorBindingInitialization for\r\nFormalParameter using iteratorRecord and environment as the arguments.\r\n\r\n"},{"path":"./test262/test/language/expressions/object/method-definition/async-meth-dflt-params-ref-self.js","description":" Referencing a parameter from within its own initializer (async method)\r","esid":" sec-async-function-definitions\r","features":["default-parameters","async-functions\r"],"flags":["generated","async\r"],"info":" |\r14.6 Async Function Definitions\r\n\r\nAsyncMethod :\r\nasync PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n\r\n14.1.19 Runtime Semantics: IteratorBindingInitialization\r\n\r\nFormalsList : FormalsList , FormalParameter\r\n\r\n1. Let status be the result of performing IteratorBindingInitialization for\r\nFormalsList using iteratorRecord and environment as the arguments.\r\n2. ReturnIfAbrupt(status).\r\n3. Return the result of performing IteratorBindingInitialization for\r\nFormalParameter using iteratorRecord and environment as the arguments.\r\n\r\n"},{"path":"./test262/test/language/expressions/object/method-definition/async-meth-dflt-params-trailing-comma.js","description":" A trailing comma should not increase the respective length, using default parameters (async method)\r","esid":" sec-async-function-definitions\r","features":["async-functions\r"],"flags":["generated","async\r"],"info":" |\r14.6 Async Function Definitions\r\n\r\nAsyncMethod :\r\nasync PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n\r\nTrailing comma in the parameters list\r\n\r\n14.1 Function Definitions\r\n\r\nFormalParameters[Yield, Await] : FormalParameterList[?Yield, ?Await] ,\r\n"},{"path":"./test262/test/language/expressions/object/method-definition/async-meth-escaped-async.js","esid":" sec-grammar-notation\r","description":" >\rThe `async` contextual keyword must not contain Unicode escape sequences.\r\n","info":" |\rTerminal symbols are shown\r\nin fixed width font, both in the productions of the grammars and throughout this\r\nspecification whenever the text directly refers to such a terminal symbol. These\r\nare to appear in a script exactly as written. All terminal symbol code points\r\nspecified in this way are to be understood as the appropriate Unicode code points\r\nfrom the Basic Latin range, as opposed to any similar-looking code points from\r\nother Unicode ranges.\r\n","negative":{"phase":"parse\r","type":"SyntaxError\r"},"features":["async-functions\r"]},{"path":"./test262/test/language/expressions/object/method-definition/async-meth-eval-var-scope-syntax-err.js","description":" sloppy direct eval in params introduces var (async method in sloppy code)\r","esid":" sec-async-function-definitions\r","features":["default-parameters","async-functions\r"],"flags":["generated","async","noStrict\r"],"info":" |\r14.6 Async Function Definitions\r\n\r\nAsyncMethod :\r\nasync PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n\r\n\nRuntime Semantics: IteratorBindingInitialization\r\nFormalParameter : BindingElement\r\n\r\n1. Return the result of performing IteratorBindingInitialization for BindingElement with arguments iteratorRecord and environment.\r\n\r\n"},{"path":"./test262/test/language/expressions/object/method-definition/async-meth-params-trailing-comma-multiple.js","description":" A trailing comma should not increase the respective length, using multiple parameters (async method)\r","esid":" sec-async-function-definitions\r","features":["async-functions\r"],"flags":["generated","async\r"],"info":" |\r14.6 Async Function Definitions\r\n\r\nAsyncMethod :\r\nasync PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n\r\nTrailing comma in the parameters list\r\n\r\n14.1 Function Definitions\r\n\r\nFormalParameters[Yield, Await] : FormalParameterList[?Yield, ?Await] ,\r\n"},{"path":"./test262/test/language/expressions/object/method-definition/async-meth-params-trailing-comma-single.js","description":" A trailing comma should not increase the respective length, using a single parameter (async method)\r","esid":" sec-async-function-definitions\r","features":["async-functions\r"],"flags":["generated","async\r"],"info":" |\r14.6 Async Function Definitions\r\n\r\nAsyncMethod :\r\nasync PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n\r\nTrailing comma in the parameters list\r\n\r\n14.1 Function Definitions\r\n\r\nFormalParameters[Yield, Await] : FormalParameterList[?Yield, ?Await] ,\r\n"},{"path":"./test262/test/language/expressions/object/method-definition/async-returns-async-arrow-returns-arguments-from-parent-function.js","description":" Async function returns an async function. (Async method)\r","esid":" prod-AsyncMethod\r","features":["async-functions\r"],"flags":["generated","async\r"],"info":" |\rAsync Function Definitions\r\n\r\nAsyncMethod :\r\nasync [no LineTerminator here] PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n"},{"path":"./test262/test/language/expressions/object/method-definition/async-returns-async-arrow-returns-newtarget.js","description":" Async function returns an async function. (Async method)\r","esid":" prod-AsyncMethod\r","features":["async-functions\r"],"flags":["generated","async\r"],"info":" |\rAsync Function Definitions\r\n\r\nAsyncMethod :\r\nasync [no LineTerminator here] PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n"},{"path":"./test262/test/language/expressions/object/method-definition/async-returns-async-arrow.js","description":" Async function returns an async function. (Async method)\r","esid":" prod-AsyncMethod\r","features":["async-functions\r"],"flags":["generated","async\r"],"info":" |\rAsync Function Definitions\r\n\r\nAsyncMethod :\r\nasync [no LineTerminator here] PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n"},{"path":"./test262/test/language/expressions/object/method-definition/async-returns-async-function-returns-arguments-from-own-function.js","description":" Async function returns an async function. (Async method)\r","esid":" prod-AsyncMethod\r","features":["async-functions\r"],"flags":["generated","async\r"],"info":" |\rAsync Function Definitions\r\n\r\nAsyncMethod :\r\nasync [no LineTerminator here] PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n"},{"path":"./test262/test/language/expressions/object/method-definition/async-returns-async-function-returns-newtarget.js","description":" Async function returns an async function. (Async method)\r","esid":" prod-AsyncMethod\r","features":["async-functions\r"],"flags":["generated","async\r"],"info":" |\rAsync Function Definitions\r\n\r\nAsyncMethod :\r\nasync [no LineTerminator here] PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n"},{"path":"./test262/test/language/expressions/object/method-definition/async-returns-async-function.js","description":" Async function returns an async function. (Async method)\r","esid":" prod-AsyncMethod\r","features":["async-functions\r"],"flags":["generated","async\r"],"info":" |\rAsync Function Definitions\r\n\r\nAsyncMethod :\r\nasync [no LineTerminator here] PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n"},{"path":"./test262/test/language/expressions/object/method-definition/async-super-call-body.js","author":" Brian Terlson <brian.terlson@microsoft.com>\r","esid":" pending\r","description":" >\rSuper calls work in body of async methods\r\n","flags":["async\r"]},{"path":"./test262/test/language/expressions/object/method-definition/early-errors-object-async-method-duplicate-parameters.js","author":" Brian Terlson <brian.terlson@microsoft.com>\r","esid":" sec-async-function-definitions\r","description":" Formal parameters may not contain duplicates\r","info":" |\r# 14.7 Async Function Definitions\r\n\r\nAsyncMethod[Yield, Await]:\r\nasync[no LineTerminator here]PropertyName[?Yield, ?Await](UniqueFormalParameters[~Yield, +Await]){AsyncFunctionBody}\r\n\r\n# 14.1.2 Static Semantics: Early Errors\r\n\r\nUniqueFormalParameters:FormalParameters\r\n\r\n- It is a Syntax Error if BoundNames of FormalParameters contains any\r\nduplicate elements.\r\n","negative":{"phase":"parse\r","type":"SyntaxError\r"}},{"path":"./test262/test/language/expressions/object/method-definition/early-errors-object-method-arguments-in-formal-parameters.js","author":" Brian Terlson <brian.terlson@microsoft.com>\r","esid":" pending\r","description":" It is a SyntaxError if FormalParameters contains arguments\r","negative":{"phase":"parse\r","type":"SyntaxError\r"},"flags":["onlyStrict\r"]},{"path":"./test262/test/language/expressions/object/method-definition/early-errors-object-method-eval-in-formal-parameters.js","author":" Brian Terlson <brian.terlson@microsoft.com>\r","esid":" pending\r","description":" It is a SyntaxError if FormalParameters contains eval in strict mode\r","negative":{"phase":"parse\r","type":"SyntaxError\r"},"flags":["onlyStrict\r"]},{"path":"./test262/test/language/expressions/object/method-definition/forbidden-ext/b1/async-meth-forbidden-ext-direct-access-prop-arguments.js","description":" Forbidden extension, f.arguments (async method)\r","esid":" sec-async-function-definitions\r","features":["arrow-function","async-functions\r"],"flags":["generated","noStrict","async\r"],"info":" |\rAsyncMethod :\r\nasync PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n\r\nECMAScript function objects defined using syntactic constructors in strict mode code must\r\nnot be created with own properties named \"caller\" or \"arguments\". Such own properties also\r\nmust not be created for function objects defined using an ArrowFunction, MethodDefinition,\r\nGeneratorDeclaration, GeneratorExpression, AsyncGeneratorDeclaration, AsyncGeneratorExpression,\r\nClassDeclaration, ClassExpression, AsyncFunctionDeclaration, AsyncFunctionExpression, or\r\nAsyncArrowFunction regardless of whether the definition is contained in strict mode code.\r\nBuilt-in functions, strict functions created using the Function constructor, generator functions\r\ncreated using the Generator constructor, async functions created using the AsyncFunction\r\nconstructor, and functions created using the bind method also must not be created with such own\r\nproperties.\r\n\r\n"},{"path":"./test262/test/language/expressions/object/method-definition/forbidden-ext/b1/async-meth-forbidden-ext-direct-access-prop-caller.js","description":" Forbidden extension, o.caller (async method)\r","esid":" sec-async-function-definitions\r","features":["arrow-function","async-functions\r"],"flags":["generated","noStrict","async\r"],"info":" |\rAsyncMethod :\r\nasync PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n\r\nECMAScript function objects defined using syntactic constructors in strict mode code must\r\nnot be created with own properties named \"caller\" or \"arguments\". Such own properties also\r\nmust not be created for function objects defined using an ArrowFunction, MethodDefinition,\r\nGeneratorDeclaration, GeneratorExpression, AsyncGeneratorDeclaration, AsyncGeneratorExpression,\r\nClassDeclaration, ClassExpression, AsyncFunctionDeclaration, AsyncFunctionExpression, or\r\nAsyncArrowFunction regardless of whether the definition is contained in strict mode code.\r\nBuilt-in functions, strict functions created using the Function constructor, generator functions\r\ncreated using the Generator constructor, async functions created using the AsyncFunction\r\nconstructor, and functions created using the bind method also must not be created with such own\r\nproperties.\r\n\r\n"},{"path":"./test262/test/language/expressions/object/method-definition/forbidden-ext/b2/async-meth-forbidden-ext-indirect-access-own-prop-caller-get.js","description":" Forbidden extension, o.caller (async method)\r","esid":" sec-async-definitions\r","features":["arrow-function","async-functions\r"],"flags":["generated","noStrict","async\r"],"info":" |\rAsyncMethod :\r\nasync PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n\r\nIf an implementation extends any function object with an own property named \"caller\" the value of\r\nthat property, as observed using [[Get]] or [[GetOwnProperty]], must not be a strict function\r\nobject. If it is an accessor property, the function that is the value of the property's [[Get]]\r\nattribute must never return a strict function when called.\r\n\r\n"},{"path":"./test262/test/language/expressions/object/method-definition/forbidden-ext/b2/async-meth-forbidden-ext-indirect-access-own-prop-caller-value.js","description":" Forbidden extension, o.caller (async method)\r","esid":" sec-async-definitions\r","features":["arrow-function","async-functions\r"],"flags":["generated","noStrict","async\r"],"info":" |\rAsyncMethod :\r\nasync PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n\r\nIf an implementation extends any function object with an own property named \"caller\" the value of\r\nthat property, as observed using [[Get]] or [[GetOwnProperty]], must not be a strict function\r\nobject. If it is an accessor property, the function that is the value of the property's [[Get]]\r\nattribute must never return a strict function when called.\r\n\r\n"},{"path":"./test262/test/language/expressions/object/method-definition/forbidden-ext/b2/async-meth-forbidden-ext-indirect-access-prop-caller.js","description":" Forbidden extension, o.caller (async method)\r","esid":" sec-async-definitions\r","features":["arrow-function","async-functions\r"],"flags":["generated","noStrict","async\r"],"info":" |\rAsyncMethod :\r\nasync PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n\r\nIf an implementation extends any function object with an own property named \"caller\" the value of\r\nthat property, as observed using [[Get]] or [[GetOwnProperty]], must not be a strict function\r\nobject. If it is an accessor property, the function that is the value of the property's [[Get]]\r\nattribute must never return a strict function when called.\r\n\r\n"},{"path":"./test262/test/language/expressions/object/method-definition/object-method-returns-promise.js","author":" Brian Terlson <brian.terlson@microsoft.com>\r","esid":" pending\r","description":" >\rAsync function method definitions return promises\r\n"},{"path":"./test262/test/language/expressions/object/prop-def-invalid-async-prefix.js","description":" >\rasync is not a valid prefix of an identifier reference\r\n","esid":" sec-object-initializer\r","info":" |\rPropertyDefinition:\r\nIdentifierReference\r\nCoverInitializedName\r\nPropertyName : AssignmentExpression\r\nMethodDefinition\r\n\r\nMethodDefinition:\r\nPropertyName ( UniqueFormalParameters ) { FunctionBody }\r\nAsyncMethod\r\n\r\nAsyncMethod:\r\nasync [no LineTerminator here] PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\nVariableDeclaration : BindingPattern Initializer\r\n\r\n1. Let rhs be the result of evaluating Initializer.\r\n2. Let rval be GetValue(rhs).\r\n3. ReturnIfAbrupt(rval).\r\n4. Return the result of performing BindingInitialization for\r\nBindingPattern passing rval and undefined as arguments.\r\n","negative":{"phase":"parse\r","type":"SyntaxError\r"}},{"path":"./test262/test/language/module-code/early-dup-top-function-async.js","esid":" sec-module-semantics-static-semantics-early-errors\r","description":" >\rIt is a Syntax Error if the LexicallyDeclaredNames of ModuleItemList\r\ncontains any duplicate entries.\r\nAt the top level of a Module, function declarations are treated like\r\nlexical declarations rather than like var declarations.\r\n","flags":["module\r"],"negative":{"phase":"parse\r","type":"SyntaxError\r"}},{"path":"./test262/test/language/statements/async-function/cptn-decl.js","esid":" sec-async-function-definitions-runtime-semantics-evaluation\r","description":" Async function declaration completion value is empty.\r","info":" |\rAsyncFunctionDeclaration : async [no LineTerminator here] function BindingIdentifier ( FormalParameters ) { AsyncFunctionBody }\r\n\r\n1. Return NormalCompletion(empty).\r\n"},{"path":"./test262/test/language/statements/async-function/declaration-returns-promise.js","author":" Brian Terlson <brian.terlson@microsoft.com>\r","esid":" pending\r","description":" >\rAsync functions return promises\r\n"},{"path":"./test262/test/language/statements/async-function/dflt-params-abrupt.js","description":" Abrupt completion returned by evaluation of initializer (async function declaration)\r","esid":" sec-async-function-definitions\r","features":["default-parameters","async-functions\r"],"flags":["generated","async\r"],"info":" |\r14.6 Async Function Definitions\r\n\r\nAsyncFunctionDeclaration :\r\nasync function BindingIdentifier ( FormalParameters ) { AsyncFunctionBody }\r\n\r\n\r\n14.1.19 Runtime Semantics: IteratorBindingInitialization\r\n\r\nFormalsList : FormalsList , FormalParameter\r\n\r\n1. Let status be the result of performing IteratorBindingInitialization for\r\nFormalsList using iteratorRecord and environment as the arguments.\r\n2. ReturnIfAbrupt(status).\r\n3. Return the result of performing IteratorBindingInitialization for\r\nFormalParameter using iteratorRecord and environment as the arguments.\r\n\r\n"},{"path":"./test262/test/language/statements/async-function/dflt-params-arg-val-not-undefined.js","description":" Use of initializer when argument value is not `undefined` (async function declaration)\r","esid":" sec-async-function-definitions\r","features":["default-parameters","async-functions\r"],"flags":["generated","async\r"],"info":" |\r14.6 Async Function Definitions\r\n\r\nAsyncFunctionDeclaration :\r\nasync function BindingIdentifier ( FormalParameters ) { AsyncFunctionBody }\r\n\r\n\r\n14.1.19 Runtime Semantics: IteratorBindingInitialization\r\n\r\nFormalsList : FormalsList , FormalParameter\r\n\r\n[...]\r\n23. Let iteratorRecord be Record {[[Iterator]]:\r\nCreateListIterator(argumentsList), [[Done]]: false}.\r\n24. If hasDuplicates is true, then\r\n[...]\r\n25. Else,\r\na. Perform ? IteratorBindingInitialization for formals with\r\niteratorRecord and env as arguments.\r\n[...]\r\n\r\n"},{"path":"./test262/test/language/statements/async-function/dflt-params-arg-val-undefined.js","description":" Use of initializer when argument value is `undefined` (async function declaration)\r","esid":" sec-async-function-definitions\r","features":["default-parameters","async-functions\r"],"flags":["generated","async\r"],"info":" |\r14.6 Async Function Definitions\r\n\r\nAsyncFunctionDeclaration :\r\nasync function BindingIdentifier ( FormalParameters ) { AsyncFunctionBody }\r\n\r\n\r\n14.1.19 Runtime Semantics: IteratorBindingInitialization\r\n\r\nFormalsList : FormalsList , FormalParameter\r\n\r\n[...]\r\n23. Let iteratorRecord be Record {[[Iterator]]:\r\nCreateListIterator(argumentsList), [[Done]]: false}.\r\n24. If hasDuplicates is true, then\r\n[...]\r\n25. Else,\r\na. Perform ? IteratorBindingInitialization for formals with\r\niteratorRecord and env as arguments.\r\n[...]\r\n\r\n"},{"path":"./test262/test/language/statements/async-function/dflt-params-duplicates.js","description":" It is a Syntax Error if BoundNames of FormalParameters contains any duplicate elements. (async function declaration)\r","esid":" sec-async-function-definitions\r","features":["default-parameters","async-functions\r"],"flags":["generated\r"],"negative":{"phase":"parse\r","type":"SyntaxError\r"},"info":" |\r14.6 Async Function Definitions\r\n\r\nAsyncFunctionDeclaration :\r\nasync function BindingIdentifier ( FormalParameters ) { AsyncFunctionBody }\r\n\r\n\r\n14.1.2 Static Semantics: Early Errors\r\n\r\nStrictFormalParameters : FormalParameters\r\n\r\n- It is a Syntax Error if BoundNames of FormalParameters contains any\r\nduplicate elements.\r\n\r\nFormalParameters : FormalParameterList\r\n\r\n- It is a Syntax Error if IsSimpleParameterList of FormalParameterList is\r\nfalse and BoundNames of FormalParameterList contains any duplicate\r\nelements.\r\n\r\n"},{"path":"./test262/test/language/statements/async-function/dflt-params-ref-later.js","description":" Referencing a parameter that occurs later in the ParameterList (async function declaration)\r","esid":" sec-async-function-definitions\r","features":["default-parameters","async-functions\r"],"flags":["generated","async\r"],"info":" |\r14.6 Async Function Definitions\r\n\r\nAsyncFunctionDeclaration :\r\nasync function BindingIdentifier ( FormalParameters ) { AsyncFunctionBody }\r\n\r\n\r\n14.1.19 Runtime Semantics: IteratorBindingInitialization\r\n\r\nFormalsList : FormalsList , FormalParameter\r\n\r\n1. Let status be the result of performing IteratorBindingInitialization for\r\nFormalsList using iteratorRecord and environment as the arguments.\r\n2. ReturnIfAbrupt(status).\r\n3. Return the result of performing IteratorBindingInitialization for\r\nFormalParameter using iteratorRecord and environment as the arguments.\r\n\r\n"},{"path":"./test262/test/language/statements/async-function/dflt-params-ref-prior.js","description":" Referencing a parameter that occurs earlier in the ParameterList (async function declaration)\r","esid":" sec-async-function-definitions\r","features":["default-parameters","async-functions\r"],"flags":["generated","async\r"],"info":" |\r14.6 Async Function Definitions\r\n\r\nAsyncFunctionDeclaration :\r\nasync function BindingIdentifier ( FormalParameters ) { AsyncFunctionBody }\r\n\r\n\r\n14.1.19 Runtime Semantics: IteratorBindingInitialization\r\n\r\nFormalsList : FormalsList , FormalParameter\r\n\r\n1. Let status be the result of performing IteratorBindingInitialization for\r\nFormalsList using iteratorRecord and environment as the arguments.\r\n2. ReturnIfAbrupt(status).\r\n3. Return the result of performing IteratorBindingInitialization for\r\nFormalParameter using iteratorRecord and environment as the arguments.\r\n\r\n"},{"path":"./test262/test/language/statements/async-function/dflt-params-ref-self.js","description":" Referencing a parameter from within its own initializer (async function declaration)\r","esid":" sec-async-function-definitions\r","features":["default-parameters","async-functions\r"],"flags":["generated","async\r"],"info":" |\r14.6 Async Function Definitions\r\n\r\nAsyncFunctionDeclaration :\r\nasync function BindingIdentifier ( FormalParameters ) { AsyncFunctionBody }\r\n\r\n\r\n14.1.19 Runtime Semantics: IteratorBindingInitialization\r\n\r\nFormalsList : FormalsList , FormalParameter\r\n\r\n1. Let status be the result of performing IteratorBindingInitialization for\r\nFormalsList using iteratorRecord and environment as the arguments.\r\n2. ReturnIfAbrupt(status).\r\n3. Return the result of performing IteratorBindingInitialization for\r\nFormalParameter using iteratorRecord and environment as the arguments.\r\n\r\n"},{"path":"./test262/test/language/statements/async-function/dflt-params-trailing-comma.js","description":" A trailing comma should not increase the respective length, using default parameters (async function declaration)\r","esid":" sec-async-function-definitions\r","features":["async-functions\r"],"flags":["generated","async\r"],"info":" |\r14.6 Async Function Definitions\r\n\r\nAsyncFunctionDeclaration :\r\nasync function BindingIdentifier ( FormalParameters ) { AsyncFunctionBody }\r\n\r\n\r\nTrailing comma in the parameters list\r\n\r\n14.1 Function Definitions\r\n\r\nFormalParameters[Yield, Await] : FormalParameterList[?Yield, ?Await] ,\r\n"},{"path":"./test262/test/language/statements/async-function/early-errors-declaration-arguments-in-formal-parameters.js","author":" Brian Terlson <brian.terlson@microsoft.com>\r","esid":" pending\r","description":" It is a SyntaxError if FormalParameters contains arguments in strict mode\r","negative":{"phase":"parse\r","type":"SyntaxError\r"},"flags":["onlyStrict\r"]},{"path":"./test262/test/language/statements/async-function/early-errors-declaration-binding-identifier-arguments.js","author":" Brian Terlson <brian.terlson@microsoft.com>\r","esid":" pending\r","description":" >\rIf the source code matching this production is strict code, it is a Syntax Error if BindingIdentifier is the IdentifierName arguments.\r\n","negative":{"phase":"parse\r","type":"SyntaxError\r"},"flags":["onlyStrict\r"]},{"path":"./test262/test/language/statements/async-function/early-errors-declaration-binding-identifier-eval.js","author":" Brian Terlson <brian.terlson@microsoft.com>\r","esid":" pending\r","description":" >\rIf the source code matching this production is strict code, it is a Syntax Error if BindingIdentifier is the IdentifierName eval.\r\n","negative":{"phase":"parse\r","type":"SyntaxError\r"},"flags":["onlyStrict\r"]},{"path":"./test262/test/language/statements/async-function/early-errors-declaration-body-contains-super-property.js","author":" Brian Terlson <brian.terlson@microsoft.com>\r","esid":" pending\r","description":" It is a syntax error if AsyncFunctionBody contains SuperProperty is true\r","negative":{"phase":"parse\r","type":"SyntaxError\r"}},{"path":"./test262/test/language/statements/async-function/early-errors-declaration-duplicate-parameters.js","author":" Brian Terlson <brian.terlson@microsoft.com>\r","esid":" pending\r","description":" >\rIf strict mode, early error rules for StrictFormalParameters are applied\r\n","negative":{"phase":"parse\r","type":"SyntaxError\r"},"flags":["onlyStrict\r"]},{"path":"./test262/test/language/statements/async-function/early-errors-declaration-eval-in-formal-parameters.js","author":" Brian Terlson <brian.terlson@microsoft.com>\r","esid":" pending\r","description":" It is a SyntaxError if FormalParameters contains eval in strict mode\r","negative":{"phase":"parse\r","type":"SyntaxError\r"},"flags":["onlyStrict\r"]},{"path":"./test262/test/language/statements/async-function/early-errors-declaration-formals-body-duplicate.js","author":" Brian Terlson <brian.terlson@microsoft.com>\r","esid":" pending\r","description":" It is a SyntaxError if BoundNames of FormalParameters also occurs in the LexicallyDeclaredNames of AsyncFunctionBody\r","negative":{"phase":"parse\r","type":"SyntaxError\r"}},{"path":"./test262/test/language/statements/async-function/escaped-async.js","esid":" sec-grammar-notation\r","description":" >\rThe `async` contextual keyword must not contain Unicode escape sequences.\r\n","info":" |\rTerminal symbols are shown\r\nin fixed width font, both in the productions of the grammars and throughout this\r\nspecification whenever the text directly refers to such a terminal symbol. These\r\nare to appear in a script exactly as written. All terminal symbol code points\r\nspecified in this way are to be understood as the appropriate Unicode code points\r\nfrom the Basic Latin range, as opposed to any similar-looking code points from\r\nother Unicode ranges.\r\n","negative":{"phase":"parse\r","type":"SyntaxError\r"},"features":["async-functions\r"]},{"path":"./test262/test/language/statements/async-function/eval-var-scope-syntax-err.js","description":" sloppy direct eval in params introduces var (async function declaration in sloppy code)\r","esid":" sec-async-function-definitions\r","features":["default-parameters","async-functions\r"],"flags":["generated","async","noStrict\r"],"info":" |\r14.6 Async Function Definitions\r\n\r\nAsyncFunctionDeclaration :\r\nasync function BindingIdentifier ( FormalParameters ) { AsyncFunctionBody }\r\n\r\n\r\n\nRuntime Semantics: IteratorBindingInitialization\r\nFormalParameter : BindingElement\r\n\r\n1. Return the result of performing IteratorBindingInitialization for BindingElement with arguments iteratorRecord and environment.\r\n\r\n"},{"path":"./test262/test/language/statements/async-function/evaluation-body-that-returns-after-await.js","author":" Brian Terlson <brian.terlson@microsoft.com>\r","esid":" pending\r","description":" >\rThe return value of the async function resolves the promise\r\n","flags":["async\r"]},{"path":"./test262/test/language/statements/async-function/evaluation-body-that-returns.js","author":" Brian Terlson <brian.terlson@microsoft.com>\r","esid":" pending\r","description":" >\rThe return value of the async function resolves the promise\r\n","flags":["async\r"]},{"path":"./test262/test/language/statements/async-function/evaluation-body-that-throws-after-await.js","author":" Brian Terlson <brian.terlson@microsoft.com>\r","esid":" pending\r","description":" >\rErrors thrown from the async function body reject the returned promise\r\n","flags":["async\r"]},{"path":"./test262/test/language/statements/async-function/evaluation-body-that-throws.js","author":" Brian Terlson <brian.terlson@microsoft.com>\r","esid":" pending\r","description":" >\rErrors thrown from the async function body reject the returned promise\r\n","flags":["async\r"]},{"path":"./test262/test/language/statements/async-function/evaluation-body.js","author":" brian terlson <brian.terlson@microsoft.com>\r","esid":" pending\r","description":" >\rasync function bodies are executed immediately (unlike generators)\r\n"},{"path":"./test262/test/language/statements/async-function/evaluation-default-that-throws.js","author":" Brian Terlson <brian.terlson@microsoft.com>\r","esid":" pending\r","description":" >\rIf a default expression throws, the promise is rejected.\r\n","info":" |\rThis is different from generators which will throw the error out of the generator\r\nwhen it is called.\r\n","flags":["async\r"]},{"path":"./test262/test/language/statements/async-function/evaluation-mapped-arguments.js","author":" Brian Terlson <brian.terlson@microsoft.com>\r","esid":" pending\r","description":" >\rMapped arguments object is used when the async function has a\r\nsimple parameter list.\r\n","flags":["noStrict","async\r"]},{"path":"./test262/test/language/statements/async-function/evaluation-this-value-global.js","author":" Brian Terlson <brian.terlson@microsoft.com>\r","esid":" pending\r","description":" >\rThe this value is set to the global object when not passed in sloppy mode.\r\n","flags":["noStrict","async\r"]},{"path":"./test262/test/language/statements/async-function/evaluation-this-value-passed.js","author":" Brian Terlson <brian.terlson@microsoft.com>\r","esid":" pending\r","description":" >\rThe this value from the caller is present in the async function body\r\n","flags":["async\r"]},{"path":"./test262/test/language/statements/async-function/evaluation-unmapped-arguments.js","author":" Brian Terlson <brian.terlson@microsoft.com>\r","esid":" pending\r","description":" >\rUnmapped arguments object is used when the async function doesn't have a\r\nsimple parameter list.\r\n","flags":["async\r"]},{"path":"./test262/test/language/statements/async-function/forbidden-ext/b1/async-func-decl-forbidden-ext-direct-access-prop-arguments.js","description":" Forbidden extension, f.arguments (async function declaration)\r","esid":" sec-async-function-definitions\r","features":["arrow-function","async-functions\r"],"flags":["generated","noStrict","async\r"],"info":" |\rAsyncFunctionDeclaration :\r\nasync function BindingIdentifier ( FormalParameters ) { AsyncFunctionBody }\r\n\r\n\r\nECMAScript function objects defined using syntactic constructors in strict mode code must\r\nnot be created with own properties named \"caller\" or \"arguments\". Such own properties also\r\nmust not be created for function objects defined using an ArrowFunction, MethodDefinition,\r\nGeneratorDeclaration, GeneratorExpression, AsyncGeneratorDeclaration, AsyncGeneratorExpression,\r\nClassDeclaration, ClassExpression, AsyncFunctionDeclaration, AsyncFunctionExpression, or\r\nAsyncArrowFunction regardless of whether the definition is contained in strict mode code.\r\nBuilt-in functions, strict functions created using the Function constructor, generator functions\r\ncreated using the Generator constructor, async functions created using the AsyncFunction\r\nconstructor, and functions created using the bind method also must not be created with such own\r\nproperties.\r\n\r\n"},{"path":"./test262/test/language/statements/async-function/forbidden-ext/b1/async-func-decl-forbidden-ext-direct-access-prop-caller.js","description":" Forbidden extension, o.caller (async function declaration)\r","esid":" sec-async-function-definitions\r","features":["arrow-function","async-functions\r"],"flags":["generated","noStrict","async\r"],"info":" |\rAsyncFunctionDeclaration :\r\nasync function BindingIdentifier ( FormalParameters ) { AsyncFunctionBody }\r\n\r\n\r\nECMAScript function objects defined using syntactic constructors in strict mode code must\r\nnot be created with own properties named \"caller\" or \"arguments\". Such own properties also\r\nmust not be created for function objects defined using an ArrowFunction, MethodDefinition,\r\nGeneratorDeclaration, GeneratorExpression, AsyncGeneratorDeclaration, AsyncGeneratorExpression,\r\nClassDeclaration, ClassExpression, AsyncFunctionDeclaration, AsyncFunctionExpression, or\r\nAsyncArrowFunction regardless of whether the definition is contained in strict mode code.\r\nBuilt-in functions, strict functions created using the Function constructor, generator functions\r\ncreated using the Generator constructor, async functions created using the AsyncFunction\r\nconstructor, and functions created using the bind method also must not be created with such own\r\nproperties.\r\n\r\n"},{"path":"./test262/test/language/statements/async-function/forbidden-ext/b2/async-func-decl-forbidden-ext-indirect-access-own-prop-caller-get.js","description":" Forbidden extension, o.caller (async function declaration)\r","esid":" sec-async-definitions\r","features":["arrow-function","async-functions\r"],"flags":["generated","noStrict","async\r"],"info":" |\rAsyncFunctionDeclaration :\r\nasync function BindingIdentifier ( FormalParameters ) { AsyncFunctionBody }\r\n\r\n\r\nIf an implementation extends any function object with an own property named \"caller\" the value of\r\nthat property, as observed using [[Get]] or [[GetOwnProperty]], must not be a strict function\r\nobject. If it is an accessor property, the function that is the value of the property's [[Get]]\r\nattribute must never return a strict function when called.\r\n\r\n"},{"path":"./test262/test/language/statements/async-function/forbidden-ext/b2/async-func-decl-forbidden-ext-indirect-access-own-prop-caller-value.js","description":" Forbidden extension, o.caller (async function declaration)\r","esid":" sec-async-definitions\r","features":["arrow-function","async-functions\r"],"flags":["generated","noStrict","async\r"],"info":" |\rAsyncFunctionDeclaration :\r\nasync function BindingIdentifier ( FormalParameters ) { AsyncFunctionBody }\r\n\r\n\r\nIf an implementation extends any function object with an own property named \"caller\" the value of\r\nthat property, as observed using [[Get]] or [[GetOwnProperty]], must not be a strict function\r\nobject. If it is an accessor property, the function that is the value of the property's [[Get]]\r\nattribute must never return a strict function when called.\r\n\r\n"},{"path":"./test262/test/language/statements/async-function/forbidden-ext/b2/async-func-decl-forbidden-ext-indirect-access-prop-caller.js","description":" Forbidden extension, o.caller (async function declaration)\r","esid":" sec-async-definitions\r","features":["arrow-function","async-functions\r"],"flags":["generated","noStrict","async\r"],"info":" |\rAsyncFunctionDeclaration :\r\nasync function BindingIdentifier ( FormalParameters ) { AsyncFunctionBody }\r\n\r\n\r\nIf an implementation extends any function object with an own property named \"caller\" the value of\r\nthat property, as observed using [[Get]] or [[GetOwnProperty]], must not be a strict function\r\nobject. If it is an accessor property, the function that is the value of the property's [[Get]]\r\nattribute must never return a strict function when called.\r\n\r\n"},{"path":"./test262/test/language/statements/async-function/params-trailing-comma-multiple.js","description":" A trailing comma should not increase the respective length, using multiple parameters (async function declaration)\r","esid":" sec-async-function-definitions\r","features":["async-functions\r"],"flags":["generated","async\r"],"info":" |\r14.6 Async Function Definitions\r\n\r\nAsyncFunctionDeclaration :\r\nasync function BindingIdentifier ( FormalParameters ) { AsyncFunctionBody }\r\n\r\n\r\nTrailing comma in the parameters list\r\n\r\n14.1 Function Definitions\r\n\r\nFormalParameters[Yield, Await] : FormalParameterList[?Yield, ?Await] ,\r\n"},{"path":"./test262/test/language/statements/async-function/params-trailing-comma-single.js","description":" A trailing comma should not increase the respective length, using a single parameter (async function declaration)\r","esid":" sec-async-function-definitions\r","features":["async-functions\r"],"flags":["generated","async\r"],"info":" |\r14.6 Async Function Definitions\r\n\r\nAsyncFunctionDeclaration :\r\nasync function BindingIdentifier ( FormalParameters ) { AsyncFunctionBody }\r\n\r\n\r\nTrailing comma in the parameters list\r\n\r\n14.1 Function Definitions\r\n\r\nFormalParameters[Yield, Await] : FormalParameterList[?Yield, ?Await] ,\r\n"},{"path":"./test262/test/language/statements/async-function/returns-async-arrow-returns-arguments-from-parent-function.js","description":" Async function returns an async function. (Async function declaration)\r","esid":" prod-AsyncFunctionDeclaration\r","features":["async-functions\r"],"flags":["generated","async\r"],"info":" |\rAsync Function Definitions\r\n\r\nAsyncFunctionDeclaration:\r\nasync [no LineTerminator here] function BindingIdentifier ( FormalParameters ) { AsyncFunctionBody }\r\n\r\n"},{"path":"./test262/test/language/statements/async-function/returns-async-arrow-returns-newtarget.js","description":" Async function returns an async function. (Async function declaration)\r","esid":" prod-AsyncFunctionDeclaration\r","features":["async-functions\r"],"flags":["generated","async\r"],"info":" |\rAsync Function Definitions\r\n\r\nAsyncFunctionDeclaration:\r\nasync [no LineTerminator here] function BindingIdentifier ( FormalParameters ) { AsyncFunctionBody }\r\n\r\n"},{"path":"./test262/test/language/statements/async-function/returns-async-arrow.js","description":" Async function returns an async function. (Async function declaration)\r","esid":" prod-AsyncFunctionDeclaration\r","features":["async-functions\r"],"flags":["generated","async\r"],"info":" |\rAsync Function Definitions\r\n\r\nAsyncFunctionDeclaration:\r\nasync [no LineTerminator here] function BindingIdentifier ( FormalParameters ) { AsyncFunctionBody }\r\n\r\n"},{"path":"./test262/test/language/statements/async-function/returns-async-function-returns-arguments-from-own-function.js","description":" Async function returns an async function. (Async function declaration)\r","esid":" prod-AsyncFunctionDeclaration\r","features":["async-functions\r"],"flags":["generated","async\r"],"info":" |\rAsync Function Definitions\r\n\r\nAsyncFunctionDeclaration:\r\nasync [no LineTerminator here] function BindingIdentifier ( FormalParameters ) { AsyncFunctionBody }\r\n\r\n"},{"path":"./test262/test/language/statements/async-function/returns-async-function-returns-newtarget.js","description":" Async function returns an async function. (Async function declaration)\r","esid":" prod-AsyncFunctionDeclaration\r","features":["async-functions\r"],"flags":["generated","async\r"],"info":" |\rAsync Function Definitions\r\n\r\nAsyncFunctionDeclaration:\r\nasync [no LineTerminator here] function BindingIdentifier ( FormalParameters ) { AsyncFunctionBody }\r\n\r\n"},{"path":"./test262/test/language/statements/async-function/returns-async-function.js","description":" Async function returns an async function. (Async function declaration)\r","esid":" prod-AsyncFunctionDeclaration\r","features":["async-functions\r"],"flags":["generated","async\r"],"info":" |\rAsync Function Definitions\r\n\r\nAsyncFunctionDeclaration:\r\nasync [no LineTerminator here] function BindingIdentifier ( FormalParameters ) { AsyncFunctionBody }\r\n\r\n"},{"path":"./test262/test/language/statements/async-function/syntax-declaration-line-terminators-allowed.js","author":" Brian Terlson <brian.terlson@microsoft.com>\r","esid":" pending\r","description":" >\rDeclarations allow line breaks after function and after arguments list\r\n"},{"path":"./test262/test/language/statements/async-function/syntax-declaration-no-line-terminator.js","author":" Brian Terlson <brian.terlson@microsoft.com>\r","esid":" pending\r","description":" Async function declarations cannot have a line break after `async`\r","info":" Reference error is thrown due to looking up async in strict mode\r"},{"path":"./test262/test/language/statements/async-function/syntax-declaration.js","author":" Brian Terlson <brian.terlson@microsoft.com>\r","esid":" pending\r","description":" Async function declaration returns a promise\r","flags":["async\r"]},{"path":"./test262/test/language/statements/async-function/try-reject-finally-reject.js","author":" Caitlin Potter <caitp@igalia.com>\r","esid":" pending\r","description":" >\rImplementations must defer rejecting an async function's Promise until after\r\nall finally blocks have been evaluated.\r\n","flags":["async\r"]},{"path":"./test262/test/language/statements/async-function/try-reject-finally-return.js","author":" Caitlin Potter <caitp@igalia.com>\r","esid":" pending\r","description":" >\rImplementations must defer rejecting an async function's Promise until after\r\nall finally blocks have been evaluated.\r\n","flags":["async\r"]},{"path":"./test262/test/language/statements/async-function/try-reject-finally-throw.js","author":" Caitlin Potter <caitp@igalia.com>\r","esid":" pending\r","description":" >\rImplementations must defer rejecting an async function's Promise until after\r\nall finally blocks have been evaluated.\r\n","flags":["async\r"]},{"path":"./test262/test/language/statements/async-function/try-return-finally-reject.js","author":" Caitlin Potter <caitp@igalia.com>\r","esid":" pending\r","description":" >\rImplementations must defer resolving an async function's Promise until after\r\nall finally blocks have been evaluated.\r\n","flags":["async\r"]},{"path":"./test262/test/language/statements/async-function/try-return-finally-return.js","author":" Caitlin Potter <caitp@igalia.com>\r","esid":" pending\r","description":" >\rImplementations must defer resolving an async function's Promise until after\r\nall finally blocks have been evaluated.\r\n","flags":["async\r"]},{"path":"./test262/test/language/statements/async-function/try-return-finally-throw.js","author":" Caitlin Potter <caitp@igalia.com>\r","esid":" pending\r","description":" >\rImplementations must defer resolving an async function's Promise until after\r\nall finally blocks have been evaluated.\r\n","flags":["async\r"]},{"path":"./test262/test/language/statements/async-function/try-throw-finally-reject.js","author":" Caitlin Potter <caitp@igalia.com>\r","esid":" pending\r","description":" >\rImplementations must defer rejecting an async function's Promise until after\r\nall finally blocks have been evaluated.\r\n","flags":["async\r"]},{"path":"./test262/test/language/statements/async-function/try-throw-finally-return.js","author":" Caitlin Potter <caitp@igalia.com>\r","esid":" pending\r","description":" >\rImplementations must defer rejecting an async function's Promise until after\r\nall finally blocks have been evaluated.\r\n","flags":["async\r"]},{"path":"./test262/test/language/statements/async-function/try-throw-finally-throw.js","author":" Caitlin Potter <caitp@igalia.com>\r","esid":" pending\r","description":" >\rImplementations must defer rejecting an async function's Promise until after\r\nall finally blocks have been evaluated.\r\n","flags":["async\r"]},{"path":"./test262/test/language/statements/async-function/unscopables-with-in-nested-fn.js","description":" Symbol.unscopables behavior across scope boundaries (async function declaration)\r","esid":" sec-async-function-definitions\r","features":["globalThis","Symbol.unscopables","async-functions\r"],"flags":["generated","noStrict","async\r"],"info":" |\r14.6 Async Function Definitions\r\n\r\nAsyncFunctionDeclaration :\r\nasync function BindingIdentifier ( FormalParameters ) { AsyncFunctionBody }\r\n\r\n\r\n...\r\nLet envRec be lex's EnvironmentRecord.\r\nLet exists be ? envRec.HasBinding(name).\r\n\r\nHasBinding\r\n\r\n...\r\nIf the withEnvironment flag of envRec is false, return true.\r\nLet unscopables be ? Get(bindings, @@unscopables).\r\nIf Type(unscopables) is Object, then\r\nLet blocked be ToBoolean(? Get(unscopables, N)).\r\nIf blocked is true, return false.\r\n\r\n(The `with` Statement) Runtime Semantics: Evaluation\r\n\r\n...\r\nSet the withEnvironment flag of newEnv’s EnvironmentRecord to true.\r\n...\r\n\r\n"},{"path":"./test262/test/language/statements/async-function/unscopables-with.js","description":" Symbol.unscopables behavior across scope boundaries (async function declaration)\r","esid":" sec-async-function-definitions\r","features":["globalThis","Symbol.unscopables","async-functions\r"],"flags":["generated","noStrict","async\r"],"info":" |\r14.6 Async Function Definitions\r\n\r\nAsyncFunctionDeclaration :\r\nasync function BindingIdentifier ( FormalParameters ) { AsyncFunctionBody }\r\n\r\n\r\n...\r\nLet envRec be lex's EnvironmentRecord.\r\nLet exists be ? envRec.HasBinding(name).\r\n\r\nHasBinding\r\n\r\n...\r\nIf the withEnvironment flag of envRec is false, return true.\r\nLet unscopables be ? Get(bindings, @@unscopables).\r\nIf Type(unscopables) is Object, then\r\nLet blocked be ToBoolean(? Get(unscopables, N)).\r\nIf blocked is true, return false.\r\n\r\n(The `with` Statement) Runtime Semantics: Evaluation\r\n\r\n...\r\nSet the withEnvironment flag of newEnv’s EnvironmentRecord to true.\r\n...\r\n\r\n"},{"path":"./test262/test/language/statements/class/async-meth-escaped-async.js","esid":" sec-grammar-notation\r","description":" >\rThe `async` contextual keyword must not contain Unicode escape sequences.\r\n","info":" |\rTerminal symbols are shown\r\nin fixed width font, both in the productions of the grammars and throughout this\r\nspecification whenever the text directly refers to such a terminal symbol. These\r\nare to appear in a script exactly as written. All terminal symbol code points\r\nspecified in this way are to be understood as the appropriate Unicode code points\r\nfrom the Basic Latin range, as opposed to any similar-looking code points from\r\nother Unicode ranges.\r\n","negative":{"phase":"parse\r","type":"SyntaxError\r"},"features":["async-functions\r"]},{"path":"./test262/test/language/statements/class/async-method/dflt-params-abrupt.js","description":" Abrupt completion returned by evaluation of initializer (class declaration async method)\r","esid":" sec-class-definitions-runtime-semantics-evaluation\r","features":["default-parameters","async-functions\r"],"flags":["generated","async\r"],"info":" |\rClassDeclaration : class BindingIdentifier ClassTail\r\n\r\n1. Let className be StringValue of BindingIdentifier.\r\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\r\nargument className.\r\n[...]\r\n\r\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\r\n\r\n21. For each ClassElement m in order from methods\r\na. If IsStatic of m is false, then\r\ni. Let status be the result of performing\r\nPropertyDefinitionEvaluation for m with arguments proto and\r\nfalse.\r\n[...]\r\n\r\nRuntime Semantics: PropertyDefinitionEvaluation\r\n\r\nAsyncMethod : async PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n1. Let propKey be the result of evaluating PropertyName.\r\n2. ReturnIfAbrupt(propKey).\r\n3. If the function code for this AsyncMethod is strict mode code, let strict be true. Otherwise\r\nlet strict be false.\r\n4. Let scope be the LexicalEnvironment of the running execution context.\r\n5. Let closure be ! AsyncFunctionCreate(Method, UniqueFormalParameters, AsyncFunctionBody,\r\nscope, strict).\r\n[...]\r\n\r\n\r\n14.1.19 Runtime Semantics: IteratorBindingInitialization\r\n\r\nFormalsList : FormalsList , FormalParameter\r\n\r\n1. Let status be the result of performing IteratorBindingInitialization for\r\nFormalsList using iteratorRecord and environment as the arguments.\r\n2. ReturnIfAbrupt(status).\r\n3. Return the result of performing IteratorBindingInitialization for\r\nFormalParameter using iteratorRecord and environment as the arguments.\r\n\r\n"},{"path":"./test262/test/language/statements/class/async-method/dflt-params-arg-val-not-undefined.js","description":" Use of initializer when argument value is not `undefined` (class declaration async method)\r","esid":" sec-class-definitions-runtime-semantics-evaluation\r","features":["default-parameters","async-functions\r"],"flags":["generated","async\r"],"info":" |\rClassDeclaration : class BindingIdentifier ClassTail\r\n\r\n1. Let className be StringValue of BindingIdentifier.\r\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\r\nargument className.\r\n[...]\r\n\r\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\r\n\r\n21. For each ClassElement m in order from methods\r\na. If IsStatic of m is false, then\r\ni. Let status be the result of performing\r\nPropertyDefinitionEvaluation for m with arguments proto and\r\nfalse.\r\n[...]\r\n\r\nRuntime Semantics: PropertyDefinitionEvaluation\r\n\r\nAsyncMethod : async PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n1. Let propKey be the result of evaluating PropertyName.\r\n2. ReturnIfAbrupt(propKey).\r\n3. If the function code for this AsyncMethod is strict mode code, let strict be true. Otherwise\r\nlet strict be false.\r\n4. Let scope be the LexicalEnvironment of the running execution context.\r\n5. Let closure be ! AsyncFunctionCreate(Method, UniqueFormalParameters, AsyncFunctionBody,\r\nscope, strict).\r\n[...]\r\n\r\n\r\n14.1.19 Runtime Semantics: IteratorBindingInitialization\r\n\r\nFormalsList : FormalsList , FormalParameter\r\n\r\n[...]\r\n23. Let iteratorRecord be Record {[[Iterator]]:\r\nCreateListIterator(argumentsList), [[Done]]: false}.\r\n24. If hasDuplicates is true, then\r\n[...]\r\n25. Else,\r\na. Perform ? IteratorBindingInitialization for formals with\r\niteratorRecord and env as arguments.\r\n[...]\r\n\r\n"},{"path":"./test262/test/language/statements/class/async-method/dflt-params-arg-val-undefined.js","description":" Use of initializer when argument value is `undefined` (class declaration async method)\r","esid":" sec-class-definitions-runtime-semantics-evaluation\r","features":["default-parameters","async-functions\r"],"flags":["generated","async\r"],"info":" |\rClassDeclaration : class BindingIdentifier ClassTail\r\n\r\n1. Let className be StringValue of BindingIdentifier.\r\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\r\nargument className.\r\n[...]\r\n\r\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\r\n\r\n21. For each ClassElement m in order from methods\r\na. If IsStatic of m is false, then\r\ni. Let status be the result of performing\r\nPropertyDefinitionEvaluation for m with arguments proto and\r\nfalse.\r\n[...]\r\n\r\nRuntime Semantics: PropertyDefinitionEvaluation\r\n\r\nAsyncMethod : async PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n1. Let propKey be the result of evaluating PropertyName.\r\n2. ReturnIfAbrupt(propKey).\r\n3. If the function code for this AsyncMethod is strict mode code, let strict be true. Otherwise\r\nlet strict be false.\r\n4. Let scope be the LexicalEnvironment of the running execution context.\r\n5. Let closure be ! AsyncFunctionCreate(Method, UniqueFormalParameters, AsyncFunctionBody,\r\nscope, strict).\r\n[...]\r\n\r\n\r\n14.1.19 Runtime Semantics: IteratorBindingInitialization\r\n\r\nFormalsList : FormalsList , FormalParameter\r\n\r\n[...]\r\n23. Let iteratorRecord be Record {[[Iterator]]:\r\nCreateListIterator(argumentsList), [[Done]]: false}.\r\n24. If hasDuplicates is true, then\r\n[...]\r\n25. Else,\r\na. Perform ? IteratorBindingInitialization for formals with\r\niteratorRecord and env as arguments.\r\n[...]\r\n\r\n"},{"path":"./test262/test/language/statements/class/async-method/dflt-params-ref-later.js","description":" Referencing a parameter that occurs later in the ParameterList (class declaration async method)\r","esid":" sec-class-definitions-runtime-semantics-evaluation\r","features":["default-parameters","async-functions\r"],"flags":["generated","async\r"],"info":" |\rClassDeclaration : class BindingIdentifier ClassTail\r\n\r\n1. Let className be StringValue of BindingIdentifier.\r\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\r\nargument className.\r\n[...]\r\n\r\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\r\n\r\n21. For each ClassElement m in order from methods\r\na. If IsStatic of m is false, then\r\ni. Let status be the result of performing\r\nPropertyDefinitionEvaluation for m with arguments proto and\r\nfalse.\r\n[...]\r\n\r\nRuntime Semantics: PropertyDefinitionEvaluation\r\n\r\nAsyncMethod : async PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n1. Let propKey be the result of evaluating PropertyName.\r\n2. ReturnIfAbrupt(propKey).\r\n3. If the function code for this AsyncMethod is strict mode code, let strict be true. Otherwise\r\nlet strict be false.\r\n4. Let scope be the LexicalEnvironment of the running execution context.\r\n5. Let closure be ! AsyncFunctionCreate(Method, UniqueFormalParameters, AsyncFunctionBody,\r\nscope, strict).\r\n[...]\r\n\r\n\r\n14.1.19 Runtime Semantics: IteratorBindingInitialization\r\n\r\nFormalsList : FormalsList , FormalParameter\r\n\r\n1. Let status be the result of performing IteratorBindingInitialization for\r\nFormalsList using iteratorRecord and environment as the arguments.\r\n2. ReturnIfAbrupt(status).\r\n3. Return the result of performing IteratorBindingInitialization for\r\nFormalParameter using iteratorRecord and environment as the arguments.\r\n\r\n"},{"path":"./test262/test/language/statements/class/async-method/dflt-params-ref-prior.js","description":" Referencing a parameter that occurs earlier in the ParameterList (class declaration async method)\r","esid":" sec-class-definitions-runtime-semantics-evaluation\r","features":["default-parameters","async-functions\r"],"flags":["generated","async\r"],"info":" |\rClassDeclaration : class BindingIdentifier ClassTail\r\n\r\n1. Let className be StringValue of BindingIdentifier.\r\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\r\nargument className.\r\n[...]\r\n\r\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\r\n\r\n21. For each ClassElement m in order from methods\r\na. If IsStatic of m is false, then\r\ni. Let status be the result of performing\r\nPropertyDefinitionEvaluation for m with arguments proto and\r\nfalse.\r\n[...]\r\n\r\nRuntime Semantics: PropertyDefinitionEvaluation\r\n\r\nAsyncMethod : async PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n1. Let propKey be the result of evaluating PropertyName.\r\n2. ReturnIfAbrupt(propKey).\r\n3. If the function code for this AsyncMethod is strict mode code, let strict be true. Otherwise\r\nlet strict be false.\r\n4. Let scope be the LexicalEnvironment of the running execution context.\r\n5. Let closure be ! AsyncFunctionCreate(Method, UniqueFormalParameters, AsyncFunctionBody,\r\nscope, strict).\r\n[...]\r\n\r\n\r\n14.1.19 Runtime Semantics: IteratorBindingInitialization\r\n\r\nFormalsList : FormalsList , FormalParameter\r\n\r\n1. Let status be the result of performing IteratorBindingInitialization for\r\nFormalsList using iteratorRecord and environment as the arguments.\r\n2. ReturnIfAbrupt(status).\r\n3. Return the result of performing IteratorBindingInitialization for\r\nFormalParameter using iteratorRecord and environment as the arguments.\r\n\r\n"},{"path":"./test262/test/language/statements/class/async-method/dflt-params-ref-self.js","description":" Referencing a parameter from within its own initializer (class declaration async method)\r","esid":" sec-class-definitions-runtime-semantics-evaluation\r","features":["default-parameters","async-functions\r"],"flags":["generated","async\r"],"info":" |\rClassDeclaration : class BindingIdentifier ClassTail\r\n\r\n1. Let className be StringValue of BindingIdentifier.\r\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\r\nargument className.\r\n[...]\r\n\r\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\r\n\r\n21. For each ClassElement m in order from methods\r\na. If IsStatic of m is false, then\r\ni. Let status be the result of performing\r\nPropertyDefinitionEvaluation for m with arguments proto and\r\nfalse.\r\n[...]\r\n\r\nRuntime Semantics: PropertyDefinitionEvaluation\r\n\r\nAsyncMethod : async PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n1. Let propKey be the result of evaluating PropertyName.\r\n2. ReturnIfAbrupt(propKey).\r\n3. If the function code for this AsyncMethod is strict mode code, let strict be true. Otherwise\r\nlet strict be false.\r\n4. Let scope be the LexicalEnvironment of the running execution context.\r\n5. Let closure be ! AsyncFunctionCreate(Method, UniqueFormalParameters, AsyncFunctionBody,\r\nscope, strict).\r\n[...]\r\n\r\n\r\n14.1.19 Runtime Semantics: IteratorBindingInitialization\r\n\r\nFormalsList : FormalsList , FormalParameter\r\n\r\n1. Let status be the result of performing IteratorBindingInitialization for\r\nFormalsList using iteratorRecord and environment as the arguments.\r\n2. ReturnIfAbrupt(status).\r\n3. Return the result of performing IteratorBindingInitialization for\r\nFormalParameter using iteratorRecord and environment as the arguments.\r\n\r\n"},{"path":"./test262/test/language/statements/class/async-method/dflt-params-trailing-comma.js","description":" A trailing comma should not increase the respective length, using default parameters (class declaration async method)\r","esid":" sec-class-definitions-runtime-semantics-evaluation\r","features":["async-functions\r"],"flags":["generated","async\r"],"info":" |\rClassDeclaration : class BindingIdentifier ClassTail\r\n\r\n1. Let className be StringValue of BindingIdentifier.\r\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\r\nargument className.\r\n[...]\r\n\r\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\r\n\r\n21. For each ClassElement m in order from methods\r\na. If IsStatic of m is false, then\r\ni. Let status be the result of performing\r\nPropertyDefinitionEvaluation for m with arguments proto and\r\nfalse.\r\n[...]\r\n\r\nRuntime Semantics: PropertyDefinitionEvaluation\r\n\r\nAsyncMethod : async PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n1. Let propKey be the result of evaluating PropertyName.\r\n2. ReturnIfAbrupt(propKey).\r\n3. If the function code for this AsyncMethod is strict mode code, let strict be true. Otherwise\r\nlet strict be false.\r\n4. Let scope be the LexicalEnvironment of the running execution context.\r\n5. Let closure be ! AsyncFunctionCreate(Method, UniqueFormalParameters, AsyncFunctionBody,\r\nscope, strict).\r\n[...]\r\n\r\n\r\nTrailing comma in the parameters list\r\n\r\n14.1 Function Definitions\r\n\r\nFormalParameters[Yield, Await] : FormalParameterList[?Yield, ?Await] ,\r\n"},{"path":"./test262/test/language/statements/class/async-method/forbidden-ext/b1/cls-decl-async-meth-forbidden-ext-direct-access-prop-arguments.js","description":" Forbidden extension, f.arguments (class declaration async method)\r","esid":" sec-class-definitions-runtime-semantics-evaluation\r","features":["arrow-function","async-functions","class\r"],"flags":["generated","noStrict","async\r"],"info":" |\rClassDeclaration : class BindingIdentifier ClassTail\r\n\r\n\r\nECMAScript function objects defined using syntactic constructors in strict mode code must\r\nnot be created with own properties named \"caller\" or \"arguments\". Such own properties also\r\nmust not be created for function objects defined using an ArrowFunction, MethodDefinition,\r\nGeneratorDeclaration, GeneratorExpression, AsyncGeneratorDeclaration, AsyncGeneratorExpression,\r\nClassDeclaration, ClassExpression, AsyncFunctionDeclaration, AsyncFunctionExpression, or\r\nAsyncArrowFunction regardless of whether the definition is contained in strict mode code.\r\nBuilt-in functions, strict functions created using the Function constructor, generator functions\r\ncreated using the Generator constructor, async functions created using the AsyncFunction\r\nconstructor, and functions created using the bind method also must not be created with such own\r\nproperties.\r\n\r\n"},{"path":"./test262/test/language/statements/class/async-method/forbidden-ext/b1/cls-decl-async-meth-forbidden-ext-direct-access-prop-caller.js","description":" Forbidden extension, o.caller (class declaration async method)\r","esid":" sec-class-definitions-runtime-semantics-evaluation\r","features":["arrow-function","async-functions","class\r"],"flags":["generated","noStrict","async\r"],"info":" |\rClassDeclaration : class BindingIdentifier ClassTail\r\n\r\n\r\nECMAScript function objects defined using syntactic constructors in strict mode code must\r\nnot be created with own properties named \"caller\" or \"arguments\". Such own properties also\r\nmust not be created for function objects defined using an ArrowFunction, MethodDefinition,\r\nGeneratorDeclaration, GeneratorExpression, AsyncGeneratorDeclaration, AsyncGeneratorExpression,\r\nClassDeclaration, ClassExpression, AsyncFunctionDeclaration, AsyncFunctionExpression, or\r\nAsyncArrowFunction regardless of whether the definition is contained in strict mode code.\r\nBuilt-in functions, strict functions created using the Function constructor, generator functions\r\ncreated using the Generator constructor, async functions created using the AsyncFunction\r\nconstructor, and functions created using the bind method also must not be created with such own\r\nproperties.\r\n\r\n"},{"path":"./test262/test/language/statements/class/async-method/forbidden-ext/b2/cls-decl-async-meth-forbidden-ext-indirect-access-own-prop-caller-get.js","description":" Forbidden extension, o.caller (class declaration async method)\r","esid":" sec-class-definitions-runtime-semantics-evaluation\r","features":["arrow-function","async-functions","class\r"],"flags":["generated","noStrict","async\r"],"info":" |\rClassDeclaration : class BindingIdentifier ClassTail\r\n\r\n\r\nIf an implementation extends any function object with an own property named \"caller\" the value of\r\nthat property, as observed using [[Get]] or [[GetOwnProperty]], must not be a strict function\r\nobject. If it is an accessor property, the function that is the value of the property's [[Get]]\r\nattribute must never return a strict function when called.\r\n\r\n"},{"path":"./test262/test/language/statements/class/async-method/forbidden-ext/b2/cls-decl-async-meth-forbidden-ext-indirect-access-own-prop-caller-value.js","description":" Forbidden extension, o.caller (class declaration async method)\r","esid":" sec-class-definitions-runtime-semantics-evaluation\r","features":["arrow-function","async-functions","class\r"],"flags":["generated","noStrict","async\r"],"info":" |\rClassDeclaration : class BindingIdentifier ClassTail\r\n\r\n\r\nIf an implementation extends any function object with an own property named \"caller\" the value of\r\nthat property, as observed using [[Get]] or [[GetOwnProperty]], must not be a strict function\r\nobject. If it is an accessor property, the function that is the value of the property's [[Get]]\r\nattribute must never return a strict function when called.\r\n\r\n"},{"path":"./test262/test/language/statements/class/async-method/forbidden-ext/b2/cls-decl-async-meth-forbidden-ext-indirect-access-prop-caller.js","description":" Forbidden extension, o.caller (class declaration async method)\r","esid":" sec-class-definitions-runtime-semantics-evaluation\r","features":["arrow-function","async-functions","class\r"],"flags":["generated","noStrict","async\r"],"info":" |\rClassDeclaration : class BindingIdentifier ClassTail\r\n\r\n\r\nIf an implementation extends any function object with an own property named \"caller\" the value of\r\nthat property, as observed using [[Get]] or [[GetOwnProperty]], must not be a strict function\r\nobject. If it is an accessor property, the function that is the value of the property's [[Get]]\r\nattribute must never return a strict function when called.\r\n\r\n"},{"path":"./test262/test/language/statements/class/async-method/params-trailing-comma-multiple.js","description":" A trailing comma should not increase the respective length, using multiple parameters (class declaration async method)\r","esid":" sec-class-definitions-runtime-semantics-evaluation\r","features":["async-functions\r"],"flags":["generated","async\r"],"info":" |\rClassDeclaration : class BindingIdentifier ClassTail\r\n\r\n1. Let className be StringValue of BindingIdentifier.\r\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\r\nargument className.\r\n[...]\r\n\r\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\r\n\r\n21. For each ClassElement m in order from methods\r\na. If IsStatic of m is false, then\r\ni. Let status be the result of performing\r\nPropertyDefinitionEvaluation for m with arguments proto and\r\nfalse.\r\n[...]\r\n\r\nRuntime Semantics: PropertyDefinitionEvaluation\r\n\r\nAsyncMethod : async PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n1. Let propKey be the result of evaluating PropertyName.\r\n2. ReturnIfAbrupt(propKey).\r\n3. If the function code for this AsyncMethod is strict mode code, let strict be true. Otherwise\r\nlet strict be false.\r\n4. Let scope be the LexicalEnvironment of the running execution context.\r\n5. Let closure be ! AsyncFunctionCreate(Method, UniqueFormalParameters, AsyncFunctionBody,\r\nscope, strict).\r\n[...]\r\n\r\n\r\nTrailing comma in the parameters list\r\n\r\n14.1 Function Definitions\r\n\r\nFormalParameters[Yield, Await] : FormalParameterList[?Yield, ?Await] ,\r\n"},{"path":"./test262/test/language/statements/class/async-method/params-trailing-comma-single.js","description":" A trailing comma should not increase the respective length, using a single parameter (class declaration async method)\r","esid":" sec-class-definitions-runtime-semantics-evaluation\r","features":["async-functions\r"],"flags":["generated","async\r"],"info":" |\rClassDeclaration : class BindingIdentifier ClassTail\r\n\r\n1. Let className be StringValue of BindingIdentifier.\r\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\r\nargument className.\r\n[...]\r\n\r\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\r\n\r\n21. For each ClassElement m in order from methods\r\na. If IsStatic of m is false, then\r\ni. Let status be the result of performing\r\nPropertyDefinitionEvaluation for m with arguments proto and\r\nfalse.\r\n[...]\r\n\r\nRuntime Semantics: PropertyDefinitionEvaluation\r\n\r\nAsyncMethod : async PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n1. Let propKey be the result of evaluating PropertyName.\r\n2. ReturnIfAbrupt(propKey).\r\n3. If the function code for this AsyncMethod is strict mode code, let strict be true. Otherwise\r\nlet strict be false.\r\n4. Let scope be the LexicalEnvironment of the running execution context.\r\n5. Let closure be ! AsyncFunctionCreate(Method, UniqueFormalParameters, AsyncFunctionBody,\r\nscope, strict).\r\n[...]\r\n\r\n\r\nTrailing comma in the parameters list\r\n\r\n14.1 Function Definitions\r\n\r\nFormalParameters[Yield, Await] : FormalParameterList[?Yield, ?Await] ,\r\n"},{"path":"./test262/test/language/statements/class/async-method/returns-async-arrow-returns-arguments-from-parent-function.js","description":" Async function returns an async function. (Async method as a ClassDeclaration element)\r","esid":" prod-AsyncMethod\r","features":["async-functions\r"],"flags":["generated","async\r"],"info":" |\rClassElement :\r\nMethodDefinition\r\n\r\nMethodDefinition :\r\nAsyncMethod\r\n\r\nAsync Function Definitions\r\n\r\nAsyncMethod :\r\nasync [no LineTerminator here] PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n"},{"path":"./test262/test/language/statements/class/async-method/returns-async-arrow-returns-newtarget.js","description":" Async function returns an async function. (Async method as a ClassDeclaration element)\r","esid":" prod-AsyncMethod\r","features":["async-functions\r"],"flags":["generated","async\r"],"info":" |\rClassElement :\r\nMethodDefinition\r\n\r\nMethodDefinition :\r\nAsyncMethod\r\n\r\nAsync Function Definitions\r\n\r\nAsyncMethod :\r\nasync [no LineTerminator here] PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n"},{"path":"./test262/test/language/statements/class/async-method/returns-async-arrow.js","description":" Async function returns an async function. (Async method as a ClassDeclaration element)\r","esid":" prod-AsyncMethod\r","features":["async-functions\r"],"flags":["generated","async\r"],"info":" |\rClassElement :\r\nMethodDefinition\r\n\r\nMethodDefinition :\r\nAsyncMethod\r\n\r\nAsync Function Definitions\r\n\r\nAsyncMethod :\r\nasync [no LineTerminator here] PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n"},{"path":"./test262/test/language/statements/class/async-method/returns-async-function-returns-arguments-from-own-function.js","description":" Async function returns an async function. (Async method as a ClassDeclaration element)\r","esid":" prod-AsyncMethod\r","features":["async-functions\r"],"flags":["generated","async\r"],"info":" |\rClassElement :\r\nMethodDefinition\r\n\r\nMethodDefinition :\r\nAsyncMethod\r\n\r\nAsync Function Definitions\r\n\r\nAsyncMethod :\r\nasync [no LineTerminator here] PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n"},{"path":"./test262/test/language/statements/class/async-method/returns-async-function-returns-newtarget.js","description":" Async function returns an async function. (Async method as a ClassDeclaration element)\r","esid":" prod-AsyncMethod\r","features":["async-functions\r"],"flags":["generated","async\r"],"info":" |\rClassElement :\r\nMethodDefinition\r\n\r\nMethodDefinition :\r\nAsyncMethod\r\n\r\nAsync Function Definitions\r\n\r\nAsyncMethod :\r\nasync [no LineTerminator here] PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n"},{"path":"./test262/test/language/statements/class/async-method/returns-async-function.js","description":" Async function returns an async function. (Async method as a ClassDeclaration element)\r","esid":" prod-AsyncMethod\r","features":["async-functions\r"],"flags":["generated","async\r"],"info":" |\rClassElement :\r\nMethodDefinition\r\n\r\nMethodDefinition :\r\nAsyncMethod\r\n\r\nAsync Function Definitions\r\n\r\nAsyncMethod :\r\nasync [no LineTerminator here] PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n"},{"path":"./test262/test/language/statements/class/async-method-static/dflt-params-abrupt.js","description":" Abrupt completion returned by evaluation of initializer (static class declaration async method)\r","esid":" sec-runtime-semantics-bindingclassdeclarationevaluation\r","features":["default-parameters","async-functions\r"],"flags":["generated","async\r"],"info":" |\rClassDeclaration : class BindingIdentifier ClassTail\r\n\r\n1. Let className be StringValue of BindingIdentifier.\r\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\r\nargument className.\r\n[...]\r\n\r\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\r\n\r\n21. For each ClassElement m in order from methods\r\na. If IsStatic of m is false, then\r\nb. Else,\r\nLet status be the result of performing PropertyDefinitionEvaluation for\r\nm with arguments F and false.\r\n[...]\r\n\r\nRuntime Semantics: PropertyDefinitionEvaluation\r\n\r\nAsyncMethod : async PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n1. Let propKey be the result of evaluating PropertyName.\r\n2. ReturnIfAbrupt(propKey).\r\n3. If the function code for this AsyncMethod is strict mode code, let strict be true. Otherwise\r\nlet strict be false.\r\n4. Let scope be the LexicalEnvironment of the running execution context.\r\n5. Let closure be ! AsyncFunctionCreate(Method, UniqueFormalParameters, AsyncFunctionBody,\r\nscope, strict).\r\n[...]\r\n\r\n\r\n14.1.19 Runtime Semantics: IteratorBindingInitialization\r\n\r\nFormalsList : FormalsList , FormalParameter\r\n\r\n1. Let status be the result of performing IteratorBindingInitialization for\r\nFormalsList using iteratorRecord and environment as the arguments.\r\n2. ReturnIfAbrupt(status).\r\n3. Return the result of performing IteratorBindingInitialization for\r\nFormalParameter using iteratorRecord and environment as the arguments.\r\n\r\n"},{"path":"./test262/test/language/statements/class/async-method-static/dflt-params-arg-val-not-undefined.js","description":" Use of initializer when argument value is not `undefined` (static class declaration async method)\r","esid":" sec-runtime-semantics-bindingclassdeclarationevaluation\r","features":["default-parameters","async-functions\r"],"flags":["generated","async\r"],"info":" |\rClassDeclaration : class BindingIdentifier ClassTail\r\n\r\n1. Let className be StringValue of BindingIdentifier.\r\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\r\nargument className.\r\n[...]\r\n\r\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\r\n\r\n21. For each ClassElement m in order from methods\r\na. If IsStatic of m is false, then\r\nb. Else,\r\nLet status be the result of performing PropertyDefinitionEvaluation for\r\nm with arguments F and false.\r\n[...]\r\n\r\nRuntime Semantics: PropertyDefinitionEvaluation\r\n\r\nAsyncMethod : async PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n1. Let propKey be the result of evaluating PropertyName.\r\n2. ReturnIfAbrupt(propKey).\r\n3. If the function code for this AsyncMethod is strict mode code, let strict be true. Otherwise\r\nlet strict be false.\r\n4. Let scope be the LexicalEnvironment of the running execution context.\r\n5. Let closure be ! AsyncFunctionCreate(Method, UniqueFormalParameters, AsyncFunctionBody,\r\nscope, strict).\r\n[...]\r\n\r\n\r\n14.1.19 Runtime Semantics: IteratorBindingInitialization\r\n\r\nFormalsList : FormalsList , FormalParameter\r\n\r\n[...]\r\n23. Let iteratorRecord be Record {[[Iterator]]:\r\nCreateListIterator(argumentsList), [[Done]]: false}.\r\n24. If hasDuplicates is true, then\r\n[...]\r\n25. Else,\r\na. Perform ? IteratorBindingInitialization for formals with\r\niteratorRecord and env as arguments.\r\n[...]\r\n\r\n"},{"path":"./test262/test/language/statements/class/async-method-static/dflt-params-arg-val-undefined.js","description":" Use of initializer when argument value is `undefined` (static class declaration async method)\r","esid":" sec-runtime-semantics-bindingclassdeclarationevaluation\r","features":["default-parameters","async-functions\r"],"flags":["generated","async\r"],"info":" |\rClassDeclaration : class BindingIdentifier ClassTail\r\n\r\n1. Let className be StringValue of BindingIdentifier.\r\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\r\nargument className.\r\n[...]\r\n\r\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\r\n\r\n21. For each ClassElement m in order from methods\r\na. If IsStatic of m is false, then\r\nb. Else,\r\nLet status be the result of performing PropertyDefinitionEvaluation for\r\nm with arguments F and false.\r\n[...]\r\n\r\nRuntime Semantics: PropertyDefinitionEvaluation\r\n\r\nAsyncMethod : async PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n1. Let propKey be the result of evaluating PropertyName.\r\n2. ReturnIfAbrupt(propKey).\r\n3. If the function code for this AsyncMethod is strict mode code, let strict be true. Otherwise\r\nlet strict be false.\r\n4. Let scope be the LexicalEnvironment of the running execution context.\r\n5. Let closure be ! AsyncFunctionCreate(Method, UniqueFormalParameters, AsyncFunctionBody,\r\nscope, strict).\r\n[...]\r\n\r\n\r\n14.1.19 Runtime Semantics: IteratorBindingInitialization\r\n\r\nFormalsList : FormalsList , FormalParameter\r\n\r\n[...]\r\n23. Let iteratorRecord be Record {[[Iterator]]:\r\nCreateListIterator(argumentsList), [[Done]]: false}.\r\n24. If hasDuplicates is true, then\r\n[...]\r\n25. Else,\r\na. Perform ? IteratorBindingInitialization for formals with\r\niteratorRecord and env as arguments.\r\n[...]\r\n\r\n"},{"path":"./test262/test/language/statements/class/async-method-static/dflt-params-ref-later.js","description":" Referencing a parameter that occurs later in the ParameterList (static class declaration async method)\r","esid":" sec-runtime-semantics-bindingclassdeclarationevaluation\r","features":["default-parameters","async-functions\r"],"flags":["generated","async\r"],"info":" |\rClassDeclaration : class BindingIdentifier ClassTail\r\n\r\n1. Let className be StringValue of BindingIdentifier.\r\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\r\nargument className.\r\n[...]\r\n\r\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\r\n\r\n21. For each ClassElement m in order from methods\r\na. If IsStatic of m is false, then\r\nb. Else,\r\nLet status be the result of performing PropertyDefinitionEvaluation for\r\nm with arguments F and false.\r\n[...]\r\n\r\nRuntime Semantics: PropertyDefinitionEvaluation\r\n\r\nAsyncMethod : async PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n1. Let propKey be the result of evaluating PropertyName.\r\n2. ReturnIfAbrupt(propKey).\r\n3. If the function code for this AsyncMethod is strict mode code, let strict be true. Otherwise\r\nlet strict be false.\r\n4. Let scope be the LexicalEnvironment of the running execution context.\r\n5. Let closure be ! AsyncFunctionCreate(Method, UniqueFormalParameters, AsyncFunctionBody,\r\nscope, strict).\r\n[...]\r\n\r\n\r\n14.1.19 Runtime Semantics: IteratorBindingInitialization\r\n\r\nFormalsList : FormalsList , FormalParameter\r\n\r\n1. Let status be the result of performing IteratorBindingInitialization for\r\nFormalsList using iteratorRecord and environment as the arguments.\r\n2. ReturnIfAbrupt(status).\r\n3. Return the result of performing IteratorBindingInitialization for\r\nFormalParameter using iteratorRecord and environment as the arguments.\r\n\r\n"},{"path":"./test262/test/language/statements/class/async-method-static/dflt-params-ref-prior.js","description":" Referencing a parameter that occurs earlier in the ParameterList (static class declaration async method)\r","esid":" sec-runtime-semantics-bindingclassdeclarationevaluation\r","features":["default-parameters","async-functions\r"],"flags":["generated","async\r"],"info":" |\rClassDeclaration : class BindingIdentifier ClassTail\r\n\r\n1. Let className be StringValue of BindingIdentifier.\r\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\r\nargument className.\r\n[...]\r\n\r\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\r\n\r\n21. For each ClassElement m in order from methods\r\na. If IsStatic of m is false, then\r\nb. Else,\r\nLet status be the result of performing PropertyDefinitionEvaluation for\r\nm with arguments F and false.\r\n[...]\r\n\r\nRuntime Semantics: PropertyDefinitionEvaluation\r\n\r\nAsyncMethod : async PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n1. Let propKey be the result of evaluating PropertyName.\r\n2. ReturnIfAbrupt(propKey).\r\n3. If the function code for this AsyncMethod is strict mode code, let strict be true. Otherwise\r\nlet strict be false.\r\n4. Let scope be the LexicalEnvironment of the running execution context.\r\n5. Let closure be ! AsyncFunctionCreate(Method, UniqueFormalParameters, AsyncFunctionBody,\r\nscope, strict).\r\n[...]\r\n\r\n\r\n14.1.19 Runtime Semantics: IteratorBindingInitialization\r\n\r\nFormalsList : FormalsList , FormalParameter\r\n\r\n1. Let status be the result of performing IteratorBindingInitialization for\r\nFormalsList using iteratorRecord and environment as the arguments.\r\n2. ReturnIfAbrupt(status).\r\n3. Return the result of performing IteratorBindingInitialization for\r\nFormalParameter using iteratorRecord and environment as the arguments.\r\n\r\n"},{"path":"./test262/test/language/statements/class/async-method-static/dflt-params-ref-self.js","description":" Referencing a parameter from within its own initializer (static class declaration async method)\r","esid":" sec-runtime-semantics-bindingclassdeclarationevaluation\r","features":["default-parameters","async-functions\r"],"flags":["generated","async\r"],"info":" |\rClassDeclaration : class BindingIdentifier ClassTail\r\n\r\n1. Let className be StringValue of BindingIdentifier.\r\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\r\nargument className.\r\n[...]\r\n\r\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\r\n\r\n21. For each ClassElement m in order from methods\r\na. If IsStatic of m is false, then\r\nb. Else,\r\nLet status be the result of performing PropertyDefinitionEvaluation for\r\nm with arguments F and false.\r\n[...]\r\n\r\nRuntime Semantics: PropertyDefinitionEvaluation\r\n\r\nAsyncMethod : async PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n1. Let propKey be the result of evaluating PropertyName.\r\n2. ReturnIfAbrupt(propKey).\r\n3. If the function code for this AsyncMethod is strict mode code, let strict be true. Otherwise\r\nlet strict be false.\r\n4. Let scope be the LexicalEnvironment of the running execution context.\r\n5. Let closure be ! AsyncFunctionCreate(Method, UniqueFormalParameters, AsyncFunctionBody,\r\nscope, strict).\r\n[...]\r\n\r\n\r\n14.1.19 Runtime Semantics: IteratorBindingInitialization\r\n\r\nFormalsList : FormalsList , FormalParameter\r\n\r\n1. Let status be the result of performing IteratorBindingInitialization for\r\nFormalsList using iteratorRecord and environment as the arguments.\r\n2. ReturnIfAbrupt(status).\r\n3. Return the result of performing IteratorBindingInitialization for\r\nFormalParameter using iteratorRecord and environment as the arguments.\r\n\r\n"},{"path":"./test262/test/language/statements/class/async-method-static/dflt-params-trailing-comma.js","description":" A trailing comma should not increase the respective length, using default parameters (static class declaration async method)\r","esid":" sec-runtime-semantics-bindingclassdeclarationevaluation\r","features":["async-functions\r"],"flags":["generated","async\r"],"info":" |\rClassDeclaration : class BindingIdentifier ClassTail\r\n\r\n1. Let className be StringValue of BindingIdentifier.\r\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\r\nargument className.\r\n[...]\r\n\r\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\r\n\r\n21. For each ClassElement m in order from methods\r\na. If IsStatic of m is false, then\r\nb. Else,\r\nLet status be the result of performing PropertyDefinitionEvaluation for\r\nm with arguments F and false.\r\n[...]\r\n\r\nRuntime Semantics: PropertyDefinitionEvaluation\r\n\r\nAsyncMethod : async PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n1. Let propKey be the result of evaluating PropertyName.\r\n2. ReturnIfAbrupt(propKey).\r\n3. If the function code for this AsyncMethod is strict mode code, let strict be true. Otherwise\r\nlet strict be false.\r\n4. Let scope be the LexicalEnvironment of the running execution context.\r\n5. Let closure be ! AsyncFunctionCreate(Method, UniqueFormalParameters, AsyncFunctionBody,\r\nscope, strict).\r\n[...]\r\n\r\n\r\nTrailing comma in the parameters list\r\n\r\n14.1 Function Definitions\r\n\r\nFormalParameters[Yield, Await] : FormalParameterList[?Yield, ?Await] ,\r\n"},{"path":"./test262/test/language/statements/class/async-method-static/forbidden-ext/b1/cls-decl-async-meth-static-forbidden-ext-direct-access-prop-arguments.js","description":" Forbidden extension, f.arguments (static class declaration async method)\r","esid":" sec-runtime-semantics-bindingclassdeclarationevaluation\r","features":["arrow-function","async-functions","async-iteration","class\r"],"flags":["generated","noStrict","async\r"],"info":" |\rClassDeclaration : class BindingIdentifier ClassTail\r\n\r\n\r\nECMAScript function objects defined using syntactic constructors in strict mode code must\r\nnot be created with own properties named \"caller\" or \"arguments\". Such own properties also\r\nmust not be created for function objects defined using an ArrowFunction, MethodDefinition,\r\nGeneratorDeclaration, GeneratorExpression, AsyncGeneratorDeclaration, AsyncGeneratorExpression,\r\nClassDeclaration, ClassExpression, AsyncFunctionDeclaration, AsyncFunctionExpression, or\r\nAsyncArrowFunction regardless of whether the definition is contained in strict mode code.\r\nBuilt-in functions, strict functions created using the Function constructor, generator functions\r\ncreated using the Generator constructor, async functions created using the AsyncFunction\r\nconstructor, and functions created using the bind method also must not be created with such own\r\nproperties.\r\n\r\n"},{"path":"./test262/test/language/statements/class/async-method-static/forbidden-ext/b1/cls-decl-async-meth-static-forbidden-ext-direct-access-prop-caller.js","description":" Forbidden extension, o.caller (static class declaration async method)\r","esid":" sec-runtime-semantics-bindingclassdeclarationevaluation\r","features":["arrow-function","async-functions","async-iteration","class\r"],"flags":["generated","noStrict","async\r"],"info":" |\rClassDeclaration : class BindingIdentifier ClassTail\r\n\r\n\r\nECMAScript function objects defined using syntactic constructors in strict mode code must\r\nnot be created with own properties named \"caller\" or \"arguments\". Such own properties also\r\nmust not be created for function objects defined using an ArrowFunction, MethodDefinition,\r\nGeneratorDeclaration, GeneratorExpression, AsyncGeneratorDeclaration, AsyncGeneratorExpression,\r\nClassDeclaration, ClassExpression, AsyncFunctionDeclaration, AsyncFunctionExpression, or\r\nAsyncArrowFunction regardless of whether the definition is contained in strict mode code.\r\nBuilt-in functions, strict functions created using the Function constructor, generator functions\r\ncreated using the Generator constructor, async functions created using the AsyncFunction\r\nconstructor, and functions created using the bind method also must not be created with such own\r\nproperties.\r\n\r\n"},{"path":"./test262/test/language/statements/class/async-method-static/forbidden-ext/b2/cls-decl-async-meth-static-forbidden-ext-indirect-access-own-prop-caller-get.js","description":" Forbidden extension, o.caller (static class declaration async method)\r","esid":" sec-runtime-semantics-bindingclassdeclarationevaluation\r","features":["arrow-function","async-functions","class\r"],"flags":["generated","noStrict","async\r"],"info":" |\rClassDeclaration : class BindingIdentifier ClassTail\r\n\r\n\r\nIf an implementation extends any function object with an own property named \"caller\" the value of\r\nthat property, as observed using [[Get]] or [[GetOwnProperty]], must not be a strict function\r\nobject. If it is an accessor property, the function that is the value of the property's [[Get]]\r\nattribute must never return a strict function when called.\r\n\r\n"},{"path":"./test262/test/language/statements/class/async-method-static/forbidden-ext/b2/cls-decl-async-meth-static-forbidden-ext-indirect-access-own-prop-caller-value.js","description":" Forbidden extension, o.caller (static class declaration async method)\r","esid":" sec-runtime-semantics-bindingclassdeclarationevaluation\r","features":["arrow-function","async-functions","class\r"],"flags":["generated","noStrict","async\r"],"info":" |\rClassDeclaration : class BindingIdentifier ClassTail\r\n\r\n\r\nIf an implementation extends any function object with an own property named \"caller\" the value of\r\nthat property, as observed using [[Get]] or [[GetOwnProperty]], must not be a strict function\r\nobject. If it is an accessor property, the function that is the value of the property's [[Get]]\r\nattribute must never return a strict function when called.\r\n\r\n"},{"path":"./test262/test/language/statements/class/async-method-static/forbidden-ext/b2/cls-decl-async-meth-static-forbidden-ext-indirect-access-prop-caller.js","description":" Forbidden extension, o.caller (static class declaration async method)\r","esid":" sec-runtime-semantics-bindingclassdeclarationevaluation\r","features":["arrow-function","async-functions","class\r"],"flags":["generated","noStrict","async\r"],"info":" |\rClassDeclaration : class BindingIdentifier ClassTail\r\n\r\n\r\nIf an implementation extends any function object with an own property named \"caller\" the value of\r\nthat property, as observed using [[Get]] or [[GetOwnProperty]], must not be a strict function\r\nobject. If it is an accessor property, the function that is the value of the property's [[Get]]\r\nattribute must never return a strict function when called.\r\n\r\n"},{"path":"./test262/test/language/statements/class/async-method-static/params-trailing-comma-multiple.js","description":" A trailing comma should not increase the respective length, using multiple parameters (static class declaration async method)\r","esid":" sec-runtime-semantics-bindingclassdeclarationevaluation\r","features":["async-functions\r"],"flags":["generated","async\r"],"info":" |\rClassDeclaration : class BindingIdentifier ClassTail\r\n\r\n1. Let className be StringValue of BindingIdentifier.\r\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\r\nargument className.\r\n[...]\r\n\r\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\r\n\r\n21. For each ClassElement m in order from methods\r\na. If IsStatic of m is false, then\r\nb. Else,\r\nLet status be the result of performing PropertyDefinitionEvaluation for\r\nm with arguments F and false.\r\n[...]\r\n\r\nRuntime Semantics: PropertyDefinitionEvaluation\r\n\r\nAsyncMethod : async PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n1. Let propKey be the result of evaluating PropertyName.\r\n2. ReturnIfAbrupt(propKey).\r\n3. If the function code for this AsyncMethod is strict mode code, let strict be true. Otherwise\r\nlet strict be false.\r\n4. Let scope be the LexicalEnvironment of the running execution context.\r\n5. Let closure be ! AsyncFunctionCreate(Method, UniqueFormalParameters, AsyncFunctionBody,\r\nscope, strict).\r\n[...]\r\n\r\n\r\nTrailing comma in the parameters list\r\n\r\n14.1 Function Definitions\r\n\r\nFormalParameters[Yield, Await] : FormalParameterList[?Yield, ?Await] ,\r\n"},{"path":"./test262/test/language/statements/class/async-method-static/params-trailing-comma-single.js","description":" A trailing comma should not increase the respective length, using a single parameter (static class declaration async method)\r","esid":" sec-runtime-semantics-bindingclassdeclarationevaluation\r","features":["async-functions\r"],"flags":["generated","async\r"],"info":" |\rClassDeclaration : class BindingIdentifier ClassTail\r\n\r\n1. Let className be StringValue of BindingIdentifier.\r\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\r\nargument className.\r\n[...]\r\n\r\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\r\n\r\n21. For each ClassElement m in order from methods\r\na. If IsStatic of m is false, then\r\nb. Else,\r\nLet status be the result of performing PropertyDefinitionEvaluation for\r\nm with arguments F and false.\r\n[...]\r\n\r\nRuntime Semantics: PropertyDefinitionEvaluation\r\n\r\nAsyncMethod : async PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n1. Let propKey be the result of evaluating PropertyName.\r\n2. ReturnIfAbrupt(propKey).\r\n3. If the function code for this AsyncMethod is strict mode code, let strict be true. Otherwise\r\nlet strict be false.\r\n4. Let scope be the LexicalEnvironment of the running execution context.\r\n5. Let closure be ! AsyncFunctionCreate(Method, UniqueFormalParameters, AsyncFunctionBody,\r\nscope, strict).\r\n[...]\r\n\r\n\r\nTrailing comma in the parameters list\r\n\r\n14.1 Function Definitions\r\n\r\nFormalParameters[Yield, Await] : FormalParameterList[?Yield, ?Await] ,\r\n"},{"path":"./test262/test/language/statements/class/async-method-static/returns-async-arrow-returns-arguments-from-parent-function.js","description":" Async function returns an async function. (Static async method as a ClassDeclaration element)\r","esid":" prod-AsyncMethod\r","features":["async-functions\r"],"flags":["generated","async\r"],"info":" |\rClassElement :\r\nstatic MethodDefinition\r\n\r\nMethodDefinition :\r\nAsyncMethod\r\n\r\nAsync Function Definitions\r\n\r\nAsyncMethod :\r\nasync [no LineTerminator here] PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n"},{"path":"./test262/test/language/statements/class/async-method-static/returns-async-arrow-returns-newtarget.js","description":" Async function returns an async function. (Static async method as a ClassDeclaration element)\r","esid":" prod-AsyncMethod\r","features":["async-functions\r"],"flags":["generated","async\r"],"info":" |\rClassElement :\r\nstatic MethodDefinition\r\n\r\nMethodDefinition :\r\nAsyncMethod\r\n\r\nAsync Function Definitions\r\n\r\nAsyncMethod :\r\nasync [no LineTerminator here] PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n"},{"path":"./test262/test/language/statements/class/async-method-static/returns-async-arrow.js","description":" Async function returns an async function. (Static async method as a ClassDeclaration element)\r","esid":" prod-AsyncMethod\r","features":["async-functions\r"],"flags":["generated","async\r"],"info":" |\rClassElement :\r\nstatic MethodDefinition\r\n\r\nMethodDefinition :\r\nAsyncMethod\r\n\r\nAsync Function Definitions\r\n\r\nAsyncMethod :\r\nasync [no LineTerminator here] PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n"},{"path":"./test262/test/language/statements/class/async-method-static/returns-async-function-returns-arguments-from-own-function.js","description":" Async function returns an async function. (Static async method as a ClassDeclaration element)\r","esid":" prod-AsyncMethod\r","features":["async-functions\r"],"flags":["generated","async\r"],"info":" |\rClassElement :\r\nstatic MethodDefinition\r\n\r\nMethodDefinition :\r\nAsyncMethod\r\n\r\nAsync Function Definitions\r\n\r\nAsyncMethod :\r\nasync [no LineTerminator here] PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n"},{"path":"./test262/test/language/statements/class/async-method-static/returns-async-function-returns-newtarget.js","description":" Async function returns an async function. (Static async method as a ClassDeclaration element)\r","esid":" prod-AsyncMethod\r","features":["async-functions\r"],"flags":["generated","async\r"],"info":" |\rClassElement :\r\nstatic MethodDefinition\r\n\r\nMethodDefinition :\r\nAsyncMethod\r\n\r\nAsync Function Definitions\r\n\r\nAsyncMethod :\r\nasync [no LineTerminator here] PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n"},{"path":"./test262/test/language/statements/class/async-method-static/returns-async-function.js","description":" Async function returns an async function. (Static async method as a ClassDeclaration element)\r","esid":" prod-AsyncMethod\r","features":["async-functions\r"],"flags":["generated","async\r"],"info":" |\rClassElement :\r\nstatic MethodDefinition\r\n\r\nMethodDefinition :\r\nAsyncMethod\r\n\r\nAsync Function Definitions\r\n\r\nAsyncMethod :\r\nasync [no LineTerminator here] PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n"},{"path":"./test262/test/language/statements/class/cpn-class-decl-accessors-computed-property-name-from-async-arrow-function-expression.js","description":" Computed property name from function expression (ComputedPropertyName in ClassDeclaration)\r","esid":" prod-ComputedPropertyName\r","features":["computed-property-names\r"],"flags":["generated\r"],"info":" |\rClassExpression:\r\nclassBindingIdentifier opt ClassTail\r\n\r\nClassTail:\r\nClassHeritage opt { ClassBody opt }\r\n\r\nClassBody:\r\nClassElementList\r\n\r\nClassElementList:\r\nClassElement\r\n\r\nClassElement:\r\nMethodDefinition\r\n\r\nMethodDefinition:\r\nPropertyName ...\r\nget PropertyName ...\r\nset PropertyName ...\r\n\r\nPropertyName:\r\nComputedPropertyName\r\n\r\nComputedPropertyName:\r\n[ AssignmentExpression ]\r\n"},{"path":"./test262/test/language/statements/class/cpn-class-decl-computed-property-name-from-async-arrow-function-expression.js","description":" Computed property name from function expression (ComputedPropertyName in ClassDeclaration)\r","esid":" prod-ComputedPropertyName\r","features":["computed-property-names\r"],"flags":["generated\r"],"info":" |\rClassExpression:\r\nclassBindingIdentifier opt ClassTail\r\n\r\nClassTail:\r\nClassHeritage opt { ClassBody opt }\r\n\r\nClassBody:\r\nClassElementList\r\n\r\nClassElementList:\r\nClassElement\r\n\r\nClassElement:\r\nMethodDefinition\r\n\r\nMethodDefinition:\r\nPropertyName ...\r\nget PropertyName ...\r\nset PropertyName ...\r\n\r\nPropertyName:\r\nComputedPropertyName\r\n\r\nComputedPropertyName:\r\n[ AssignmentExpression ]\r\n"},{"path":"./test262/test/language/statements/class/definition/class-method-returns-promise.js","author":" Brian Terlson <brian.terlson@microsoft.com>\r","esid":" pending\r","features":["async-functions\r"],"description":" >\rAsync function expressions return promises\r\n"},{"path":"./test262/test/language/statements/class/definition/methods-async-super-call-body.js","author":" Brian Terlson <brian.terlson@microsoft.com>\r","esid":" pending\r","description":" >\rSuper calls work in body of async methods\r\n","flags":["async\r"],"features":["async-functions\r"]},{"path":"./test262/test/language/statements/class/elements/syntax/valid/grammar-special-prototype-async-meth-valid.js","description":" Async Methods can be named \"prototype\" (class declaration)\r","esid":" prod-ClassElement\r","features":["async-functions","class\r"],"flags":["generated\r"],"includes":["propertyHelper.js\r"],"info":" |\rRuntime Semantics: ClassDefinitionEvaluation\r\n\r\nClassTail : ClassHeritage_opt { ClassBody_opt }\r\n\r\n[...]\r\n6. Let proto be OrdinaryObjectCreate(protoParent).\r\n[...]\r\n14. Perform MakeConstructor(F, false, proto).\r\n[...]\r\n20. For each ClassElement m in order from methods, do\r\na. If IsStatic of m is false, then\r\ni. Let status be PropertyDefinitionEvaluation of m with arguments proto and false.\r\n[...]\r\n\r\nRuntime Semantics: PropertyDefinitionEvaluation\r\n\r\nWith parameters object and enumerable.\r\n\r\nAsyncMethod : async PropertyName ( UniqueFormalParameters ) { AsyncFunctionBody }\r\n\r\n[...]\r\n8. Let desc be the PropertyDescriptor { [[Value]]: closure, [[Writable]]: true, [[Enumerable]]: enumerable, [[Configurable]]: true }.\r\n9. Return ? DefinePropertyOrThrow(object, propKey, desc).\r\n\r\n"},{"path":"./test262/test/language/statements/class/subclass/superclass-async-function.js","esid":" sec-runtime-semantics-classdefinitionevaluation\r","description":" >\rIsConstructor check is performed before \"prototype\" lookup.\r\nAsync functions are not constructors (MakeConstructor is not called on them).\r\n","info":" |\rClassDefinitionEvaluation\r\n\r\n[...]\r\n5. Else,\r\n[...]\r\nd. Let superclass be ? GetValue(superclassRef).\r\ne. If superclass is null, then\r\n[...]\r\nf. Else if IsConstructor(superclass) is false, throw a TypeError exception.\r\n","features":["async-functions","class","Proxy\r"]},{"path":"./test262/test/language/statements/class/subclass-builtins/subclass-SharedArrayBuffer.js","description":" new SubSharedArrayBuffer() instanceof SharedArrayBuffer (Subclass instanceof Heritage)\r","features":["SharedArrayBuffer\r"],"flags":["generated\r"]},{"path":"./test262/test/language/statements/do-while/decl-async-fun.js","esid":" sec-do-while-statement\r","description":" >\rAsyncFunctionDeclaration is not allowed in statement position\r\n","info":" |\rExpressionStatement[Yield, Await] :\r\n[lookahead ∉ { {, function, async [no LineTerminator here] function, class, let [ }]\r\nExpression[+In, ?Yield, ?Await] ;\r\n","negative":{"phase":"parse\r","type":"SyntaxError\r"},"features":["async-functions\r"]},{"path":"./test262/test/language/statements/for/decl-async-fun.js","esid":" sec-for-statement\r","description":" >\rAsyncFunctionDeclaration is not allowed in statement position\r\n","info":" |\rExpressionStatement[Yield, Await] :\r\n[lookahead ∉ { {, function, async [no LineTerminator here] function, class, let [ }]\r\nExpression[+In, ?Yield, ?Await] ;\r\n","negative":{"phase":"parse\r","type":"SyntaxError\r"},"features":["async-functions\r"]},{"path":"./test262/test/language/statements/for/head-init-async-of.js","description":" for statement beginning with `async of`\r","info":" |\r`for (async of =>` is the begining of a regular for loop, rather than a for-of\r\n","esid":" sec-for-statement\r"},{"path":"./test262/test/language/statements/for-in/decl-async-fun.js","esid":" sec-for-in-and-for-of-statements\r","description":" >\rAsyncFunctionDeclaration is not allowed in statement position\r\n","info":" |\rExpressionStatement[Yield, Await] :\r\n[lookahead ∉ { {, function, async [no LineTerminator here] function, class, let [ }]\r\nExpression[+In, ?Yield, ?Await] ;\r\n","negative":{"phase":"parse\r","type":"SyntaxError\r"},"features":["async-functions\r"]},{"path":"./test262/test/language/statements/for-of/decl-async-fun.js","esid":" sec-for-in-and-for-of-statements\r","description":" >\rAsyncFunctionDeclaration is not allowed in statement position\r\n","info":" |\rExpressionStatement[Yield, Await] :\r\n[lookahead ∉ { {, function, async [no LineTerminator here] function, class, let [ }]\r\nExpression[+In, ?Yield, ?Await] ;\r\n","negative":{"phase":"parse\r","type":"SyntaxError\r"},"features":["async-functions\r"]},{"path":"./test262/test/language/statements/for-of/head-lhs-async-parens.js","esid":" sec-for-in-and-for-of-statements\r","description":" >\rThe left-hand-side of a for-of loop may be the identifier `async`\r\nsurrounded by parentheses.\r\n","info":" |\rForInOfStatement[Yield, Await, Return] :\r\nfor ( [lookahead ∉ { let, async of }] LeftHandSideExpression[?Yield, ?Await] of AssignmentExpression[+In, ?Yield, ?Await] ) Statement[?Yield, ?Await, ?Return]\r\n"},{"path":"./test262/test/language/statements/if/if-async-fun-else-async-fun.js","esid":" sec-if-statement\r","description":" >\rAsyncFunctionDeclaration is not allowed in statement position\r\n","info":" |\rExpressionStatement[Yield, Await] :\r\n[lookahead ∉ { {, function, async [no LineTerminator here] function, class, let [ }]\r\nExpression[+In, ?Yield, ?Await] ;\r\n","negative":{"phase":"parse\r","type":"SyntaxError\r"},"features":["async-functions\r"]},{"path":"./test262/test/language/statements/if/if-async-fun-else-stmt.js","esid":" sec-if-statement\r","description":" >\rAsyncFunctionDeclaration is not allowed in statement position\r\n","info":" |\rExpressionStatement[Yield, Await] :\r\n[lookahead ∉ { {, function, async [no LineTerminator here] function, class, let [ }]\r\nExpression[+In, ?Yield, ?Await] ;\r\n","negative":{"phase":"parse\r","type":"SyntaxError\r"},"features":["async-functions\r"]},{"path":"./test262/test/language/statements/if/if-async-fun-no-else.js","esid":" sec-if-statement\r","description":" >\rAsyncFunctionDeclaration is not allowed in statement position\r\n","info":" |\rExpressionStatement[Yield, Await] :\r\n[lookahead ∉ { {, function, async [no LineTerminator here] function, class, let [ }]\r\nExpression[+In, ?Yield, ?Await] ;\r\n","negative":{"phase":"parse\r","type":"SyntaxError\r"},"features":["async-functions\r"]},{"path":"./test262/test/language/statements/if/if-stmt-else-async-fun.js","esid":" sec-if-statement\r","description":" >\rAsyncFunctionDeclaration is not allowed in statement position\r\n","info":" |\rExpressionStatement[Yield, Await] :\r\n[lookahead ∉ { {, function, async [no LineTerminator here] function, class, let [ }]\r\nExpression[+In, ?Yield, ?Await] ;\r\n","negative":{"phase":"parse\r","type":"SyntaxError\r"},"features":["async-functions\r"]},{"path":"./test262/test/language/statements/labeled/decl-async-function.js","esid":" sec-labelled-statements\r","description":" >\rAsyncFunctionDeclaration is not allowed in statement position\r\n","info":" |\rExpressionStatement[Yield, Await] :\r\n[lookahead ∉ { {, function, async [no LineTerminator here] function, class, let [ }]\r\nExpression[+In, ?Yield, ?Await] ;\r\n","negative":{"phase":"parse\r","type":"SyntaxError\r"},"features":["async-functions\r"]},{"path":"./test262/test/language/statements/switch/scope-lex-async-function.js","esid":" sec-switch-statement-runtime-semantics-evaluation\r","description":" Creation of new lexical environment (into `default` clause)\r","info":" |\r1. Let exprRef be the result of evaluating Expression.\r\n2. Let switchValue be ? GetValue(exprRef).\r\n3. Let oldEnv be the running execution context's LexicalEnvironment.\r\n4. Let blockEnv be NewDeclarativeEnvironment(oldEnv).\r\n5. Perform BlockDeclarationInstantiation(CaseBlock, blockEnv).\r\n6. Set the running execution context's LexicalEnvironment to blockEnv.\r\n7. Let R be the result of performing CaseBlockEvaluation of CaseBlock with\r\nargument switchValue.\r\n[...]\r\n","negative":{"phase":"runtime\r","type":"ReferenceError\r"}},{"path":"./test262/test/language/statements/switch/syntax/redeclaration/async-function-name-redeclaration-attempt-with-async-function.js","description":" redeclaration with AsyncFunctionDeclaration (AsyncFunctionDeclaration in SwitchStatement)\r","esid":" sec-switch-statement-static-semantics-early-errors\r","features":["async-functions\r"],"flags":["generated\r"],"negative":{"phase":"parse\r","type":"SyntaxError\r"},"info":" |\rSwitchStatement : switch ( Expression ) CaseBlock\r\n\r\nIt is a Syntax Error if the LexicallyDeclaredNames of CaseBlock contains any\r\nduplicate entries.\r\n\r\n"},{"path":"./test262/test/language/statements/switch/syntax/redeclaration/async-function-name-redeclaration-attempt-with-class.js","description":" redeclaration with ClassDeclaration (AsyncFunctionDeclaration in SwitchStatement)\r","esid":" sec-switch-statement-static-semantics-early-errors\r","features":["async-functions\r"],"flags":["generated\r"],"negative":{"phase":"parse\r","type":"SyntaxError\r"},"info":" |\rSwitchStatement : switch ( Expression ) CaseBlock\r\n\r\nIt is a Syntax Error if the LexicallyDeclaredNames of CaseBlock contains any\r\nduplicate entries.\r\n\r\n"},{"path":"./test262/test/language/statements/switch/syntax/redeclaration/async-function-name-redeclaration-attempt-with-const.js","description":" redeclaration with const-LexicalDeclaration (AsyncFunctionDeclaration in SwitchStatement)\r","esid":" sec-switch-statement-static-semantics-early-errors\r","features":["async-functions\r"],"flags":["generated\r"],"negative":{"phase":"parse\r","type":"SyntaxError\r"},"info":" |\rSwitchStatement : switch ( Expression ) CaseBlock\r\n\r\nIt is a Syntax Error if the LexicallyDeclaredNames of CaseBlock contains any\r\nduplicate entries.\r\n\r\n"},{"path":"./test262/test/language/statements/switch/syntax/redeclaration/async-function-name-redeclaration-attempt-with-function.js","description":" redeclaration with FunctionDeclaration (AsyncFunctionDeclaration in SwitchStatement)\r","esid":" sec-switch-statement-static-semantics-early-errors\r","features":["async-functions\r"],"flags":["generated\r"],"negative":{"phase":"parse\r","type":"SyntaxError\r"},"info":" |\rSwitchStatement : switch ( Expression ) CaseBlock\r\n\r\nIt is a Syntax Error if the LexicallyDeclaredNames of CaseBlock contains any\r\nduplicate entries.\r\n\r\n"},{"path":"./test262/test/language/statements/switch/syntax/redeclaration/async-function-name-redeclaration-attempt-with-generator.js","description":" redeclaration with GeneratorDeclaration (AsyncFunctionDeclaration in SwitchStatement)\r","esid":" sec-switch-statement-static-semantics-early-errors\r","features":["generators","async-functions\r"],"flags":["generated\r"],"negative":{"phase":"parse\r","type":"SyntaxError\r"},"info":" |\rSwitchStatement : switch ( Expression ) CaseBlock\r\n\r\nIt is a Syntax Error if the LexicallyDeclaredNames of CaseBlock contains any\r\nduplicate entries.\r\n\r\n"},{"path":"./test262/test/language/statements/switch/syntax/redeclaration/async-function-name-redeclaration-attempt-with-let.js","description":" redeclaration with let-LexicalDeclaration (AsyncFunctionDeclaration in SwitchStatement)\r","esid":" sec-switch-statement-static-semantics-early-errors\r","features":["async-functions\r"],"flags":["generated\r"],"negative":{"phase":"parse\r","type":"SyntaxError\r"},"info":" |\rSwitchStatement : switch ( Expression ) CaseBlock\r\n\r\nIt is a Syntax Error if the LexicallyDeclaredNames of CaseBlock contains any\r\nduplicate entries.\r\n\r\n"},{"path":"./test262/test/language/statements/switch/syntax/redeclaration/async-function-name-redeclaration-attempt-with-var.js","description":" redeclaration with VariableDeclaration (AsyncFunctionDeclaration in SwitchStatement)\r","esid":" sec-switch-statement-static-semantics-early-errors\r","features":["async-functions\r"],"flags":["generated\r"],"negative":{"phase":"parse\r","type":"SyntaxError\r"},"info":" |\rSwitchStatement : switch ( Expression ) CaseBlock\r\n\r\nIt is a Syntax Error if any element of the LexicallyDeclaredNames of\r\nCaseBlock also occurs in the VarDeclaredNames of CaseBlock.\r\n\r\n"},{"path":"./test262/test/language/statements/switch/syntax/redeclaration/class-name-redeclaration-attempt-with-async-function.js","description":" redeclaration with AsyncFunctionDeclaration (ClassDeclaration in SwitchStatement)\r","esid":" sec-switch-statement-static-semantics-early-errors\r","features":["async-functions\r"],"flags":["generated\r"],"negative":{"phase":"parse\r","type":"SyntaxError\r"},"info":" |\rSwitchStatement : switch ( Expression ) CaseBlock\r\n\r\nIt is a Syntax Error if the LexicallyDeclaredNames of CaseBlock contains any\r\nduplicate entries.\r\n\r\n"},{"path":"./test262/test/language/statements/switch/syntax/redeclaration/const-name-redeclaration-attempt-with-async-function.js","description":" redeclaration with AsyncFunctionDeclaration (LexicalDeclaration (const) in SwitchStatement)\r","esid":" sec-switch-statement-static-semantics-early-errors\r","features":["async-functions\r"],"flags":["generated\r"],"negative":{"phase":"parse\r","type":"SyntaxError\r"},"info":" |\rSwitchStatement : switch ( Expression ) CaseBlock\r\n\r\nIt is a Syntax Error if the LexicallyDeclaredNames of CaseBlock contains any\r\nduplicate entries.\r\n\r\n"},{"path":"./test262/test/language/statements/switch/syntax/redeclaration/function-name-redeclaration-attempt-with-async-function.js","description":" redeclaration with AsyncFunctionDeclaration (FunctionDeclaration in SwitchStatement)\r","esid":" sec-switch-statement-static-semantics-early-errors\r","features":["async-functions\r"],"flags":["generated\r"],"negative":{"phase":"parse\r","type":"SyntaxError\r"},"info":" |\rSwitchStatement : switch ( Expression ) CaseBlock\r\n\r\nIt is a Syntax Error if the LexicallyDeclaredNames of CaseBlock contains any\r\nduplicate entries.\r\n\r\n"},{"path":"./test262/test/language/statements/switch/syntax/redeclaration/generator-name-redeclaration-attempt-with-async-function.js","description":" redeclaration with AsyncFunctionDeclaration (GeneratorDeclaration in SwitchStatement)\r","esid":" sec-switch-statement-static-semantics-early-errors\r","features":["async-functions","generators\r"],"flags":["generated\r"],"negative":{"phase":"parse\r","type":"SyntaxError\r"},"info":" |\rSwitchStatement : switch ( Expression ) CaseBlock\r\n\r\nIt is a Syntax Error if the LexicallyDeclaredNames of CaseBlock contains any\r\nduplicate entries.\r\n\r\n"},{"path":"./test262/test/language/statements/switch/syntax/redeclaration/let-name-redeclaration-attempt-with-async-function.js","description":" redeclaration with AsyncFunctionDeclaration (LexicalDeclaration (let) in SwitchStatement)\r","esid":" sec-switch-statement-static-semantics-early-errors\r","features":["async-functions\r"],"flags":["generated\r"],"negative":{"phase":"parse\r","type":"SyntaxError\r"},"info":" |\rSwitchStatement : switch ( Expression ) CaseBlock\r\n\r\nIt is a Syntax Error if the LexicallyDeclaredNames of CaseBlock contains any\r\nduplicate entries.\r\n\r\n"},{"path":"./test262/test/language/statements/switch/syntax/redeclaration/var-name-redeclaration-attempt-with-async-function.js","description":" redeclaration with AsyncFunctionDeclaration (VariableDeclaration in SwitchStatement)\r","esid":" sec-switch-statement-static-semantics-early-errors\r","features":["async-functions\r"],"flags":["generated\r"],"negative":{"phase":"parse\r","type":"SyntaxError\r"},"info":" |\rSwitchStatement : switch ( Expression ) CaseBlock\r\n\r\nIt is a Syntax Error if any element of the LexicallyDeclaredNames of\r\nCaseBlock also occurs in the VarDeclaredNames of CaseBlock.\r\n\r\n"},{"path":"./test262/test/language/statements/while/decl-async-fun.js","esid":" sec-while-statement\r","description":" >\rAsyncFunctionDeclaration is not allowed in statement position\r\n","info":" |\rExpressionStatement[Yield, Await] :\r\n[lookahead ∉ { {, function, async [no LineTerminator here] function, class, let [ }]\r\nExpression[+In, ?Yield, ?Await] ;\r\n","negative":{"phase":"parse\r","type":"SyntaxError\r"},"features":["async-functions\r"]},{"path":"./test262/test/language/statements/with/decl-async-fun.js","esid":" sec-with-statement\r","description":" >\rAsyncFunctionDeclaration is not allowed in statement position\r\n","info":" |\rExpressionStatement[Yield, Await] :\r\n[lookahead ∉ { {, function, async [no LineTerminator here] function, class, let [ }]\r\nExpression[+In, ?Yield, ?Await] ;\r\n","negative":{"phase":"parse\r","type":"SyntaxError\r"},"features":["async-functions\r"],"flags":["noStrict\r"]}]