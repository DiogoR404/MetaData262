[{"path":"test/built-ins/Atomics/load/bigint/bad-range.js","esid":" sec-atomics.load","description":" >Test range checking of Atomics.load on arrays that allow atomic operations\n","includes":["testAtomics.js","testBigIntTypedArray.js"],"features":["ArrayBuffer","Atomics","BigInt","DataView","SharedArrayBuffer","Symbol","TypedArray"]},{"path":"test/built-ins/Atomics/notify/bigint/bad-range.js","esid":" sec-atomics.notify","description":" >Test range checking of Atomics.notify on arrays that allow atomic operations\n","info":" |Atomics.notify( typedArray, index, count )\n\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray, true).\n..\n\n","includes":["testAtomics.js"],"features":["ArrayBuffer","Atomics","BigInt","DataView","SharedArrayBuffer","Symbol","TypedArray"]},{"path":"test/built-ins/Atomics/notify/bigint/non-bigint64-typedarray-throws.js","esid":" sec-atomics.notify","description":" >Throws a TypeError if typedArray arg is not an BigInt64Array\n","info":" |Atomics.notify( typedArray, index, count )\n\n1.Let buffer be ? ValidateSharedIntegerTypedArray(typedArray, true).\n...\n5.If onlyInt32 is true, then\nIf typeName is not \"BigInt64Array\", throw a TypeError exception.\n","features":["Atomics","BigInt","TypedArray"]},{"path":"test/built-ins/Atomics/notify/bigint/non-shared-bufferdata-non-shared-int-views-throws.js","esid":" sec-atomics.notify","description":" >Atomics.notify throws on non-shared integer TypedArrays\n","features":["ArrayBuffer","Atomics","BigInt","TypedArray"]},{"path":"test/built-ins/Atomics/wait/bigint/negative-index-throws.js","esid":" sec-atomics.wait","description":" >Throws a RangeError is index < 0\n","info":" |Atomics.wait( typedArray, index, value, timeout )\n\n2.Let i be ? ValidateAtomicAccess(typedArray, index).\n...\n2.Let accessIndex be ? ToIndex(requestIndex).\n...\n2.b If integerIndex < 0, throw a RangeError exception\n","features":["Atomics","BigInt","SharedArrayBuffer","TypedArray"]},{"path":"test/built-ins/Atomics/wait/bigint/out-of-range-index-throws.js","esid":" sec-atomics.wait","description":" >Throws a RangeError if value of index arg is out of range\n","info":" |Atomics.wait( typedArray, index, value, timeout )\n\n2.Let i be ? ValidateAtomicAccess(typedArray, index).\n...\n2.Let accessIndex be ? ToIndex(requestIndex).\n...\n5. If accessIndex ≥ length, throw a RangeError exception.\n","features":["Atomics","BigInt","SharedArrayBuffer","TypedArray"]},{"path":"test/built-ins/Atomics/wait/bigint/waiterlist-block-indexedposition-wake.js","esid":" sec-atomics.wait","description":" >Get the correct WaiterList\n","info":" |Atomics.wait( typedArray, index, value, timeout )\n\n...\n11. Let WL be GetWaiterList(block, indexedPosition).\n...\n\n\nGetWaiterList( block, i )\n\n...\n4. Return the WaiterList that is referenced by the pair (block, i).\n\n","includes":["atomicsHelper.js"],"features":["Atomics","BigInt","SharedArrayBuffer","TypedArray"]},{"path":"test/built-ins/Atomics/xor/bigint/bad-range.js","esid":" sec-atomics.xor","description":" >Test range checking of Atomics.xor on arrays that allow atomic operations\n","includes":["testAtomics.js","testBigIntTypedArray.js"],"features":["ArrayBuffer","Atomics","BigInt","DataView","SharedArrayBuffer","Symbol","TypedArray"]},{"path":"test/built-ins/BigInt/asIntN/asIntN.js","esid":" pending","description":" BigInt.asIntN property descriptor","info":" |BigInt.asIntN ( bits, bigint )\n\n17 ECMAScript Standard Built-in Objects\n\n","includes":["propertyHelper.js"],"features":["BigInt"]},{"path":"test/built-ins/BigInt/asIntN/bigint-tobigint-errors.js","description":" BigInt.asIntN type coercion for bigint parameter","esid":" pending","info":" |BigInt.asIntN ( bits, bigint )\n\n2. Let bigint ? ToBigInt(bigint).\n","features":["BigInt","computed-property-names","Symbol","Symbol.toPrimitive"]},{"path":"test/built-ins/BigInt/asIntN/length.js","esid":" pending","description":" BigInt.asIntN.length descriptor","info":" |BigInt.asIntN ( bits, bigint )\n\n17 ECMAScript Standard Built-in Objects\n\n","includes":["propertyHelper.js"],"features":["BigInt"]},{"path":"test/built-ins/BigInt/asIntN/name.js","esid":" pending","description":" BigInt.asIntN.name descriptor","info":" |BigInt.asIntN ( bits, bigint )\n\n17 ECMAScript Standard Built-in Objects\n\n","includes":["propertyHelper.js"],"features":["BigInt"]},{"path":"test/built-ins/BigInt/asUintN/asUintN.js","esid":" pending","description":" BigInt.asUintN property descriptor","info":" |BigInt.asUintN ( bits, bigint )\n\n17 ECMAScript Standard Built-in Objects\n\n","includes":["propertyHelper.js"],"features":["BigInt"]},{"path":"test/built-ins/BigInt/asUintN/bigint-tobigint-errors.js","description":" BigInt.asUintN type coercion for bigint parameter","esid":" pending","info":" |BigInt.asUintN ( bits, bigint )\n\n2. Let bigint ? ToBigInt(bigint).\n","features":["BigInt","computed-property-names","Symbol","Symbol.toPrimitive"]},{"path":"test/built-ins/BigInt/asUintN/length.js","esid":" pending","description":" BigInt.asUintN.length descriptor","info":" |BigInt.asUintN ( bits, bigint )\n\n17 ECMAScript Standard Built-in Objects\n\n","includes":["propertyHelper.js"],"features":["BigInt"]},{"path":"test/built-ins/BigInt/asUintN/name.js","esid":" pending","description":" BigInt.asUintN.name descriptor","info":" |BigInt.asUintN ( bits, bigint )\n\n17 ECMAScript Standard Built-in Objects\n\n","includes":["propertyHelper.js"],"features":["BigInt"]},{"path":"test/built-ins/BigInt/constructor-from-string-syntax-errors.js","description":" Invalid String into BigInt constructor should throw SyntaxError","esid":" sec-string-to-bigint","info":" |ToBigInt ( argument )\n\nString:\n\nLet n be StringToBigInt(prim).\nIf n is NaN, throw a SyntaxError exception.\nReturn n.\n\nStringToBigInt ( argument )\n\nReplace the StrUnsignedDecimalLiteral production with DecimalDigits to not allow Infinity, decimal points, or exponents.\n\n","features":["BigInt"]},{"path":"test/built-ins/BigInt/infinity-throws-rangeerror.js","description":" BigInt throws a RangeError if value is Infinity","esid":" sec-bigint-constructor","info":" |BigInt ( value )\n\n...\n2. Let prim be ? ToPrimitive(value, hint Number).\n3. If Type(prim) is Number, return ? NumberToBigInt(prim).\n...\n\nNumberToBigInt ( number )\n\n...\n2. If IsSafeInteger(number) is false, throw a RangeError exception.\n...\n\nIsSafeInteger ( number )\n\n...\n2. If number is NaN, +∞, or -∞, return false.\n","features":["BigInt"]},{"path":"test/built-ins/BigInt/is-a-constructor.js","esid":" sec-ecmascript-standard-built-in-objects","description":" >BigInt is a constructor, and does implement [[Construct]], but is not new target\n","info":" |sec-bigint-constructor\n\n- is not intended to be used with the new operator or to be subclassed. It may be used as the value of an extends clause of a class definition but a super call to the BigInt constructor will cause an exception.\n\nsec-bigint-constructor-number-value\n\n1. If NewTarget is not undefined, throw a TypeError exception.\n","includes":["isConstructor.js"],"features":["BigInt","Reflect.construct","arrow-function"]},{"path":"test/built-ins/BigInt/length.js","esid":" sec-bigint-constructor-number-value","description":" BigInt.length property descriptor","info":" |BigInt ( value )\n\n17 ECMAScript Standard Built-in Objects\n\nEvery built-in function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description. Optional parameters\n(which are indicated with brackets: [ ]) or rest parameters (which\nare shown using the form «...name») are not included in the default\nargument count.\n\nUnless otherwise specified, the length property of a built-in\nfunction object has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["BigInt"]},{"path":"test/built-ins/BigInt/name.js","esid":" sec-bigint-constructor-number-value","description":" BigInt.name property descriptor","info":" |BigInt ( value )\n\n17 ECMAScript Standard Built-in Objects\n\nEvery built-in function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String. Unless otherwise specified, this value is the name that\nis given to the function in this specification. For functions that\nare specified as properties of objects, the name value is the\nproperty name string used to access the function. [...]\n\nUnless otherwise specified, the name property of a built-in function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["BigInt"]},{"path":"test/built-ins/BigInt/nan-throws-rangeerror.js","description":" BigInt throws a RangeError if value is NaN","esid":" sec-bigint-constructor","info":" |BigInt ( value )\n\n...\n2. Let prim be ? ToPrimitive(value, hint Number).\n3. If Type(prim) is Number, return ? NumberToBigInt(prim).\n...\n\nNumberToBigInt ( number )\n\n...\n2. If IsSafeInteger(number) is false, throw a RangeError exception.\n...\n\nIsSafeInteger ( number )\n\n...\n2. If number is NaN, +∞, or -∞, return false.\n","features":["BigInt"]},{"path":"test/built-ins/BigInt/negative-infinity-throws.rangeerror.js","description":" BigInt throws a RangeError if value is Infinity","esid":" sec-bigint-constructor","info":" |BigInt ( value )\n\n...\n2. Let prim be ? ToPrimitive(value, hint Number).\n3. If Type(prim) is Number, return ? NumberToBigInt(prim).\n...\n\nNumberToBigInt ( number )\n\n...\n2. If IsSafeInteger(number) is false, throw a RangeError exception.\n...\n\nIsSafeInteger ( number )\n\n...\n2. If number is NaN, +∞, or -∞, return false.\n","features":["BigInt"]},{"path":"test/built-ins/BigInt/non-integer-rangeerror.js","description":" Non integer number values will throw a RangeError","esid":" sec-bigint-constructor","info":" |BigInt ( value )\n\n...\n2. Let prim be ? ToPrimitive(value, hint Number).\n3. If Type(prim) is Number, return ? NumberToBigInt(prim).\n...\n\nNumberToBigInt ( number )\n\n...\n2. If IsSafeInteger(number) is false, throw a RangeError exception.\n...\n\nIsSafeInteger ( number )\n\n...\n2. If number is NaN, +∞, or -∞, return false.\n3. Let integer be ToInteger(number).\n4. If integer is not equal to number, return false.\n...\n","features":["BigInt"]},{"path":"test/built-ins/BigInt/parseInt/nonexistent.js","description":" BigInt does not have a static parseInt function","features":["BigInt"]},{"path":"test/built-ins/BigInt/prop-desc.js","esid":" sec-bigint-constructor","description":" >Property descriptor of BigInt\n","info":" |The BigInt Object\n\nECMAScript Standard Built-in Objects:\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2\nhas the attributes { [[Writable]]: true, [[Enumerable]]: false,\n[[Configurable]]: true } unless otherwise specified.\n","includes":["propertyHelper.js"],"features":["BigInt"]},{"path":"test/built-ins/BigInt/proto.js","description":" The prototype of BigInt constructor is Function.prototype","esid":" sec-properties-of-the-bigint-constructor","info":" |The value of the [[Prototype]] internal slot of the BigInt constructor is the\nintrinsic object %FunctionPrototype%.\n","features":["BigInt"]},{"path":"test/built-ins/BigInt/prototype/Symbol.toStringTag.js","esid":" sec-bigint-@@tostringtag","description":" >`Symbol.toStringTag` property descriptor\n","info":" |The initial value of the @@toStringTag property is the String value\n\"BigInt\".\n\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]:\nfalse, [[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["BigInt","Symbol","Symbol.toStringTag"]},{"path":"test/built-ins/BigInt/prototype/constructor.js","esid":" sec-bigint.prototype.constructor","description":" BigInt.prototype.constructor property descriptor","info":" |BigInt.prototype.constructor\n\nThe initial value of BigInt.prototype.constructor is the intrinsic\nobject %BigInt%.\n\nThe BigInt Constructor\n\nThe BigInt constructor is the %BigInt% intrinsic object and the\ninitial value of the BigInt property of the global object. When BigInt\nis called as a function, it performs a type conversion.\n\n17 ECMAScript Standard Built-in Objects\n","includes":["propertyHelper.js"],"features":["BigInt"]},{"path":"test/built-ins/BigInt/prototype/prop-desc.js","description":" The property descriptor BigInt.prototype","esid":" sec-bigint.prototype","info":" |This property has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: false }.\n","features":["BigInt"],"includes":["propertyHelper.js"]},{"path":"test/built-ins/BigInt/prototype/proto.js","description":" The prototype of BigInt.prototype is Object.prototype","esid":" sec-properties-of-the-bigint-prototype-object","info":" |The value of the [[Prototype]] internal slot of the BigInt prototype object\nis the intrinsic object %ObjectPrototype%.\n","features":["BigInt"]},{"path":"test/built-ins/BigInt/prototype/toString/length.js","esid":" sec-bigint.prototype.tostring","description":" BigInt.prototype.toString.length property descriptor","info":" |BigInt.prototype.toString ( [ radix ] )\n\n17 ECMAScript Standard Built-in Objects\n","includes":["propertyHelper.js"],"features":["BigInt"]},{"path":"test/built-ins/BigInt/prototype/toString/name.js","esid":" sec-bigint.prototype.tostring","description":" BigInt.prototype.toString.name property descriptor","info":" |BigInt.prototype.toString ( [ radix ] )\n\n17 ECMAScript Standard Built-in Objects\n","includes":["propertyHelper.js"],"features":["BigInt"]},{"path":"test/built-ins/BigInt/prototype/toString/prop-desc.js","esid":" sec-bigint.prototype.tostring","description":" BigInt.prototype.toString property descriptor","info":" |BigInt.prototype.toString ( [ radix ] )\n\n17 ECMAScript Standard Built-in Objects\n","includes":["propertyHelper.js"],"features":["BigInt"]},{"path":"test/built-ins/BigInt/prototype/toString/prototype-call.js","esid":" sec-bigint.prototype.tostring","description":" Direct toString on BigInt prototype","info":" |BigInt.prototype.toString ( [ radix ] )\n\nLet x be ? thisBigIntValue(this value).\n\nProperties of the BigInt Prototype Object\n\nThe BigInt prototype is not a BigInt object; it does not have a\n[[BigIntData]] internal slot.\n","features":["BigInt"]},{"path":"test/built-ins/BigInt/prototype/valueOf/length.js","esid":" sec-bigint.prototype.valueof","description":" BigInt.prototype.valueOf.length property descriptor","info":" |BigInt.prototype.valueOf ( )\n\n17 ECMAScript Standard Built-in Objects\n","includes":["propertyHelper.js"],"features":["BigInt"]},{"path":"test/built-ins/BigInt/prototype/valueOf/name.js","esid":" sec-bigint.prototype.valueof","description":" BigInt.prototype.valueOf.name property descriptor","info":" |BigInt.prototype.valueOf ( )\n\n17 ECMAScript Standard Built-in Objects\n","includes":["propertyHelper.js"],"features":["BigInt"]},{"path":"test/built-ins/BigInt/prototype/valueOf/prop-desc.js","esid":" sec-bigint.prototype.valueof","description":" BigInt.prototype.valueOf property descriptor","info":" |BigInt.prototype.valueOf ( )\n\n17 ECMAScript Standard Built-in Objects\n","includes":["propertyHelper.js"],"features":["BigInt"]},{"path":"test/built-ins/BigInt/prototype/valueOf/this-value-invalid-object-throws.js","esid":" sec-bigint.prototype.valueof","description":" >Throws a TypeError if this is an Object without a [[BigIntData]] internal.\n","info":" |BigInt.prototype.valueOf ( )\n\n1. Return ? thisBigIntValue(this value).\n\nThe abstract operation thisBigIntValue(value) performs the following steps:\n\n1. If Type(value) is BigInt, return value.\n2. If Type(value) is Object and value has a [[BigIntData]] internal slot, then\n...\n3. Throw a TypeError exception.\n","features":["BigInt"]},{"path":"test/built-ins/BigInt/prototype/valueOf/this-value-invalid-primitive-throws.js","esid":" sec-bigint.prototype.valueof","description":" >Throws a TypeError if this is not a BigInt neither an Object.\n","info":" |BigInt.prototype.valueOf ( )\n\n1. Return ? thisBigIntValue(this value).\n\nThe abstract operation thisBigIntValue(value) performs the following steps:\n\n1. If Type(value) is BigInt, return value.\n2. If Type(value) is Object and value has a [[BigIntData]] internal slot, then\n...\n3. Throw a TypeError exception.\n","features":["BigInt","Symbol"]},{"path":"test/built-ins/BigInt/tostring-throws.js","description":" Throws exception in BigIntConstructor if toString throws","esid":" sec-bigint-constructor-number-value","info":" |1. If NewTarget is not undefined, throw a TypeError exception.\n2. Let prim be ? ToPrimitive(value, hint Number).\n3. If Type(prim) is Number, return ? NumberToBigInt(prim).\n4. Otherwise, return ? ToBigInt(value).\n","features":["BigInt"]},{"path":"test/built-ins/BigInt/valueof-throws.js","description":" Throws exception in BigIntConstructor if valueOf throws","esid":" sec-bigint-constructor-number-value","info":" |1. If NewTarget is not undefined, throw a TypeError exception.\n2. Let prim be ? ToPrimitive(value, hint Number).\n3. If Type(prim) is Number, return ? NumberToBigInt(prim).\n4. Otherwise, return ? ToBigInt(value).\n","features":["BigInt"]},{"path":"test/built-ins/DataView/prototype/getBigInt64/index-is-out-of-range.js","esid":" sec-dataview.prototype.getbigint64","description":" >Throws a RangeError if getIndex + elementSize > viewSize\n","info":" |DataView.prototype.getBigInt64 ( byteOffset [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be undefined.\n3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Int64\").\n\n24.3.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\n\n...\n10. Let viewOffset be the value of view's [[ByteOffset]] internal slot.\n11. Let viewSize be the value of view's [[ByteLength]] internal slot.\n12. Let elementSize be the Number value of the Element Size value specified in\nTable 50 for Element Type type.\n13. If getIndex + elementSize > viewSize, throw a RangeError exception.\n...\n","features":["DataView","ArrayBuffer","BigInt","arrow-function"]},{"path":"test/built-ins/DataView/prototype/getBigInt64/length.js","esid":" sec-dataview.prototype.getbigint64","description":" DataView.prototype.getBigInt64.length property descriptor","info":" |DataView.prototype.getBigInt64 ( byteOffset [ , littleEndian ] )\n\n17 ECMAScript Standard Built-in Objects\n\nEvery built-in function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description. Optional parameters\n(which are indicated with brackets: [ ]) or rest parameters (which\nare shown using the form «...name») are not included in the default\nargument count.\n\nUnless otherwise specified, the length property of a built-in\nfunction object has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["DataView","ArrayBuffer","BigInt"]},{"path":"test/built-ins/DataView/prototype/getBigInt64/name.js","esid":" sec-dataview.prototype.getbigint64","description":" DataView.prototype.getBigInt64.name property descriptor","info":" |DataView.prototype.getBigInt64 ( byteOffset [ , littleEndian ] )\n\n17 ECMAScript Standard Built-in Objects\n\nEvery built-in function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String. Unless otherwise specified, this value is the name that\nis given to the function in this specification. For functions that\nare specified as properties of objects, the name value is the\nproperty name string used to access the function. [...]\n\nUnless otherwise specified, the name property of a built-in function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["DataView","ArrayBuffer","BigInt"]},{"path":"test/built-ins/DataView/prototype/getBigInt64/negative-byteoffset-throws.js","esid":" sec-dataview.prototype.getbigint64","description":" >Throws a RangeError if getIndex < 0\n","info":" |DataView.prototype.getBigInt64 ( byteOffset [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be undefined.\n3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Int64\").\n\n24.3.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\n\n...\n4. Let getIndex be ? ToIndex(requestIndex).\n...\n","features":["DataView","ArrayBuffer","BigInt","arrow-function"]},{"path":"test/built-ins/DataView/prototype/getBigInt64/not-a-constructor.js","esid":" sec-ecmascript-standard-built-in-objects","description":" >DataView.prototype.getBigInt64 does not implement [[Construct]], is not new-able\n","info":" |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n","includes":["isConstructor.js"],"features":["Reflect.construct","BigInt","DataView","arrow-function","ArrayBuffer"]},{"path":"test/built-ins/DataView/prototype/getBigInt64/return-abrupt-from-tonumber-byteoffset-symbol.js","esid":" sec-dataview.prototype.getbigint64","description":" >Return abrupt from ToNumber(symbol byteOffset)\n","info":" |DataView.prototype.getBigInt64 ( byteOffset [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be undefined.\n3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Int64\").\n\n24.3.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\n\n...\n4. Let getIndex be ? ToNumber(requestIndex).\n...\n","features":["DataView","ArrayBuffer","Symbol","BigInt","arrow-function"]},{"path":"test/built-ins/DataView/prototype/getBigInt64/return-abrupt-from-tonumber-byteoffset.js","esid":" sec-dataview.prototype.getbigint64","description":" >Return abrupt from ToNumber(byteOffset)\n","info":" |DataView.prototype.getBigInt64 ( byteOffset [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be undefined.\n3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Int64\").\n\n24.3.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\n\n...\n4. Let getIndex be ? ToNumber(requestIndex).\n...\n","features":["DataView","ArrayBuffer","BigInt","arrow-function"]},{"path":"test/built-ins/DataView/prototype/getBigInt64/this-has-no-dataview-internal.js","esid":" sec-dataview.prototype.getbigint64","description":" >Throws a TypeError if this does not have a [[DataView]] internal slot\n","info":" |DataView.prototype.getBigInt64 ( byteOffset [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be undefined.\n3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Int64\").\n\n24.3.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\n\n1. If Type(view) is not Object, throw a TypeError exception.\n2. If view does not have a [[DataView]] internal slot, throw a TypeError\nexception.\n...\n","features":["DataView","ArrayBuffer","Int8Array","BigInt","arrow-function"]},{"path":"test/built-ins/DataView/prototype/getBigInt64/this-is-not-object.js","esid":" sec-dataview.prototype.getbigint64","description":" Throws a TypeError if this is not Object","info":" |DataView.prototype.getBigInt64 ( byteOffset [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be undefined.\n3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Int64\").\n\n24.3.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\n\n1. If Type(view) is not Object, throw a TypeError exception.\n...\n","features":["DataView","ArrayBuffer","Symbol","BigInt","arrow-function"]},{"path":"test/built-ins/DataView/prototype/getBigUint64/index-is-out-of-range.js","esid":" sec-dataview.prototype.getbiguint64","description":" >Throws a RangeError if getIndex + elementSize > viewSize\n","features":["DataView","ArrayBuffer","BigInt","arrow-function"]},{"path":"test/built-ins/DataView/prototype/getBigUint64/length.js","esid":" sec-dataview.prototype.getbiguint64","description":" DataView.prototype.getBigUint64.length property descriptor","includes":["propertyHelper.js"],"features":["DataView","ArrayBuffer","BigInt"]},{"path":"test/built-ins/DataView/prototype/getBigUint64/name.js","esid":" sec-dataview.prototype.getbiguint64","description":" DataView.prototype.getBigUint64.name property descriptor","includes":["propertyHelper.js"],"features":["DataView","ArrayBuffer","BigInt"]},{"path":"test/built-ins/DataView/prototype/getBigUint64/negative-byteoffset-throws.js","esid":" sec-dataview.prototype.getbiguint64","description":" >Throws a RangeError if getIndex < 0\n","features":["DataView","ArrayBuffer","BigInt","arrow-function"]},{"path":"test/built-ins/DataView/prototype/getBigUint64/not-a-constructor.js","esid":" sec-ecmascript-standard-built-in-objects","description":" >DataView.prototype.getBigUint64 does not implement [[Construct]], is not new-able\n","info":" |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n","includes":["isConstructor.js"],"features":["Reflect.construct","DataView","arrow-function","ArrayBuffer"]},{"path":"test/built-ins/DataView/prototype/getBigUint64/return-abrupt-from-tonumber-byteoffset-symbol.js","esid":" sec-dataview.prototype.getbiguint64","description":" >Return abrupt from ToNumber(symbol byteOffset)\n","features":["DataView","ArrayBuffer","Symbol","BigInt","arrow-function"]},{"path":"test/built-ins/DataView/prototype/getBigUint64/return-abrupt-from-tonumber-byteoffset.js","esid":" sec-dataview.prototype.getbiguint64","description":" >Return abrupt from ToNumber(byteOffset)\n","features":["DataView","ArrayBuffer","BigInt","arrow-function"]},{"path":"test/built-ins/DataView/prototype/getBigUint64/this-has-no-dataview-internal.js","esid":" sec-dataview.prototype.getbiguint64","description":" >Throws a TypeError if this does not have a [[DataView]] internal slot\n","features":["DataView","ArrayBuffer","Int8Array","BigInt","arrow-function"]},{"path":"test/built-ins/DataView/prototype/getBigUint64/this-is-not-object.js","esid":" sec-dataview.prototype.getbiguint64","description":" Throws a TypeError if this is not Object","features":["DataView","ArrayBuffer","Symbol","BigInt","arrow-function"]},{"path":"test/built-ins/DataView/prototype/setBigInt64/index-check-before-value-conversion.js","esid":" sec-dataview.prototype.setbigint64","description":" >RangeError exception for negative or non-integral index is thrown before\nthe value conversion.\n","features":["DataView","ArrayBuffer","BigInt"]},{"path":"test/built-ins/DataView/prototype/setBigInt64/length.js","esid":" sec-dataview.prototype.setbigint64","description":" DataView.prototype.setBigInt64.length property descriptor","includes":["propertyHelper.js"],"features":["DataView","ArrayBuffer","BigInt"]},{"path":"test/built-ins/DataView/prototype/setBigInt64/name.js","esid":" sec-dataview.prototype.setbigint64","description":" DataView.prototype.setBigInt64.name property descriptor","includes":["propertyHelper.js"],"features":["DataView","ArrayBuffer","BigInt"]},{"path":"test/built-ins/DataView/prototype/setBigInt64/no-value-arg.js","esid":" sec-dataview.prototype.setbigint64","description":" >Set value as undefined (cast to 0) when value argument is not present\n","features":["DataView","ArrayBuffer","BigInt","arrow-function"]},{"path":"test/built-ins/DataView/prototype/setBigInt64/not-a-constructor.js","esid":" sec-ecmascript-standard-built-in-objects","description":" >DataView.prototype.setBigInt64 does not implement [[Construct]], is not new-able\n","info":" |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n","includes":["isConstructor.js"],"features":["Reflect.construct","BigInt","DataView","arrow-function","ArrayBuffer"]},{"path":"test/built-ins/DataView/prototype/setBigInt64/range-check-after-value-conversion.js","esid":" sec-dataview.prototype.setbigint64","description":" >Index bounds checks are performed after value conversion.\n","features":["DataView","ArrayBuffer","BigInt"]},{"path":"test/built-ins/DataView/prototype/setBigInt64/return-abrupt-from-tobigint-value-symbol.js","esid":" sec-dataview.prototype.setbigint64","description":" >Return abrupt from ToBigInt(symbol value)\n","features":["DataView","ArrayBuffer","Symbol","BigInt"]},{"path":"test/built-ins/DataView/prototype/setBigInt64/return-abrupt-from-tobigint-value.js","esid":" sec-dataview.prototype.setbigint64","description":" >Return abrupt from ToBigInt(value)\n","features":["DataView","ArrayBuffer","BigInt"]},{"path":"test/built-ins/DataView/prototype/setBigInt64/set-values-return-undefined.js","esid":" sec-dataview.prototype.setbigint64","description":" >Set values and return undefined\n","includes":["byteConversionValues.js"],"features":["DataView","ArrayBuffer","BigInt","arrow-function"]},{"path":"test/built-ins/DataView/prototype/setBigInt64/this-has-no-dataview-internal.js","esid":" sec-dataview.prototype.setbigint64","description":" >Throws a TypeError if this does not have a [[DataView]] internal slot\n","features":["DataView","ArrayBuffer","BigInt"]},{"path":"test/built-ins/DataView/prototype/setBigInt64/this-is-not-object.js","esid":" sec-dataview.prototype.setbigint64","description":" Throws a TypeError if this is not Object","features":["DataView","ArrayBuffer","Symbol","BigInt"]},{"path":"test/built-ins/DataView/prototype/setBigUint64/not-a-constructor.js","esid":" sec-ecmascript-standard-built-in-objects","description":" >DataView.prototype.setBigUint64 does not implement [[Construct]], is not new-able\n","info":" |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n","includes":["isConstructor.js"],"features":["Reflect.construct","DataView","arrow-function","ArrayBuffer"]},{"path":"test/built-ins/JSON/stringify/value-bigint-cross-realm.js","esid":" sec-serializejsonproperty","description":" JSON.stringify called with a BigInt object from another realm","features":["BigInt","cross-realm"]},{"path":"test/built-ins/Object/prototype/toString/symbol-tag-non-str-bigint.js","esid":" sec-object.prototype.tostring","description":" Non-string values of `@@toStringTag` property are ignored","info":" |14. Else, let builtinTag be \"Object\".\n15. Let tag be ? Get(O, @@toStringTag).\n16. If Type(tag) is not String, let tag be builtinTag.\n17. Return the string-concatenation of \"[object \", tag, and \"]\".\n","features":["BigInt","Symbol.toStringTag"]},{"path":"test/built-ins/Object/prototype/toString/symbol-tag-override-bigint.js","esid":" sec-object.prototype.tostring","description":" String values of `@@toStringTag` property override built-in tags","info":" |15. Let tag be ? Get(O, @@toStringTag).\n16. If Type(tag) is not String, let tag be builtinTag.\n17. Return the string-concatenation of \"[object \", tag, and \"]\".\n","features":["BigInt","Symbol.toStringTag"]},{"path":"test/built-ins/Object/seal/seal-bigint64array.js","esid":" sec-object.seal","description":" >Object.seal BigInt64Array\n","info":" |If Type(O) is not Object, return O.\nLet status be ? SetIntegrityLevel(O, sealed).\n\nSetIntegrityLevel ( O, level )\n\nAssert: Type(O) is Object.\nAssert: level is either sealed or frozen.\nLet status be ? O.[[PreventExtensions]]().\nIf status is false, return false.\nLet keys be ? O.[[OwnPropertyKeys]]().\nIf level is sealed, then\nFor each element k of keys, do\nPerform ? DefinePropertyOrThrow(O, k, PropertyDescriptor { [[Configurable]]: false }).\nElse,\nAssert: level is frozen.\nFor each element k of keys, do\nLet currentDesc be ? O.[[GetOwnProperty]](k).\nIf currentDesc is not undefined, then\nIf IsAccessorDescriptor(currentDesc) is true, then\nLet desc be the PropertyDescriptor { [[Configurable]]: false }.\nElse,\nLet desc be the PropertyDescriptor { [[Configurable]]: false, [[Writable]]: false }.\nPerform ? DefinePropertyOrThrow(O, k, desc).\nReturn true.\n\n"},{"path":"test/built-ins/Object/seal/seal-biguint64array.js","esid":" sec-object.seal","description":" >Object.seal BigUint64Array\n","info":" |If Type(O) is not Object, return O.\nLet status be ? SetIntegrityLevel(O, sealed).\n\nSetIntegrityLevel ( O, level )\n\nAssert: Type(O) is Object.\nAssert: level is either sealed or frozen.\nLet status be ? O.[[PreventExtensions]]().\nIf status is false, return false.\nLet keys be ? O.[[OwnPropertyKeys]]().\nIf level is sealed, then\nFor each element k of keys, do\nPerform ? DefinePropertyOrThrow(O, k, PropertyDescriptor { [[Configurable]]: false }).\nElse,\nAssert: level is frozen.\nFor each element k of keys, do\nLet currentDesc be ? O.[[GetOwnProperty]](k).\nIf currentDesc is not undefined, then\nIf IsAccessorDescriptor(currentDesc) is true, then\nLet desc be the PropertyDescriptor { [[Configurable]]: false }.\nElse,\nLet desc be the PropertyDescriptor { [[Configurable]]: false, [[Writable]]: false }.\nPerform ? DefinePropertyOrThrow(O, k, desc).\nReturn true.\n\n"},{"path":"test/built-ins/Promise/allSettled/call-resolve-element-after-return.js","esid":" sec-promise.allsettled-resolve-element-functions","description":" >Cannot change result value of resolved Promise.allSettled element after Promise.allSettled() returned.\n","info":" |Promise.allSettled Resolve Element Functions\n\n1. Let F be the active function object.\n2. Let alreadyCalled be F.[[AlreadyCalled]].\n3. If alreadyCalled.[[Value]] is true, return undefined.\n4. Set alreadyCalled.[[Value]] to true.\n...\n","includes":["promiseHelper.js"],"features":["Promise.allSettled"]},{"path":"test/built-ins/Promise/allSettled/call-resolve-element-items.js","esid":" sec-promise.allsettled-resolve-element-functions","description":" >Cannot change result value of resolved Promise.allSettled elements.\n","info":" |Promise.allSettled Resolve Element Functions\n\n1. Let F be the active function object.\n2. Let alreadyCalled be F.[[AlreadyCalled]].\n3. If alreadyCalled.[[Value]] is true, return undefined.\n4. Set alreadyCalled.[[Value]] to true.\n...\n","includes":["promiseHelper.js"],"features":["Promise.allSettled"]},{"path":"test/built-ins/Promise/allSettled/call-resolve-element.js","esid":" sec-promise.allsettled-resolve-element-functions","description":" >Cannot change result value of resolved Promise.allSettled element.\n","info":" |Promise.allSettled Resolve Element Functions\n\n1. Let F be the active function object.\n2. Let alreadyCalled be F.[[AlreadyCalled]].\n3. If alreadyCalled.[[Value]] is true, return undefined.\n4. Set alreadyCalled.[[Value]] to true.\n...\n","includes":["promiseHelper.js"],"features":["Promise.allSettled"]},{"path":"test/built-ins/Promise/allSettled/capability-executor-called-twice.js","esid":" sec-promise.allsettled","description":" >Throws a TypeError if capabilities executor already called with non-undefined values.\n","info":" |Promise.allSettled ( iterable )\n\n...\n3. Let promiseCapability be ? NewPromiseCapability(C).\n...\n\nGetCapabilitiesExecutor Functions\n\n...\n4. If promiseCapability.[[Resolve]] is not undefined, throw a TypeError exception.\n5. If promiseCapability.[[Reject]] is not undefined, throw a TypeError exception.\n6. Set promiseCapability.[[Resolve]] to resolve.\n7. Set promiseCapability.[[Reject]] to reject.\n...\n","features":["Promise.allSettled"]},{"path":"test/built-ins/Promise/allSettled/capability-executor-not-callable.js","esid":" sec-promise.allsettled","description":" >Throws a TypeError if either resolve or reject capability is not callable.\n","info":" |Promise.allSettled ( iterable )\n\n...\n3. Let promiseCapability be ? NewPromiseCapability(C).\n...\n\nNewPromiseCapability ( C )\n\n...\n5. Let executor be CreateBuiltinFunction(steps, « [[Capability]] »).\n6. Set executor.[[Capability]] to promiseCapability.\n7. Let promise be ? Construct(C, « executor »).\n8. If IsCallable(promiseCapability.[[Resolve]]) is false, throw a TypeError exception.\n9. If IsCallable(promiseCapability.[[Reject]]) is false, throw a TypeError exception.\n...\n","features":["Promise.allSettled"]},{"path":"test/built-ins/Promise/allSettled/capability-resolve-throws-no-close.js","esid":" sec-promise.allsettled","description":" >Iterator is not closed when the \"resolve\" capability returns an abrupt\ncompletion.\n","info":" |...\n3. Let promiseCapability be ? NewPromiseCapability(C).\n...\n6. Let result be PerformPromiseAllSettled(iteratorRecord, C, promiseCapability).\n7. If result is an abrupt completion, then\na. If iteratorRecord.[[Done]] is false, set result to IteratorClose(iteratorRecord, result).\nb. IfAbruptRejectPromise(result, promiseCapability).\n8. Return Completion(result).\n\nRuntime Semantics: PerformPromiseAllSettled\n\n...\n6. Repeat\n...\nd. If next is false, then\n...\niii. If remainingElementsCount.[[Value]] is 0, then\n1. Let valuesArray be CreateArrayFromList(values).\n2. Perform ? Call(resultCapability.[[Resolve]], undefined, « valuesArray »).\n\nIfAbruptRejectPromise\n\n1. IfAbruptRejectPromise(value, capability).\n","features":["Promise.allSettled","Symbol.iterator"]},{"path":"test/built-ins/Promise/allSettled/capability-resolve-throws-reject.js","esid":" sec-promise.allsettled","description":" >Promise is rejected when the \"resolve\" capability returns an abrupt\ncompletion.\n","info":" |...\n3. Let promiseCapability be ? NewPromiseCapability(C).\n...\n6. Let result be PerformPromiseAllSettled(iteratorRecord, C, promiseCapability).\n7. If result is an abrupt completion, then\na. If iteratorRecord.[[Done]] is false, set result to IteratorClose(iteratorRecord, result).\nb. IfAbruptRejectPromise(result, promiseCapability).\n8. Return Completion(result).\n\nRuntime Semantics: PerformPromiseAllSettled\n\n...\n6. Repeat\n...\nd. If next is false, then\n...\niii. If remainingElementsCount.[[Value]] is 0, then\n1. Let valuesArray be CreateArrayFromList(values).\n2. Perform ? Call(resultCapability.[[Resolve]], undefined, « valuesArray »).\n\n\nIfAbruptRejectPromise\n\n1. IfAbruptRejectPromise(value, capability).\n","flags":["async"],"features":["Promise.allSettled"]},{"path":"test/built-ins/Promise/allSettled/ctx-ctor-throws.js","description":" >Promise.allSettled invoked on a constructor value that throws an error\n","esid":" sec-promise.allsettled","info":" |3. Let promiseCapability be ? NewPromiseCapability(C).\n\nNewPromiseCapability\n\n...\n7. Let promise be ? Construct(C, « executor »).\n","features":["Promise.allSettled"]},{"path":"test/built-ins/Promise/allSettled/ctx-non-ctor.js","description":" >Promise.allSettled invoked on a non-constructor value\n","esid":" sec-promise.allsettled","info":" |...\n3. Let promiseCapability be ? NewPromiseCapability(C).\n\nNewPromiseCapability ( C )\n\n1. If IsConstructor(C) is false, throw a TypeError exception.\n","features":["Promise.allSettled"]},{"path":"test/built-ins/Promise/allSettled/ctx-non-object.js","description":" >Promise.allSettled invoked on a non-object value\n","esid":" sec-promise.allsettled","info":" |1. Let C be the this value.\n2. If Type(C) is not Object, throw a TypeError exception.\n","features":["Promise.allSettled","Symbol"]},{"path":"test/built-ins/Promise/allSettled/does-not-invoke-array-setters.js","esid":" sec-performpromiseallsettled","description":" >Indexed setter properties on Array.prototype are not invoked.\n","info":" |Promise.allSettled ( iterable )\n\n6. Let result be PerformPromiseAllSettled(iteratorRecord, C, promiseCapability).\n7. If result is an abrupt completion, then\na. If iteratorRecord.[[Done]] is false, set result to IteratorClose(iteratorRecord, result).\nb, IfAbruptRejectPromise(result, promiseCapability).\n\nRuntime Semantics: PerformPromiseAllSettled ( iteratorRecord, constructor, resultCapability )\n\n...\n4. Let remainingElementsCount be a new Record { [[value]]: 1 }.\n...\n6.d ...\nii. Set remainingElementsCount.[[value]] to remainingElementsCount.[[value]] − 1.\niii. If remainingElementsCount.[[value]] is 0,\n1. Let valuesArray be CreateArrayFromList(values).\n...\n...\n\n7.3.16 CreateArrayFromList (elements)\n...\n4. For each element e of elements\na. Let status be CreateDataProperty(array, ToString(n), e).\nb. Assert: status is true.\n...\n","flags":["async"],"features":["Promise.allSettled"]},{"path":"test/built-ins/Promise/allSettled/invoke-resolve-error-close.js","description":" >Explicit iterator closing in response to error\n","esid":" sec-promise.allsettled","info":" |6. Let result be PerformPromiseAllSettled(iteratorRecord, C, promiseCapability).\n7. If result is an abrupt completion, then\na. If iteratorRecord.[[Done]] is false, set result to IteratorClose(iteratorRecord, result).\nb. IfAbruptRejectPromise(result, promiseCapability).\n\nRuntime Semantics: PerformPromiseAllSettled\n\n6. Repeat\n...\ni. Let nextPromise be ? Invoke(constructor, \"resolve\", « nextValue »).\n","features":["Promise.allSettled","Symbol.iterator"]},{"path":"test/built-ins/Promise/allSettled/invoke-resolve-error-reject.js","description":" Promise rejection in response to error","esid":" sec-promise.allsettled","info":" |6. Let result be PerformPromiseAllSettled(iteratorRecord, C, promiseCapability).\n7. If result is an abrupt completion, then\na. If iteratorRecord.[[Done]] is false, set result to IteratorClose(iteratorRecord, result).\nb. IfAbruptRejectPromise(result, promiseCapability).\n\nRuntime Semantics: PerformPromiseAllSettled\n\n6. Repeat\n...\ni. Let nextPromise be ? Invoke(constructor, \"resolve\", « nextValue »).\n","flags":["async"],"features":["Promise.allSettled"]},{"path":"test/built-ins/Promise/allSettled/invoke-resolve-get-error-reject.js","description":" >Error retrieving the constructor's `resolve` method (rejecting promise)\n","esid":" sec-promise.allsettled","info":" |6. Let result be PerformPromiseAllSettled(iteratorRecord, C, promiseCapability).\n7. If result is an abrupt completion, then\na. If iteratorRecord.[[Done]] is false, set result to IteratorClose(iteratorRecord, result).\nb. IfAbruptRejectPromise(result, promiseCapability).\n\nRuntime Semantics: PerformPromiseAllSettled\n\n6. Repeat\n...\ni. Let nextPromise be ? Invoke(constructor, \"resolve\", « nextValue »).\n","flags":["async"],"features":["Promise.allSettled"]},{"path":"test/built-ins/Promise/allSettled/invoke-resolve-get-error.js","esid":" sec-promise.allsettled","description":" >Promise.resolve is retrieved before GetIterator call (abrupt lookup).\n","info":" |Promise.allSettled ( iterable )\n\n[...]\n3. Let promiseResolve be GetPromiseResolve(C).\n4. IfAbruptRejectPromise(promiseResolve, promiseCapability).\n\nGetPromiseResolve ( promiseConstructor )\n\n[...]\n2. Let promiseResolve be ? Get(promiseConstructor, \"resolve\").\n","flags":["async"],"features":["Promise.allSettled","Symbol.iterator"]},{"path":"test/built-ins/Promise/allSettled/invoke-resolve-get-once-multiple-calls.js","description":" >Gets constructor's `resolve` method once from zero to many invocations.\n","esid":" sec-promise.allsettled","info":" |6. Let result be PerformPromiseAllSettled(iteratorRecord, C, promiseCapability).\n\nRuntime Semantics: PerformPromiseAllSettled\n\n6. Let promiseResolve be ? Get(constructor, `\"resolve\"`).\n7. 1. If IsCallable(promiseResolve) is false, throw a TypeError exception.\n8. Repeat\n...\ni. Let nextPromise be ? Call(promiseResolve, constructor, « nextValue »).\n","features":["Promise.allSettled"]},{"path":"test/built-ins/Promise/allSettled/invoke-resolve-get-once-no-calls.js","description":" >Gets constructor's `resolve` method once from zero to many invocations.\n","esid":" sec-promise.allsettled","info":" |6. Let result be PerformPromiseAllSettled(iteratorRecord, C, promiseCapability).\n\nRuntime Semantics: PerformPromiseAllSettled\n\n6. Let promiseResolve be ? Get(constructor, `\"resolve\"`).\n7. 1. If IsCallable(promiseResolve) is false, throw a TypeError exception.\n8. Repeat\n...\ni. Let nextPromise be ? Call(promiseResolve, constructor, « nextValue »).\n","features":["Promise.allSettled"]},{"path":"test/built-ins/Promise/allSettled/invoke-resolve-on-promises-every-iteration-of-custom.js","description":" >Invocation of the constructor's `resolve` method for iterable with promise values\n","esid":" sec-promise.allSettled","info":" |7. Let result be PerformPromiseAllSettled(iteratorRecord, C, promiseCapability).\n\nRuntime Semantics: PerformPromiseAllSettled\n\n7. Repeat\n...\ni. Let nextPromise be ? Call(promiseResolve, constructor, « nextValue »).\n\n","flags":["async"],"features":["Promise.allSettled","class","arrow-function"]},{"path":"test/built-ins/Promise/allSettled/invoke-resolve-on-promises-every-iteration-of-promise.js","description":" >Invocation of the constructor's `resolve` method for iterable with promise values\n","esid":" sec-promise.allSettled","info":" |7. Let result be PerformPromiseAllSettled(iteratorRecord, C, promiseCapability).\n\nRuntime Semantics: PerformPromiseAllSettled\n\n7. Repeat\n...\ni. Let nextPromise be ? Call(promiseResolve, constructor, « nextValue »).\n\n","flags":["async"],"features":["Promise.allSettled","arrow-function"]},{"path":"test/built-ins/Promise/allSettled/invoke-resolve-on-values-every-iteration-of-promise.js","description":" >Invocation of the constructor's `resolve` method for iterable with non-promise values\n","esid":" sec-promise.allSettled","info":" |5. Let result be PerformPromiseAllSettled(iteratorRecord, C, promiseCapability).\n\nRuntime Semantics: PerformPromiseAllSettled\n\n8. Repeat\n...\ni. Let nextPromise be ? Call(promiseResolve, constructor, « nextValue »).\n\n","flags":["async"],"features":["Promise.allSettled","arrow-function"]},{"path":"test/built-ins/Promise/allSettled/invoke-resolve-return.js","description":" Use of the value returned by the constructor's `resolve` method.","esid":" sec-promise.allsettled","info":" |6. Let result be PerformPromiseAllSettled(iteratorRecord, C, promiseCapability).\n\nRuntime Semantics: PerformPromiseAllSettled\n\n6. Repeat\n...\ni. Let nextPromise be ? Invoke(constructor, \"resolve\", « nextValue »).\n...\nz. Perform ? Invoke(nextPromise, \"then\", « resolveElement, rejectElement »).\n","features":["Promise.allSettled"]},{"path":"test/built-ins/Promise/allSettled/invoke-resolve.js","description":" >Invocation of the constructor's `resolve` method\n","esid":" sec-promise.allsettled","info":" |6. Let result be PerformPromiseAllSettled(iteratorRecord, C, promiseCapability).\n\nRuntime Semantics: PerformPromiseAllSettled\n\n6. Repeat\n...\ni. Let nextPromise be ? Invoke(constructor, \"resolve\", « nextValue »).\n...\nz. Perform ? Invoke(nextPromise, \"then\", « resolveElement, rejectElement »).\n","features":["Promise.allSettled"]},{"path":"test/built-ins/Promise/allSettled/invoke-then-error-close.js","description":" >Error thrown when invoking the instance's `then` method (closing iterator)\n","esid":" sec-promise.allsettled","info":" |6. Let result be PerformPromiseAllSettled(iteratorRecord, C, promiseCapability).\n7. If result is an abrupt completion, then\na. If iteratorRecord.[[Done]] is false, set result to IteratorClose(iteratorRecord, result).\nb. IfAbruptRejectPromise(result, promiseCapability).\n\nRuntime Semantics: PerformPromiseAllSettled\n\nz. Perform ? Invoke(nextPromise, \"then\", « resolveElement, rejectElement »).\n","features":["Promise.allSettled","Symbol.iterator"]},{"path":"test/built-ins/Promise/allSettled/invoke-then-error-reject.js","description":" >Error thrown when invoking the instance's `then` method (rejecting Promise)\n","esid":" sec-promise.allsettled","info":" |6. Let result be PerformPromiseAllSettled(iteratorRecord, C, promiseCapability).\n7. If result is an abrupt completion, then\na. If iteratorRecord.[[Done]] is false, set result to IteratorClose(iteratorRecord, result).\nb. IfAbruptRejectPromise(result, promiseCapability).\n\nRuntime Semantics: PerformPromiseAllSettled\n\nz. Perform ? Invoke(nextPromise, \"then\", « resolveElement, rejectElement »).\n","flags":["async"],"features":["Promise.allSettled"]},{"path":"test/built-ins/Promise/allSettled/invoke-then-get-error-close.js","description":" >Error thrown when accesing the instance's `then` method (closing iterator)\n","esid":" sec-promise.allsettled","info":" |6. Let result be PerformPromiseAllSettled(iteratorRecord, C, promiseCapability).\n7. If result is an abrupt completion, then\na. If iteratorRecord.[[Done]] is false, set result to IteratorClose(iteratorRecord, result).\nb. IfAbruptRejectPromise(result, promiseCapability).\n\nRuntime Semantics: PerformPromiseAllSettled\n\nz. Perform ? Invoke(nextPromise, \"then\", « resolveElement, rejectElement »).\n","features":["Promise.allSettled","Symbol.iterator"]},{"path":"test/built-ins/Promise/allSettled/invoke-then-get-error-reject.js","description":" >Error thrown when accessing the instance's `then` method (rejecting Promise)\n","esid":" sec-promise.allsettled","info":" |6. Let result be PerformPromiseAllSettled(iteratorRecord, C, promiseCapability).\n7. If result is an abrupt completion, then\na. If iteratorRecord.[[Done]] is false, set result to IteratorClose(iteratorRecord, result).\nb. IfAbruptRejectPromise(result, promiseCapability).\n\nRuntime Semantics: PerformPromiseAllSettled\n\nz. Perform ? Invoke(nextPromise, \"then\", « resolveElement, rejectElement »).\n","flags":["async"],"features":["Promise.allSettled"]},{"path":"test/built-ins/Promise/allSettled/invoke-then.js","description":" >Invocation of the instance's `then` method\n","esid":" sec-promise.allsettled","info":" |6. Let result be PerformPromiseAllSettled(iteratorRecord, C, promiseCapability).\n7. If result is an abrupt completion, then\na. If iteratorRecord.[[Done]] is false, set result to IteratorClose(iteratorRecord, result).\nb. IfAbruptRejectPromise(result, promiseCapability).\n\nRuntime Semantics: PerformPromiseAllSettled\n\nz. Perform ? Invoke(nextPromise, \"then\", « resolveElement, rejectElement »).\n","features":["Promise.allSettled"]},{"path":"test/built-ins/Promise/allSettled/is-function.js","esid":" sec-promise.allsettled","description":" Promise.allSettled is callable","features":["Promise.allSettled"]},{"path":"test/built-ins/Promise/allSettled/iter-arg-is-false-reject.js","esid":" sec-promise.allsettled","description":" >Reject when argument is `false`\n","info":" |Promise.allSettled ( iterable )\n\n...\n4. Let iteratorRecord be GetIterator(iterable).\n5. IfAbruptRejectPromise(iteratorRecord, promiseCapability).\n...\n\n#sec-getiterator\nGetIterator ( obj [ , hint [ , method ] ] )\n\n...\nLet iterator be ? Call(method, obj).\nIf Type(iterator) is not Object, throw a TypeError exception.\n...\n","features":["Promise.allSettled","Symbol.iterator"],"flags":["async"]},{"path":"test/built-ins/Promise/allSettled/iter-arg-is-null-reject.js","esid":" sec-promise.allsettled","description":" >Reject when argument is `null`\n","info":" |Promise.allSettled ( iterable )\n\n...\n4. Let iteratorRecord be GetIterator(iterable).\n5. IfAbruptRejectPromise(iteratorRecord, promiseCapability).\n...\n\n#sec-getiterator\nGetIterator ( obj [ , hint [ , method ] ] )\n\n...\nLet iterator be ? Call(method, obj).\nIf Type(iterator) is not Object, throw a TypeError exception.\n...\n","features":["Promise.allSettled","Symbol.iterator"],"flags":["async"]},{"path":"test/built-ins/Promise/allSettled/iter-arg-is-number-reject.js","esid":" sec-promise.allsettled","description":" >Reject when argument is a number\n","info":" |Promise.allSettled ( iterable )\n\n...\n4. Let iteratorRecord be GetIterator(iterable).\n5. IfAbruptRejectPromise(iteratorRecord, promiseCapability).\n...\n\n#sec-getiterator\nGetIterator ( obj [ , hint [ , method ] ] )\n\n...\nLet iterator be ? Call(method, obj).\nIf Type(iterator) is not Object, throw a TypeError exception.\n...\n","features":["Promise.allSettled","Symbol.iterator"],"flags":["async"]},{"path":"test/built-ins/Promise/allSettled/iter-arg-is-poisoned.js","esid":" sec-promise.allsettled","description":" >Reject with abrupt completion from GetIterator\n","info":" |Promise.allSettled ( iterable )\n\n...\n4. Let iteratorRecord be GetIterator(iterable).\n5. IfAbruptRejectPromise(iteratorRecord, promiseCapability).\n...\n\n#sec-getiterator\nGetIterator ( obj [ , hint [ , method ] ] )\n\n...\nLet iterator be ? Call(method, obj).\n...\n","features":["Promise.allSettled","Symbol.iterator"],"flags":["async"]},{"path":"test/built-ins/Promise/allSettled/iter-arg-is-string-resolve.js","esid":" sec-promise.allsettled","description":" >Resolve when argument is a string\n","info":" |Promise.allSettled ( iterable )\n\n...\n4. Let iteratorRecord be GetIterator(iterable).\n5. IfAbruptRejectPromise(iteratorRecord, promiseCapability).\n...\n\n#sec-getiterator\nGetIterator ( obj [ , hint [ , method ] ] )\n\n...\nLet iterator be ? Call(method, obj).\nIf Type(iterator) is not Object, throw a TypeError exception.\n...\n","features":["Promise.allSettled","Symbol.iterator"],"flags":["async"]},{"path":"test/built-ins/Promise/allSettled/iter-arg-is-symbol-reject.js","esid":" sec-promise.allsettled","description":" >Reject when argument is a symbol\n","info":" |Promise.allSettled ( iterable )\n\n...\n4. Let iteratorRecord be GetIterator(iterable).\n5. IfAbruptRejectPromise(iteratorRecord, promiseCapability).\n...\n\nGetIterator ( obj [ , hint [ , method ] ] )\n\n...\n3. If method is not present, then\na. If hint is async, then\n...\nb. Otherwise, set method to ? GetMethod(obj, @@iterator).\n4. Let iterator be ? Call(method, obj).\n5. If Type(iterator) is not Object, throw a TypeError exception.\n...\n\nGetMethod\n\n2. Let func be ? GetV(V, P).\n3. If func is either undefined or null, return undefined.\n4. If IsCallable(func) is false, throw a TypeError exception.\n\nCall ( F, V [ , argumentsList ] )\n\n2. If IsCallable(F) is false, throw a TypeError exception.\n","features":["Promise.allSettled","Symbol.iterator"],"flags":["async"]},{"path":"test/built-ins/Promise/allSettled/iter-arg-is-true-reject.js","esid":" sec-promise.allsettled","description":" >Reject when argument is `true`\n","info":" |Promise.allSettled ( iterable )\n\n...\n4. Let iteratorRecord be GetIterator(iterable).\n5. IfAbruptRejectPromise(iteratorRecord, promiseCapability).\n...\n\nGetIterator ( obj [ , hint [ , method ] ] )\n\n...\n3. If method is not present, then\na. If hint is async, then\n...\nb. Otherwise, set method to ? GetMethod(obj, @@iterator).\n4. Let iterator be ? Call(method, obj).\n5. If Type(iterator) is not Object, throw a TypeError exception.\n...\n\nGetMethod\n\n2. Let func be ? GetV(V, P).\n3. If func is either undefined or null, return undefined.\n4. If IsCallable(func) is false, throw a TypeError exception.\n\nCall ( F, V [ , argumentsList ] )\n\n2. If IsCallable(F) is false, throw a TypeError exception.\n","features":["Promise.allSettled","Symbol.iterator"],"flags":["async"]},{"path":"test/built-ins/Promise/allSettled/iter-arg-is-undefined-reject.js","esid":" sec-promise.allsettled","description":" >Reject when argument is `undefined`\n","info":" |Promise.allSettled ( iterable )\n\n...\n4. Let iteratorRecord be GetIterator(iterable).\n5. IfAbruptRejectPromise(iteratorRecord, promiseCapability).\n...\n\nGetIterator ( obj [ , hint [ , method ] ] )\n\n...\n3. If method is not present, then\na. If hint is async, then\n...\nb. Otherwise, set method to ? GetMethod(obj, @@iterator).\n4. Let iterator be ? Call(method, obj).\n5. If Type(iterator) is not Object, throw a TypeError exception.\n...\n\nGetMethod\n\n2. Let func be ? GetV(V, P).\n3. If func is either undefined or null, return undefined.\n4. If IsCallable(func) is false, throw a TypeError exception.\n\nCall ( F, V [ , argumentsList ] )\n\n2. If IsCallable(F) is false, throw a TypeError exception.\n","features":["Promise.allSettled","Symbol.iterator"],"flags":["async"]},{"path":"test/built-ins/Promise/allSettled/iter-assigned-false-reject.js","esid":" sec-promise.allsettled","description":" >Reject when argument's Symbol.iterator property has the value false\n","info":" |Promise.allSettled ( iterable )\n\n...\n4. Let iteratorRecord be GetIterator(iterable).\n5. IfAbruptRejectPromise(iteratorRecord, promiseCapability).\n...\n\nGetIterator ( obj [ , hint [ , method ] ] )\n\n...\n3. If method is not present, then\na. If hint is async, then\ni. Set method to ? GetMethod(obj, @@asyncIterator).\nii. If method is undefined, then\n1. Let syncMethod be ? GetMethod(obj, @@iterator).\n2. Let syncIteratorRecord be ? GetIterator(obj, sync, syncMethod).\n...\n4. Let iterator be ? Call(method, obj).\n...\n\nGetMethod\n\n2. Let func be ? GetV(V, P).\n3. If func is either undefined or null, return undefined.\n4. If IsCallable(func) is false, throw a TypeError exception.\n\nCall ( F, V [ , argumentsList ] )\n\n2. If IsCallable(F) is false, throw a TypeError exception.\n","features":["Promise.allSettled","Symbol.iterator"],"flags":["async"]},{"path":"test/built-ins/Promise/allSettled/iter-assigned-null-reject.js","esid":" sec-promise.allsettled","description":" >Reject when argument's Symbol.iterator property has the value null\n","info":" |Promise.allSettled ( iterable )\n\n...\n4. Let iteratorRecord be GetIterator(iterable).\n5. IfAbruptRejectPromise(iteratorRecord, promiseCapability).\n...\n\nGetIterator ( obj [ , hint [ , method ] ] )\n\n...\n3. If method is not present, then\na. If hint is async, then\n...\nb. Otherwise, set method to ? GetMethod(obj, @@iterator).\n4. Let iterator be ? Call(method, obj).\n5. If Type(iterator) is not Object, throw a TypeError exception.\n...\n\nGetMethod\n\n2. Let func be ? GetV(V, P).\n3. If func is either undefined or null, return undefined.\n4. If IsCallable(func) is false, throw a TypeError exception.\n\nCall ( F, V [ , argumentsList ] )\n\n2. If IsCallable(F) is false, throw a TypeError exception.\n","features":["Promise.allSettled","Symbol.iterator"],"flags":["async"]},{"path":"test/built-ins/Promise/allSettled/iter-assigned-number-reject.js","esid":" sec-promise.allsettled","description":" >Reject when argument's Symbol.iterator property has the value 1\n","info":" |Promise.allSettled ( iterable )\n\n...\n4. Let iteratorRecord be GetIterator(iterable).\n5. IfAbruptRejectPromise(iteratorRecord, promiseCapability).\n...\n\nGetIterator ( obj [ , hint [ , method ] ] )\n\n...\n3. If method is not present, then\na. If hint is async, then\n...\nb. Otherwise, set method to ? GetMethod(obj, @@iterator).\n4. Let iterator be ? Call(method, obj).\n5. If Type(iterator) is not Object, throw a TypeError exception.\n...\n\nGetMethod\n\n2. Let func be ? GetV(V, P).\n3. If func is either undefined or null, return undefined.\n4. If IsCallable(func) is false, throw a TypeError exception.\n\nCall ( F, V [ , argumentsList ] )\n\n2. If IsCallable(F) is false, throw a TypeError exception.\n","features":["Promise.allSettled","Symbol.iterator"],"flags":["async"]},{"path":"test/built-ins/Promise/allSettled/iter-assigned-string-reject.js","esid":" sec-promise.allsettled","description":" >Reject when argument's Symbol.iterator property has the value \"\"\n","info":" |Promise.allSettled ( iterable )\n\n...\n4. Let iteratorRecord be GetIterator(iterable).\n5. IfAbruptRejectPromise(iteratorRecord, promiseCapability).\n...\n\nGetIterator ( obj [ , hint [ , method ] ] )\n\n...\n3. If method is not present, then\na. If hint is async, then\n...\nb. Otherwise, set method to ? GetMethod(obj, @@iterator).\n4. Let iterator be ? Call(method, obj).\n5. If Type(iterator) is not Object, throw a TypeError exception.\n...\n\nGetMethod\n\n2. Let func be ? GetV(V, P).\n3. If func is either undefined or null, return undefined.\n4. If IsCallable(func) is false, throw a TypeError exception.\n\nCall ( F, V [ , argumentsList ] )\n\n2. If IsCallable(F) is false, throw a TypeError exception.\n","features":["Promise.allSettled","Symbol.iterator"],"flags":["async"]},{"path":"test/built-ins/Promise/allSettled/iter-assigned-symbol-reject.js","esid":" sec-promise.allsettled","description":" >Reject when argument's Symbol.iterator property has the value Symbol()\n","info":" |Promise.allSettled ( iterable )\n\n...\n4. Let iteratorRecord be GetIterator(iterable).\n5. IfAbruptRejectPromise(iteratorRecord, promiseCapability).\n...\n\nGetIterator ( obj [ , hint [ , method ] ] )\n\n...\n3. If method is not present, then\na. If hint is async, then\n...\nb. Otherwise, set method to ? GetMethod(obj, @@iterator).\n4. Let iterator be ? Call(method, obj).\n5. If Type(iterator) is not Object, throw a TypeError exception.\n...\n\nGetMethod\n\n2. Let func be ? GetV(V, P).\n3. If func is either undefined or null, return undefined.\n4. If IsCallable(func) is false, throw a TypeError exception.\n\nCall ( F, V [ , argumentsList ] )\n\n2. If IsCallable(F) is false, throw a TypeError exception.\n","features":["Promise.allSettled","Symbol.iterator"],"flags":["async"]},{"path":"test/built-ins/Promise/allSettled/iter-assigned-true-reject.js","esid":" sec-promise.allsettled","description":" >Reject when argument's Symbol.iterator property has the value true\n","info":" |Promise.allSettled ( iterable )\n\n...\n4. Let iteratorRecord be GetIterator(iterable).\n5. IfAbruptRejectPromise(iteratorRecord, promiseCapability).\n...\n\nGetIterator ( obj [ , hint [ , method ] ] )\n\n...\n3. If method is not present, then\na. If hint is async, then\n...\nb. Otherwise, set method to ? GetMethod(obj, @@iterator).\n4. Let iterator be ? Call(method, obj).\n5. If Type(iterator) is not Object, throw a TypeError exception.\n...\n\nGetMethod\n\n2. Let func be ? GetV(V, P).\n3. If func is either undefined or null, return undefined.\n4. If IsCallable(func) is false, throw a TypeError exception.\n\nCall ( F, V [ , argumentsList ] )\n\n2. If IsCallable(F) is false, throw a TypeError exception.\n","features":["Promise.allSettled","Symbol.iterator"],"flags":["async"]},{"path":"test/built-ins/Promise/allSettled/iter-assigned-undefined-reject.js","esid":" sec-promise.allsettled","description":" >Reject when argument's Symbol.iterator property has the value undefined\n","info":" |Promise.allSettled ( iterable )\n\n...\n4. Let iteratorRecord be GetIterator(iterable).\n5. IfAbruptRejectPromise(iteratorRecord, promiseCapability).\n...\n\nGetIterator ( obj [ , hint [ , method ] ] )\n\n...\n3. If method is not present, then\na. If hint is async, then\n...\nb. Otherwise, set method to ? GetMethod(obj, @@iterator).\n4. Let iterator be ? Call(method, obj).\n5. If Type(iterator) is not Object, throw a TypeError exception.\n...\n\nGetMethod\n\n2. Let func be ? GetV(V, P).\n3. If func is either undefined or null, return undefined.\n4. If IsCallable(func) is false, throw a TypeError exception.\n\nCall ( F, V [ , argumentsList ] )\n\n2. If IsCallable(F) is false, throw a TypeError exception.\n","features":["Promise.allSettled","Symbol.iterator"],"flags":["async"]},{"path":"test/built-ins/Promise/allSettled/iter-next-err-reject.js","esid":" sec-promise.allsettled","description":" >Error when call an iterator next step (rejecting promise)\n","info":" |Promise.allSettled ( iterable )\n\n6. Let result be PerformPromiseAllSettled(iteratorRecord, C, promiseCapability).\n7. If result is an abrupt completion, then\na. If iteratorRecord.[[Done]] is false, set result to IteratorClose(iteratorRecord, result).\nb. IfAbruptRejectPromise(result, promiseCapability).\n\nRuntime Semantics: PerformPromiseAllSettled\n\n...\n6. Repeat\na. Let next be IteratorStep(iteratorRecord).\nb. If next is an abrupt completion, set iteratorRecord.[[Done]] to true.\nc. ReturnIfAbrupt(next).\n...\n\nIteratorStep ( iteratorRecord )\n\n1. Let result be ? IteratorNext(iteratorRecord).\n\nIteratorNext ( iteratorRecord [ , value ] )\n\n1. If value is not present, then\na. Let result be ? Call(iteratorRecord.[[NextMethod]], iteratorRecord.[[Iterator]], « »).\n2. Else,\na. Let result be ? Call(iteratorRecord.[[NextMethod]], iteratorRecord.[[Iterator]], « value »).\n...\n","features":["Promise.allSettled","Symbol.iterator"],"flags":["async"]},{"path":"test/built-ins/Promise/allSettled/iter-next-val-err-no-close.js","esid":" sec-promise.allsettled","description":" >Error when accessing an iterator result's `value` property (not closing\niterator)\n","info":" |Promise.allSettled ( iterable )\n\n6. Let result be PerformPromiseAllSettled(iteratorRecord, C, promiseCapability).\n7. If result is an abrupt completion, then\na. If iteratorRecord.[[Done]] is false, set result to IteratorClose(iteratorRecord, result).\nb. IfAbruptRejectPromise(result, promiseCapability).\n\nRuntime Semantics: PerformPromiseAllSettled\n\n...\n6. Repeat\n...\ne. Let nextValue be IteratorValue(next).\nf. If nextValue is an abrupt completion, set iteratorRecord.[[Done]] to true.\ng. ReturnIfAbrupt(nextValue).\n","features":["Promise.allSettled","Symbol.iterator"]},{"path":"test/built-ins/Promise/allSettled/iter-next-val-err-reject.js","esid":" sec-promise.allsettled","description":" >Error when accessing an iterator result's `value` property (rejecting promise)\n","info":" |Promise.allSettled ( iterable )\n\n6. Let result be PerformPromiseAllSettled(iteratorRecord, C, promiseCapability).\n7. If result is an abrupt completion, then\na. If iteratorRecord.[[Done]] is false, set result to IteratorClose(iteratorRecord, result).\nb. IfAbruptRejectPromise(result, promiseCapability).\n\nRuntime Semantics: PerformPromiseAllSettled\n\n...\n6. Repeat\n...\ne. Let nextValue be IteratorValue(next).\nf. If nextValue is an abrupt completion, set iteratorRecord.[[Done]] to true.\ng. ReturnIfAbrupt(nextValue).\n","features":["Promise.allSettled","Symbol.iterator"],"flags":["async"]},{"path":"test/built-ins/Promise/allSettled/iter-returns-false-reject.js","esid":" sec-promise.allsettled","description":" >Reject when argument's Symbol.iterator returns false\n","info":" |Promise.allSettled ( iterable )\n\n...\n4. Let iteratorRecord be GetIterator(iterable).\n5. IfAbruptRejectPromise(iteratorRecord, promiseCapability).\n...\n\nGetIterator ( obj [ , hint [ , method ] ] )\n\n...\n3. If method is not present, then\na. If hint is async, then\n...\nb. Otherwise, set method to ? GetMethod(obj, @@iterator).\n4. Let iterator be ? Call(method, obj).\n5. If Type(iterator) is not Object, throw a TypeError exception.\n...\n\nGetMethod\n\n2. Let func be ? GetV(V, P).\n3. If func is either undefined or null, return undefined.\n4. If IsCallable(func) is false, throw a TypeError exception.\n\nCall ( F, V [ , argumentsList ] )\n\n2. If IsCallable(F) is false, throw a TypeError exception.\n","features":["Promise.allSettled","Symbol.iterator"],"flags":["async"]},{"path":"test/built-ins/Promise/allSettled/iter-returns-null-reject.js","esid":" sec-promise.allsettled","description":" >Reject when argument's Symbol.iterator returns null\n","info":" |Promise.allSettled ( iterable )\n\n...\n4. Let iteratorRecord be GetIterator(iterable).\n5. IfAbruptRejectPromise(iteratorRecord, promiseCapability).\n...\n\nGetIterator ( obj [ , hint [ , method ] ] )\n\n...\n3. If method is not present, then\na. If hint is async, then\n...\nb. Otherwise, set method to ? GetMethod(obj, @@iterator).\n4. Let iterator be ? Call(method, obj).\n5. If Type(iterator) is not Object, throw a TypeError exception.\n...\n\nGetMethod\n\n2. Let func be ? GetV(V, P).\n3. If func is either undefined or null, return undefined.\n4. If IsCallable(func) is false, throw a TypeError exception.\n\nCall ( F, V [ , argumentsList ] )\n\n2. If IsCallable(F) is false, throw a TypeError exception.\n","features":["Promise.allSettled","Symbol.iterator"],"flags":["async"]},{"path":"test/built-ins/Promise/allSettled/iter-returns-number-reject.js","esid":" sec-promise.allsettled","description":" >Reject when argument's Symbol.iterator returns a number\n","info":" |Promise.allSettled ( iterable )\n\n...\n4. Let iteratorRecord be GetIterator(iterable).\n5. IfAbruptRejectPromise(iteratorRecord, promiseCapability).\n...\n\nGetIterator ( obj [ , hint [ , method ] ] )\n\n...\n3. If method is not present, then\na. If hint is async, then\n...\nb. Otherwise, set method to ? GetMethod(obj, @@iterator).\n4. Let iterator be ? Call(method, obj).\n5. If Type(iterator) is not Object, throw a TypeError exception.\n...\n\nGetMethod\n\n2. Let func be ? GetV(V, P).\n3. If func is either undefined or null, return undefined.\n4. If IsCallable(func) is false, throw a TypeError exception.\n\nCall ( F, V [ , argumentsList ] )\n\n2. If IsCallable(F) is false, throw a TypeError exception.\n","features":["Promise.allSettled","Symbol.iterator"],"flags":["async"]},{"path":"test/built-ins/Promise/allSettled/iter-returns-string-reject.js","esid":" sec-promise.allsettled","description":" >Reject when argument's Symbol.iterator returns a string\n","info":" |Promise.allSettled ( iterable )\n\n...\n4. Let iteratorRecord be GetIterator(iterable).\n5. IfAbruptRejectPromise(iteratorRecord, promiseCapability).\n...\n\nGetIterator ( obj [ , hint [ , method ] ] )\n\n...\n3. If method is not present, then\na. If hint is async, then\n...\nb. Otherwise, set method to ? GetMethod(obj, @@iterator).\n4. Let iterator be ? Call(method, obj).\n5. If Type(iterator) is not Object, throw a TypeError exception.\n...\n\nGetMethod\n\n2. Let func be ? GetV(V, P).\n3. If func is either undefined or null, return undefined.\n4. If IsCallable(func) is false, throw a TypeError exception.\n\nCall ( F, V [ , argumentsList ] )\n\n2. If IsCallable(F) is false, throw a TypeError exception.\n","features":["Promise.allSettled","Symbol.iterator"],"flags":["async"]},{"path":"test/built-ins/Promise/allSettled/iter-returns-symbol-reject.js","esid":" sec-promise.allsettled","description":" >Reject when argument's Symbol.iterator returns a symbol\n","info":" |Promise.allSettled ( iterable )\n\n...\n4. Let iteratorRecord be GetIterator(iterable).\n5. IfAbruptRejectPromise(iteratorRecord, promiseCapability).\n...\n\nGetIterator ( obj [ , hint [ , method ] ] )\n\n...\n3. If method is not present, then\na. If hint is async, then\n...\nb. Otherwise, set method to ? GetMethod(obj, @@iterator).\n4. Let iterator be ? Call(method, obj).\n5. If Type(iterator) is not Object, throw a TypeError exception.\n...\n\nGetMethod\n\n2. Let func be ? GetV(V, P).\n3. If func is either undefined or null, return undefined.\n4. If IsCallable(func) is false, throw a TypeError exception.\n\nCall ( F, V [ , argumentsList ] )\n\n2. If IsCallable(F) is false, throw a TypeError exception.\n","features":["Promise.allSettled","Symbol.iterator"],"flags":["async"]},{"path":"test/built-ins/Promise/allSettled/iter-returns-true-reject.js","esid":" sec-promise.allsettled","description":" >Reject when argument's Symbol.iterator returns true\n","info":" |Promise.allSettled ( iterable )\n\n...\n4. Let iteratorRecord be GetIterator(iterable).\n5. IfAbruptRejectPromise(iteratorRecord, promiseCapability).\n...\n\nGetIterator ( obj [ , hint [ , method ] ] )\n\n...\n3. If method is not present, then\na. If hint is async, then\n...\nb. Otherwise, set method to ? GetMethod(obj, @@iterator).\n4. Let iterator be ? Call(method, obj).\n5. If Type(iterator) is not Object, throw a TypeError exception.\n...\n\nGetMethod\n\n2. Let func be ? GetV(V, P).\n3. If func is either undefined or null, return undefined.\n4. If IsCallable(func) is false, throw a TypeError exception.\n\nCall ( F, V [ , argumentsList ] )\n\n2. If IsCallable(F) is false, throw a TypeError exception.\n","features":["Promise.allSettled","Symbol.iterator"],"flags":["async"]},{"path":"test/built-ins/Promise/allSettled/iter-returns-undefined-reject.js","esid":" sec-promise.allsettled","description":" >Reject when argument's Symbol.iterator returns undefined\n","info":" |Promise.allSettled ( iterable )\n\n...\n4. Let iteratorRecord be GetIterator(iterable).\n5. IfAbruptRejectPromise(iteratorRecord, promiseCapability).\n...\n\nGetIterator ( obj [ , hint [ , method ] ] )\n\n...\n3. If method is not present, then\na. If hint is async, then\n...\nb. Otherwise, set method to ? GetMethod(obj, @@iterator).\n4. Let iterator be ? Call(method, obj).\n5. If Type(iterator) is not Object, throw a TypeError exception.\n...\n\nGetMethod\n\n2. Let func be ? GetV(V, P).\n3. If func is either undefined or null, return undefined.\n4. If IsCallable(func) is false, throw a TypeError exception.\n\nCall ( F, V [ , argumentsList ] )\n\n2. If IsCallable(F) is false, throw a TypeError exception.\n","features":["Promise.allSettled","Symbol.iterator"],"flags":["async"]},{"path":"test/built-ins/Promise/allSettled/iter-step-err-no-close.js","esid":" sec-promise.allsettled","description":" >Error when advancing the provided iterable (not closing iterator)\n","info":" |Promise.allSettled ( iterable )\n\n6. Let result be PerformPromiseAllSettled(iteratorRecord, C, promiseCapability).\n7. If result is an abrupt completion, then\na. If iteratorRecord.[[Done]] is false, set result to IteratorClose(iteratorRecord, result).\nb. IfAbruptRejectPromise(result, promiseCapability).\n\nRuntime Semantics: PerformPromiseAllSettled\n\n6. Repeat\na. Let next be IteratorStep(iteratorRecord).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\n","features":["Promise.allSettled","Symbol.iterator"]},{"path":"test/built-ins/Promise/allSettled/iter-step-err-reject.js","esid":" sec-promise.allsettled","description":" >Error when advancing the provided iterable (rejecting promise)\n","info":" |Promise.allSettled ( iterable )\n\n6. Let result be PerformPromiseAllSettled(iteratorRecord, C, promiseCapability).\n7. If result is an abrupt completion, then\na. If iteratorRecord.[[Done]] is false, set result to IteratorClose(iteratorRecord, result).\nb. IfAbruptRejectPromise(result, promiseCapability).\n\nRuntime Semantics: PerformPromiseAllSettled\n\n6. Repeat\na. Let next be IteratorStep(iteratorRecord).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\n","features":["Promise.allSettled","Symbol.iterator"],"flags":["async"]},{"path":"test/built-ins/Promise/allSettled/length.js","esid":" sec-promise.allsettled","description":" Promise.allSettled `length` property","info":" |ES Section 17:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this value\nis equal to the largest number of named arguments shown in the subclause\nheadings for the function description, including optional parameters.\n\n[...]\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["Promise.allSettled"]},{"path":"test/built-ins/Promise/allSettled/name.js","esid":" sec-promise.allsettled","description":" Promise.allSettled `name` property","info":" |ES Section 17:\n\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value is a\nString. Unless otherwise specified, this value is the name that is given to\nthe function in this specification.\n\n[...]\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["Promise.allSettled"]},{"path":"test/built-ins/Promise/allSettled/new-reject-function.js","esid":" sec-performpromiseallsettled","description":" >Each Promise.allSettled element is called with a new Promise.allSettled Reject Element function.\n","info":" |Runtime Semantics: PerformPromiseAllSettled ( iteratorRecord, constructor, resultCapability )\n\n...\nz. Perform ? Invoke(nextPromise, \"then\", « resolveElement, rejectElement »).\n...\n","features":["Promise.allSettled"]},{"path":"test/built-ins/Promise/allSettled/new-resolve-function.js","esid":" sec-performpromiseallsettled","description":" >Each Promise.allSettled element is called with a new Promise.allSettled Resolve Element function.\n","info":" |Runtime Semantics: PerformPromiseAllSettled ( iteratorRecord, constructor, resultCapability )\n\n...\nk Let resolveElement be ! CreateBuiltinFunction(steps, « [[AlreadyCalled]], [[Index]], [[Values]], [[Capability]], [[RemainingElements]] »).\n...\nz. Perform ? Invoke(nextPromise, \"then\", « resolveElement, rejectElement »).\n...\n","features":["Promise.allSettled"]},{"path":"test/built-ins/Promise/allSettled/not-a-constructor.js","esid":" sec-ecmascript-standard-built-in-objects","description":" >Promise.allSettled does not implement [[Construct]], is not new-able\n","info":" |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n","includes":["isConstructor.js"],"features":["Reflect.construct","Promise.allSettled","arrow-function"]},{"path":"test/built-ins/Promise/allSettled/reject-deferred.js","description":" Rejecting through deferred invocation of the provided resolving function","esid":" sec-promise.allsettled","info":" |6. Let result be PerformPromiseAllSettled(iteratorRecord, C, promiseCapability).\n\nRuntime Semantics: PerformPromiseAllSettled\n\n6. Repeat\n...\nz. Perform ? Invoke(nextPromise, \"then\", « resolveElement, rejectElement »).\n\nPromise.allSettled Reject Element Functions\n\n9. Let obj be ! ObjectCreate(%ObjectPrototype%).\n10. Perform ! CreateDataProperty(obj, \"status\", \"rejected\").\n11. Perform ! CreateDataProperty(obj, \"reason\", x).\n12. Set values[index] to be obj.\n13. Set remainingElementsCount.[[Value]] to remainingElementsCount.[[Value]] - 1.\n14. If remainingElementsCount.[[Value]] is 0, then\na. Let valuesArray be CreateArrayFromList(values).\nb. Return ? Call(promiseCapability.[[Resolve]], undefined, « valuesArray »).\n","flags":["async"],"features":["Promise.allSettled"]},{"path":"test/built-ins/Promise/allSettled/reject-element-function-extensible.js","esid":" sec-promise.allsettled-reject-element-functions","description":" The [[Extensible]] slot of Promise.allSettled Reject Element functions","info":" |17 ECMAScript Standard Built-in Objects:\nUnless specified otherwise, the [[Extensible]] internal slot\nof a built-in object initially has the value true.\n","features":["Promise.allSettled"]},{"path":"test/built-ins/Promise/allSettled/reject-element-function-length.js","esid":" sec-promise.allsettled-reject-element-functions","description":" The `length` property of Promise.allSettled Reject Element functions","info":" |The length property of a Promise.allSettled Reject Element function is 1.\n\n17 ECMAScript Standard Built-in Objects:\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["Promise.allSettled"]},{"path":"test/built-ins/Promise/allSettled/reject-element-function-multiple-calls.js","esid":" sec-performpromiseallsettled","description":" >Cannot tamper with remainingElementsCount when Promise.allSettled reject element function is called multiple times.\n","info":" |Runtime Semantics: PerformPromiseAllSettled ( iteratorRecord, constructor, resultCapability, )\n\nIf alreadyCalled.[[Value]] is true, return undefined.\n\n","features":["Promise.allSettled"]},{"path":"test/built-ins/Promise/allSettled/reject-element-function-name.js","esid":" sec-promise.allsettled-reject-element-functions","description":" The `name` property of Promise.allSettled Reject Element functions","info":" |A promise resolve function is an anonymous built-in function.\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in function object, including constructors, has a `name`\nproperty whose value is a String. Functions that are identified as\nanonymous functions use the empty string as the value of the `name`\nproperty.\nUnless otherwise specified, the `name` property of a built-in function\nobject has the attributes { [[Writable]]: *false*, [[Enumerable]]: *false*,\n[[Configurable]]: *true* }.\n","includes":["propertyHelper.js"],"features":["Promise.allSettled"]},{"path":"test/built-ins/Promise/allSettled/reject-element-function-nonconstructor.js","esid":" sec-promise.allsettled-reject-element-functions","description":" Promise.allSettled Reject Element functions are not constructors","info":" |17 ECMAScript Standard Built-in Objects:\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified\nin the description of a particular function.\n","features":["Promise.allSettled"]},{"path":"test/built-ins/Promise/allSettled/reject-element-function-property-order.js","esid":" sec-createbuiltinfunction","description":" Promise.allSettled reject element function property order","info":" |Set order: \"length\", \"name\"\n","features":["Promise.allSettled"]},{"path":"test/built-ins/Promise/allSettled/reject-element-function-prototype.js","esid":" sec-promise.allsettled-reject-element-functions","description":" The [[Prototype]] of Promise.allSettled Reject Element functions","info":" |17 ECMAScript Standard Built-in Objects:\nUnless otherwise specified every built-in function and every built-in\nconstructor has the Function prototype object, which is the initial\nvalue of the expression Function.prototype (19.2.3), as the value of\nits [[Prototype]] internal slot.\n","features":["Promise.allSettled"]},{"path":"test/built-ins/Promise/allSettled/reject-ignored-deferred.js","description":" >Resolved promises ignore rejections through deferred invocation of the\nprovided resolving function\n","esid":" sec-promise.allsettled","info":" |6. Let result be PerformPromiseAllSettled(iteratorRecord, C, promiseCapability).\n\nRuntime Semantics: PerformPromiseAllSettled\n\n6. Repeat\n...\nz. Perform ? Invoke(nextPromise, \"then\", « resolveElement, rejectElement »).\n","flags":["async"],"features":["Promise.allSettled"]},{"path":"test/built-ins/Promise/allSettled/reject-ignored-immed.js","description":" >Resolved promises ignore rejections through immediate invocation of the\nprovided resolving function\n","esid":" sec-promise.allsettled","info":" |6. Let result be PerformPromiseAllSettled(iteratorRecord, C, promiseCapability).\n\nRuntime Semantics: PerformPromiseAllSettled\n\n6. Repeat\n...\nz. Perform ? Invoke(nextPromise, \"then\", « resolveElement, rejectElement »).\n","flags":["async"],"features":["Promise.allSettled"]},{"path":"test/built-ins/Promise/allSettled/reject-immed.js","description":" Rejecting through immediate invocation of the provided resolving function","esid":" sec-promise.allsettled","info":" |6. Let result be PerformPromiseAllSettled(iteratorRecord, C, promiseCapability).\n\nRuntime Semantics: PerformPromiseAllSettled\n\n6. Repeat\n...\nz. Perform ? Invoke(nextPromise, \"then\", « resolveElement, rejectElement »).\n","flags":["async"],"includes":["promiseHelper.js"],"features":["Promise.allSettled"]},{"path":"test/built-ins/Promise/allSettled/resolve-before-loop-exit-from-same.js","esid":" sec-performpromiseallsettled","description":" >Cannot tamper remainingElementsCount when Promise.allSettled resolve element function is called twice in a row.\n","info":" |Runtime Semantics: PerformPromiseAllSettled ( iteratorRecord, constructor, resultCapability )\n\n4. Let remainingElementsCount be a new Record { [[Value]]: 1 }.\n...\n6.d ...\nii. Set remainingElementsCount.[[value]] to remainingElementsCount.[[value]] − 1.\niii. If remainingElementsCount.[[value]] is 0, then\n1. Let valuesArray be CreateArrayFromList(values).\n2. Perform ? Call(resultCapability.[[Resolve]], undefined, « valuesArray »).\n...\n\nPromise.allSettled Resolve Element Functions\n\n2. Let alreadyCalled be F.[[AlreadyCalled]].\n3. If alreadyCalled.[[Value]] is true, return undefined.\n4. Set alreadyCalled.[[Value]] to true.\n...\n","includes":["promiseHelper.js"],"features":["Promise.allSettled"]},{"path":"test/built-ins/Promise/allSettled/resolve-before-loop-exit.js","esid":" sec-performpromiseallsettled","description":" >Cannot tamper remainingElementsCount when two Promise.allSettled resolve element functions are called in succession.\n","info":" |Runtime Semantics: PerformPromiseAllSettled ( iteratorRecord, constructor, resultCapability )\n\n4. Let remainingElementsCount be a new Record { [[Value]]: 1 }.\n...\n6.d ...\nii. Set remainingElementsCount.[[value]] to remainingElementsCount.[[value]] − 1.\niii. If remainingElementsCount.[[value]] is 0, then\n1. Let valuesArray be CreateArrayFromList(values).\n2. Perform ? Call(resultCapability.[[Resolve]], undefined, « valuesArray »).\n...\n\nPromise.allSettled Resolve Element Functions\n\n2. Let alreadyCalled be F.[[AlreadyCalled]].\n3. If alreadyCalled.[[Value]] is true, return undefined.\n4. Set alreadyCalled.[[Value]] to true.\n...\n","includes":["promiseHelper.js"],"features":["Promise.allSettled"]},{"path":"test/built-ins/Promise/allSettled/resolve-element-function-extensible.js","esid":" sec-promise.allsettled-resolve-element-functions","description":" The [[Extensible]] slot of Promise.allSettled Resolve Element functions","info":" |17 ECMAScript Standard Built-in Objects:\nUnless specified otherwise, the [[Extensible]] internal slot\nof a built-in object initially has the value true.\n","features":["Promise.allSettled"]},{"path":"test/built-ins/Promise/allSettled/resolve-element-function-length.js","esid":" sec-promise.allsettled-resolve-element-functions","description":" The `length` property of Promise.allSettled Resolve Element functions","info":" |The length property of a Promise.allSettled resolve element function is 1.\n\n17 ECMAScript Standard Built-in Objects:\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["Promise.allSettled"]},{"path":"test/built-ins/Promise/allSettled/resolve-element-function-name.js","esid":" sec-promise.allsettled-resolve-element-functions","description":" The `name` property of Promise.allSettled Resolve Element functions","info":" |A promise resolve function is an anonymous built-in function.\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in function object, including constructors, has a `name`\nproperty whose value is a String. Functions that are identified as\nanonymous functions use the empty string as the value of the `name`\nproperty.\nUnless otherwise specified, the `name` property of a built-in function\nobject has the attributes { [[Writable]]: *false*, [[Enumerable]]: *false*,\n[[Configurable]]: *true* }.\n","includes":["propertyHelper.js"],"features":["Promise.allSettled"]},{"path":"test/built-ins/Promise/allSettled/resolve-element-function-nonconstructor.js","esid":" sec-promise.allsettled-resolve-element-functions","description":" Promise.allSettled Resolve Element functions are not constructors","info":" |17 ECMAScript Standard Built-in Objects:\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified\nin the description of a particular function.\n","features":["Promise.allSettled"]},{"path":"test/built-ins/Promise/allSettled/resolve-element-function-property-order.js","esid":" sec-createbuiltinfunction","description":" Promise.allSettled resolve element function property order","info":" |Set order: \"length\", \"name\"\n","features":["Promise.allSettled"]},{"path":"test/built-ins/Promise/allSettled/resolve-element-function-prototype.js","esid":" sec-promise.allsettled-resolve-element-functions","description":" The [[Prototype]] of Promise.allSettled Resolve Element functions","info":" |17 ECMAScript Standard Built-in Objects:\nUnless otherwise specified every built-in function and every built-in\nconstructor has the Function prototype object, which is the initial\nvalue of the expression Function.prototype (19.2.3), as the value of\nits [[Prototype]] internal slot.\n","features":["Promise.allSettled"]},{"path":"test/built-ins/Promise/allSettled/resolve-from-same-thenable.js","esid":" sec-performpromiseallsettled","description":" >Cannot tamper remainingElementsCount when Promise.allSettled resolve element function is called multiple times.\n","info":" |Runtime Semantics: PerformPromiseAllSettled ( iteratorRecord, constructor, resultCapability )\n\n4. Let remainingElementsCount be a new Record { [[Value]]: 1 }.\n...\n6.d ...\nii. Set remainingElementsCount.[[value]] to remainingElementsCount.[[value]] − 1.\niii. If remainingElementsCount.[[value]] is 0, then\n1. Let valuesArray be CreateArrayFromList(values).\n2. Perform ? Call(resultCapability.[[Resolve]], undefined, « valuesArray »).\n...\n\nPromise.allSettled Resolve Element Functions\n\n2. Let alreadyCalled be F.[[AlreadyCalled]].\n3. If alreadyCalled.[[Value]] is true, return undefined.\n4. Set alreadyCalled.[[Value]] to true.\n...\n","includes":["promiseHelper.js"],"features":["Promise.allSettled"]},{"path":"test/built-ins/Promise/allSettled/resolve-ignores-late-rejection-deferred.js","description":" >Resolved promises ignore rejections through deferred invocation of the\nprovided resolving function\n","esid":" sec-promise.allSettled","info":" |Let result be PerformPromiseAllSettled(iteratorRecord, C, promiseCapability).\n\nRuntime Semantics: PerformPromiseAllSettled\n\nRepeat\n...\nr. Perform ? Invoke(nextPromise, \"then\", « resultCapability.[[Resolve]], rejectElement »).\n\n","flags":["async"],"features":["Promise.allSettled","arrow-function"]},{"path":"test/built-ins/Promise/allSettled/resolve-ignores-late-rejection.js","description":" >Resolved promises ignore rejections through immediate invocation of the\nprovided resolving function\n","esid":" sec-promise.allSettled","info":" |Let result be PerformPromiseAllSettled(iteratorRecord, C, promiseCapability).\n\nRuntime Semantics: PerformPromiseAllSettled\n\nRepeat\n...\nr. Perform ? Invoke(nextPromise, \"then\", « resultCapability.[[Resolve]], rejectElement »).\n\n","flags":["async"],"features":["Promise.allSettled","arrow-function"]},{"path":"test/built-ins/Promise/allSettled/resolve-non-callable.js","esid":" sec-promise.allsettled","description":" >Promise.resolve is retrieved before GetIterator call (non-callable).\n","info":" |Promise.allSettled ( iterable )\n\n[...]\n3. Let promiseResolve be GetPromiseResolve(C).\n4. IfAbruptRejectPromise(promiseResolve, promiseCapability).\n\nGetPromiseResolve ( promiseConstructor )\n\n[...]\n2. Let promiseResolve be ? Get(promiseConstructor, \"resolve\").\n3. If IsCallable(promiseResolve) is false, throw a TypeError exception.\n","flags":["async"],"features":["Promise.allSettled","Symbol.iterator"]},{"path":"test/built-ins/Promise/allSettled/resolve-non-thenable.js","description":" Resolving with a non-thenable object value","esid":" sec-promise.allsettled","info":" |Promise.allSettled Resolve Element Functions\n\n14. If remainingElementsCount.[[Value]] is 0, then\na. Let valuesArray be ! CreateArrayFromList(values).\nb. Return ? Call(promiseCapability.[[Resolve]], undefined, « valuesArray »).\n","flags":["async"],"includes":["promiseHelper.js"],"features":["Promise.allSettled"]},{"path":"test/built-ins/Promise/allSettled/resolve-not-callable-reject-with-typeerror.js","esid":" sec-promise.allSettled","description":" >If the constructor's `resolve` method is not callable, reject with a TypeError.\n","info":" |Let result be PerformPromiseAllSettled(iteratorRecord, C, promiseCapability).\n\nRuntime Semantics: PerformPromiseAllSettled\n\nLet promiseResolve be ? Get(constructor, \"resolve\").\nIf ! IsCallable(promiseResolve) is false, throw a TypeError exception.\n\n","flags":["async"],"features":["Promise.allSettled","arrow-function"]},{"path":"test/built-ins/Promise/allSettled/resolve-poisoned-then.js","description":" Resolving with an object with a \"poisoned\" `then` property","esid":" sec-promise.allsettled","info":" |Runtime Semantics: PerformPromiseAllSettled ( iteratorRecord, constructor, resultCapability )\n\n4. Let remainingElementsCount be a new Record { [[Value]]: 1 }.\n...\n6.d ...\nii. Set remainingElementsCount.[[value]] to remainingElementsCount.[[value]] − 1.\niii. If remainingElementsCount.[[value]] is 0, then\n1. Let valuesArray be CreateArrayFromList(values).\n2. Perform ? Call(resultCapability.[[Resolve]], undefined, « valuesArray »).\n...\n","flags":["async"],"features":["Promise.allSettled"]},{"path":"test/built-ins/Promise/allSettled/resolve-thenable.js","description":" Resolving with a thenable object value","esid":" sec-promise.allsettled","info":" |Let promiseCapability be NewPromiseCapability(C).\n","flags":["async"],"features":["Promise.allSettled"]},{"path":"test/built-ins/Promise/allSettled/resolved-all-fulfilled.js","esid":" sec-promise.allsettled","description":" >Resolution is a collection of all the settled values (all fulfilled)\n","info":" |Runtime Semantics: PerformPromiseAllSettled\n\n6. Repeat,\n...\nj. Let steps be the algorithm steps defined in Promise.allSettled Resolve Element Functions.\nk. Let resolveElement be ! CreateBuiltinFunction(steps, « [[AlreadyCalled]], [[Index]], [[Values]], [[Capability]], [[RemainingElements]] »).\n...\nr. Let rejectSteps be the algorithm steps defined in Promise.allSettled Reject Element Functions.\ns. Let rejectElement be ! CreateBuiltinFunction(rejectSteps, « [[AlreadyCalled]], [[Index]], [[Values]], [[Capability]], [[RemainingElements]] »).\n...\nz. Perform ? Invoke(nextPromise, \"then\", « resolveElement, rejectElement »).\n\nPromise.allSettled Resolve Element Functions\n\n9. Let obj be ! ObjectCreate(%ObjectPrototype%).\n10. Perform ! CreateDataProperty(obj, \"status\", \"fulfilled\").\n11. Perform ! CreateDataProperty(obj, \"value\", x).\n12. Set values[index] to be obj.\n13. Set remainingElementsCount.[[Value]] to remainingElementsCount.[[Value]] - 1.\n14. If remainingElementsCount.[[Value]] is 0, then\na. Let valuesArray be ! CreateArrayFromList(values).\nb. Return ? Call(promiseCapability.[[Resolve]], undefined, « valuesArray »).\n\nPromise.allSettled Reject Element Functions\n\n9. Let obj be ! ObjectCreate(%ObjectPrototype%).\n10. Perform ! CreateDataProperty(obj, \"status\", \"rejected\").\n11. Perform ! CreateDataProperty(obj, \"reason\", x).\n12. Set values[index] to be obj.\n13. Set remainingElementsCount.[[Value]] to remainingElementsCount.[[Value]] - 1.\n14. If remainingElementsCount.[[Value]] is 0, then\na. Let valuesArray be CreateArrayFromList(values).\nb. Return ? Call(promiseCapability.[[Resolve]], undefined, « valuesArray »).\n","flags":["async"],"includes":["promiseHelper.js"],"features":["Promise.allSettled"]},{"path":"test/built-ins/Promise/allSettled/resolved-all-mixed.js","esid":" sec-promise.allsettled","description":" >Resolution is a collection of all the settled values (fulfilled and rejected)\n","info":" |Runtime Semantics: PerformPromiseAllSettled\n\n6. Repeat,\n...\nj. Let steps be the algorithm steps defined in Promise.allSettled Resolve Element Functions.\nk. Let resolveElement be ! CreateBuiltinFunction(steps, « [[AlreadyCalled]], [[Index]], [[Values]], [[Capability]], [[RemainingElements]] »).\n...\nr. Let rejectSteps be the algorithm steps defined in Promise.allSettled Reject Element Functions.\ns. Let rejectElement be ! CreateBuiltinFunction(rejectSteps, « [[AlreadyCalled]], [[Index]], [[Values]], [[Capability]], [[RemainingElements]] »).\n...\nz. Perform ? Invoke(nextPromise, \"then\", « resolveElement, rejectElement »).\n\nPromise.allSettled Resolve Element Functions\n\n9. Let obj be ! ObjectCreate(%ObjectPrototype%).\n10. Perform ! CreateDataProperty(obj, \"status\", \"fulfilled\").\n11. Perform ! CreateDataProperty(obj, \"value\", x).\n12. Set values[index] to be obj.\n13. Set remainingElementsCount.[[Value]] to remainingElementsCount.[[Value]] - 1.\n14. If remainingElementsCount.[[Value]] is 0, then\na. Let valuesArray be ! CreateArrayFromList(values).\nb. Return ? Call(promiseCapability.[[Resolve]], undefined, « valuesArray »).\n\nPromise.allSettled Reject Element Functions\n\n9. Let obj be ! ObjectCreate(%ObjectPrototype%).\n10. Perform ! CreateDataProperty(obj, \"status\", \"rejected\").\n11. Perform ! CreateDataProperty(obj, \"reason\", x).\n12. Set values[index] to be obj.\n13. Set remainingElementsCount.[[Value]] to remainingElementsCount.[[Value]] - 1.\n14. If remainingElementsCount.[[Value]] is 0, then\na. Let valuesArray be CreateArrayFromList(values).\nb. Return ? Call(promiseCapability.[[Resolve]], undefined, « valuesArray »).\n","flags":["async"],"includes":["promiseHelper.js"],"features":["Promise.allSettled"]},{"path":"test/built-ins/Promise/allSettled/resolved-all-rejected.js","esid":" sec-promise.allsettled","description":" >Resolution is a collection of all the settled values (fulfiled and rejected promises)\n","info":" |Runtime Semantics: PerformPromiseAllSettled\n\n6. Repeat,\n...\nj. Let steps be the algorithm steps defined in Promise.allSettled Resolve Element Functions.\nk. Let resolveElement be ! CreateBuiltinFunction(steps, « [[AlreadyCalled]], [[Index]], [[Values]], [[Capability]], [[RemainingElements]] »).\n...\nr. Let rejectSteps be the algorithm steps defined in Promise.allSettled Reject Element Functions.\ns. Let rejectElement be ! CreateBuiltinFunction(rejectSteps, « [[AlreadyCalled]], [[Index]], [[Values]], [[Capability]], [[RemainingElements]] »).\n...\nz. Perform ? Invoke(nextPromise, \"then\", « resolveElement, rejectElement »).\n\nPromise.allSettled Resolve Element Functions\n\n9. Let obj be ! ObjectCreate(%ObjectPrototype%).\n10. Perform ! CreateDataProperty(obj, \"status\", \"fulfilled\").\n11. Perform ! CreateDataProperty(obj, \"value\", x).\n12. Set values[index] to be obj.\n13. Set remainingElementsCount.[[Value]] to remainingElementsCount.[[Value]] - 1.\n14. If remainingElementsCount.[[Value]] is 0, then\na. Let valuesArray be ! CreateArrayFromList(values).\nb. Return ? Call(promiseCapability.[[Resolve]], undefined, « valuesArray »).\n\nPromise.allSettled Reject Element Functions\n\n9. Let obj be ! ObjectCreate(%ObjectPrototype%).\n10. Perform ! CreateDataProperty(obj, \"status\", \"rejected\").\n11. Perform ! CreateDataProperty(obj, \"reason\", x).\n12. Set values[index] to be obj.\n13. Set remainingElementsCount.[[Value]] to remainingElementsCount.[[Value]] - 1.\n14. If remainingElementsCount.[[Value]] is 0, then\na. Let valuesArray be CreateArrayFromList(values).\nb. Return ? Call(promiseCapability.[[Resolve]], undefined, « valuesArray »).\n","flags":["async"],"includes":["promiseHelper.js"],"features":["Promise.allSettled"]},{"path":"test/built-ins/Promise/allSettled/resolved-immed.js","esid":" sec-promise.allsettled","description":" Promise.allSettled([]) returns immediately","includes":["promiseHelper.js"],"flags":["async"],"features":["Promise.allSettled"]},{"path":"test/built-ins/Promise/allSettled/resolved-sequence-extra-ticks.js","esid":" sec-promise.allsettled","description":" Resolution ticks are set in a predictable sequence with extra then calls","info":" |Runtime Semantics: PerformPromiseAllSettled ( iteratorRecord, constructor, resultCapability )\n\n4. Let remainingElementsCount be a new Record { [[Value]]: 1 }.\n...\n6.d ...\nii. Set remainingElementsCount.[[value]] to remainingElementsCount.[[value]] − 1.\niii. If remainingElementsCount.[[value]] is 0, then\n1. Let valuesArray be CreateArrayFromList(values).\n2. Perform ? Call(resultCapability.[[Resolve]], undefined, « valuesArray »).\n...\n","flags":["async"],"includes":["promiseHelper.js"],"features":["Promise.allSettled"]},{"path":"test/built-ins/Promise/allSettled/resolved-sequence-mixed.js","esid":" sec-promise.allsettled","description":" >Resolution ticks are set in a predictable sequence of mixed fulfilled and rejected promises\n","info":" |Runtime Semantics: PerformPromiseAllSettled ( iteratorRecord, constructor, resultCapability )\n\n4. Let remainingElementsCount be a new Record { [[Value]]: 1 }.\n...\n6.d ...\nii. Set remainingElementsCount.[[value]] to remainingElementsCount.[[value]] − 1.\niii. If remainingElementsCount.[[value]] is 0, then\n1. Let valuesArray be CreateArrayFromList(values).\n2. Perform ? Call(resultCapability.[[Resolve]], undefined, « valuesArray »).\n...\n","flags":["async"],"includes":["promiseHelper.js"],"features":["Promise.allSettled"]},{"path":"test/built-ins/Promise/allSettled/resolved-sequence-with-rejections.js","esid":" sec-promise.allsettled","description":" Resolution ticks are set in a predictable sequence","info":" |Runtime Semantics: PerformPromiseAllSettled ( iteratorRecord, constructor, resultCapability )\n\n4. Let remainingElementsCount be a new Record { [[Value]]: 1 }.\n...\n6.d ...\nii. Set remainingElementsCount.[[value]] to remainingElementsCount.[[value]] − 1.\niii. If remainingElementsCount.[[value]] is 0, then\n1. Let valuesArray be CreateArrayFromList(values).\n2. Perform ? Call(resultCapability.[[Resolve]], undefined, « valuesArray »).\n...\n","flags":["async"],"includes":["promiseHelper.js"],"features":["Promise.allSettled"]},{"path":"test/built-ins/Promise/allSettled/resolved-sequence.js","esid":" sec-promise.allsettled","description":" Resolution ticks are set in a predictable sequence","info":" |Runtime Semantics: PerformPromiseAllSettled ( iteratorRecord, constructor, resultCapability )\n\n4. Let remainingElementsCount be a new Record { [[Value]]: 1 }.\n...\n6.d ...\nii. Set remainingElementsCount.[[value]] to remainingElementsCount.[[value]] − 1.\niii. If remainingElementsCount.[[value]] is 0, then\n1. Let valuesArray be CreateArrayFromList(values).\n2. Perform ? Call(resultCapability.[[Resolve]], undefined, « valuesArray »).\n...\n","flags":["async"],"includes":["promiseHelper.js"],"features":["Promise.allSettled"]},{"path":"test/built-ins/Promise/allSettled/resolved-then-catch-finally.js","esid":" sec-promise.allsettled","description":" >Resolution is a collection of all the settled values (all fulfilled)\n","info":" |Runtime Semantics: PerformPromiseAllSettled\n\n6. Repeat,\n...\nj. Let steps be the algorithm steps defined in Promise.allSettled Resolve Element Functions.\nk. Let resolveElement be ! CreateBuiltinFunction(steps, « [[AlreadyCalled]], [[Index]], [[Values]], [[Capability]], [[RemainingElements]] »).\n...\nr. Let rejectSteps be the algorithm steps defined in Promise.allSettled Reject Element Functions.\ns. Let rejectElement be ! CreateBuiltinFunction(rejectSteps, « [[AlreadyCalled]], [[Index]], [[Values]], [[Capability]], [[RemainingElements]] »).\n...\nz. Perform ? Invoke(nextPromise, \"then\", « resolveElement, rejectElement »).\n\nPromise.allSettled Resolve Element Functions\n\n9. Let obj be ! ObjectCreate(%ObjectPrototype%).\n10. Perform ! CreateDataProperty(obj, \"status\", \"fulfilled\").\n11. Perform ! CreateDataProperty(obj, \"value\", x).\n12. Set values[index] to be obj.\n13. Set remainingElementsCount.[[Value]] to remainingElementsCount.[[Value]] - 1.\n14. If remainingElementsCount.[[Value]] is 0, then\na. Let valuesArray be ! CreateArrayFromList(values).\nb. Return ? Call(promiseCapability.[[Resolve]], undefined, « valuesArray »).\n\nPromise.allSettled Reject Element Functions\n\n9. Let obj be ! ObjectCreate(%ObjectPrototype%).\n10. Perform ! CreateDataProperty(obj, \"status\", \"rejected\").\n11. Perform ! CreateDataProperty(obj, \"reason\", x).\n12. Set values[index] to be obj.\n13. Set remainingElementsCount.[[Value]] to remainingElementsCount.[[Value]] - 1.\n14. If remainingElementsCount.[[Value]] is 0, then\na. Let valuesArray be CreateArrayFromList(values).\nb. Return ? Call(promiseCapability.[[Resolve]], undefined, « valuesArray »).\n","flags":["async"],"includes":["promiseHelper.js"],"features":["Promise.allSettled"]},{"path":"test/built-ins/Promise/allSettled/resolves-empty-array.js","esid":" sec-promise.allsettled","description":" Promise.allSettled([]) returns a Promise for an empty array","info":" |Runtime Semantics: PerformPromiseAllSettled ( iteratorRecord, constructor, resultCapability )\n\n4. Let remainingElementsCount be a new Record { [[Value]]: 1 }.\n...\n6.d ...\nii. Set remainingElementsCount.[[value]] to remainingElementsCount.[[value]] − 1.\niii. If remainingElementsCount.[[value]] is 0, then\n1. Let valuesArray be CreateArrayFromList(values).\n2. Perform ? Call(resultCapability.[[Resolve]], undefined, « valuesArray »).\n...\n","flags":["async"],"includes":["promiseHelper.js"],"features":["Promise.allSettled"]},{"path":"test/built-ins/Promise/allSettled/resolves-to-array.js","esid":" sec-promise.allsettled","description":" Promise.allSettled returned a promise resolves into an array","info":" |Runtime Semantics: PerformPromiseAllSettled ( iteratorRecord, constructor, resultCapability )\n\n4. Let remainingElementsCount be a new Record { [[Value]]: 1 }.\n...\n6.d ...\nii. Set remainingElementsCount.[[value]] to remainingElementsCount.[[value]] − 1.\niii. If remainingElementsCount.[[value]] is 0, then\n1. Let valuesArray be CreateArrayFromList(values).\n2. Perform ? Call(resultCapability.[[Resolve]], undefined, « valuesArray »).\n...\n","flags":["async"],"features":["Promise.allSettled"]},{"path":"test/built-ins/Promise/allSettled/returns-promise.js","esid":" sec-promise.allsettled","description":" Promise.allSettled returns a Promise","info":" |Promise.allSettled ( iterable )\n\n3. Let promiseCapability be ? NewPromiseCapability(C).\n4. Let iteratorRecord be GetIterator(iterable).\n5. IfAbruptRejectPromise(iteratorRecord, promiseCapability).\n6. Let result be PerformPromiseAllSettled(iteratorRecord, C, promiseCapability).\n7. If result is an abrupt completion, then\na. If iteratorRecord.[[Done]] is false, set result to IteratorClose(iteratorRecord, result).\nb. IfAbruptRejectPromise(result, promiseCapability).\n8. Return Completion(result).\n","features":["Promise.allSettled"]},{"path":"test/built-ins/Promise/allSettled/species-get-error.js","description":" >Promise.allSettled() does not retrieve `Symbol.species` property of the `this` value\n","esid":" sec-promise.allsettled","info":" |1. Let C be the this value.\n2. If Type(C) is not Object, throw a TypeError exception.\n3. Let promiseCapability be ? NewPromiseCapability(C).\n...\n","features":["Promise.allSettled","Symbol.species"]},{"path":"test/built-ins/Promise/any/ctx-non-object.js","description":" >Promise.any invoked on a non-object value\n","esid":" sec-promise.any","info":" |...\n2. Let promiseCapability be ? NewPromiseCapability(C).\n\nNewPromiseCapability ( C )\n\n1. If IsConstructor(C) is false, throw a TypeError exception.\n\n","features":["Promise.any","Symbol"]},{"path":"test/built-ins/Promise/any/iter-arg-is-error-object-reject.js","esid":" sec-promise.any","description":" >Promise.any(new Test262Error()) rejects with TypeError.\n","info":" |Promise.any ( iterable )\n\n...\nLet iteratorRecord be GetIterator(iterable).\nIfAbruptRejectPromise(iteratorRecord, promiseCapability).\n...\n\nGetIterator ( obj [ , hint [ , method ] ] )\n\n...\nLet iterator be ? Call(method, obj).\nIf Type(iterator) is not Object, throw a TypeError exception.\n...\n\nGetMethod\n\n2. Let func be ? GetV(V, P).\n3. If func is either undefined or null, return undefined.\n4. If IsCallable(func) is false, throw a TypeError exception.\n\nCall ( F, V [ , argumentsList ] )\n\n2. If IsCallable(F) is false, throw a TypeError exception.\n","features":["Promise.any"],"flags":["async"]},{"path":"test/built-ins/Promise/any/iter-arg-is-false-reject.js","esid":" sec-promise.any","description":" >Promise.any(false) rejects with TypeError.\n","info":" |Promise.any ( iterable )\n\n...\n3. Let iteratorRecord be GetIterator(iterable).\n4. IfAbruptRejectPromise(iteratorRecord, promiseCapability).\n...\n\n#sec-getiterator\nGetIterator ( obj [ , hint [ , method ] ] )\n\n...\nLet iterator be ? Call(method, obj).\nIf Type(iterator) is not Object, throw a TypeError exception.\n...\n","features":["Promise.any"],"flags":["async"]},{"path":"test/built-ins/Promise/any/iter-arg-is-null-reject.js","esid":" sec-promise.any","description":" >Promise.any(null) rejects with TypeError.\n","info":" |Promise.any ( iterable )\n\n...\n3. Let iteratorRecord be GetIterator(iterable).\n4. IfAbruptRejectPromise(iteratorRecord, promiseCapability).\n...\n\n#sec-getiterator\nGetIterator ( obj [ , hint [ , method ] ] )\n\n...\nLet iterator be ? Call(method, obj).\nIf Type(iterator) is not Object, throw a TypeError exception.\n...\n","features":["Promise.any"],"flags":["async"]},{"path":"test/built-ins/Promise/any/iter-arg-is-number-reject.js","esid":" sec-promise.any","description":" >Promise.any(number) rejects with TypeError.\n","info":" |Promise.any ( iterable )\n\n...\n3. Let iteratorRecord be GetIterator(iterable).\n4. IfAbruptRejectPromise(iteratorRecord, promiseCapability).\n...\n\n#sec-getiterator\nGetIterator ( obj [ , hint [ , method ] ] )\n\n...\nLet iterator be ? Call(method, obj).\nIf Type(iterator) is not Object, throw a TypeError exception.\n...\n","features":["Promise.any"],"flags":["async"]},{"path":"test/built-ins/Promise/any/iter-arg-is-poisoned.js","esid":" sec-promise.any","description":" >Promise.any(poisoned iterable) rejects with whatever error is thrown.\n","info":" |Promise.any ( iterable )\n\n...\n3. Let iteratorRecord be GetIterator(iterable).\n4. IfAbruptRejectPromise(iteratorRecord, promiseCapability).\n...\n\n#sec-getiterator\nGetIterator ( obj [ , hint [ , method ] ] )\n\n...\nLet iterator be ? Call(method, obj).\n...\n","features":["Promise.any","Symbol","Symbol.iterator","arrow-function"],"flags":["async"]},{"path":"test/built-ins/Promise/any/iter-arg-is-string-resolve.js","esid":" sec-promise.any","description":" >Promise.any('non-empty-string') resolves with the first character in the non-empty string\n","info":" |Promise.any ( iterable )\n\n...\n3. Let iteratorRecord be GetIterator(iterable).\n4. IfAbruptRejectPromise(iteratorRecord, promiseCapability).\n...\n\n#sec-getiterator\nGetIterator ( obj [ , hint [ , method ] ] )\n\n...\nLet iterator be ? Call(method, obj).\nIf Type(iterator) is not Object, throw a TypeError exception.\n...\n","features":["Promise.any","arrow-function"],"flags":["async"]},{"path":"test/built-ins/Promise/any/iter-arg-is-symbol-reject.js","esid":" sec-promise.any","description":" >Promise.any(Symbol()) rejects with TypeError.\n","info":" |Promise.any ( iterable )\n\n...\n3. Let iteratorRecord be GetIterator(iterable).\n4. IfAbruptRejectPromise(iteratorRecord, promiseCapability).\n...\n\nGetIterator ( obj [ , hint [ , method ] ] )\n\n...\n3. If method is not present, then\na. If hint is async, then\n...\nb. Otherwise, set method to ? GetMethod(obj, @@iterator).\n4. Let iterator be ? Call(method, obj).\n5. If Type(iterator) is not Object, throw a TypeError exception.\n...\n\nGetMethod\n\n2. Let func be ? GetV(V, P).\n3. If func is either undefined or null, return undefined.\n4. If IsCallable(func) is false, throw a TypeError exception.\n\nCall ( F, V [ , argumentsList ] )\n\n2. If IsCallable(F) is false, throw a TypeError exception.\n","features":["Promise.any","Symbol"],"flags":["async"]},{"path":"test/built-ins/Promise/any/iter-arg-is-true-reject.js","esid":" sec-promise.any","description":" >Promise.any(true) rejects with TypeError.\n","info":" |Promise.any ( iterable )\n\n...\n3. Let iteratorRecord be GetIterator(iterable).\n4. IfAbruptRejectPromise(iteratorRecord, promiseCapability).\n...\n\nGetIterator ( obj [ , hint [ , method ] ] )\n\n...\n3. If method is not present, then\na. If hint is async, then\n...\nb. Otherwise, set method to ? GetMethod(obj, @@iterator).\n4. Let iterator be ? Call(method, obj).\n5. If Type(iterator) is not Object, throw a TypeError exception.\n...\n\nGetMethod\n\n2. Let func be ? GetV(V, P).\n3. If func is either undefined or null, return undefined.\n4. If IsCallable(func) is false, throw a TypeError exception.\n\nCall ( F, V [ , argumentsList ] )\n\n2. If IsCallable(F) is false, throw a TypeError exception.\n","features":["Promise.any"],"flags":["async"]},{"path":"test/built-ins/Promise/any/iter-arg-is-undefined-reject.js","esid":" sec-promise.any","description":" >Promise.any(undefined) rejects with TypeError.\n","info":" |Promise.any ( iterable )\n\n...\n3. Let iteratorRecord be GetIterator(iterable).\n4. IfAbruptRejectPromise(iteratorRecord, promiseCapability).\n...\n\nGetIterator ( obj [ , hint [ , method ] ] )\n\n...\n3. If method is not present, then\na. If hint is async, then\n...\nb. Otherwise, set method to ? GetMethod(obj, @@iterator).\n4. Let iterator be ? Call(method, obj).\n5. If Type(iterator) is not Object, throw a TypeError exception.\n...\n\nGetMethod\n\n2. Let func be ? GetV(V, P).\n3. If func is either undefined or null, return undefined.\n4. If IsCallable(func) is false, throw a TypeError exception.\n\nCall ( F, V [ , argumentsList ] )\n\n2. If IsCallable(F) is false, throw a TypeError exception.\n","features":["Promise.any"],"flags":["async"]},{"path":"test/built-ins/Promise/any/iter-assigned-false-reject.js","esid":" sec-promise.any","description":" >Reject when argument's Symbol.iterator property has the value false\n","info":" |Promise.any ( iterable )\n\n...\n4. Let iteratorRecord be GetIterator(iterable).\n5. IfAbruptRejectPromise(iteratorRecord, promiseCapability).\n...\n\nGetIterator ( obj [ , hint [ , method ] ] )\n\n...\n3. If method is not present, then\na. If hint is async, then\ni. Set method to ? GetMethod(obj, @@asyncIterator).\nii. If method is undefined, then\n1. Let syncMethod be ? GetMethod(obj, @@iterator).\n2. Let syncIteratorRecord be ? GetIterator(obj, sync, syncMethod).\n...\n4. Let iterator be ? Call(method, obj).\n...\n\nGetMethod\n\n2. Let func be ? GetV(V, P).\n3. If func is either undefined or null, return undefined.\n4. If IsCallable(func) is false, throw a TypeError exception.\n\nCall ( F, V [ , argumentsList ] )\n\n2. If IsCallable(F) is false, throw a TypeError exception.\n","features":["Promise.any","Symbol.iterator","Symbol","computed-property-names"],"flags":["async"]},{"path":"test/built-ins/Promise/any/iter-assigned-null-reject.js","esid":" sec-promise.any","description":" >Reject when argument's Symbol.iterator property has the value null\n","info":" |Promise.any ( iterable )\n\n...\n4. Let iteratorRecord be GetIterator(iterable).\n5. IfAbruptRejectPromise(iteratorRecord, promiseCapability).\n...\n\nGetIterator ( obj [ , hint [ , method ] ] )\n\n...\n3. If method is not present, then\na. If hint is async, then\n...\nb. Otherwise, set method to ? GetMethod(obj, @@iterator).\n4. Let iterator be ? Call(method, obj).\n5. If Type(iterator) is not Object, throw a TypeError exception.\n...\n\nGetMethod\n\n2. Let func be ? GetV(V, P).\n3. If func is either undefined or null, return undefined.\n4. If IsCallable(func) is false, throw a TypeError exception.\n\nCall ( F, V [ , argumentsList ] )\n\n2. If IsCallable(F) is false, throw a TypeError exception.\n","features":["Promise.any","Symbol.iterator","Symbol","computed-property-names"],"flags":["async"]},{"path":"test/built-ins/Promise/any/iter-assigned-number-reject.js","esid":" sec-promise.any","description":" >Reject when argument's Symbol.iterator property has the value 1\n","info":" |Promise.any ( iterable )\n\n...\n4. Let iteratorRecord be GetIterator(iterable).\n5. IfAbruptRejectPromise(iteratorRecord, promiseCapability).\n...\n\nGetIterator ( obj [ , hint [ , method ] ] )\n\n...\n3. If method is not present, then\na. If hint is async, then\n...\nb. Otherwise, set method to ? GetMethod(obj, @@iterator).\n4. Let iterator be ? Call(method, obj).\n5. If Type(iterator) is not Object, throw a TypeError exception.\n...\n\nGetMethod\n\n2. Let func be ? GetV(V, P).\n3. If func is either undefined or null, return undefined.\n4. If IsCallable(func) is false, throw a TypeError exception.\n\nCall ( F, V [ , argumentsList ] )\n\n2. If IsCallable(F) is false, throw a TypeError exception.\n","features":["Promise.any","Symbol.iterator","Symbol","computed-property-names"],"flags":["async"]},{"path":"test/built-ins/Promise/any/iter-assigned-string-reject.js","esid":" sec-promise.any","description":" >Reject when argument's Symbol.iterator property has the value \"\"\n","info":" |Promise.any ( iterable )\n\n...\n4. Let iteratorRecord be GetIterator(iterable).\n5. IfAbruptRejectPromise(iteratorRecord, promiseCapability).\n...\n\nGetIterator ( obj [ , hint [ , method ] ] )\n\n...\n3. If method is not present, then\na. If hint is async, then\n...\nb. Otherwise, set method to ? GetMethod(obj, @@iterator).\n4. Let iterator be ? Call(method, obj).\n5. If Type(iterator) is not Object, throw a TypeError exception.\n...\n\nGetMethod\n\n2. Let func be ? GetV(V, P).\n3. If func is either undefined or null, return undefined.\n4. If IsCallable(func) is false, throw a TypeError exception.\n\nCall ( F, V [ , argumentsList ] )\n\n2. If IsCallable(F) is false, throw a TypeError exception.\n","features":["Promise.any","Symbol.iterator","Symbol","computed-property-names"],"flags":["async"]},{"path":"test/built-ins/Promise/any/iter-assigned-symbol-reject.js","esid":" sec-promise.any","description":" >Reject when argument's Symbol.iterator property has the value Symbol()\n","info":" |Promise.any ( iterable )\n\n...\n4. Let iteratorRecord be GetIterator(iterable).\n5. IfAbruptRejectPromise(iteratorRecord, promiseCapability).\n...\n\nGetIterator ( obj [ , hint [ , method ] ] )\n\n...\n3. If method is not present, then\na. If hint is async, then\n...\nb. Otherwise, set method to ? GetMethod(obj, @@iterator).\n4. Let iterator be ? Call(method, obj).\n5. If Type(iterator) is not Object, throw a TypeError exception.\n...\n\nGetMethod\n\n2. Let func be ? GetV(V, P).\n3. If func is either undefined or null, return undefined.\n4. If IsCallable(func) is false, throw a TypeError exception.\n\nCall ( F, V [ , argumentsList ] )\n\n2. If IsCallable(F) is false, throw a TypeError exception.\n","features":["Promise.any","Symbol","Symbol.iterator","computed-property-names"],"flags":["async"]},{"path":"test/built-ins/Promise/any/iter-assigned-true-reject.js","esid":" sec-promise.any","description":" >Reject when argument's Symbol.iterator property has the value true\n","info":" |Promise.any ( iterable )\n\n...\n4. Let iteratorRecord be GetIterator(iterable).\n5. IfAbruptRejectPromise(iteratorRecord, promiseCapability).\n...\n\nGetIterator ( obj [ , hint [ , method ] ] )\n\n...\n3. If method is not present, then\na. If hint is async, then\n...\nb. Otherwise, set method to ? GetMethod(obj, @@iterator).\n4. Let iterator be ? Call(method, obj).\n5. If Type(iterator) is not Object, throw a TypeError exception.\n...\n\nGetMethod\n\n2. Let func be ? GetV(V, P).\n3. If func is either undefined or null, return undefined.\n4. If IsCallable(func) is false, throw a TypeError exception.\n\nCall ( F, V [ , argumentsList ] )\n\n2. If IsCallable(F) is false, throw a TypeError exception.\n","features":["Promise.any","Symbol.iterator","Symbol","computed-property-names"],"flags":["async"]},{"path":"test/built-ins/Promise/any/iter-assigned-undefined-reject.js","esid":" sec-promise.any","description":" >Reject when argument's Symbol.iterator property has the value undefined\n","info":" |Promise.any ( iterable )\n\n...\n4. Let iteratorRecord be GetIterator(iterable).\n5. IfAbruptRejectPromise(iteratorRecord, promiseCapability).\n...\n\nGetIterator ( obj [ , hint [ , method ] ] )\n\n...\n3. If method is not present, then\na. If hint is async, then\n...\nb. Otherwise, set method to ? GetMethod(obj, @@iterator).\n4. Let iterator be ? Call(method, obj).\n5. If Type(iterator) is not Object, throw a TypeError exception.\n...\n\nGetMethod\n\n2. Let func be ? GetV(V, P).\n3. If func is either undefined or null, return undefined.\n4. If IsCallable(func) is false, throw a TypeError exception.\n\nCall ( F, V [ , argumentsList ] )\n\n2. If IsCallable(F) is false, throw a TypeError exception.\n","features":["Promise.any","Symbol.iterator","Symbol","computed-property-names"],"flags":["async"]},{"path":"test/built-ins/Promise/any/not-a-constructor.js","esid":" sec-ecmascript-standard-built-in-objects","description":" >Promise.any does not implement [[Construct]], is not new-able\n","info":" |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n","includes":["isConstructor.js"],"features":["Reflect.construct","Promise.any","arrow-function"]},{"path":"test/built-ins/RegExp/prototype/Symbol.matchAll/isregexp-called-once.js","esid":" pending","description":" IsRegExp should only be called once","info":" |RegExp.prototype [ @@matchAll ] ( string )\n1. Let R be the this value.\n[...]\n4. Let C be ? SpeciesConstructor(R, %RegExp%).\n5. Let flags be ? ToString(? Get(R, \"flags\")).\n6. Let matcher be ? Construct(C, « R, flags »).\n\n21.2.3.1 RegExp ( pattern, flags )\n1. Let patternIsRegExp be ? IsRegExp(pattern).\n[...]\n","features":["Symbol.match","Symbol.matchAll"]},{"path":"test/built-ins/RegExp/prototype/Symbol.matchAll/isregexp-this-throws.js","esid":" pending","description":" Re-throws errors thrown while accessing RegExp's @@match property","info":" |RegExp.prototype [ @@matchAll ] ( string )\n[...]\n3. Return ? MatchAllIterator(R, string).\n\nMatchAllIterator ( R, O )\n[...]\n2. If ? IsRegExp(R) is true, then\n[...]\n","features":["Symbol.match","Symbol.matchAll"]},{"path":"test/built-ins/RegExp/prototype/Symbol.matchAll/length.js","esid":" pending","description":" RegExp.prototype[Symbol.matchAll] `length` property","info":" |17 ECMAScript Standard Built-in Objects:\n\n[...]\n\nEvery built-in function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description. Optional parameters\n(which are indicated with brackets: [ ]) or rest parameters (which\nare shown using the form «...name») are not included in the default\nargument count.\n\nUnless otherwise specified, the length property of a built-in function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["Symbol.matchAll"]},{"path":"test/built-ins/RegExp/prototype/Symbol.matchAll/name.js","esid":" pending","description":" RegExp.prototype[Symbol.matchAll] `name` property","info":" |17 ECMAScript Standard Built-in Objects:\n\n[...]\n\nEvery built-in function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\n[...]\n\nUnless otherwise specified, the name property of a built-in function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["Symbol.matchAll"]},{"path":"test/built-ins/RegExp/prototype/Symbol.matchAll/not-a-constructor.js","esid":" sec-ecmascript-standard-built-in-objects","description":" >RegExp.prototype[Symbol.matchAll] does not implement [[Construct]], is not new-able\n","info":" |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n","includes":["isConstructor.js"],"features":["Reflect.construct","Symbol","Symbol.match","Symbol.matchAll","arrow-function"]},{"path":"test/built-ins/RegExp/prototype/Symbol.matchAll/prop-desc.js","esid":" pending","description":" RegExp.prototype[Symbol.matchAll] property descriptor","info":" |17 ECMAScript Standard Built-in Objects:\n\n[...]\n\nEvery other data property described in clauses 18 through 26 and in Annex\nB.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false,\n[[Configurable]]: true } unless otherwise specified.\n","includes":["propertyHelper.js"],"features":["Symbol.matchAll"]},{"path":"test/built-ins/RegExp/prototype/Symbol.matchAll/regexpcreate-this-throws.js","esid":" pending","description":" Re-throws errors while creating an internal RegExp","info":" |RegExp.prototype [ @@matchAll ] ( string )\n[...]\n3. Return ? MatchAllIterator(R, string).\n\nMatchAllIterator ( R, O )\n[...]\n2. If ? IsRegExp(R) is true, then\n[...]\n3. Else,\na. Let flags be \"g\".\nb. Let matcher be ? RegExpCreate(R, flags).\n","features":["Symbol.matchAll"]},{"path":"test/built-ins/RegExp/prototype/Symbol.matchAll/species-constructor-get-constructor-throws.js","esid":" pending","description":" |Re-throws errors thrown while accessing RegExp's constructor property\n","info":" |RegExp.prototype [ @@matchAll ] ( string )\n[...]\n3. Return ? MatchAllIterator(R, string).\n\nMatchAllIterator ( R, O )\n[...]\n2. If ? IsRegExp(R) is true, then\na. Let C be ? SpeciesConstructor(R, RegExp).\n\nSpeciesConstructor ( O, defaultConstructor )\n[...]\n2. Let C be ? Get(O, \"constructor\").\n","features":["Symbol.matchAll"]},{"path":"test/built-ins/RegExp/prototype/Symbol.matchAll/species-constructor-get-species-throws.js","esid":" pending","description":" Re-throws errors thrown while accessing of @@species property","info":" |RegExp.prototype [ @@matchAll ] ( string )\n[...]\n3. Return ? MatchAllIterator(R, string).\n\nMatchAllIterator ( R, O )\n[...]\n2. If ? IsRegExp(R) is true, then\na. Let C be ? SpeciesConstructor(R, RegExp).\n\nSpeciesConstructor ( O, defaultConstructor )\n[...]\n2. Let C be ? Get(O, \"constructor\").\n","features":["Symbol.matchAll","Symbol.species"]},{"path":"test/built-ins/RegExp/prototype/Symbol.matchAll/species-constructor-is-not-object-throws.js","esid":" pending","description":" Throws TypeError if `constructor` property is not an object","info":" |RegExp.prototype [ @@matchAll ] ( string )\n[...]\n3. Return ? MatchAllIterator(R, string).\n\nMatchAllIterator ( R, O )\n[...]\n2. If ? IsRegExp(R) is true, then\na. Let C be ? SpeciesConstructor(R, RegExp).\n\nSpeciesConstructor ( O, defaultConstructor )\n[...]\n2. Let C be ? Get(O, \"constructor\").\n3. If C is undefined, return defaultConstructor.\n4. If Type(C) is not Object, throw a TypeError exception.\n","features":["Symbol.matchAll"]},{"path":"test/built-ins/RegExp/prototype/Symbol.matchAll/species-constructor-is-undefined.js","esid":" pending","description":" Throws TypeError if `constructor` property is not an object","info":" |RegExp.prototype [ @@matchAll ] ( string )\n[...]\n3. Return ? MatchAllIterator(R, string).\n\nMatchAllIterator ( R, O )\n[...]\n2. If ? IsRegExp(R) is true, then\na. Let C be ? SpeciesConstructor(R, RegExp).\n\nSpeciesConstructor ( O, defaultConstructor )\n[...]\n2. Let C be ? Get(O, \"constructor\").\n3. If C is undefined, return defaultConstructor.\n","features":["Symbol.matchAll"],"includes":["compareArray.js","compareIterator.js","regExpUtils.js"]},{"path":"test/built-ins/RegExp/prototype/Symbol.matchAll/species-constructor-species-is-not-constructor.js","esid":" pending","description":" TypeError is thrown when species constructor is not a constructor","info":" |RegExp.prototype [ @@matchAll ] ( string )\n[...]\n2. Return ? [MatchAllIterator](#matchalliterator)(R, string).\n\nMatchAllIterator ( R, O )\n[...]\n3. Let C be ? [SpeciesConstructor][species-constructor](R, RegExp).\n\nSpeciesConstructor ( O, defaultConstructor )\n[...]\n2. Let C be ? Get(O, \"constructor\").\n3. If C is undefined, return defaultConstructor.\n4. If Type(C) is not Object, throw a TypeError exception.\n5. Let S be ? Get(C, @@species).\n6. If S is either undefined or null, return defaultConstructor.\n7. If IsConstructor(S) is true, return S.\n8. Throw a TypeError exception.\n","features":["Symbol.matchAll","Symbol.species"]},{"path":"test/built-ins/RegExp/prototype/Symbol.matchAll/species-constructor-species-is-null-or-undefined.js","esid":" pending","description":" |Default constructor is used when species constructor is null or undefined\n","info":" |RegExp.prototype [ @@matchAll ] ( string )\n[...]\n2. Return ? [MatchAllIterator](#matchalliterator)(R, string).\n\nMatchAllIterator ( R, O )\n[...]\n3. Let C be ? [SpeciesConstructor][species-constructor](R, RegExp).\n\nSpeciesConstructor ( O, defaultConstructor )\n[...]\n2. Let C be ? Get(O, \"constructor\").\n3. If C is undefined, return defaultConstructor.\n4. If Type(C) is not Object, throw a TypeError exception.\n5. Let S be ? Get(C, @@species).\n6. If S is either undefined or null, return defaultConstructor.\n","features":["Symbol.matchAll","Symbol.species"],"includes":["compareArray.js","compareIterator.js","regExpUtils.js"]},{"path":"test/built-ins/RegExp/prototype/Symbol.matchAll/species-constructor-species-throws.js","esid":" pending","description":" Re-throws errors when calling constructor's @@species","info":" |RegExp.prototype [ @@matchAll ] ( string )\n[...]\n3. Return ? MatchAllIterator(R, string).\n\nMatchAllIterator ( R, O )\n[...]\n2. If ? IsRegExp(R) is true, then\na. Let C be ? SpeciesConstructor(R, RegExp).\nb. Let flags be ? ToString(? Get(R, \"flags\"))\nc. Let matcher be ? Construct(C, R, flags).\n","features":["Symbol.matchAll","Symbol.species"]},{"path":"test/built-ins/RegExp/prototype/Symbol.matchAll/species-constructor.js","esid":" pending","description":" Custom species constructor is called when creating internal RegExp","info":" |RegExp.prototype [ @@matchAll ] ( string )\n[...]\n4. Let C be ? SpeciesConstructor(R, %RegExp%).\n5. Let flags be ? ToString(? Get(R, \"flags\")).\n6. Let matcher be ? Construct(C, « R, flags »).\n[...]\n9. If flags contains \"g\", let global be true.\n10. Else, let global be false.\n[...]\n","features":["Symbol.matchAll","Symbol.species"],"includes":["compareArray.js","compareIterator.js","regExpUtils.js"]},{"path":"test/built-ins/RegExp/prototype/Symbol.matchAll/species-regexp-get-global-throws.js","esid":" pending","description":" |Doesn't access the \"global\" property of the constructed RegExp\n","info":" |RegExp.prototype [ @@matchAll ] ( string )\n[...]\n4. Let C be ? SpeciesConstructor(R, %RegExp%).\n5. Let flags be ? ToString(? Get(R, \"flags\")).\n6. Let matcher be ? Construct(C, « R, flags »).\n[...]\n9. If flags contains \"g\", let global be true.\n10. Else, let global be false.\n[...]\n","features":["Symbol.matchAll","Symbol.species"]},{"path":"test/built-ins/RegExp/prototype/Symbol.matchAll/species-regexp-get-unicode-throws.js","esid":" pending","description":" |Doesn't access the \"unicode\" property of the constructed RegExp\n","info":" |RegExp.prototype [ @@matchAll ] ( string )\n[...]\n4. Let C be ? SpeciesConstructor(R, %RegExp%).\n5. Let flags be ? ToString(? Get(R, \"flags\")).\n6. Let matcher be ? Construct(C, « R, flags »).\n[...]\n11. If flags contains \"u\", let fullUnicode be true.\n12. Else, let fullUnicode be false.\n[...]\n","features":["Symbol.matchAll","Symbol.species"]},{"path":"test/built-ins/RegExp/prototype/Symbol.matchAll/string-tostring-throws.js","esid":" pending","description":" String coercion of string parameter","info":" |RegExp.prototype [ @@matchAll ] ( string )\n[...]\n3. Return ? MatchAllIterator(R, string).\n\nMatchAllIterator ( R, O )\n1. Let S be ? ToString(O).\n","features":["Symbol.matchAll"]},{"path":"test/built-ins/RegExp/prototype/Symbol.matchAll/string-tostring.js","esid":" pending","description":" String coercion of `string` argument","info":" |RegExp.prototype [ @@matchAll ] ( string )\n[...]\n3. Return ? MatchAllIterator(R, string).\n\nMatchAllIterator ( R, O )\n1. Let S be ? ToString(O).\n","features":["Symbol.matchAll"],"includes":["compareArray.js","compareIterator.js","regExpUtils.js"]},{"path":"test/built-ins/RegExp/prototype/Symbol.matchAll/this-get-flags-throws.js","esid":" pending","description":" Re-throws errors thrown while accessing RegExp's flags property","info":" |RegExp.prototype [ @@matchAll ] ( string )\n[...]\n3. Return ? MatchAllIterator(R, string).\n\nMatchAllIterator ( R, O )\n[...]\n2. If ? IsRegExp(R) is true, then\n[...]\nb. Let flags be ? ToString(? Get(R, \"flags\"))\n","features":["Symbol.matchAll"]},{"path":"test/built-ins/RegExp/prototype/Symbol.matchAll/this-get-flags.js","esid":" pending","description":" Regexp's flags","info":" |RegExp.prototype [ @@matchAll ] ( string )\n[...]\n3. Return ? MatchAllIterator(R, string).\n\nMatchAllIterator ( R, O )\n[...]\n2. If ? IsRegExp(R) is true, then\n[...]\nb. Let flags be ? ToString(? Get(R, \"flags\"))\n","features":["Symbol.matchAll"],"includes":["compareArray.js","compareIterator.js","regExpUtils.js"]},{"path":"test/built-ins/RegExp/prototype/Symbol.matchAll/this-lastindex-cached.js","esid":" pending","description":" Verify regexp's lastIndex is cached","info":" |RegExp.prototype [ @@matchAll ] ( string )\n[...]\n3. Return ? MatchAllIterator(R, string).\n\nMatchAllIterator ( R, O )\n[...]\n2. If ? IsRegExp(R) is true, then\n[...]\nf. Let lastIndex be ? ToLength(? Get(R, \"lastIndex\")).\ng. Perform ? Set(matcher, \"lastIndex\", lastIndex, true).\n","features":["Symbol.matchAll"],"includes":["compareArray.js","compareIterator.js","regExpUtils.js"]},{"path":"test/built-ins/RegExp/prototype/Symbol.matchAll/this-not-object-throws.js","esid":" pending","description":" Throws TypeError when `this` is not an Object","info":" |RegExp.prototype [ @@matchAll ] ( string )\n1. Let R be the this value.\n2. If Type(R) is not Object, throw a TypeError exception.\n","features":["Symbol.matchAll"]},{"path":"test/built-ins/RegExp/prototype/Symbol.matchAll/this-tolength-lastindex-throws.js","esid":" pending","description":" Re-throws errors while coercing RegExp's lastIndex","info":" |RegExp.prototype [ @@matchAll ] ( string )\n[...]\n3. Return ? MatchAllIterator(R, string).\n\nMatchAllIterator ( R, O )\n[...]\n2. If ? IsRegExp(R) is true, then\n[...]\nf. Let lastIndex be ? ToLength(? Get(R, \"lastIndex\")).\n","features":["Symbol.matchAll"]},{"path":"test/built-ins/RegExp/prototype/Symbol.matchAll/this-tostring-flags-throws.js","esid":" pending","description":" Re-throws errors while coercing RegExp's flags to a string","info":" |RegExp.prototype [ @@matchAll ] ( string )\n[...]\n3. Return ? MatchAllIterator(R, string).\n\nMatchAllIterator ( R, O )\n[...]\n2. If ? IsRegExp(R) is true, then\n[...]\nb. Let flags be ? ToString(? Get(R, \"flags\"))\n","features":["Symbol.matchAll"]},{"path":"test/built-ins/RegExp/prototype/Symbol.matchAll/this-tostring-flags.js","esid":" pending","description":" Corercing regexp's flags","info":" |RegExp.prototype [ @@matchAll ] ( string )\n[...]\n3. Return ? MatchAllIterator(R, string).\n\nMatchAllIterator ( R, O )\n[...]\n2. If ? IsRegExp(R) is true, then\n[...]\nb. Let flags be ? ToString(? Get(R, \"flags\"))\n","features":["Symbol.matchAll"],"includes":["compareArray.js","compareIterator.js","regExpUtils.js"]},{"path":"test/built-ins/RegExpStringIteratorPrototype/Symbol.toStringTag.js","esid":" pending","description":" |`Symbol.toStringTag` property descriptor\n","info":" |The initial value of the @@toStringTag property is the string value \"String\nIterator\".\n\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]:\nfalse, [[Configurable]]: true }.\n","features":["Symbol.matchAll","Symbol.toStringTag"],"includes":["propertyHelper.js"]},{"path":"test/built-ins/RegExpStringIteratorPrototype/ancestry.js","esid":" pending","description":" |The [[Prototype]] internal slot ofthe %RegExpStringIteratorPrototype% is the\n%IteratorPrototype% intrinsic object (25.1.2).\n","features":["Symbol.iterator","Symbol.matchAll"]},{"path":"test/built-ins/RegExpStringIteratorPrototype/next/custom-regexpexec-call-throws.js","esid":" pending","description":" Re-throws errors when calling exec","info":" |%RegExpStringIteratorPrototype%.next ( )\n[...]\n9. Let match be ? RegExpExec(R, S).\n\nRuntime Semantics: RegExpExec ( R, S )\n1. Assert: Type(R) is Object.\n2. Assert: Type(S) is String.\n3. Let exec be ? Get(R, \"exec\").\n4. If IsCallable(exec) is true, then\na. Let result be ? Call(exec, R, « S »).\n","features":["Symbol.matchAll"]},{"path":"test/built-ins/RegExpStringIteratorPrototype/next/custom-regexpexec-get-throws.js","esid":" pending","description":" Re-throws errors thrown while accessing RegExp's exec property","info":" |%RegExpStringIteratorPrototype%.next ( )\n[...]\n9. Let match be ? RegExpExec(R, S).\n\nRuntime Semantics: RegExpExec ( R, S )\n1. Assert: Type(R) is Object.\n2. Assert: Type(S) is String.\n3. Let exec be ? Get(R, \"exec\").\n","features":["Symbol.matchAll"]},{"path":"test/built-ins/RegExpStringIteratorPrototype/next/custom-regexpexec-match-get-0-throws.js","esid":" pending","description":" Re-throws errors thrown while accessing the first match","info":" |%RegExpStringIteratorPrototype%.next ( )\n[...]\n9. Let match be ? RegExpExec(R, S).\n10. If match is null, then\n[...]\n11. Else,\na. If global is true,\ni. Let matchStr be ? ToString(? Get(match, \"0\")).\n","features":["Symbol.matchAll"]},{"path":"test/built-ins/RegExpStringIteratorPrototype/next/custom-regexpexec-match-get-0-tostring-throws.js","esid":" pending","description":" Re-throws errors thrown from coercing first match to a string","info":" |%RegExpStringIteratorPrototype%.next ( )\n[...]\n9. Let match be ? RegExpExec(R, S).\n10. If match is null, then\n[...]\n11. Else,\na. If global is true,\ni. Let matchStr be ? ToString(? Get(match, \"0\")).\n","features":["Symbol.matchAll"]},{"path":"test/built-ins/RegExpStringIteratorPrototype/next/custom-regexpexec-match-get-0-tostring.js","esid":" pending","description":" Behavior when first match is coerced to a empty string","info":" |%RegExpStringIteratorPrototype%.next ( )\n[...]\n9. Let match be ? RegExpExec(R, S).\n10. If match is null, then\n[...]\n11. Else,\na. If global is true,\ni. Let matchStr be ? ToString(? Get(match, \"0\")).\nii. If matchStr is the empty string,\n1. Let thisIndex be ? ToLength(? Get(R, \"lastIndex\").\n2. Let nextIndex be ! AdvanceStringIndex(S, thisIndex, fullUnicode).\n3. Perform ? Set(R, \"lastIndex\", nextIndex, true).\niii. Return ! CreateIterResultObject(match, false).\n","features":["Symbol.matchAll"]},{"path":"test/built-ins/RegExpStringIteratorPrototype/next/custom-regexpexec-not-callable.js","esid":" pending","description":" Behavior with a custom RegExp exec","info":" |%RegExpStringIteratorPrototype%.next ( )\n[...]\n9. Let match be ? RegExpExec(R, S).\n\nRuntime Semantics: RegExpExec ( R, S )\n1. Assert: Type(R) is Object.\n2. Assert: Type(S) is String.\n3. Let exec be ? Get(R, \"exec\").\n4. If IsCallable(exec) is true, then\n[...]\n5. If R does not have a [[RegExpMatcher]] internal slot, throw a\nTypeError exception.\n6. Return ? RegExpBuiltinExec(R, S).\n","features":["Symbol.matchAll"],"includes":["compareArray.js","compareIterator.js","regExpUtils.js"]},{"path":"test/built-ins/RegExpStringIteratorPrototype/next/custom-regexpexec.js","esid":" pending","description":" Behavior with a custom RegExp exec","info":" |%RegExpStringIteratorPrototype%.next ( )\n[...]\n9. Let match be ? RegExpExec(R, S).\n\nRuntime Semantics: RegExpExec ( R, S )\n1. Assert: Type(R) is Object.\n2. Assert: Type(S) is String.\n3. Let exec be ? Get(R, \"exec\").\n4. If IsCallable(exec) is true, then\na. Let result be ? Call(exec, R, « S »).\nb. If Type(result) is neither Object or Null, throw a TypeError exception.\nc. Return result.\n","features":["Symbol.matchAll"]},{"path":"test/built-ins/RegExpStringIteratorPrototype/next/length.js","esid":" pending","description":" |%RegExpStringIteratorPrototype%.next `length` property\n","info":" |17 ECMAScript Standard Built-in Objects:\n\n[...]\n\nEvery built-in function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description. Optional parameters\n(which are indicated with brackets: [ ]) or rest parameters (which\nare shown using the form «...name») are not included in the default\nargument count.\n\nUnless otherwise specified, the length property of a built-in function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["Symbol.matchAll"]},{"path":"test/built-ins/RegExpStringIteratorPrototype/next/name.js","esid":" pending","description":" |%RegExpStringIteratorPrototype%.next `name` property\n","info":" |17 ECMAScript Standard Built-in Objects:\n\n[...]\n\nEvery built-in function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\n[...]\n\nUnless otherwise specified, the name property of a built-in function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["Symbol.matchAll"]},{"path":"test/built-ins/RegExpStringIteratorPrototype/next/next-iteration-global.js","esid":" pending","description":" Iterates over each match","info":" |%RegExpStringIteratorPrototype%.next ( )\n[...]\n4. If O.[[Done]] is true, then\na. Return ! reateIterResultObject(undefined, true).\n[...]\n9. Let match be ? RegExpExec(R, S).\n10. If match is null, then\na. Set O.[[Done]] to true.\nb. Return ! CreateIterResultObject(undefined, true).\n11. Else,\na. If global is true,\ni. Let matchStr be ? ToString(? Get(match, \"0\")).\nii. If matchStr is the empty string,\n1. Let thisIndex be ? ToLength(? Get(R, \"lastIndex\").\n2. Let nextIndex be ! AdvanceStringIndex(S, thisIndex, fullUnicode).\n3. Perform ? Set(R, \"lastIndex\", nextIndex, true).\niii. Return ! CreateIterResultObject(match, false).\n","features":["Symbol.matchAll"],"includes":["compareArray.js","compareIterator.js","regExpUtils.js"]},{"path":"test/built-ins/RegExpStringIteratorPrototype/next/next-iteration.js","esid":" pending","description":" Iterates over the first match","info":" |%RegExpStringIteratorPrototype%.next ( )\n[...]\n4. If O.[[Done]] is true, then\na. Return ! reateIterResultObject(undefined, true).\n[...]\n9. Let match be ? RegExpExec(R, S).\n10. If match is null, then\na. Set O.[[Done]] to true.\nb. Return ! CreateIterResultObject(undefined, true).\n11. Else,\na. If global is true,\n[...]\nb. Else,\ni. Set O.[[Done]] to true.\nii. Return ! CreateIterResultObject(match, false).\n","features":["Symbol.matchAll"],"includes":["compareArray.js","compareIterator.js","regExpUtils.js"]},{"path":"test/built-ins/RegExpStringIteratorPrototype/next/next-missing-internal-slots.js","esid":" pending","description":" Throws TypeError when `this` does not have all internal slots","info":" |%RegExpStringIteratorPrototype%.next ( )\n1. Let O be the this value.\n2. If Type(O) is not Object, throw a TypeError exception.\n3. If O does not have all of the internal slots of a RegExp String Iterator\nObject Instance (see PropertiesOfRegExpStringIteratorInstances), throw a\nTypeError.\n","features":["Symbol.matchAll"]},{"path":"test/built-ins/RegExpStringIteratorPrototype/next/prop-desc.js","esid":" pending","description":" |%RegExpStringIteratorPrototype%.next property descriptor\n","info":" |17 ECMAScript Standard Built-in Objects:\n\n[...]\n\nEvery other data property described in clauses 18 through 26 and in Annex\nB.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false,\n[[Configurable]]: true } unless otherwise specified.\n","includes":["propertyHelper.js"],"features":["Symbol.matchAll"]},{"path":"test/built-ins/RegExpStringIteratorPrototype/next/regexp-tolength-lastindex-throws.js","esid":" pending","description":" Re-throws errors thrown coercing RegExp's lastIndex to a length","info":" |%RegExpStringIteratorPrototype%.next ( )\n[...]\n9. Let match be ? RegExpExec(R, S).\n10. If match is null, then\n[...]\n11. Else,\na. If global is true,\ni. Let matchStr be ? ToString(? Get(match, \"0\")).\nii. If matchStr is the empty string,\n1. Let thisIndex be ? ToLength(? Get(R, \"lastIndex\").\n","features":["Symbol.matchAll"]},{"path":"test/built-ins/RegExpStringIteratorPrototype/next/this-is-not-object-throws.js","esid":" pending","description":" Throws TypeError when `this` is not an Object","info":" |%RegExpStringIteratorPrototype%.next ( )\n1. Let O be the this value.\n2. If Type(O) is not Object, throw a TypeError exception.\n","features":["Symbol.matchAll"]},{"path":"test/built-ins/String/prototype/matchAll/flags-nonglobal-throws.js","esid":" pending","description":" Re-throws errors when calling @@matchAll","info":" |String.prototype.matchAll ( regexp )\n[...]\n2. If _regexp_ is neither *undefined* nor *null*, then\n1. Let _isRegExp_ be ? IsRegExp(_regexp_).\n1. If _isRegExp_ is true, then\n1. Let _flags_ be ? Get(_regexp_, *\"flags\"*).\n1. Perform ? RequireObjectCoercible(_flags_).\n1. If ? ToString(_flags_) does not contain *\"g\"*, throw a *TypeError* exception.\n","features":["Symbol.matchAll"]},{"path":"test/built-ins/String/prototype/matchAll/flags-undefined-throws.js","esid":" pending","description":" Re-throws errors when calling @@matchAll","info":" |String.prototype.matchAll ( regexp )\n[...]\n2. If _regexp_ is neither *undefined* nor *null*, then\n1. Let _isRegExp_ be ? IsRegExp(_regexp_).\n1. If _isRegExp_ is true, then\n1. Let _flags_ be ? Get(_regexp_, *\"flags\"*).\n1. Perform ? RequireObjectCoercible(_flags_).\n1. If ? ToString(_flags_) does not contain *\"g\"*, throw a *TypeError* exception.\n","features":["Symbol.matchAll"]},{"path":"test/built-ins/String/prototype/matchAll/length.js","esid":" pending","description":" String.prototype.matchAll `length` property","info":" |17 ECMAScript Standard Built-in Objects:\n\n[...]\n\nEvery built-in function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description. Optional parameters\n(which are indicated with brackets: [ ]) or rest parameters (which\nare shown using the form «...name») are not included in the default\nargument count.\n\nUnless otherwise specified, the length property of a built-in function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["String.prototype.matchAll"]},{"path":"test/built-ins/String/prototype/matchAll/name.js","esid":" pending","description":" String.prototype.matchAll `name` property","info":" |17 ECMAScript Standard Built-in Objects:\n\n[...]\n\nEvery built-in function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\n[...]\n\nUnless otherwise specified, the name property of a built-in function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["String.prototype.matchAll"]},{"path":"test/built-ins/String/prototype/matchAll/not-a-constructor.js","esid":" sec-ecmascript-standard-built-in-objects","description":" >String.prototype.matchAll does not implement [[Construct]], is not new-able\n","info":" |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n","includes":["isConstructor.js"],"features":["Reflect.construct","String.prototype.matchAll","arrow-function"]},{"path":"test/built-ins/String/prototype/matchAll/prop-desc.js","esid":" pending","description":" String.prototype.matchAll property descriptor","info":" |17 ECMAScript Standard Built-in Objects:\n\n[...]\n\nEvery other data property described in clauses 18 through 26 and in Annex\nB.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false,\n[[Configurable]]: true } unless otherwise specified.\n","includes":["propertyHelper.js"],"features":["String.prototype.matchAll"]},{"path":"test/built-ins/String/prototype/matchAll/regexp-get-matchAll-throws.js","esid":" pending","description":" Re-throws errors when calling @@matchAll","info":" |String.prototype.matchAll ( regexp )\n[...]\n2. If regexp is neither undefined nor null, then\na. Let matcher be ? GetMethod(regexp, @@matchAll).\nb. If matcher is not undefined, then\ni. Return ? Call(matcher, regexp, « O »).\n","features":["Symbol.matchAll","String.prototype.matchAll"]},{"path":"test/built-ins/String/prototype/matchAll/regexp-is-null.js","esid":" pending","description":" Behavior when regexp is null","info":" |String.prototype.matchAll ( regexp )\n1. Let O be ? RequireObjectCoercible(this value).\n2. If regexp is neither undefined nor null, then\n[...]\n3. Let S be ? ToString(O).\n4. Let rx be ? RegExpCreate(R, \"g\").\n5. Return ? Invoke(rx, @@matchAll, « S »).\n","features":["String.prototype.matchAll"],"includes":["compareArray.js","compareIterator.js","regExpUtils.js"]},{"path":"test/built-ins/String/prototype/matchAll/regexp-is-undefined-or-null-invokes-matchAll.js","esid":" pending","description":" Behavior when regexp is null or undefined","info":" |String.prototype.matchAll ( regexp )\n1. Let O be ? RequireObjectCoercible(this value).\n2. If regexp is neither undefined nor null, then\n[...]\n3. Let S be ? ToString(O).\n4. Let rx be ? RegExpCreate(R, \"g\").\n5. Return ? Invoke(rx, @@matchAll, « S »).\n","features":["String.prototype.matchAll"]},{"path":"test/built-ins/String/prototype/matchAll/regexp-is-undefined.js","esid":" pending","description":" Behavior when regexp is null","info":" |String.prototype.matchAll ( regexp )\n1. Let O be ? RequireObjectCoercible(this value).\n2. If regexp is neither undefined nor null, then\n[...]\n3. Return ? MatchAllIterator(regexp, O).\n\nMatchAllIterator( regexp, O )\n[...]\n2. If ? IsRegExp(regexp) is true, then\n[...]\n3. Else,\na. Let R be RegExpCreate(regexp, \"g\").\n","features":["String.prototype.matchAll"],"includes":["compareArray.js","compareIterator.js","regExpUtils.js"]},{"path":"test/built-ins/String/prototype/matchAll/regexp-matchAll-invocation.js","esid":" pending","description":" Invocation of @@matchAll property of user-supplied RegExp objects","info":" |String.prototype.matchAll ( regexp )\n[...]\n2. If regexp is neither undefined nor null, then\na. Let matcher be ? GetMethod(regexp, @@matchAll).\nb. If matcher is not undefined, then\ni. Return ? Call(matcher, regexp, « O »).\n","features":["Symbol.matchAll","String.prototype.matchAll"]},{"path":"test/built-ins/String/prototype/matchAll/regexp-matchAll-is-undefined-or-null.js","esid":" pending","description":" Behavior when regexp[@@matchAll] is undefined or null","info":" |String.prototype.matchAll ( regexp )\n1. Let O be ? RequireObjectCoercible(this value).\n2. If regexp is neither undefined nor null, then\na. Let matcher be ? GetMethod(regexp, @@matchAll).\nb. If matcher is not undefined, then\n[...]\n3. Let S be ? ToString(O).\n4. Let rx be ? RegExpCreate(R, \"g\").\n5. Return ? Invoke(rx, @@matchAll, « S »).\n","features":["Symbol.matchAll","String.prototype.matchAll"]},{"path":"test/built-ins/String/prototype/matchAll/regexp-matchAll-not-callable.js","esid":" pending","description":" Behavior when regexp[@@matchAll] is not callable","info":" |String.prototype.matchAll ( regexp )\n[...]\n2. If regexp is neither undefined nor null, then\na. Let matcher be ? GetMethod(regexp, @@matchAll).\n","features":["Symbol.matchAll","String.prototype.matchAll"]},{"path":"test/built-ins/String/prototype/matchAll/regexp-matchAll-throws.js","esid":" pending","description":" Re-throws errors when calling @@matchAll","info":" |String.prototype.matchAll ( regexp )\n[...]\n2. If regexp is neither undefined nor null, then\na. Let matcher be ? GetMethod(regexp, @@matchAll).\n","features":["Symbol.matchAll","String.prototype.matchAll"]},{"path":"test/built-ins/String/prototype/matchAll/regexp-prototype-get-matchAll-throws.js","esid":" pending","description":" Re-throws errors thrown while accessing RegExp's @@matchAll property","info":" |String.prototype.matchAll ( regexp )\n[...]\n2. If regexp is neither undefined nor null, then\na. Let matcher be ? GetMethod(regexp, @@matchAll).\n","features":["Symbol.matchAll"]},{"path":"test/built-ins/String/prototype/matchAll/regexp-prototype-has-no-matchAll.js","esid":" pending","description":" Behavior when @@matchAll is removed from RegExp's prototype","info":" |String.prototype.matchAll ( regexp )\n1. Let O be ? RequireObjectCoercible(this value).\n2. If regexp is neither undefined nor null, then\na. Let matcher be ? GetMethod(regexp, @@matchAll).\nb. If matcher is not undefined, then\n[...]\n[...]\n4. Let rx be ? RegExpCreate(R, \"g\").\n5. Return ? Invoke(rx, @@matchAll, « S »).\n\n","features":["Symbol.matchAll","String.prototype.matchAll"]},{"path":"test/built-ins/String/prototype/matchAll/regexp-prototype-matchAll-invocation.js","esid":" pending","description":" Behavior when invoking of @@matchAll","info":" |String.prototype.matchAll ( regexp )\n[...]\n2. If regexp is neither undefined nor null, then\na. Let matcher be ? GetMethod(regexp, @@matchAll).\nb. If matcher is not undefined, then\ni. Return ? Call(matcher, regexp, « O »).\n","features":["Symbol.matchAll"]},{"path":"test/built-ins/String/prototype/matchAll/regexp-prototype-matchAll-throws.js","esid":" pending","description":" Re-throws errors when calling @@matchAll","info":" |String.prototype.matchAll ( regexp )\n[...]\n2. If regexp is neither undefined nor null, then\na. Let matcher be ? GetMethod(regexp, @@matchAll).\nb. If matcher is not undefined, then\ni. Return ? Call(matcher, regexp, « O »).\n","features":["Symbol.matchAll"]},{"path":"test/built-ins/String/prototype/matchAll/this-val-non-obj-coercible.js","esid":" pending","description":" The `this` value cannot be coerced into an object","info":" |String.prototype.matchAll ( regexp )\n1. Let O be RequireObjectCoercible(this value).\n","features":["String.prototype.matchAll"]},{"path":"test/built-ins/String/prototype/matchAll/toString-this-val.js","esid":" pending","description":" |Verify ToString is called when regexp[@@matchAll] is undefined or null\n","info":" |String.prototype.matchAll ( regexp )\n1. Let O be ? RequireObjectCoercible(this value).\n2. If regexp is neither undefined nor null, then\na. Let matcher be ? GetMethod(regexp, @@matchAll).\nb. If matcher is not undefined, then\n[...]\n3. Let S be ? ToString(O).\n4. Let rx be ? RegExpCreate(R, \"g\").\n5. Return ? Invoke(rx, @@matchAll, « S »).\n","features":["Symbol.matchAll","String.prototype.matchAll"]},{"path":"test/built-ins/String/prototype/replaceAll/not-a-constructor.js","esid":" sec-ecmascript-standard-built-in-objects","description":" >String.prototype.replaceAll does not implement [[Construct]], is not new-able\n","info":" |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n","includes":["isConstructor.js"],"features":["Reflect.construct","arrow-function"]},{"path":"test/built-ins/Symbol/matchAll/cross-realm.js","esid":" pending","description":" Value shared by all realms","info":" |Unless otherwise specified, well-known symbols values are shared by all\nrealms.\n","features":["cross-realm","Symbol.matchAll"]},{"path":"test/built-ins/Symbol/matchAll/prop-desc.js","esid":" pending","description":" |`Symbol.matchAll` property descriptor\n","info":" |This property has the attributes { [[Writable]]: false, [[Enumerable]]:\nfalse, [[Configurable]]: false }.\n","includes":["propertyHelper.js"],"features":["Symbol.matchAll"]},{"path":"test/built-ins/TypedArrayConstructors/BigInt64Array/BYTES_PER_ELEMENT.js","esid":" sec-typedarray.bytes_per_element","description":" BigInt64Array.BYTES_PER_ELEMENT property descriptor","info":" |22.2.5.1 TypedArray.BYTES_PER_ELEMENT\n\nThe value of TypedArray.BYTES_PER_ELEMENT is the Number value of the\nElement Size value specified in Table 52 for TypedArray.\n\nThis property has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: false }.\n","includes":["propertyHelper.js"],"features":["BigInt"]},{"path":"test/built-ins/TypedArrayConstructors/BigInt64Array/constructor.js","esid":" sec-typedarray-constructors","description":" BigInt64Array is a constructor function","info":" |22.2.4 The TypedArray Constructors\n\n[...]\n\nThe TypedArray intrinsic constructor functions are single functions\nwhose behaviour is overloaded based upon the number and types of its\narguments. The actual behaviour of a call of TypedArray depends upon\nthe number and kind of arguments that are passed to it.\n","features":["BigInt"]},{"path":"test/built-ins/TypedArrayConstructors/BigInt64Array/is-a-constructor.js","esid":" sec-ecmascript-standard-built-in-objects","description":" >The BigInt64Array constructor implements [[Construct]]\n","info":" |IsConstructor ( argument )\n\nThe abstract operation IsConstructor takes argument argument (an ECMAScript language value).\nIt determines if argument is a function object with a [[Construct]] internal method.\nIt performs the following steps when called:\n\nIf Type(argument) is not Object, return false.\nIf argument has a [[Construct]] internal method, return true.\nReturn false.\n","includes":["isConstructor.js"],"features":["Reflect.construct","BigInt","TypedArray"]},{"path":"test/built-ins/TypedArrayConstructors/BigInt64Array/length.js","esid":" sec-typedarray-constructors","description":" BigInt64Array.length property descriptor","info":" |The TypedArray Constructors\n\nThe length property of the TypedArray constructor function is 3.\n\n17 ECMAScript Standard Built-in Objects\n\n...\n\nUnless otherwise specified, the length property of a built-in function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["BigInt","TypedArray"]},{"path":"test/built-ins/TypedArrayConstructors/BigInt64Array/name.js","esid":" sec-properties-of-the-typedarray-constructors","description":" BigInt64Array.name property descriptor","info":" |22.2.5 Properties of the TypedArray Constructors\n\n[...]\n\nEach TypedArray constructor has a name property whose value is the\nString value of the constructor name specified for it in Table 52.\n\n17 ECMAScript Standard Built-in Objects\n\nEvery built-in function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String. Unless otherwise specified, this value is the name that\nis given to the function in this specification. For functions that\nare specified as properties of objects, the name value is the\nproperty name string used to access the function. [...]\n\nUnless otherwise specified, the name property of a built-in function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["BigInt"]},{"path":"test/built-ins/TypedArrayConstructors/BigInt64Array/prop-desc.js","esid":" sec-typedarray-objects","description":" BigInt64Array property descriptor","info":" |17 ECMAScript Standard Built-in Objects\n","includes":["propertyHelper.js"],"features":["BigInt"]},{"path":"test/built-ins/TypedArrayConstructors/BigInt64Array/proto.js","esid":" sec-properties-of-the-typedarray-constructors","description":" BigInt64Array prototype internal slot","info":" |22.2.5 Properties of the TypedArray Constructors\n\nThe value of the [[Prototype]] internal slot of each TypedArray\nconstructor is the %TypedArray% intrinsic object.\n","includes":["testTypedArray.js"],"features":["BigInt","TypedArray"]},{"path":"test/built-ins/TypedArrayConstructors/BigInt64Array/prototype/BYTES_PER_ELEMENT.js","esid":" sec-typedarray.prototype.bytes_per_element","description":" BigInt64Array.prototype.BYTES_PER_ELEMENT property descriptor","info":" |22.2.5.1 TypedArray.prototype.BYTES_PER_ELEMENT\n\nThe value of TypedArray.prototype.BYTES_PER_ELEMENT is the Number\nvalue of the Element Size value specified in Table 52 for TypedArray.\n\nThis property has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: false }.\n","includes":["propertyHelper.js"],"features":["BigInt"]},{"path":"test/built-ins/TypedArrayConstructors/BigInt64Array/prototype/constructor.js","esid":" sec-typedarray.prototype.constructor","description":" BigInt64Array.prototype.constructor property descriptor","info":" |22.2.6.2 TypedArray.prototype.constructor\n\nThe initial value of a TypedArray.prototype.constructor is the\ncorresponding %TypedArray% intrinsic object.\n\n17 ECMAScript Standard Built-in Objects\n","includes":["propertyHelper.js"],"features":["BigInt"]},{"path":"test/built-ins/TypedArrayConstructors/BigInt64Array/prototype/not-typedarray-object.js","esid":" sec-properties-of-typedarray-prototype-objects","description":" BigInt64Array.prototype is not a TypedArray instance","info":" |22.2.6 Properties of TypedArray Prototype Objects\n\n[...] A TypedArray prototype object is an ordinary object. It does not\nhave a [[ViewedArrayBuffer]] or any other of the internal slots that\nare specific to TypedArray instance objects.\n","features":["BigInt"]},{"path":"test/built-ins/TypedArrayConstructors/BigInt64Array/prototype/proto.js","esid":" sec-properties-of-typedarray-prototype-objects","description":" BigInt64Array.prototype prototype internal slot","info":" |22.2.6 Properties of TypedArray Prototype Objects\n\nThe value of the [[Prototype]] internal slot of a TypedArray prototype\nobject is the intrinsic object %TypedArrayPrototype%. [...]\n","includes":["testTypedArray.js"],"features":["BigInt","TypedArray"]},{"path":"test/built-ins/TypedArrayConstructors/BigInt64Array/prototype.js","esid":" sec-typedarray.prototype","description":" BigInt64Array.prototype property descriptor","info":" |22.2.5.2 TypedArray.prototype\n\nThe initial value of TypedArray.prototype is the corresponding\nTypedArray prototype intrinsic object (22.2.6).\n\nThis property has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: false }.\n","includes":["propertyHelper.js"],"features":["BigInt"]},{"path":"test/built-ins/TypedArrayConstructors/BigUint64Array/BYTES_PER_ELEMENT.js","esid":" sec-typedarray.bytes_per_element","description":" BigUint64Array.BYTES_PER_ELEMENT property descriptor","info":" |22.2.5.1 TypedArray.BYTES_PER_ELEMENT\n\nThe value of TypedArray.BYTES_PER_ELEMENT is the Number value of the\nElement Size value specified in Table 52 for TypedArray.\n\nThis property has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: false }.\n","includes":["propertyHelper.js"],"features":["BigInt"]},{"path":"test/built-ins/TypedArrayConstructors/BigUint64Array/constructor.js","esid":" sec-typedarray-constructors","description":" BigUint64Array is a constructor function","info":" |22.2.4 The TypedArray Constructors\n\n[...]\n\nThe TypedArray intrinsic constructor functions are single functions\nwhose behaviour is overloaded based upon the number and types of its\narguments. The actual behaviour of a call of TypedArray depends upon\nthe number and kind of arguments that are passed to it.\n","features":["BigInt"]},{"path":"test/built-ins/TypedArrayConstructors/BigUint64Array/is-a-constructor.js","esid":" sec-ecmascript-standard-built-in-objects","description":" >The BigUint64Array constructor implements [[Construct]]\n","info":" |IsConstructor ( argument )\n\nThe abstract operation IsConstructor takes argument argument (an ECMAScript language value).\nIt determines if argument is a function object with a [[Construct]] internal method.\nIt performs the following steps when called:\n\nIf Type(argument) is not Object, return false.\nIf argument has a [[Construct]] internal method, return true.\nReturn false.\n","includes":["isConstructor.js"],"features":["Reflect.construct","TypedArray"]},{"path":"test/built-ins/TypedArrayConstructors/BigUint64Array/length.js","esid":" sec-typedarray-constructors","description":" BigUint64Array.length property descriptor","info":" |The TypedArray Constructors\n\nThe length property of the TypedArray constructor function is 3.\n\n17 ECMAScript Standard Built-in Objects\n\n...\n\nUnless otherwise specified, the length property of a built-in function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["BigInt","TypedArray"]},{"path":"test/built-ins/TypedArrayConstructors/BigUint64Array/name.js","esid":" sec-properties-of-the-typedarray-constructors","description":" BigUint64Array.name property descriptor","info":" |22.2.5 Properties of the TypedArray Constructors\n\n[...]\n\nEach TypedArray constructor has a name property whose value is the\nString value of the constructor name specified for it in Table 52.\n\n17 ECMAScript Standard Built-in Objects\n\nEvery built-in function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String. Unless otherwise specified, this value is the name that\nis given to the function in this specification. For functions that\nare specified as properties of objects, the name value is the\nproperty name string used to access the function. [...]\n\nUnless otherwise specified, the name property of a built-in function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["BigInt"]},{"path":"test/built-ins/TypedArrayConstructors/BigUint64Array/prop-desc.js","esid":" sec-typedarray-objects","description":" BigUint64Array property descriptor","info":" |17 ECMAScript Standard Built-in Objects\n","includes":["propertyHelper.js"],"features":["BigInt"]},{"path":"test/built-ins/TypedArrayConstructors/BigUint64Array/proto.js","esid":" sec-properties-of-the-typedarray-constructors","description":" BigUint64Array prototype internal slot","info":" |22.2.5 Properties of the TypedArray Constructors\n\nThe value of the [[Prototype]] internal slot of each TypedArray\nconstructor is the %TypedArray% intrinsic object.\n","includes":["testTypedArray.js"],"features":["BigInt","TypedArray"]},{"path":"test/built-ins/TypedArrayConstructors/BigUint64Array/prototype/BYTES_PER_ELEMENT.js","esid":" sec-typedarray.prototype.bytes_per_element","description":" BigUint64Array.prototype.BYTES_PER_ELEMENT property descriptor","info":" |22.2.5.1 TypedArray.prototype.BYTES_PER_ELEMENT\n\nThe value of TypedArray.prototype.BYTES_PER_ELEMENT is the Number\nvalue of the Element Size value specified in Table 52 for TypedArray.\n\nThis property has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: false }.\n","includes":["propertyHelper.js"],"features":["BigInt"]},{"path":"test/built-ins/TypedArrayConstructors/BigUint64Array/prototype/constructor.js","esid":" sec-typedarray.prototype.constructor","description":" BigUint64Array.prototype.constructor property descriptor","info":" |22.2.6.2 TypedArray.prototype.constructor\n\nThe initial value of a TypedArray.prototype.constructor is the\ncorresponding %TypedArray% intrinsic object.\n\n17 ECMAScript Standard Built-in Objects\n","includes":["propertyHelper.js"],"features":["BigInt"]},{"path":"test/built-ins/TypedArrayConstructors/BigUint64Array/prototype/not-typedarray-object.js","esid":" sec-properties-of-typedarray-prototype-objects","description":" BigUint64Array.prototype is not a TypedArray instance","info":" |22.2.6 Properties of TypedArray Prototype Objects\n\n[...] A TypedArray prototype object is an ordinary object. It does not\nhave a [[ViewedArrayBuffer]] or any other of the internal slots that\nare specific to TypedArray instance objects.\n","features":["BigInt"]},{"path":"test/built-ins/TypedArrayConstructors/BigUint64Array/prototype/proto.js","esid":" sec-properties-of-typedarray-prototype-objects","description":" BigUint64Array.prototype prototype internal slot","info":" |22.2.6 Properties of TypedArray Prototype Objects\n\nThe value of the [[Prototype]] internal slot of a TypedArray prototype\nobject is the intrinsic object %TypedArrayPrototype%. [...]\n","includes":["testTypedArray.js"],"features":["BigInt","TypedArray"]},{"path":"test/built-ins/TypedArrayConstructors/BigUint64Array/prototype.js","esid":" sec-typedarray.prototype","description":" BigUint64Array.prototype property descriptor","info":" |22.2.5.2 TypedArray.prototype\n\nThe initial value of TypedArray.prototype is the corresponding\nTypedArray prototype intrinsic object (22.2.6).\n\nThis property has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: false }.\n","includes":["propertyHelper.js"],"features":["BigInt"]},{"path":"test/built-ins/TypedArrayConstructors/ctors-bigint/typedarray-arg/custom-proto-access-throws.js","esid":" sec-typedarray-typedarray","description":" >Return abrupt completion getting newTarget's prototype\n","info":" |22.2.4.3 TypedArray ( typedArray )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has a [[TypedArrayName]] internal slot.\n\n...\n4. Let O be ? AllocateTypedArray(constructorName, NewTarget,\n%TypedArrayPrototype%).\n...\n\n22.2.4.2.1 Runtime Semantics: AllocateTypedArray (constructorName, newTarget,\ndefaultProto [ , length ])\n\n1. Let proto be ? GetPrototypeFromConstructor(newTarget, defaultProto).\n...\n\n9.1.15 GetPrototypeFromConstructor ( constructor, intrinsicDefaultProto )\n\n...\n3. Let proto be ? Get(constructor, \"prototype\").\n...\n","includes":["testBigIntTypedArray.js"],"features":["BigInt","Reflect","TypedArray"]},{"path":"test/built-ins/TypedArrayConstructors/ctors-bigint/typedarray-arg/new-instance-extensibility.js","esid":" sec-typedarray-typedarray","description":" >The new typedArray instance from a typedArray argument is extensible\n","info":" |22.2.4.3 TypedArray ( typedArray )\n\n...\n4. Let O be ? AllocateTypedArray(constructorName, NewTarget,\n\"%TypedArrayPrototype%\").\n...\n\n22.2.4.2.1 Runtime Semantics: AllocateTypedArray (constructorName, newTarget,\ndefaultProto [ , length ])\n\n...\n2. Let obj be IntegerIndexedObjectCreate(proto, « [[ViewedArrayBuffer]],\n[[TypedArrayName]], [[ByteLength]], [[ByteOffset]], [[ArrayLength]] »).\n...\n\n9.4.5.7 IntegerIndexedObjectCreate (prototype, internalSlotsList)\n\n...\n11. Set the [[Extensible]] internal slot of A to true.\n...\n","includes":["testBigIntTypedArray.js"],"features":["BigInt","TypedArray"]},{"path":"test/built-ins/TypedArrayConstructors/ctors-bigint/typedarray-arg/other-ctor-buffer-ctor-access-throws.js","esid":" sec-typedarray-typedarray","description":" >Return abrupt completion from getting typedArray argument's buffer.constructor\n","info":" |22.2.4.3 TypedArray ( typedArray )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has a [[TypedArrayName]] internal slot.\n\n...\n18. Else,\na. Let bufferConstructor be ? SpeciesConstructor(srcData, %ArrayBuffer%).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n...\n2. Let C be ? Get(O, \"constructor\").\n...\n","includes":["testBigIntTypedArray.js"],"features":["BigInt","TypedArray"]},{"path":"test/built-ins/TypedArrayConstructors/ctors-bigint/typedarray-arg/other-ctor-buffer-ctor-custom-species-proto-from-ctor-realm.js","esid":" sec-typedarray-typedarray","description":" >Derive the ArrayBuffer prototype from the realm of the species constructor\n","info":" |22.2.4.3 TypedArray ( typedArray )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has a [[TypedArrayName]] internal slot.\n\n...\n18. Else,\na. Let bufferConstructor be ? SpeciesConstructor(srcData, %ArrayBuffer%).\nb. Let data be ? AllocateArrayBuffer(bufferConstructor, byteLength).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n...\n5. Let S be ? Get(C, @@species).\n6. If S is either undefined or null, return defaultConstructor.\n7. If IsConstructor(S) is true, return S.\n...\n\n9.1.14 GetPrototypeFromConstructor\n\n...\n3. Let proto be ? Get(constructor, \"prototype\").\n4. If Type(proto) is not Object, then\na. Let realm be ? GetFunctionRealm(constructor).\nb. Let proto be realm's intrinsic object named intrinsicDefaultProto.\n...\n","includes":["testBigIntTypedArray.js"],"features":["BigInt","cross-realm","Symbol.species","TypedArray"]},{"path":"test/built-ins/TypedArrayConstructors/ctors-bigint/typedarray-arg/other-ctor-buffer-ctor-custom-species.js","esid":" sec-typedarray-typedarray","description":" >Use default ArrayBuffer constructor on undefined buffer.constructor.@@species\n","info":" |22.2.4.3 TypedArray ( typedArray )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has a [[TypedArrayName]] internal slot.\n\n...\n18. Else,\na. Let bufferConstructor be ? SpeciesConstructor(srcData, %ArrayBuffer%).\nb. Let data be ? AllocateArrayBuffer(bufferConstructor, byteLength).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n...\n5. Let S be ? Get(C, @@species).\n6. If S is either undefined or null, return defaultConstructor.\n7. If IsConstructor(S) is true, return S.\n...\n\n","includes":["testBigIntTypedArray.js"],"features":["BigInt","Symbol.species","TypedArray"]},{"path":"test/built-ins/TypedArrayConstructors/ctors-bigint/typedarray-arg/other-ctor-buffer-ctor-not-object-throws.js","esid":" sec-typedarray-typedarray","description":" >Return abrupt completion from typedArray argument's buffer.constructor's value\n","info":" |22.2.4.3 TypedArray ( typedArray )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has a [[TypedArrayName]] internal slot.\n\n...\n18. Else,\na. Let bufferConstructor be ? SpeciesConstructor(srcData, %ArrayBuffer%).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n...\n2. Let C be ? Get(O, \"constructor\").\n...\n4. If Type(C) is not Object, throw a TypeError exception.\n...\n","includes":["testBigIntTypedArray.js"],"features":["BigInt","Symbol","TypedArray"]},{"path":"test/built-ins/TypedArrayConstructors/ctors-bigint/typedarray-arg/other-ctor-buffer-ctor-species-access-throws.js","esid":" sec-typedarray-typedarray","description":" >Return abrupt from getting typedArray argument's buffer.constructor.@@species\n","info":" |22.2.4.3 TypedArray ( typedArray )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has a [[TypedArrayName]] internal slot.\n\n...\n18. Else,\na. Let bufferConstructor be ? SpeciesConstructor(srcData, %ArrayBuffer%).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n...\n5. Let S be ? Get(C, @@species).\n...\n","includes":["testBigIntTypedArray.js"],"features":["BigInt","Symbol.species","TypedArray"]},{"path":"test/built-ins/TypedArrayConstructors/ctors-bigint/typedarray-arg/other-ctor-buffer-ctor-species-not-ctor-throws.js","esid":" sec-typedarray-typedarray","description":" >Return abrupt from buffer.constructor.@@species.prototype\n","info":" |22.2.4.3 TypedArray ( typedArray )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has a [[TypedArrayName]] internal slot.\n\n...\n18. Else,\na. Let bufferConstructor be ? SpeciesConstructor(srcData, %ArrayBuffer%).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n...\n5. Let S be ? Get(C, @@species).\n6. If S is either undefined or null, return defaultConstructor.\n7. If IsConstructor(S) is true, return S.\n8. Throw a TypeError exception.\n","includes":["testBigIntTypedArray.js"],"features":["BigInt","Symbol.species","TypedArray"]},{"path":"test/built-ins/TypedArrayConstructors/ctors-bigint/typedarray-arg/other-ctor-buffer-ctor-species-null.js","esid":" sec-typedarray-typedarray","description":" >Use default ArrayBuffer constructor on null buffer.constructor.@@species\n","info":" |22.2.4.3 TypedArray ( typedArray )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has a [[TypedArrayName]] internal slot.\n\n...\n18. Else,\na. Let bufferConstructor be ? SpeciesConstructor(srcData, %ArrayBuffer%).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n...\n5. Let S be ? Get(C, @@species).\n6. If S is either undefined or null, return defaultConstructor.\n...\n","includes":["testBigIntTypedArray.js"],"features":["BigInt","Symbol.species","TypedArray"]},{"path":"test/built-ins/TypedArrayConstructors/ctors-bigint/typedarray-arg/other-ctor-buffer-ctor-species-prototype-throws.js","esid":" sec-typedarray-typedarray","description":" >Return abrupt from buffer.constructor.@@species.prototype\n","info":" |22.2.4.3 TypedArray ( typedArray )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has a [[TypedArrayName]] internal slot.\n\n...\n18. Else,\na. Let bufferConstructor be ? SpeciesConstructor(srcData, %ArrayBuffer%).\nb. Let data be ? AllocateArrayBuffer(bufferConstructor, byteLength).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n...\n5. Let S be ? Get(C, @@species).\n6. If S is either undefined or null, return defaultConstructor.\n7. If IsConstructor(S) is true, return S.\n...\n\n24.1.1.1 AllocateArrayBuffer ( constructor, byteLength )\n\n...\n1. Let obj be ? OrdinaryCreateFromConstructor(constructor,\n\"%ArrayBufferPrototype%\", « [[ArrayBufferData]], [[ArrayBufferByteLength]] » )\n...\n","includes":["testBigIntTypedArray.js"],"features":["BigInt","Symbol.species","TypedArray"]},{"path":"test/built-ins/TypedArrayConstructors/ctors-bigint/typedarray-arg/other-ctor-buffer-ctor-species-undefined.js","esid":" sec-typedarray-typedarray","description":" >Use default ArrayBuffer constructor on undefined buffer.constructor.@@species\n","info":" |22.2.4.3 TypedArray ( typedArray )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has a [[TypedArrayName]] internal slot.\n\n...\n18. Else,\na. Let bufferConstructor be ? SpeciesConstructor(srcData, %ArrayBuffer%).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n...\n5. Let S be ? Get(C, @@species).\n6. If S is either undefined or null, return defaultConstructor.\n...\n","includes":["testBigIntTypedArray.js"],"features":["BigInt","Symbol.species","TypedArray"]},{"path":"test/built-ins/TypedArrayConstructors/ctors-bigint/typedarray-arg/other-ctor-returns-new-typedarray.js","esid":" sec-typedarray-typedarray","description":" Instantiate a new TypedArray with an existing TypedArray","info":" |22.2.4.3 TypedArray ( typedArray )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has a [[TypedArrayName]] internal slot.\n\n","includes":["testBigIntTypedArray.js"],"features":["BigInt","TypedArray"]},{"path":"test/language/expressions/class/subclass-builtins/subclass-BigInt64Array.js","description":" new SubBigInt64Array() instanceof BigInt64Array (Subclass instanceof Heritage)","features":["TypedArray","BigInt"],"flags":["generated"]},{"path":"test/language/expressions/class/subclass-builtins/subclass-BigUint64Array.js","description":" new SubBigUint64Array() instanceof BigUint64Array (Subclass instanceof Heritage)","features":["TypedArray","BigInt"],"flags":["generated"]},{"path":"test/language/statements/class/subclass-builtins/subclass-BigInt64Array.js","description":" new SubBigInt64Array() instanceof BigInt64Array (Subclass instanceof Heritage)","features":["TypedArray","BigInt"],"flags":["generated"]},{"path":"test/language/statements/class/subclass-builtins/subclass-BigUint64Array.js","description":" new SubBigUint64Array() instanceof BigUint64Array (Subclass instanceof Heritage)","features":["TypedArray","BigInt"],"flags":["generated"]}]