[{"path":"./test262/test/built-ins/AsyncGeneratorFunction/is-a-constructor.js","esid":" sec-ecmascript-standard-built-in-objects\r","description":" >\rThe AsyncGeneratorFunction constructor implements [[Construct]]\r\n","info":" |\rIsConstructor ( argument )\r\n\r\nThe abstract operation IsConstructor takes argument argument (an ECMAScript language value).\r\nIt determines if argument is a function object with a [[Construct]] internal method.\r\nIt performs the following steps when called:\r\n\r\nIf Type(argument) is not Object, return false.\r\nIf argument has a [[Construct]] internal method, return true.\r\nReturn false.\r\n","includes":["isConstructor.js","hidden-constructors.js\r"],"features":["Reflect.construct\r"]},{"path":"./test262/test/built-ins/Promise/prototype/finally/invokes-then-with-function.js","author":" Jordan Harband\r","description":" Promise.prototype.finally invokes `then` method\r","esid":" sec-promise.prototype.finally\r","features":["Promise.prototype.finally","Reflect.construct","arrow-function\r"],"includes":["isConstructor.js\r"]},{"path":"./test262/test/built-ins/Promise/prototype/finally/invokes-then-with-non-function.js","author":" Jordan Harband\r","description":" Promise.prototype.finally invokes `then` method\r","esid":" sec-promise.prototype.finally\r","features":["Promise.prototype.finally\r"]},{"path":"./test262/test/built-ins/Promise/prototype/finally/is-a-function.js","author":" Jordan Harband\r","description":" Promise.prototype.finally is a function\r","esid":" sec-promise.prototype.finally\r","features":["Promise.prototype.finally\r"]},{"path":"./test262/test/built-ins/Promise/prototype/finally/is-a-method.js","author":" Jordan Harband\r","description":" finally is a method on a Promise\r","esid":" sec-promise.prototype.finally\r","features":["Promise.prototype.finally\r"]},{"path":"./test262/test/built-ins/Promise/prototype/finally/length.js","author":" Jordan Harband\r","description":" Promise.prototype.finally `length` property\r","esid":" sec-promise.prototype.finally\r","info":" |\rES6 Section 17:\r\nEvery built-in Function object, including constructors, has a length\r\nproperty whose value is an integer. Unless otherwise specified, this value\r\nis equal to the largest number of named arguments shown in the subclause\r\nheadings for the function description, including optional parameters.\r\n\r\n[...]\r\n\r\nUnless otherwise specified, the length property of a built-in Function\r\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\r\n[[Configurable]]: true }.\r\n","includes":["propertyHelper.js\r"],"features":["Promise.prototype.finally\r"]},{"path":"./test262/test/built-ins/Promise/prototype/finally/name.js","author":" Jordan Harband\r","description":" Promise.prototype.finally `name` property\r","esid":" sec-promise.prototype.finally\r","info":" |\rES Section 17:\r\n\r\nEvery built-in Function object, including constructors, that is not\r\nidentified as an anonymous function has a name property whose value is a\r\nString. Unless otherwise specified, this value is the name that is given to\r\nthe function in this specification.\r\n\r\n[...]\r\n\r\nUnless otherwise specified, the name property of a built-in Function\r\nobject, if it exists, has the attributes { [[Writable]]: false,\r\n[[Enumerable]]: false, [[Configurable]]: true }.\r\n","includes":["propertyHelper.js\r"],"features":["Promise.prototype.finally\r"]},{"path":"./test262/test/built-ins/Promise/prototype/finally/not-a-constructor.js","esid":" sec-ecmascript-standard-built-in-objects\r","description":" >\rPromise.prototype.finally does not implement [[Construct]], is not new-able\r\n","info":" |\rECMAScript Function Objects\r\n\r\nBuilt-in function objects that are not identified as constructors do not\r\nimplement the [[Construct]] internal method unless otherwise specified in\r\nthe description of a particular function.\r\n\r\nsec-evaluatenew\r\n\r\n...\r\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\r\n...\r\n","includes":["isConstructor.js\r"],"features":["Reflect.construct","Promise.prototype.finally","arrow-function\r"]},{"path":"./test262/test/built-ins/Promise/prototype/finally/prop-desc.js","author":" Jordan Harband\r","description":" Promise.prototype.finally property descriptor\r","esid":" sec-promise.prototype.finally\r","info":" |\rEvery other data property described in clauses 18 through 26 and in Annex\r\nB.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false,\r\n[[Configurable]]: true } unless otherwise specified.\r\n","includes":["propertyHelper.js\r"],"features":["Promise.prototype.finally\r"]},{"path":"./test262/test/built-ins/Promise/prototype/finally/rejected-observable-then-calls-argument.js","esid":" sec-catchfinallyfunctions\r","description":" >\rthrower is anonymous built-in function with length of 1 that throws reason.\r\n","info":" |\rCatch Finally Functions\r\n\r\n...\r\n8. Let thrower be equivalent to a function that throws reason.\r\n9. Return ? Invoke(promise, \"then\", « thrower »).\r\n\r\nThe \"length\" property of a Catch Finally function is 1.\r\n","features":["Promise.prototype.finally","Reflect.construct","class","arrow-function\r"],"includes":["isConstructor.js\r"],"flags":["async\r"]},{"path":"./test262/test/built-ins/Promise/prototype/finally/rejected-observable-then-calls-PromiseResolve.js","esid":" sec-catchfinallyfunctions\r","description":" >\rPromiseResolve() avoids extra Promise capability creation.\r\n","info":" |\rCatch Finally Functions\r\n\r\n[...]\r\n7. Let promise be ? PromiseResolve(C, result).\r\n8. Let thrower be equivalent to a function that throws reason.\r\n9. Return ? Invoke(promise, \"then\", « thrower »).\r\n\r\nPromiseResolve ( C, x )\r\n\r\n1. Assert: Type(C) is Object.\r\n2. If IsPromise(x) is true, then\r\na. Let xConstructor be ? Get(x, \"constructor\").\r\nb. If SameValue(xConstructor, C) is true, return x.\r\n","features":["Promise.prototype.finally\r"],"flags":["async\r"]},{"path":"./test262/test/built-ins/Promise/prototype/finally/rejected-observable-then-calls.js","author":" Jordan Harband\r","description":" finally observably calls .then\r","esid":" sec-promise.prototype.finally\r","features":["Promise.prototype.finally\r"],"flags":["async\r"],"includes":["promiseHelper.js\r"]},{"path":"./test262/test/built-ins/Promise/prototype/finally/rejection-reason-no-fulfill.js","author":" Jordan Harband\r","description":" finally on a rejected promise can not convert to a fulfillment\r","esid":" sec-promise.prototype.finally\r","features":["Promise.prototype.finally\r"],"flags":["async\r"],"includes":["promiseHelper.js\r"]},{"path":"./test262/test/built-ins/Promise/prototype/finally/rejection-reason-override-with-throw.js","author":" Jordan Harband\r","description":" finally on a rejected promise can override the rejection reason\r","esid":" sec-promise.prototype.finally\r","features":["Promise.prototype.finally\r"],"flags":["async\r"],"includes":["promiseHelper.js\r"]},{"path":"./test262/test/built-ins/Promise/prototype/finally/resolution-value-no-override.js","author":" Jordan Harband\r","description":" finally on a fulfilled promise can not override the resolution value\r","esid":" sec-promise.prototype.finally\r","features":["Promise.prototype.finally\r"],"flags":["async\r"],"includes":["promiseHelper.js\r"]},{"path":"./test262/test/built-ins/Promise/prototype/finally/resolved-observable-then-calls-argument.js","esid":" sec-thenfinallyfunctions\r","description":" >\rvalueThunk is anonymous built-in function with length of 1 that returns value.\r\n","info":" |\rThen Finally Functions\r\n\r\n...\r\n8. Let valueThunk be equivalent to a function that returns value.\r\n9. Return ? Invoke(promise, \"then\", « valueThunk »).\r\n\r\nThe \"length\" property of a Then Finally function is 1.\r\n","features":["Promise.prototype.finally","Reflect.construct","arrow-function\r"],"includes":["isConstructor.js\r"],"flags":["async\r"]},{"path":"./test262/test/built-ins/Promise/prototype/finally/resolved-observable-then-calls-PromiseResolve.js","esid":" sec-thenfinallyfunctions\r","description":" >\rPromiseResolve() avoids extra Promise capability creation.\r\n","info":" |\rThen Finally Functions\r\n\r\n[...]\r\n7. Let promise be ? PromiseResolve(C, result).\r\n8. Let valueThunk be equivalent to a function that returns value.\r\n9. Return ? Invoke(promise, \"then\", « valueThunk »).\r\n\r\nPromiseResolve ( C, x )\r\n\r\n1. Assert: Type(C) is Object.\r\n2. If IsPromise(x) is true, then\r\na. Let xConstructor be ? Get(x, \"constructor\").\r\nb. If SameValue(xConstructor, C) is true, return x.\r\n","features":["Promise.prototype.finally\r"],"flags":["async\r"]},{"path":"./test262/test/built-ins/Promise/prototype/finally/resolved-observable-then-calls.js","author":" Jordan Harband\r","description":" finally observably calls .then\r","esid":" sec-promise.prototype.finally\r","features":["Promise.prototype.finally\r"],"flags":["async\r"],"includes":["promiseHelper.js\r"]},{"path":"./test262/test/built-ins/Promise/prototype/finally/subclass-species-constructor-reject-count.js","author":" Jordan Harband\r","description":" finally on rejected Promise calls the SpeciesConstructor\r","esid":" sec-promise.prototype.finally\r","features":["Promise.prototype.finally\r"]},{"path":"./test262/test/built-ins/Promise/prototype/finally/subclass-species-constructor-resolve-count.js","author":" Jordan Harband\r","description":" finally on resolved Promise calls the SpeciesConstructor\r","esid":" sec-promise.prototype.finally\r","features":["Promise.prototype.finally\r"]},{"path":"./test262/test/built-ins/Promise/prototype/finally/this-value-non-object.js","author":" Jordan Harband\r","description":" >\rPromise.prototype.finally called with a non-object-coercible `this` value\r\n","esid":" sec-promise.prototype.finally\r","features":["Promise.prototype.finally\r"]},{"path":"./test262/test/built-ins/Promise/prototype/finally/this-value-proxy.js","author":" Jordan Harband\r","description":" >\rPromise.prototype.finally called with a non-branded Promise does not throw\r\n","esid":" sec-promise.prototype.finally\r","features":["Promise.prototype.finally\r"]},{"path":"./test262/test/built-ins/Promise/prototype/finally/this-value-then-not-callable.js","author":" Jordan Harband\r","description":" >\rPromise.prototype.finally called with a `this` value that does not define a\r\ncallable `then` property\r\n","esid":" sec-promise.prototype.finally\r","features":["Symbol","Promise.prototype.finally\r"]},{"path":"./test262/test/built-ins/Promise/prototype/finally/this-value-then-poisoned.js","author":" Jordan Harband\r","description":" >\rPromise.prototype.finally called with a `this` value whose `then` property is\r\nan accessor property that returns an abrupt completion\r\n","esid":" sec-promise.prototype.finally\r","features":["Promise.prototype.finally\r"]},{"path":"./test262/test/built-ins/Promise/prototype/finally/this-value-then-throws.js","author":" Jordan Harband\r","description":" >\rPromise.prototype.finally called with a `this` value that defines a `then`\r\nmethod which returns an abrupt completion.\r\n","esid":" sec-promise.prototype.finally\r","features":["Promise.prototype.finally\r"]},{"path":"./test262/test/built-ins/Promise/prototype/finally/this-value-thenable.js","esid":" sec-promise.prototype.finally\r","description":" >\rPromise.prototype.finally invoked on thenable returns result of \"then\" call.\r\n","features":["Promise.prototype.finally\r"]},{"path":"./test262/test/built-ins/Promise/race/resolved-then-catch-finally.js","esid":" sec-promise.race\r","description":" >\rResolution the first resolved promise\r\n","info":" |\rPerformPromiseRace\r\n\r\nRepeat,\r\nLet next be IteratorStep(iteratorRecord).\r\nIf next is an abrupt completion, set iteratorRecord.[[Done]] to true.\r\nReturnIfAbrupt(next).\r\nIf next is false, then\r\nSet iteratorRecord.[[Done]] to true.\r\nReturn resultCapability.[[Promise]].\r\nLet nextValue be IteratorValue(next).\r\nIf nextValue is an abrupt completion, set iteratorRecord.[[Done]] to true.\r\nReturnIfAbrupt(nextValue).\r\nLet nextPromise be ? Call(promiseResolve, constructor, « nextValue »).\r\nPerform ? Invoke(nextPromise, \"then\", « resultCapability.[[Resolve]], resultCapability.[[Reject]] »).\r\n\r\n","flags":["async\r"]},{"path":"./test262/test/built-ins/RegExp/named-groups/functional-replace-global.js","description":" >\rFunction argument to String.prototype.replace gets groups as the last argument\r\n","esid":" sec-regexp.prototype-@@replace\r","features":["regexp-named-groups\r"],"info":" |\rRegExp.prototype [ @@replace ] ( string, replaceValue )\r\n14. Repeat, for each result in results,\r\nj. Let namedCaptures be ? Get(result, \"groups\").\r\nk. If functionalReplace is true, then\r\niv. If namedCaptures is not undefined,\r\n1. Append namedCaptures as the last element of replacerArgs.\r\n"},{"path":"./test262/test/built-ins/RegExp/named-groups/functional-replace-non-global.js","description":" >\rFunction argument to String.prototype.replace gets groups as the last argument\r\n","esid":" sec-regexp.prototype-@@replace\r","features":["regexp-named-groups\r"],"info":" |\rRegExp.prototype [ @@replace ] ( string, replaceValue )\r\n14. Repeat, for each result in results,\r\nj. Let namedCaptures be ? Get(result, \"groups\").\r\nk. If functionalReplace is true, then\r\niv. If namedCaptures is not undefined,\r\n1. Append namedCaptures as the last element of replacerArgs.\r\n"},{"path":"./test262/test/built-ins/RegExp/named-groups/groups-object-subclass-sans.js","description":" >\rTest the groups object on RegExp subclass results that do not have their own.\r\n","esid":" sec-regexpbuiltinexec\r","features":["regexp-named-groups\r"],"info":" |\rRuntime Semantics: RegExpBuiltinExec ( R, S )\r\n24. If _R_ contains any |GroupName|, then\r\na. Let _groups_ be ObjectCreate(*null*).\r\n25. Else,\r\na. Let _groups_ be *undefined*.\r\n26. Perform ! CreateDataProperty(_A_, `\"groups\"`, _groups_).\r\n"},{"path":"./test262/test/built-ins/RegExp/named-groups/groups-object-subclass.js","description":" >\rTest the groups object on RegExp subclass results that have their own.\r\n","esid":" sec-regexpbuiltinexec\r","features":["regexp-named-groups\r"],"info":" |\rRuntime Semantics: RegExpBuiltinExec ( R, S )\r\n24. If _R_ contains any |GroupName|, then\r\na. Let _groups_ be ObjectCreate(*null*).\r\n25. Else,\r\na. Let _groups_ be *undefined*.\r\n26. Perform ! CreateDataProperty(_A_, `\"groups\"`, _groups_).\r\n"},{"path":"./test262/test/built-ins/RegExp/named-groups/groups-object-undefined.js","description":" The groups object is created unconditionally.\r","includes":["propertyHelper.js\r"],"esid":" sec-regexpbuiltinexec\r","features":["regexp-named-groups\r"],"info":" |\rRuntime Semantics: RegExpBuiltinExec ( R, S )\r\n24. If _R_ contains any |GroupName|, then\r\na. Let _groups_ be ObjectCreate(*null*).\r\n25. Else,\r\na. Let _groups_ be *undefined*.\r\n26. Perform ! CreateDataProperty(_A_, `\"groups\"`, _groups_).\r\n"},{"path":"./test262/test/built-ins/RegExp/named-groups/groups-object-unmatched.js","description":" >\rTest the groups object with matched and unmatched named captures.\r\n","esid":" sec-regexpbuiltinexec\r","features":["regexp-named-groups\r"],"info":" |\rRuntime Semantics: RegExpBuiltinExec ( R, S )\r\n24. If _R_ contains any |GroupName|, then\r\na. Let _groups_ be ObjectCreate(*null*).\r\n25. Else,\r\na. Let _groups_ be *undefined*.\r\n26. Perform ! CreateDataProperty(_A_, `\"groups\"`, _groups_).\r\n"},{"path":"./test262/test/built-ins/RegExp/named-groups/groups-object.js","description":" Properties of the groups object are created with CreateDataProperty\r","includes":["propertyHelper.js\r"],"esid":" sec-regexpbuiltinexec\r","features":["regexp-named-groups\r"],"info":" |\rRuntime Semantics: RegExpBuiltinExec ( R, S )\r\n24. If _R_ contains any |GroupName|, then\r\na. Let _groups_ be ObjectCreate(*null*).\r\n25. Else,\r\na. Let _groups_ be *undefined*.\r\n26. Perform ! CreateDataProperty(_A_, `\"groups\"`, _groups_).\r\n"},{"path":"./test262/test/built-ins/RegExp/named-groups/groups-properties.js","description":" Properties of the groups object are created with CreateDataProperty\r","includes":["compareArray.js","propertyHelper.js\r"],"esid":" sec-regexpbuiltinexec\r","features":["regexp-named-groups\r"],"info":" |\rRuntime Semantics: RegExpBuiltinExec ( R, S )\r\n25. For each integer i such that i > 0 and i ≤ n\r\nf. If the ith capture of R was defined with a GroupName,\r\ni. Let s be the StringValue of the corresponding RegExpIdentifierName.\r\nii. Perform ! CreateDataProperty(groups, s, capturedValue).\r\n"},{"path":"./test262/test/built-ins/RegExp/named-groups/lookbehind.js","description":" Named groups can be used in conjunction with lookbehind\r","esid":" prod-GroupSpecifier\r","features":["regexp-named-groups","regexp-lookbehind\r"],"includes":["compareArray.js\r"]},{"path":"./test262/test/built-ins/RegExp/named-groups/non-unicode-match.js","description":" Basic matching cases with non-Unicode groups\r","esid":" prod-GroupSpecifier\r","features":["regexp-named-groups\r"],"includes":["compareArray.js\r"]},{"path":"./test262/test/built-ins/RegExp/named-groups/non-unicode-property-names-invalid.js","author":" Michael Saboff\r","description":" Invalid exotic named group names in non-Unicode RegExps\r","esid":" prod-GroupSpecifier\r","features":["regexp-named-groups\r"]},{"path":"./test262/test/built-ins/RegExp/named-groups/non-unicode-property-names.js","description":" Exotic named group names in non-Unicode RegExps\r","esid":" prod-GroupSpecifier\r","features":["regexp-named-groups\r"]},{"path":"./test262/test/built-ins/RegExp/named-groups/non-unicode-references.js","description":" Named backreferences in non-Unicode RegExps\r","esid":" prod-GroupSpecifier\r","features":["regexp-named-groups\r"],"includes":["compareArray.js\r"]},{"path":"./test262/test/built-ins/RegExp/named-groups/string-replace-escaped.js","description":" Do not replace $<> preceded with $\r","esid":" sec-getsubstitution\r","features":["regexp-named-groups\r"],"info":" |\rRuntime Semantics: GetSubstitution( matched, str, position, captures, namedCaptures, replacement )\r\n\r\n12. These $ replacements are done left-to-right, and, once such a replacement is performed,\r\nthe new replacement text is not subject to further replacements.\r\n\r\nTable: Replacement Text Symbol Substitutions\r\n\r\nUnicode Characters: $$\r\nReplacement text: $\r\n"},{"path":"./test262/test/built-ins/RegExp/named-groups/string-replace-get.js","description":" Named substitutions are found by getting the property from the groups object\r","esid":" sec-getsubstitution\r","features":["regexp-named-groups\r"],"info":" |\rRuntime Semantics: GetSubstitution( matched, str, position, captures, namedCaptures, replacement )\r\n\r\nTable: Replacement Text Symbol Substitutions\r\n\r\nUnicode Characters: $<\r\nReplacement text:\r\n2. Otherwise,\r\nc. Let capture be ? Get(namedCaptures, groupName).\r\nd. If capture is undefined, replace the text through > with the empty string.\r\ne. Otherwise, replace the text through this following > with ? ToString(capture).\r\n"},{"path":"./test262/test/built-ins/RegExp/named-groups/string-replace-missing.js","description":" If the group doesn't exist, replace with the empty string\r","esid":" sec-getsubstitution\r","features":["regexp-named-groups\r"]},{"path":"./test262/test/built-ins/RegExp/named-groups/string-replace-nocaptures.js","description":" If there are no named captures, don't replace $<>\r","esid":" sec-getsubstitution\r","features":["regexp-named-groups\r"],"info":" |\rRuntime Semantics: GetSubstitution( matched, str, position, captures, namedCaptures, replacement )\r\n\r\nTable: Replacement Text Symbol Substitutions\r\n\r\nUnicode Characters: $<\r\nReplacement text:\r\n1. If namedCaptures is undefined, the replacement text is the literal string $<.\r\n"},{"path":"./test262/test/built-ins/RegExp/named-groups/string-replace-numbered.js","description":" Named groups may be accessed in their replacement string by number\r","esid":" sec-getsubstitution\r","features":["regexp-named-groups\r"],"info":" |\rRuntime Semantics: GetSubstitution( matched, str, position, captures, namedCaptures, replacement )\r\n\r\nTable: Replacement Text Symbol Substitutions\r\n\r\nUnicode Characters: $n\r\nReplacement text:\r\nThe nth element of captures, where n is a single digit in the range 1 to 9. If\r\nn≤m and the nth element of captures is undefined, use the empty String instead.\r\nIf n>m, the result is implementation-defined.\r\n"},{"path":"./test262/test/built-ins/RegExp/named-groups/string-replace-unclosed.js","description":" >\rA missing > following $< means that the $< is taken literally\r\nin a replacement string in the context of named capture substitution.\r\n","esid":" sec-getsubstitution\r","features":["regexp-named-groups\r"]},{"path":"./test262/test/built-ins/RegExp/named-groups/string-replace-undefined.js","description":" If a named group was not reached, it is replaced by the empty string\r","esid":" sec-getsubstitution\r","features":["regexp-named-groups\r"],"info":" |\rRuntime Semantics: GetSubstitution( matched, str, position, captures, namedCaptures, replacement )\r\n\r\nTable: Replacement Text Symbol Substitutions\r\n\r\nUnicode Characters: $<\r\nReplacement text:\r\n2. Otherwise,\r\nc. Let capture be ? Get(namedCaptures, groupName).\r\nd. If capture is undefined, replace the text through > with the empty string.\r\n"},{"path":"./test262/test/built-ins/RegExp/named-groups/unicode-match.js","description":" Basic matching cases with Unicode groups\r","esid":" prod-GroupSpecifier\r","features":["regexp-named-groups\r"],"includes":["compareArray.js\r"]},{"path":"./test262/test/built-ins/RegExp/named-groups/unicode-property-names-invalid.js","author":" Michael Saboff\r","description":" Invalid exotic named group names in Unicode RegExps\r","esid":" prod-GroupSpecifier\r","features":["regexp-named-groups\r"]},{"path":"./test262/test/built-ins/RegExp/named-groups/unicode-references.js","description":" Named backreferences in Unicode RegExps\r","esid":" sec-atomescape\r","info":" |\rThe production AtomEscape :: [+N] k GroupName evaluates as follows:\r\n\r\n1. Search the enclosing RegExp for an instance of a GroupSpecifier for an\r\nRegExpIdentifierName which has a StringValue equal to the StringValue\r\nof the RegExpIdentifierName contained in GroupName.\r\n2. Assert: A unique such GroupSpecifier is found.\r\n3. Let parenIndex be the number of left capturing parentheses in the entire\r\nregular expression that occur to the left of the located GroupSpecifier.\r\nThis is the total number of times the Atom::(GroupSpecifierDisjunction)\r\nproduction is expanded prior to that production's Term plus the total\r\nnumber of Atom :: (GroupSpecifierDisjunction) productions enclosing this Term.\r\n4. Call BackreferenceMatcher(parenIndex) and return its Matcher result.\r\n","features":["regexp-named-groups\r"],"includes":["compareArray.js\r"]},{"path":"./test262/test/built-ins/RegExp/prototype/Symbol.replace/named-groups-fn.js","esid":" sec-regexp.prototype-@@replace\r","description":" >\r\"groups\" value is passed as last argument of replacer unless it is undefined.\r\n","info":" |\rRegExp.prototype [ @@replace ] ( string, replaceValue )\r\n\r\n[...]\r\n14. For each result in results, do\r\n[...]\r\nj. Let namedCaptures be ? Get(result, \"groups\").\r\nk. If functionalReplace is true, then\r\n[...]\r\niv. If namedCaptures is not undefined, then\r\n1. Append namedCaptures as the last element of replacerArgs.\r\nv. Let replValue be ? Call(replaceValue, undefined, replacerArgs).\r\n","features":["Symbol.replace","regexp-named-groups\r"]},{"path":"./test262/test/language/literals/regexp/named-groups/forward-reference.js","description":" Named groups can be forward references.\r","esid":" sec-atomescape\r","features":["regexp-named-groups\r"]},{"path":"./test262/test/language/literals/regexp/named-groups/invalid-dangling-groupname-without-group-u.js","description":" Group reference must have corresponding group.\r","info":" |\rIt is a Syntax Error if the enclosing Pattern does not contain a\r\nGroupSpecifier with an enclosed RegExpIdentifierName whose StringValue\r\nequals the StringValue of the RegExpIdentifierName of this production's\r\nGroupName.\r\n","esid":" sec-patterns-static-semantics-early-errors\r","negative":{"phase":"parse\r","type":"SyntaxError\r"},"features":["regexp-named-groups\r"]},{"path":"./test262/test/language/literals/regexp/named-groups/invalid-identity-escape-in-capture-u.js","description":" GroupName is `< RegExpIdentifierName >`.\r","esid":" prod-GroupName\r","negative":{"phase":"parse\r","type":"SyntaxError\r"},"features":["regexp-named-groups\r"]},{"path":"./test262/test/language/literals/regexp/named-groups/invalid-incomplete-groupname-without-group-2-u.js","description":" GroupName is `< RegExpIdentifierName >`.\r","esid":" prod-GroupName\r","negative":{"phase":"parse\r","type":"SyntaxError\r"},"features":["regexp-named-groups\r"]},{"path":"./test262/test/language/literals/regexp/named-groups/invalid-incomplete-groupname-without-group-3-u.js","description":" GroupName is `< RegExpIdentifierName >`.\r","esid":" prod-GroupName\r","negative":{"phase":"parse\r","type":"SyntaxError\r"},"features":["regexp-named-groups\r"]},{"path":"./test262/test/language/literals/regexp/named-groups/invalid-incomplete-groupname-without-group-u.js","description":" GroupName is `< RegExpIdentifierName >`.\r","esid":" prod-GroupName\r","negative":{"phase":"parse\r","type":"SyntaxError\r"},"features":["regexp-named-groups\r"]},{"path":"./test262/test/language/literals/regexp/named-groups/invalid-lone-surrogate-groupname.js","description":" Lone surrogates in RegExp group names\r","esid":" prod-GroupSpecifier\r","features":["regexp-named-groups\r"]},{"path":"./test262/test/language/reserved-words/ident-name-keyword-memberexpr.js","version":5,"esid":" 7.6.1-2-2\r","description":" >\rAllow reserved words as property names by dot operator assignment.\r\n"},{"path":"./test262/test/language/statements/try/completion-values-fn-finally-abrupt.js","esid":" sec-try-statement-runtime-semantics-evaluation\r","description":" >\rReturns the correct completion values of try-catch-finally(Abrupt) in functions\r\n","info":" |\rTryStatement : try Block Catch Finally\r\n\r\nLet B be the result of evaluating Block.\r\nIf B.[[Type]] is throw, let C be CatchClauseEvaluation of Catch with argument B.[[Value]].\r\nElse, let C be B.\r\nLet F be the result of evaluating Finally.\r\nIf F.[[Type]] is normal, set F to C.\r\nReturn Completion(UpdateEmpty(F, undefined)).\r\n"},{"path":"./test262/test/language/statements/try/completion-values-fn-finally-normal.js","esid":" sec-try-statement-runtime-semantics-evaluation\r","description":" >\rReturns the correct completion values of try-catch-finally(Normal) in functions\r\n","info":" |\rTryStatement : try Block Catch Finally\r\n\r\nLet B be the result of evaluating Block.\r\nIf B.[[Type]] is throw, let C be CatchClauseEvaluation of Catch with argument B.[[Value]].\r\nElse, let C be B.\r\nLet F be the result of evaluating Finally.\r\nIf F.[[Type]] is normal, set F to C.\r\nReturn Completion(UpdateEmpty(F, undefined)).\r\n"},{"path":"./test262/test/language/statements/try/completion-values-fn-finally-return.js","esid":" sec-try-statement-runtime-semantics-evaluation\r","description":" >\rReturns the correct completion values of try-catch-finally(Return) in functions\r\n","info":" |\rTryStatement : try Block Catch Finally\r\n\r\nLet B be the result of evaluating Block.\r\nIf B.[[Type]] is throw, let C be CatchClauseEvaluation of Catch with argument B.[[Value]].\r\nElse, let C be B.\r\nLet F be the result of evaluating Finally.\r\nIf F.[[Type]] is normal, set F to C.\r\nReturn Completion(UpdateEmpty(F, undefined)).\r\n"}]