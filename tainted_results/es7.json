[{"path":"./test262/test/built-ins/Array/prototype/pop/clamps-to-integer-limit.js","esid":" sec-array.prototype.pop\r","description":" >\rLength values exceeding 2^53-1 are clamped to 2^53-1.\r\n","info":" |\r1. ...\r\n2. Let len be ? ToLength(? Get(O, \"length\")).\r\n...\r\n4. Else len > 0,\r\na. Let newLen be len-1.\r\n...\r\ne. Perform ? Set(O, \"length\", newLen, true).\r\n...\r\n"},{"path":"./test262/test/built-ins/Array/prototype/pop/length-near-integer-limit.js","esid":" sec-array.prototype.pop\r","description":" >\rA value is removed from an array-like object whose length property is near the integer limit.\r\n","info":" |\r...\r\n2. Let len be ? ToLength(? Get(O, \"length\")).\r\n...\r\n4. Else len > 0,\r\na. Let newLen be len-1.\r\nb. Let index be ! ToString(newLen).\r\nc. Let element be ? Get(O, index).\r\nd. Perform ? DeletePropertyOrThrow(O, index).\r\ne. Perform ? Set(O, \"length\", newLen, true).\r\nf. Return element.\n"},{"path":"./test262/test/built-ins/Array/prototype/push/clamps-to-integer-limit.js","esid":" sec-array.prototype.push\r","description":" >\rLength values exceeding 2^53-1 are clamped to 2^53-1.\r\n","info":" |\r1. ...\r\n2. Let len be ? ToLength(? Get(O, \"length\")).\r\n3. Let items be a List whose elements are, in left to right order, the arguments\r\nthat were passed to this function invocation.\r\n4. Let argCount be the number of elements in items.\r\n...\r\n7. Perform ? Set(O, \"length\", len, true).\r\n...\r\n"},{"path":"./test262/test/built-ins/Array/prototype/push/length-near-integer-limit.js","esid":" sec-array.prototype.push\r","description":" >\rA value is inserted in an array-like object whose length property is near the integer limit.\r\n","info":" |\r...\r\n2. Let len be ? ToLength(? Get(O, \"length\")).\r\n3. Let items be a List whose elements are, in left to right order, the\r\narguments that were passed to this function invocation.\r\n...\r\n5. Repeat, while items is not empty\r\n...\r\n7. Perform ? Set(O, \"length\", len, true).\r\n...\r\n"},{"path":"./test262/test/built-ins/Array/prototype/push/throws-if-integer-limit-exceeded.js","esid":" sec-array.prototype.push\r","description":" >\rA TypeError is thrown if the new length exceeds 2^53-1.\r\n","info":" |\r1. ...\r\n2. Let len be ? ToLength(? Get(O, \"length\")).\r\n3. Let items be a List whose elements are, in left to right order, the arguments\r\nthat were passed to this function invocation.\r\n4. Let argCount be the number of elements in items.\r\n5. If len + argCount > 2^53-1, throw a TypeError exception.\r\n...\r\n"},{"path":"./test262/test/built-ins/Array/prototype/reverse/length-exceeding-integer-limit-with-object.js","esid":" sec-array.prototype.reverse\r","description":" >\rEnsure reverse() implementation correctly handles length exceeding 2^53-1 with plain objects.\r\n","info":" |\r...\r\n2. Let len be ? ToLength(? Get(O, \"length\")).\r\n...\r\n"},{"path":"./test262/test/built-ins/Array/prototype/reverse/length-exceeding-integer-limit-with-proxy.js","esid":" sec-array.prototype.reverse\r","description":" >\rEnsure correct MOP operations are called when length exceeds 2^53-1.\r\n","includes":["compareArray.js","proxyTrapsHelper.js\r"]},{"path":"./test262/test/built-ins/Array/prototype/slice/length-exceeding-integer-limit-proxied-array.js","esid":" sec-array.prototype.slice\r","description":" >\rLength property is clamped to 2^53-1, test with indices near 2^53-1 and negative indices\r\nand a proxy to an array.\r\n","info":" |\r...\r\n2. Let len be ? ToLength(? Get(O, \"length\")).\r\n3. Let relativeStart be ? ToInteger(start).\r\n4. If relativeStart < 0, let k be max((len + relativeStart), 0);\r\nelse let k be min(relativeStart, len).\r\n5. If end is undefined, let relativeEnd be len; else let relativeEnd be ? ToInteger(end).\r\n6. If relativeEnd < 0, let final be max((len + relativeEnd), 0);\r\nelse let final be min(relativeEnd, len).\r\n...\r\n","includes":["compareArray.js\r"]},{"path":"./test262/test/built-ins/Array/prototype/slice/length-exceeding-integer-limit.js","esid":" sec-array.prototype.slice\r","description":" >\rLength property is clamped to 2^53-1, test with indices near 2^53-1 and negative indices.\r\n","info":" |\r...\r\n2. Let len be ? ToLength(? Get(O, \"length\")).\r\n3. Let relativeStart be ? ToInteger(start).\r\n4. If relativeStart < 0, let k be max((len + relativeStart), 0);\r\nelse let k be min(relativeStart, len).\r\n5. If end is undefined, let relativeEnd be len; else let relativeEnd be ? ToInteger(end).\r\n6. If relativeEnd < 0, let final be max((len + relativeEnd), 0);\r\nelse let final be min(relativeEnd, len).\r\n...\r\n","includes":["compareArray.js\r"]},{"path":"./test262/test/built-ins/Array/prototype/splice/clamps-length-to-integer-limit.js","esid":" sec-array.prototype.splice\r","description":" >\rLength values exceeding 2^53-1 are clamped to 2^53-1.\r\n","info":" |\r1. ...\r\n2. Let len be ? ToLength(? Get(O, \"length\")).\r\n...\r\n5. If the number of actual arguments is 0, then\r\na. Let insertCount be 0.\r\nb. Let actualDeleteCount be 0.\r\n...\r\n19. Perform ? Set(O, \"length\", len - actualDeleteCount + itemCount, true).\r\n...\r\n"},{"path":"./test262/test/built-ins/Array/prototype/splice/create-species-length-exceeding-integer-limit.js","esid":" sec-array.prototype.splice\r","description":" >\rCreate species constructor with length exceeding integer limit and ensure MOP\r\noperations are called in correct order.\r\n","info":" |\r...\r\n9. Let A be ? ArraySpeciesCreate(O, actualDeleteCount).\r\n10. Let k be 0.\r\n11. Repeat, while k < actualDeleteCount\r\na. Let from be ! ToString(actualStart+k).\r\nb. Let fromPresent be ? HasProperty(O, from).\r\nc. If fromPresent is true, then\r\ni. Let fromValue be ? Get(O, from).\r\nii. Perform ? CreateDataPropertyOrThrow(A, ! ToString(k), fromValue).\r\nd. Increment k by 1.\r\n12. Perform ? Set(A, \"length\", actualDeleteCount, true).\r\n...\r\n","includes":["compareArray.js","proxyTrapsHelper.js\r"],"features":["Symbol.species\r"]},{"path":"./test262/test/built-ins/Array/prototype/splice/length-and-deleteCount-exceeding-integer-limit.js","esid":" sec-array.prototype.splice\r","description":" >\rLength and deleteCount are both clamped to 2^53-1 when they exceed the integer limit.\r\n","info":" |\r...\r\n2. Let len be ? ToLength(? Get(O, \"length\")).\r\n...\r\n7. Else,\r\na. Let insertCount be the number of actual arguments minus 2.\r\nb. Let dc be ? ToInteger(deleteCount).\r\nc. Let actualDeleteCount be min(max(dc, 0), len - actualStart).\r\n...\r\n11. Repeat, while k < actualDeleteCount\r\na. Let from be ! ToString(actualStart+k).\r\nb. Let fromPresent be ? HasProperty(O, from).\r\nc. If fromPresent is true, then\r\ni. Let fromValue be ? Get(O, from).\r\nii. Perform ? CreateDataPropertyOrThrow(A, ! ToString(k), fromValue).\r\nd. Increment k by 1.\r\n...\r\n","includes":["compareArray.js\r"]},{"path":"./test262/test/built-ins/Array/prototype/splice/length-exceeding-integer-limit-shrink-array.js","esid":" sec-array.prototype.splice\r","description":" >\rAn element is removed from an array-like object whose length exceeds the integer limit.\r\n","info":" |\r...\r\n15. If itemCount < actualDeleteCount, then\r\na. Let k be actualStart.\r\nb. Repeat, while k < (len - actualDeleteCount)\r\ni. Let from be ! ToString(k+actualDeleteCount).\r\nii. Let to be ! ToString(k+itemCount).\r\niii. Let fromPresent be ? HasProperty(O, from).\r\niv. If fromPresent is true, then\r\n1. Let fromValue be ? Get(O, from).\r\n2. Perform ? Set(O, to, fromValue, true).\r\nv. Else fromPresent is false,\r\n1. Perform ? DeletePropertyOrThrow(O, to).\r\nvi. Increase k by 1.\r\nc. Let k be len.\r\nd. Repeat, while k > (len - actualDeleteCount + itemCount)\r\ni. Perform ? DeletePropertyOrThrow(O, ! ToString(k-1)).\r\nii. Decrease k by 1.\r\n...\r\n","includes":["compareArray.js\r"]},{"path":"./test262/test/built-ins/Array/prototype/splice/length-near-integer-limit-grow-array.js","esid":" sec-array.prototype.splice\r","description":" >\rA value is inserted in an array-like object whose length property is near the integer limit.\r\n","info":" |\r...\r\n16. Else if itemCount > actualDeleteCount, then\r\na. Let k be (len - actualDeleteCount).\r\nb. Repeat, while k > actualStart\r\ni. Let from be ! ToString(k + actualDeleteCount - 1).\r\nii. Let to be ! ToString(k + itemCount - 1).\r\niii. Let fromPresent be ? HasProperty(O, from).\r\niv. If fromPresent is true, then\r\n1. Let fromValue be ? Get(O, from).\r\n2. Perform ? Set(O, to, fromValue, true).\r\nv. Else fromPresent is false,\r\n1. Perform ? DeletePropertyOrThrow(O, to).\r\nvi. Decrease k by 1.\r\n...\r\n","includes":["compareArray.js\r"]},{"path":"./test262/test/built-ins/Array/prototype/splice/throws-if-integer-limit-exceeded.js","esid":" sec-array.prototype.splice\r","description":" >\rA TypeError is thrown if the new length exceeds 2^53-1.\r\n","info":" |\r1. ...\r\n2. Let len be ? ToLength(? Get(O, \"length\")).\r\n...\r\n7. Else,\r\na. Let insertCount be the number of actual arguments minus 2.\r\nb. Let dc be ? ToInteger(deleteCount).\r\nc. Let actualDeleteCount be min(max(dc, 0), len - actualStart).\r\n8. If len+insertCount-actualDeleteCount > 2^53-1, throw a TypeError exception.\r\n...\r\n"},{"path":"./test262/test/built-ins/Array/prototype/unshift/clamps-to-integer-limit.js","esid":" sec-array.prototype.unshift\r","description":" >\rLength values exceeding 2^53-1 are clamped to 2^53-1.\r\n","info":" |\r1. ...\r\n2. Let len be ? ToLength(? Get(O, \"length\")).\r\n3. Let argCount be the number of actual arguments.\r\n4. If argCount > 0, then ...\r\n5. Perform ? Set(O, \"length\", len+argCount, true).\r\n"},{"path":"./test262/test/built-ins/Array/prototype/unshift/length-near-integer-limit.js","esid":" sec-array.prototype.unshift\r","description":" >\rTest properties are correctly accessed when length property is near 2^53-1.\r\n","info":" |\r2. Let len be ? ToLength(? Get(O, \"length\")).\r\n3. Let argCount be the number of actual arguments.\r\n4. If argCount > 0, then\r\n...\r\nb. Let k be len.\r\nc. Repeat, while k > 0,\r\ni. Let from be ! ToString(k-1).\r\nii. Let to be ! ToString(k+argCount-1).\r\niii. Let fromPresent be ? HasProperty(O, from).\r\niv. If fromPresent is true, then\r\n1. Let fromValue be ? Get(O, from).\r\n2. Perform ? Set(O, to, fromValue, true).\r\nv. Else fromPresent is false,\r\n1. Perform ? DeletePropertyOrThrow(O, to).\r\nvi. Decrease k by 1.\r\n"},{"path":"./test262/test/built-ins/Array/prototype/unshift/throws-if-integer-limit-exceeded.js","esid":" sec-array.prototype.unshift\r","description":" >\rA TypeError is thrown if the new length exceeds 2^53-1.\r\n","info":" |\r1. ...\r\n2. Let len be ? ToLength(? Get(O, \"length\")).\r\n3. Let argCount be the number of actual arguments.\r\n4. If argCount > 0, then\r\na. If len+argCount > 2^53-1, throw a TypeError exception.\r\nb. ...\r\n"},{"path":"./test262/test/built-ins/RegExp/prototype/exec/failure-lastindex-set.js","description":" >\rlastIndex is set to 0 after exhausting the string when global and/or sticky are set.\r\n","esid":" sec-regexpbuiltinexec\r","info":" |\rRegExpBuiltinExec (\r\n_R_: an initialized RegExp instance,\r\n_S_: a String,\r\n)\r\n...\r\n1. Let _length_ be the number of code units in _S_.\r\n2. Let _lastIndex_ be ℝ(? ToLength(? Get(_R_, *\"lastIndex\"*))).\r\n3. Let _flags_ be _R_.[[OriginalFlags]].\r\n4. If _flags_ contains *\"g\"*, let _global_ be *true*; else let _global_ be *false*.\r\n5. If _flags_ contains *\"y\"*, let _sticky_ be *true*; else let _sticky_ be *false*.\r\n...\r\n9. Let _matchSucceeded_ be *false*.\r\n10. Repeat, while _matchSucceeded_ is *false*,\r\na. If _lastIndex_ &gt; _length_, then\r\ni. If _global_ is *true* or _sticky_ is *true*, then\r\n1. Perform ? Set(_R_, *\"lastIndex\"*, *+0*<sub>𝔽</sub>, *true*).\r\nii. Return *null*.\r\n"},{"path":"./test262/test/built-ins/String/prototype/split/separator-undef-limit-custom.js","esid":" sec-string.prototype.split\r","description":" Separator is undefined, limit is a positive number, return a new array with the string \r","info":" |\r...\r\n3. Let S be ? ToString(O).\r\n4. Let A be ! ArrayCreate(0).\r\n...\r\n6. If limit is undefined, let lim be 232 - 1; else let lim be ? ToUint32(limit).\r\n7. Let R be ? ToString(separator).\r\n8. If lim = 0, return A.\r\n9. If separator is undefined, then\r\na. Perform ! CreateDataPropertyOrThrow(A, \"0\", S).\r\nb. Return A.\r\n"},{"path":"./test262/test/built-ins/String/prototype/split/separator-undef-limit-zero.js","esid":" sec-string.prototype.split\r","description":" Separator is undefined, limit is zero, return a new empty array\r","info":" |\r...\r\n3. Let S be ? ToString(O).\r\n4. Let A be ! ArrayCreate(0).\r\n...\r\n6. If limit is undefined, let lim be 2**32 - 1; else let lim be ? ToUint32(limit).\r\n7. Let R be ? ToString(separator).\r\n8. If lim = 0, return A.\r\n\r\nToUint32 ( argument )\r\n\r\n1. Let number be ? ToNumber(argument).\r\n2. If number is NaN, +0, -0, +∞, or -∞, return +0.\r\n3. Let int be the Number value that is the same sign as number and whose magnitude is floor(abs(number)).\r\n4. Let int32bit be int modulo 2**32.\r\n5. Return int32bit.\r\n"},{"path":"./test262/test/language/expressions/class/cpn-class-expr-accessors-computed-property-name-from-exponetiation-expression.js","description":" Computed property name from exponentiation expression (ComputedPropertyName in ClassExpression)\r","esid":" prod-ComputedPropertyName\r","features":["computed-property-names\r"],"flags":["generated\r"],"info":" |\rClassExpression:\r\nclassBindingIdentifier opt ClassTail\r\n\r\nClassTail:\r\nClassHeritage opt { ClassBody opt }\r\n\r\nClassBody:\r\nClassElementList\r\n\r\nClassElementList:\r\nClassElement\r\n\r\nClassElement:\r\nMethodDefinition\r\n\r\nMethodDefinition:\r\nPropertyName ...\r\nget PropertyName ...\r\nset PropertyName ...\r\n\r\nPropertyName:\r\nComputedPropertyName\r\n\r\nComputedPropertyName:\r\n[ AssignmentExpression ]\r\n"},{"path":"./test262/test/language/expressions/class/cpn-class-expr-accessors-computed-property-name-from-math.js","description":" Computed property name from math (ComputedPropertyName in ClassExpression)\r","esid":" prod-ComputedPropertyName\r","features":["computed-property-names\r"],"flags":["generated\r"],"info":" |\rClassExpression:\r\nclassBindingIdentifier opt ClassTail\r\n\r\nClassTail:\r\nClassHeritage opt { ClassBody opt }\r\n\r\nClassBody:\r\nClassElementList\r\n\r\nClassElementList:\r\nClassElement\r\n\r\nClassElement:\r\nMethodDefinition\r\n\r\nMethodDefinition:\r\nPropertyName ...\r\nget PropertyName ...\r\nset PropertyName ...\r\n\r\nPropertyName:\r\nComputedPropertyName\r\n\r\nComputedPropertyName:\r\n[ AssignmentExpression ]\r\n"},{"path":"./test262/test/language/expressions/class/cpn-class-expr-computed-property-name-from-exponetiation-expression.js","description":" Computed property name from exponentiation expression (ComputedPropertyName in ClassExpression)\r","esid":" prod-ComputedPropertyName\r","features":["computed-property-names\r"],"flags":["generated\r"],"info":" |\rClassExpression:\r\nclassBindingIdentifier opt ClassTail\r\n\r\nClassTail:\r\nClassHeritage opt { ClassBody opt }\r\n\r\nClassBody:\r\nClassElementList\r\n\r\nClassElementList:\r\nClassElement\r\n\r\nClassElement:\r\nMethodDefinition\r\n\r\nMethodDefinition:\r\nPropertyName ...\r\nget PropertyName ...\r\nset PropertyName ...\r\n\r\nPropertyName:\r\nComputedPropertyName\r\n\r\nComputedPropertyName:\r\n[ AssignmentExpression ]\r\n"},{"path":"./test262/test/language/expressions/class/cpn-class-expr-computed-property-name-from-math.js","description":" Computed property name from math (ComputedPropertyName in ClassExpression)\r","esid":" prod-ComputedPropertyName\r","features":["computed-property-names\r"],"flags":["generated\r"],"info":" |\rClassExpression:\r\nclassBindingIdentifier opt ClassTail\r\n\r\nClassTail:\r\nClassHeritage opt { ClassBody opt }\r\n\r\nClassBody:\r\nClassElementList\r\n\r\nClassElementList:\r\nClassElement\r\n\r\nClassElement:\r\nMethodDefinition\r\n\r\nMethodDefinition:\r\nPropertyName ...\r\nget PropertyName ...\r\nset PropertyName ...\r\n\r\nPropertyName:\r\nComputedPropertyName\r\n\r\nComputedPropertyName:\r\n[ AssignmentExpression ]\r\n"},{"path":"./test262/test/language/expressions/exponentiation/applying-the-exp-operator_A1.js","esid":" sec-applying-the-exp-operator\r","description":" If exponent is NaN, the result is NaN.\r"},{"path":"./test262/test/language/expressions/exponentiation/applying-the-exp-operator_A11.js","esid":" sec-applying-the-exp-operator\r","description":" If base is +∞ and exponent > 0, the result is +∞.\r"},{"path":"./test262/test/language/expressions/exponentiation/applying-the-exp-operator_A12.js","esid":" sec-applying-the-exp-operator\r","description":" If base is +∞ and exponent < 0, the result is +0.\r"},{"path":"./test262/test/language/expressions/exponentiation/applying-the-exp-operator_A13.js","esid":" sec-applying-the-exp-operator\r","description":" If base is −∞ and exponent > 0 and exponent is an odd integer, the result is −∞.\r"},{"path":"./test262/test/language/expressions/exponentiation/applying-the-exp-operator_A14.js","esid":" sec-applying-the-exp-operator\r","description":" If base is −∞ and exponent > 0 and exponent is not an odd integer, the result is +∞.\r"},{"path":"./test262/test/language/expressions/exponentiation/applying-the-exp-operator_A15.js","esid":" sec-applying-the-exp-operator\r","description":" If base is −∞ and exponent < 0 and exponent is an odd integer, the result is −0.\r"},{"path":"./test262/test/language/expressions/exponentiation/applying-the-exp-operator_A16.js","esid":" sec-applying-the-exp-operator\r","description":" If base is −∞ and exponent < 0 and exponent is not an odd integer, the result is +0.\r"},{"path":"./test262/test/language/expressions/exponentiation/applying-the-exp-operator_A17.js","esid":" sec-applying-the-exp-operator\r","description":" If base is +0 and exponent > 0, the result is +0.\r"},{"path":"./test262/test/language/expressions/exponentiation/applying-the-exp-operator_A18.js","esid":" sec-applying-the-exp-operator\r","description":" If base is +0 and exponent < 0, the result is +∞.\r"},{"path":"./test262/test/language/expressions/exponentiation/applying-the-exp-operator_A19.js","esid":" sec-applying-the-exp-operator\r","description":" If base is −0 and exponent > 0 and exponent is an odd integer, the result is −0.\r"},{"path":"./test262/test/language/expressions/exponentiation/applying-the-exp-operator_A2.js","esid":" sec-applying-the-exp-operator\r","description":" >\rIf exponent is +0, the result is 1, even if base is NaN.\r\n"},{"path":"./test262/test/language/expressions/exponentiation/applying-the-exp-operator_A20.js","esid":" sec-applying-the-exp-operator\r","description":" If base is −0 and exponent > 0 and exponent is not an odd integer, the result is +0.\r"},{"path":"./test262/test/language/expressions/exponentiation/applying-the-exp-operator_A21.js","esid":" sec-applying-the-exp-operator\r","description":" If base is −0 and exponent < 0 and exponent is an odd integer, the result is −∞.\r"},{"path":"./test262/test/language/expressions/exponentiation/applying-the-exp-operator_A22.js","esid":" sec-applying-the-exp-operator\r","description":" If base is −0 and exponent < 0 and exponent is not an odd integer, the result is +∞.\r"},{"path":"./test262/test/language/expressions/exponentiation/applying-the-exp-operator_A23.js","esid":" sec-applying-the-exp-operator\r","description":" If base < 0 and base is finite and exponent is finite and exponent is not an integer, the result is NaN.\r"},{"path":"./test262/test/language/expressions/exponentiation/applying-the-exp-operator_A3.js","esid":" sec-applying-the-exp-operator\r","description":" >\rIf exponent is −0, the result is 1, even if base is NaN.\r\n"},{"path":"./test262/test/language/expressions/exponentiation/applying-the-exp-operator_A4.js","esid":" sec-applying-the-exp-operator\r","description":" If base is NaN and exponent is nonzero, the result is NaN.\r"},{"path":"./test262/test/language/expressions/exponentiation/applying-the-exp-operator_A5.js","esid":" sec-applying-the-exp-operator\r","description":" If abs(base) > 1 and exponent is +∞, the result is +∞.\r"},{"path":"./test262/test/language/expressions/exponentiation/applying-the-exp-operator_A6.js","esid":" sec-applying-the-exp-operator\r","description":" If abs(base) > 1 and exponent is −∞, the result is +0.\r"},{"path":"./test262/test/language/expressions/exponentiation/applying-the-exp-operator_A7.js","esid":" sec-applying-the-exp-operator\r","description":" If abs(base) is 1 and exponent is +∞, the result is NaN.\r"},{"path":"./test262/test/language/expressions/exponentiation/applying-the-exp-operator_A8.js","esid":" sec-applying-the-exp-operator\r","description":" If abs(base) is 1 and exponent is −∞, the result is NaN.\r"},{"path":"./test262/test/language/expressions/exponentiation/applying-the-exp-operator_A9.js","esid":" sec-applying-the-exp-operator\r","description":" If abs(base) < 1 and exponent is +∞, the result is +0.\r\r\n"},{"path":"./test262/test/language/expressions/exponentiation/exp-assignment-operator.js","author":" Rick Waldron\r","esid":" sec-assignment-operators-runtime-semantics-evaluation\r","description":" Compound Exponentiation Assignment Operator\r","info":" |\rAssignmentExpression:\r\nLeftHandSideExpression AssignmentOperator AssignmentExpression\r\n\r\n1. Let lref be the result of evaluating LeftHandSideExpression.\r\n2. Let lval be ? GetValue(lref).\r\n3. Let rref be the result of evaluating AssignmentExpression.\r\n4. Let rval be ? GetValue(rref).\r\n5. Let op be the @ where AssignmentOperator is @=.\r\n6. Let r be the result of applying op to lval and rval as if evaluating the expression lval op rval.\r\n7. Perform ? PutValue(lref, r).\r\n8. Return r.\r\n\r\n"},{"path":"./test262/test/language/expressions/exponentiation/exp-operator-evaluation-order.js","author":" Rick Waldron, André Bargull\r","esid":" sec-exp-operator-runtime-semantics-evaluation\r","description":" Exponentiation Operator expression order of evaluation\r","info":" |\rExponentiationExpression:\r\nUpdateExpression ** ExponentiationExpression\r\n\r\n1. Let left be the result of evaluating UpdateExpression.\r\n2. Let leftValue be ? GetValue(left).\r\n3. Let right be the result of evaluating ExponentiationExpression.\r\n4. Let rightValue be ? GetValue(right).\r\n5. Let base be ? ToNumber(leftValue).\r\n6. Let exponent be ? ToNumber(rightValue).\r\n7. Return the result of Applying the ** operator with base and exponent as specified in 12.7.3.4.\r\n"},{"path":"./test262/test/language/expressions/exponentiation/exp-operator-precedence-unary-expression-semantics.js","author":" Rick Waldron\r","esid":" sec-unary-operators\r","description":" Exponentiation Operator expression precedence of unary operators\r","info":" |\rExponentiationExpression :\r\nUnaryExpression\r\n...\r\n\r\nUnaryExpression :\r\n...\r\n`delete` UnaryExpression\r\n`void` UnaryExpression\r\n`typeof` UnaryExpression\r\n`+` UnaryExpression\r\n`-` UnaryExpression\r\n`~` UnaryExpression\r\n`!` UnaryExpression\r\n"},{"path":"./test262/test/language/expressions/exponentiation/exp-operator-precedence-update-expression-semantics.js","author":" Rick Waldron\r","esid":" sec-update-expressions\r","description":" Exponentiation Operator expression precedence of update operators\r","info":" |\rExponentiationExpression :\r\n...\r\nUpdateExpression `**` ExponentiationExpression\r\n\r\nUpdateExpression :\r\nLeftHandSideExpression `++`\r\nLeftHandSideExpression `--`\r\n`++` UnaryExpression\r\n`--` UnaryExpression\r\n"},{"path":"./test262/test/language/expressions/exponentiation/exp-operator.js","author":" Rick Waldron\r","esid":" sec-exp-operator\r","description":" >\rPerforms exponential calculation on operands. Same algorithm as %MathPow%(base, exponent)\r\n"},{"path":"./test262/test/language/expressions/exponentiation/int32_min-exponent.js","esid":" sec-applying-the-exp-operator\r","description":" >\rUsing -(2**31) as exponent with the exponentiation operator should behave\r\nas expected.\r\n"},{"path":"./test262/test/language/expressions/exponentiation/order-of-evaluation.js","esid":" sec-exp-operator-runtime-semantics-evaluation\r","description":" Type coercion order of operations for exponentiation operator\r","features":["Symbol\r"],"info":" |\rEvaluate lhs\r\nEvaluate rhs\r\nToNumeric(lhs)\r\nToNumeric(rhs)\r\n"},{"path":"./test262/test/language/expressions/object/cpn-obj-lit-computed-property-name-from-exponetiation-expression.js","description":" Computed property name from exponentiation expression (ComputedPropertyName in ObjectLiteral)\r","esid":" prod-ComputedPropertyName\r","features":["computed-property-names\r"],"flags":["generated\r"],"info":" |\rObjectLiteral:\r\n{ PropertyDefinitionList }\r\n\r\nPropertyDefinitionList:\r\nPropertyDefinition\r\n\r\nPropertyDefinition:\r\nPropertyName: AssignmentExpression\r\n\r\nPropertyName:\r\nComputedPropertyName\r\n\r\nComputedPropertyName:\r\n[ AssignmentExpression ]\r\n"},{"path":"./test262/test/language/expressions/object/cpn-obj-lit-computed-property-name-from-math.js","description":" Computed property name from math (ComputedPropertyName in ObjectLiteral)\r","esid":" prod-ComputedPropertyName\r","features":["computed-property-names\r"],"flags":["generated\r"],"info":" |\rObjectLiteral:\r\n{ PropertyDefinitionList }\r\n\r\nPropertyDefinitionList:\r\nPropertyDefinition\r\n\r\nPropertyDefinition:\r\nPropertyName: AssignmentExpression\r\n\r\nPropertyName:\r\nComputedPropertyName\r\n\r\nComputedPropertyName:\r\n[ AssignmentExpression ]\r\n"},{"path":"./test262/test/language/statements/class/cpn-class-decl-accessors-computed-property-name-from-exponetiation-expression.js","description":" Computed property name from exponentiation expression (ComputedPropertyName in ClassDeclaration)\r","esid":" prod-ComputedPropertyName\r","features":["computed-property-names\r"],"flags":["generated\r"],"info":" |\rClassExpression:\r\nclassBindingIdentifier opt ClassTail\r\n\r\nClassTail:\r\nClassHeritage opt { ClassBody opt }\r\n\r\nClassBody:\r\nClassElementList\r\n\r\nClassElementList:\r\nClassElement\r\n\r\nClassElement:\r\nMethodDefinition\r\n\r\nMethodDefinition:\r\nPropertyName ...\r\nget PropertyName ...\r\nset PropertyName ...\r\n\r\nPropertyName:\r\nComputedPropertyName\r\n\r\nComputedPropertyName:\r\n[ AssignmentExpression ]\r\n"},{"path":"./test262/test/language/statements/class/cpn-class-decl-accessors-computed-property-name-from-math.js","description":" Computed property name from math (ComputedPropertyName in ClassDeclaration)\r","esid":" prod-ComputedPropertyName\r","features":["computed-property-names\r"],"flags":["generated\r"],"info":" |\rClassExpression:\r\nclassBindingIdentifier opt ClassTail\r\n\r\nClassTail:\r\nClassHeritage opt { ClassBody opt }\r\n\r\nClassBody:\r\nClassElementList\r\n\r\nClassElementList:\r\nClassElement\r\n\r\nClassElement:\r\nMethodDefinition\r\n\r\nMethodDefinition:\r\nPropertyName ...\r\nget PropertyName ...\r\nset PropertyName ...\r\n\r\nPropertyName:\r\nComputedPropertyName\r\n\r\nComputedPropertyName:\r\n[ AssignmentExpression ]\r\n"},{"path":"./test262/test/language/statements/class/cpn-class-decl-computed-property-name-from-exponetiation-expression.js","description":" Computed property name from exponentiation expression (ComputedPropertyName in ClassDeclaration)\r","esid":" prod-ComputedPropertyName\r","features":["computed-property-names\r"],"flags":["generated\r"],"info":" |\rClassExpression:\r\nclassBindingIdentifier opt ClassTail\r\n\r\nClassTail:\r\nClassHeritage opt { ClassBody opt }\r\n\r\nClassBody:\r\nClassElementList\r\n\r\nClassElementList:\r\nClassElement\r\n\r\nClassElement:\r\nMethodDefinition\r\n\r\nMethodDefinition:\r\nPropertyName ...\r\nget PropertyName ...\r\nset PropertyName ...\r\n\r\nPropertyName:\r\nComputedPropertyName\r\n\r\nComputedPropertyName:\r\n[ AssignmentExpression ]\r\n"},{"path":"./test262/test/language/statements/class/cpn-class-decl-computed-property-name-from-math.js","description":" Computed property name from math (ComputedPropertyName in ClassDeclaration)\r","esid":" prod-ComputedPropertyName\r","features":["computed-property-names\r"],"flags":["generated\r"],"info":" |\rClassExpression:\r\nclassBindingIdentifier opt ClassTail\r\n\r\nClassTail:\r\nClassHeritage opt { ClassBody opt }\r\n\r\nClassBody:\r\nClassElementList\r\n\r\nClassElementList:\r\nClassElement\r\n\r\nClassElement:\r\nMethodDefinition\r\n\r\nMethodDefinition:\r\nPropertyName ...\r\nget PropertyName ...\r\nset PropertyName ...\r\n\r\nPropertyName:\r\nComputedPropertyName\r\n\r\nComputedPropertyName:\r\n[ AssignmentExpression ]\r\n"}]