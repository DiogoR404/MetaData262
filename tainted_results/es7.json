[{"path":"./test262/test/built-ins/Array/prototype/pop/clamps-to-integer-limit.js","esid":" sec-array.prototype.pop","description":" >Length values exceeding 2^53-1 are clamped to 2^53-1.\n","info":" |1. ...\n2. Let len be ? ToLength(? Get(O, \"length\")).\n...\n4. Else len > 0,\na. Let newLen be len-1.\n...\ne. Perform ? Set(O, \"length\", newLen, true).\n...\n"},{"path":"./test262/test/built-ins/Array/prototype/pop/length-near-integer-limit.js","esid":" sec-array.prototype.pop","description":" >A value is removed from an array-like object whose length property is near the integer limit.\n","info":" |...\n2. Let len be ? ToLength(? Get(O, \"length\")).\n...\n4. Else len > 0,\na. Let newLen be len-1.\nb. Let index be ! ToString(newLen).\nc. Let element be ? Get(O, index).\nd. Perform ? DeletePropertyOrThrow(O, index).\ne. Perform ? Set(O, \"length\", newLen, true).\nf. Return element. \n"},{"path":"./test262/test/built-ins/Array/prototype/push/clamps-to-integer-limit.js","esid":" sec-array.prototype.push","description":" >Length values exceeding 2^53-1 are clamped to 2^53-1.\n","info":" |1. ...\n2. Let len be ? ToLength(? Get(O, \"length\")).\n3. Let items be a List whose elements are, in left to right order, the arguments\nthat were passed to this function invocation.\n4. Let argCount be the number of elements in items.\n...\n7. Perform ? Set(O, \"length\", len, true).\n...\n"},{"path":"./test262/test/built-ins/Array/prototype/push/length-near-integer-limit.js","esid":" sec-array.prototype.push","description":" >A value is inserted in an array-like object whose length property is near the integer limit.\n","info":" |...\n2. Let len be ? ToLength(? Get(O, \"length\")).\n3. Let items be a List whose elements are, in left to right order, the\narguments that were passed to this function invocation.\n...\n5. Repeat, while items is not empty\n...\n7. Perform ? Set(O, \"length\", len, true).\n...\n"},{"path":"./test262/test/built-ins/Array/prototype/push/throws-if-integer-limit-exceeded.js","esid":" sec-array.prototype.push","description":" >A TypeError is thrown if the new length exceeds 2^53-1.\n","info":" |1. ...\n2. Let len be ? ToLength(? Get(O, \"length\")).\n3. Let items be a List whose elements are, in left to right order, the arguments\nthat were passed to this function invocation.\n4. Let argCount be the number of elements in items.\n5. If len + argCount > 2^53-1, throw a TypeError exception.\n...\n"},{"path":"./test262/test/built-ins/Array/prototype/reverse/length-exceeding-integer-limit-with-object.js","esid":" sec-array.prototype.reverse","description":" >Ensure reverse() implementation correctly handles length exceeding 2^53-1 with plain objects.\n","info":" |...\n2. Let len be ? ToLength(? Get(O, \"length\")).\n...\n"},{"path":"./test262/test/built-ins/Array/prototype/reverse/length-exceeding-integer-limit-with-proxy.js","esid":" sec-array.prototype.reverse","description":" >Ensure correct MOP operations are called when length exceeds 2^53-1.\n","includes":["compareArray.js","proxyTrapsHelper.js"]},{"path":"./test262/test/built-ins/Array/prototype/slice/length-exceeding-integer-limit-proxied-array.js","esid":" sec-array.prototype.slice","description":" >Length property is clamped to 2^53-1, test with indices near 2^53-1 and negative indices\nand a proxy to an array.\n","info":" |...\n2. Let len be ? ToLength(? Get(O, \"length\")).\n3. Let relativeStart be ? ToInteger(start).\n4. If relativeStart < 0, let k be max((len + relativeStart), 0);\nelse let k be min(relativeStart, len).\n5. If end is undefined, let relativeEnd be len; else let relativeEnd be ? ToInteger(end).\n6. If relativeEnd < 0, let final be max((len + relativeEnd), 0);\nelse let final be min(relativeEnd, len).\n...\n","includes":["compareArray.js"]},{"path":"./test262/test/built-ins/Array/prototype/slice/length-exceeding-integer-limit.js","esid":" sec-array.prototype.slice","description":" >Length property is clamped to 2^53-1, test with indices near 2^53-1 and negative indices.\n","info":" |...\n2. Let len be ? ToLength(? Get(O, \"length\")).\n3. Let relativeStart be ? ToInteger(start).\n4. If relativeStart < 0, let k be max((len + relativeStart), 0);\nelse let k be min(relativeStart, len).\n5. If end is undefined, let relativeEnd be len; else let relativeEnd be ? ToInteger(end).\n6. If relativeEnd < 0, let final be max((len + relativeEnd), 0);\nelse let final be min(relativeEnd, len).\n...\n","includes":["compareArray.js"]},{"path":"./test262/test/built-ins/Array/prototype/splice/clamps-length-to-integer-limit.js","esid":" sec-array.prototype.splice","description":" >Length values exceeding 2^53-1 are clamped to 2^53-1.\n","info":" |1. ...\n2. Let len be ? ToLength(? Get(O, \"length\")).\n...\n5. If the number of actual arguments is 0, then\na. Let insertCount be 0.\nb. Let actualDeleteCount be 0.\n...\n19. Perform ? Set(O, \"length\", len - actualDeleteCount + itemCount, true).\n...\n"},{"path":"./test262/test/built-ins/Array/prototype/splice/create-species-length-exceeding-integer-limit.js","esid":" sec-array.prototype.splice","description":" >Create species constructor with length exceeding integer limit and ensure MOP\noperations are called in correct order.\n","info":" |...\n9. Let A be ? ArraySpeciesCreate(O, actualDeleteCount).\n10. Let k be 0.\n11. Repeat, while k < actualDeleteCount\na. Let from be ! ToString(actualStart+k).\nb. Let fromPresent be ? HasProperty(O, from).\nc. If fromPresent is true, then\ni. Let fromValue be ? Get(O, from).\nii. Perform ? CreateDataPropertyOrThrow(A, ! ToString(k), fromValue).\nd. Increment k by 1.\n12. Perform ? Set(A, \"length\", actualDeleteCount, true).\n...\n","includes":["compareArray.js","proxyTrapsHelper.js"],"features":["Symbol.species"]},{"path":"./test262/test/built-ins/Array/prototype/splice/length-and-deleteCount-exceeding-integer-limit.js","esid":" sec-array.prototype.splice","description":" >Length and deleteCount are both clamped to 2^53-1 when they exceed the integer limit.\n","info":" |...\n2. Let len be ? ToLength(? Get(O, \"length\")).\n...\n7. Else,\na. Let insertCount be the number of actual arguments minus 2.\nb. Let dc be ? ToInteger(deleteCount).\nc. Let actualDeleteCount be min(max(dc, 0), len - actualStart).\n...\n11. Repeat, while k < actualDeleteCount\na. Let from be ! ToString(actualStart+k).\nb. Let fromPresent be ? HasProperty(O, from).\nc. If fromPresent is true, then\ni. Let fromValue be ? Get(O, from).\nii. Perform ? CreateDataPropertyOrThrow(A, ! ToString(k), fromValue).\nd. Increment k by 1.\n...\n","includes":["compareArray.js"]},{"path":"./test262/test/built-ins/Array/prototype/splice/length-exceeding-integer-limit-shrink-array.js","esid":" sec-array.prototype.splice","description":" >An element is removed from an array-like object whose length exceeds the integer limit.\n","info":" |...\n15. If itemCount < actualDeleteCount, then\na. Let k be actualStart.\nb. Repeat, while k < (len - actualDeleteCount)\ni. Let from be ! ToString(k+actualDeleteCount).\nii. Let to be ! ToString(k+itemCount).\niii. Let fromPresent be ? HasProperty(O, from).\niv. If fromPresent is true, then\n1. Let fromValue be ? Get(O, from).\n2. Perform ? Set(O, to, fromValue, true).\nv. Else fromPresent is false,\n1. Perform ? DeletePropertyOrThrow(O, to).\nvi. Increase k by 1.\nc. Let k be len.\nd. Repeat, while k > (len - actualDeleteCount + itemCount)\ni. Perform ? DeletePropertyOrThrow(O, ! ToString(k-1)).\nii. Decrease k by 1.\n...\n","includes":["compareArray.js"]},{"path":"./test262/test/built-ins/Array/prototype/splice/length-near-integer-limit-grow-array.js","esid":" sec-array.prototype.splice","description":" >A value is inserted in an array-like object whose length property is near the integer limit.\n","info":" |...\n16. Else if itemCount > actualDeleteCount, then\na. Let k be (len - actualDeleteCount).\nb. Repeat, while k > actualStart\ni. Let from be ! ToString(k + actualDeleteCount - 1).\nii. Let to be ! ToString(k + itemCount - 1).\niii. Let fromPresent be ? HasProperty(O, from).\niv. If fromPresent is true, then\n1. Let fromValue be ? Get(O, from).\n2. Perform ? Set(O, to, fromValue, true).\nv. Else fromPresent is false,\n1. Perform ? DeletePropertyOrThrow(O, to).\nvi. Decrease k by 1.\n...\n","includes":["compareArray.js"]},{"path":"./test262/test/built-ins/Array/prototype/splice/throws-if-integer-limit-exceeded.js","esid":" sec-array.prototype.splice","description":" >A TypeError is thrown if the new length exceeds 2^53-1.\n","info":" |1. ...\n2. Let len be ? ToLength(? Get(O, \"length\")).\n...\n7. Else,\na. Let insertCount be the number of actual arguments minus 2.\nb. Let dc be ? ToInteger(deleteCount).\nc. Let actualDeleteCount be min(max(dc, 0), len - actualStart).\n8. If len+insertCount-actualDeleteCount > 2^53-1, throw a TypeError exception.\n...\n"},{"path":"./test262/test/built-ins/Array/prototype/unshift/clamps-to-integer-limit.js","esid":" sec-array.prototype.unshift","description":" >Length values exceeding 2^53-1 are clamped to 2^53-1.\n","info":" |1. ...\n2. Let len be ? ToLength(? Get(O, \"length\")).\n3. Let argCount be the number of actual arguments.\n4. If argCount > 0, then ...\n5. Perform ? Set(O, \"length\", len+argCount, true).\n"},{"path":"./test262/test/built-ins/Array/prototype/unshift/length-near-integer-limit.js","esid":" sec-array.prototype.unshift","description":" >Test properties are correctly accessed when length property is near 2^53-1.\n","info":" |2. Let len be ? ToLength(? Get(O, \"length\")).\n3. Let argCount be the number of actual arguments.\n4. If argCount > 0, then\n...\nb. Let k be len.\nc. Repeat, while k > 0,\ni. Let from be ! ToString(k-1).\nii. Let to be ! ToString(k+argCount-1).\niii. Let fromPresent be ? HasProperty(O, from).\niv. If fromPresent is true, then\n1. Let fromValue be ? Get(O, from).\n2. Perform ? Set(O, to, fromValue, true).\nv. Else fromPresent is false,\n1. Perform ? DeletePropertyOrThrow(O, to).\nvi. Decrease k by 1.\n"},{"path":"./test262/test/built-ins/Array/prototype/unshift/throws-if-integer-limit-exceeded.js","esid":" sec-array.prototype.unshift","description":" >A TypeError is thrown if the new length exceeds 2^53-1.\n","info":" |1. ...\n2. Let len be ? ToLength(? Get(O, \"length\")).\n3. Let argCount be the number of actual arguments.\n4. If argCount > 0, then\na. If len+argCount > 2^53-1, throw a TypeError exception.\nb. ...\n"},{"path":"./test262/test/built-ins/RegExp/prototype/exec/failure-lastindex-set.js","description":" >lastIndex is set to 0 after exhausting the string when global and/or sticky are set.\n","esid":" sec-regexpbuiltinexec","info":" |RegExpBuiltinExec (\n_R_: an initialized RegExp instance,\n_S_: a String,\n)\n...\n1. Let _length_ be the number of code units in _S_.\n2. Let _lastIndex_ be ℝ(? ToLength(? Get(_R_, *\"lastIndex\"*))).\n3. Let _flags_ be _R_.[[OriginalFlags]].\n4. If _flags_ contains *\"g\"*, let _global_ be *true*; else let _global_ be *false*.\n5. If _flags_ contains *\"y\"*, let _sticky_ be *true*; else let _sticky_ be *false*.\n...\n9. Let _matchSucceeded_ be *false*.\n10. Repeat, while _matchSucceeded_ is *false*,\na. If _lastIndex_ &gt; _length_, then\ni. If _global_ is *true* or _sticky_ is *true*, then\n1. Perform ? Set(_R_, *\"lastIndex\"*, *+0*<sub>𝔽</sub>, *true*).\nii. Return *null*.\n"},{"path":"./test262/test/built-ins/String/prototype/split/separator-undef-limit-custom.js","esid":" sec-string.prototype.split","description":" Separator is undefined, limit is a positive number, return a new array with the string ","info":" |...\n3. Let S be ? ToString(O).\n4. Let A be ! ArrayCreate(0).\n...\n6. If limit is undefined, let lim be 232 - 1; else let lim be ? ToUint32(limit).\n7. Let R be ? ToString(separator).\n8. If lim = 0, return A.\n9. If separator is undefined, then\na. Perform ! CreateDataPropertyOrThrow(A, \"0\", S).\nb. Return A.\n"},{"path":"./test262/test/built-ins/String/prototype/split/separator-undef-limit-zero.js","esid":" sec-string.prototype.split","description":" Separator is undefined, limit is zero, return a new empty array","info":" |...\n3. Let S be ? ToString(O).\n4. Let A be ! ArrayCreate(0).\n...\n6. If limit is undefined, let lim be 2**32 - 1; else let lim be ? ToUint32(limit).\n7. Let R be ? ToString(separator).\n8. If lim = 0, return A.\n\nToUint32 ( argument )\n\n1. Let number be ? ToNumber(argument).\n2. If number is NaN, +0, -0, +∞, or -∞, return +0.\n3. Let int be the Number value that is the same sign as number and whose magnitude is floor(abs(number)).\n4. Let int32bit be int modulo 2**32.\n5. Return int32bit.\n"},{"path":"./test262/test/language/expressions/class/cpn-class-expr-accessors-computed-property-name-from-exponetiation-expression.js","description":" Computed property name from exponentiation expression (ComputedPropertyName in ClassExpression)","esid":" prod-ComputedPropertyName","features":["computed-property-names"],"flags":["generated"],"info":" |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"},{"path":"./test262/test/language/expressions/class/cpn-class-expr-accessors-computed-property-name-from-math.js","description":" Computed property name from math (ComputedPropertyName in ClassExpression)","esid":" prod-ComputedPropertyName","features":["computed-property-names"],"flags":["generated"],"info":" |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"},{"path":"./test262/test/language/expressions/class/cpn-class-expr-computed-property-name-from-exponetiation-expression.js","description":" Computed property name from exponentiation expression (ComputedPropertyName in ClassExpression)","esid":" prod-ComputedPropertyName","features":["computed-property-names"],"flags":["generated"],"info":" |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"},{"path":"./test262/test/language/expressions/class/cpn-class-expr-computed-property-name-from-math.js","description":" Computed property name from math (ComputedPropertyName in ClassExpression)","esid":" prod-ComputedPropertyName","features":["computed-property-names"],"flags":["generated"],"info":" |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"},{"path":"./test262/test/language/expressions/exponentiation/applying-the-exp-operator_A1.js","esid":" sec-applying-the-exp-operator","description":" If exponent is NaN, the result is NaN."},{"path":"./test262/test/language/expressions/exponentiation/applying-the-exp-operator_A11.js","esid":" sec-applying-the-exp-operator","description":" If base is +∞ and exponent > 0, the result is +∞."},{"path":"./test262/test/language/expressions/exponentiation/applying-the-exp-operator_A12.js","esid":" sec-applying-the-exp-operator","description":" If base is +∞ and exponent < 0, the result is +0."},{"path":"./test262/test/language/expressions/exponentiation/applying-the-exp-operator_A13.js","esid":" sec-applying-the-exp-operator","description":" If base is −∞ and exponent > 0 and exponent is an odd integer, the result is −∞."},{"path":"./test262/test/language/expressions/exponentiation/applying-the-exp-operator_A14.js","esid":" sec-applying-the-exp-operator","description":" If base is −∞ and exponent > 0 and exponent is not an odd integer, the result is +∞."},{"path":"./test262/test/language/expressions/exponentiation/applying-the-exp-operator_A15.js","esid":" sec-applying-the-exp-operator","description":" If base is −∞ and exponent < 0 and exponent is an odd integer, the result is −0."},{"path":"./test262/test/language/expressions/exponentiation/applying-the-exp-operator_A16.js","esid":" sec-applying-the-exp-operator","description":" If base is −∞ and exponent < 0 and exponent is not an odd integer, the result is +0."},{"path":"./test262/test/language/expressions/exponentiation/applying-the-exp-operator_A17.js","esid":" sec-applying-the-exp-operator","description":" If base is +0 and exponent > 0, the result is +0."},{"path":"./test262/test/language/expressions/exponentiation/applying-the-exp-operator_A18.js","esid":" sec-applying-the-exp-operator","description":" If base is +0 and exponent < 0, the result is +∞."},{"path":"./test262/test/language/expressions/exponentiation/applying-the-exp-operator_A19.js","esid":" sec-applying-the-exp-operator","description":" If base is −0 and exponent > 0 and exponent is an odd integer, the result is −0."},{"path":"./test262/test/language/expressions/exponentiation/applying-the-exp-operator_A2.js","esid":" sec-applying-the-exp-operator","description":" >If exponent is +0, the result is 1, even if base is NaN.\n"},{"path":"./test262/test/language/expressions/exponentiation/applying-the-exp-operator_A20.js","esid":" sec-applying-the-exp-operator","description":" If base is −0 and exponent > 0 and exponent is not an odd integer, the result is +0."},{"path":"./test262/test/language/expressions/exponentiation/applying-the-exp-operator_A21.js","esid":" sec-applying-the-exp-operator","description":" If base is −0 and exponent < 0 and exponent is an odd integer, the result is −∞."},{"path":"./test262/test/language/expressions/exponentiation/applying-the-exp-operator_A22.js","esid":" sec-applying-the-exp-operator","description":" If base is −0 and exponent < 0 and exponent is not an odd integer, the result is +∞."},{"path":"./test262/test/language/expressions/exponentiation/applying-the-exp-operator_A23.js","esid":" sec-applying-the-exp-operator","description":" If base < 0 and base is finite and exponent is finite and exponent is not an integer, the result is NaN."},{"path":"./test262/test/language/expressions/exponentiation/applying-the-exp-operator_A3.js","esid":" sec-applying-the-exp-operator","description":" >If exponent is −0, the result is 1, even if base is NaN.\n"},{"path":"./test262/test/language/expressions/exponentiation/applying-the-exp-operator_A4.js","esid":" sec-applying-the-exp-operator","description":" If base is NaN and exponent is nonzero, the result is NaN."},{"path":"./test262/test/language/expressions/exponentiation/applying-the-exp-operator_A5.js","esid":" sec-applying-the-exp-operator","description":" If abs(base) > 1 and exponent is +∞, the result is +∞."},{"path":"./test262/test/language/expressions/exponentiation/applying-the-exp-operator_A6.js","esid":" sec-applying-the-exp-operator","description":" If abs(base) > 1 and exponent is −∞, the result is +0."},{"path":"./test262/test/language/expressions/exponentiation/applying-the-exp-operator_A7.js","esid":" sec-applying-the-exp-operator","description":" If abs(base) is 1 and exponent is +∞, the result is NaN."},{"path":"./test262/test/language/expressions/exponentiation/applying-the-exp-operator_A8.js","esid":" sec-applying-the-exp-operator","description":" If abs(base) is 1 and exponent is −∞, the result is NaN."},{"path":"./test262/test/language/expressions/exponentiation/applying-the-exp-operator_A9.js","esid":" sec-applying-the-exp-operator","description":" If abs(base) < 1 and exponent is +∞, the result is +0.\n"},{"path":"./test262/test/language/expressions/exponentiation/exp-assignment-operator.js","author":" Rick Waldron","esid":" sec-assignment-operators-runtime-semantics-evaluation","description":" Compound Exponentiation Assignment Operator","info":" |AssignmentExpression:\nLeftHandSideExpression AssignmentOperator AssignmentExpression\n\n1. Let lref be the result of evaluating LeftHandSideExpression.\n2. Let lval be ? GetValue(lref).\n3. Let rref be the result of evaluating AssignmentExpression.\n4. Let rval be ? GetValue(rref).\n5. Let op be the @ where AssignmentOperator is @=.\n6. Let r be the result of applying op to lval and rval as if evaluating the expression lval op rval.\n7. Perform ? PutValue(lref, r).\n8. Return r.\n\n"},{"path":"./test262/test/language/expressions/exponentiation/exp-operator-evaluation-order.js","author":" Rick Waldron, André Bargull","esid":" sec-exp-operator-runtime-semantics-evaluation","description":" Exponentiation Operator expression order of evaluation","info":" |ExponentiationExpression:\nUpdateExpression ** ExponentiationExpression\n\n1. Let left be the result of evaluating UpdateExpression.\n2. Let leftValue be ? GetValue(left).\n3. Let right be the result of evaluating ExponentiationExpression.\n4. Let rightValue be ? GetValue(right).\n5. Let base be ? ToNumber(leftValue).\n6. Let exponent be ? ToNumber(rightValue).\n7. Return the result of Applying the ** operator with base and exponent as specified in 12.7.3.4.\n"},{"path":"./test262/test/language/expressions/exponentiation/exp-operator-precedence-unary-expression-semantics.js","author":" Rick Waldron","esid":" sec-unary-operators","description":" Exponentiation Operator expression precedence of unary operators","info":" |ExponentiationExpression :\nUnaryExpression\n...\n\nUnaryExpression :\n...\n`delete` UnaryExpression\n`void` UnaryExpression\n`typeof` UnaryExpression\n`+` UnaryExpression\n`-` UnaryExpression\n`~` UnaryExpression\n`!` UnaryExpression\n"},{"path":"./test262/test/language/expressions/exponentiation/exp-operator-precedence-update-expression-semantics.js","author":" Rick Waldron","esid":" sec-update-expressions","description":" Exponentiation Operator expression precedence of update operators","info":" |ExponentiationExpression :\n...\nUpdateExpression `**` ExponentiationExpression\n\nUpdateExpression :\nLeftHandSideExpression `++`\nLeftHandSideExpression `--`\n`++` UnaryExpression\n`--` UnaryExpression\n"},{"path":"./test262/test/language/expressions/exponentiation/exp-operator.js","author":" Rick Waldron","esid":" sec-exp-operator","description":" >Performs exponential calculation on operands. Same algorithm as %MathPow%(base, exponent)\n"},{"path":"./test262/test/language/expressions/exponentiation/int32_min-exponent.js","esid":" sec-applying-the-exp-operator","description":" >Using -(2**31) as exponent with the exponentiation operator should behave\nas expected.\n"},{"path":"./test262/test/language/expressions/exponentiation/order-of-evaluation.js","esid":" sec-exp-operator-runtime-semantics-evaluation","description":" Type coercion order of operations for exponentiation operator","features":["Symbol"],"info":" |Evaluate lhs\nEvaluate rhs\nToNumeric(lhs)\nToNumeric(rhs)\n"},{"path":"./test262/test/language/expressions/object/cpn-obj-lit-computed-property-name-from-exponetiation-expression.js","description":" Computed property name from exponentiation expression (ComputedPropertyName in ObjectLiteral)","esid":" prod-ComputedPropertyName","features":["computed-property-names"],"flags":["generated"],"info":" |ObjectLiteral:\n{ PropertyDefinitionList }\n\nPropertyDefinitionList:\nPropertyDefinition\n\nPropertyDefinition:\nPropertyName: AssignmentExpression\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"},{"path":"./test262/test/language/expressions/object/cpn-obj-lit-computed-property-name-from-math.js","description":" Computed property name from math (ComputedPropertyName in ObjectLiteral)","esid":" prod-ComputedPropertyName","features":["computed-property-names"],"flags":["generated"],"info":" |ObjectLiteral:\n{ PropertyDefinitionList }\n\nPropertyDefinitionList:\nPropertyDefinition\n\nPropertyDefinition:\nPropertyName: AssignmentExpression\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"},{"path":"./test262/test/language/statements/class/cpn-class-decl-accessors-computed-property-name-from-exponetiation-expression.js","description":" Computed property name from exponentiation expression (ComputedPropertyName in ClassDeclaration)","esid":" prod-ComputedPropertyName","features":["computed-property-names"],"flags":["generated"],"info":" |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"},{"path":"./test262/test/language/statements/class/cpn-class-decl-accessors-computed-property-name-from-math.js","description":" Computed property name from math (ComputedPropertyName in ClassDeclaration)","esid":" prod-ComputedPropertyName","features":["computed-property-names"],"flags":["generated"],"info":" |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"},{"path":"./test262/test/language/statements/class/cpn-class-decl-computed-property-name-from-exponetiation-expression.js","description":" Computed property name from exponentiation expression (ComputedPropertyName in ClassDeclaration)","esid":" prod-ComputedPropertyName","features":["computed-property-names"],"flags":["generated"],"info":" |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"},{"path":"./test262/test/language/statements/class/cpn-class-decl-computed-property-name-from-math.js","description":" Computed property name from math (ComputedPropertyName in ClassDeclaration)","esid":" prod-ComputedPropertyName","features":["computed-property-names"],"flags":["generated"],"info":" |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}]