[{"path": "./test262-main/test/built-ins/Array/prototype/Symbol.unscopables/value.js", "esid": " sec-array.prototype-@@unscopables", "description": " >Initial value of `Symbol.unscopables` property\n", "info": " |22.1.3.32 Array.prototype [ @@unscopables ]\n\n1. Let unscopableList be ObjectCreate(null).\n2. Perform CreateDataProperty(unscopableList, \"copyWithin\", true).\n3. Perform CreateDataProperty(unscopableList, \"entries\", true).\n4. Perform CreateDataProperty(unscopableList, \"fill\", true).\n5. Perform CreateDataProperty(unscopableList, \"find\", true).\n6. Perform CreateDataProperty(unscopableList, \"findIndex\", true).\n7. Perform CreateDataProperty(unscopableList, \"flat\", true).\n8. Perform CreateDataProperty(unscopableList, \"flatMap\", true).\n9. Perform CreateDataProperty(unscopableList, \"includes\", true).\n10. Perform CreateDataProperty(unscopableList, \"keys\", true).\n11. Perform CreateDataProperty(unscopableList, \"values\", true).\n12. Assert: Each of the above calls returns true.\n13. Return unscopableList.\n", "includes": ["propertyHelper.js"], "features": ["Symbol.unscopables"]}, {"path": "./test262-main/test/built-ins/Array/prototype/flat/array-like-objects.js", "esid": " sec-array.prototype.flat", "description": " >array-like objects can be flattened\n", "includes": ["compareArray.js"], "features": ["Array.prototype.flat"]}, {"path": "./test262-main/test/built-ins/Array/prototype/flat/bound-function-call.js", "esid": " sec-array.prototype.flat", "description": " >using bound functions\n", "includes": ["compareArray.js"], "features": ["Array.prototype.flat"]}, {"path": "./test262-main/test/built-ins/Array/prototype/flat/call-with-boolean.js", "esid": " sec-array.prototype.flat", "description": " Array.prototype.flat applied to boolean primitive", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/flat/empty-array-elements.js", "esid": " sec-array.prototype.flat", "description": " >arrays with empty arrays elements\n", "includes": ["compareArray.js"], "features": ["Array.prototype.flat"]}, {"path": "./test262-main/test/built-ins/Array/prototype/flat/empty-object-elements.js", "esid": " sec-array.prototype.flat", "description": " >arrays with empty object elements\n", "includes": ["compareArray.js"], "features": ["Array.prototype.flat"]}, {"path": "./test262-main/test/built-ins/Array/prototype/flat/length.js", "esid": " sec-array.prototype.flat", "description": " Array.prototype.flat.length value and descriptor.", "info": " >17 ECMAScript Standard Built-in Objects\n", "includes": ["propertyHelper.js"], "features": ["Array.prototype.flat"]}, {"path": "./test262-main/test/built-ins/Array/prototype/flat/name.js", "esid": " sec-array.prototype.flat", "description": " >Array.prototype.flat.name value and descriptor.\n", "info": " >17 ECMAScript Standard Built-in Objects\n", "includes": ["propertyHelper.js"], "features": ["Array.prototype.flat"]}, {"path": "./test262-main/test/built-ins/Array/prototype/flat/non-numeric-depth-should-not-throw.js", "esid": " sec-array.prototype.flat", "description": " >if the argument is a string or object, the depthNum is 0\n", "includes": ["compareArray.js"], "features": ["Array.prototype.flat"]}, {"path": "./test262-main/test/built-ins/Array/prototype/flat/non-object-ctor-throws.js", "esid": " sec-array.prototype.flat", "description": " >Behavior when `constructor` property is neither an Object nor undefined\n- if IsConstructor(C) is false, throw a TypeError exception.\n", "features": ["Array.prototype.flat"]}, {"path": "./test262-main/test/built-ins/Array/prototype/flat/null-undefined-elements.js", "esid": " sec-array.prototype.flat", "description": " >arrays with null, and undefined\n", "includes": ["compareArray.js"], "features": ["Array.prototype.flat"]}, {"path": "./test262-main/test/built-ins/Array/prototype/flat/null-undefined-input-throws.js", "esid": " sec-array.prototype.flat", "description": " >null or undefined should throw TypeError Exception\n", "features": ["Array.prototype.flat"]}, {"path": "./test262-main/test/built-ins/Array/prototype/flat/positive-infinity.js", "esid": " sec-array.prototype.flat", "description": " >if the argument is a positive infinity, the depthNum is max depth of the array\n", "includes": ["compareArray.js"], "features": ["Array.prototype.flat"]}, {"path": "./test262-main/test/built-ins/Array/prototype/flat/prop-desc.js", "esid": " sec-array.prototype.flat", "description": " Property type and descriptor.", "info": " >17 ECMAScript Standard Built-in Objects\n", "includes": ["propertyHelper.js"], "features": ["Array.prototype.flat"]}, {"path": "./test262-main/test/built-ins/Array/prototype/flat/proxy-access-count.js", "esid": " sec-array.prototype.flat", "description": " >properties are accessed correct number of times by .flat\n", "info": " |Array.prototype.flat( [ depth ] )\n\n...\n6. Perform ? FlattenIntoArray(A, O, sourceLen, 0, depthNum).\n\nFlattenIntoArray (target, source, sourceLen, start, depth [ , mapperFunction, thisArg ])\n\n3. Repeat, while sourceIndex < sourceLen\na. Let P be ! ToString(sourceIndex).\nb. Let exists be ? HasProperty(source, P).\nc. If exists is true, then\ni. Let element be ? Get(source, P).\n", "features": ["Array.prototype.flat"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/flat/symbol-object-create-null-depth-throws.js", "esid": " sec-array.prototype.flat", "description": " >if the argument is a Symbol or Object null, it throws exception\n", "features": ["Array.prototype.flat"]}, {"path": "./test262-main/test/built-ins/Array/prototype/flat/target-array-with-non-writable-property.js", "esid": " sec-array.prototype.flat", "description": " >Non-writable properties are overwritten by CreateDataProperty.\n(result object's \"0\" is non-writable, source array gets flattened)\n", "info": " |Array.prototype.flat ( [ depth ] )\n\n[...]\n6. Perform ? FlattenIntoArray(A, O, sourceLen, 0, depthNum).\n\nFlattenIntoArray ( target, source, sourceLen, start, depth [ , mapperFunction, thisArg ] )\n\n[...]\n9. Repeat, while sourceIndex < sourceLen\n[...]\nc. If exists is true, then\n[...]\nv. If shouldFlatten is true, then\n[...]\n2. Set targetIndex to ? FlattenIntoArray(target, element, elementLen, targetIndex, depth - 1).\n[...]\n", "features": ["Symbol.species"], "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/flatMap/array-like-objects-nested.js", "esid": " sec-array.prototype.flatMap", "description": " >Does not flatten array-like objects nested into the main array\n", "info": " |FlattenIntoArray(target, source, sourceLen, start, depth [ , mapperFunction, thisArg ])\n\n1. Let targetIndex be start.\n2. Let sourceIndex be 0.\n3. Repeat, while sourceIndex < sourceLen\na. Let P be ! ToString(sourceIndex).\nb. Let exists be ? HasProperty(source, P).\nc. If exists is true, then\ni. Let element be ? Get(source, P).\nii. If mapperFunction is present, then\n1. Assert: thisArg is present.\n2. Set element to ? Call(mapperFunction, thisArg , \u00ab element, sourceIndex, source \u00bb).\niii. Let shouldFlatten be false.\niv. If depth > 0, then\n1. Set shouldFlatten to ? IsArray(element).\nv. If shouldFlatten is true, then\n1. Let elementLen be ? ToLength(? Get(element, \"length\")).\n2. Set targetIndex to ? FlattenIntoArray(target, element, elementLen, targetIndex, depth - 1).\nvi. Else,\n1. If targetIndex \u2265 253-1, throw a TypeError exception.\n2. Perform ? CreateDataPropertyOrThrow(target, ! ToString(targetIndex), element).\n3. Increase targetIndex by 1.\n", "includes": ["compareArray.js"], "features": ["Array.prototype.flatMap", "Int32Array"]}, {"path": "./test262-main/test/built-ins/Array/prototype/flatMap/array-like-objects-poisoned-length.js", "esid": " sec-array.prototype.flatMap", "description": " >Observe abrupt completion in poisoned lengths of array-like objects\n", "info": " |Array.prototype.flatMap ( mapperFunction [ , thisArg ] )\n\n1. Let O be ? ToObject(this value).\n2. Let sourceLen be ? ToLength(? Get(O, \"length\")).\n", "features": ["Array.prototype.flatMap", "Symbol.toPrimitive"]}, {"path": "./test262-main/test/built-ins/Array/prototype/flatMap/array-like-objects-typedarrays.js", "esid": " sec-array.prototype.flatMap", "description": " >array-like objects can be flattened (typedArrays)\n", "info": " |Array.prototype.flatMap ( mapperFunction [ , thisArg ] )\n\n1. Let O be ? ToObject(this value).\n2. Let sourceLen be ? ToLength(? Get(O, \"length\")).\n...\n5. Let A be ? ArraySpeciesCreate(O, 0).\n...\n\nArraySpeciesCreate ( originalArray, length )\n\n3. Let isArray be ? IsArray(originalArray).\n4. If isArray is false, return ? ArrayCreate(length).\n5. Let C be ? Get(originalArray, \"constructor\").\n", "includes": ["compareArray.js"], "features": ["Array.prototype.flatMap", "Int32Array"]}, {"path": "./test262-main/test/built-ins/Array/prototype/flatMap/array-like-objects.js", "esid": " sec-array.prototype.flatMap", "description": " >array-like objects can be flattened\n", "info": " |Array.prototype.flatMap ( mapperFunction [ , thisArg ] )\n\n1. Let O be ? ToObject(this value).\n2. Let sourceLen be ? ToLength(? Get(O, \"length\")).\n...\n5. Let A be ? ArraySpeciesCreate(O, 0).\n...\n\nArraySpeciesCreate ( originalArray, length )\n\n3. Let isArray be ? IsArray(originalArray).\n4. If isArray is false, return ? ArrayCreate(length).\n\nFlattenIntoArray(target, source, sourceLen, start, depth [ , mapperFunction, thisArg ])\n\n1. Let targetIndex be start.\n2. Let sourceIndex be 0.\n3. Repeat, while sourceIndex < sourceLen\na. Let P be ! ToString(sourceIndex).\nb. Let exists be ? HasProperty(source, P).\nc. If exists is true, then\n...\n** Skip if property does not exist **\n", "includes": ["compareArray.js"], "features": ["Array.prototype.flatMap"]}, {"path": "./test262-main/test/built-ins/Array/prototype/flatMap/bound-function-argument.js", "esid": " sec-array.prototype.flatMap", "description": " >Behavior when given a bound function\n", "includes": ["compareArray.js"], "features": ["Array.prototype.flatMap"]}, {"path": "./test262-main/test/built-ins/Array/prototype/flatMap/call-with-boolean.js", "esid": " sec-array.prototype.flatMap", "description": " Array.prototype.flatMap applied to boolean primitive", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/flatMap/depth-always-one.js", "esid": " sec-array.prototype.flatMap", "description": " >Behavior when array is depth more than 1\n", "includes": ["compareArray.js"], "features": ["Array.prototype.flatMap"]}, {"path": "./test262-main/test/built-ins/Array/prototype/flatMap/length.js", "esid": " sec-array.prototype.flatMap", "description": " Array.prototype.flatMap.length value and descriptor.", "info": " >17 ECMAScript Standard Built-in Objects\n", "includes": ["propertyHelper.js"], "features": ["Array.prototype.flatMap"]}, {"path": "./test262-main/test/built-ins/Array/prototype/flatMap/name.js", "esid": " sec-array.prototype.flatmap", "description": " Array.prototype.flatmap name value and descriptor.", "info": " >17 ECMAScript Standard Built-in Objects\n", "includes": ["propertyHelper.js"], "features": ["Array.prototype.flatMap"]}, {"path": "./test262-main/test/built-ins/Array/prototype/flatMap/non-callable-argument-throws.js", "esid": " sec-array.prototype.flatMap", "description": " >non callable argument should throw TypeError Exception\n", "info": " |Array.prototype.flatMap ( mapperFunction [ , thisArg ] )\n\n1. Let O be ? ToObject(this value).\n2. Let sourceLen be ? ToLength(? Get(O, \"length\")).\n3. If IsCallable(mapperFunction) is false, throw a TypeError exception.\n...\n", "features": ["Array.prototype.flatMap", "Symbol"]}, {"path": "./test262-main/test/built-ins/Array/prototype/flatMap/prop-desc.js", "esid": " sec-array.prototype.flatMap", "description": " Property type and descriptor.", "info": " >17 ECMAScript Standard Built-in Objects\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2\nhas the attributes { [[Writable]]: true, [[Enumerable]]: false,\n[[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js"], "features": ["Array.prototype.flatMap"]}, {"path": "./test262-main/test/built-ins/Array/prototype/flatMap/proxy-access-count.js", "esid": " sec-array.prototype.flatMap", "description": " >properties are accessed correct number of times by .flatMap\n", "info": " |Array.prototype.flatMap ( mapperFunction [ , thisArg ] )\n\n...\n6. Perform ? FlattenIntoArray(A, O, sourceLen, 0, 1, mapperFunction, T).\n\nFlattenIntoArray (target, source, sourceLen, start, depth [ , mapperFunction, thisArg ])\n\n3. Repeat, while sourceIndex < sourceLen\na. Let P be ! ToString(sourceIndex).\nb. Let exists be ? HasProperty(source, P).\nc. If exists is true, then\ni. Let element be ? Get(source, P).\n", "features": ["Array.prototype.flatMap"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/flatMap/target-array-with-non-writable-property.js", "esid": " sec-array.prototype.flatmap", "description": " >Non-writable properties are overwritten by CreateDataProperty.\n(result object's \"0\" is non-writable, source array is not flattened)\n", "info": " |Array.prototype.flatMap ( mapperFunction [ , thisArg ] )\n\n[...]\n6. Perform ? FlattenIntoArray(A, O, sourceLen, 0, depthNum).\n\nFlattenIntoArray ( target, source, sourceLen, start, depth [ , mapperFunction, thisArg ] )\n\n[...]\n9. Repeat, while sourceIndex < sourceLen\n[...]\nc. If exists is true, then\n[...]\nv. If shouldFlatten is true, then\n[...]\nvi. Else,\n[...]\n2. Perform ? CreateDataPropertyOrThrow(target, ! ToString(targetIndex), element).\n[...]\n", "features": ["Symbol.species"], "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/flatMap/this-value-ctor-non-object.js", "esid": " sec-array.prototype.flatMap", "description": " >Assert behavior if this value has a custom non-object constructor property\n", "info": " |Array.prototype.flatMap ( mapperFunction [ , thisArg ] )\n\n1. Let O be ? ToObject(this value).\n2. Let sourceLen be ? ToLength(? Get(O, \"length\")).\n...\n5. Let A be ? ArraySpeciesCreate(O, 0).\n...\n\nArraySpeciesCreate ( originalArray, length )\n\n3. Let isArray be ? IsArray(originalArray).\n4. If isArray is false, return ? ArrayCreate(length).\n5. Let C be ? Get(originalArray, \"constructor\").\n6. If IsConstructor(C) is true, then\na. Let thisRealm be the current Realm Record.\nb. Let realmC be ? GetFunctionRealm(C).\nc. If thisRealm and realmC are not the same Realm Record, then\ni. If SameValue(C, realmC.[[Intrinsics]].[[%Array%]]) is true, set C to undefined.\n7. If Type(C) is Object, then\na. Set C to ? Get(C, @@species).\nb. If C is null, set C to undefined.\n8. If C is undefined, return ? ArrayCreate(length).\n9. If IsConstructor(C) is false, throw a TypeError exception.\n", "features": ["Array.prototype.flatMap", "Symbol"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/flatMap/this-value-ctor-object-species-bad-throws.js", "esid": " sec-array.prototype.flatMap", "description": " >Assert behavior if this value has a custom object constructor property species\n", "info": " |Array.prototype.flatMap ( mapperFunction [ , thisArg ] )\n\n1. Let O be ? ToObject(this value).\n2. Let sourceLen be ? ToLength(? Get(O, \"length\")).\n...\n5. Let A be ? ArraySpeciesCreate(O, 0).\n...\n\nArraySpeciesCreate ( originalArray, length )\n\n3. Let isArray be ? IsArray(originalArray).\n4. If isArray is false, return ? ArrayCreate(length).\n5. Let C be ? Get(originalArray, \"constructor\").\n6. If IsConstructor(C) is true, then\na. Let thisRealm be the current Realm Record.\nb. Let realmC be ? GetFunctionRealm(C).\nc. If thisRealm and realmC are not the same Realm Record, then\ni. If SameValue(C, realmC.[[Intrinsics]].[[%Array%]]) is true, set C to undefined.\n7. If Type(C) is Object, then\na. Set C to ? Get(C, @@species).\nb. If C is null, set C to undefined.\n8. If C is undefined, return ? ArrayCreate(length).\n9. If IsConstructor(C) is false, throw a TypeError exception.\n10. Return ? Construct(C, \u00ab length \u00bb).\n", "features": ["Array.prototype.flatMap", "Symbol", "Symbol.species"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/flatMap/this-value-ctor-object-species-custom-ctor-poisoned-throws.js", "esid": " sec-array.prototype.flatMap", "description": " >Assert behavior if this value has a poisoned custom species constructor\n", "info": " |Array.prototype.flatMap ( mapperFunction [ , thisArg ] )\n\n1. Let O be ? ToObject(this value).\n2. Let sourceLen be ? ToLength(? Get(O, \"length\")).\n...\n5. Let A be ? ArraySpeciesCreate(O, 0).\n6. Perform ? FlattenIntoArray(A, O, sourceLen, 0, 1, mapperFunction, T).\n7. Return A.\n\nArraySpeciesCreate ( originalArray, length )\n\n3. Let isArray be ? IsArray(originalArray).\n4. If isArray is false, return ? ArrayCreate(length).\n5. Let C be ? Get(originalArray, \"constructor\").\n6. If IsConstructor(C) is true, then\n...\n7. If Type(C) is Object, then\na. Set C to ? Get(C, @@species).\nb. If C is null, set C to undefined.\n8. If C is undefined, return ? ArrayCreate(length).\n9. If IsConstructor(C) is false, throw a TypeError exception.\n10. Return ? Construct(C, \u00ab length \u00bb).\n", "features": ["Array.prototype.flatMap", "Symbol", "Symbol.species"]}, {"path": "./test262-main/test/built-ins/Array/prototype/flatMap/this-value-ctor-object-species-custom-ctor.js", "esid": " sec-array.prototype.flatMap", "description": " >Assert behavior if this value has a custom species constructor\n", "info": " |Array.prototype.flatMap ( mapperFunction [ , thisArg ] )\n\n1. Let O be ? ToObject(this value).\n2. Let sourceLen be ? ToLength(? Get(O, \"length\")).\n...\n5. Let A be ? ArraySpeciesCreate(O, 0).\n6. Perform ? FlattenIntoArray(A, O, sourceLen, 0, 1, mapperFunction, T).\n7. Return A.\n\nArraySpeciesCreate ( originalArray, length )\n\n3. Let isArray be ? IsArray(originalArray).\n4. If isArray is false, return ? ArrayCreate(length).\n5. Let C be ? Get(originalArray, \"constructor\").\n6. If IsConstructor(C) is true, then\n...\n7. If Type(C) is Object, then\na. Set C to ? Get(C, @@species).\nb. If C is null, set C to undefined.\n8. If C is undefined, return ? ArrayCreate(length).\n9. If IsConstructor(C) is false, throw a TypeError exception.\n10. Return ? Construct(C, \u00ab length \u00bb).\n\nFlattenIntoArray(target, source, sourceLen, start, depth [ , mapperFunction, thisArg ])\n\n3. Repeat, while sourceIndex < sourceLen\na. Let P be ! ToString(sourceIndex).\nb. Let exists be ? HasProperty(source, P).\nc. If exists is true, then\n...\nvi. Else,\n...\n2. Perform ? CreateDataPropertyOrThrow(target, ! ToString(targetIndex), element).\n", "features": ["Array.prototype.flatMap", "Symbol", "Symbol.species"], "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/flatMap/this-value-ctor-object-species.js", "esid": " sec-array.prototype.flatMap", "description": " >Assert behavior if this value has a custom object constructor property\n", "info": " |Array.prototype.flatMap ( mapperFunction [ , thisArg ] )\n\n1. Let O be ? ToObject(this value).\n2. Let sourceLen be ? ToLength(? Get(O, \"length\")).\n...\n5. Let A be ? ArraySpeciesCreate(O, 0).\n...\n\nArraySpeciesCreate ( originalArray, length )\n\n3. Let isArray be ? IsArray(originalArray).\n4. If isArray is false, return ? ArrayCreate(length).\n5. Let C be ? Get(originalArray, \"constructor\").\n6. If IsConstructor(C) is true, then\na. Let thisRealm be the current Realm Record.\nb. Let realmC be ? GetFunctionRealm(C).\nc. If thisRealm and realmC are not the same Realm Record, then\ni. If SameValue(C, realmC.[[Intrinsics]].[[%Array%]]) is true, set C to undefined.\n7. If Type(C) is Object, then\na. Set C to ? Get(C, @@species).\nb. If C is null, set C to undefined.\n8. If C is undefined, return ? ArrayCreate(length).\n9. If IsConstructor(C) is false, throw a TypeError exception.\n10. Return ? Construct(C, \u00ab length \u00bb).\n", "features": ["Array.prototype.flatMap", "Symbol", "Symbol.species"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/flatMap/this-value-null-undefined-throws.js", "esid": " sec-array.prototype.flatMap", "description": " >Throw a TypeError if this value is null or undefined\n", "info": " |Array.prototype.flatMap ( mapperFunction [ , thisArg ] )\n\n1. Let O be ? ToObject(this value).\n...\n", "features": ["Array.prototype.flatMap"]}, {"path": "./test262-main/test/built-ins/Array/prototype/flatMap/thisArg-argument.js", "esid": " sec-array.prototype.flatMap", "description": " >Behavior when thisArg is provided\nArray.prototype.flatMap ( mapperFunction [ , thisArg ] )\n", "flags": ["onlyStrict"], "includes": ["compareArray.js"], "features": ["Array.prototype.flatMap"]}, {"path": "./test262-main/test/built-ins/Array/prototype/sort/call-with-primitive.js", "esid": " sec-array.prototype.sort", "description": " >This value is coerced to an object.\n", "info": " |Array.prototype.sort ( comparefn )\n\n[...]\n2. Let obj be ? ToObject(this value).\n[...]\n12. Return obj.\n", "features": ["Symbol", "BigInt"]}, {"path": "./test262-main/test/built-ins/Atomics/add/bigint/bad-range.js", "esid": " sec-atomics.add", "description": " >Test range checking of Atomics.add on arrays that allow atomic operations\n", "includes": ["testAtomics.js", "testBigIntTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "BigInt", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/add/bigint/good-views.js", "esid": " sec-atomics.add", "description": " Test Atomics.add on arrays that allow atomic operations.", "includes": ["testAtomics.js", "testBigIntTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "BigInt", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/add/validate-arraytype-before-value-coercion.js", "esid": " sec-atomics.add", "description": " >TypedArray type is validated before `value` argument is coerced.\n", "info": " |24.4.2 Atomics.add ( typedArray, index, value )\n1. Return ? AtomicReadModifyWrite(typedArray, index, value, add).\n\n24.4.1.11 AtomicReadModifyWrite ( typedArray, index, value, op )\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray).\n...\n\n24.4.1.1 ValidateSharedIntegerTypedArray ( typedArray [ , onlyInt32 ] )\n...\n4. Let typeName be typedArray.[[TypedArrayName]].\n5. If onlyInt32 is true, then\na. If typeName is not \"Int32Array\", throw a TypeError exception.\n6. Else,\na. If typeName is not \"Int8Array\", \"Uint8Array\", \"Int16Array\", \"Uint16Array\", \"Int32Array\",\nor \"Uint32Array\", throw a TypeError exception.\n...\n", "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/and/bigint/bad-range.js", "esid": " sec-atomics.and", "description": " >Test range checking of Atomics.and on arrays that allow atomic operations\n", "includes": ["testAtomics.js", "testBigIntTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "BigInt", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/and/bigint/good-views.js", "esid": " sec-atomics.and", "description": " Test Atomics.and on arrays that allow atomic operations", "includes": ["testAtomics.js", "testBigIntTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "BigInt", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/and/validate-arraytype-before-value-coercion.js", "esid": " sec-atomics.add", "description": " >TypedArray type is validated before `value` argument is coerced.\n", "info": " |24.4.3 Atomics.and ( typedArray, index, value )\n1. Return ? AtomicReadModifyWrite(typedArray, index, value, and).\n\n24.4.1.11 AtomicReadModifyWrite ( typedArray, index, value, op )\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray).\n...\n\n24.4.1.1 ValidateSharedIntegerTypedArray ( typedArray [ , onlyInt32 ] )\n...\n4. Let typeName be typedArray.[[TypedArrayName]].\n5. If onlyInt32 is true, then\na. If typeName is not \"Int32Array\", throw a TypeError exception.\n6. Else,\na. If typeName is not \"Int8Array\", \"Uint8Array\", \"Int16Array\", \"Uint16Array\", \"Int32Array\",\nor \"Uint32Array\", throw a TypeError exception.\n...\n", "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/compareExchange/bigint/bad-range.js", "esid": " sec-atomics.compareexchange", "description": " >Test range checking of Atomics.compareExchange on arrays that allow atomic operations\n", "includes": ["testAtomics.js", "testBigIntTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "BigInt", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/compareExchange/bigint/good-views.js", "esid": " sec-atomics.compareexchange", "description": " Test Atomics.compareExchange on arrays that allow atomic operations.", "includes": ["testAtomics.js", "testBigIntTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "BigInt", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/compareExchange/validate-arraytype-before-expectedValue-coercion.js", "esid": " sec-atomics.compareExchange", "description": " >TypedArray type is validated before `expectedValue` argument is coerced.\n", "info": " |24.4.4 Atomics.compareExchange ( typedArray, index, expectedValue, replacementValue )\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray).\n...\n\n24.4.1.1 ValidateSharedIntegerTypedArray ( typedArray [ , onlyInt32 ] )\n...\n4. Let typeName be typedArray.[[TypedArrayName]].\n5. If onlyInt32 is true, then\na. If typeName is not \"Int32Array\", throw a TypeError exception.\n6. Else,\na. If typeName is not \"Int8Array\", \"Uint8Array\", \"Int16Array\", \"Uint16Array\", \"Int32Array\",\nor \"Uint32Array\", throw a TypeError exception.\n...\n", "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/compareExchange/validate-arraytype-before-replacementValue-coercion.js", "esid": " sec-atomics.compareExchange", "description": " >TypedArray type is validated before `replacementValue` argument is coerced.\n", "info": " |24.4.4 Atomics.compareExchange ( typedArray, index, expectedValue, replacementValue )\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray).\n...\n\n24.4.1.1 ValidateSharedIntegerTypedArray ( typedArray [ , onlyInt32 ] )\n...\n4. Let typeName be typedArray.[[TypedArrayName]].\n5. If onlyInt32 is true, then\na. If typeName is not \"Int32Array\", throw a TypeError exception.\n6. Else,\na. If typeName is not \"Int8Array\", \"Uint8Array\", \"Int16Array\", \"Uint16Array\", \"Int32Array\",\nor \"Uint32Array\", throw a TypeError exception.\n...\n", "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/exchange/bigint/bad-range.js", "esid": " sec-atomics.exchange", "description": " >Test range checking of Atomics.exchange on arrays that allow atomic operations\n", "includes": ["testAtomics.js", "testBigIntTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "BigInt", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/exchange/bigint/good-views.js", "esid": " sec-atomics.exchange", "description": " Test Atomics.exchange on arrays that allow atomic operations.", "includes": ["testAtomics.js", "testBigIntTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "BigInt", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/exchange/validate-arraytype-before-value-coercion.js", "esid": " sec-atomics.exchange", "description": " >TypedArray type is validated before `value` argument is coerced.\n", "info": " |24.4.5 Atomics.exchange ( typedArray, index, value )\n1. Return ? AtomicReadModifyWrite(typedArray, index, value, second).\n\n24.4.1.11 AtomicReadModifyWrite ( typedArray, index, value, op )\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray).\n...\n\n24.4.1.1 ValidateSharedIntegerTypedArray ( typedArray [ , onlyInt32 ] )\n...\n4. Let typeName be typedArray.[[TypedArrayName]].\n5. If onlyInt32 is true, then\na. If typeName is not \"Int32Array\", throw a TypeError exception.\n6. Else,\na. If typeName is not \"Int8Array\", \"Uint8Array\", \"Int16Array\", \"Uint16Array\", \"Int32Array\",\nor \"Uint32Array\", throw a TypeError exception.\n...\n", "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/isLockFree/bigint/expected-return-value.js", "esid": " sec-atomics.isLockFree", "description": " >Atomics.isLockFree returns a boolean that indicates whether\noperations on datum of size will be performed without the agent\nacquiring a lock outside of size bytes.\n", "info": " |Atomics.isLockFree( size )\n\n1. Let n be ? ToInteger(size).\n2. Let AR be the Agent Record of the surrounding agent.\n3. If n equals 1, return AR.[[IsLockFree1]].\n4. If n equals 2, return AR.[[IsLockFree2]].\n5. If n equals 4, return true.\n6. If n equals 8, return AR.[[IsLockFree8]].\n7. Return false.\n\n", "features": ["Atomics", "BigInt", "SharedArrayBuffer", "TypedArray"], "includes": ["testBigIntTypedArray.js"]}, {"path": "./test262-main/test/built-ins/Atomics/load/bigint/bad-range.js", "esid": " sec-atomics.load", "description": " >Test range checking of Atomics.load on arrays that allow atomic operations\n", "includes": ["testAtomics.js", "testBigIntTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "BigInt", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/load/bigint/good-views.js", "esid": " sec-atomics.load", "description": " Test Atomics.load on arrays that allow atomic operations.", "includes": ["testAtomics.js", "testBigIntTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "BigInt", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/notify/bad-range.js", "esid": " sec-atomics.notify", "description": " >Test range checking of Atomics.notify on arrays that allow atomic operations\n", "info": " |Atomics.notify( typedArray, index, count )\n\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray, true).\n..\n\n", "includes": ["testAtomics.js"], "features": ["ArrayBuffer", "Atomics", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/notify/bigint/bad-range.js", "esid": " sec-atomics.notify", "description": " >Test range checking of Atomics.notify on arrays that allow atomic operations\n", "info": " |Atomics.notify( typedArray, index, count )\n\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray, true).\n..\n\n", "includes": ["testAtomics.js"], "features": ["ArrayBuffer", "Atomics", "BigInt", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/notify/bigint/non-bigint64-typedarray-throws.js", "esid": " sec-atomics.notify", "description": " >Throws a TypeError if typedArray arg is not an BigInt64Array\n", "info": " |Atomics.notify( typedArray, index, count )\n\n1.Let buffer be ? ValidateSharedIntegerTypedArray(typedArray, true).\n...\n5.If onlyInt32 is true, then\nIf typeName is not \"BigInt64Array\", throw a TypeError exception.\n", "features": ["Atomics", "BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/notify/bigint/non-shared-bufferdata-non-shared-int-views-throws.js", "esid": " sec-atomics.notify", "description": " >Atomics.notify throws on non-shared integer TypedArrays\n", "features": ["ArrayBuffer", "Atomics", "BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/notify/count-boundary-cases.js", "esid": " sec-atomics.notify", "description": " >Allowed boundary cases for 'count' argument to Atomics.notify\n", "info": " |Atomics.notify( typedArray, index, count )\n\n...\n3. If count is undefined, let c be +\u221e.\n4. Else,\na. Let intCount be ? ToInteger(count).\n...\n\nToInteger ( argument )\n\n1. Let number be ? ToNumber(argument).\n2. If number is NaN, return +0.\n3. If number is +0, -0, +\u221e, or -\u221e, return number.\n4. Return the number value that is the same sign as number\nand whose magnitude is floor(abs(number)).\n\n", "features": ["Atomics", "SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/notify/count-from-nans.js", "esid": " sec-atomics.notify", "description": " >NaNs are converted to 0 for 'count' argument to Atomics.notify\n", "info": " |Atomics.notify( typedArray, index, count )\n\n...\n3. If count is undefined, let c be +\u221e.\n4. Else,\na. Let intCount be ? ToInteger(count).\n...\n\nToInteger ( argument )\n\n...\n2. If number is NaN, return +0.\n...\n\n", "includes": ["nans.js"], "features": ["Atomics", "SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/notify/count-tointeger-throws-then-wake-throws.js", "esid": " sec-atomics.notify", "description": " >Return abrupt when ToInteger throws an exception on 'count' argument to Atomics.notify\n", "info": " |Atomics.notify( typedArray, index, count )\n\n...\n3. If count is undefined, let c be +\u221e.\n4. Else,\na. Let intCount be ? ToInteger(count).\n...\n\n", "features": ["Atomics", "SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/notify/descriptor.js", "esid": " sec-atomics.notify", "description": " Testing descriptor property of Atomics.notify", "includes": ["propertyHelper.js"], "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/notify/length.js", "esid": " sec-atomics.notify", "description": " >Atomics.notify.length is 3.\n", "info": " |Atomics.notify ( ia, index, count )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/notify/name.js", "esid": " sec-atomics.notify", "description": " >Atomics.notify.name is \"notify\".\n", "includes": ["propertyHelper.js"], "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/notify/negative-index-throws.js", "esid": " sec-atomics.notify", "description": " >Throws a RangeError is index < 0\n", "info": " |Atomics.notify( typedArray, index, count )\n\n2.Let i be ? ValidateAtomicAccess(typedArray, index).\n...\n2.Let accessIndex be ? ToIndex(requestIndex).\n...\n2.b If integerIndex < 0, throw a RangeError exception\n", "features": ["Atomics", "SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/notify/out-of-range-index-throws.js", "esid": " sec-atomics.notify", "description": " >Throws a RangeError if value of index arg is out of range\ninfo: |\nAtomics.notify( typedArray, index, count )\n\n2.Let i be ? ValidateAtomicAccess(typedArray, index).\n...\n2.Let accessIndex be ? ToIndex(requestIndex).\n...\n5. If accessIndex \u2265 length, throw a RangeError exception.\n", "info": " |Atomics.notify( typedArray, index, count )\n\n2.Let i be ? ValidateAtomicAccess(typedArray, index).\n...\n2.Let accessIndex be ? ToIndex(requestIndex).\n...\n5. If accessIndex \u2265 length, throw a RangeError exception.\n", "features": ["Atomics", "SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/notify/symbol-for-index-throws.js", "esid": " sec-atomics.notify", "description": " >Return abrupt when ToInteger throws for 'index' argument to Atomics.notify\n", "info": " |Atomics.notify( typedArray, index, value, timeout )\n\n2. Let i be ? ValidateAtomicAccess(typedArray, index).\n\nValidateAtomicAccess( typedArray, requestIndex )\n\n2. Let accessIndex be ? ToIndex(requestIndex).\n\nToIndex ( value )\n\n2. Else,\na. Let integerIndex be ? ToInteger(value).\n\nToInteger(value)\n\n1. Let number be ? ToNumber(argument).\n\nSymbol --> Throw a TypeError exception.\n\n", "features": ["Atomics", "SharedArrayBuffer", "Symbol", "Symbol.toPrimitive", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/or/bigint/bad-range.js", "esid": " sec-atomics.or", "description": " >Test range checking of Atomics.or on arrays that allow atomic operations\n", "includes": ["testAtomics.js", "testBigIntTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "BigInt", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/or/bigint/good-views.js", "esid": " sec-atomics.or", "description": " Test Atomics.or on arrays that allow atomic operations", "includes": ["testAtomics.js", "testBigIntTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "BigInt", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/or/validate-arraytype-before-value-coercion.js", "esid": " sec-atomics.or", "description": " >TypedArray type is validated before `value` argument is coerced.\n", "info": " |24.4.8 Atomics.or ( typedArray, index, value )\n1. Return ? AtomicReadModifyWrite(typedArray, index, value, or).\n\n24.4.1.11 AtomicReadModifyWrite ( typedArray, index, value, op )\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray).\n...\n\n24.4.1.1 ValidateSharedIntegerTypedArray ( typedArray [ , onlyInt32 ] )\n...\n4. Let typeName be typedArray.[[TypedArrayName]].\n5. If onlyInt32 is true, then\na. If typeName is not \"Int32Array\", throw a TypeError exception.\n6. Else,\na. If typeName is not \"Int8Array\", \"Uint8Array\", \"Int16Array\", \"Uint16Array\", \"Int32Array\",\nor \"Uint32Array\", throw a TypeError exception.\n...\n", "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/store/bigint/bad-range.js", "esid": " sec-atomics.store", "description": " >Test range checking of Atomics.store on arrays that allow atomic operations\n", "includes": ["testAtomics.js", "testBigIntTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "BigInt", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/store/bigint/good-views.js", "esid": " sec-atomics.store", "description": " Test Atomics.store on arrays that allow atomic operations.", "includes": ["testAtomics.js", "testBigIntTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "BigInt", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/store/validate-arraytype-before-value-coercion.js", "esid": " sec-atomics.store", "description": " >TypedArray type is validated before `value` argument is coerced.\n", "info": " |24.4.9 Atomics.store ( typedArray, index, value )\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray).\n...\n\n24.4.1.1 ValidateSharedIntegerTypedArray ( typedArray [ , onlyInt32 ] )\n...\n4. Let typeName be typedArray.[[TypedArrayName]].\n5. If onlyInt32 is true, then\na. If typeName is not \"Int32Array\", throw a TypeError exception.\n6. Else,\na. If typeName is not \"Int8Array\", \"Uint8Array\", \"Int16Array\", \"Uint16Array\", \"Int32Array\",\nor \"Uint32Array\", throw a TypeError exception.\n...\n", "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/sub/bigint/bad-range.js", "esid": " sec-atomics.sub", "description": " >Test range checking of Atomics.sub on arrays that allow atomic operations\n", "includes": ["testAtomics.js", "testBigIntTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "BigInt", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/sub/bigint/good-views.js", "esid": " sec-atomics.sub", "description": " Test Atomics.sub on arrays that allow atomic operations", "includes": ["testAtomics.js", "testBigIntTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "BigInt", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/sub/validate-arraytype-before-value-coercion.js", "esid": " sec-atomics.sub", "description": " >TypedArray type is validated before `value` argument is coerced.\n", "info": " |24.4.10 Atomics.sub ( typedArray, index, value )\n1. Return ? AtomicReadModifyWrite(typedArray, index, value, sub).\n\n24.4.1.11 AtomicReadModifyWrite ( typedArray, index, value, op )\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray).\n...\n\n24.4.1.1 ValidateSharedIntegerTypedArray ( typedArray [ , onlyInt32 ] )\n...\n4. Let typeName be typedArray.[[TypedArrayName]].\n5. If onlyInt32 is true, then\na. If typeName is not \"Int32Array\", throw a TypeError exception.\n6. Else,\na. If typeName is not \"Int8Array\", \"Uint8Array\", \"Int16Array\", \"Uint16Array\", \"Int32Array\",\nor \"Uint32Array\", throw a TypeError exception.\n...\n", "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/wait/bigint/bad-range.js", "esid": " sec-atomics.wait", "description": " >Test range checking of Atomics.wait on arrays that allow atomic operations\n", "info": " |Atomics.wait( typedArray, index, value, timeout )\n\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray, true).\n...\n\n", "includes": ["testAtomics.js"], "features": ["ArrayBuffer", "Atomics", "BigInt", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/wait/bigint/false-for-timeout.js", "esid": " sec-atomics.wait", "description": " >False timeout arg should result in an +0 timeout\n", "info": " |Atomics.wait( typedArray, index, value, timeout )\n\n4. Let q be ? ToNumber(timeout).\n\nBoolean -> If argument is true, return 1. If argument is false, return +0.\n\n", "features": ["Atomics", "BigInt", "SharedArrayBuffer", "Symbol", "Symbol.toPrimitive", "TypedArray"], "flags": ["CanBlockIsTrue"]}, {"path": "./test262-main/test/built-ins/Atomics/wait/bigint/negative-index-throws.js", "esid": " sec-atomics.wait", "description": " >Throws a RangeError is index < 0\n", "info": " |Atomics.wait( typedArray, index, value, timeout )\n\n2.Let i be ? ValidateAtomicAccess(typedArray, index).\n...\n2.Let accessIndex be ? ToIndex(requestIndex).\n...\n2.b If integerIndex < 0, throw a RangeError exception\n", "features": ["Atomics", "BigInt", "SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/wait/bigint/negative-timeout.js", "esid": " sec-atomics.wait", "description": " >Test that Atomics.wait times out with a negative timeout\n", "features": ["Atomics", "BigInt", "SharedArrayBuffer", "TypedArray"], "flags": ["CanBlockIsTrue"]}, {"path": "./test262-main/test/built-ins/Atomics/wait/bigint/non-bigint64-typedarray-throws.js", "esid": " sec-validatesharedintegertypedarray", "description": " >Throws a TypeError if typedArray arg is not a BigInt64Array\n", "info": " |Atomics.wait( typedArray, index, value, timeout )\n\n1.Let buffer be ? ValidateSharedIntegerTypedArray(typedArray, true).\n...\n\n\nValidateSharedIntegerTypedArray(typedArray [ , waitable ] )\n\n...\n5. If waitable is true, then\na. If typeName is not \"BigInt64Array\",\nthrow a TypeError exception.\n\n", "features": ["Atomics", "BigInt", "SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/Atomics/wait/bigint/non-shared-bufferdata-throws.js", "esid": " sec-atomics.wait", "description": " >Throws a TypeError if typedArray.buffer is not a SharedArrayBuffer\n", "info": " |Atomics.wait( typedArray, index, value, timeout )\n\n1.Let buffer be ? ValidateSharedIntegerTypedArray(typedArray, true).\n...\n9.If IsSharedArrayBuffer(buffer) is false, throw a TypeError exception.\n...\n4.If bufferData is a Data Block, return false.\n", "features": ["ArrayBuffer", "Atomics", "BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/wait/bigint/out-of-range-index-throws.js", "esid": " sec-atomics.wait", "description": " >Throws a RangeError if value of index arg is out of range\n", "info": " |Atomics.wait( typedArray, index, value, timeout )\n\n2.Let i be ? ValidateAtomicAccess(typedArray, index).\n...\n2.Let accessIndex be ? ToIndex(requestIndex).\n...\n5. If accessIndex \u2265 length, throw a RangeError exception.\n", "features": ["Atomics", "BigInt", "SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/xor/bigint/bad-range.js", "esid": " sec-atomics.xor", "description": " >Test range checking of Atomics.xor on arrays that allow atomic operations\n", "includes": ["testAtomics.js", "testBigIntTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "BigInt", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/xor/bigint/good-views.js", "esid": " sec-atomics.xor", "description": " Test Atomics.xor on arrays that allow atomic operations", "includes": ["testAtomics.js", "testBigIntTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "BigInt", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/xor/validate-arraytype-before-value-coercion.js", "esid": " sec-atomics.xor", "description": " >TypedArray type is validated before `value` argument is coerced.\n", "info": " |24.4.13 Atomics.xor ( typedArray, index, value )\n1. Return ? AtomicReadModifyWrite(typedArray, index, value, xor).\n\n24.4.1.11 AtomicReadModifyWrite ( typedArray, index, value, op )\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray).\n...\n\n24.4.1.1 ValidateSharedIntegerTypedArray ( typedArray [ , onlyInt32 ] )\n...\n4. Let typeName be typedArray.[[TypedArrayName]].\n5. If onlyInt32 is true, then\na. If typeName is not \"Int32Array\", throw a TypeError exception.\n6. Else,\na. If typeName is not \"Int8Array\", \"Uint8Array\", \"Int16Array\", \"Uint16Array\", \"Int32Array\",\nor \"Uint32Array\", throw a TypeError exception.\n...\n", "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/BigInt/asIntN/arithmetic.js", "esid": " pending", "description": " BigInt.asIntN arithmetic test cases", "info": " |BigInt.asIntN ( bits, bigint )\n\n3. Let mod be a BigInt representing bigint modulo 2**bits.\n4. If mod \u2265 2**bits - 1, return mod - 2**bits; otherwise, return mod.\n\n", "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/BigInt/asIntN/asIntN.js", "esid": " pending", "description": " BigInt.asIntN property descriptor", "info": " |BigInt.asIntN ( bits, bigint )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"], "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/BigInt/asIntN/bigint-tobigint-errors.js", "description": " BigInt.asIntN type coercion for bigint parameter", "esid": " pending", "info": " |BigInt.asIntN ( bits, bigint )\n\n2. Let bigint ? ToBigInt(bigint).\n", "features": ["BigInt", "computed-property-names", "Symbol", "Symbol.toPrimitive"]}, {"path": "./test262-main/test/built-ins/BigInt/asIntN/bigint-tobigint-toprimitive.js", "description": " BigInt.asIntN type coercion for bigint parameter", "esid": " pending", "info": " |BigInt.asIntN ( bits, bigint )\n\n2. Let bigint ? ToBigInt(bigint).\n", "features": ["BigInt", "computed-property-names", "Symbol", "Symbol.toPrimitive"]}, {"path": "./test262-main/test/built-ins/BigInt/asIntN/bigint-tobigint-wrapped-values.js", "description": " BigInt.asIntN type coercion for bigint parameter", "esid": " pending", "info": " |BigInt.asIntN ( bits, bigint )\n\n2. Let bigint ? ToBigInt(bigint).\n", "features": ["BigInt", "computed-property-names", "Symbol", "Symbol.toPrimitive"]}, {"path": "./test262-main/test/built-ins/BigInt/asIntN/bigint-tobigint.js", "description": " BigInt.asIntN type coercion for bigint parameter", "esid": " pending", "info": " |BigInt.asIntN ( bits, bigint )\n\n2. Let bigint ? ToBigInt(bigint).\n", "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/BigInt/asIntN/bits-toindex-errors.js", "description": " BigInt.asIntN type coercion for bits parameter", "esid": " pending", "info": " |BigInt.asIntN ( bits, bigint )\n\n1. Let bits be ? ToIndex(bits).\n", "features": ["BigInt", "computed-property-names", "Symbol", "Symbol.toPrimitive"]}, {"path": "./test262-main/test/built-ins/BigInt/asIntN/bits-toindex-toprimitive.js", "description": " BigInt.asIntN type coercion for bits parameter", "esid": " pending", "info": " |BigInt.asIntN ( bits, bigint )\n\n1. Let bits be ? ToIndex(bits).\n", "features": ["BigInt", "computed-property-names", "Symbol", "Symbol.toPrimitive"]}, {"path": "./test262-main/test/built-ins/BigInt/asIntN/bits-toindex-wrapped-values.js", "description": " BigInt.asIntN type coercion for bits parameter", "esid": " pending", "info": " |BigInt.asIntN ( bits, bigint )\n\n1. Let bits be ? ToIndex(bits).\n", "features": ["BigInt", "computed-property-names", "Symbol", "Symbol.toPrimitive"]}, {"path": "./test262-main/test/built-ins/BigInt/asIntN/bits-toindex.js", "description": " BigInt.asIntN type coercion for bits parameter", "esid": " pending", "info": " |BigInt.asIntN ( bits, bigint )\n\n1. Let bits be ? ToIndex(bits).\n", "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/BigInt/asIntN/length.js", "esid": " pending", "description": " BigInt.asIntN.length descriptor", "info": " |BigInt.asIntN ( bits, bigint )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"], "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/BigInt/asIntN/name.js", "esid": " pending", "description": " BigInt.asIntN.name descriptor", "info": " |BigInt.asIntN ( bits, bigint )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"], "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/BigInt/asIntN/not-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >BigInt.asIntN does not implement [[Construct]], is not new-able\n", "info": " |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n", "includes": ["isConstructor.js"], "features": ["Reflect.construct", "BigInt", "arrow-function"]}, {"path": "./test262-main/test/built-ins/BigInt/asIntN/order-of-steps.js", "esid": " pending", "description": " BigInt.asIntN order of parameter type coercion", "info": " |BigInt.asIntN ( bits, bigint )\n\n1. Let bits be ? ToIndex(bits).\n2. Let bigint ? ToBigInt(bigint).\n\n", "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/BigInt/asUintN/arithmetic.js", "esid": " pending", "description": " BigInt.asUintN arithmetic test cases", "info": " |BigInt.asUintN ( bits, bigint )\n\n3. Return a BigInt representing bigint modulo 2**bits.\n\n", "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/BigInt/asUintN/asUintN.js", "esid": " pending", "description": " BigInt.asUintN property descriptor", "info": " |BigInt.asUintN ( bits, bigint )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"], "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/BigInt/asUintN/bigint-tobigint-errors.js", "description": " BigInt.asUintN type coercion for bigint parameter", "esid": " pending", "info": " |BigInt.asUintN ( bits, bigint )\n\n2. Let bigint ? ToBigInt(bigint).\n", "features": ["BigInt", "computed-property-names", "Symbol", "Symbol.toPrimitive"]}, {"path": "./test262-main/test/built-ins/BigInt/asUintN/bigint-tobigint-toprimitive.js", "description": " BigInt.asUintN type coercion for bigint parameter", "esid": " pending", "info": " |BigInt.asUintN ( bits, bigint )\n\n2. Let bigint ? ToBigInt(bigint).\n", "features": ["BigInt", "computed-property-names", "Symbol", "Symbol.toPrimitive"]}, {"path": "./test262-main/test/built-ins/BigInt/asUintN/bigint-tobigint-wrapped-values.js", "description": " BigInt.asUintN type coercion for bigint parameter", "esid": " pending", "info": " |BigInt.asUintN ( bits, bigint )\n\n2. Let bigint ? ToBigInt(bigint).\n", "features": ["BigInt", "computed-property-names", "Symbol", "Symbol.toPrimitive"]}, {"path": "./test262-main/test/built-ins/BigInt/asUintN/bigint-tobigint.js", "description": " BigInt.asUintN type coercion for bigint parameter", "esid": " pending", "info": " |BigInt.asUintN ( bits, bigint )\n\n2. Let bigint ? ToBigInt(bigint).\n", "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/BigInt/asUintN/bits-toindex-errors.js", "description": " BigInt.asUintN type coercion for bits parameter", "esid": " pending", "info": " |BigInt.asUintN ( bits, bigint )\n\n1. Let bits be ? ToIndex(bits).\n", "features": ["BigInt", "computed-property-names", "Symbol", "Symbol.toPrimitive"]}, {"path": "./test262-main/test/built-ins/BigInt/asUintN/bits-toindex-toprimitive.js", "description": " BigInt.asUintN type coercion for bits parameter", "esid": " pending", "info": " |BigInt.asUintN ( bits, bigint )\n\n1. Let bits be ? ToIndex(bits).\n", "features": ["BigInt", "computed-property-names", "Symbol", "Symbol.toPrimitive"]}, {"path": "./test262-main/test/built-ins/BigInt/asUintN/bits-toindex-wrapped-values.js", "description": " BigInt.asUintN type coercion for bits parameter", "esid": " pending", "info": " |BigInt.asUintN ( bits, bigint )\n\n1. Let bits be ? ToIndex(bits).\n", "features": ["BigInt", "computed-property-names", "Symbol", "Symbol.toPrimitive"]}, {"path": "./test262-main/test/built-ins/BigInt/asUintN/bits-toindex.js", "description": " BigInt.asUintN type coercion for bits parameter", "esid": " pending", "info": " |BigInt.asUintN ( bits, bigint )\n\n1. Let bits be ? ToIndex(bits).\n", "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/BigInt/asUintN/length.js", "esid": " pending", "description": " BigInt.asUintN.length descriptor", "info": " |BigInt.asUintN ( bits, bigint )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"], "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/BigInt/asUintN/name.js", "esid": " pending", "description": " BigInt.asUintN.name descriptor", "info": " |BigInt.asUintN ( bits, bigint )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"], "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/BigInt/asUintN/not-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >BigInt.asUintN does not implement [[Construct]], is not new-able\n", "info": " |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n", "includes": ["isConstructor.js"], "features": ["Reflect.construct", "BigInt", "arrow-function"]}, {"path": "./test262-main/test/built-ins/BigInt/asUintN/order-of-steps.js", "esid": " pending", "description": " BigInt.asUintN order of parameter type coercion", "info": " |BigInt.asUintN ( bits, bigint )\n\n1. Let bits be ? ToIndex(bits).\n2. Let bigint ? ToBigInt(bigint).\n\n", "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/BigInt/call-value-of-when-to-string-present.js", "description": " ToPrimitive receives \"hint Number\" as parameter, then valueOf needs to be called", "esid": " sec-bigint-constructor-number-value", "info": " |1. If NewTarget is not undefined, throw a TypeError exception.\n2. Let prim be ? ToPrimitive(value, hint Number).\n...\n", "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/BigInt/constructor-empty-string.js", "description": " Empty String should in BigInt should result into 0n", "esid": " sec-string-to-bigint", "info": " |ToBigInt ( argument )\n\nString:\n\nLet n be StringToBigInt(prim).\nIf n is NaN, throw a SyntaxError exception.\nReturn n.\n\nStringToBigInt ( argument )\n\nReplace the StrUnsignedDecimalLiteral production with DecimalDigits to not allow Infinity, decimal points, or exponents.\n\n", "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/BigInt/constructor-from-binary-string.js", "description": " String should be parsed to BigInt according StringToBigInt", "esid": " sec-string-to-bigint", "info": " |ToBigInt ( argument )\n\nString:\n\nLet n be StringToBigInt(prim).\nIf n is NaN, throw a SyntaxError exception.\nReturn n.\n\nStringToBigInt ( argument )\n\nReplace the StrUnsignedDecimalLiteral production with DecimalDigits to not allow Infinity, decimal points, or exponents.\n\n", "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/BigInt/constructor-from-decimal-string.js", "description": " String should be parsed to BigInt according StringToBigInt", "esid": " sec-string-to-bigint", "info": " |ToBigInt ( argument )\n\nString:\n\nLet n be StringToBigInt(prim).\nIf n is NaN, throw a SyntaxError exception.\nReturn n.\n\nStringToBigInt ( argument )\n\nReplace the StrUnsignedDecimalLiteral production with DecimalDigits to not allow Infinity, decimal points, or exponents.\n\n", "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/BigInt/constructor-from-hex-string.js", "description": " Hexdecimal prefixed String should be parsed to BigInt according StringToBigInt", "esid": " sec-string-to-bigint", "info": " |ToBigInt ( argument )\n\nString:\n\nLet n be StringToBigInt(prim).\nIf n is NaN, throw a SyntaxError exception.\nReturn n.\n\nStringToBigInt ( argument )\n\nReplace the StrUnsignedDecimalLiteral production with DecimalDigits to not allow Infinity, decimal points, or exponents.\n\n", "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/BigInt/constructor-from-octal-string.js", "description": " Octal prefixed String should be parsed to BigInt according StringToBigInt", "esid": " sec-string-to-bigint", "info": " |ToBigInt ( argument )\n\nString:\n\nLet n be StringToBigInt(prim).\nIf n is NaN, throw a SyntaxError exception.\nReturn n.\n\nStringToBigInt ( argument )\n\nReplace the StrUnsignedDecimalLiteral production with DecimalDigits to not allow Infinity, decimal points, or exponents.\n\n", "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/BigInt/constructor-from-string-syntax-errors.js", "description": " Invalid String into BigInt constructor should throw SyntaxError", "esid": " sec-string-to-bigint", "info": " |ToBigInt ( argument )\n\nString:\n\nLet n be StringToBigInt(prim).\nIf n is NaN, throw a SyntaxError exception.\nReturn n.\n\nStringToBigInt ( argument )\n\nReplace the StrUnsignedDecimalLiteral production with DecimalDigits to not allow Infinity, decimal points, or exponents.\n\n", "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/BigInt/constructor-integer.js", "description": " BigInt constructor called with integer argument", "esid": " sec-bigint-constructor-number-value", "info": " |BigInt ( value )\n\n...\n3. If Type(prim) is Number, return ? NumberToBigInt(prim).\n\nNumberToBigInt ( number )\n\n...\n3. Return a BigInt representing the mathematical value of number.\n", "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/BigInt/constructor-trailing-leading-spaces.js", "description": " Trailing/Leading spaces should be ignored in BigInt constructor", "esid": " sec-string-to-bigint", "info": " |ToBigInt ( argument )\n\nString:\n\nLet n be StringToBigInt(prim).\nIf n is NaN, throw a SyntaxError exception.\nReturn n.\n\nStringToBigInt ( argument )\n\nReplace the StrUnsignedDecimalLiteral production with DecimalDigits to not allow Infinity, decimal points, or exponents.\n\n\n", "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/BigInt/infinity-throws-rangeerror.js", "description": " BigInt throws a RangeError if value is Infinity", "esid": " sec-bigint-constructor", "info": " |BigInt ( value )\n\n...\n2. Let prim be ? ToPrimitive(value, hint Number).\n3. If Type(prim) is Number, return ? NumberToBigInt(prim).\n...\n\nNumberToBigInt ( number )\n\n...\n2. If IsSafeInteger(number) is false, throw a RangeError exception.\n...\n\nIsSafeInteger ( number )\n\n...\n2. If number is NaN, +\u221e, or -\u221e, return false.\n", "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/BigInt/is-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >BigInt is a constructor, and does implement [[Construct]], but is not new target\n", "info": " |sec-bigint-constructor\n\n- is not intended to be used with the new operator or to be subclassed. It may be used as the value of an extends clause of a class definition but a super call to the BigInt constructor will cause an exception.\n\nsec-bigint-constructor-number-value\n\n1. If NewTarget is not undefined, throw a TypeError exception.\n", "includes": ["isConstructor.js"], "features": ["BigInt", "Reflect.construct", "arrow-function"]}, {"path": "./test262-main/test/built-ins/BigInt/length.js", "esid": " sec-bigint-constructor-number-value", "description": " BigInt.length property descriptor", "info": " |BigInt ( value )\n\n17 ECMAScript Standard Built-in Objects\n\nEvery built-in function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description. Optional parameters\n(which are indicated with brackets: [ ]) or rest parameters (which\nare shown using the form \u00ab...name\u00bb) are not included in the default\nargument count.\n\nUnless otherwise specified, the length property of a built-in\nfunction object has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/BigInt/name.js", "esid": " sec-bigint-constructor-number-value", "description": " BigInt.name property descriptor", "info": " |BigInt ( value )\n\n17 ECMAScript Standard Built-in Objects\n\nEvery built-in function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String. Unless otherwise specified, this value is the name that\nis given to the function in this specification. For functions that\nare specified as properties of objects, the name value is the\nproperty name string used to access the function. [...]\n\nUnless otherwise specified, the name property of a built-in function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/BigInt/nan-throws-rangeerror.js", "description": " BigInt throws a RangeError if value is NaN", "esid": " sec-bigint-constructor", "info": " |BigInt ( value )\n\n...\n2. Let prim be ? ToPrimitive(value, hint Number).\n3. If Type(prim) is Number, return ? NumberToBigInt(prim).\n...\n\nNumberToBigInt ( number )\n\n...\n2. If IsSafeInteger(number) is false, throw a RangeError exception.\n...\n\nIsSafeInteger ( number )\n\n...\n2. If number is NaN, +\u221e, or -\u221e, return false.\n", "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/BigInt/negative-infinity-throws.rangeerror.js", "description": " BigInt throws a RangeError if value is Infinity", "esid": " sec-bigint-constructor", "info": " |BigInt ( value )\n\n...\n2. Let prim be ? ToPrimitive(value, hint Number).\n3. If Type(prim) is Number, return ? NumberToBigInt(prim).\n...\n\nNumberToBigInt ( number )\n\n...\n2. If IsSafeInteger(number) is false, throw a RangeError exception.\n...\n\nIsSafeInteger ( number )\n\n...\n2. If number is NaN, +\u221e, or -\u221e, return false.\n", "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/BigInt/non-integer-rangeerror.js", "description": " Non integer number values will throw a RangeError", "esid": " sec-bigint-constructor", "info": " |BigInt ( value )\n\n...\n2. Let prim be ? ToPrimitive(value, hint Number).\n3. If Type(prim) is Number, return ? NumberToBigInt(prim).\n...\n\nNumberToBigInt ( number )\n\n...\n2. If IsSafeInteger(number) is false, throw a RangeError exception.\n...\n\nIsSafeInteger ( number )\n\n...\n2. If number is NaN, +\u221e, or -\u221e, return false.\n3. Let integer be ToInteger(number).\n4. If integer is not equal to number, return false.\n...\n", "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/BigInt/parseInt/nonexistent.js", "description": " BigInt does not have a static parseInt function", "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/BigInt/prop-desc.js", "esid": " sec-bigint-constructor", "description": " >Property descriptor of BigInt\n", "info": " |The BigInt Object\n\nECMAScript Standard Built-in Objects:\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2\nhas the attributes { [[Writable]]: true, [[Enumerable]]: false,\n[[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js"], "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/BigInt/proto.js", "description": " The prototype of BigInt constructor is Function.prototype", "esid": " sec-properties-of-the-bigint-constructor", "info": " |The value of the [[Prototype]] internal slot of the BigInt constructor is the\nintrinsic object %FunctionPrototype%.\n", "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/BigInt/prototype/Symbol.toStringTag.js", "esid": " sec-bigint-@@tostringtag", "description": " >`Symbol.toStringTag` property descriptor\n", "info": " |The initial value of the @@toStringTag property is the String value\n\"BigInt\".\n\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]:\nfalse, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["BigInt", "Symbol", "Symbol.toStringTag"]}, {"path": "./test262-main/test/built-ins/BigInt/prototype/constructor.js", "esid": " sec-bigint.prototype.constructor", "description": " BigInt.prototype.constructor property descriptor", "info": " |BigInt.prototype.constructor\n\nThe initial value of BigInt.prototype.constructor is the intrinsic\nobject %BigInt%.\n\nThe BigInt Constructor\n\nThe BigInt constructor is the %BigInt% intrinsic object and the\ninitial value of the BigInt property of the global object. When BigInt\nis called as a function, it performs a type conversion.\n\n17 ECMAScript Standard Built-in Objects\n", "includes": ["propertyHelper.js"], "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/BigInt/prototype/prop-desc.js", "description": " The property descriptor BigInt.prototype", "esid": " sec-bigint.prototype", "info": " |This property has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: false }.\n", "features": ["BigInt"], "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/BigInt/prototype/proto.js", "description": " The prototype of BigInt.prototype is Object.prototype", "esid": " sec-properties-of-the-bigint-prototype-object", "info": " |The value of the [[Prototype]] internal slot of the BigInt prototype object\nis the intrinsic object %ObjectPrototype%.\n", "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/BigInt/prototype/toLocaleString/not-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >BigInt.prototype.toLocaleString does not implement [[Construct]], is not new-able\n", "info": " |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n", "includes": ["isConstructor.js"], "features": ["Reflect.construct", "BigInt", "arrow-function"]}, {"path": "./test262-main/test/built-ins/BigInt/prototype/toString/a-z.js", "esid": " sec-bigint.prototype.tostring", "description": " >Letters a-z are used for digits with values 10 through 35\n", "info": " |6. Return the String representation of this Number value using\nthe radix specified by radixNumber. Letters a-z are used for\ndigits with values 10 through 35. The precise algorithm is\nimplementation-dependent, however the algorithm should be a\ngeneralization of that specified in 6.1.6.2.23.\n", "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/BigInt/prototype/toString/default-radix.js", "esid": " sec-bigint.prototype.tostring", "description": " toString with default radix", "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/BigInt/prototype/toString/length.js", "esid": " sec-bigint.prototype.tostring", "description": " BigInt.prototype.toString.length property descriptor", "info": " |BigInt.prototype.toString ( [ radix ] )\n\n17 ECMAScript Standard Built-in Objects\n", "includes": ["propertyHelper.js"], "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/BigInt/prototype/toString/name.js", "esid": " sec-bigint.prototype.tostring", "description": " BigInt.prototype.toString.name property descriptor", "info": " |BigInt.prototype.toString ( [ radix ] )\n\n17 ECMAScript Standard Built-in Objects\n", "includes": ["propertyHelper.js"], "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/BigInt/prototype/toString/not-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >BigInt.prototype.toString does not implement [[Construct]], is not new-able\n", "info": " |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n", "includes": ["isConstructor.js"], "features": ["Reflect.construct", "BigInt", "arrow-function"]}, {"path": "./test262-main/test/built-ins/BigInt/prototype/toString/prop-desc.js", "esid": " sec-bigint.prototype.tostring", "description": " BigInt.prototype.toString property descriptor", "info": " |BigInt.prototype.toString ( [ radix ] )\n\n17 ECMAScript Standard Built-in Objects\n", "includes": ["propertyHelper.js"], "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/BigInt/prototype/toString/prototype-call.js", "esid": " sec-bigint.prototype.tostring", "description": " Direct toString on BigInt prototype", "info": " |BigInt.prototype.toString ( [ radix ] )\n\nLet x be ? thisBigIntValue(this value).\n\nProperties of the BigInt Prototype Object\n\nThe BigInt prototype is not a BigInt object; it does not have a\n[[BigIntData]] internal slot.\n", "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/BigInt/prototype/toString/radix-2-to-36.js", "esid": " sec-bigint.prototype.tostring", "description": " toString with radix between 2 and 36", "info": " |BigInt.prototype.toString ( [ radix ] )\n\n[...]\n6. If radixNumber = 10, return ! ToString(x).\n7. Return the String representation of this Number value using the\nradix specified by radixNumber. Letters a-z are used for digits\nwith values 10 through 35. The precise algorithm is\nimplementation-dependent, however the algorithm should be a\ngeneralization of that specified in 3.1.4.1.\n", "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/BigInt/prototype/toString/radix-err.js", "esid": " sec-bigint.prototype.tostring", "description": " toString with invalid radix", "info": " |BigInt.prototype.toString ( [ radix ] )\n\n[...]\n4. Else, let radixNumber be ? ToInteger(radix).\n5. If radixNumber < 2 or radixNumber > 36, throw a RangeError\nexception.\n", "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/BigInt/prototype/toString/string-is-code-units-of-decimal-digits-only.js", "esid": " sec-tostring-applied-to-the-bigint-type", "description": " BigInt .toString() returns only decimal digits, does not include BigIntLiteralSuffix", "info": " |ToString Applied to the BigInt Type\n\nThe abstract operation ToString converts a BigInt i to String format as follows:\n\n...\nReturn the String consisting of the code units of the digits of the decimal representation of i.\n\n", "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/BigInt/prototype/toString/thisbigintvalue-not-valid-throws.js", "esid": " sec-bigint.prototype.tostring", "description": " Throws a TypeError if the this value is not a BigInt", "info": " |BigInt.prototype.toString ( [ radix ] )\n\n1. Let x be ? thisBigIntValue(this value).\n...\n\nThe abstract operation thisBigIntValue(value) performs the following steps:\n\n1. If Type(value) is BigInt, return value.\n2. If Type(value) is Object and value has a [[BigIntData]] internal slot, then\n...\n3. Throw a TypeError exception.\n", "features": ["BigInt", "Symbol", "Symbol.toPrimitive"]}, {"path": "./test262-main/test/built-ins/BigInt/prototype/valueOf/length.js", "esid": " sec-bigint.prototype.valueof", "description": " BigInt.prototype.valueOf.length property descriptor", "info": " |BigInt.prototype.valueOf ( )\n\n17 ECMAScript Standard Built-in Objects\n", "includes": ["propertyHelper.js"], "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/BigInt/prototype/valueOf/name.js", "esid": " sec-bigint.prototype.valueof", "description": " BigInt.prototype.valueOf.name property descriptor", "info": " |BigInt.prototype.valueOf ( )\n\n17 ECMAScript Standard Built-in Objects\n", "includes": ["propertyHelper.js"], "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/BigInt/prototype/valueOf/not-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >BigInt.prototype.valueOf does not implement [[Construct]], is not new-able\n", "info": " |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n", "includes": ["isConstructor.js"], "features": ["Reflect.construct", "BigInt", "arrow-function"]}, {"path": "./test262-main/test/built-ins/BigInt/prototype/valueOf/prop-desc.js", "esid": " sec-bigint.prototype.valueof", "description": " BigInt.prototype.valueOf property descriptor", "info": " |BigInt.prototype.valueOf ( )\n\n17 ECMAScript Standard Built-in Objects\n", "includes": ["propertyHelper.js"], "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/BigInt/prototype/valueOf/return.js", "esid": " sec-bigint.prototype.valueof", "description": " >BigInt.prototype.valueOf returns the primitive BigInt value.\n", "info": " |BigInt.prototype.valueOf ( )\n\nReturn ? thisBigIntValue(this value).\n", "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/BigInt/prototype/valueOf/this-value-invalid-object-throws.js", "esid": " sec-bigint.prototype.valueof", "description": " >Throws a TypeError if this is an Object without a [[BigIntData]] internal.\n", "info": " |BigInt.prototype.valueOf ( )\n\n1. Return ? thisBigIntValue(this value).\n\nThe abstract operation thisBigIntValue(value) performs the following steps:\n\n1. If Type(value) is BigInt, return value.\n2. If Type(value) is Object and value has a [[BigIntData]] internal slot, then\n...\n3. Throw a TypeError exception.\n", "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/BigInt/prototype/valueOf/this-value-invalid-primitive-throws.js", "esid": " sec-bigint.prototype.valueof", "description": " >Throws a TypeError if this is not a BigInt neither an Object.\n", "info": " |BigInt.prototype.valueOf ( )\n\n1. Return ? thisBigIntValue(this value).\n\nThe abstract operation thisBigIntValue(value) performs the following steps:\n\n1. If Type(value) is BigInt, return value.\n2. If Type(value) is Object and value has a [[BigIntData]] internal slot, then\n...\n3. Throw a TypeError exception.\n", "features": ["BigInt", "Symbol"]}, {"path": "./test262-main/test/built-ins/BigInt/tostring-throws.js", "description": " Throws exception in BigIntConstructor if toString throws", "esid": " sec-bigint-constructor-number-value", "info": " |1. If NewTarget is not undefined, throw a TypeError exception.\n2. Let prim be ? ToPrimitive(value, hint Number).\n3. If Type(prim) is Number, return ? NumberToBigInt(prim).\n4. Otherwise, return ? ToBigInt(value).\n", "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/BigInt/valueof-throws.js", "description": " Throws exception in BigIntConstructor if valueOf throws", "esid": " sec-bigint-constructor-number-value", "info": " |1. If NewTarget is not undefined, throw a TypeError exception.\n2. Let prim be ? ToPrimitive(value, hint Number).\n3. If Type(prim) is Number, return ? NumberToBigInt(prim).\n4. Otherwise, return ? ToBigInt(value).\n", "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/DataView/length.js", "esid": " sec-dataview-constructor", "description": " >The length property of DataView has the default value of 1\n", "info": " |DataView ( buffer [ , byteOffset [ , byteLength ] ] )\n\nECMAScript Standard Built-in Objects:\n\nEvery built-in function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description. Optional parameters\n(which are indicated with brackets: [ ]) or rest parameters (which\nare shown using the form \u00ab...name\u00bb) are not included in the default\nargument count.\n\nUnless otherwise specified, the length property of a built-in function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["DataView"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getBigInt64/index-is-out-of-range.js", "esid": " sec-dataview.prototype.getbigint64", "description": " >Throws a RangeError if getIndex + elementSize > viewSize\n", "info": " |DataView.prototype.getBigInt64 ( byteOffset [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be undefined.\n3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Int64\").\n\n24.3.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\n\n...\n10. Let viewOffset be the value of view's [[ByteOffset]] internal slot.\n11. Let viewSize be the value of view's [[ByteLength]] internal slot.\n12. Let elementSize be the Number value of the Element Size value specified in\nTable 50 for Element Type type.\n13. If getIndex + elementSize > viewSize, throw a RangeError exception.\n...\n", "features": ["DataView", "ArrayBuffer", "BigInt", "arrow-function"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getBigInt64/length.js", "esid": " sec-dataview.prototype.getbigint64", "description": " DataView.prototype.getBigInt64.length property descriptor", "info": " |DataView.prototype.getBigInt64 ( byteOffset [ , littleEndian ] )\n\n17 ECMAScript Standard Built-in Objects\n\nEvery built-in function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description. Optional parameters\n(which are indicated with brackets: [ ]) or rest parameters (which\nare shown using the form \u00ab...name\u00bb) are not included in the default\nargument count.\n\nUnless otherwise specified, the length property of a built-in\nfunction object has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["DataView", "ArrayBuffer", "BigInt"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getBigInt64/name.js", "esid": " sec-dataview.prototype.getbigint64", "description": " DataView.prototype.getBigInt64.name property descriptor", "info": " |DataView.prototype.getBigInt64 ( byteOffset [ , littleEndian ] )\n\n17 ECMAScript Standard Built-in Objects\n\nEvery built-in function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String. Unless otherwise specified, this value is the name that\nis given to the function in this specification. For functions that\nare specified as properties of objects, the name value is the\nproperty name string used to access the function. [...]\n\nUnless otherwise specified, the name property of a built-in function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["DataView", "ArrayBuffer", "BigInt"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getBigInt64/negative-byteoffset-throws.js", "esid": " sec-dataview.prototype.getbigint64", "description": " >Throws a RangeError if getIndex < 0\n", "info": " |DataView.prototype.getBigInt64 ( byteOffset [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be undefined.\n3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Int64\").\n\n24.3.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\n\n...\n4. Let getIndex be ? ToIndex(requestIndex).\n...\n", "features": ["DataView", "ArrayBuffer", "BigInt", "arrow-function"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getBigInt64/return-abrupt-from-tonumber-byteoffset.js", "esid": " sec-dataview.prototype.getbigint64", "description": " >Return abrupt from ToNumber(byteOffset)\n", "info": " |DataView.prototype.getBigInt64 ( byteOffset [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be undefined.\n3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Int64\").\n\n24.3.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\n\n...\n4. Let getIndex be ? ToNumber(requestIndex).\n...\n", "features": ["DataView", "ArrayBuffer", "BigInt", "arrow-function"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getBigInt64/return-value-clean-arraybuffer.js", "esid": " sec-dataview.prototype.getbigint64", "description": " >Return value from Buffer using a clean ArrayBuffer\n", "info": " |DataView.prototype.getBigInt64 ( byteOffset [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be undefined.\n3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Int64\").\n\n24.3.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\n\n...\n12. Let bufferIndex be getIndex + viewOffset.\n13. Return GetValueFromBuffer(buffer, bufferIndex, type, false,\n\"Unordered\", isLittleEndian).\n\n24.1.1.6 GetValueFromBuffer ( arrayBuffer, byteIndex, type,\nisTypedArray, order [ , isLittleEndian ] )\n\n...\n9. Return RawBytesToNumber(type, rawValue, isLittleEndian).\n\n24.1.1.5 RawBytesToNumber( type, rawBytes, isLittleEndian )\n\n...\n2. If isLittleEndian is false, reverse the order of the elements of rawBytes.\n...\n", "features": ["DataView", "ArrayBuffer", "BigInt"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getBigInt64/return-values-custom-offset.js", "esid": " sec-dataview.prototype.getbigint64", "description": " >Return values from Buffer using a custom offset\n", "info": " |DataView.prototype.getBigInt64 ( byteOffset [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be undefined.\n3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Int64\").\n\n24.3.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\n\n...\n12. Let bufferIndex be getIndex + viewOffset.\n13. Return GetValueFromBuffer(buffer, bufferIndex, type, false,\n\"Unordered\", isLittleEndian).\n\n24.1.1.6 GetValueFromBuffer ( arrayBuffer, byteIndex, type,\nisTypedArray, order [ , isLittleEndian ] )\n\n...\n9. Return RawBytesToNumber(type, rawValue, isLittleEndian).\n\n24.1.1.5 RawBytesToNumber( type, rawBytes, isLittleEndian )\n\n...\n2. If isLittleEndian is false, reverse the order of the elements of rawBytes.\n...\n", "features": ["DataView", "ArrayBuffer", "DataView.prototype.setUint8", "BigInt"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getBigInt64/return-values.js", "esid": " sec-dataview.prototype.getbigint64", "description": " >Return values from Buffer\n", "info": " |DataView.prototype.getBigInt64 ( byteOffset [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be undefined.\n3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Int64\").\n\n24.3.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\n\n...\n14. Let bufferIndex be getIndex + viewOffset.\n15. Return GetValueFromBuffer(buffer, bufferIndex, type, isLittleEndian).\n...\n\n24.1.1.6 GetValueFromBuffer ( arrayBuffer, byteIndex, type [ , isLittleEndian\n] )\n\n...\n8. If isLittleEndian is false, reverse the order of the elements of rawValue.\n...\n", "features": ["DataView", "ArrayBuffer", "DataView.prototype.setUint8", "BigInt"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getBigInt64/to-boolean-littleendian.js", "description": " Boolean littleEndian argument coerced in ToBoolean", "esid": " sec-dataview.prototype.getbigint64", "info": " |DataView.prototype.getBigInt64 ( byteOffset [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be undefined.\n3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Int64\").\n\n24.3.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\n\n...\n5. Set isLittleEndian to ToBoolean(isLittleEndian).\n...\n12. Let bufferIndex be getIndex + viewOffset.\n13. Return GetValueFromBuffer(buffer, bufferIndex, type, false,\n\"Unordered\", isLittleEndian).\n\n24.1.1.6 GetValueFromBuffer ( arrayBuffer, byteIndex, type,\nisTypedArray, order [ , isLittleEndian ] )\n\n...\n9. Return RawBytesToNumber(type, rawValue, isLittleEndian).\n\n24.1.1.5 RawBytesToNumber( type, rawBytes, isLittleEndian )\n\n...\n2. If isLittleEndian is false, reverse the order of the elements of rawBytes.\n...\n", "features": ["ArrayBuffer", "BigInt", "DataView", "DataView.prototype.setUint8", "Symbol"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getBigInt64/toindex-byteoffset-errors.js", "description": " ToIndex conversions on byteOffset", "esid": " sec-dataview.prototype.getbigint64", "info": " |DataView.prototype.getBigInt64 ( byteOffset [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be undefined.\n3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Int64\").\n\n24.3.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\n\n...\n4. Let getIndex be ? ToIndex(requestIndex).\n...\n", "features": ["ArrayBuffer", "BigInt", "DataView", "DataView.prototype.setUint8", "Symbol", "Symbol.toPrimitive", "computed-property-names"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getBigInt64/toindex-byteoffset-toprimitive.js", "description": " ToIndex conversions on byteOffset", "esid": " sec-dataview.prototype.getbigint64", "info": " |DataView.prototype.getBigInt64 ( byteOffset [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be undefined.\n3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Int64\").\n\n24.3.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\n\n...\n4. Let getIndex be ? ToIndex(requestIndex).\n...\n", "features": ["ArrayBuffer", "BigInt", "DataView", "DataView.prototype.setUint8", "Symbol.toPrimitive", "computed-property-names"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getBigInt64/toindex-byteoffset-wrapped-values.js", "description": " ToIndex conversions on byteOffset", "esid": " sec-dataview.prototype.getbigint64", "info": " |DataView.prototype.getBigInt64 ( byteOffset [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be undefined.\n3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Int64\").\n\n24.3.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\n\n...\n4. Let getIndex be ? ToIndex(requestIndex).\n...\n", "features": ["ArrayBuffer", "BigInt", "DataView", "DataView.prototype.setUint8", "Symbol.toPrimitive", "computed-property-names"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getBigInt64/toindex-byteoffset.js", "description": " ToIndex conversions on byteOffset", "esid": " sec-dataview.prototype.getbigint64", "info": " |DataView.prototype.getBigInt64 ( byteOffset [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be undefined.\n3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Int64\").\n\n24.3.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\n\n...\n4. Let getIndex be ? ToIndex(requestIndex).\n...\n", "features": ["ArrayBuffer", "BigInt", "DataView", "DataView.prototype.setUint8"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getBigUint64/index-is-out-of-range.js", "esid": " sec-dataview.prototype.getbiguint64", "description": " >Throws a RangeError if getIndex + elementSize > viewSize\n", "features": ["DataView", "ArrayBuffer", "BigInt", "arrow-function"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getBigUint64/length.js", "esid": " sec-dataview.prototype.getbiguint64", "description": " DataView.prototype.getBigUint64.length property descriptor", "includes": ["propertyHelper.js"], "features": ["DataView", "ArrayBuffer", "BigInt"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getBigUint64/name.js", "esid": " sec-dataview.prototype.getbiguint64", "description": " DataView.prototype.getBigUint64.name property descriptor", "includes": ["propertyHelper.js"], "features": ["DataView", "ArrayBuffer", "BigInt"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getBigUint64/negative-byteoffset-throws.js", "esid": " sec-dataview.prototype.getbiguint64", "description": " >Throws a RangeError if getIndex < 0\n", "features": ["DataView", "ArrayBuffer", "BigInt", "arrow-function"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getBigUint64/return-abrupt-from-tonumber-byteoffset.js", "esid": " sec-dataview.prototype.getbiguint64", "description": " >Return abrupt from ToNumber(byteOffset)\n", "features": ["DataView", "ArrayBuffer", "BigInt", "arrow-function"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getBigUint64/return-value-clean-arraybuffer.js", "esid": " sec-dataview.prototype.getbiguint64", "description": " >Return value from Buffer using a clean ArrayBuffer\n", "features": ["DataView", "ArrayBuffer", "BigInt"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getBigUint64/return-values-custom-offset.js", "esid": " sec-dataview.prototype.getbiguint64", "description": " >Return values from Buffer using a custom offset\n", "features": ["DataView", "ArrayBuffer", "DataView.prototype.setUint8", "BigInt"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getBigUint64/return-values.js", "esid": " sec-dataview.prototype.getbiguint64", "description": " >Return values from Buffer\n", "features": ["DataView", "ArrayBuffer", "DataView.prototype.setUint8", "BigInt"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getBigUint64/to-boolean-littleendian.js", "description": " Boolean littleEndian argument coerced in ToBoolean", "esid": " sec-dataview.prototype.getbiguint64", "features": ["ArrayBuffer", "BigInt", "DataView", "DataView.prototype.setUint8", "Symbol"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getBigUint64/toindex-byteoffset-errors.js", "description": " ToIndex conversions on byteOffset", "esid": " sec-dataview.prototype.getbiguint64", "features": ["ArrayBuffer", "BigInt", "DataView", "DataView.prototype.setUint8", "Symbol", "Symbol.toPrimitive", "computed-property-names"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getBigUint64/toindex-byteoffset-toprimitive.js", "description": " ToIndex conversions on byteOffset", "esid": " sec-dataview.prototype.getbiguint64", "features": ["ArrayBuffer", "BigInt", "DataView", "DataView.prototype.setUint8", "Symbol.toPrimitive", "computed-property-names"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getBigUint64/toindex-byteoffset-wrapped-values.js", "description": " ToIndex conversions on byteOffset", "esid": " sec-dataview.prototype.getbiguint64", "features": ["ArrayBuffer", "BigInt", "DataView", "DataView.prototype.setUint8", "Symbol.toPrimitive", "computed-property-names"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getBigUint64/toindex-byteoffset.js", "description": " ToIndex conversions on byteOffset", "esid": " sec-dataview.prototype.getbiguint64", "features": ["ArrayBuffer", "BigInt", "DataView", "DataView.prototype.setUint8"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/setBigInt64/index-check-before-value-conversion.js", "esid": " sec-dataview.prototype.setbigint64", "description": " >RangeError exception for negative or non-integral index is thrown before\nthe value conversion.\n", "features": ["DataView", "ArrayBuffer", "BigInt"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/setBigInt64/index-is-out-of-range.js", "esid": " sec-dataview.prototype.setbigint64", "description": " >Throws a RangeError if getIndex + elementSize > viewSize\n", "features": ["DataView", "ArrayBuffer", "BigInt"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/setBigInt64/length.js", "esid": " sec-dataview.prototype.setbigint64", "description": " DataView.prototype.setBigInt64.length property descriptor", "includes": ["propertyHelper.js"], "features": ["DataView", "ArrayBuffer", "BigInt"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/setBigInt64/name.js", "esid": " sec-dataview.prototype.setbigint64", "description": " DataView.prototype.setBigInt64.name property descriptor", "includes": ["propertyHelper.js"], "features": ["DataView", "ArrayBuffer", "BigInt"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/setBigInt64/negative-byteoffset-throws.js", "esid": " sec-dataview.prototype.setbigint64", "description": " >Throws a RangeError if getIndex < 0\n", "features": ["DataView", "ArrayBuffer", "BigInt"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/setBigInt64/range-check-after-value-conversion.js", "esid": " sec-dataview.prototype.setbigint64", "description": " >Index bounds checks are performed after value conversion.\n", "features": ["DataView", "ArrayBuffer", "BigInt"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/setBigInt64/return-abrupt-from-tobigint-value.js", "esid": " sec-dataview.prototype.setbigint64", "description": " >Return abrupt from ToBigInt(value)\n", "features": ["DataView", "ArrayBuffer", "BigInt"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/setBigInt64/return-abrupt-from-tonumber-byteoffset-symbol.js", "esid": " sec-dataview.prototype.setbigint64", "description": " >Return abrupt from ToNumber(symbol byteOffset)\n", "features": ["DataView", "ArrayBuffer", "Symbol", "BigInt"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/setBigInt64/return-abrupt-from-tonumber-byteoffset.js", "esid": " sec-dataview.prototype.setbigint64", "description": " >Return abrupt from ToNumber(byteOffset)\n", "features": ["DataView", "ArrayBuffer", "BigInt"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/setBigInt64/set-values-little-endian-order.js", "esid": " sec-dataview.prototype.setbigint64", "description": " >Set values on the little endian order\n", "features": ["DataView", "ArrayBuffer", "BigInt"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/setBigInt64/set-values-return-undefined.js", "esid": " sec-dataview.prototype.setbigint64", "description": " >Set values and return undefined\n", "includes": ["byteConversionValues.js"], "features": ["DataView", "ArrayBuffer", "BigInt", "arrow-function"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/setBigInt64/to-boolean-littleendian.js", "esid": " sec-dataview.prototype.setbigint64", "description": " >Boolean littleEndian argument coerced in ToBoolean\n", "features": ["DataView", "ArrayBuffer", "Symbol", "BigInt"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/setBigInt64/toindex-byteoffset.js", "esid": " sec-dataview.prototype.setbigint64", "description": " >ToIndex conversions on byteOffset\n", "features": ["DataView", "ArrayBuffer", "BigInt"]}, {"path": "./test262-main/test/built-ins/Function/internals/Construct/base-ctor-revoked-proxy.js", "esid": " sec-ecmascript-function-objects-construct-argumentslist-newtarget", "description": " Error retrieving function realm from revoked Proxy exotic object", "info": " |[...]\n5. If kind is \"base\", then\na. Let thisArgument be ? OrdinaryCreateFromConstructor(newTarget,\n\"%ObjectPrototype%\").\n[...]\n\n9.1.13 OrdinaryCreateFromConstructor\n\n[...]\n2. Let proto be ? GetPrototypeFromConstructor(constructor,\nintrinsicDefaultProto).\n[...]\n\n9.1.14 GetPrototypeFromConstructor\n\n[...]\n3. Let proto be ? Get(constructor, \"prototype\").\n4. If Type(proto) is not Object, then\na. Let realm be ? GetFunctionRealm(constructor).\n\n7.3.22 GetFunctionRealm\n\n[...]\n2. If obj has a [[Realm]] internal slot, then\n[...]\n3. If obj is a Bound Function exotic object, then\n[...]\n4. If obj is a Proxy exotic object, then\na. If the value of the [[ProxyHandler]] internal slot of obj is null,\nthrow a TypeError exception.\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Function/prototype/toString/method-class-expression.js", "esid": " sec-runtime-semantics-definemethod", "description": " Function.prototype.toString on a method (class)", "includes": ["nativeFunctionMatcher.js"]}, {"path": "./test262-main/test/built-ins/Function/prototype/toString/proxy-arrow-function.js", "esid": " sec-function.prototype.tostring", "description": " >toString of Proxy for function target does not throw (Arrow Function)\n", "info": " |...\nIf Type(func) is Object and IsCallable(func) is true, then return an\nimplementation-dependent String source code representation of func.\nThe representation must have the syntax of a NativeFunction.\n...\n\nNativeFunction:\nfunction IdentifierName_opt ( FormalParameters ) { [ native code ] }\n\n", "features": ["arrow-function", "Proxy"], "includes": ["nativeFunctionMatcher.js"]}, {"path": "./test262-main/test/built-ins/Function/prototype/toString/proxy-async-function.js", "esid": " sec-function.prototype.tostring", "description": " >toString of Proxy for function target does not throw (Async Function Expression)\n", "info": " |...\nIf Type(func) is Object and IsCallable(func) is true, then return an\nimplementation-dependent String source code representation of func.\nThe representation must have the syntax of a NativeFunction.\n...\n\nNativeFunction:\nfunction IdentifierName_opt ( FormalParameters ) { [ native code ] }\n\n", "features": ["async-functions", "Proxy"], "includes": ["nativeFunctionMatcher.js"]}, {"path": "./test262-main/test/built-ins/Function/prototype/toString/proxy-async-generator-function.js", "esid": " sec-function.prototype.tostring", "description": " >toString of Proxy for function target does not throw (Async Generator Function Expression)\n", "info": " |...\nIf Type(func) is Object and IsCallable(func) is true, then return an\nimplementation-dependent String source code representation of func.\nThe representation must have the syntax of a NativeFunction.\n...\n\nNativeFunction:\nfunction IdentifierName_opt ( FormalParameters ) { [ native code ] }\n\n", "features": ["async-iteration", "Proxy"], "includes": ["nativeFunctionMatcher.js"]}, {"path": "./test262-main/test/built-ins/Function/prototype/toString/proxy-async-generator-method-definition.js", "esid": " sec-function.prototype.tostring", "description": " >toString of Proxy for function target does not throw (Async Generator Method Definition)\n", "info": " |...\nIf Type(func) is Object and IsCallable(func) is true, then return an\nimplementation-dependent String source code representation of func.\nThe representation must have the syntax of a NativeFunction.\n...\n\nNativeFunction:\nfunction IdentifierName_opt ( FormalParameters ) { [ native code ] }\n\n", "features": ["async-iteration", "Proxy"], "includes": ["nativeFunctionMatcher.js"]}, {"path": "./test262-main/test/built-ins/Function/prototype/toString/proxy-async-method-definition.js", "esid": " sec-function.prototype.tostring", "description": " >toString of Proxy for function target does not throw (Async Method Definition)\n", "info": " |...\nIf Type(func) is Object and IsCallable(func) is true, then return an\nimplementation-dependent String source code representation of func.\nThe representation must have the syntax of a NativeFunction.\n...\n\nNativeFunction:\nfunction IdentifierName_opt ( FormalParameters ) { [ native code ] }\n\n", "features": ["async-functions", "Proxy"], "includes": ["nativeFunctionMatcher.js"]}, {"path": "./test262-main/test/built-ins/Function/prototype/toString/proxy-bound-function.js", "esid": " sec-function.prototype.tostring", "description": " >toString of Proxy for function target does not throw (bound Function Expression)\n", "info": " |...\nIf Type(func) is Object and IsCallable(func) is true, then return an\nimplementation-dependent String source code representation of func.\nThe representation must have the syntax of a NativeFunction.\n...\n\nNativeFunction:\nfunction IdentifierName_opt ( FormalParameters ) { [ native code ] }\n\n", "features": ["Proxy"], "includes": ["nativeFunctionMatcher.js"]}, {"path": "./test262-main/test/built-ins/Function/prototype/toString/proxy-class.js", "esid": " sec-function.prototype.tostring", "description": " >toString of Proxy for function target does not throw (Class Expression)\n", "info": " |...\nIf Type(func) is Object and IsCallable(func) is true, then return an\nimplementation-dependent String source code representation of func.\nThe representation must have the syntax of a NativeFunction.\n...\n\nNativeFunction:\nfunction IdentifierName_opt ( FormalParameters ) { [ native code ] }\n\n", "features": ["class", "Proxy"], "includes": ["nativeFunctionMatcher.js"]}, {"path": "./test262-main/test/built-ins/Function/prototype/toString/proxy-function-expression.js", "esid": " sec-function.prototype.tostring", "description": " >toString of Proxy for function target does not throw (Function Expression)\n", "info": " |...\nIf Type(func) is Object and IsCallable(func) is true, then return an\nimplementation-dependent String source code representation of func.\nThe representation must have the syntax of a NativeFunction.\n...\n\nNativeFunction:\nfunction IdentifierName_opt ( FormalParameters ) { [ native code ] }\n\n", "features": ["Proxy"], "includes": ["nativeFunctionMatcher.js"]}, {"path": "./test262-main/test/built-ins/Function/prototype/toString/proxy-generator-function.js", "esid": " sec-function.prototype.tostring", "description": " >toString of Proxy for function target does not throw (Generator Function Expression)\n", "info": " |...\nIf Type(func) is Object and IsCallable(func) is true, then return an\nimplementation-dependent String source code representation of func.\nThe representation must have the syntax of a NativeFunction.\n...\n\nNativeFunction:\nfunction IdentifierName_opt ( FormalParameters ) { [ native code ] }\n\n", "features": ["generators", "Proxy"], "includes": ["nativeFunctionMatcher.js"]}, {"path": "./test262-main/test/built-ins/Function/prototype/toString/proxy-method-definition.js", "esid": " sec-function.prototype.tostring", "description": " >toString of Proxy for function target does not throw (Method Definition)\n", "info": " |...\nIf Type(func) is Object and IsCallable(func) is true, then return an\nimplementation-dependent String source code representation of func.\nThe representation must have the syntax of a NativeFunction.\n...\n\nNativeFunction:\nfunction IdentifierName_opt ( FormalParameters ) { [ native code ] }\n\n", "features": ["Proxy"], "includes": ["nativeFunctionMatcher.js"]}, {"path": "./test262-main/test/built-ins/JSON/stringify/value-bigint-order.js", "description": " BigInt stringify order of steps", "esid": " sec-serializejsonproperty", "info": " |Runtime Semantics: SerializeJSONProperty ( key, holder )\n\n2. If Type(value) is Object or BigInt, then\na. Let toJSON be ? GetGetV(value, \"toJSON\").\nb. If IsCallable(toJSON) is true, then\ni. Set value to ? Call(toJSON, value, \u00ab key \u00bb).\n3. If ReplacerFunction is not undefined, then\na. Set value to ? Call(ReplacerFunction, holder, \u00ab key, value \u00bb).\n4. If Type(value) is Object, then\n[...]\nd. Else if value has a [[BigIntData]] internal slot, then\ni. Set value to value.[[BigIntData]].\n[...]\n10. If Type(value) is BigInt, throw a TypeError exception\n", "features": ["BigInt", "arrow-function"]}, {"path": "./test262-main/test/built-ins/JSON/stringify/value-bigint-replacer.js", "description": " JSON serialization of BigInt values with replacer", "esid": " sec-serializejsonproperty", "info": " |Runtime Semantics: SerializeJSONProperty ( key, holder )\n\n3. If ReplacerFunction is not undefined, then\na. Set value to ? Call(ReplacerFunction, holder, \u00ab key, value \u00bb).\n", "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/JSON/stringify/value-bigint-tojson-receiver.js", "esid": " sec-serializejsonproperty", "description": " toJSON method called with BigInt as receiver", "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/JSON/stringify/value-bigint-tojson.js", "description": " BigInt toJSON method", "esid": " sec-serializejsonproperty", "info": " |Runtime Semantics: SerializeJSONProperty ( key, holder )\n\n2. If Type(value) is Object or BigInt, then\na. Let toJSON be ? GetGetV(value, \"toJSON\").\nb. If IsCallable(toJSON) is true, then\ni. Set value to ? Call(toJSON, value, \u00ab key \u00bb).\n", "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/JSON/stringify/value-bigint.js", "description": " JSON serialization of BigInt values", "esid": " pending", "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/JSON/stringify/value-string-escape-unicode.js", "esid": " sec-quotejsonstring", "description": " >JSON.stringify strings containing surrogate code units\n", "features": ["well-formed-json-stringify"]}, {"path": "./test262-main/test/built-ins/Map/iterator-items-are-not-object-close-iterator.js", "version": 6, "esid": " 23.1.1.1", "description": " >Closes the iterator after `not Object` error.\n", "info": " |Map ( [ iterable ] )\n\n...\n9. Repeat\n...\nd. Let nextItem be IteratorValue(next).\ne. ReturnIfAbrupt(nextItem).\nf. If Type(nextItem) is not Object,\ni. Let error be Completion{[[type]]: throw, [[value]]: a newly created\nTypeError object, [[target]]:empty}.\nii. Return IteratorClose(iter, error).\n", "features": [""]}, {"path": "./test262-main/test/built-ins/Number/bigint-conversion.js", "description": " BigInt to Number conversion", "esid": " pending", "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/Object/bigint.js", "description": " Conversion of BigInt values to Objects", "esid": " pending", "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/Object/create/properties-arg-to-object-bigint.js", "esid": " sec-object.create", "description": " >The Properties argument is cast to an object if it's a BigInt value\n", "info": " |Object.create ( O, Properties )\n\n3. If Properties is not undefined, then\na. Return ? ObjectDefineProperties(obj, Properties).\n\nRuntime Semantics: ObjectDefineProperties ( O, Properties )\n\n2. Let props be ? ToObject(Properties).\n3. Let keys be ? props.[[OwnPropertyKeys]]().\n...\n// All enumerable keys are added to the created object.\n", "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/Object/defineProperties/property-description-must-be-an-object-not-bigint.js", "esid": " sec-objectdefineproperties", "description": " >Property description must be an object (bigint)\n", "info": " |ObjectDefineProperties ( O, Properties )\n\n...\nFor each element nextKey of keys, do\nLet propDesc be ? props.[[GetOwnProperty]](nextKey).\nIf propDesc is not undefined and propDesc.[[Enumerable]] is true, then\nLet descObj be ? Get(props, nextKey).\nLet desc be ? ToPropertyDescriptor(descObj).\n...\n\nToPropertyDescriptor ( Obj )\n\nIf Type(Obj) is not Object, throw a TypeError exception.\n...\n", "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/Object/defineProperty/property-description-must-be-an-object-not-bigint.js", "esid": " sec-object.defineproperty", "description": " >Property description must be an object (bigint)\n", "info": " |Object.defineProperty ( O, P, Attributes )\n\n...\nLet desc be ? ToPropertyDescriptor(Attributes).\n...\n\nToPropertyDescriptor ( Obj )\n\nIf Type(Obj) is not Object, throw a TypeError exception.\n...\n", "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/Object/fromEntries/empty-iterable.js", "esid": " sec-object.fromentries", "description": " When given an empty list, makes an empty object.", "info": " |Object.fromEntries ( iterable )\n\n...\n4. Let stepsDefine be the algorithm steps defined in CreateDataPropertyOnObject Functions.\n5. Let adder be CreateBuiltinFunction(stepsDefine, \u00ab \u00bb).\n6. Return ? AddEntriesFromIterable(obj, iterable, adder).\n\n", "features": ["Object.fromEntries"]}, {"path": "./test262-main/test/built-ins/Object/fromEntries/evaluation-order.js", "esid": " sec-object.fromentries", "description": " Evaluation order is iterator.next(), get '0', get '1', toPropertyKey, repeat.", "info": " |Object.fromEntries ( iterable )\n\n...\n4. Let stepsDefine be the algorithm steps defined in CreateDataPropertyOnObject Functions.\n5. Let adder be CreateBuiltinFunction(stepsDefine, \u00ab \u00bb).\n6. Return ? AddEntriesFromIterable(obj, iterable, adder).\n\n", "includes": ["compareArray.js"], "features": ["Symbol.iterator", "Object.fromEntries"]}, {"path": "./test262-main/test/built-ins/Object/fromEntries/iterator-closed-for-null-entry.js", "esid": " sec-object.fromentries", "description": " Closes iterators when they return entries which are null.", "info": " |Object.fromEntries ( iterable )\n\n...\n4. Let stepsDefine be the algorithm steps defined in CreateDataPropertyOnObject Functions.\n5. Let adder be CreateBuiltinFunction(stepsDefine, \u00ab \u00bb).\n6. Return ? AddEntriesFromIterable(obj, iterable, adder).\n\nAddEntriesFromIterable ( target, iterable, adder )\n\n...\n4. Repeat,\n...\nd. If Type(nextItem) is not Object, then\ni. Let error be ThrowCompletion(a newly created TypeError object).\nii. Return ? IteratorClose(iteratorRecord, error).\n\n", "features": ["Symbol.iterator", "Object.fromEntries"]}, {"path": "./test262-main/test/built-ins/Object/fromEntries/iterator-closed-for-string-entry.js", "esid": " sec-object.fromentries", "description": " Closes iterators when they return entries which are strings.", "info": " |Object.fromEntries ( iterable )\n\n...\n4. Let stepsDefine be the algorithm steps defined in CreateDataPropertyOnObject Functions.\n5. Let adder be CreateBuiltinFunction(stepsDefine, \u00ab \u00bb).\n6. Return ? AddEntriesFromIterable(obj, iterable, adder).\n\nAddEntriesFromIterable ( target, iterable, adder )\n\n...\n4. Repeat,\n...\nd. If Type(nextItem) is not Object, then\ni. Let error be ThrowCompletion(a newly created TypeError object).\nii. Return ? IteratorClose(iteratorRecord, error).\n\n", "features": ["Symbol.iterator", "Object.fromEntries"]}, {"path": "./test262-main/test/built-ins/Object/fromEntries/iterator-closed-for-throwing-entry-key-accessor.js", "esid": " sec-object.fromentries", "description": " Closes iterators when accessing an entry's key throws.", "info": " |Object.fromEntries ( iterable )\n\n...\n4. Let stepsDefine be the algorithm steps defined in CreateDataPropertyOnObject Functions.\n5. Let adder be CreateBuiltinFunction(stepsDefine, \u00ab \u00bb).\n6. Return ? AddEntriesFromIterable(obj, iterable, adder).\n\nAddEntriesFromIterable ( target, iterable, adder )\n\n...\n4. Repeat,\n...\ne. Let k be Get(nextItem, \"0\").\nf. If k is an abrupt completion, return ? IteratorClose(iteratorRecord, k).\n\n", "features": ["Symbol.iterator", "Object.fromEntries"]}, {"path": "./test262-main/test/built-ins/Object/fromEntries/iterator-closed-for-throwing-entry-key-tostring.js", "esid": " sec-object.fromentries", "description": " Closes iterators when toString on a key throws.", "info": " |Object.fromEntries ( iterable )\n\n...\n4. Let stepsDefine be the algorithm steps defined in CreateDataPropertyOnObject Functions.\n5. Let adder be CreateBuiltinFunction(stepsDefine, \u00ab \u00bb).\n6. Return ? AddEntriesFromIterable(obj, iterable, adder).\n\nAddEntriesFromIterable ( target, iterable, adder )\n\n...\n4. Repeat,\n...\ne. Let k be Get(nextItem, \"0\").\nf. If k is an abrupt completion, return ? IteratorClose(iteratorRecord, k).\n\n", "features": ["Symbol.iterator", "Object.fromEntries"]}, {"path": "./test262-main/test/built-ins/Object/fromEntries/iterator-closed-for-throwing-entry-value-accessor.js", "esid": " sec-object.fromentries", "description": " Closes iterators when accessing an entry's value throws.", "info": " |Object.fromEntries ( iterable )\n\n...\n4. Let stepsDefine be the algorithm steps defined in CreateDataPropertyOnObject Functions.\n5. Let adder be CreateBuiltinFunction(stepsDefine, \u00ab \u00bb).\n6. Return ? AddEntriesFromIterable(obj, iterable, adder).\n\nAddEntriesFromIterable ( target, iterable, adder )\n\n...\n4. Repeat,\n...\ng. Let v be Get(nextItem, \"1\").\nh. If v is an abrupt completion, return ? IteratorClose(iteratorRecord, v).\n\n", "features": ["Symbol.iterator", "Object.fromEntries"]}, {"path": "./test262-main/test/built-ins/Object/fromEntries/iterator-not-closed-for-next-returning-non-object.js", "esid": " sec-object.fromentries", "description": " Does not close iterators with a `next` method which returns a non-object.", "info": " |Object.fromEntries ( iterable )\n\n...\n4. Let stepsDefine be the algorithm steps defined in CreateDataPropertyOnObject Functions.\n5. Let adder be CreateBuiltinFunction(stepsDefine, \u00ab \u00bb).\n6. Return ? AddEntriesFromIterable(obj, iterable, adder).\n\nAddEntriesFromIterable ( target, iterable, adder )\n\n...\n4. Repeat,\na. Let next be ? IteratorStep(iteratorRecord).\n\n\nIteratorStep ( iteratorRecord )\n\n1. Let result be ? IteratorNext(iteratorRecord).\n\n\nIteratorNext ( iteratorRecord [ , value ] )\n\n...\n3. If Type(result) is not Object, throw a TypeError exception.\n\n", "features": ["Symbol.iterator", "Object.fromEntries"]}, {"path": "./test262-main/test/built-ins/Object/fromEntries/iterator-not-closed-for-throwing-done-accessor.js", "esid": " sec-object.fromentries", "description": " Does not close iterators with a `done` accessor which throws.", "info": " |Object.fromEntries ( iterable )\n\n...\n4. Let stepsDefine be the algorithm steps defined in CreateDataPropertyOnObject Functions.\n5. Let adder be CreateBuiltinFunction(stepsDefine, \u00ab \u00bb).\n6. Return ? AddEntriesFromIterable(obj, iterable, adder).\n\nAddEntriesFromIterable ( target, iterable, adder )\n\n...\n4. Repeat,\na. Let next be ? IteratorStep(iteratorRecord).\n\n\nIteratorStep ( iteratorRecord )\n\n1. Let result be ? IteratorNext(iteratorRecord).\n\n\nIteratorNext ( iteratorRecord [ , value ] )\n\n...\n3. If Type(result) is not Object, throw a TypeError exception.\n\n", "features": ["Symbol.iterator", "Object.fromEntries"]}, {"path": "./test262-main/test/built-ins/Object/fromEntries/iterator-not-closed-for-throwing-next.js", "esid": " sec-object.fromentries", "description": " Does not close iterators with a `next` method which throws.", "info": " |Object.fromEntries ( iterable )\n\n...\n4. Let stepsDefine be the algorithm steps defined in CreateDataPropertyOnObject Functions.\n5. Let adder be CreateBuiltinFunction(stepsDefine, \u00ab \u00bb).\n6. Return ? AddEntriesFromIterable(obj, iterable, adder).\n\nAddEntriesFromIterable ( target, iterable, adder )\n\n...\n4. Repeat,\na. Let next be ? IteratorStep(iteratorRecord).\n\n\nIteratorStep ( iteratorRecord )\n\n1. Let result be ? IteratorNext(iteratorRecord).\n\n\nIteratorNext ( iteratorRecord [ , value ] )\n\n...\n3. If Type(result) is not Object, throw a TypeError exception.\n\n", "features": ["Symbol.iterator", "Object.fromEntries"]}, {"path": "./test262-main/test/built-ins/Object/fromEntries/iterator-not-closed-for-uncallable-next.js", "esid": " sec-object.fromentries", "description": " Does not close iterators with an uncallable `next` property.", "info": " |Object.fromEntries ( iterable )\n\n...\n4. Let stepsDefine be the algorithm steps defined in CreateDataPropertyOnObject Functions.\n5. Let adder be CreateBuiltinFunction(stepsDefine, \u00ab \u00bb).\n6. Return ? AddEntriesFromIterable(obj, iterable, adder).\n\nAddEntriesFromIterable ( target, iterable, adder )\n\n...\n4. Repeat,\na. Let next be ? IteratorStep(iteratorRecord).\n\n\nIteratorStep ( iteratorRecord )\n\n1. Let result be ? IteratorNext(iteratorRecord).\n", "features": ["Symbol.iterator", "Object.fromEntries"]}, {"path": "./test262-main/test/built-ins/Object/fromEntries/key-order.js", "description": " Key enumeration order of result objects matches the order of entries in the iterable.", "esid": " sec-object.fromentries", "includes": ["compareArray.js"], "features": ["Object.fromEntries"]}, {"path": "./test262-main/test/built-ins/Object/fromEntries/length.js", "description": " Object.fromEntries.length is 1.", "esid": " sec-object.fromentries", "includes": ["propertyHelper.js"], "features": ["Object.fromEntries"]}, {"path": "./test262-main/test/built-ins/Object/fromEntries/name.js", "description": " Object.fromEntries.name is \"fromEntries\".", "esid": " sec-object.fromentries", "includes": ["propertyHelper.js"], "features": ["Object.fromEntries"]}, {"path": "./test262-main/test/built-ins/Object/fromEntries/prototype.js", "description": " Created objects inherit from Object.prototype.", "esid": " sec-object.fromentries", "features": ["Object.fromEntries"]}, {"path": "./test262-main/test/built-ins/Object/fromEntries/requires-argument.js", "esid": " sec-object.fromentries", "description": " Throws when called without an argument.", "info": " |Object.fromEntries ( iterable )\n\n1. Perform ? RequireObjectCoercible(iterable).\n...\n\n", "features": ["Object.fromEntries"]}, {"path": "./test262-main/test/built-ins/Object/fromEntries/simple-properties.js", "description": " Creates data properties which are enumerable, writable, and configurable.", "esid": " sec-object.fromentries", "includes": ["propertyHelper.js"], "features": ["Object.fromEntries"]}, {"path": "./test262-main/test/built-ins/Object/fromEntries/string-entry-object-succeeds.js", "description": " Succeeds when an entry object is a boxed string.", "esid": " sec-object.fromentries", "features": ["Object.fromEntries"]}, {"path": "./test262-main/test/built-ins/Object/fromEntries/string-entry-primitive-throws.js", "description": " Throws when an entry object is a primitive string.", "esid": " sec-object.fromentries", "features": ["Object.fromEntries"]}, {"path": "./test262-main/test/built-ins/Object/fromEntries/string-entry-string-object-succeeds.js", "description": " Succeeds when an entry object is a boxed string.", "esid": " sec-object.fromentries", "features": ["Object.fromEntries"]}, {"path": "./test262-main/test/built-ins/Object/fromEntries/supports-symbols.js", "description": " Allows symbol keys.", "esid": " sec-object.fromentries", "features": ["Symbol", "Object.fromEntries"]}, {"path": "./test262-main/test/built-ins/Object/fromEntries/to-property-key.js", "description": " Coerces keys to strings using ToPropertyKey.", "esid": " sec-object.fromentries", "features": ["Symbol.toPrimitive", "Object.fromEntries"]}, {"path": "./test262-main/test/built-ins/Object/fromEntries/uses-define-semantics.js", "description": " Uses [[DefineOwnProperty]] rather than [[Set]].", "esid": " sec-object.fromentries", "features": ["Object.fromEntries"]}, {"path": "./test262-main/test/built-ins/Object/fromEntries/uses-keys-not-iterator.js", "description": " Reads properties rather than iterating.", "esid": " sec-object.fromentries", "features": ["Symbol.iterator", "Object.fromEntries"]}, {"path": "./test262-main/test/built-ins/Object/prototype/toString/Object.prototype.toString.call-bigint.js", "esid": " sec-object.prototype.tostring", "description": " BigInt.prototype[@@toStringTag] is BigInt", "info": " |Let tag be ? Get(O, @@toStringTag).\n", "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/Object/prototype/toString/symbol-tag-non-str-bigint.js", "esid": " sec-object.prototype.tostring", "description": " Non-string values of `@@toStringTag` property are ignored", "info": " |14. Else, let builtinTag be \"Object\".\n15. Let tag be ? Get(O, @@toStringTag).\n16. If Type(tag) is not String, let tag be builtinTag.\n17. Return the string-concatenation of \"[object \", tag, and \"]\".\n", "features": ["BigInt", "Symbol.toStringTag"]}, {"path": "./test262-main/test/built-ins/Object/prototype/toString/symbol-tag-override-bigint.js", "esid": " sec-object.prototype.tostring", "description": " String values of `@@toStringTag` property override built-in tags", "info": " |15. Let tag be ? Get(O, @@toStringTag).\n16. If Type(tag) is not String, let tag be builtinTag.\n17. Return the string-concatenation of \"[object \", tag, and \"]\".\n", "features": ["BigInt", "Symbol.toStringTag"]}, {"path": "./test262-main/test/built-ins/Object/seal/seal-bigint64array.js", "esid": " sec-object.seal", "description": " >Object.seal BigInt64Array\n", "info": " |If Type(O) is not Object, return O.\nLet status be ? SetIntegrityLevel(O, sealed).\n\nSetIntegrityLevel ( O, level )\n\nAssert: Type(O) is Object.\nAssert: level is either sealed or frozen.\nLet status be ? O.[[PreventExtensions]]().\nIf status is false, return false.\nLet keys be ? O.[[OwnPropertyKeys]]().\nIf level is sealed, then\nFor each element k of keys, do\nPerform ? DefinePropertyOrThrow(O, k, PropertyDescriptor { [[Configurable]]: false }).\nElse,\nAssert: level is frozen.\nFor each element k of keys, do\nLet currentDesc be ? O.[[GetOwnProperty]](k).\nIf currentDesc is not undefined, then\nIf IsAccessorDescriptor(currentDesc) is true, then\nLet desc be the PropertyDescriptor { [[Configurable]]: false }.\nElse,\nLet desc be the PropertyDescriptor { [[Configurable]]: false, [[Writable]]: false }.\nPerform ? DefinePropertyOrThrow(O, k, desc).\nReturn true.\n\n"}, {"path": "./test262-main/test/built-ins/Object/seal/seal-biguint64array.js", "esid": " sec-object.seal", "description": " >Object.seal BigUint64Array\n", "info": " |If Type(O) is not Object, return O.\nLet status be ? SetIntegrityLevel(O, sealed).\n\nSetIntegrityLevel ( O, level )\n\nAssert: Type(O) is Object.\nAssert: level is either sealed or frozen.\nLet status be ? O.[[PreventExtensions]]().\nIf status is false, return false.\nLet keys be ? O.[[OwnPropertyKeys]]().\nIf level is sealed, then\nFor each element k of keys, do\nPerform ? DefinePropertyOrThrow(O, k, PropertyDescriptor { [[Configurable]]: false }).\nElse,\nAssert: level is frozen.\nFor each element k of keys, do\nLet currentDesc be ? O.[[GetOwnProperty]](k).\nIf currentDesc is not undefined, then\nIf IsAccessorDescriptor(currentDesc) is true, then\nLet desc be the PropertyDescriptor { [[Configurable]]: false }.\nElse,\nLet desc be the PropertyDescriptor { [[Configurable]]: false, [[Writable]]: false }.\nPerform ? DefinePropertyOrThrow(O, k, desc).\nReturn true.\n\n"}, {"path": "./test262-main/test/built-ins/Object/setPrototypeOf/bigint.js", "description": " RequireObjectCoercible for BigInt values", "esid": " pending", "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/Proxy/revocable/revocation-function-name.js", "version": 6, "esid": " 26.2.2.1.1", "description": " The `name` property of Proxy Revocation functions", "info": " |A Proxy revocation function is an anonymous function.\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in function object, including constructors, has a `name`\nproperty whose value is a String. Functions that are identified as\nanonymous functions use the empty string as the value of the `name`\nproperty.\nUnless otherwise specified, the `name` property of a built-in function\nobject has the attributes { [[Writable]]: *false*, [[Enumerable]]: *false*,\n[[Configurable]]: *true* }.\n", "includes": ["propertyHelper.js"], "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.matchAll/isregexp-called-once.js", "esid": " pending", "description": " IsRegExp should only be called once", "info": " |RegExp.prototype [ @@matchAll ] ( string )\n1. Let R be the this value.\n[...]\n4. Let C be ? SpeciesConstructor(R, %RegExp%).\n5. Let flags be ? ToString(? Get(R, \"flags\")).\n6. Let matcher be ? Construct(C, \u00ab R, flags \u00bb).\n\n21.2.3.1 RegExp ( pattern, flags )\n1. Let patternIsRegExp be ? IsRegExp(pattern).\n[...]\n", "features": ["Symbol.match", "Symbol.matchAll"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.matchAll/isregexp-this-throws.js", "esid": " pending", "description": " Re-throws errors thrown while accessing RegExp's @@match property", "info": " |RegExp.prototype [ @@matchAll ] ( string )\n[...]\n3. Return ? MatchAllIterator(R, string).\n\nMatchAllIterator ( R, O )\n[...]\n2. If ? IsRegExp(R) is true, then\n[...]\n", "features": ["Symbol.match", "Symbol.matchAll"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.matchAll/length.js", "esid": " pending", "description": " RegExp.prototype[Symbol.matchAll] `length` property", "info": " |17 ECMAScript Standard Built-in Objects:\n\n[...]\n\nEvery built-in function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description. Optional parameters\n(which are indicated with brackets: [ ]) or rest parameters (which\nare shown using the form \u00ab...name\u00bb) are not included in the default\nargument count.\n\nUnless otherwise specified, the length property of a built-in function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Symbol.matchAll"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.matchAll/name.js", "esid": " pending", "description": " RegExp.prototype[Symbol.matchAll] `name` property", "info": " |17 ECMAScript Standard Built-in Objects:\n\n[...]\n\nEvery built-in function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\n[...]\n\nUnless otherwise specified, the name property of a built-in function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Symbol.matchAll"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.matchAll/prop-desc.js", "esid": " pending", "description": " RegExp.prototype[Symbol.matchAll] property descriptor", "info": " |17 ECMAScript Standard Built-in Objects:\n\n[...]\n\nEvery other data property described in clauses 18 through 26 and in Annex\nB.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false,\n[[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js"], "features": ["Symbol.matchAll"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.matchAll/regexpcreate-this-throws.js", "esid": " pending", "description": " Re-throws errors while creating an internal RegExp", "info": " |RegExp.prototype [ @@matchAll ] ( string )\n[...]\n3. Return ? MatchAllIterator(R, string).\n\nMatchAllIterator ( R, O )\n[...]\n2. If ? IsRegExp(R) is true, then\n[...]\n3. Else,\na. Let flags be \"g\".\nb. Let matcher be ? RegExpCreate(R, flags).\n", "features": ["Symbol.matchAll"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.matchAll/species-constructor-get-constructor-throws.js", "esid": " pending", "description": " |Re-throws errors thrown while accessing RegExp's constructor property\n", "info": " |RegExp.prototype [ @@matchAll ] ( string )\n[...]\n3. Return ? MatchAllIterator(R, string).\n\nMatchAllIterator ( R, O )\n[...]\n2. If ? IsRegExp(R) is true, then\na. Let C be ? SpeciesConstructor(R, RegExp).\n\nSpeciesConstructor ( O, defaultConstructor )\n[...]\n2. Let C be ? Get(O, \"constructor\").\n", "features": ["Symbol.matchAll"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.matchAll/species-constructor-get-species-throws.js", "esid": " pending", "description": " Re-throws errors thrown while accessing of @@species property", "info": " |RegExp.prototype [ @@matchAll ] ( string )\n[...]\n3. Return ? MatchAllIterator(R, string).\n\nMatchAllIterator ( R, O )\n[...]\n2. If ? IsRegExp(R) is true, then\na. Let C be ? SpeciesConstructor(R, RegExp).\n\nSpeciesConstructor ( O, defaultConstructor )\n[...]\n2. Let C be ? Get(O, \"constructor\").\n", "features": ["Symbol.matchAll", "Symbol.species"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.matchAll/species-constructor-is-undefined.js", "esid": " pending", "description": " Throws TypeError if `constructor` property is not an object", "info": " |RegExp.prototype [ @@matchAll ] ( string )\n[...]\n3. Return ? MatchAllIterator(R, string).\n\nMatchAllIterator ( R, O )\n[...]\n2. If ? IsRegExp(R) is true, then\na. Let C be ? SpeciesConstructor(R, RegExp).\n\nSpeciesConstructor ( O, defaultConstructor )\n[...]\n2. Let C be ? Get(O, \"constructor\").\n3. If C is undefined, return defaultConstructor.\n", "features": ["Symbol.matchAll"], "includes": ["compareArray.js", "compareIterator.js", "regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.matchAll/species-constructor-species-is-null-or-undefined.js", "esid": " pending", "description": " |Default constructor is used when species constructor is null or undefined\n", "info": " |RegExp.prototype [ @@matchAll ] ( string )\n[...]\n2. Return ? [MatchAllIterator](#matchalliterator)(R, string).\n\nMatchAllIterator ( R, O )\n[...]\n3. Let C be ? [SpeciesConstructor][species-constructor](R, RegExp).\n\nSpeciesConstructor ( O, defaultConstructor )\n[...]\n2. Let C be ? Get(O, \"constructor\").\n3. If C is undefined, return defaultConstructor.\n4. If Type(C) is not Object, throw a TypeError exception.\n5. Let S be ? Get(C, @@species).\n6. If S is either undefined or null, return defaultConstructor.\n", "features": ["Symbol.matchAll", "Symbol.species"], "includes": ["compareArray.js", "compareIterator.js", "regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.matchAll/species-constructor-species-throws.js", "esid": " pending", "description": " Re-throws errors when calling constructor's @@species", "info": " |RegExp.prototype [ @@matchAll ] ( string )\n[...]\n3. Return ? MatchAllIterator(R, string).\n\nMatchAllIterator ( R, O )\n[...]\n2. If ? IsRegExp(R) is true, then\na. Let C be ? SpeciesConstructor(R, RegExp).\nb. Let flags be ? ToString(? Get(R, \"flags\"))\nc. Let matcher be ? Construct(C, R, flags).\n", "features": ["Symbol.matchAll", "Symbol.species"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.matchAll/species-constructor.js", "esid": " pending", "description": " Custom species constructor is called when creating internal RegExp", "info": " |RegExp.prototype [ @@matchAll ] ( string )\n[...]\n4. Let C be ? SpeciesConstructor(R, %RegExp%).\n5. Let flags be ? ToString(? Get(R, \"flags\")).\n6. Let matcher be ? Construct(C, \u00ab R, flags \u00bb).\n[...]\n9. If flags contains \"g\", let global be true.\n10. Else, let global be false.\n[...]\n", "features": ["Symbol.matchAll", "Symbol.species"], "includes": ["compareArray.js", "compareIterator.js", "regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.matchAll/species-regexp-get-global-throws.js", "esid": " pending", "description": " |Doesn't access the \"global\" property of the constructed RegExp\n", "info": " |RegExp.prototype [ @@matchAll ] ( string )\n[...]\n4. Let C be ? SpeciesConstructor(R, %RegExp%).\n5. Let flags be ? ToString(? Get(R, \"flags\")).\n6. Let matcher be ? Construct(C, \u00ab R, flags \u00bb).\n[...]\n9. If flags contains \"g\", let global be true.\n10. Else, let global be false.\n[...]\n", "features": ["Symbol.matchAll", "Symbol.species"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.matchAll/species-regexp-get-unicode-throws.js", "esid": " pending", "description": " |Doesn't access the \"unicode\" property of the constructed RegExp\n", "info": " |RegExp.prototype [ @@matchAll ] ( string )\n[...]\n4. Let C be ? SpeciesConstructor(R, %RegExp%).\n5. Let flags be ? ToString(? Get(R, \"flags\")).\n6. Let matcher be ? Construct(C, \u00ab R, flags \u00bb).\n[...]\n11. If flags contains \"u\", let fullUnicode be true.\n12. Else, let fullUnicode be false.\n[...]\n", "features": ["Symbol.matchAll", "Symbol.species"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.matchAll/string-tostring-throws.js", "esid": " pending", "description": " String coercion of string parameter", "info": " |RegExp.prototype [ @@matchAll ] ( string )\n[...]\n3. Return ? MatchAllIterator(R, string).\n\nMatchAllIterator ( R, O )\n1. Let S be ? ToString(O).\n", "features": ["Symbol.matchAll"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.matchAll/string-tostring.js", "esid": " pending", "description": " String coercion of `string` argument", "info": " |RegExp.prototype [ @@matchAll ] ( string )\n[...]\n3. Return ? MatchAllIterator(R, string).\n\nMatchAllIterator ( R, O )\n1. Let S be ? ToString(O).\n", "features": ["Symbol.matchAll"], "includes": ["compareArray.js", "compareIterator.js", "regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.matchAll/this-get-flags-throws.js", "esid": " pending", "description": " Re-throws errors thrown while accessing RegExp's flags property", "info": " |RegExp.prototype [ @@matchAll ] ( string )\n[...]\n3. Return ? MatchAllIterator(R, string).\n\nMatchAllIterator ( R, O )\n[...]\n2. If ? IsRegExp(R) is true, then\n[...]\nb. Let flags be ? ToString(? Get(R, \"flags\"))\n", "features": ["Symbol.matchAll"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.matchAll/this-get-flags.js", "esid": " pending", "description": " Regexp's flags", "info": " |RegExp.prototype [ @@matchAll ] ( string )\n[...]\n3. Return ? MatchAllIterator(R, string).\n\nMatchAllIterator ( R, O )\n[...]\n2. If ? IsRegExp(R) is true, then\n[...]\nb. Let flags be ? ToString(? Get(R, \"flags\"))\n", "features": ["Symbol.matchAll"], "includes": ["compareArray.js", "compareIterator.js", "regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.matchAll/this-lastindex-cached.js", "esid": " pending", "description": " Verify regexp's lastIndex is cached", "info": " |RegExp.prototype [ @@matchAll ] ( string )\n[...]\n3. Return ? MatchAllIterator(R, string).\n\nMatchAllIterator ( R, O )\n[...]\n2. If ? IsRegExp(R) is true, then\n[...]\nf. Let lastIndex be ? ToLength(? Get(R, \"lastIndex\")).\ng. Perform ? Set(matcher, \"lastIndex\", lastIndex, true).\n", "features": ["Symbol.matchAll"], "includes": ["compareArray.js", "compareIterator.js", "regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.matchAll/this-tolength-lastindex-throws.js", "esid": " pending", "description": " Re-throws errors while coercing RegExp's lastIndex", "info": " |RegExp.prototype [ @@matchAll ] ( string )\n[...]\n3. Return ? MatchAllIterator(R, string).\n\nMatchAllIterator ( R, O )\n[...]\n2. If ? IsRegExp(R) is true, then\n[...]\nf. Let lastIndex be ? ToLength(? Get(R, \"lastIndex\")).\n", "features": ["Symbol.matchAll"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.matchAll/this-tostring-flags-throws.js", "esid": " pending", "description": " Re-throws errors while coercing RegExp's flags to a string", "info": " |RegExp.prototype [ @@matchAll ] ( string )\n[...]\n3. Return ? MatchAllIterator(R, string).\n\nMatchAllIterator ( R, O )\n[...]\n2. If ? IsRegExp(R) is true, then\n[...]\nb. Let flags be ? ToString(? Get(R, \"flags\"))\n", "features": ["Symbol.matchAll"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.matchAll/this-tostring-flags.js", "esid": " pending", "description": " Corercing regexp's flags", "info": " |RegExp.prototype [ @@matchAll ] ( string )\n[...]\n3. Return ? MatchAllIterator(R, string).\n\nMatchAllIterator ( R, O )\n[...]\n2. If ? IsRegExp(R) is true, then\n[...]\nb. Let flags be ? ToString(? Get(R, \"flags\"))\n", "features": ["Symbol.matchAll"], "includes": ["compareArray.js", "compareIterator.js", "regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExpStringIteratorPrototype/Symbol.toStringTag.js", "esid": " pending", "description": " |`Symbol.toStringTag` property descriptor\n", "info": " |The initial value of the @@toStringTag property is the string value \"String\nIterator\".\n\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]:\nfalse, [[Configurable]]: true }.\n", "features": ["Symbol.matchAll", "Symbol.toStringTag"], "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/RegExpStringIteratorPrototype/ancestry.js", "esid": " pending", "description": " |The [[Prototype]] internal slot ofthe %RegExpStringIteratorPrototype% is the\n%IteratorPrototype% intrinsic object (25.1.2).\n", "features": ["Symbol.iterator", "Symbol.matchAll"]}, {"path": "./test262-main/test/built-ins/RegExpStringIteratorPrototype/next/custom-regexpexec-call-throws.js", "esid": " pending", "description": " Re-throws errors when calling exec", "info": " |%RegExpStringIteratorPrototype%.next ( )\n[...]\n9. Let match be ? RegExpExec(R, S).\n\nRuntime Semantics: RegExpExec ( R, S )\n1. Assert: Type(R) is Object.\n2. Assert: Type(S) is String.\n3. Let exec be ? Get(R, \"exec\").\n4. If IsCallable(exec) is true, then\na. Let result be ? Call(exec, R, \u00ab S \u00bb).\n", "features": ["Symbol.matchAll"]}, {"path": "./test262-main/test/built-ins/RegExpStringIteratorPrototype/next/custom-regexpexec-get-throws.js", "esid": " pending", "description": " Re-throws errors thrown while accessing RegExp's exec property", "info": " |%RegExpStringIteratorPrototype%.next ( )\n[...]\n9. Let match be ? RegExpExec(R, S).\n\nRuntime Semantics: RegExpExec ( R, S )\n1. Assert: Type(R) is Object.\n2. Assert: Type(S) is String.\n3. Let exec be ? Get(R, \"exec\").\n", "features": ["Symbol.matchAll"]}, {"path": "./test262-main/test/built-ins/RegExpStringIteratorPrototype/next/custom-regexpexec-match-get-0-throws.js", "esid": " pending", "description": " Re-throws errors thrown while accessing the first match", "info": " |%RegExpStringIteratorPrototype%.next ( )\n[...]\n9. Let match be ? RegExpExec(R, S).\n10. If match is null, then\n[...]\n11. Else,\na. If global is true,\ni. Let matchStr be ? ToString(? Get(match, \"0\")).\n", "features": ["Symbol.matchAll"]}, {"path": "./test262-main/test/built-ins/RegExpStringIteratorPrototype/next/custom-regexpexec-match-get-0-tostring-throws.js", "esid": " pending", "description": " Re-throws errors thrown from coercing first match to a string", "info": " |%RegExpStringIteratorPrototype%.next ( )\n[...]\n9. Let match be ? RegExpExec(R, S).\n10. If match is null, then\n[...]\n11. Else,\na. If global is true,\ni. Let matchStr be ? ToString(? Get(match, \"0\")).\n", "features": ["Symbol.matchAll"]}, {"path": "./test262-main/test/built-ins/RegExpStringIteratorPrototype/next/custom-regexpexec-match-get-0-tostring.js", "esid": " pending", "description": " Behavior when first match is coerced to a empty string", "info": " |%RegExpStringIteratorPrototype%.next ( )\n[...]\n9. Let match be ? RegExpExec(R, S).\n10. If match is null, then\n[...]\n11. Else,\na. If global is true,\ni. Let matchStr be ? ToString(? Get(match, \"0\")).\nii. If matchStr is the empty string,\n1. Let thisIndex be ? ToLength(? Get(R, \"lastIndex\").\n2. Let nextIndex be ! AdvanceStringIndex(S, thisIndex, fullUnicode).\n3. Perform ? Set(R, \"lastIndex\", nextIndex, true).\niii. Return ! CreateIterResultObject(match, false).\n", "features": ["Symbol.matchAll"]}, {"path": "./test262-main/test/built-ins/RegExpStringIteratorPrototype/next/custom-regexpexec-not-callable.js", "esid": " pending", "description": " Behavior with a custom RegExp exec", "info": " |%RegExpStringIteratorPrototype%.next ( )\n[...]\n9. Let match be ? RegExpExec(R, S).\n\nRuntime Semantics: RegExpExec ( R, S )\n1. Assert: Type(R) is Object.\n2. Assert: Type(S) is String.\n3. Let exec be ? Get(R, \"exec\").\n4. If IsCallable(exec) is true, then\n[...]\n5. If R does not have a [[RegExpMatcher]] internal slot, throw a\nTypeError exception.\n6. Return ? RegExpBuiltinExec(R, S).\n", "features": ["Symbol.matchAll"], "includes": ["compareArray.js", "compareIterator.js", "regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExpStringIteratorPrototype/next/custom-regexpexec.js", "esid": " pending", "description": " Behavior with a custom RegExp exec", "info": " |%RegExpStringIteratorPrototype%.next ( )\n[...]\n9. Let match be ? RegExpExec(R, S).\n\nRuntime Semantics: RegExpExec ( R, S )\n1. Assert: Type(R) is Object.\n2. Assert: Type(S) is String.\n3. Let exec be ? Get(R, \"exec\").\n4. If IsCallable(exec) is true, then\na. Let result be ? Call(exec, R, \u00ab S \u00bb).\nb. If Type(result) is neither Object or Null, throw a TypeError exception.\nc. Return result.\n", "features": ["Symbol.matchAll"]}, {"path": "./test262-main/test/built-ins/RegExpStringIteratorPrototype/next/length.js", "esid": " pending", "description": " |%RegExpStringIteratorPrototype%.next `length` property\n", "info": " |17 ECMAScript Standard Built-in Objects:\n\n[...]\n\nEvery built-in function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description. Optional parameters\n(which are indicated with brackets: [ ]) or rest parameters (which\nare shown using the form \u00ab...name\u00bb) are not included in the default\nargument count.\n\nUnless otherwise specified, the length property of a built-in function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Symbol.matchAll"]}, {"path": "./test262-main/test/built-ins/RegExpStringIteratorPrototype/next/name.js", "esid": " pending", "description": " |%RegExpStringIteratorPrototype%.next `name` property\n", "info": " |17 ECMAScript Standard Built-in Objects:\n\n[...]\n\nEvery built-in function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\n[...]\n\nUnless otherwise specified, the name property of a built-in function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Symbol.matchAll"]}, {"path": "./test262-main/test/built-ins/RegExpStringIteratorPrototype/next/next-iteration-global.js", "esid": " pending", "description": " Iterates over each match", "info": " |%RegExpStringIteratorPrototype%.next ( )\n[...]\n4. If O.[[Done]] is true, then\na. Return ! reateIterResultObject(undefined, true).\n[...]\n9. Let match be ? RegExpExec(R, S).\n10. If match is null, then\na. Set O.[[Done]] to true.\nb. Return ! CreateIterResultObject(undefined, true).\n11. Else,\na. If global is true,\ni. Let matchStr be ? ToString(? Get(match, \"0\")).\nii. If matchStr is the empty string,\n1. Let thisIndex be ? ToLength(? Get(R, \"lastIndex\").\n2. Let nextIndex be ! AdvanceStringIndex(S, thisIndex, fullUnicode).\n3. Perform ? Set(R, \"lastIndex\", nextIndex, true).\niii. Return ! CreateIterResultObject(match, false).\n", "features": ["Symbol.matchAll"], "includes": ["compareArray.js", "compareIterator.js", "regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExpStringIteratorPrototype/next/next-iteration.js", "esid": " pending", "description": " Iterates over the first match", "info": " |%RegExpStringIteratorPrototype%.next ( )\n[...]\n4. If O.[[Done]] is true, then\na. Return ! reateIterResultObject(undefined, true).\n[...]\n9. Let match be ? RegExpExec(R, S).\n10. If match is null, then\na. Set O.[[Done]] to true.\nb. Return ! CreateIterResultObject(undefined, true).\n11. Else,\na. If global is true,\n[...]\nb. Else,\ni. Set O.[[Done]] to true.\nii. Return ! CreateIterResultObject(match, false).\n", "features": ["Symbol.matchAll"], "includes": ["compareArray.js", "compareIterator.js", "regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExpStringIteratorPrototype/next/next-missing-internal-slots.js", "esid": " pending", "description": " Throws TypeError when `this` does not have all internal slots", "info": " |%RegExpStringIteratorPrototype%.next ( )\n1. Let O be the this value.\n2. If Type(O) is not Object, throw a TypeError exception.\n3. If O does not have all of the internal slots of a RegExp String Iterator\nObject Instance (see PropertiesOfRegExpStringIteratorInstances), throw a\nTypeError.\n", "features": ["Symbol.matchAll"]}, {"path": "./test262-main/test/built-ins/RegExpStringIteratorPrototype/next/prop-desc.js", "esid": " pending", "description": " |%RegExpStringIteratorPrototype%.next property descriptor\n", "info": " |17 ECMAScript Standard Built-in Objects:\n\n[...]\n\nEvery other data property described in clauses 18 through 26 and in Annex\nB.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false,\n[[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js"], "features": ["Symbol.matchAll"]}, {"path": "./test262-main/test/built-ins/RegExpStringIteratorPrototype/next/regexp-tolength-lastindex-throws.js", "esid": " pending", "description": " Re-throws errors thrown coercing RegExp's lastIndex to a length", "info": " |%RegExpStringIteratorPrototype%.next ( )\n[...]\n9. Let match be ? RegExpExec(R, S).\n10. If match is null, then\n[...]\n11. Else,\na. If global is true,\ni. Let matchStr be ? ToString(? Get(match, \"0\")).\nii. If matchStr is the empty string,\n1. Let thisIndex be ? ToLength(? Get(R, \"lastIndex\").\n", "features": ["Symbol.matchAll"]}, {"path": "./test262-main/test/built-ins/RegExpStringIteratorPrototype/next/this-is-not-object-throws.js", "esid": " pending", "description": " Throws TypeError when `this` is not an Object", "info": " |%RegExpStringIteratorPrototype%.next ( )\n1. Let O be the this value.\n2. If Type(O) is not Object, throw a TypeError exception.\n", "features": ["Symbol.matchAll"]}, {"path": "./test262-main/test/built-ins/String/prototype/indexOf/position-tointeger-bigint.js", "description": " String.prototype.indexOf type coercion for position parameter", "esid": " sec-string.prototype.indexof", "info": " |String.prototype.indexOf ( searchString [ , position ] )\n\n4. Let pos be ? ToInteger(position).\n", "features": ["BigInt", "Symbol.toPrimitive", "computed-property-names"]}, {"path": "./test262-main/test/built-ins/String/prototype/indexOf/searchstring-tostring-bigint.js", "description": " String.prototype.indexOf type coercion for searchString parameter", "esid": " sec-string.prototype.indexof", "info": " |String.prototype.indexOf ( searchString [ , position ] )\n\n3. Let searchStr be ? ToString(searchString).\n", "features": ["BigInt", "Symbol.toPrimitive", "computed-property-names"]}, {"path": "./test262-main/test/built-ins/String/prototype/matchAll/length.js", "esid": " pending", "description": " String.prototype.matchAll `length` property", "info": " |17 ECMAScript Standard Built-in Objects:\n\n[...]\n\nEvery built-in function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description. Optional parameters\n(which are indicated with brackets: [ ]) or rest parameters (which\nare shown using the form \u00ab...name\u00bb) are not included in the default\nargument count.\n\nUnless otherwise specified, the length property of a built-in function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["String.prototype.matchAll"]}, {"path": "./test262-main/test/built-ins/String/prototype/matchAll/name.js", "esid": " pending", "description": " String.prototype.matchAll `name` property", "info": " |17 ECMAScript Standard Built-in Objects:\n\n[...]\n\nEvery built-in function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\n[...]\n\nUnless otherwise specified, the name property of a built-in function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["String.prototype.matchAll"]}, {"path": "./test262-main/test/built-ins/String/prototype/matchAll/prop-desc.js", "esid": " pending", "description": " String.prototype.matchAll property descriptor", "info": " |17 ECMAScript Standard Built-in Objects:\n\n[...]\n\nEvery other data property described in clauses 18 through 26 and in Annex\nB.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false,\n[[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js"], "features": ["String.prototype.matchAll"]}, {"path": "./test262-main/test/built-ins/String/prototype/matchAll/regexp-get-matchAll-throws.js", "esid": " pending", "description": " Re-throws errors when calling @@matchAll", "info": " |String.prototype.matchAll ( regexp )\n[...]\n2. If regexp is neither undefined nor null, then\na. Let matcher be ? GetMethod(regexp, @@matchAll).\nb. If matcher is not undefined, then\ni. Return ? Call(matcher, regexp, \u00ab O \u00bb).\n", "features": ["Symbol.matchAll", "String.prototype.matchAll"]}, {"path": "./test262-main/test/built-ins/String/prototype/matchAll/regexp-is-null.js", "esid": " pending", "description": " Behavior when regexp is null", "info": " |String.prototype.matchAll ( regexp )\n1. Let O be ? RequireObjectCoercible(this value).\n2. If regexp is neither undefined nor null, then\n[...]\n3. Let S be ? ToString(O).\n4. Let rx be ? RegExpCreate(R, \"g\").\n5. Return ? Invoke(rx, @@matchAll, \u00ab S \u00bb).\n", "features": ["String.prototype.matchAll"], "includes": ["compareArray.js", "compareIterator.js", "regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/String/prototype/matchAll/regexp-is-undefined-or-null-invokes-matchAll.js", "esid": " pending", "description": " Behavior when regexp is null or undefined", "info": " |String.prototype.matchAll ( regexp )\n1. Let O be ? RequireObjectCoercible(this value).\n2. If regexp is neither undefined nor null, then\n[...]\n3. Let S be ? ToString(O).\n4. Let rx be ? RegExpCreate(R, \"g\").\n5. Return ? Invoke(rx, @@matchAll, \u00ab S \u00bb).\n", "features": ["String.prototype.matchAll"]}, {"path": "./test262-main/test/built-ins/String/prototype/matchAll/regexp-is-undefined.js", "esid": " pending", "description": " Behavior when regexp is null", "info": " |String.prototype.matchAll ( regexp )\n1. Let O be ? RequireObjectCoercible(this value).\n2. If regexp is neither undefined nor null, then\n[...]\n3. Return ? MatchAllIterator(regexp, O).\n\nMatchAllIterator( regexp, O )\n[...]\n2. If ? IsRegExp(regexp) is true, then\n[...]\n3. Else,\na. Let R be RegExpCreate(regexp, \"g\").\n", "features": ["String.prototype.matchAll"], "includes": ["compareArray.js", "compareIterator.js", "regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/String/prototype/matchAll/regexp-matchAll-invocation.js", "esid": " pending", "description": " Invocation of @@matchAll property of user-supplied RegExp objects", "info": " |String.prototype.matchAll ( regexp )\n[...]\n2. If regexp is neither undefined nor null, then\na. Let matcher be ? GetMethod(regexp, @@matchAll).\nb. If matcher is not undefined, then\ni. Return ? Call(matcher, regexp, \u00ab O \u00bb).\n", "features": ["Symbol.matchAll", "String.prototype.matchAll"]}, {"path": "./test262-main/test/built-ins/String/prototype/matchAll/regexp-matchAll-is-undefined-or-null.js", "esid": " pending", "description": " Behavior when regexp[@@matchAll] is undefined or null", "info": " |String.prototype.matchAll ( regexp )\n1. Let O be ? RequireObjectCoercible(this value).\n2. If regexp is neither undefined nor null, then\na. Let matcher be ? GetMethod(regexp, @@matchAll).\nb. If matcher is not undefined, then\n[...]\n3. Let S be ? ToString(O).\n4. Let rx be ? RegExpCreate(R, \"g\").\n5. Return ? Invoke(rx, @@matchAll, \u00ab S \u00bb).\n", "features": ["Symbol.matchAll", "String.prototype.matchAll"]}, {"path": "./test262-main/test/built-ins/String/prototype/matchAll/regexp-matchAll-not-callable.js", "esid": " pending", "description": " Behavior when regexp[@@matchAll] is not callable", "info": " |String.prototype.matchAll ( regexp )\n[...]\n2. If regexp is neither undefined nor null, then\na. Let matcher be ? GetMethod(regexp, @@matchAll).\n", "features": ["Symbol.matchAll", "String.prototype.matchAll"]}, {"path": "./test262-main/test/built-ins/String/prototype/matchAll/regexp-matchAll-throws.js", "esid": " pending", "description": " Re-throws errors when calling @@matchAll", "info": " |String.prototype.matchAll ( regexp )\n[...]\n2. If regexp is neither undefined nor null, then\na. Let matcher be ? GetMethod(regexp, @@matchAll).\n", "features": ["Symbol.matchAll", "String.prototype.matchAll"]}, {"path": "./test262-main/test/built-ins/String/prototype/matchAll/regexp-prototype-get-matchAll-throws.js", "esid": " pending", "description": " Re-throws errors thrown while accessing RegExp's @@matchAll property", "info": " |String.prototype.matchAll ( regexp )\n[...]\n2. If regexp is neither undefined nor null, then\na. Let matcher be ? GetMethod(regexp, @@matchAll).\n", "features": ["Symbol.matchAll"]}, {"path": "./test262-main/test/built-ins/String/prototype/matchAll/regexp-prototype-has-no-matchAll.js", "esid": " pending", "description": " Behavior when @@matchAll is removed from RegExp's prototype", "info": " |String.prototype.matchAll ( regexp )\n1. Let O be ? RequireObjectCoercible(this value).\n2. If regexp is neither undefined nor null, then\na. Let matcher be ? GetMethod(regexp, @@matchAll).\nb. If matcher is not undefined, then\n[...]\n[...]\n4. Let rx be ? RegExpCreate(R, \"g\").\n5. Return ? Invoke(rx, @@matchAll, \u00ab S \u00bb).\n\n", "features": ["Symbol.matchAll", "String.prototype.matchAll"]}, {"path": "./test262-main/test/built-ins/String/prototype/matchAll/regexp-prototype-matchAll-invocation.js", "esid": " pending", "description": " Behavior when invoking of @@matchAll", "info": " |String.prototype.matchAll ( regexp )\n[...]\n2. If regexp is neither undefined nor null, then\na. Let matcher be ? GetMethod(regexp, @@matchAll).\nb. If matcher is not undefined, then\ni. Return ? Call(matcher, regexp, \u00ab O \u00bb).\n", "features": ["Symbol.matchAll"]}, {"path": "./test262-main/test/built-ins/String/prototype/matchAll/regexp-prototype-matchAll-throws.js", "esid": " pending", "description": " Re-throws errors when calling @@matchAll", "info": " |String.prototype.matchAll ( regexp )\n[...]\n2. If regexp is neither undefined nor null, then\na. Let matcher be ? GetMethod(regexp, @@matchAll).\nb. If matcher is not undefined, then\ni. Return ? Call(matcher, regexp, \u00ab O \u00bb).\n", "features": ["Symbol.matchAll"]}, {"path": "./test262-main/test/built-ins/String/prototype/matchAll/this-val-non-obj-coercible.js", "esid": " pending", "description": " The `this` value cannot be coerced into an object", "info": " |String.prototype.matchAll ( regexp )\n1. Let O be RequireObjectCoercible(this value).\n", "features": ["String.prototype.matchAll"]}, {"path": "./test262-main/test/built-ins/String/prototype/matchAll/toString-this-val.js", "esid": " pending", "description": " |Verify ToString is called when regexp[@@matchAll] is undefined or null\n", "info": " |String.prototype.matchAll ( regexp )\n1. Let O be ? RequireObjectCoercible(this value).\n2. If regexp is neither undefined nor null, then\na. Let matcher be ? GetMethod(regexp, @@matchAll).\nb. If matcher is not undefined, then\n[...]\n3. Let S be ? ToString(O).\n4. Let rx be ? RegExpCreate(R, \"g\").\n5. Return ? Invoke(rx, @@matchAll, \u00ab S \u00bb).\n", "features": ["Symbol.matchAll", "String.prototype.matchAll"]}, {"path": "./test262-main/test/built-ins/String/prototype/trimEnd/length.js", "esid": " sec-string.prototype.trimEnd", "description": " >String.prototype.trimEnd.length is 0.\n", "info": " >String.prototype.trimEnd ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["string-trimming", "String.prototype.trimEnd"]}, {"path": "./test262-main/test/built-ins/String/prototype/trimEnd/name.js", "esid": " sec-string.prototype.trimEnd", "description": " >String.prototype.trimEnd.name is \"trimEnd\".\n", "info": " >String.prototype.trimEnd ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["string-trimming", "String.prototype.trimEnd"]}, {"path": "./test262-main/test/built-ins/String/prototype/trimEnd/prop-desc.js", "esid": " sec-string.prototype.trimEnd", "description": " >\"trimEnd\" property of String.prototype\n", "info": " >17 ECMAScript Standard Built-in Objects:\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2\nhas the attributes { [[Writable]]: true, [[Enumerable]]: false,\n[[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js"], "features": ["string-trimming", "String.prototype.trimEnd"]}, {"path": "./test262-main/test/built-ins/String/prototype/trimEnd/this-value-boolean.js", "esid": " sec-string.prototype.trimEnd", "description": " Behavior when \"this\" value is a boolean.", "info": " |Runtime Semantics: TrimString ( string, where )\n2. Let S be ? ToString(str).\n\nToString ( argument )\nArgument Type: Boolean\nResult:\nIf argument is true, return \"true\".\nIf argument is false, return \"false\".\n", "features": ["string-trimming", "String.prototype.trimEnd"]}, {"path": "./test262-main/test/built-ins/String/prototype/trimEnd/this-value-line-terminator.js", "esid": " sec-string.prototype.trimEnd", "description": " TrimEnd removes all line terminators from the end of a string.", "info": " |Runtime Symantics: TrimString ( string, where )\n...\n4. Else if where is \"end\", let T be a String value that is a copy of S with\ntrailing white space removed.\n...\n\nThe definition of white space is the union of WhiteSpace and LineTerminator.\n\n", "features": ["string-trimming", "String.prototype.trimEnd"]}, {"path": "./test262-main/test/built-ins/String/prototype/trimEnd/this-value-not-obj-coercible.js", "esid": " sec-string.prototype.trimEnd", "description": " The \"this\" value must be object-coercible", "info": " |1. Let O be ? RequireObjectCoercible(this value).\n", "features": ["string-trimming", "String.prototype.trimEnd"]}, {"path": "./test262-main/test/built-ins/String/prototype/trimEnd/this-value-number.js", "esid": " sec-string.prototype.trimEnd", "description": " Behavoir when \"this\" value is a number.", "info": " |Runtime Semantics: TrimString ( string, where )\n2. Let S be ? ToString(str).\n\nToString ( argument )\nArgument Type: Number\nResult: NumberToString(argument)\n", "features": ["string-trimming", "String.prototype.trimEnd"]}, {"path": "./test262-main/test/built-ins/String/prototype/trimEnd/this-value-object-cannot-convert-to-primitive-err.js", "esid": " sec-string.prototype.trimEnd", "description": " >This value is an object which cannot be converted to a primitive\n", "info": " |Runtime Semantics: TrimString ( string, where )\n1. Let str be ? RequireObjectCoercible(string).\n2. Let S be ? ToString(str).\n...\n\nToString ( argument )\nIf argument is Object:\n1. Let primValue be ? ToPrimitive(argument, hint String).\n...\n\nToPrimitive ( input [, PreferredType ])\n...\nb. Else if PreferredType is hint String, let hint be \"string\".\n...\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive)\ne. If exoticToPrim is not undefined, then\ni. Let result be ? Call(exoticToPrim, input, \u00ab hint \u00bb).\nii. If Type(result) is not Object, return result.\niii. Throw a TypeError exception.\nf. If hint is \"default\", set hint to \"number\".\ng. Return ? OrdinaryToPrimitive(input, hint).\n...\n\nOrdinaryToPrimitive( O, hint )\n...\n3. If hint is \"string\", then\na. Let methodNames be \u00ab \"toString\", \"valueOf\" \u00bb.\n...\n5. For each name in methodNames in List order, do\na. Let method be ? Get(O, name).\nb. If IsCallable(method) is true, then\ni. Let result be ? Call(method, O).\nii. If Type(result) is not Object, return result.\n6. Throw a TypeError exception.\n", "features": ["string-trimming", "String.prototype.trimEnd", "Symbol.toPrimitive"]}, {"path": "./test262-main/test/built-ins/String/prototype/trimEnd/this-value-object-toprimitive-call-err.js", "esid": " sec-string.prototype.trimEnd", "description": " >Abrupt completion when getting Symbol.toPrimitive method\n", "info": " |Runtime Semantics: TrimString ( string, where )\n1. Let str be ? RequireObjectCoercible(string).\n2. Let S be ? ToString(str).\n...\n\nToString ( argument )\nIf argument is Object:\n1. Let primValue be ? ToPrimitive(argument, hint String).\n...\n\nToPrimitive ( input [, PreferredType ])\n...\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive).\n...\n", "features": ["string-trimming", "String.prototype.trimEnd", "Symbol.toPrimitive"]}, {"path": "./test262-main/test/built-ins/String/prototype/trimEnd/this-value-object-toprimitive-meth-err.js", "esid": " sec-string.prototype.trimEnd", "description": " >Abrupt completion when Symbol.toPrimitive abrupt completes.\n", "info": " |Runtime Semantics: TrimString ( string, where )\n1. Let str be ? RequireObjectCoercible(string).\n2. Let S be ? ToString(str).\n...\n\nToString ( argument )\nIf argument is Object:\n1. Let primValue be ? ToPrimitive(argument, hint String).\n...\n\nToPrimitive ( input [, PreferredType ])\n...\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive).\ne. If exoticToPrim is not undefined, then\ni. Let result be ? Call(exoticToPrim, input, \u00ab hint \u00bb).\n...\n", "features": ["string-trimming", "String.prototype.trimEnd", "Symbol.toPrimitive"]}, {"path": "./test262-main/test/built-ins/String/prototype/trimEnd/this-value-object-toprimitive-meth-priority.js", "esid": " sec-string.prototype.trimEnd", "description": " >Priority of Symbol[toPrimitive] when converting object to string for trimming\n", "info": " |Runtime Semantics: TrimString ( string, where )\n1. Let str be ? RequireObjectCoercible(string).\n2. Let S be ? ToString(str).\n...\n\nToString ( argument )\nIf argument is Object:\n1. Let primValue be ? ToPrimitive(argument, hint String).\n...\n\nToPrimitive ( input [, PreferredType ])\n...\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive)\ne. If exoticToPrim is not undefined, then\ni. Let result be ? Call(exoticToPrim, input, \u00ab hint \u00bb).\nii. If Type(result) is not Object, return result.\n...\n", "features": ["string-trimming", "String.prototype.trimEnd", "Symbol.toPrimitive"]}, {"path": "./test262-main/test/built-ins/String/prototype/trimEnd/this-value-object-toprimitive-returns-object-err.js", "esid": " sec-string.prototype.trimEnd", "description": " >Abrupt completion when Symbol.toPrimitive returns an object\n", "info": " |Runtime Semantics: TrimString ( string, where )\n1. Let str be ? RequireObjectCoercible(string).\n2. Let S be ? ToString(str).\n...\n\nToString ( argument )\nIf arguement is Object:\n1. Let primValue be ? ToPrimitive(argument, hint String).\n...\n\nToPrimitive ( input [, PreferredType ])\n...\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive).\ne. If exoticToPrim is not undefined, then\ni. Let result be ? Call(exoticToPrim, input, \u00ab hint \u00bb).\nii. If Type(result) is not Object, return result.\niii. Throw a TypeError exception.\n...\n", "features": ["string-trimming", "String.prototype.trimEnd", "Symbol.toPrimitive"]}, {"path": "./test262-main/test/built-ins/String/prototype/trimEnd/this-value-object-tostring-call-err.js", "esid": " sec-string.prototype.trimEnd", "description": " >Abrupt completion when getting toString method\n", "info": " |Runtime Semantics: TrimString ( string, where )\n1. Let str be ? RequireObjectCoercible(string).\n2. Let S be ? ToString(str).\n...\n\nToString ( argument )\nIf argument is Object:\n1. Let primValue be ? ToPrimitive(argument, hint String).\n...\n\nToPrimitive ( input [, PreferredType ])\n...\nb. Else if PreferredType is hint String, let hint be \"string\".\n...\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive)\ne. If exoticToPrim is not undefined, then\ni. Let result be ? Call(exoticToPrim, input, \u00ab hint \u00bb).\nii. If Type(result) is not Object, return result.\niii. Throw a TypeError exception.\nf. If hint is \"default\", set hint to \"number\".\ng. Return ? OrdinaryToPrimitive(input, hint).\n...\n\nOrdinaryToPrimitive( O, hint )\n...\n3. If hint is \"string\", then\na. Let methodNames be \u00ab \"toString\", \"valueOf\" \u00bb.\n...\n5. For each name in methodNames in List order, do\na. Let method be ? Get(O, name).\n", "features": ["string-trimming", "String.prototype.trimEnd", "Symbol.toPrimitive"]}, {"path": "./test262-main/test/built-ins/String/prototype/trimEnd/this-value-object-tostring-meth-err.js", "esid": " sec-string.prototype.trimEnd", "description": " >Abrupt completion when toString called and abrupt completes.\n", "info": " |Runtime Semantics: TrimString ( string, where )\n1. Let str be ? RequireObjectCoercible(string).\n2. Let S be ? ToString(str).\n...\n\nToString ( argument )\nIf argument is Object:\n1. Let primValue be ? ToPrimitive(argument, hint String).\n...\n\nToPrimitive ( input [, PreferredType ])\n...\nb. Else if PreferredType is hint String, let hint be \"string\".\n...\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive)\ne. If exoticToPrim is not undefined, then\ni. Let result be ? Call(exoticToPrim, input, \u00ab hint \u00bb).\nii. If Type(result) is not Object, return result.\niii. Throw a TypeError exception.\nf. If hint is \"default\", set hint to \"number\".\ng. Return ? OrdinaryToPrimitive(input, hint).\n...\n\nOrdinaryToPrimitive( O, hint )\n...\n3. If hint is \"string\", then\na. Let methodNames be \u00ab \"toString\", \"valueOf\" \u00bb.\n...\n5. For each name in methodNames in List order, do\na. Let method be ? Get(O, name).\nb. If IsCallable(method) is true, then\ni. Let result be ? Call(method, O).\n", "features": ["string-trimming", "String.prototype.trimEnd", "Symbol.toPrimitive"]}, {"path": "./test262-main/test/built-ins/String/prototype/trimEnd/this-value-object-tostring-meth-priority.js", "esid": " sec-string.prototype.trimEnd", "description": " >Priority of toString when converting object to string for trimming\n", "info": " |Runtime Semantics: TrimString ( string, where )\n1. Let str be ? RequireObjectCoercible(string).\n2. Let S be ? ToString(str).\n...\n\nToString ( argument )\nIf argument is Object:\n1. Let primValue be ? ToPrimitive(argument, hint String).\n...\n\nToPrimitive ( input [, PreferredType ])\n...\nb. Else if PreferredType is hint String, let hint be \"string\".\n...\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive)\ne. If exoticToPrim is not undefined, then\ni. Let result be ? Call(exoticToPrim, input, \u00ab hint \u00bb).\nii. If Type(result) is not Object, return result.\niii. Throw a TypeError exception.\nf. If hint is \"default\", set hint to \"number\".\ng. Return ? OrdinaryToPrimitive(input, hint).\n...\n\nOrdinaryToPrimitive( O, hint )\n...\n3. If hint is \"string\", then\na. Let methodNames be \u00ab \"toString\", \"valueOf\" \u00bb.\n...\n5. For each name in methodNames in List order, do\na. Let method be ? Get(O, name).\nb. If IsCallable(method) is true, then\ni. Let result be ? Call(method, O).\nii. If Type(result) is not Object, return result.\n...\n", "features": ["string-trimming", "String.prototype.trimEnd", "Symbol.toPrimitive"]}, {"path": "./test262-main/test/built-ins/String/prototype/trimEnd/this-value-object-tostring-returns-object-err.js", "esid": " sec-string.prototype.trimEnd", "description": " >Abrupt completion when toString called and returns an object\n", "info": " |Runtime Semantics: TrimString ( string, where )\n1. Let str be ? RequireObjectCoercible(string).\n2. Let S be ? ToString(str).\n...\n\nToString ( argument )\nIf argument is Object:\n1. Let primValue be ? ToPrimitive(argument, hint String).\n...\n\nToPrimitive ( input [, PreferredType ])\n...\nb. Else if PreferredType is hint String, let hint be \"string\".\n...\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive)\ne. If exoticToPrim is not undefined, then\ni. Let result be ? Call(exoticToPrim, input, \u00ab hint \u00bb).\nii. If Type(result) is not Object, return result.\niii. Throw a TypeError exception.\nf. If hint is \"default\", set hint to \"number\".\ng. Return ? OrdinaryToPrimitive(input, hint).\n...\n\nOrdinaryToPrimitive( O, hint )\n...\n3. If hint is \"string\", then\na. Let methodNames be \u00ab \"toString\", \"valueOf\" \u00bb.\n...\n5. For each name in methodNames in List order, do\na. Let method be ? Get(O, name).\nb. If IsCallable(method) is true, then\ni. Let result be ? Call(method, O).\nii. If Type(result) is not Object, return result.\n6. Throw a TypeError exception.\n", "features": ["string-trimming", "String.prototype.trimEnd", "Symbol.toPrimitive"]}, {"path": "./test262-main/test/built-ins/String/prototype/trimEnd/this-value-object-valueof-call-err.js", "esid": " sec-string.prototype.trimEnd", "description": " >Abrupt completion when getting valueOf method\n", "info": " |Runtime Semantics: TrimString ( string, where )\n1. Let str be ? RequireObjectCoercible(string).\n2. Let S be ? ToString(str).\n...\n\nToString ( argument )\nIf argument is Object:\n1. Let primValue be ? ToPrimitive(argument, hint String).\n...\n\nToPrimitive ( input [, PreferredType ])\n...\nb. Else if PreferredType is hint String, let hint be \"string\".\n...\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive)\ne. If exoticToPrim is not undefined, then\ni. Let result be ? Call(exoticToPrim, input, \u00ab hint \u00bb).\nii. If Type(result) is not Object, return result.\niii. Throw a TypeError exception.\nf. If hint is \"default\", set hint to \"number\".\ng. Return ? OrdinaryToPrimitive(input, hint).\n...\n\nOrdinaryToPrimitive( O, hint )\n...\n3. If hint is \"string\", then\na. Let methodNames be \u00ab \"toString\", \"valueOf\" \u00bb.\n...\n5. For each name in methodNames in List order, do\na. Let method be ? Get(O, name).\n", "features": ["string-trimming", "String.prototype.trimEnd", "Symbol.toPrimitive"]}, {"path": "./test262-main/test/built-ins/String/prototype/trimEnd/this-value-object-valueof-meth-err.js", "esid": " sec-string.prototype.trimEnd", "description": " >Abrupt completion when valueOf called and abrupt completes.\n", "info": " |Runtime Semantics: TrimString ( string, where )\n1. Let str be ? RequireObjectCoercible(string).\n2. Let S be ? ToString(str).\n...\n\nToString ( argument )\nIf argument is Object:\n1. Let primValue be ? ToPrimitive(argument, hint String).\n...\n\nToPrimitive ( input [, PreferredType ])\n...\nb. Else if PreferredType is hint String, let hint be \"string\".\n...\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive)\ne. If exoticToPrim is not undefined, then\ni. Let result be ? Call(exoticToPrim, input, \u00ab hint \u00bb).\nii. If Type(result) is not Object, return result.\niii. Throw a TypeError exception.\nf. If hint is \"default\", set hint to \"number\".\ng. Return ? OrdinaryToPrimitive(input, hint).\n...\n\nOrdinaryToPrimitive( O, hint )\n...\n3. If hint is \"string\", then\na. Let methodNames be \u00ab \"toString\", \"valueOf\" \u00bb.\n...\n5. For each name in methodNames in List order, do\na. Let method be ? Get(O, name).\nb. If IsCallable(method) is true, then\ni. Let result be ? Call(method, O).\n", "features": ["string-trimming", "String.prototype.trimEnd", "Symbol.toPrimitive"]}, {"path": "./test262-main/test/built-ins/String/prototype/trimEnd/this-value-object-valueof-meth-priority.js", "esid": " sec-string.prototype.trimEnd", "description": " >Priority of valueOf when converting object to string for trimming\n", "info": " |Runtime Semantics: TrimString ( string, where )\n1. Let str be ? RequireObjectCoercible(string).\n2. Let S be ? ToString(str).\n...\n\nToString ( argument )\nIf argument is Object:\n1. Let primValue be ? ToPrimitive(argument, hint String).\n...\n\nToPrimitive ( input [, PreferredType ])\n...\nb. Else if PreferredType is hint String, let hint be \"string\".\n...\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive)\ne. If exoticToPrim is not undefined, then\ni. Let result be ? Call(exoticToPrim, input, \u00ab hint \u00bb).\nii. If Type(result) is not Object, return result.\niii. Throw a TypeError exception.\nf. If hint is \"default\", set hint to \"number\".\ng. Return ? OrdinaryToPrimitive(input, hint).\n...\n\nOrdinaryToPrimitive( O, hint )\n...\n3. If hint is \"string\", then\na. Let methodNames be \u00ab \"toString\", \"valueOf\" \u00bb.\n...\n5. For each name in methodNames in List order, do\na. Let method be ? Get(O, name).\nb. If IsCallable(method) is true, then\ni. Let result be ? Call(method, O).\nii. If Type(result) is not Object, return result.\n...\n", "features": ["string-trimming", "String.prototype.trimEnd", "Symbol.toPrimitive"]}, {"path": "./test262-main/test/built-ins/String/prototype/trimEnd/this-value-object-valueof-returns-object-err.js", "esid": " sec-string.prototype.trimEnd", "description": " >Abrupt completion when valueOf called and returns an object\n", "info": " |Runtime Semantics: TrimString ( string, where )\n1. Let str be ? RequireObjectCoercible(string).\n2. Let S be ? ToString(str).\n...\n\nToString ( argument )\nIf argument is Object:\n1. Let primValue be ? ToPrimitive(argument, hint String).\n...\n\nToPrimitive ( input [, PreferredType ])\n...\nb. Else if PreferredType is hint String, let hint be \"string\".\n...\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive)\ne. If exoticToPrim is not undefined, then\ni. Let result be ? Call(exoticToPrim, input, \u00ab hint \u00bb).\nii. If Type(result) is not Object, return result.\niii. Throw a TypeError exception.\nf. If hint is \"default\", set hint to \"number\".\ng. Return ? OrdinaryToPrimitive(input, hint).\n...\n\nOrdinaryToPrimitive( O, hint )\n...\n3. If hint is \"string\", then\na. Let methodNames be \u00ab \"toString\", \"valueOf\" \u00bb.\n...\n5. For each name in methodNames in List order, do\na. Let method be ? Get(O, name).\nb. If IsCallable(method) is true, then\ni. Let result be ? Call(method, O).\nii. If Type(result) is not Object, return result.\n6. Throw a TypeError exception.\n", "features": ["string-trimming", "String.prototype.trimEnd", "Symbol.toPrimitive"]}, {"path": "./test262-main/test/built-ins/String/prototype/trimEnd/this-value-symbol-typeerror.js", "esid": " sec-string.prototype.trimEnd", "description": " Type error when \"this\" value is a Symbol", "info": " |Runtime Semantics: TrimString ( string, where )\n2. Let S be ? ToString(str).\n\nToString ( argument )\nArgument Type: Symbol\nResult: Throw a TypeError exception\n", "features": ["string-trimming", "String.prototype.trimEnd"]}, {"path": "./test262-main/test/built-ins/String/prototype/trimEnd/this-value-whitespace.js", "esid": " sec-string.prototype.trimEnd", "description": " TrimEnd removes all whitespace from the end of a string.", "info": " |Runtime Symantics: TrimString ( string, where )\n...\n3. Else if where is \"end\", let T be a String value that is a copy of S with\ntrailing white space removed.\n...\n\nThe definition of white space is the union of WhiteSpace and LineTerminator.\nWhen determining whether a Unicode code point is in Unicode general category\n\u201cZs\u201d, code unit sequences are interpreted as UTF-16 encoded code point\nsequences as specified in 6.1.4.\n\n", "features": ["string-trimming", "String.prototype.trimEnd"]}, {"path": "./test262-main/test/built-ins/String/prototype/trimStart/length.js", "esid": " sec-string.prototype.trimStart", "description": " >String.prototype.trimStart.length is 0.\n", "info": " >String.prototype.trimStart ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["string-trimming", "String.prototype.trimStart"]}, {"path": "./test262-main/test/built-ins/String/prototype/trimStart/name.js", "esid": " sec-string.prototype.trimStart", "description": " >String.prototype.trimStart.name is \"trimStart\".\n", "info": " >String.prototype.trimStart ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["string-trimming", "String.prototype.trimStart"]}, {"path": "./test262-main/test/built-ins/String/prototype/trimStart/prop-desc.js", "esid": " sec-string.prototype.trimStart", "description": " >\"trimStart\" property of String.prototype\n", "info": " >17 ECMAScript Standard Built-in Objects:\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2\nhas the attributes { [[Writable]]: true, [[Enumerable]]: false,\n[[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js"], "features": ["string-trimming", "String.prototype.trimStart"]}, {"path": "./test262-main/test/built-ins/String/prototype/trimStart/this-value-boolean.js", "esid": " sec-string.prototype.trimStart", "description": " Behavior when \"this\" value is a boolean.", "info": " |Runtime Semantics: TrimString ( string, where )\n2. Let S be ? ToString(str).\n\nToString ( argument )\nArgument Type: Boolean\nResult:\nIf argument is true, return \"true\".\nIf argument is false, return \"false\".\n", "features": ["string-trimming", "String.prototype.trimStart"]}, {"path": "./test262-main/test/built-ins/String/prototype/trimStart/this-value-line-terminator.js", "esid": " sec-string.prototype.trimStart", "description": " TrimStart removes all line terminators from the start of a string.", "info": " |Runtime Symantics: TrimString ( string, where )\n...\n4. If where is \"start\", let T be a String value that is a copy of S with\ntrailing white space removed.\n...\n\nThe definition of white space is the union of WhiteSpace and LineTerminator.\n\n", "features": ["string-trimming", "String.prototype.trimStart"]}, {"path": "./test262-main/test/built-ins/String/prototype/trimStart/this-value-not-obj-coercible.js", "esid": " sec-string.prototype.trimStart", "description": " The \"this\" value must be object-coercible", "info": " |1. Let O be ? RequireObjectCoercible(this value).\n", "features": ["string-trimming", "String.prototype.trimStart"]}, {"path": "./test262-main/test/built-ins/String/prototype/trimStart/this-value-number.js", "esid": " sec-string.prototype.trimStart", "description": " Behavoir when \"this\" value is a number.", "info": " |Runtime Semantics: TrimString ( string, where )\n2. Let S be ? ToString(str).\n\nToString ( argument )\nArgument Type: Number\nResult: NumberToString(argument)\n", "features": ["string-trimming", "String.prototype.trimStart"]}, {"path": "./test262-main/test/built-ins/String/prototype/trimStart/this-value-object-cannot-convert-to-primitive-err.js", "esid": " sec-string.prototype.trimStart", "description": " >This value is an object which cannot be converted to a primitive\n", "info": " |Runtime Semantics: TrimString ( string, where )\n1. Let str be ? RequireObjectCoercible(string).\n2. Let S be ? ToString(str).\n...\n\nToString ( argument )\nIf argument is Object:\n1. Let primValue be ? ToPrimitive(argument, hint String).\n...\n\nToPrimitive ( input [, PreferredType ])\n...\nb. Else if PreferredType is hint String, let hint be \"string\".\n...\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive)\ne. If exoticToPrim is not undefined, then\ni. Let result be ? Call(exoticToPrim, input, \u00ab hint \u00bb).\nii. If Type(result) is not Object, return result.\niii. Throw a TypeError exception.\nf. If hint is \"default\", set hint to \"number\".\ng. Return ? OrdinaryToPrimitive(input, hint).\n...\n\nOrdinaryToPrimitive( O, hint )\n...\n3. If hint is \"string\", then\na. Let methodNames be \u00ab \"toString\", \"valueOf\" \u00bb.\n...\n5. For each name in methodNames in List order, do\na. Let method be ? Get(O, name).\nb. If IsCallable(method) is true, then\ni. Let result be ? Call(method, O).\nii. If Type(result) is not Object, return result.\n6. Throw a TypeError exception.\n", "features": ["string-trimming", "String.prototype.trimStart", "Symbol.toPrimitive"]}, {"path": "./test262-main/test/built-ins/String/prototype/trimStart/this-value-object-toprimitive-call-err.js", "esid": " sec-string.prototype.trimStart", "description": " >Abrupt completion when getting Symbol.toPrimitive method\n", "info": " |Runtime Semantics: TrimString ( string, where )\n1. Let str be ? RequireObjectCoercible(string).\n2. Let S be ? ToString(str).\n...\n\nToString ( argument )\nIf argument is Object:\n1. Let primValue be ? ToPrimitive(argument, hint String).\n...\n\nToPrimitive ( input [, PreferredType ])\n...\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive).\n...\n", "features": ["string-trimming", "String.prototype.trimStart", "Symbol.toPrimitive"]}, {"path": "./test262-main/test/built-ins/String/prototype/trimStart/this-value-object-toprimitive-meth-err.js", "esid": " sec-string.prototype.trimStart", "description": " >Abrupt completion when Symbol.toPrimitive abrupt completes.\n", "info": " |Runtime Semantics: TrimString ( string, where )\n1. Let str be ? RequireObjectCoercible(string).\n2. Let S be ? ToString(str).\n...\n\nToString ( argument )\nIf argument is Object:\n1. Let primValue be ? ToPrimitive(argument, hint String).\n...\n\nToPrimitive ( input [, PreferredType ])\n...\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive).\ne. If exoticToPrim is not undefined, then\ni. Let result be ? Call(exoticToPrim, input, \u00ab hint \u00bb).\n...\n", "features": ["string-trimming", "String.prototype.trimStart", "Symbol.toPrimitive"]}, {"path": "./test262-main/test/built-ins/String/prototype/trimStart/this-value-object-toprimitive-meth-priority.js", "esid": " sec-string.prototype.trimStart", "description": " >Priority of Symbol[toPrimitive] when converting object to string for trimming\n", "info": " |Runtime Semantics: TrimString ( string, where )\n1. Let str be ? RequireObjectCoercible(string).\n2. Let S be ? ToString(str).\n...\n\nToString ( argument )\nIf argument is Object:\n1. Let primValue be ? ToPrimitive(argument, hint String).\n...\n\nToPrimitive ( input [, PreferredType ])\n...\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive)\ne. If exoticToPrim is not undefined, then\ni. Let result be ? Call(exoticToPrim, input, \u00ab hint \u00bb).\nii. If Type(result) is not Object, return result.\n...\n", "features": ["string-trimming", "String.prototype.trimStart", "Symbol.toPrimitive"]}, {"path": "./test262-main/test/built-ins/String/prototype/trimStart/this-value-object-toprimitive-returns-object-err.js", "esid": " sec-string.prototype.trimStart", "description": " >Abrupt completion when Symbol.toPrimitive returns an object\n", "info": " |Runtime Semantics: TrimString ( string, where )\n1. Let str be ? RequireObjectCoercible(string).\n2. Let S be ? ToString(str).\n...\n\nToString ( argument )\nIf arguement is Object:\n1. Let primValue be ? ToPrimitive(argument, hint String).\n...\n\nToPrimitive ( input [, PreferredType ])\n...\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive).\ne. If exoticToPrim is not undefined, then\ni. Let result be ? Call(exoticToPrim, input, \u00ab hint \u00bb).\nii. If Type(result) is not Object, return result.\niii. Throw a TypeError exception.\n...\n", "features": ["string-trimming", "String.prototype.trimStart", "Symbol.toPrimitive"]}, {"path": "./test262-main/test/built-ins/String/prototype/trimStart/this-value-object-tostring-call-err.js", "esid": " sec-string.prototype.trimStart", "description": " >Abrupt completion when getting toString method\n", "info": " |Runtime Semantics: TrimString ( string, where )\n1. Let str be ? RequireObjectCoercible(string).\n2. Let S be ? ToString(str).\n...\n\nToString ( argument )\nIf argument is Object:\n1. Let primValue be ? ToPrimitive(argument, hint String).\n...\n\nToPrimitive ( input [, PreferredType ])\n...\nb. Else if PreferredType is hint String, let hint be \"string\".\n...\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive)\ne. If exoticToPrim is not undefined, then\ni. Let result be ? Call(exoticToPrim, input, \u00ab hint \u00bb).\nii. If Type(result) is not Object, return result.\niii. Throw a TypeError exception.\nf. If hint is \"default\", set hint to \"number\".\ng. Return ? OrdinaryToPrimitive(input, hint).\n...\n\nOrdinaryToPrimitive( O, hint )\n...\n3. If hint is \"string\", then\na. Let methodNames be \u00ab \"toString\", \"valueOf\" \u00bb.\n...\n5. For each name in methodNames in List order, do\na. Let method be ? Get(O, name).\n", "features": ["string-trimming", "String.prototype.trimStart", "Symbol.toPrimitive"]}, {"path": "./test262-main/test/built-ins/String/prototype/trimStart/this-value-object-tostring-meth-err.js", "esid": " sec-string.prototype.trimStart", "description": " >Abrupt completion when toString called and abrupt completes.\n", "info": " |Runtime Semantics: TrimString ( string, where )\n1. Let str be ? RequireObjectCoercible(string).\n2. Let S be ? ToString(str).\n...\n\nToString ( argument )\nIf argument is Object:\n1. Let primValue be ? ToPrimitive(argument, hint String).\n...\n\nToPrimitive ( input [, PreferredType ])\n...\nb. Else if PreferredType is hint String, let hint be \"string\".\n...\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive)\ne. If exoticToPrim is not undefined, then\ni. Let result be ? Call(exoticToPrim, input, \u00ab hint \u00bb).\nii. If Type(result) is not Object, return result.\niii. Throw a TypeError exception.\nf. If hint is \"default\", set hint to \"number\".\ng. Return ? OrdinaryToPrimitive(input, hint).\n...\n\nOrdinaryToPrimitive( O, hint )\n...\n3. If hint is \"string\", then\na. Let methodNames be \u00ab \"toString\", \"valueOf\" \u00bb.\n...\n5. For each name in methodNames in List order, do\na. Let method be ? Get(O, name).\nb. If IsCallable(method) is true, then\ni. Let result be ? Call(method, O).\n", "features": ["string-trimming", "String.prototype.trimStart", "Symbol.toPrimitive"]}, {"path": "./test262-main/test/built-ins/String/prototype/trimStart/this-value-object-tostring-meth-priority.js", "esid": " sec-string.prototype.trimStart", "description": " >Priority of toString when converting object to string for trimming\n", "info": " |Runtime Semantics: TrimString ( string, where )\n1. Let str be ? RequireObjectCoercible(string).\n2. Let S be ? ToString(str).\n...\n\nToString ( argument )\nIf argument is Object:\n1. Let primValue be ? ToPrimitive(argument, hint String).\n...\n\nToPrimitive ( input [, PreferredType ])\n...\nb. Else if PreferredType is hint String, let hint be \"string\".\n...\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive)\ne. If exoticToPrim is not undefined, then\ni. Let result be ? Call(exoticToPrim, input, \u00ab hint \u00bb).\nii. If Type(result) is not Object, return result.\niii. Throw a TypeError exception.\nf. If hint is \"default\", set hint to \"number\".\ng. Return ? OrdinaryToPrimitive(input, hint).\n...\n\nOrdinaryToPrimitive( O, hint )\n...\n3. If hint is \"string\", then\na. Let methodNames be \u00ab \"toString\", \"valueOf\" \u00bb.\n...\n5. For each name in methodNames in List order, do\na. Let method be ? Get(O, name).\nb. If IsCallable(method) is true, then\ni. Let result be ? Call(method, O).\nii. If Type(result) is not Object, return result.\n...\n", "features": ["string-trimming", "String.prototype.trimStart", "Symbol.toPrimitive"]}, {"path": "./test262-main/test/built-ins/String/prototype/trimStart/this-value-object-tostring-returns-object-err.js", "esid": " sec-string.prototype.trimStart", "description": " >Abrupt completion when toString called and returns an object\n", "info": " |Runtime Semantics: TrimString ( string, where )\n1. Let str be ? RequireObjectCoercible(string).\n2. Let S be ? ToString(str).\n...\n\nToString ( argument )\nIf argument is Object:\n1. Let primValue be ? ToPrimitive(argument, hint String).\n...\n\nToPrimitive ( input [, PreferredType ])\n...\nb. Else if PreferredType is hint String, let hint be \"string\".\n...\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive)\ne. If exoticToPrim is not undefined, then\ni. Let result be ? Call(exoticToPrim, input, \u00ab hint \u00bb).\nii. If Type(result) is not Object, return result.\niii. Throw a TypeError exception.\nf. If hint is \"default\", set hint to \"number\".\ng. Return ? OrdinaryToPrimitive(input, hint).\n...\n\nOrdinaryToPrimitive( O, hint )\n...\n3. If hint is \"string\", then\na. Let methodNames be \u00ab \"toString\", \"valueOf\" \u00bb.\n...\n5. For each name in methodNames in List order, do\na. Let method be ? Get(O, name).\nb. If IsCallable(method) is true, then\ni. Let result be ? Call(method, O).\nii. If Type(result) is not Object, return result.\n6. Throw a TypeError exception.\n", "features": ["string-trimming", "String.prototype.trimStart", "Symbol.toPrimitive"]}, {"path": "./test262-main/test/built-ins/String/prototype/trimStart/this-value-object-valueof-call-err.js", "esid": " sec-string.prototype.trimStart", "description": " >Abrupt completion when getting valueOf method\n", "info": " |Runtime Semantics: TrimString ( string, where )\n1. Let str be ? RequireObjectCoercible(string).\n2. Let S be ? ToString(str).\n...\n\nToString ( argument )\nIf argument is Object:\n1. Let primValue be ? ToPrimitive(argument, hint String).\n...\n\nToPrimitive ( input [, PreferredType ])\n...\nb. Else if PreferredType is hint String, let hint be \"string\".\n...\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive)\ne. If exoticToPrim is not undefined, then\ni. Let result be ? Call(exoticToPrim, input, \u00ab hint \u00bb).\nii. If Type(result) is not Object, return result.\niii. Throw a TypeError exception.\nf. If hint is \"default\", set hint to \"number\".\ng. Return ? OrdinaryToPrimitive(input, hint).\n...\n\nOrdinaryToPrimitive( O, hint )\n...\n3. If hint is \"string\", then\na. Let methodNames be \u00ab \"toString\", \"valueOf\" \u00bb.\n...\n5. For each name in methodNames in List order, do\na. Let method be ? Get(O, name).\n", "features": ["string-trimming", "Symbol.toPrimitive"]}, {"path": "./test262-main/test/built-ins/String/prototype/trimStart/this-value-object-valueof-meth-err.js", "esid": " sec-string.prototype.trimStart", "description": " >Abrupt completion when valueOf called and abrupt completes.\n", "info": " |Runtime Semantics: TrimString ( string, where )\n1. Let str be ? RequireObjectCoercible(string).\n2. Let S be ? ToString(str).\n...\n\nToString ( argument )\nIf argument is Object:\n1. Let primValue be ? ToPrimitive(argument, hint String).\n...\n\nToPrimitive ( input [, PreferredType ])\n...\nb. Else if PreferredType is hint String, let hint be \"string\".\n...\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive)\ne. If exoticToPrim is not undefined, then\ni. Let result be ? Call(exoticToPrim, input, \u00ab hint \u00bb).\nii. If Type(result) is not Object, return result.\niii. Throw a TypeError exception.\nf. If hint is \"default\", set hint to \"number\".\ng. Return ? OrdinaryToPrimitive(input, hint).\n...\n\nOrdinaryToPrimitive( O, hint )\n...\n3. If hint is \"string\", then\na. Let methodNames be \u00ab \"toString\", \"valueOf\" \u00bb.\n...\n5. For each name in methodNames in List order, do\na. Let method be ? Get(O, name).\nb. If IsCallable(method) is true, then\ni. Let result be ? Call(method, O).\n", "features": ["string-trimming", "String.prototype.trimStart", "Symbol.toPrimitive"]}, {"path": "./test262-main/test/built-ins/String/prototype/trimStart/this-value-object-valueof-meth-priority.js", "esid": " sec-string.prototype.trimStart", "description": " >Priority of valueOf when converting object to string for trimming\n", "info": " |Runtime Semantics: TrimString ( string, where )\n1. Let str be ? RequireObjectCoercible(string).\n2. Let S be ? ToString(str).\n...\n\nToString ( argument )\nIf argument is Object:\n1. Let primValue be ? ToPrimitive(argument, hint String).\n...\n\nToPrimitive ( input [, PreferredType ])\n...\nb. Else if PreferredType is hint String, let hint be \"string\".\n...\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive)\ne. If exoticToPrim is not undefined, then\ni. Let result be ? Call(exoticToPrim, input, \u00ab hint \u00bb).\nii. If Type(result) is not Object, return result.\niii. Throw a TypeError exception.\nf. If hint is \"default\", set hint to \"number\".\ng. Return ? OrdinaryToPrimitive(input, hint).\n...\n\nOrdinaryToPrimitive( O, hint )\n...\n3. If hint is \"string\", then\na. Let methodNames be \u00ab \"toString\", \"valueOf\" \u00bb.\n...\n5. For each name in methodNames in List order, do\na. Let method be ? Get(O, name).\nb. If IsCallable(method) is true, then\ni. Let result be ? Call(method, O).\nii. If Type(result) is not Object, return result.\n...\n", "features": ["string-trimming", "String.prototype.trimStart", "Symbol.toPrimitive"]}, {"path": "./test262-main/test/built-ins/String/prototype/trimStart/this-value-object-valueof-returns-object-err.js", "esid": " sec-string.prototype.trimStart", "description": " >Abrupt completion when valueOf called and returns an object\n", "info": " |Runtime Semantics: TrimString ( string, where )\n1. Let str be ? RequireObjectCoercible(string).\n2. Let S be ? ToString(str).\n...\n\nToString ( argument )\nIf argument is Object:\n1. Let primValue be ? ToPrimitive(argument, hint String).\n...\n\nToPrimitive ( input [, PreferredType ])\n...\nb. Else if PreferredType is hint String, let hint be \"string\".\n...\nd. Let exoticToPrim be ? GetMethod(input, @@toPrimitive)\ne. If exoticToPrim is not undefined, then\ni. Let result be ? Call(exoticToPrim, input, \u00ab hint \u00bb).\nii. If Type(result) is not Object, return result.\niii. Throw a TypeError exception.\nf. If hint is \"default\", set hint to \"number\".\ng. Return ? OrdinaryToPrimitive(input, hint).\n...\n\nOrdinaryToPrimitive( O, hint )\n...\n3. If hint is \"string\", then\na. Let methodNames be \u00ab \"toString\", \"valueOf\" \u00bb.\n...\n5. For each name in methodNames in List order, do\na. Let method be ? Get(O, name).\nb. If IsCallable(method) is true, then\ni. Let result be ? Call(method, O).\nii. If Type(result) is not Object, return result.\n6. Throw a TypeError exception.\n", "features": ["string-trimming", "String.prototype.trimStart", "Symbol.toPrimitive"]}, {"path": "./test262-main/test/built-ins/String/prototype/trimStart/this-value-symbol-typeerror.js", "esid": " sec-string.prototype.trimStart", "description": " Type error when \"this\" value is a Symbol", "info": " |Runtime Semantics: TrimString ( string, where )\n2. Let S be ? ToString(str).\n\nToString ( argument )\nArgument Type: Symbol\nResult: Throw a TypeError exception\n", "features": ["string-trimming", "String.prototype.trimStart"]}, {"path": "./test262-main/test/built-ins/String/prototype/trimStart/this-value-whitespace.js", "esid": " sec-string.prototype.trimStart", "description": " TrimStart removes all whitespace from the start of a string.", "info": " |Runtime Symantics: TrimString ( string, where )\n...\n3. If where is \"start\", let T be a String value that is a copy of S with\ntrailing white space removed.\n...\n\nThe definition of white space is the union of WhiteSpace and LineTerminator.\nWhen determining whether a Unicode code point is in Unicode general category\n\u201cZs\u201d, code unit sequences are interpreted as UTF-16 encoded code point\nsequences as specified in 6.1.4.\n\n", "features": ["string-trimming", "String.prototype.trimStart"]}, {"path": "./test262-main/test/built-ins/Symbol/matchAll/prop-desc.js", "esid": " pending", "description": " |`Symbol.matchAll` property descriptor\n", "info": " |This property has the attributes { [[Writable]]: false, [[Enumerable]]:\nfalse, [[Configurable]]: false }.\n", "includes": ["propertyHelper.js"], "features": ["Symbol.matchAll"]}, {"path": "./test262-main/test/built-ins/Symbol/prototype/description/description-symboldescriptivestring.js", "esid": " sec-symbol.prototype.description", "description": " >SymbolDescriptiveString(sym) via Symbol.prototype.toString()\n", "info": " |SymbolDescriptiveString ( sym )\n\nAssert: Type(sym) is Symbol.\nLet desc be sym's [[Description]] value.\nIf desc is undefined, let desc be the empty string.\nAssert: Type(desc) is String.\nReturn the string-concatenation of \"Symbol(\", desc, and \")\".\n\n", "features": ["Symbol.prototype.description"]}, {"path": "./test262-main/test/built-ins/Symbol/prototype/description/descriptor.js", "esid": " sec-symbol.prototype.description", "description": " >Test the descriptor of Symbol.prototype.description.\n", "info": " |`Symbol.prototype.description` is an accessor property whose\nset accessor function is undefined.\n", "includes": ["propertyHelper.js"], "features": ["Symbol.prototype.description"]}, {"path": "./test262-main/test/built-ins/Symbol/prototype/description/get.js", "esid": " sec-symbol.prototype.description", "description": " >Test the get accessor function of Symbol.prototype.description.\n", "info": " |1. Let s be the this value.\n2. Let sym be ? thisSymbolValue(s).\n3. Return sym.[[Description]].\n", "features": ["Symbol.prototype.description"]}, {"path": "./test262-main/test/built-ins/Symbol/prototype/description/this-val-non-symbol.js", "esid": " sec-symbol.prototype.description", "description": " >Behavior when \"this\" value is an object without a [[SymbolData]] internal\nslot.\n", "info": " |1. Let s be the this value.\n2. Let sym be ? thisSymbolValue(s).\n3. Return sym.[[Description]].\n", "features": ["Symbol.prototype.description"]}, {"path": "./test262-main/test/built-ins/Symbol/prototype/description/this-val-symbol.js", "esid": " sec-symbol.prototype.description", "description": " >Test that calling the getter on a Symbol or a Symbol wrapper object works.\n", "info": " |1. Let s be the this value.\n2. Let sym be ? thisSymbolValue(s).\n3. Return sym.[[Description]].\n", "features": ["Symbol.prototype.description"]}, {"path": "./test262-main/test/built-ins/Symbol/prototype/description/wrapper.js", "esid": " sec-symbol.prototype.description", "description": " >Test Symbol.prototype.description called on wrapper objects.\n", "info": " |1. Let s be the this value.\n2. Let sym be ? thisSymbolValue(s).\n3. Return sym.[[Description]].\n", "features": ["Symbol.prototype.description"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/Symbol.toStringTag/BigInt/return-typedarrayname.js", "esid": " sec-get-%typedarray%.prototype-@@tostringtag", "description": " >Return value from the [[TypedArrayName]] internal slot\n", "info": " |22.2.3.32 get %TypedArray%.prototype [ @@toStringTag ]\n\n...\n4. Let name be the value of O's [[TypedArrayName]] internal slot.\n5. Assert: name is a String value.\n6. Return name.\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol.toStringTag", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/buffer/BigInt/return-buffer.js", "esid": " sec-get-%typedarray%.prototype.buffer", "description": " >Return buffer from [[ViewedArrayBuffer]] internal slot\n", "info": " |22.2.3.1 get %TypedArray%.prototype.buffer\n\n...\n4. Let buffer be the value of O's [[ViewedArrayBuffer]] internal slot.\n5. Return buffer.\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/byteLength/BigInt/return-bytelength.js", "esid": " sec-get-%typedarray%.prototype.bytelength", "description": " >Return value from [[ByteLength]] internal slot\n", "info": " |22.2.3.2 get %TypedArray%.prototype.byteLength\n\n...\n6. Let size be the value of O's [[ByteLength]] internal slot.\n7. Return size.\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/byteOffset/BigInt/return-byteoffset.js", "esid": " sec-get-%typedarray%.prototype.byteoffset", "description": " >Return value from [[ByteOffset]] internal slot\n", "info": " |22.2.3.3 get %TypedArray%.prototype.byteOffset\n\n...\n6. Let offset be the value of O's [[ByteOffset]] internal slot.\n7. Return size.\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/copyWithin/BigInt/coerced-values-end.js", "esid": " sec-%typedarray%.prototype.copywithin", "description": " >end argument is coerced to an integer values.\n", "info": " |22.2.3.5 %TypedArray%.prototype.copyWithin (target, start [ , end ] )\n\n%TypedArray%.prototype.copyWithin is a distinct function that implements the\nsame algorithm as Array.prototype.copyWithin as defined in 22.1.3.3 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\" and the actual copying of values in step 12\nmust be performed in a manner that preserves the bit-level encoding of the\nsource data.\n\n...\n\n22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )\n\n...\n7. If end is undefined, let relativeEnd be len; else let relativeEnd be ?\nToInteger(end).\n...\n", "includes": ["compareArray.js", "testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/copyWithin/BigInt/coerced-values-start.js", "esid": " sec-%typedarray%.prototype.copywithin", "description": " >start argument is coerced to an integer value.\n", "info": " |22.2.3.5 %TypedArray%.prototype.copyWithin (target, start [ , end ] )\n\n%TypedArray%.prototype.copyWithin is a distinct function that implements the\nsame algorithm as Array.prototype.copyWithin as defined in 22.1.3.3 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\" and the actual copying of values in step 12\nmust be performed in a manner that preserves the bit-level encoding of the\nsource data.\n\n...\n\n22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )\n\n...\n5. Let relativeStart be ? ToInteger(start).\n...\n", "includes": ["compareArray.js", "testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/copyWithin/BigInt/coerced-values-target.js", "esid": " sec-%typedarray%.prototype.copywithin", "description": " >target argument is coerced to an integer value.\n", "info": " |22.2.3.5 %TypedArray%.prototype.copyWithin (target, start [ , end ] )\n\n%TypedArray%.prototype.copyWithin is a distinct function that implements the\nsame algorithm as Array.prototype.copyWithin as defined in 22.1.3.3 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\" and the actual copying of values in step 12\nmust be performed in a manner that preserves the bit-level encoding of the\nsource data.\n\n...\n\n22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )\n\n...\n3. Let relativeTarget be ? ToInteger(target).\n...\n", "includes": ["compareArray.js", "testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/copyWithin/BigInt/get-length-ignores-length-prop.js", "esid": " sec-%typedarray%.prototype.copywithin", "description": " >Unreachable abrupt from Get(O, \"length\") as [[ArrayLength]] is returned.\n", "info": " |22.2.3.5 %TypedArray%.prototype.copyWithin (target, start [ , end ] )\n\n%TypedArray%.prototype.copyWithin is a distinct function that implements the\nsame algorithm as Array.prototype.copyWithin as defined in 22.1.3.3 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\" and the actual copying of values in step 12\nmust be performed in a manner that preserves the bit-level encoding of the\nsource data.\n\n...\n\n22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )\n\n1. Let O be ? ToObject(this value).\n2. Let len be ? ToLength(? Get(O, \"length\")).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/copyWithin/BigInt/negative-end.js", "esid": " sec-%typedarray%.prototype.copywithin", "description": " >Set values with negative end argument.\n", "info": " |22.2.3.5 %TypedArray%.prototype.copyWithin (target, start [ , end ] )\n\n%TypedArray%.prototype.copyWithin is a distinct function that implements the\nsame algorithm as Array.prototype.copyWithin as defined in 22.1.3.3 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\" and the actual copying of values in step 12\nmust be performed in a manner that preserves the bit-level encoding of the\nsource data.\n\n...\n\n22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )\n\n...\n7. If end is undefined, let relativeEnd be len; else let relativeEnd be ?\nToInteger(end).\n8. If relativeEnd < 0, let final be max((len + relativeEnd), 0); else let\nfinal be min(relativeEnd, len).\n...\n", "includes": ["compareArray.js", "testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/copyWithin/BigInt/negative-out-of-bounds-end.js", "esid": " sec-%typedarray%.prototype.copywithin", "description": " >Set values with negative out of bounds end argument.\n", "info": " |22.2.3.5 %TypedArray%.prototype.copyWithin (target, start [ , end ] )\n\n%TypedArray%.prototype.copyWithin is a distinct function that implements the\nsame algorithm as Array.prototype.copyWithin as defined in 22.1.3.3 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\" and the actual copying of values in step 12\nmust be performed in a manner that preserves the bit-level encoding of the\nsource data.\n\n...\n\n22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )\n\n...\n7. If end is undefined, let relativeEnd be len; else let relativeEnd be ?\nToInteger(end).\n8. If relativeEnd < 0, let final be max((len + relativeEnd), 0); else let\nfinal be min(relativeEnd, len).\n...\n", "includes": ["compareArray.js", "testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/copyWithin/BigInt/negative-out-of-bounds-start.js", "esid": " sec-%typedarray%.prototype.copywithin", "description": " >Set values with out of bounds negative start argument.\n", "info": " |22.2.3.5 %TypedArray%.prototype.copyWithin (target, start [ , end ] )\n\n%TypedArray%.prototype.copyWithin is a distinct function that implements the\nsame algorithm as Array.prototype.copyWithin as defined in 22.1.3.3 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\" and the actual copying of values in step 12\nmust be performed in a manner that preserves the bit-level encoding of the\nsource data.\n\n...\n\n22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )\n\n...\n6. If relativeStart < 0, let from be max((len + relativeStart), 0); else let\nfrom be min(relativeStart, len).\n...\n", "includes": ["compareArray.js", "testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/copyWithin/BigInt/negative-out-of-bounds-target.js", "esid": " sec-%typedarray%.prototype.copywithin", "description": " >Set values with out of bounds negative target argument.\n", "info": " |22.2.3.5 %TypedArray%.prototype.copyWithin (target, start [ , end ] )\n\n%TypedArray%.prototype.copyWithin is a distinct function that implements the\nsame algorithm as Array.prototype.copyWithin as defined in 22.1.3.3 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\" and the actual copying of values in step 12\nmust be performed in a manner that preserves the bit-level encoding of the\nsource data.\n\n...\n\n22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )\n\n...\n4. If relativeTarget < 0, let to be max((len + relativeTarget), 0); else let\nto be min(relativeTarget, len).\n...\n", "includes": ["compareArray.js", "testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/copyWithin/BigInt/negative-start.js", "esid": " sec-%typedarray%.prototype.copywithin", "description": " >Set values with negative start argument.\n", "info": " |22.2.3.5 %TypedArray%.prototype.copyWithin (target, start [ , end ] )\n\n%TypedArray%.prototype.copyWithin is a distinct function that implements the\nsame algorithm as Array.prototype.copyWithin as defined in 22.1.3.3 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\" and the actual copying of values in step 12\nmust be performed in a manner that preserves the bit-level encoding of the\nsource data.\n\n...\n\n22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )\n\n...\n6. If relativeStart < 0, let from be max((len + relativeStart), 0); else let\nfrom be min(relativeStart, len).\n...\n", "includes": ["compareArray.js", "testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/copyWithin/BigInt/negative-target.js", "esid": " sec-%typedarray%.prototype.copywithin", "description": " >Set values with negative target argument.\n", "info": " |22.2.3.5 %TypedArray%.prototype.copyWithin (target, start [ , end ] )\n\n%TypedArray%.prototype.copyWithin is a distinct function that implements the\nsame algorithm as Array.prototype.copyWithin as defined in 22.1.3.3 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\" and the actual copying of values in step 12\nmust be performed in a manner that preserves the bit-level encoding of the\nsource data.\n\n...\n\n22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )\n\n...\n4. If relativeTarget < 0, let to be max((len + relativeTarget), 0); else let\nto be min(relativeTarget, len).\n...\n", "includes": ["compareArray.js", "testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/copyWithin/BigInt/non-negative-out-of-bounds-end.js", "esid": " sec-%typedarray%.prototype.copywithin", "description": " >Max value of end position is the this.length.\n", "info": " |22.2.3.5 %TypedArray%.prototype.copyWithin (target, start [ , end ] )\n\n%TypedArray%.prototype.copyWithin is a distinct function that implements the\nsame algorithm as Array.prototype.copyWithin as defined in 22.1.3.3 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\" and the actual copying of values in step 12\nmust be performed in a manner that preserves the bit-level encoding of the\nsource data.\n\n...\n", "includes": ["compareArray.js", "testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/copyWithin/BigInt/non-negative-out-of-bounds-target-and-start.js", "esid": " sec-%typedarray%.prototype.copywithin", "description": " >Max values of target and start positions are this.length.\n", "info": " |22.2.3.5 %TypedArray%.prototype.copyWithin (target, start [ , end ] )\n\n%TypedArray%.prototype.copyWithin is a distinct function that implements the\nsame algorithm as Array.prototype.copyWithin as defined in 22.1.3.3 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\" and the actual copying of values in step 12\nmust be performed in a manner that preserves the bit-level encoding of the\nsource data.\n\n...\n", "includes": ["compareArray.js", "testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/copyWithin/BigInt/non-negative-target-and-start.js", "esid": " sec-%typedarray%.prototype.copywithin", "description": " >Copy values with non-negative target and start positions.\n", "info": " |22.2.3.5 %TypedArray%.prototype.copyWithin (target, start [ , end ] )\n\n%TypedArray%.prototype.copyWithin is a distinct function that implements the\nsame algorithm as Array.prototype.copyWithin as defined in 22.1.3.3 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\" and the actual copying of values in step 12\nmust be performed in a manner that preserves the bit-level encoding of the\nsource data.\n\n...\n", "includes": ["compareArray.js", "testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/copyWithin/BigInt/non-negative-target-start-and-end.js", "esid": " sec-%typedarray%.prototype.copywithin", "description": " >Copy values with non-negative target, start and end positions.\n", "info": " |22.2.3.5 %TypedArray%.prototype.copyWithin (target, start [ , end ] )\n\n%TypedArray%.prototype.copyWithin is a distinct function that implements the\nsame algorithm as Array.prototype.copyWithin as defined in 22.1.3.3 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\" and the actual copying of values in step 12\nmust be performed in a manner that preserves the bit-level encoding of the\nsource data.\n\n...\n", "includes": ["compareArray.js", "testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/copyWithin/BigInt/return-abrupt-from-end-is-symbol.js", "esid": " sec-%typedarray%.prototype.copywithin", "description": " >Return abrupt if end is a Symbol.\n", "info": " |22.2.3.5 %TypedArray%.prototype.copyWithin (target, start [ , end ] )\n\n%TypedArray%.prototype.copyWithin is a distinct function that implements the\nsame algorithm as Array.prototype.copyWithin as defined in 22.1.3.3 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\" and the actual copying of values in step 12\nmust be performed in a manner that preserves the bit-level encoding of the\nsource data.\n\n...\n\n22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )\n\n...\n7. If end is undefined, let relativeEnd be len; else let relativeEnd be ?\nToInteger(end).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/copyWithin/BigInt/return-abrupt-from-end.js", "esid": " sec-%typedarray%.prototype.copywithin", "description": " >Return abrupt from ToInteger(end).\n", "info": " |22.2.3.5 %TypedArray%.prototype.copyWithin (target, start [ , end ] )\n\n%TypedArray%.prototype.copyWithin is a distinct function that implements the\nsame algorithm as Array.prototype.copyWithin as defined in 22.1.3.3 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\" and the actual copying of values in step 12\nmust be performed in a manner that preserves the bit-level encoding of the\nsource data.\n\n...\n\n22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )\n\n...\n7. If end is undefined, let relativeEnd be len; else let relativeEnd be ?\nToInteger(end).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/copyWithin/BigInt/return-abrupt-from-start-is-symbol.js", "esid": " sec-%typedarray%.prototype.copywithin", "description": " >Return abrupt if start is a Symbol.\n", "info": " |22.2.3.5 %TypedArray%.prototype.copyWithin (target, start [ , end ] )\n\n%TypedArray%.prototype.copyWithin is a distinct function that implements the\nsame algorithm as Array.prototype.copyWithin as defined in 22.1.3.3 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\" and the actual copying of values in step 12\nmust be performed in a manner that preserves the bit-level encoding of the\nsource data.\n\n...\n\n22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )\n\n...\n5. Let relativeStart be ? ToInteger(start).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/copyWithin/BigInt/return-abrupt-from-start.js", "esid": " sec-%typedarray%.prototype.copywithin", "description": " >Return abrupt from ToInteger(start).\n", "info": " |22.2.3.5 %TypedArray%.prototype.copyWithin (target, start [ , end ] )\n\n%TypedArray%.prototype.copyWithin is a distinct function that implements the\nsame algorithm as Array.prototype.copyWithin as defined in 22.1.3.3 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\" and the actual copying of values in step 12\nmust be performed in a manner that preserves the bit-level encoding of the\nsource data.\n\n...\n\n22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )\n\n...\n5. Let relativeStart be ? ToInteger(start).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/copyWithin/BigInt/return-abrupt-from-target-is-symbol.js", "esid": " sec-%typedarray%.prototype.copywithin", "description": " >Return abrupt if target is a Symbol.\n", "info": " |22.2.3.5 %TypedArray%.prototype.copyWithin (target, start [ , end ] )\n\n%TypedArray%.prototype.copyWithin is a distinct function that implements the\nsame algorithm as Array.prototype.copyWithin as defined in 22.1.3.3 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\" and the actual copying of values in step 12\nmust be performed in a manner that preserves the bit-level encoding of the\nsource data.\n\n...\n\n22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )\n\n...\n3. Let relativeTarget be ? ToInteger(target).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/copyWithin/BigInt/return-abrupt-from-target.js", "esid": " sec-%typedarray%.prototype.copywithin", "description": " >Return abrupt from ToInteger(target).\n", "info": " |22.2.3.5 %TypedArray%.prototype.copyWithin (target, start [ , end ] )\n\n%TypedArray%.prototype.copyWithin is a distinct function that implements the\nsame algorithm as Array.prototype.copyWithin as defined in 22.1.3.3 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\" and the actual copying of values in step 12\nmust be performed in a manner that preserves the bit-level encoding of the\nsource data.\n\n...\n\n22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )\n\n...\n3. Let relativeTarget be ? ToInteger(target).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/copyWithin/BigInt/return-this.js", "esid": " sec-%typedarray%.prototype.copywithin", "description": " >Returns `this`.\n", "info": " |22.2.3.5 %TypedArray%.prototype.copyWithin (target, start [ , end ] )\n\n%TypedArray%.prototype.copyWithin is a distinct function that implements the\nsame algorithm as Array.prototype.copyWithin as defined in 22.1.3.3 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\" and the actual copying of values in step 12\nmust be performed in a manner that preserves the bit-level encoding of the\nsource data.\n\n...\n\n22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )\n\n13. Return O.\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/copyWithin/BigInt/undefined-end.js", "esid": " sec-%typedarray%.prototype.copywithin", "description": " >If `end` is undefined, set final position to `this.length`.\n", "info": " |22.2.3.5 %TypedArray%.prototype.copyWithin (target, start [ , end ] )\n\n%TypedArray%.prototype.copyWithin is a distinct function that implements the\nsame algorithm as Array.prototype.copyWithin as defined in 22.1.3.3 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\" and the actual copying of values in step 12\nmust be performed in a manner that preserves the bit-level encoding of the\nsource data.\n\n...\n\n22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )\n\n...\n7. If end is undefined, let relativeEnd be len; else let relativeEnd be ?\nToInteger(end).\n...\n", "includes": ["compareArray.js", "testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/entries/BigInt/iter-prototype.js", "esid": " sec-%typedarray%.prototype.entries", "description": " >The prototype of the returned iterator is ArrayIteratorPrototype\n", "info": " |22.2.3.6 %TypedArray%.prototype.entries ( )\n\n...\n3. Return CreateArrayIterator(O, \"key+value\").\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol.iterator", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/entries/BigInt/return-itor.js", "esid": " sec-%typedarray%.prototype.entries", "description": " Return an iterator for the entries.", "info": " |22.2.3.6 %TypedArray%.prototype.entries ( )\n\n...\n3. Return CreateArrayIterator(O, \"key+value\").\n", "includes": ["testBigIntTypedArray.js", "compareArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/every/BigInt/callbackfn-arguments-with-thisarg.js", "esid": " sec-%typedarray%.prototype.every", "description": " >thisArg does not affect callbackfn arguments\n", "info": " |22.2.3.7 %TypedArray%.prototype.every ( callbackfn [ , thisArg ] )\n\n%TypedArray%.prototype.every is a distinct function that implements the same\nalgorithm as Array.prototype.every as defined in 22.1.3.5 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\".\n\n22.1.3.5 Array.prototype.every ( callbackfn [ , thisArg ] )\n\n...\n6. Repeat, while k < len\n...\nc. If kPresent is true, then\ni. Let kValue be ? Get(O, Pk).\nii. Let testResult be ToBoolean(? Call(callbackfn, T, \u00ab kValue, k, O \u00bb)).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/every/BigInt/callbackfn-arguments-without-thisarg.js", "esid": " sec-%typedarray%.prototype.every", "description": " >callbackfn arguments\n", "info": " |22.2.3.7 %TypedArray%.prototype.every ( callbackfn [ , thisArg ] )\n\n%TypedArray%.prototype.every is a distinct function that implements the same\nalgorithm as Array.prototype.every as defined in 22.1.3.5 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\".\n\n22.1.3.5 Array.prototype.every ( callbackfn [ , thisArg ] )\n\n...\n6. Repeat, while k < len\n...\nc. If kPresent is true, then\ni. Let kValue be ? Get(O, Pk).\nii. Let testResult be ToBoolean(? Call(callbackfn, T, \u00ab kValue, k, O \u00bb)).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/every/BigInt/callbackfn-no-interaction-over-non-integer.js", "esid": " sec-%typedarray%.prototype.every", "description": " >Does not interact over non-integer properties\n", "info": " |22.2.3.7 %TypedArray%.prototype.every ( callbackfn [ , thisArg ] )\n\n...\n6. Repeat, while k < len\n...\nc. If kPresent is true, then\ni. Let kValue be ? Get(O, Pk).\nii. Let testResult be ToBoolean(? Call(callbackfn, T, \u00ab kValue, k, O \u00bb)).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/every/BigInt/callbackfn-not-callable-throws.js", "esid": " sec-%typedarray%.prototype.every", "description": " Throws a TypeError if callbackfn is not callable", "info": " |22.2.3.7 %TypedArray%.prototype.every ( callbackfn [ , thisArg ] )\n\n%TypedArray%.prototype.every is a distinct function that implements the same\nalgorithm as Array.prototype.every as defined in 22.1.3.5 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\".\n\n22.1.3.5 Array.prototype.every ( callbackfn [ , thisArg ] )\n\n...\n3. If IsCallable(callbackfn) is false, throw a TypeError exception.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/every/BigInt/callbackfn-not-called-on-empty.js", "esid": " sec-%typedarray%.prototype.every", "description": " >callbackfn is not called on empty instances\n", "info": " |22.2.3.7 %TypedArray%.prototype.every ( callbackfn [ , thisArg ] )\n\n%TypedArray%.prototype.every is a distinct function that implements the same\nalgorithm as Array.prototype.every as defined in 22.1.3.5 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\".\n\n22.1.3.5 Array.prototype.every ( callbackfn [ , thisArg ] )\n\n...\n6. Repeat, while k < len\n..\nc. If kPresent is true, then\ni. Let kValue be ? Get(O, Pk).\nii. Let testResult be ToBoolean(? Call(callbackfn, T, \u00ab kValue, k, O \u00bb)).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/every/BigInt/callbackfn-return-does-not-change-instance.js", "esid": " sec-%typedarray%.prototype.every", "description": " >The callbackfn return does not change the instance\n", "info": " |22.2.3.7 %TypedArray%.prototype.every ( callbackfn [ , thisArg ] )\n\n%TypedArray%.prototype.every is a distinct function that implements the same\nalgorithm as Array.prototype.every as defined in 22.1.3.5 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\".\n\n22.1.3.5 Array.prototype.every ( callbackfn [ , thisArg ] )\n\n...\n6. Repeat, while k < len\n..\nc. If kPresent is true, then\ni. Let kValue be ? Get(O, Pk).\nii. Let testResult be ToBoolean(? Call(callbackfn, T, \u00ab kValue, k, O \u00bb)).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/every/BigInt/callbackfn-returns-abrupt.js", "esid": " sec-%typedarray%.prototype.every", "description": " Returns abrupt from callbackfn", "info": " |22.2.3.7 %TypedArray%.prototype.every ( callbackfn [ , thisArg ] )\n\n%TypedArray%.prototype.every is a distinct function that implements the same\nalgorithm as Array.prototype.every as defined in 22.1.3.5 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\".\n\n22.1.3.5 Array.prototype.every ( callbackfn [ , thisArg ] )\n\n...\n6. Repeat, while k < len\n..\nc. If kPresent is true, then\ni. Let kValue be ? Get(O, Pk).\nii. Let testResult be ToBoolean(? Call(callbackfn, T, \u00ab kValue, k, O \u00bb)).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/every/BigInt/callbackfn-set-value-during-interaction.js", "esid": " sec-%typedarray%.prototype.every", "description": " >Integer indexed values changed during iteration\n", "info": " |22.2.3.7 %TypedArray%.prototype.every ( callbackfn [ , thisArg ] )\n\n%TypedArray%.prototype.every is a distinct function that implements the same\nalgorithm as Array.prototype.every as defined in 22.1.3.5 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\".\n\n22.1.3.5 Array.prototype.every ( callbackfn [ , thisArg ] )\n\n...\n6. Repeat, while k < len\n..\nc. If kPresent is true, then\ni. Let kValue be ? Get(O, Pk).\nii. Let testResult be ToBoolean(? Call(callbackfn, T, \u00ab kValue, k, O \u00bb)).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Reflect.set", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/every/BigInt/callbackfn-this.js", "esid": " sec-%typedarray%.prototype.every", "description": " >callbackfn `this` value\n", "info": " |22.2.3.7 %TypedArray%.prototype.every ( callbackfn [ , thisArg ] )\n\n%TypedArray%.prototype.every is a distinct function that implements the same\nalgorithm as Array.prototype.every as defined in 22.1.3.5 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\".\n\n22.1.3.5 Array.prototype.every ( callbackfn [ , thisArg ] )\n\n...\n4. If thisArg was supplied, let T be thisArg; else let T be undefined.\n...\n6. Repeat, while k < len\n...\nc. If kPresent is true, then\n...\nii. Let testResult be ToBoolean(? Call(callbackfn, T, \u00ab kValue, k, O \u00bb)).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/every/BigInt/get-length-uses-internal-arraylength.js", "esid": " sec-%typedarray%.prototype.every", "description": " Get \"length\" uses internal ArrayLength", "info": " |22.2.3.7 %TypedArray%.prototype.every ( callbackfn [ , thisArg ] )\n\n%TypedArray%.prototype.every is a distinct function that implements the same\nalgorithm as Array.prototype.every as defined in 22.1.3.5 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\".\n\n22.1.3.5 Array.prototype.every ( callbackfn [ , thisArg ] )\n\n1. Let O be ? ToObject(this value).\n2. Let len be ? ToLength(? Get(O, \"length\")).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/every/BigInt/returns-false-if-any-cb-returns-false.js", "esid": " sec-%typedarray%.prototype.every", "description": " >Returns false if any callbackfn call returns a coerced false.\n", "info": " |22.2.3.7 %TypedArray%.prototype.every ( callbackfn [ , thisArg ] )\n\n%TypedArray%.prototype.every is a distinct function that implements the same\nalgorithm as Array.prototype.every as defined in 22.1.3.5 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\".\n\n22.1.3.5 Array.prototype.every ( callbackfn [ , thisArg ] )\n\n...\n7. Return true.\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/every/BigInt/returns-true-if-every-cb-returns-true.js", "esid": " sec-%typedarray%.prototype.every", "description": " >Returns true if every callbackfn returns a coerced true.\n", "info": " |22.2.3.7 %TypedArray%.prototype.every ( callbackfn [ , thisArg ] )\n\n%TypedArray%.prototype.every is a distinct function that implements the same\nalgorithm as Array.prototype.every as defined in 22.1.3.5 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\".\n\n22.1.3.5 Array.prototype.every ( callbackfn [ , thisArg ] )\n\n...\n7. Return true.\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/every/BigInt/values-are-not-cached.js", "esid": " sec-%typedarray%.prototype.every", "description": " >Integer indexed values are not cached before iteration\n", "info": " |22.2.3.7 %TypedArray%.prototype.every ( callbackfn [ , thisArg ] )\n\n%TypedArray%.prototype.every is a distinct function that implements the same\nalgorithm as Array.prototype.every as defined in 22.1.3.5 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\".\n\n22.1.3.5 Array.prototype.every ( callbackfn [ , thisArg ] )\n\n...\n6. Repeat, while k < len\n..\nc. If kPresent is true, then\ni. Let kValue be ? Get(O, Pk).\nii. Let testResult be ToBoolean(? Call(callbackfn, T, \u00ab kValue, k, O \u00bb)).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/fill/BigInt/coerced-indexes.js", "esid": " sec-%typedarray%.prototype.fill", "description": " >Fills elements from coerced to Integer `start` and `end` values\n", "info": " |22.2.3.8 %TypedArray%.prototype.fill (value [ , start [ , end ] ] )\n\n%TypedArray%.prototype.fill is a distinct function that implements the same\nalgorithm as Array.prototype.fill as defined in 22.1.3.6 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\". The implementation of the algorithm may be optimized with\nthe knowledge that the this value is an object that has a fixed length and\nwhose integer indexed properties are not sparse. However, such optimization\nmust not introduce any observable changes in the specified behaviour of the\nalgorithm.\n\n...\n\n22.1.3.6 Array.prototype.fill (value [ , start [ , end ] ] )\n\n...\n3. Let relativeStart be ? ToInteger(start).\n4. If relativeStart < 0, let k be max((len + relativeStart), 0); else let k be\nmin(relativeStart, len).\n5. If end is undefined, let relativeEnd be len; else let relativeEnd be ?\nToInteger(end).\n...\n", "includes": ["compareArray.js", "testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/fill/BigInt/fill-values-conversion-once.js", "esid": " sec-%typedarray%.prototype.fill", "description": " >Fills all the elements with non numeric values values.\n", "info": " |22.2.3.8 %TypedArray%.prototype.fill (value [ , start [ , end ] ] )\n\n...\n3. If O.[[TypedArrayName]] is \"BigUint64Array\" or \"BigInt64Array\",\nlet value be ? ToBigInt(value).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/fill/BigInt/fill-values-custom-start-and-end.js", "esid": " sec-%typedarray%.prototype.fill", "description": " >Fills all the elements from a with a custom start and end indexes.\n", "info": " |22.2.3.8 %TypedArray%.prototype.fill (value [ , start [ , end ] ] )\n\n%TypedArray%.prototype.fill is a distinct function that implements the same\nalgorithm as Array.prototype.fill as defined in 22.1.3.6 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\". The implementation of the algorithm may be optimized with\nthe knowledge that the this value is an object that has a fixed length and\nwhose integer indexed properties are not sparse. However, such optimization\nmust not introduce any observable changes in the specified behaviour of the\nalgorithm.\n\n...\n\n22.1.3.6 Array.prototype.fill (value [ , start [ , end ] ] )\n\n...\n3. Let relativeStart be ? ToInteger(start).\n4. If relativeStart < 0, let k be max((len + relativeStart), 0); else let k be\nmin(relativeStart, len).\n5. If end is undefined, let relativeEnd be len; else let relativeEnd be ?\nToInteger(end).\n6. If relativeEnd < 0, let final be max((len + relativeEnd), 0); else let\nfinal be min(relativeEnd, len).\n...\n", "includes": ["compareArray.js", "testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/fill/BigInt/fill-values-non-numeric-throw.js", "esid": " sec-%typedarray%.prototype.fill", "description": " >Fills all the elements with non numeric values values.\n", "info": " |%TypedArray%.prototype.fill ( value [ , start [ , end ] ] )\n\nLet O be the this value.\nPerform ? ValidateTypedArray(O).\nLet len be O.[[ArrayLength]].\nIf O.[[ContentType]] is BigInt, set value to ? ToBigInt(value).\nOtherwise, set value to ? ToNumber(value).\nLet relativeStart be ? ToIntegerOrInfinity(start).\nIf relativeStart is -Infinity, let k be 0.\nElse if relativeStart < 0, let k be max(len + relativeStart, 0).\nElse, let k be min(relativeStart, len).\nIf end is undefined, let relativeEnd be len; else let relativeEnd be ? ToIntegerOrInfinity(end).\nIf relativeEnd is -Infinity, let final be 0.\nElse if relativeEnd < 0, let final be max(len + relativeEnd, 0).\nElse, let final be min(relativeEnd, len).\nIf IsDetachedBuffer(O.[[ViewedArrayBuffer]]) is true, throw a TypeError exception.\nRepeat, while k < final,\nLet Pk be ! ToString(F(k)).\nPerform ! Set(O, Pk, value, true).\nSet k to k + 1.\nReturn O.\n\nIntegerIndexedElementSet ( O, index, value )\n\nAssert: O is an Integer-Indexed exotic object.\nIf O.[[ContentType]] is BigInt, let numValue be ? ToBigInt(value).\nOtherwise, let numValue be ? ToNumber(value).\nLet buffer be O.[[ViewedArrayBuffer]].\nIf IsDetachedBuffer(buffer) is false and ! IsValidIntegerIndex(O, index) is true, then\nLet offset be O.[[ByteOffset]].\nLet arrayTypeName be the String value of O.[[TypedArrayName]].\nLet elementSize be the Element Size value specified in Table 62 for arrayTypeName.\nLet indexedPosition be (\u211d(index) \u00d7 elementSize) + offset.\nLet elementType be the Element Type value in Table 62 for arrayTypeName.\nPerform SetValueInBuffer(buffer, indexedPosition, elementType, numValue, true, Unordered).\nReturn NormalCompletion(undefined).\n\n\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/fill/BigInt/fill-values-non-numeric.js", "esid": " sec-%typedarray%.prototype.fill", "description": " >Fills all the elements with non numeric values values.\n", "info": " |%TypedArray%.prototype.fill ( value [ , start [ , end ] ] )\n\nLet O be the this value.\nPerform ? ValidateTypedArray(O).\nLet len be O.[[ArrayLength]].\nIf O.[[ContentType]] is BigInt, set value to ? ToBigInt(value).\nOtherwise, set value to ? ToNumber(value).\nLet relativeStart be ? ToIntegerOrInfinity(start).\nIf relativeStart is -Infinity, let k be 0.\nElse if relativeStart < 0, let k be max(len + relativeStart, 0).\nElse, let k be min(relativeStart, len).\nIf end is undefined, let relativeEnd be len; else let relativeEnd be ? ToIntegerOrInfinity(end).\nIf relativeEnd is -Infinity, let final be 0.\nElse if relativeEnd < 0, let final be max(len + relativeEnd, 0).\nElse, let final be min(relativeEnd, len).\nIf IsDetachedBuffer(O.[[ViewedArrayBuffer]]) is true, throw a TypeError exception.\nRepeat, while k < final,\nLet Pk be ! ToString(F(k)).\nPerform ! Set(O, Pk, value, true).\nSet k to k + 1.\nReturn O.\n\nIntegerIndexedElementSet ( O, index, value )\n\nAssert: O is an Integer-Indexed exotic object.\nIf O.[[ContentType]] is BigInt, let numValue be ? ToBigInt(value).\nOtherwise, let numValue be ? ToNumber(value).\nLet buffer be O.[[ViewedArrayBuffer]].\nIf IsDetachedBuffer(buffer) is false and ! IsValidIntegerIndex(O, index) is true, then\nLet offset be O.[[ByteOffset]].\nLet arrayTypeName be the String value of O.[[TypedArrayName]].\nLet elementSize be the Element Size value specified in Table 62 for arrayTypeName.\nLet indexedPosition be (\u211d(index) \u00d7 elementSize) + offset.\nLet elementType be the Element Type value in Table 62 for arrayTypeName.\nPerform SetValueInBuffer(buffer, indexedPosition, elementType, numValue, true, Unordered).\nReturn NormalCompletion(undefined).\n\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/fill/BigInt/fill-values-relative-end.js", "esid": " sec-%typedarray%.prototype.fill", "description": " >Fills all the elements from a with a custom end index.\n", "info": " |22.2.3.8 %TypedArray%.prototype.fill (value [ , start [ , end ] ] )\n\n%TypedArray%.prototype.fill is a distinct function that implements the same\nalgorithm as Array.prototype.fill as defined in 22.1.3.6 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\". The implementation of the algorithm may be optimized with\nthe knowledge that the this value is an object that has a fixed length and\nwhose integer indexed properties are not sparse. However, such optimization\nmust not introduce any observable changes in the specified behaviour of the\nalgorithm.\n\n...\n\n22.1.3.6 Array.prototype.fill (value [ , start [ , end ] ] )\n\n...\n5. If end is undefined, let relativeEnd be len; else let relativeEnd be ?\nToInteger(end).\n6. If relativeEnd < 0, let final be max((len + relativeEnd), 0); else let\nfinal be min(relativeEnd, len).\n...\n", "includes": ["compareArray.js", "testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/fill/BigInt/fill-values-relative-start.js", "esid": " sec-%typedarray%.prototype.fill", "description": " >Fills all the elements from a with a custom start index.\n", "info": " |22.2.3.8 %TypedArray%.prototype.fill (value [ , start [ , end ] ] )\n\n%TypedArray%.prototype.fill is a distinct function that implements the same\nalgorithm as Array.prototype.fill as defined in 22.1.3.6 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\". The implementation of the algorithm may be optimized with\nthe knowledge that the this value is an object that has a fixed length and\nwhose integer indexed properties are not sparse. However, such optimization\nmust not introduce any observable changes in the specified behaviour of the\nalgorithm.\n\n...\n\n22.1.3.6 Array.prototype.fill (value [ , start [ , end ] ] )\n\n...\n4. If relativeStart < 0, let k be max((len + relativeStart), 0); else let k be\nmin(relativeStart, len).\n...\n", "includes": ["compareArray.js", "testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/fill/BigInt/fill-values-symbol-throws.js", "esid": " sec-%typedarray%.prototype.fill", "description": " >Throws a TypeError if value is a Symbol\n", "info": " |%TypedArray%.prototype.fill ( value [ , start [ , end ] ] )\n\nLet O be the this value.\nPerform ? ValidateTypedArray(O).\nLet len be O.[[ArrayLength]].\nIf O.[[ContentType]] is BigInt, set value to ? ToBigInt(value).\nOtherwise, set value to ? ToNumber(value).\nLet relativeStart be ? ToIntegerOrInfinity(start).\nIf relativeStart is -Infinity, let k be 0.\nElse if relativeStart < 0, let k be max(len + relativeStart, 0).\nElse, let k be min(relativeStart, len).\nIf end is undefined, let relativeEnd be len; else let relativeEnd be ? ToIntegerOrInfinity(end).\nIf relativeEnd is -Infinity, let final be 0.\nElse if relativeEnd < 0, let final be max(len + relativeEnd, 0).\nElse, let final be min(relativeEnd, len).\nIf IsDetachedBuffer(O.[[ViewedArrayBuffer]]) is true, throw a TypeError exception.\nRepeat, while k < final,\nLet Pk be ! ToString(F(k)).\nPerform ! Set(O, Pk, value, true).\nSet k to k + 1.\nReturn O.\n\nIntegerIndexedElementSet ( O, index, value )\n\nAssert: O is an Integer-Indexed exotic object.\nIf O.[[ContentType]] is BigInt, let numValue be ? ToBigInt(value).\nOtherwise, let numValue be ? ToNumber(value).\nLet buffer be O.[[ViewedArrayBuffer]].\nIf IsDetachedBuffer(buffer) is false and ! IsValidIntegerIndex(O, index) is true, then\nLet offset be O.[[ByteOffset]].\nLet arrayTypeName be the String value of O.[[TypedArrayName]].\nLet elementSize be the Element Size value specified in Table 62 for arrayTypeName.\nLet indexedPosition be (\u211d(index) \u00d7 elementSize) + offset.\nLet elementType be the Element Type value in Table 62 for arrayTypeName.\nPerform SetValueInBuffer(buffer, indexedPosition, elementType, numValue, true, Unordered).\nReturn NormalCompletion(undefined).\n\n\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/fill/BigInt/fill-values.js", "esid": " sec-%typedarray%.prototype.fill", "description": " >Fills all the elements with `value` from a default start and index.\n", "info": " |22.2.3.8 %TypedArray%.prototype.fill (value [ , start [ , end ] ] )\n\n%TypedArray%.prototype.fill is a distinct function that implements the same\nalgorithm as Array.prototype.fill as defined in 22.1.3.6 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\". The implementation of the algorithm may be optimized with\nthe knowledge that the this value is an object that has a fixed length and\nwhose integer indexed properties are not sparse. However, such optimization\nmust not introduce any observable changes in the specified behaviour of the\nalgorithm.\n\n...\n\n22.1.3.6 Array.prototype.fill (value [ , start [ , end ] ] )\n\n...\n7. Repeat, while k < final\na. Let Pk be ! ToString(k).\nb. Perform ? Set(O, Pk, value, true).\n", "includes": ["compareArray.js", "testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/fill/BigInt/get-length-ignores-length-prop.js", "esid": " sec-%typedarray%.prototype.fill", "description": " >Unreachable abrupt from Get(O, \"length\") as [[ArrayLength]] is returned.\n", "info": " |22.2.3.8 %TypedArray%.prototype.fill (value [ , start [ , end ] ] )\n\n%TypedArray%.prototype.fill is a distinct function that implements the same\nalgorithm as Array.prototype.fill as defined in 22.1.3.6 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\". The implementation of the algorithm may be optimized with\nthe knowledge that the this value is an object that has a fixed length and\nwhose integer indexed properties are not sparse. However, such optimization\nmust not introduce any observable changes in the specified behaviour of the\nalgorithm.\n\n...\n\n22.1.3.6 Array.prototype.fill (value [ , start [ , end ] ] )\n\n1. Let O be ? ToObject(this value).\n2. Let len be ? ToLength(? Get(O, \"length\")).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/fill/BigInt/return-abrupt-from-end-as-symbol.js", "esid": " sec-%typedarray%.prototype.fill", "description": " >Return abrupt if end is a Symbol.\n", "info": " |22.2.3.8 %TypedArray%.prototype.fill (value [ , start [ , end ] ] )\n\n%TypedArray%.prototype.fill is a distinct function that implements the same\nalgorithm as Array.prototype.fill as defined in 22.1.3.6 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\". The implementation of the algorithm may be optimized with\nthe knowledge that the this value is an object that has a fixed length and\nwhose integer indexed properties are not sparse. However, such optimization\nmust not introduce any observable changes in the specified behaviour of the\nalgorithm.\n\n...\n\n22.1.3.6 Array.prototype.fill (value [ , start [ , end ] ] )\n\n...\n5. If end is undefined, let relativeEnd be len; else let relativeEnd be ?\nToInteger(end).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/fill/BigInt/return-abrupt-from-end.js", "esid": " sec-%typedarray%.prototype.fill", "description": " >Return abrupt from ToInteger(end).\n", "info": " |22.2.3.8 %TypedArray%.prototype.fill (value [ , start [ , end ] ] )\n\n%TypedArray%.prototype.fill is a distinct function that implements the same\nalgorithm as Array.prototype.fill as defined in 22.1.3.6 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\". The implementation of the algorithm may be optimized with\nthe knowledge that the this value is an object that has a fixed length and\nwhose integer indexed properties are not sparse. However, such optimization\nmust not introduce any observable changes in the specified behaviour of the\nalgorithm.\n\n...\n\n22.1.3.6 Array.prototype.fill (value [ , start [ , end ] ] )\n\n...\n5. If end is undefined, let relativeEnd be len; else let relativeEnd be ?\nToInteger(end).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/fill/BigInt/return-abrupt-from-set-value.js", "esid": " sec-%typedarray%.prototype.fill", "description": " >Returns abrupt from value set\n", "info": " |%TypedArray%.prototype.fill ( value [ , start [ , end ] ] )\n\nLet O be the this value.\nPerform ? ValidateTypedArray(O).\nLet len be O.[[ArrayLength]].\nIf O.[[ContentType]] is BigInt, set value to ? ToBigInt(value).\nOtherwise, set value to ? ToNumber(value).\nLet relativeStart be ? ToIntegerOrInfinity(start).\nIf relativeStart is -Infinity, let k be 0.\nElse if relativeStart < 0, let k be max(len + relativeStart, 0).\nElse, let k be min(relativeStart, len).\nIf end is undefined, let relativeEnd be len; else let relativeEnd be ? ToIntegerOrInfinity(end).\nIf relativeEnd is -Infinity, let final be 0.\nElse if relativeEnd < 0, let final be max(len + relativeEnd, 0).\nElse, let final be min(relativeEnd, len).\nIf IsDetachedBuffer(O.[[ViewedArrayBuffer]]) is true, throw a TypeError exception.\nRepeat, while k < final,\nLet Pk be ! ToString(F(k)).\nPerform ! Set(O, Pk, value, true).\nSet k to k + 1.\nReturn O.\n\nIntegerIndexedElementSet ( O, index, value )\n\nAssert: O is an Integer-Indexed exotic object.\nIf O.[[ContentType]] is BigInt, let numValue be ? ToBigInt(value).\nOtherwise, let numValue be ? ToNumber(value).\nLet buffer be O.[[ViewedArrayBuffer]].\nIf IsDetachedBuffer(buffer) is false and ! IsValidIntegerIndex(O, index) is true, then\nLet offset be O.[[ByteOffset]].\nLet arrayTypeName be the String value of O.[[TypedArrayName]].\nLet elementSize be the Element Size value specified in Table 62 for arrayTypeName.\nLet indexedPosition be (\u211d(index) \u00d7 elementSize) + offset.\nLet elementType be the Element Type value in Table 62 for arrayTypeName.\nPerform SetValueInBuffer(buffer, indexedPosition, elementType, numValue, true, Unordered).\nReturn NormalCompletion(undefined).\n\n\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/fill/BigInt/return-abrupt-from-start-as-symbol.js", "esid": " sec-%typedarray%.prototype.fill", "description": " >Return abrupt from ToInteger(start) as a Symbol.\n", "info": " |22.2.3.8 %TypedArray%.prototype.fill (value [ , start [ , end ] ] )\n\n%TypedArray%.prototype.fill is a distinct function that implements the same\nalgorithm as Array.prototype.fill as defined in 22.1.3.6 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\". The implementation of the algorithm may be optimized with\nthe knowledge that the this value is an object that has a fixed length and\nwhose integer indexed properties are not sparse. However, such optimization\nmust not introduce any observable changes in the specified behaviour of the\nalgorithm.\n\n...\n\n22.1.3.6 Array.prototype.fill (value [ , start [ , end ] ] )\n\n...\n3. Let relativeStart be ? ToInteger(start).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/fill/BigInt/return-abrupt-from-start.js", "esid": " sec-%typedarray%.prototype.fill", "description": " >Return abrupt from ToInteger(start).\n", "info": " |22.2.3.8 %TypedArray%.prototype.fill (value [ , start [ , end ] ] )\n\n%TypedArray%.prototype.fill is a distinct function that implements the same\nalgorithm as Array.prototype.fill as defined in 22.1.3.6 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\". The implementation of the algorithm may be optimized with\nthe knowledge that the this value is an object that has a fixed length and\nwhose integer indexed properties are not sparse. However, such optimization\nmust not introduce any observable changes in the specified behaviour of the\nalgorithm.\n\n...\n\n22.1.3.6 Array.prototype.fill (value [ , start [ , end ] ] )\n\n...\n3. Let relativeStart be ? ToInteger(start).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/fill/BigInt/return-this.js", "esid": " sec-%typedarray%.prototype.fill", "description": " >Returns `this`.\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/filter/BigInt/arraylength-internal.js", "esid": " sec-%typedarray%.prototype.filter", "description": " Uses internal ArrayLength instead of length property", "info": " |22.2.3.9 %TypedArray%.prototype.filter ( callbackfn [ , thisArg ] )\n\n...\n3. Let len be the value of O's [[ArrayLength]] internal slot.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/filter/BigInt/callbackfn-arguments-with-thisarg.js", "esid": " sec-%typedarray%.prototype.filter", "description": " >thisArg does not affect callbackfn arguments\n", "info": " |22.2.3.9 %TypedArray%.prototype.filter ( callbackfn [ , thisArg ] )\n\n...\n9. Repeat, while k < len\n...\nc. Let selected be ToBoolean(? Call(callbackfn, T, \u00ab kValue, k, O \u00bb)).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/filter/BigInt/callbackfn-arguments-without-thisarg.js", "esid": " sec-%typedarray%.prototype.filter", "description": " >callbackfn arguments\n", "info": " |22.2.3.9 %TypedArray%.prototype.filter ( callbackfn [ , thisArg ] )\n\n...\n9. Repeat, while k < len\n...\nc. Let selected be ToBoolean(? Call(callbackfn, T, \u00ab kValue, k, O \u00bb)).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/filter/BigInt/callbackfn-called-before-ctor.js", "esid": " sec-%typedarray%.prototype.filter", "description": " callbackfn is called for each item before TypedArraySpeciesCreate", "info": " |22.2.3.9 %TypedArray%.prototype.filter ( callbackfn [ , thisArg ] )\n\n...\n9. Repeat, while k < len\n...\nc. Let selected be ToBoolean(? Call(callbackfn, T, \u00ab kValue, k, O \u00bb)).\n...\n10. Let A be ? TypedArraySpeciesCreate(O, \u00ab captured \u00bb).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol.species", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/filter/BigInt/callbackfn-called-before-species.js", "esid": " sec-%typedarray%.prototype.filter", "description": " callbackfn is called for each item before TypedArraySpeciesCreate", "info": " |22.2.3.9 %TypedArray%.prototype.filter ( callbackfn [ , thisArg ] )\n\n...\n9. Repeat, while k < len\n...\nc. Let selected be ToBoolean(? Call(callbackfn, T, \u00ab kValue, k, O \u00bb)).\n...\n10. Let A be ? TypedArraySpeciesCreate(O, \u00ab captured \u00bb).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol.species", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/filter/BigInt/callbackfn-no-iteration-over-non-integer.js", "esid": " sec-%typedarray%.prototype.filter", "description": " >Does not iterate over non-integer properties\n", "info": " |22.2.3.9 %TypedArray%.prototype.filter ( callbackfn [ , thisArg ] )\n\n...\n9. Repeat, while k < len\n...\nc. Let selected be ToBoolean(? Call(callbackfn, T, \u00ab kValue, k, O \u00bb)).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/filter/BigInt/callbackfn-not-callable-throws.js", "esid": " sec-%typedarray%.prototype.filter", "description": " Throws TypeError if callbackfn is not callable", "info": " |22.2.3.9 %TypedArray%.prototype.filter ( callbackfn [ , thisArg ] )\n\n...\n4. If IsCallable(callbackfn) is false, throw a TypeError exception.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/filter/BigInt/callbackfn-not-called-on-empty.js", "esid": " sec-%typedarray%.prototype.filter", "description": " >callbackfn is not called on empty instances\n", "info": " |22.2.3.9 %TypedArray%.prototype.filter ( callbackfn [ , thisArg ] )\n\n...\n9. Repeat, while k < len\n...\nc. Let selected be ToBoolean(? Call(callbackfn, T, \u00ab kValue, k, O \u00bb)).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/filter/BigInt/callbackfn-return-does-not-change-instance.js", "esid": " sec-%typedarray%.prototype.filter", "description": " >The callbackfn return does not change the instance\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/filter/BigInt/callbackfn-returns-abrupt.js", "esid": " sec-%typedarray%.prototype.filter", "description": " >Returns abrupt from callbackfn\n", "info": " |22.2.3.9 %TypedArray%.prototype.filter ( callbackfn [ , thisArg ] )\n\n...\n9. Repeat, while k < len\n...\nc. Let selected be ToBoolean(? Call(callbackfn, T, \u00ab kValue, k, O \u00bb)).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/filter/BigInt/callbackfn-set-value-during-iteration.js", "esid": " sec-%typedarray%.prototype.filter", "description": " >Integer indexed values changed during iteration\n", "info": " |22.2.3.9 %TypedArray%.prototype.filter ( callbackfn [ , thisArg ] )\n\n...\n9. Repeat, while k < len\n...\nc. Let selected be ToBoolean(? Call(callbackfn, T, \u00ab kValue, k, O \u00bb)).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Reflect.set", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/filter/BigInt/callbackfn-this.js", "esid": " sec-%typedarray%.prototype.filter", "description": " >callbackfn `this` value\n", "info": " |22.2.3.9 %TypedArray%.prototype.filter ( callbackfn [ , thisArg ] )\n\n...\n5. If thisArg was supplied, let T be thisArg; else let T be undefined.\n...\n9. Repeat, while k < len\n...\nc. Let selected be ToBoolean(? Call(callbackfn, T, \u00ab kValue, k, O \u00bb)).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/filter/BigInt/result-does-not-share-buffer.js", "esid": " sec-%typedarray%.prototype.filter", "description": " >Return does not share buffer\n", "info": " |22.2.3.9 %TypedArray%.prototype.filter ( callbackfn [ , thisArg ] )\n\n...\n10. Let A be ? TypedArraySpeciesCreate(O, \u00ab captured \u00bb).\n...\n13. Return A.\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/filter/BigInt/result-empty-callbackfn-returns-false.js", "esid": " sec-%typedarray%.prototype.filter", "description": " >Returns empty if every callbackfn returns boolean false\n", "info": " |22.2.3.9 %TypedArray%.prototype.filter ( callbackfn [ , thisArg ] )\n\n...\n12. For each element e of kept\na. Perform ! Set(A, ! ToString(n), e, true).\nb. Increment n by 1.\n13. Return A.\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/filter/BigInt/result-full-callbackfn-returns-true.js", "esid": " sec-%typedarray%.prototype.filter", "description": " >Returns full length result if every callbackfn returns boolean false\n", "info": " |22.2.3.9 %TypedArray%.prototype.filter ( callbackfn [ , thisArg ] )\n\n...\n12. For each element e of kept\na. Perform ! Set(A, ! ToString(n), e, true).\nb. Increment n by 1.\n13. Return A.\n", "includes": ["testBigIntTypedArray.js", "compareArray.js"], "features": ["BigInt", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/filter/BigInt/speciesctor-get-ctor-abrupt.js", "esid": " sec-%typedarray%.prototype.filter", "description": " Return abrupt from SpeciesConstructor's get Constructor", "info": " |22.2.3.9 %TypedArray%.prototype.filter ( callbackfn [ , thisArg ] )\n\n...\n10. Let A be ? TypedArraySpeciesCreate(O, \u00ab captured \u00bb).\n...\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n1. Assert: Type(O) is Object.\n2. Let C be ? Get(O, \"constructor\").\n3. If C is undefined, return defaultConstructor.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/filter/BigInt/speciesctor-get-ctor-inherited.js", "esid": " sec-%typedarray%.prototype.filter", "description": " get inherited constructor on SpeciesConstructor", "info": " |22.2.3.9 %TypedArray%.prototype.filter ( callbackfn [ , thisArg ] )\n\n...\n10. Let A be ? TypedArraySpeciesCreate(O, \u00ab captured \u00bb).\n...\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n1. Assert: Type(O) is Object.\n2. Let C be ? Get(O, \"constructor\").\n3. If C is undefined, return defaultConstructor.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/filter/BigInt/speciesctor-get-ctor-returns-throws.js", "esid": " sec-%typedarray%.prototype.filter", "description": " >Throws if O.constructor returns a non-Object and non-undefined value\n", "info": " |22.2.3.9 %TypedArray%.prototype.filter ( callbackfn [ , thisArg ] )\n\n...\n10. Let A be ? TypedArraySpeciesCreate(O, \u00ab captured \u00bb).\n...\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n1. Assert: Type(O) is Object.\n2. Let C be ? Get(O, \"constructor\").\n3. If C is undefined, return defaultConstructor.\n4. If Type(C) is not Object, throw a TypeError exception.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/filter/BigInt/speciesctor-get-ctor.js", "esid": " sec-%typedarray%.prototype.filter", "description": " get constructor on SpeciesConstructor", "info": " |22.2.3.9 %TypedArray%.prototype.filter ( callbackfn [ , thisArg ] )\n\n...\n10. Let A be ? TypedArraySpeciesCreate(O, \u00ab captured \u00bb).\n...\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n1. Assert: Type(O) is Object.\n2. Let C be ? Get(O, \"constructor\").\n3. If C is undefined, return defaultConstructor.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/filter/BigInt/speciesctor-get-species-abrupt.js", "esid": " sec-%typedarray%.prototype.filter", "description": " >Returns abrupt from get @@species on found constructor\n", "info": " |22.2.3.9 %TypedArray%.prototype.filter ( callbackfn [ , thisArg ] )\n\n...\n10. Let A be ? TypedArraySpeciesCreate(O, \u00ab captured \u00bb).\n...\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n1. Assert: Type(O) is Object.\n2. Let C be ? Get(O, \"constructor\").\n...\n5. Let S be ? Get(C, @@species).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol.species", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/filter/BigInt/speciesctor-get-species-custom-ctor-invocation.js", "esid": " sec-%typedarray%.prototype.filter", "description": " >Verify arguments on custom @@species construct call\n", "info": " |22.2.3.9 %TypedArray%.prototype.filter ( callbackfn [ , thisArg ] )\n\n...\n10. Let A be ? TypedArraySpeciesCreate(O, \u00ab captured \u00bb).\n...\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n4. Return ? TypedArrayCreate(constructor, argumentList).\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n...\n5. Let S be ? Get(C, @@species).\n...\n7. If IsConstructor(S) is true, return S.\n...\n\n22.2.4.6 TypedArrayCreate ( constructor, argumentList )\n\n1. Let newTypedArray be ? Construct(constructor, argumentList).\n2. Perform ? ValidateTypedArray(newTypedArray).\n3. If argumentList is a List of a single Number, then\n...\n4. Return newTypedArray.\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol.species", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/filter/BigInt/speciesctor-get-species-custom-ctor-length-throws.js", "esid": " sec-%typedarray%.prototype.filter", "description": " >Throws a TypeError if new typedArray's length < captured\n", "info": " |22.2.3.9 %TypedArray%.prototype.filter ( callbackfn [ , thisArg ] )\n\n...\n10. Let A be ? TypedArraySpeciesCreate(O, \u00ab captured \u00bb).\n...\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n4. Return ? TypedArrayCreate(constructor, argumentList).\n\n22.2.4.6 TypedArrayCreate ( constructor, argumentList )\n\n...\n3. If argumentList is a List of a single Number, then\na. If the value of newTypedArray's [[ArrayLength]] internal slot <\nargumentList[0], throw a TypeError exception.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol.species", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/filter/BigInt/speciesctor-get-species-custom-ctor-length.js", "esid": " sec-%typedarray%.prototype.filter", "description": " >Does not throw a TypeError if new typedArray's length >= captured\n", "info": " |22.2.3.9 %TypedArray%.prototype.filter ( callbackfn [ , thisArg ] )\n\n...\n10. Let A be ? TypedArraySpeciesCreate(O, \u00ab captured \u00bb).\n...\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n4. Return ? TypedArrayCreate(constructor, argumentList).\n\n22.2.4.6 TypedArrayCreate ( constructor, argumentList )\n\n...\n3. If argumentList is a List of a single Number, then\na. If the value of newTypedArray's [[ArrayLength]] internal slot <\nargumentList[0], throw a TypeError exception.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol.species", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/filter/BigInt/speciesctor-get-species-custom-ctor-returns-another-instance.js", "esid": " sec-%typedarray%.prototype.filter", "description": " >Custom @@species constructor may return a different TypedArray\n", "info": " |22.2.3.9 %TypedArray%.prototype.filter ( callbackfn [ , thisArg ] )\n\n...\n10. Let A be ? TypedArraySpeciesCreate(O, \u00ab captured \u00bb).\n...\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n4. Return ? TypedArrayCreate(constructor, argumentList).\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n...\n5. Let S be ? Get(C, @@species).\n...\n7. If IsConstructor(S) is true, return S.\n...\n\n22.2.4.6 TypedArrayCreate ( constructor, argumentList )\n\n1. Let newTypedArray be ? Construct(constructor, argumentList).\n2. Perform ? ValidateTypedArray(newTypedArray).\n3. If argumentList is a List of a single Number, then\n...\n4. Return newTypedArray.\n", "includes": ["testBigIntTypedArray.js", "compareArray.js"], "features": ["BigInt", "Symbol.species", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/filter/BigInt/speciesctor-get-species-custom-ctor-throws.js", "esid": " sec-%typedarray%.prototype.filter", "description": " >Custom @@species constructor throws if it does not return a compatible object\n", "info": " |22.2.3.9 %TypedArray%.prototype.filter ( callbackfn [ , thisArg ] )\n\n...\n10. Let A be ? TypedArraySpeciesCreate(O, \u00ab captured \u00bb).\n...\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n4. Return ? TypedArrayCreate(constructor, argumentList).\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n...\n5. Let S be ? Get(C, @@species).\n...\n7. If IsConstructor(S) is true, return S.\n...\n\n22.2.4.6 TypedArrayCreate ( constructor, argumentList )\n\n1. Let newTypedArray be ? Construct(constructor, argumentList).\n2. Perform ? ValidateTypedArray(newTypedArray).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol.species", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/filter/BigInt/speciesctor-get-species-custom-ctor.js", "esid": " sec-%typedarray%.prototype.filter", "description": " >Use custom @@species constructor if available\n", "info": " |22.2.3.9 %TypedArray%.prototype.filter ( callbackfn [ , thisArg ] )\n\n...\n10. Let A be ? TypedArraySpeciesCreate(O, \u00ab captured \u00bb).\n...\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n4. Return ? TypedArrayCreate(constructor, argumentList).\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n...\n5. Let S be ? Get(C, @@species).\n...\n7. If IsConstructor(S) is true, return S.\n...\n\n22.2.4.6 TypedArrayCreate ( constructor, argumentList )\n\n1. Let newTypedArray be ? Construct(constructor, argumentList).\n2. Perform ? ValidateTypedArray(newTypedArray).\n3. If argumentList is a List of a single Number, then\n...\n4. Return newTypedArray.\n", "includes": ["testBigIntTypedArray.js", "compareArray.js"], "features": ["BigInt", "Symbol.species", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/filter/BigInt/speciesctor-get-species-returns-throws.js", "esid": " sec-%typedarray%.prototype.filter", "description": " >Throws if returned @@species is not a constructor, null or undefined.\n", "info": " |22.2.3.9 %TypedArray%.prototype.filter ( callbackfn [ , thisArg ] )\n\n...\n10. Let A be ? TypedArraySpeciesCreate(O, \u00ab captured \u00bb).\n...\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n...\n5. Let S be ? Get(C, @@species).\n6. If S is either undefined or null, return defaultConstructor.\n7. If IsConstructor(S) is true, return S.\n8. Throw a TypeError exception.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol.species", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/filter/BigInt/speciesctor-get-species-use-default-ctor.js", "esid": " sec-%typedarray%.prototype.filter", "description": " >Use defaultConstructor if @@species is either undefined or null\n", "info": " |22.2.3.9 %TypedArray%.prototype.filter ( callbackfn [ , thisArg ] )\n\n...\n10. Let A be ? TypedArraySpeciesCreate(O, \u00ab captured \u00bb).\n...\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n...\n5. Let S be ? Get(C, @@species).\n6. If S is either undefined or null, return defaultConstructor.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol.species", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/filter/BigInt/speciesctor-get-species.js", "esid": " sec-%typedarray%.prototype.filter", "description": " >get @@species from found constructor\n", "info": " |22.2.3.9 %TypedArray%.prototype.filter ( callbackfn [ , thisArg ] )\n\n...\n10. Let A be ? TypedArraySpeciesCreate(O, \u00ab captured \u00bb).\n...\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n1. Assert: Type(O) is Object.\n2. Let C be ? Get(O, \"constructor\").\n...\n5. Let S be ? Get(C, @@species).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol.species", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/filter/BigInt/values-are-not-cached.js", "esid": " sec-%typedarray%.prototype.filter", "description": " >Integer indexed values are not cached before interaction\n", "info": " |22.2.3.9 %TypedArray%.prototype.filter ( callbackfn [ , thisArg ] )\n\n...\n9. Repeat, while k < len\n...\nc. Let selected be ToBoolean(? Call(callbackfn, T, \u00ab kValue, k, O \u00bb)).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/filter/BigInt/values-are-set.js", "esid": " sec-%typedarray%.prototype.filter", "description": " >Returned instance with filtered values set on it\n", "info": " |22.2.3.9 %TypedArray%.prototype.filter ( callbackfn [ , thisArg ] )\n\n...\n12. For each element e of kept\na. Perform ! Set(A, ! ToString(n), e, true).\nb. Increment n by 1.\n13. Return A.\n", "includes": ["testBigIntTypedArray.js", "compareArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/find/BigInt/get-length-ignores-length-prop.js", "esid": " sec-%typedarray%.prototype.find", "description": " >[[Get]] of \"length\" uses [[ArrayLength]]\n", "info": " |22.2.3.10 %TypedArray%.prototype.find (predicate [ , thisArg ] )\n\n%TypedArray%.prototype.find is a distinct function that implements the same\nalgorithm as Array.prototype.find as defined in 22.1.3.8 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\". The implementation of the algorithm may be optimized with\nthe knowledge that the this value is an object that has a fixed length and\nwhose integer indexed properties are not sparse.\n\n...\n\n22.1.3.8 Array.prototype.find ( predicate[ , thisArg ] )\n\n...\n2. Let len be ? ToLength(? Get(O, \"length\")).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/find/BigInt/predicate-call-changes-value.js", "esid": " sec-%typedarray%.prototype.find", "description": " >Change values during predicate call\n", "info": " |22.2.3.10 %TypedArray%.prototype.find (predicate [ , thisArg ] )\n\n%TypedArray%.prototype.find is a distinct function that implements the same\nalgorithm as Array.prototype.find as defined in 22.1.3.8 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\". The implementation of the algorithm may be optimized with\nthe knowledge that the this value is an object that has a fixed length and\nwhose integer indexed properties are not sparse.\n\n...\n\n22.1.3.8 Array.prototype.find ( predicate[ , thisArg ] )\n\n...\n4. If thisArg was supplied, let T be thisArg; else let T be undefined.\n5. Let k be 0.\n6. Repeat, while k < len\n...\nc. Let testResult be ToBoolean(? Call(predicate, T, \u00ab kValue, k, O \u00bb)).\n...\n", "includes": ["compareArray.js", "testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/find/BigInt/predicate-call-parameters.js", "esid": " sec-%typedarray%.prototype.find", "description": " >Predicate called as F.call( thisArg, kValue, k, O ) for each array entry.\n", "info": " |22.2.3.10 %TypedArray%.prototype.find (predicate [ , thisArg ] )\n\n%TypedArray%.prototype.find is a distinct function that implements the same\nalgorithm as Array.prototype.find as defined in 22.1.3.8 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\". The implementation of the algorithm may be optimized with\nthe knowledge that the this value is an object that has a fixed length and\nwhose integer indexed properties are not sparse.\n\n...\n\n22.1.3.8 Array.prototype.find ( predicate[ , thisArg ] )\n\n...\n4. If thisArg was supplied, let T be thisArg; else let T be undefined.\n5. Let k be 0.\n6. Repeat, while k < len\n...\nc. Let testResult be ToBoolean(? Call(predicate, T, \u00ab kValue, k, O \u00bb)).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/find/BigInt/predicate-call-this-non-strict.js", "esid": " sec-%typedarray%.prototype.find", "description": " >Verify predicate this on non-strict mode\n", "info": " |22.2.3.10 %TypedArray%.prototype.find (predicate [ , thisArg ] )\n\n%TypedArray%.prototype.find is a distinct function that implements the same\nalgorithm as Array.prototype.find as defined in 22.1.3.8 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\". The implementation of the algorithm may be optimized with\nthe knowledge that the this value is an object that has a fixed length and\nwhose integer indexed properties are not sparse.\n\n...\n\n22.1.3.8 Array.prototype.find ( predicate[ , thisArg ] )\n\n...\n4. If thisArg was supplied, let T be thisArg; else let T be undefined.\n...\n6. Repeat, while k < len\n...\nc. Let testResult be ToBoolean(? Call(predicate, T, \u00ab kValue, k, O \u00bb)).\n...\n", "flags": ["noStrict"], "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/find/BigInt/predicate-call-this-strict.js", "esid": " sec-%typedarray%.prototype.find", "description": " >Verify predicate this on strict mode\n", "info": " |22.2.3.10 %TypedArray%.prototype.find (predicate [ , thisArg ] )\n\n%TypedArray%.prototype.find is a distinct function that implements the same\nalgorithm as Array.prototype.find as defined in 22.1.3.8 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\". The implementation of the algorithm may be optimized with\nthe knowledge that the this value is an object that has a fixed length and\nwhose integer indexed properties are not sparse.\n\n...\n\n22.1.3.8 Array.prototype.find ( predicate[ , thisArg ] )\n\n...\n4. If thisArg was supplied, let T be thisArg; else let T be undefined.\n...\n6. Repeat, while k < len\n...\nc. Let testResult be ToBoolean(? Call(predicate, T, \u00ab kValue, k, O \u00bb)).\n...\n", "flags": ["onlyStrict"], "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/find/BigInt/predicate-is-not-callable-throws.js", "esid": " sec-%typedarray%.prototype.find", "description": " >Throws a TypeError exception if predicate is not callable.\n", "info": " |22.2.3.10 %TypedArray%.prototype.find (predicate [ , thisArg ] )\n\n%TypedArray%.prototype.find is a distinct function that implements the same\nalgorithm as Array.prototype.find as defined in 22.1.3.8 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\". The implementation of the algorithm may be optimized with\nthe knowledge that the this value is an object that has a fixed length and\nwhose integer indexed properties are not sparse.\n\n...\n\n22.1.3.8 Array.prototype.find ( predicate[ , thisArg ] )\n\n...\n3. If IsCallable(predicate) is false, throw a TypeError exception.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/find/BigInt/predicate-not-called-on-empty-array.js", "esid": " sec-%typedarray%.prototype.find", "description": " >Predicate is not called on empty instances\n", "info": " |22.2.3.10 %TypedArray%.prototype.find (predicate [ , thisArg ] )\n\n%TypedArray%.prototype.find is a distinct function that implements the same\nalgorithm as Array.prototype.find as defined in 22.1.3.8 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\". The implementation of the algorithm may be optimized with\nthe knowledge that the this value is an object that has a fixed length and\nwhose integer indexed properties are not sparse.\n\n...\n\n22.1.3.8 Array.prototype.find ( predicate[ , thisArg ] )\n\n...\n6. Repeat, while k < len\n...\nc. Let testResult be ToBoolean(? Call(predicate, T, \u00ab kValue, k, O \u00bb)).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/find/BigInt/return-abrupt-from-predicate-call.js", "esid": " sec-%typedarray%.prototype.find", "description": " >Return abrupt from predicate call.\n", "info": " |22.2.3.10 %TypedArray%.prototype.find (predicate [ , thisArg ] )\n\n%TypedArray%.prototype.find is a distinct function that implements the same\nalgorithm as Array.prototype.find as defined in 22.1.3.8 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\". The implementation of the algorithm may be optimized with\nthe knowledge that the this value is an object that has a fixed length and\nwhose integer indexed properties are not sparse.\n\n...\n\n22.1.3.8 Array.prototype.find ( predicate[ , thisArg ] )\n\n...\n6. Repeat, while k < len\n...\nc. Let testResult be ToBoolean(? Call(predicate, T, \u00ab kValue, k, O \u00bb)).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/find/BigInt/return-found-value-predicate-result-is-true.js", "esid": " sec-%typedarray%.prototype.find", "description": " >Return found value if predicate return a boolean true value.\n", "info": " |22.2.3.10 %TypedArray%.prototype.find (predicate [ , thisArg ] )\n\n%TypedArray%.prototype.find is a distinct function that implements the same\nalgorithm as Array.prototype.find as defined in 22.1.3.8 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\". The implementation of the algorithm may be optimized with\nthe knowledge that the this value is an object that has a fixed length and\nwhose integer indexed properties are not sparse.\n\n...\n\n22.1.3.8 Array.prototype.find ( predicate[ , thisArg ] )\n\n...\n6. Repeat, while k < len\n...\nc. Let testResult be ToBoolean(? Call(predicate, T, \u00ab kValue, k, O \u00bb)).\nd. If testResult is true, return kValue.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/find/BigInt/return-undefined-if-predicate-returns-false-value.js", "esid": " sec-%typedarray%.prototype.find", "description": " >Return undefined if predicate always returns a boolean false value.\n", "info": " |22.2.3.10 %TypedArray%.prototype.find (predicate [ , thisArg ] )\n\n%TypedArray%.prototype.find is a distinct function that implements the same\nalgorithm as Array.prototype.find as defined in 22.1.3.8 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\". The implementation of the algorithm may be optimized with\nthe knowledge that the this value is an object that has a fixed length and\nwhose integer indexed properties are not sparse.\n\n...\n\n22.1.3.8 Array.prototype.find ( predicate[ , thisArg ] )\n\n...\n6. Repeat, while k < len\n...\nc. Let testResult be ToBoolean(? Call(predicate, T, \u00ab kValue, k, O \u00bb)).\n...\n7. Return undefined.\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/findIndex/BigInt/get-length-ignores-length-prop.js", "esid": " sec-%typedarray%.prototype.findindex", "description": " >[[Get]] of \"length\" uses [[ArrayLength]]\n", "info": " |22.2.3.11 %TypedArray%.prototype.findIndex ( predicate [ , thisArg ] )\n\n%TypedArray%.prototype.findIndex is a distinct function that implements the\nsame algorithm as Array.prototype.findIndex as defined in 22.1.3.9 except that\nthe this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n...\n\n22.1.3.9 Array.prototype.findIndex ( predicate[ , thisArg ] )\n\n...\n2. Let len be ? ToLength(? Get(O, \"length\")).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/findIndex/BigInt/predicate-call-changes-value.js", "esid": " sec-%typedarray%.prototype.findindex", "description": " >Change values during predicate call\n", "info": " |22.2.3.11 %TypedArray%.prototype.findIndex ( predicate [ , thisArg ] )\n\n%TypedArray%.prototype.findIndex is a distinct function that implements the\nsame algorithm as Array.prototype.findIndex as defined in 22.1.3.9 except that\nthe this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n...\n\n22.1.3.9 Array.prototype.findIndex ( predicate[ , thisArg ] )\n\n...\n6. Repeat, while k < len\n...\nc. Let testResult be ToBoolean(? Call(predicate, T, \u00ab kValue, k, O \u00bb)).\n...\n", "includes": ["compareArray.js", "testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/findIndex/BigInt/predicate-call-parameters.js", "esid": " sec-%typedarray%.prototype.findindex", "description": " >Predicate called as F.call( thisArg, kValue, k, O ) for each array entry.\n", "info": " |22.2.3.11 %TypedArray%.prototype.findIndex ( predicate [ , thisArg ] )\n\n%TypedArray%.prototype.findIndex is a distinct function that implements the\nsame algorithm as Array.prototype.findIndex as defined in 22.1.3.9 except that\nthe this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n...\n\n22.1.3.9 Array.prototype.findIndex ( predicate[ , thisArg ] )\n\n...\n4. If thisArg was supplied, let T be thisArg; else let T be undefined.\n5. Let k be 0.\n6. Repeat, while k < len\n...\nc. Let testResult be ToBoolean(? Call(predicate, T, \u00ab kValue, k, O \u00bb)).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/findIndex/BigInt/predicate-call-this-non-strict.js", "esid": " sec-%typedarray%.prototype.findindex", "description": " >Verify predicate this on non-strict mode\n", "info": " |22.2.3.11 %TypedArray%.prototype.findIndex ( predicate [ , thisArg ] )\n\n%TypedArray%.prototype.findIndex is a distinct function that implements the\nsame algorithm as Array.prototype.findIndex as defined in 22.1.3.9 except that\nthe this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n...\n\n22.1.3.9 Array.prototype.findIndex ( predicate[ , thisArg ] )\n\n...\n4. If thisArg was supplied, let T be thisArg; else let T be undefined.\n5. Let k be 0.\n6. Repeat, while k < len\n...\nc. Let testResult be ToBoolean(? Call(predicate, T, \u00ab kValue, k, O \u00bb)).\n...\n", "flags": ["noStrict"], "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/findIndex/BigInt/predicate-call-this-strict.js", "esid": " sec-%typedarray%.prototype.findindex", "description": " >Predicate thisArg as F.call( thisArg, kValue, k, O ) for each array entry.\n", "info": " |22.2.3.11 %TypedArray%.prototype.findIndex ( predicate [ , thisArg ] )\n\n%TypedArray%.prototype.findIndex is a distinct function that implements the\nsame algorithm as Array.prototype.findIndex as defined in 22.1.3.9 except that\nthe this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n...\n\n22.1.3.9 Array.prototype.findIndex ( predicate[ , thisArg ] )\n\n...\n4. If thisArg was supplied, let T be thisArg; else let T be undefined.\n5. Let k be 0.\n6. Repeat, while k < len\n...\nc. Let testResult be ToBoolean(? Call(predicate, T, \u00ab kValue, k, O \u00bb)).\n...\n", "flags": ["onlyStrict"], "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/findIndex/BigInt/predicate-is-not-callable-throws.js", "esid": " sec-%typedarray%.prototype.findindex", "description": " >Throws a TypeError exception if predicate is not callable.\n", "info": " |22.2.3.11 %TypedArray%.prototype.findIndex ( predicate [ , thisArg ] )\n\n%TypedArray%.prototype.findIndex is a distinct function that implements the\nsame algorithm as Array.prototype.findIndex as defined in 22.1.3.9 except that\nthe this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n...\n\n22.1.3.9 Array.prototype.findIndex ( predicate[ , thisArg ] )\n\n...\n3. If IsCallable(predicate) is false, throw a TypeError exception.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/findIndex/BigInt/predicate-not-called-on-empty-array.js", "esid": " sec-%typedarray%.prototype.findindex", "description": " >Predicate is not called on an empty instance\n", "info": " |22.2.3.11 %TypedArray%.prototype.findIndex ( predicate [ , thisArg ] )\n\n%TypedArray%.prototype.findIndex is a distinct function that implements the\nsame algorithm as Array.prototype.findIndex as defined in 22.1.3.9 except that\nthe this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n...\n\n22.1.3.9 Array.prototype.findIndex ( predicate[ , thisArg ] )\n\n...\n6. Repeat, while k < len\n...\nc. Let testResult be ToBoolean(? Call(predicate, T, \u00ab kValue, k, O \u00bb)).\n...\n7. Return -1.\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/findIndex/BigInt/return-abrupt-from-predicate-call.js", "esid": " sec-%typedarray%.prototype.findindex", "description": " >Return abrupt from predicate call.\n", "info": " |22.2.3.11 %TypedArray%.prototype.findIndex ( predicate [ , thisArg ] )\n\n%TypedArray%.prototype.findIndex is a distinct function that implements the\nsame algorithm as Array.prototype.findIndex as defined in 22.1.3.9 except that\nthe this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n...\n\n22.1.3.9 Array.prototype.findIndex ( predicate[ , thisArg ] )\n\n...\n5. Let k be 0.\n6. Repeat, while k < len\n...\nc. Let testResult be ToBoolean(? Call(predicate, T, \u00ab kValue, k, O \u00bb)).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/findIndex/BigInt/return-index-predicate-result-is-true.js", "esid": " sec-%typedarray%.prototype.findindex", "description": " >Return index if predicate return a boolean true value.\n", "info": " |22.2.3.11 %TypedArray%.prototype.findIndex ( predicate [ , thisArg ] )\n\n%TypedArray%.prototype.findIndex is a distinct function that implements the\nsame algorithm as Array.prototype.findIndex as defined in 22.1.3.9 except that\nthe this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n...\n\n22.1.3.9 Array.prototype.findIndex ( predicate[ , thisArg ] )\n\n...\n5. Let k be 0.\n6. Repeat, while k < len\n...\nc. Let testResult be ToBoolean(? Call(predicate, T, \u00ab kValue, k, O \u00bb)).\nd. If testResult is true, return k.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/findIndex/BigInt/return-negative-one-if-predicate-returns-false-value.js", "esid": " sec-%typedarray%.prototype.findindex", "description": " >Return -1 if predicate always returns a boolean false value.\n", "info": " |22.2.3.11 %TypedArray%.prototype.findIndex ( predicate [ , thisArg ] )\n\n%TypedArray%.prototype.findIndex is a distinct function that implements the\nsame algorithm as Array.prototype.findIndex as defined in 22.1.3.9 except that\nthe this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n...\n\n22.1.3.9 Array.prototype.findIndex ( predicate[ , thisArg ] )\n\n...\n6. Repeat, while k < len\n...\nc. Let testResult be ToBoolean(? Call(predicate, T, \u00ab kValue, k, O \u00bb)).\n...\n7. Return -1.\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/forEach/BigInt/arraylength-internal.js", "esid": " sec-%typedarray%.prototype.foreach", "description": " >[[ArrayLength]] is accessed in place of performing a [[Get]] of \"length\"\n", "info": " |22.2.3.12 %TypedArray%.prototype.forEach ( callbackfn [ , thisArg ] )\n\n%TypedArray%.prototype.forEach is a distinct function that implements the same\nalgorithm as Array.prototype.forEach as defined in 22.1.3.10 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\"\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/forEach/BigInt/callbackfn-arguments-with-thisarg.js", "esid": " sec-%typedarray%.prototype.foreach", "description": " >thisArg does not affect callbackfn arguments\n", "info": " |22.2.3.12 %TypedArray%.prototype.forEach ( callbackfn [ , thisArg ] )\n\n%TypedArray%.prototype.forEach is a distinct function that implements the same\nalgorithm as Array.prototype.forEach as defined in 22.1.3.10 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\"\n\n22.1.3.10 Array.prototype.forEach ( callbackfn [ , thisArg ] )\n\n...\n6. Repeat, while k < len\n...\nc. If kPresent is true, then\ni. Let kValue be ? Get(O, Pk).\nii. Perform ? Call(callbackfn, T, \u00ab kValue, k, O \u00bb).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/forEach/BigInt/callbackfn-arguments-without-thisarg.js", "esid": " sec-%typedarray%.prototype.foreach", "description": " >callbackfn arguments\n", "info": " |22.2.3.12 %TypedArray%.prototype.forEach ( callbackfn [ , thisArg ] )\n\n%TypedArray%.prototype.forEach is a distinct function that implements the same\nalgorithm as Array.prototype.forEach as defined in 22.1.3.10 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\"\n\n22.1.3.10 Array.prototype.forEach ( callbackfn [ , thisArg ] )\n\n...\n6. Repeat, while k < len\n...\nc. If kPresent is true, then\ni. Let kValue be ? Get(O, Pk).\nii. Perform ? Call(callbackfn, T, \u00ab kValue, k, O \u00bb).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/forEach/BigInt/callbackfn-is-not-callable.js", "esid": " sec-%typedarray%.prototype.foreach", "description": " >callbackfn is not callable\n", "info": " |22.2.3.12 %TypedArray%.prototype.forEach ( callbackfn [ , thisArg ] )\n\n%TypedArray%.prototype.forEach is a distinct function that implements the same\nalgorithm as Array.prototype.forEach as defined in 22.1.3.10 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\"\n\n22.1.3.10 Array.prototype.forEach ( callbackfn [ , thisArg ] )\n\n...\n3. If IsCallable(callbackfn) is false, throw a TypeError exception.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/forEach/BigInt/callbackfn-no-interaction-over-non-integer.js", "esid": " sec-%typedarray%.prototype.foreach", "description": " >Does not interact over non-integer properties\n", "info": " |22.2.3.12 %TypedArray%.prototype.forEach ( callbackfn [ , thisArg ] )\n\n...\n6. Repeat, while k < len\n...\nc. If kPresent is true, then\n...\nii. Perform ? Call(callbackfn, T, \u00ab kValue, k, O \u00bb).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/forEach/BigInt/callbackfn-not-called-on-empty.js", "esid": " sec-%typedarray%.prototype.foreach", "description": " >callbackfn is not called on empty instances\n", "info": " |22.2.3.12 %TypedArray%.prototype.forEach ( callbackfn [ , thisArg ] )\n\n%TypedArray%.prototype.forEach is a distinct function that implements the same\nalgorithm as Array.prototype.forEach as defined in 22.1.3.10 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\"\n\n22.1.3.10 Array.prototype.forEach ( callbackfn [ , thisArg ] )\n\n...\n6. Repeat, while k < len\n...\nc. If kPresent is true, then\n...\nii. Perform ? Call(callbackfn, T, \u00ab kValue, k, O \u00bb).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/forEach/BigInt/callbackfn-return-does-not-change-instance.js", "esid": " sec-%typedarray%.prototype.foreach", "description": " >The callbackfn return does not change the instance\n", "info": " |22.2.3.12 %TypedArray%.prototype.forEach ( callbackfn [ , thisArg ] )\n\n%TypedArray%.prototype.forEach is a distinct function that implements the same\nalgorithm as Array.prototype.forEach as defined in 22.1.3.10 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\"\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/forEach/BigInt/callbackfn-returns-abrupt.js", "esid": " sec-%typedarray%.prototype.foreach", "description": " >Returns abrupt from callbackfn\n", "info": " |22.2.3.12 %TypedArray%.prototype.forEach ( callbackfn [ , thisArg ] )\n\n%TypedArray%.prototype.forEach is a distinct function that implements the same\nalgorithm as Array.prototype.forEach as defined in 22.1.3.10 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\"\n\n22.1.3.10 Array.prototype.forEach ( callbackfn [ , thisArg ] )\n\n...\n6. Repeat, while k < len\n...\nc. If kPresent is true, then\n...\nii. Perform ? Call(callbackfn, T, \u00ab kValue, k, O \u00bb).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/forEach/BigInt/callbackfn-set-value-during-interaction.js", "esid": " sec-%typedarray%.prototype.foreach", "description": " >Integer indexed values changed during iteration\n", "info": " |22.2.3.12 %TypedArray%.prototype.forEach ( callbackfn [ , thisArg ] )\n\n%TypedArray%.prototype.forEach is a distinct function that implements the same\nalgorithm as Array.prototype.forEach as defined in 22.1.3.10 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\"\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Reflect.set", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/forEach/BigInt/callbackfn-this.js", "esid": " sec-%typedarray%.prototype.foreach", "description": " >callbackfn `this` value\n", "info": " |22.2.3.12 %TypedArray%.prototype.forEach ( callbackfn [ , thisArg ] )\n\n%TypedArray%.prototype.forEach is a distinct function that implements the same\nalgorithm as Array.prototype.forEach as defined in 22.1.3.10 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\"\n\n22.1.3.10 Array.prototype.forEach ( callbackfn [ , thisArg ] )\n\n...\n4. If thisArg was supplied, let T be thisArg; else let T be undefined.\n...\n6. Repeat, while k < len\n...\nc. If kPresent is true, then\n...\nii. Perform ? Call(callbackfn, T, \u00ab kValue, k, O \u00bb).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/forEach/BigInt/returns-undefined.js", "esid": " sec-%typedarray%.prototype.foreach", "description": " >Returns undefined\n", "info": " |22.2.3.12 %TypedArray%.prototype.forEach ( callbackfn [ , thisArg ] )\n\n%TypedArray%.prototype.forEach is a distinct function that implements the same\nalgorithm as Array.prototype.forEach as defined in 22.1.3.10 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\"\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/forEach/BigInt/values-are-not-cached.js", "esid": " sec-%typedarray%.prototype.foreach", "description": " >Integer indexed values are not cached before iteration\n", "info": " |22.2.3.12 %TypedArray%.prototype.forEach ( callbackfn [ , thisArg ] )\n\n%TypedArray%.prototype.forEach is a distinct function that implements the same\nalgorithm as Array.prototype.forEach as defined in 22.1.3.10 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\"\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/includes/BigInt/fromIndex-equal-or-greater-length-returns-false.js", "esid": " sec-%typedarray%.prototype.includes", "description": " Return false if fromIndex >= ArrayLength", "info": " |22.2.3.13 %TypedArray%.prototype.includes ( searchElement [ , fromIndex ] )\n\n%TypedArray%.prototype.includes is a distinct function that implements the\nsame algorithm as Array.prototype.includes as defined in 22.1.3.11 except that\nthe this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n22.1.3.11 Array.prototype.includes ( searchElement [ , fromIndex ] )\n\n...\n4. Let n be ? ToInteger(fromIndex). (If fromIndex is undefined, this step\nproduces the value 0.)\n5. If n \u2265 0, then\na. Let k be n.\n...\n7. Repeat, while k < len\n...\n8. Return false.\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/includes/BigInt/fromIndex-infinity.js", "esid": " sec-%typedarray%.prototype.includes", "description": " handle Infinity values for fromIndex", "info": " |22.2.3.13 %TypedArray%.prototype.includes ( searchElement [ , fromIndex ] )\n\n%TypedArray%.prototype.includes is a distinct function that implements the\nsame algorithm as Array.prototype.includes as defined in 22.1.3.11 except that\nthe this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n22.1.3.11 Array.prototype.includes ( searchElement [ , fromIndex ] )\n\n...\n4. Let n be ? ToInteger(fromIndex). (If fromIndex is undefined, this step\nproduces the value 0.)\n5. If n \u2265 0, then\na. Let k be n.\n6. Else n < 0,\na. Let k be len + n.\nb. If k < 0, let k be 0.\n7. Repeat, while k < len\n...\n8. Return false.\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/includes/BigInt/fromIndex-minus-zero.js", "esid": " sec-%typedarray%.prototype.includes", "description": " -0 fromIndex becomes 0", "info": " |22.2.3.13 %TypedArray%.prototype.includes ( searchElement [ , fromIndex ] )\n\n%TypedArray%.prototype.includes is a distinct function that implements the\nsame algorithm as Array.prototype.includes as defined in 22.1.3.11 except that\nthe this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n22.1.3.11 Array.prototype.includes ( searchElement [ , fromIndex ] )\n\n...\n5. If n \u2265 0, then\na. Let k be n.\n...\n7. Repeat, while k < len\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/includes/BigInt/get-length-uses-internal-arraylength.js", "esid": " sec-%typedarray%.prototype.includes", "description": " Get \"length\" uses internal ArrayLength", "info": " |22.2.3.13 %TypedArray%.prototype.includes ( searchElement [ , fromIndex ] )\n\n%TypedArray%.prototype.includes is a distinct function that implements the\nsame algorithm as Array.prototype.includes as defined in 22.1.3.11 except that\nthe this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n22.1.3.11 Array.prototype.includes ( searchElement [ , fromIndex ] )\n\n...\n2. Let len be ? ToLength(? Get(O, \"length\")).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/includes/BigInt/length-zero-returns-false.js", "esid": " sec-%typedarray%.prototype.includes", "description": " Returns false if length is 0", "info": " |22.2.3.13 %TypedArray%.prototype.includes ( searchElement [ , fromIndex ] )\n\n%TypedArray%.prototype.includes is a distinct function that implements the\nsame algorithm as Array.prototype.includes as defined in 22.1.3.11 except that\nthe this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n22.1.3.11 Array.prototype.includes ( searchElement [ , fromIndex ] )\n\n...\n2. Let len be ? ToLength(? Get(O, \"length\")).\n3. If len is 0, return false.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/includes/BigInt/return-abrupt-tointeger-fromindex-symbol.js", "esid": " sec-%typedarray%.prototype.includes", "description": " Return abrupt from ToInteger(fromIndex) - using symbol", "info": " |22.2.3.13 %TypedArray%.prototype.includes ( searchElement [ , fromIndex ] )\n\n%TypedArray%.prototype.includes is a distinct function that implements the\nsame algorithm as Array.prototype.includes as defined in 22.1.3.11 except that\nthe this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n22.1.3.11 Array.prototype.includes ( searchElement [ , fromIndex ] )\n\n...\n4. Let n be ? ToInteger(fromIndex). (If fromIndex is undefined, this step\nproduces the value 0.)\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/includes/BigInt/return-abrupt-tointeger-fromindex.js", "esid": " sec-%typedarray%.prototype.includes", "description": " Return abrupt from ToInteger(fromIndex)", "info": " |22.2.3.13 %TypedArray%.prototype.includes ( searchElement [ , fromIndex ] )\n\n%TypedArray%.prototype.includes is a distinct function that implements the\nsame algorithm as Array.prototype.includes as defined in 22.1.3.11 except that\nthe this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n22.1.3.11 Array.prototype.includes ( searchElement [ , fromIndex ] )\n\n...\n4. Let n be ? ToInteger(fromIndex). (If fromIndex is undefined, this step\nproduces the value 0.)\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/includes/BigInt/search-found-returns-true.js", "esid": " sec-%typedarray%.prototype.includes", "description": " returns true for found index", "info": " |22.2.3.13 %TypedArray%.prototype.includes ( searchElement [ , fromIndex ] )\n\n%TypedArray%.prototype.includes is a distinct function that implements the\nsame algorithm as Array.prototype.includes as defined in 22.1.3.11 except that\nthe this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n22.1.3.11 Array.prototype.includes ( searchElement [ , fromIndex ] )\n\n...\n5. If n \u2265 0, then\na. Let k be n.\n6. Else n < 0,\na. Let k be len + n.\nb. If k < 0, let k be 0.\n7. Repeat, while k < len\na. Let elementK be the result of ? Get(O, ! ToString(k)).\nb. If SameValueZero(searchElement, elementK) is true, return true.\nc. Increase k by 1.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/includes/BigInt/search-not-found-returns-false.js", "esid": " sec-%typedarray%.prototype.includes", "description": " returns false if the element is not found", "info": " |22.2.3.13 %TypedArray%.prototype.includes ( searchElement [ , fromIndex ] )\n\n%TypedArray%.prototype.includes is a distinct function that implements the\nsame algorithm as Array.prototype.includes as defined in 22.1.3.11 except that\nthe this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n22.1.3.11 Array.prototype.includes ( searchElement [ , fromIndex ] )\n\n...\n5. If n \u2265 0, then\na. Let k be n.\n6. Else n < 0,\na. Let k be len + n.\nb. If k < 0, let k be 0.\n7. Repeat, while k < len\na. Let elementK be the result of ? Get(O, ! ToString(k)).\nb. If SameValueZero(searchElement, elementK) is true, return true.\nc. Increase k by 1.\n8. Return false.\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/includes/BigInt/tointeger-fromindex.js", "esid": " sec-%typedarray%.prototype.includes", "description": " get the integer value from fromIndex", "info": " |22.2.3.13 %TypedArray%.prototype.includes ( searchElement [ , fromIndex ] )\n\n%TypedArray%.prototype.includes is a distinct function that implements the\nsame algorithm as Array.prototype.includes as defined in 22.1.3.11 except that\nthe this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n22.1.3.11 Array.prototype.includes ( searchElement [ , fromIndex ] )\n\n...\n4. Let n be ? ToInteger(fromIndex). (If fromIndex is undefined, this step\nproduces the value 0.)\n5. If n \u2265 0, then\na. Let k be n.\n...\n7. Repeat, while k < len\na. Let elementK be the result of ? Get(O, ! ToString(k)).\nb. If SameValueZero(searchElement, elementK) is true, return true.\nc. Increase k by 1.\n8. Return false.\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/indexOf/BigInt/fromIndex-equal-or-greater-length-returns-minus-one.js", "esid": " sec-%typedarray%.prototype.indexof", "description": " Return -1 if fromIndex >= ArrayLength", "info": " |22.2.3.13 %TypedArray%.prototype.indexOf (searchElement [ , fromIndex ] )\n\n%TypedArray%.prototype.indexOf is a distinct function that implements the same\nalgorithm as Array.prototype.indexOf as defined in 22.1.3.12 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\".\n\n22.1.3.12 Array.prototype.indexOf ( searchElement [ , fromIndex ] )\n\n...\n4. Let n be ? ToInteger(fromIndex). (If fromIndex is undefined, this step\nproduces the value 0.)\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/indexOf/BigInt/fromIndex-infinity.js", "esid": " sec-%typedarray%.prototype.indexof", "description": " handle Infinity values for fromIndex", "info": " |22.2.3.13 %TypedArray%.prototype.indexOf (searchElement [ , fromIndex ] )\n\n%TypedArray%.prototype.indexOf is a distinct function that implements the same\nalgorithm as Array.prototype.indexOf as defined in 22.1.3.12 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\".\n\n22.1.3.12 Array.prototype.indexOf ( searchElement [ , fromIndex ] )\n\n...\n6. If n \u2265 0, then\na. If n is -0, let k be +0; else let k be n.\n7. Else n < 0,\na. Let k be len + n.\nb. If k < 0, let k be 0.\n8. Repeat, while k < len\na. Let kPresent be ? HasProperty(O, ! ToString(k)).\nb. If kPresent is true, then\ni. Let elementK be ? Get(O, ! ToString(k)).\nii. Let same be the result of performing Strict Equality Comparison\nsearchElement === elementK.\niii. If same is true, return k.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/indexOf/BigInt/fromIndex-minus-zero.js", "esid": " sec-%typedarray%.prototype.indexof", "description": " -0 fromIndex becomes 0", "info": " |22.2.3.13 %TypedArray%.prototype.indexOf (searchElement [ , fromIndex ] )\n\n%TypedArray%.prototype.indexOf is a distinct function that implements the same\nalgorithm as Array.prototype.indexOf as defined in 22.1.3.12 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\".\n\n22.1.3.12 Array.prototype.indexOf ( searchElement [ , fromIndex ] )\n\n...\n6. If n \u2265 0, then\na. If n is -0, let k be +0; else let k be n.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/indexOf/BigInt/get-length-uses-internal-arraylength.js", "esid": " sec-%typedarray%.prototype.indexof", "description": " Get \"length\" uses internal ArrayLength", "info": " |22.2.3.13 %TypedArray%.prototype.indexOf (searchElement [ , fromIndex ] )\n\n%TypedArray%.prototype.indexOf is a distinct function that implements the same\nalgorithm as Array.prototype.indexOf as defined in 22.1.3.12 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\".\n\n22.1.3.12 Array.prototype.indexOf ( searchElement [ , fromIndex ] )\n\n...\n2. Let len be ? ToLength(? Get(O, \"length\")).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/indexOf/BigInt/length-zero-returns-minus-one.js", "esid": " sec-%typedarray%.prototype.indexof", "description": " Returns -1 if length is 0", "info": " |22.2.3.13 %TypedArray%.prototype.indexOf (searchElement [ , fromIndex ] )\n\n%TypedArray%.prototype.indexOf is a distinct function that implements the same\nalgorithm as Array.prototype.indexOf as defined in 22.1.3.12 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\".\n\n22.1.3.12 Array.prototype.indexOf ( searchElement [ , fromIndex ] )\n\n...\n2. Let len be ? ToLength(? Get(O, \"length\")).\n3. If len is 0, return -1.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/indexOf/BigInt/no-arg.js", "esid": " sec-%typedarray%.prototype.indexof", "description": " >If `searchElement` is not supplied, -1 is returned.\n", "info": " |%TypedArray%.prototype.indexOf ( searchElement [ , fromIndex ] )\n\n%TypedArray%.prototype.indexOf is a distinct function that implements\nthe same algorithm as Array.prototype.indexOf as defined in 22.1.3.14\nexcept that the this value's [[ArrayLength]] internal slot is accessed\nin place of performing a [[Get]] of \"length\".\n\nArray.prototype.indexOf ( searchElement [ , fromIndex ] )\n\n[...]\n10. Return -1.\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/indexOf/BigInt/return-abrupt-tointeger-fromindex-symbol.js", "esid": " sec-%typedarray%.prototype.indexof", "description": " Return abrupt from ToInteger(fromIndex) - using symbol", "info": " |22.2.3.13 %TypedArray%.prototype.indexOf (searchElement [ , fromIndex ] )\n\n%TypedArray%.prototype.indexOf is a distinct function that implements the same\nalgorithm as Array.prototype.indexOf as defined in 22.1.3.12 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\".\n\n22.1.3.12 Array.prototype.indexOf ( searchElement [ , fromIndex ] )\n\n...\n4. Let n be ? ToInteger(fromIndex). (If fromIndex is undefined, this step\nproduces the value 0.)\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/indexOf/BigInt/return-abrupt-tointeger-fromindex.js", "esid": " sec-%typedarray%.prototype.indexof", "description": " Return abrupt from ToInteger(fromIndex)", "info": " |22.2.3.13 %TypedArray%.prototype.indexOf (searchElement [ , fromIndex ] )\n\n%TypedArray%.prototype.indexOf is a distinct function that implements the same\nalgorithm as Array.prototype.indexOf as defined in 22.1.3.12 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\".\n\n22.1.3.12 Array.prototype.indexOf ( searchElement [ , fromIndex ] )\n\n...\n4. Let n be ? ToInteger(fromIndex). (If fromIndex is undefined, this step\nproduces the value 0.)\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/indexOf/BigInt/search-found-returns-index.js", "esid": " sec-%typedarray%.prototype.indexof", "description": " returns index for the first found element", "info": " |22.2.3.13 %TypedArray%.prototype.indexOf (searchElement [ , fromIndex ] )\n\n%TypedArray%.prototype.indexOf is a distinct function that implements the same\nalgorithm as Array.prototype.indexOf as defined in 22.1.3.12 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\".\n\n22.1.3.12 Array.prototype.indexOf ( searchElement [ , fromIndex ] )\n\n...\n6. If n \u2265 0, then\na. If n is -0, let k be +0; else let k be n.\n7. Else n < 0,\na. Let k be len + n.\nb. If k < 0, let k be 0.\n8. Repeat, while k < len\na. Let kPresent be ? HasProperty(O, ! ToString(k)).\nb. If kPresent is true, then\ni. Let elementK be ? Get(O, ! ToString(k)).\nii. Let same be the result of performing Strict Equality Comparison\nsearchElement === elementK.\niii. If same is true, return k.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/indexOf/BigInt/search-not-found-returns-minus-one.js", "esid": " sec-%typedarray%.prototype.indexof", "description": " returns -1 if the element if not found", "info": " |22.2.3.13 %TypedArray%.prototype.indexOf (searchElement [ , fromIndex ] )\n\n%TypedArray%.prototype.indexOf is a distinct function that implements the same\nalgorithm as Array.prototype.indexOf as defined in 22.1.3.12 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\".\n\n22.1.3.12 Array.prototype.indexOf ( searchElement [ , fromIndex ] )\n\n...\n6. If n \u2265 0, then\na. If n is -0, let k be +0; else let k be n.\n7. Else n < 0,\na. Let k be len + n.\nb. If k < 0, let k be 0.\n...\n9. Return -1.\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/indexOf/BigInt/tointeger-fromindex.js", "esid": " sec-%typedarray%.prototype.indexof", "description": " Return -1 if fromIndex >= ArrayLength - converted values", "info": " |22.2.3.13 %TypedArray%.prototype.indexOf (searchElement [ , fromIndex ] )\n\n%TypedArray%.prototype.indexOf is a distinct function that implements the same\nalgorithm as Array.prototype.indexOf as defined in 22.1.3.12 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\".\n\n22.1.3.12 Array.prototype.indexOf ( searchElement [ , fromIndex ] )\n\n...\n4. Let n be ? ToInteger(fromIndex). (If fromIndex is undefined, this step\nproduces the value 0.)\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/join/BigInt/custom-separator-result-from-tostring-on-each-simple-value.js", "esid": " sec-%typedarray%.prototype.join", "description": " >Concatenates the result of toString for each value with custom separator\n", "info": " |22.2.3.15 %TypedArray%.prototype.join ( separator )\n\n%TypedArray%.prototype.join is a distinct function that implements the same\nalgorithm as Array.prototype.join as defined in 22.1.3.13 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\".\n\n22.1.3.13 Array.prototype.join (separator)\n\n...\n7. If element0 is undefined or null, let R be the empty String; otherwise, let\nR be ? ToString(element0).\n8. Let k be 1.\n9. Repeat, while k < len\na. Let S be the String value produced by concatenating R and sep.\nb. Let element be ? Get(O, ! ToString(k)).\nc. If element is undefined or null, let next be the empty String; otherwise,\nlet next be ? ToString(element).\nd. Let R be a String value produced by concatenating S and next.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/join/BigInt/empty-instance-empty-string.js", "esid": " sec-%typedarray%.prototype.join", "description": " Return the empty String if length is 0", "info": " |22.2.3.15 %TypedArray%.prototype.join ( separator )\n\n%TypedArray%.prototype.join is a distinct function that implements the same\nalgorithm as Array.prototype.join as defined in 22.1.3.13 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\".\n\n22.1.3.13 Array.prototype.join (separator)\n\n...\n4. Let sep be ? ToString(separator).\n5. If len is zero, return the empty String.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/join/BigInt/get-length-uses-internal-arraylength.js", "esid": " sec-%typedarray%.prototype.join", "description": " Get \"length\" uses internal ArrayLength", "info": " |22.2.3.15 %TypedArray%.prototype.join ( separator )\n\n%TypedArray%.prototype.join is a distinct function that implements the same\nalgorithm as Array.prototype.join as defined in 22.1.3.13 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\".\n\n22.1.3.13 Array.prototype.join (separator)\n\n1. Let O be ? ToObject(this value).\n2. Let len be ? ToLength(? Get(O, \"length\")).\n...\n5. If len is zero, return the empty String.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/join/BigInt/result-from-tostring-on-each-simple-value.js", "esid": " sec-%typedarray%.prototype.join", "description": " Concatenates the result of toString for each simple value", "info": " |22.2.3.15 %TypedArray%.prototype.join ( separator )\n\n%TypedArray%.prototype.join is a distinct function that implements the same\nalgorithm as Array.prototype.join as defined in 22.1.3.13 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\".\n\n22.1.3.13 Array.prototype.join (separator)\n\n...\n7. If element0 is undefined or null, let R be the empty String; otherwise, let\nR be ? ToString(element0).\n8. Let k be 1.\n9. Repeat, while k < len\na. Let S be the String value produced by concatenating R and sep.\nb. Let element be ? Get(O, ! ToString(k)).\nc. If element is undefined or null, let next be the empty String; otherwise,\nlet next be ? ToString(element).\nd. Let R be a String value produced by concatenating S and next.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/join/BigInt/return-abrupt-from-separator-symbol.js", "esid": " sec-%typedarray%.prototype.join", "description": " Return abrupt from ToString(Symbol separator)", "info": " |22.2.3.15 %TypedArray%.prototype.join ( separator )\n\n%TypedArray%.prototype.join is a distinct function that implements the same\nalgorithm as Array.prototype.join as defined in 22.1.3.13 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\".\n\n22.1.3.13 Array.prototype.join (separator)\n\n...\n4. Let sep be ? ToString(separator).\n5. If len is zero, return the empty String.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/join/BigInt/return-abrupt-from-separator.js", "esid": " sec-%typedarray%.prototype.join", "description": " Return abrupt from ToString(separator)", "info": " |22.2.3.15 %TypedArray%.prototype.join ( separator )\n\n%TypedArray%.prototype.join is a distinct function that implements the same\nalgorithm as Array.prototype.join as defined in 22.1.3.13 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\".\n\n22.1.3.13 Array.prototype.join (separator)\n\n...\n4. Let sep be ? ToString(separator).\n5. If len is zero, return the empty String.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/keys/BigInt/iter-prototype.js", "esid": " sec-%typedarray%.prototype.keys", "description": " >The prototype of the returned iterator is ArrayIteratorPrototype\n", "info": " |22.2.3.16 %TypedArray%.prototype.keys ( )\n\n...\n3. Return CreateArrayIterator(O, \"key\").\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol.iterator", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/keys/BigInt/return-itor.js", "esid": " sec-%typedarray%.prototype.keys", "description": " Return an iterator for the keys.", "info": " |22.2.3.16 %TypedArray%.prototype.keys ( )\n\n...\n3. Return CreateArrayIterator(O, \"key\").\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/lastIndexOf/BigInt/fromIndex-infinity.js", "esid": " sec-%typedarray%.prototype.lastindexof", "description": " handle Infinity values for fromIndex", "info": " |22.2.3.17 %TypedArray%.prototype.lastIndexOf ( searchElement [ , fromIndex ] )\n\n%TypedArray%.prototype.lastIndexOf is a distinct function that implements the\nsame algorithm as Array.prototype.lastIndexOf as defined in 22.1.3.15 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n22.1.3.15 Array.prototype.lastIndexOf ( searchElement [ , fromIndex ] )\n\n...\n5. If n \u2265 0, then\na. If n is -0, let k be +0; else let k be min(n, len - 1).\n6. Else n < 0,\na. Let k be len + n.\n7. Repeat, while k \u2265 0\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/lastIndexOf/BigInt/fromIndex-minus-zero.js", "esid": " sec-%typedarray%.prototype.lastindexof", "description": " -0 fromIndex becomes 0", "info": " |22.2.3.17 %TypedArray%.prototype.lastIndexOf ( searchElement [ , fromIndex ] )\n\n%TypedArray%.prototype.lastIndexOf is a distinct function that implements the\nsame algorithm as Array.prototype.lastIndexOf as defined in 22.1.3.15 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n22.1.3.15 Array.prototype.lastIndexOf ( searchElement [ , fromIndex ] )\n\n...\n5. If n \u2265 0, then\na. If n is -0, let k be +0; else let k be min(n, len - 1).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/lastIndexOf/BigInt/get-length-uses-internal-arraylength.js", "esid": " sec-%typedarray%.prototype.lastindexof", "description": " Get \"length\" uses internal ArrayLength", "info": " |22.2.3.17 %TypedArray%.prototype.lastIndexOf ( searchElement [ , fromIndex ] )\n\n%TypedArray%.prototype.lastIndexOf is a distinct function that implements the\nsame algorithm as Array.prototype.lastIndexOf as defined in 22.1.3.15 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n22.1.3.15 Array.prototype.lastIndexOf ( searchElement [ , fromIndex ] )\n\n...\n2. Let len be ? ToLength(? Get(O, \"length\")).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/lastIndexOf/BigInt/length-zero-returns-minus-one.js", "esid": " sec-%typedarray%.prototype.lastindexof", "description": " Returns -1 if length is 0", "info": " |22.2.3.17 %TypedArray%.prototype.lastIndexOf ( searchElement [ , fromIndex ] )\n\n%TypedArray%.prototype.lastIndexOf is a distinct function that implements the\nsame algorithm as Array.prototype.lastIndexOf as defined in 22.1.3.15 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n22.1.3.15 Array.prototype.lastIndexOf ( searchElement [ , fromIndex ] )\n\n...\n2. Let len be ? ToLength(? Get(O, \"length\")).\n3. If len is 0, return -1.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/lastIndexOf/BigInt/no-arg.js", "esid": " sec-%typedarray%.prototype.lastindexof", "description": " >If `searchElement` is not supplied, -1 is returned.\n", "info": " |%TypedArray%.prototype.lastIndexOf ( searchElement [ , fromIndex ] )\n\n%TypedArray%.prototype.lastIndexOf is a distinct function that implements\nthe same algorithm as Array.prototype.lastIndexOf as defined in 22.1.3.17\nexcept that the this value's [[ArrayLength]] internal slot is accessed\nin place of performing a [[Get]] of \"length\".\n\nArray.prototype.lastIndexOf ( searchElement [ , fromIndex ] )\n\n[...]\n8. Return -1.\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/lastIndexOf/BigInt/return-abrupt-tointeger-fromindex-symbol.js", "esid": " sec-%typedarray%.prototype.lastindexof", "description": " Return abrupt from ToInteger(fromIndex) - using symbol", "info": " |22.2.3.17 %TypedArray%.prototype.lastIndexOf ( searchElement [ , fromIndex ] )\n\n%TypedArray%.prototype.lastIndexOf is a distinct function that implements the\nsame algorithm as Array.prototype.lastIndexOf as defined in 22.1.3.15 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n22.1.3.15 Array.prototype.lastIndexOf ( searchElement [ , fromIndex ] )\n\n...\n4. If argument fromIndex was passed, let n be ? ToInteger(fromIndex); else let\nn be len-1.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/lastIndexOf/BigInt/return-abrupt-tointeger-fromindex.js", "esid": " sec-%typedarray%.prototype.lastindexof", "description": " Return abrupt from ToInteger(fromIndex)", "info": " |22.2.3.17 %TypedArray%.prototype.lastIndexOf ( searchElement [ , fromIndex ] )\n\n%TypedArray%.prototype.lastIndexOf is a distinct function that implements the\nsame algorithm as Array.prototype.lastIndexOf as defined in 22.1.3.15 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n22.1.3.15 Array.prototype.lastIndexOf ( searchElement [ , fromIndex ] )\n\n...\n4. If argument fromIndex was passed, let n be ? ToInteger(fromIndex); else let\nn be len-1.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/lastIndexOf/BigInt/search-found-returns-index.js", "esid": " sec-%typedarray%.prototype.lastindexof", "description": " returns index for the first found element", "info": " |22.2.3.17 %TypedArray%.prototype.lastIndexOf ( searchElement [ , fromIndex ] )\n\n%TypedArray%.prototype.lastIndexOf is a distinct function that implements the\nsame algorithm as Array.prototype.lastIndexOf as defined in 22.1.3.15 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n22.1.3.15 Array.prototype.lastIndexOf ( searchElement [ , fromIndex ] )\n\n...\n5. If n \u2265 0, then\na. If n is -0, let k be +0; else let k be min(n, len - 1).\n6. Else n < 0,\na. Let k be len + n.\n7. Repeat, while k \u2265 0\na. Let kPresent be ? HasProperty(O, ! ToString(k)).\nb. If kPresent is true, then\ni. Let elementK be ? Get(O, ! ToString(k)).\nii. Let same be the result of performing Strict Equality Comparison\nsearchElement === elementK.\niii. If same is true, return k.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/lastIndexOf/BigInt/search-not-found-returns-minus-one.js", "esid": " sec-%typedarray%.prototype.lastindexof", "description": " returns -1 if the element if not found", "info": " |22.2.3.17 %TypedArray%.prototype.lastIndexOf ( searchElement [ , fromIndex ] )\n\n%TypedArray%.prototype.lastIndexOf is a distinct function that implements the\nsame algorithm as Array.prototype.lastIndexOf as defined in 22.1.3.15 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n22.1.3.15 Array.prototype.lastIndexOf ( searchElement [ , fromIndex ] )\n\n...\n5. If n \u2265 0, then\na. If n is -0, let k be +0; else let k be min(n, len - 1).\n6. Else n < 0,\na. Let k be len + n.\n7. Repeat, while k \u2265 0\n...\n8. Return -1.\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/lastIndexOf/BigInt/tointeger-fromindex.js", "esid": " sec-%typedarray%.prototype.lastindexof", "description": " Return -1 if fromIndex >= ArrayLength - converted values", "info": " |22.2.3.17 %TypedArray%.prototype.lastIndexOf ( searchElement [ , fromIndex ] )\n\n%TypedArray%.prototype.lastIndexOf is a distinct function that implements the\nsame algorithm as Array.prototype.lastIndexOf as defined in 22.1.3.15 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n22.1.3.15 Array.prototype.lastIndexOf ( searchElement [ , fromIndex ] )\n\n...\n4. If argument fromIndex was passed, let n be ? ToInteger(fromIndex); else let\nn be len-1.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/length/BigInt/return-length.js", "esid": " sec-get-%typedarray%.prototype.length", "description": " >Return value from the [[ArrayLength]] internal slot\n", "info": " |22.2.3.18 get %TypedArray%.prototype.length\n\n...\n6. Let length be the value of O's [[ArrayLength]] internal slot.\n7. Return length.\n\n---\n\nThe current tests on `prop-desc.js` and `length.js` already assert `length` is\nnot a dynamic property as in regular arrays.\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/map/BigInt/arraylength-internal.js", "esid": " sec-%typedarray%.prototype.map", "description": " >[[ArrayLength]] is accessed in place of performing a [[Get]] of \"length\"\n", "info": " |22.2.3.19 %TypedArray%.prototype.map ( callbackfn [ , thisArg ] )\n\n...\n3. Let len be the value of O's [[ArrayLength]] internal slot.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/map/BigInt/callbackfn-arguments-with-thisarg.js", "esid": " sec-%typedarray%.prototype.map", "description": " >thisArg does not affect callbackfn arguments\n", "info": " |22.2.3.19 %TypedArray%.prototype.map ( callbackfn [ , thisArg ] )\n\n...\n8. Repeat, while k < len\na. Let Pk be ! ToString(k).\nb. Let kValue be ? Get(O, Pk).\nc. Let mappedValue be ? Call(callbackfn, T, \u00ab kValue, k, O \u00bb).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/map/BigInt/callbackfn-arguments-without-thisarg.js", "esid": " sec-%typedarray%.prototype.map", "description": " >callbackfn arguments\n", "info": " |22.2.3.19 %TypedArray%.prototype.map ( callbackfn [ , thisArg ] )\n\n...\n8. Repeat, while k < len\na. Let Pk be ! ToString(k).\nb. Let kValue be ? Get(O, Pk).\nc. Let mappedValue be ? Call(callbackfn, T, \u00ab kValue, k, O \u00bb).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/map/BigInt/callbackfn-is-not-callable.js", "esid": " sec-%typedarray%.prototype.map", "description": " >callbackfn is not callable\n", "info": " |22.2.3.19 %TypedArray%.prototype.map ( callbackfn [ , thisArg ] )\n\n...\n4. If IsCallable(callbackfn) is false, throw a TypeError exception.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/map/BigInt/callbackfn-no-interaction-over-non-integer-properties.js", "esid": " sec-%typedarray%.prototype.map", "description": " >Does not interact over non-integer properties\n", "info": " |22.2.3.19 %TypedArray%.prototype.map ( callbackfn [ , thisArg ] )\n\n...\n8. Repeat, while k < len\na. Let Pk be ! ToString(k).\nb. Let kValue be ? Get(O, Pk).\nc. Let mappedValue be ? Call(callbackfn, T, \u00ab kValue, k, O \u00bb).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/map/BigInt/callbackfn-not-called-on-empty.js", "esid": " sec-%typedarray%.prototype.map", "description": " >callbackfn is not called on empty instances\n", "info": " |22.2.3.19 %TypedArray%.prototype.map ( callbackfn [ , thisArg ] )\n\n...\n7. Let k be 0.\n8. Repeat, while k < len\n...\nc. Let mappedValue be ? Call(callbackfn, T, \u00ab kValue, k, O \u00bb).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/map/BigInt/callbackfn-return-affects-returned-object.js", "esid": " sec-%typedarray%.prototype.map", "description": " >The callbackfn returned values are applied to the new instance\n", "info": " |22.2.3.19 %TypedArray%.prototype.map ( callbackfn [ , thisArg ] )\n\n6. Let A be ? TypedArraySpeciesCreate(O, \u00ab len \u00bb).\n7. Let k be 0.\n8. Repeat, while k < len\n...\nc. Let mappedValue be ? Call(callbackfn, T, \u00ab kValue, k, O \u00bb).\nd. Perform ? Set(A, Pk, mappedValue, true).\n...\n9. Return A.\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/map/BigInt/callbackfn-return-does-not-change-instance.js", "esid": " sec-%typedarray%.prototype.map", "description": " >The callbackfn return does not change the `this` instance\n", "info": " |22.2.3.19 %TypedArray%.prototype.map ( callbackfn [ , thisArg ] )\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/map/BigInt/callbackfn-return-does-not-copy-non-integer-properties.js", "esid": " sec-%typedarray%.prototype.map", "description": " >Does not copy non-integer properties to returned value\n", "info": " |22.2.3.19 %TypedArray%.prototype.map ( callbackfn [ , thisArg ] )\n\n...\n8. Repeat, while k < len\na. Let Pk be ! ToString(k).\nb. Let kValue be ? Get(O, Pk).\nc. Let mappedValue be ? Call(callbackfn, T, \u00ab kValue, k, O \u00bb).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/map/BigInt/callbackfn-returns-abrupt.js", "esid": " sec-%typedarray%.prototype.map", "description": " >Returns abrupt from callbackfn\n", "info": " |22.2.3.19 %TypedArray%.prototype.map ( callbackfn [ , thisArg ] )\n\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/map/BigInt/callbackfn-set-value-during-interaction.js", "esid": " sec-%typedarray%.prototype.map", "description": " >Integer indexed values changed during iteration\n", "info": " |22.2.3.19 %TypedArray%.prototype.map ( callbackfn [ , thisArg ] )\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Reflect.set", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/map/BigInt/callbackfn-this.js", "esid": " sec-%typedarray%.prototype.map", "description": " >callbackfn `this` value\n", "info": " |22.2.3.19 %TypedArray%.prototype.map ( callbackfn [ , thisArg ] )\n\n...\n5. If thisArg was supplied, let T be thisArg; else let T be undefined.\n...\n8. Repeat, while k < len\n...\nc. Let mappedValue be ? Call(callbackfn, T, \u00ab kValue, k, O \u00bb).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/map/BigInt/return-new-typedarray-from-empty-length.js", "esid": " sec-%typedarray%.prototype.map", "description": " >Returns a new typedArray instance from the same constructor with the same\nlength and a new buffer object - testing on an instance with length == 0\n", "info": " |22.2.3.19 %TypedArray%.prototype.map ( callbackfn [ , thisArg ] )\n\n...\n6. Let A be ? TypedArraySpeciesCreate(O, \u00ab len \u00bb).\n7. Let k be 0.\n8. Repeat, while k < len\n...\nc. Let mappedValue be ? Call(callbackfn, T, \u00ab kValue, k, O \u00bb).\n...\n9. Return A.\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/map/BigInt/return-new-typedarray-from-positive-length.js", "esid": " sec-%typedarray%.prototype.map", "description": " >Returns a new typedArray instance from the same constructor with the same\nlength and a new buffer object - testing on an instance with length > 0\n", "info": " |22.2.3.19 %TypedArray%.prototype.map ( callbackfn [ , thisArg ] )\n\n...\n6. Let A be ? TypedArraySpeciesCreate(O, \u00ab len \u00bb).\n7. Let k be 0.\n8. Repeat, while k < len\n...\nc. Let mappedValue be ? Call(callbackfn, T, \u00ab kValue, k, O \u00bb).\n...\n9. Return A.\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/map/BigInt/speciesctor-get-ctor-abrupt.js", "esid": " sec-%typedarray%.prototype.map", "description": " Return abrupt from SpeciesConstructor's get Constructor", "info": " |22.2.3.19 %TypedArray%.prototype.map ( callbackfn [ , thisArg ] )\n\n...\n6. Let A be ? TypedArraySpeciesCreate(O, \u00ab len \u00bb).\n...\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n1. Assert: Type(O) is Object.\n2. Let C be ? Get(O, \"constructor\").\n3. If C is undefined, return defaultConstructor.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/map/BigInt/speciesctor-get-ctor-inherited.js", "esid": " sec-%typedarray%.prototype.map", "description": " get inherited constructor on SpeciesConstructor", "info": " |22.2.3.19 %TypedArray%.prototype.map ( callbackfn [ , thisArg ] )\n\n...\n6. Let A be ? TypedArraySpeciesCreate(O, \u00ab len \u00bb).\n...\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n1. Assert: Type(O) is Object.\n2. Let C be ? Get(O, \"constructor\").\n3. If C is undefined, return defaultConstructor.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/map/BigInt/speciesctor-get-ctor-returns-throws.js", "esid": " sec-%typedarray%.prototype.map", "description": " >Throws if O.constructor returns a non-Object and non-undefined value\n", "info": " |22.2.3.19 %TypedArray%.prototype.map ( callbackfn [ , thisArg ] )\n\n...\n6. Let A be ? TypedArraySpeciesCreate(O, \u00ab len \u00bb).\n...\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n1. Assert: Type(O) is Object.\n2. Let C be ? Get(O, \"constructor\").\n3. If C is undefined, return defaultConstructor.\n4. If Type(C) is not Object, throw a TypeError exception.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/map/BigInt/speciesctor-get-ctor.js", "esid": " sec-%typedarray%.prototype.map", "description": " get constructor on SpeciesConstructor", "info": " |22.2.3.19 %TypedArray%.prototype.map ( callbackfn [ , thisArg ] )\n\n...\n6. Let A be ? TypedArraySpeciesCreate(O, \u00ab len \u00bb).\n...\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n1. Assert: Type(O) is Object.\n2. Let C be ? Get(O, \"constructor\").\n3. If C is undefined, return defaultConstructor.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/map/BigInt/speciesctor-get-species-abrupt.js", "esid": " sec-%typedarray%.prototype.map", "description": " >Returns abrupt from get @@species on found constructor\n", "info": " |22.2.3.19 %TypedArray%.prototype.map ( callbackfn [ , thisArg ] )\n\n...\n6. Let A be ? TypedArraySpeciesCreate(O, \u00ab len \u00bb).\n...\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n1. Assert: Type(O) is Object.\n2. Let C be ? Get(O, \"constructor\").\n...\n5. Let S be ? Get(C, @@species).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol.species", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/map/BigInt/speciesctor-get-species-custom-ctor-invocation.js", "esid": " sec-%typedarray%.prototype.map", "description": " >Verify arguments on custom @@species construct call\n", "info": " |22.2.3.19 %TypedArray%.prototype.map ( callbackfn [ , thisArg ] )\n\n...\n6. Let A be ? TypedArraySpeciesCreate(O, \u00ab len \u00bb).\n...\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n4. Return ? TypedArrayCreate(constructor, argumentList).\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n...\n5. Let S be ? Get(C, @@species).\n...\n7. If IsConstructor(S) is true, return S.\n...\n\n22.2.4.6 TypedArrayCreate ( constructor, argumentList )\n\n1. Let newTypedArray be ? Construct(constructor, argumentList).\n2. Perform ? ValidateTypedArray(newTypedArray).\n3. If argumentList is a List of a single Number, then\n...\n4. Return newTypedArray.\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol.species", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/map/BigInt/speciesctor-get-species-custom-ctor-length-throws.js", "esid": " sec-%typedarray%.prototype.map", "description": " >Throws a TypeError if new typedArray's length < len\n", "info": " |22.2.3.19 %TypedArray%.prototype.map ( callbackfn [ , thisArg ] )\n\n...\n6. Let A be ? TypedArraySpeciesCreate(O, \u00ab len \u00bb).\n...\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n4. Return ? TypedArrayCreate(constructor, argumentList).\n\n22.2.4.6 TypedArrayCreate ( constructor, argumentList )\n\n...\n3. If argumentList is a List of a single Number, then\na. If the value of newTypedArray's [[ArrayLength]] internal slot <\nargumentList[0], throw a TypeError exception.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol.species", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/map/BigInt/speciesctor-get-species-custom-ctor-length.js", "esid": " sec-%typedarray%.prototype.map", "description": " >Does not throw a TypeError if new typedArray's length >= len\n", "info": " |22.2.3.19 %TypedArray%.prototype.map ( callbackfn [ , thisArg ] )\n\n...\n6. Let A be ? TypedArraySpeciesCreate(O, \u00ab len \u00bb).\n...\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n4. Return ? TypedArrayCreate(constructor, argumentList).\n\n22.2.4.6 TypedArrayCreate ( constructor, argumentList )\n\n...\n3. If argumentList is a List of a single Number, then\na. If the value of newTypedArray's [[ArrayLength]] internal slot <\nargumentList[0], throw a TypeError exception.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol.species", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/map/BigInt/speciesctor-get-species-custom-ctor-returns-another-instance.js", "esid": " sec-%typedarray%.prototype.map", "description": " >Custom @@species constructor may return a different TypedArray\n", "info": " |22.2.3.19 %TypedArray%.prototype.map ( callbackfn [ , thisArg ] )\n\n...\n6. Let A be ? TypedArraySpeciesCreate(O, \u00ab len \u00bb).\n...\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n4. Return ? TypedArrayCreate(constructor, argumentList).\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n...\n5. Let S be ? Get(C, @@species).\n...\n7. If IsConstructor(S) is true, return S.\n...\n\n22.2.4.6 TypedArrayCreate ( constructor, argumentList )\n\n1. Let newTypedArray be ? Construct(constructor, argumentList).\n2. Perform ? ValidateTypedArray(newTypedArray).\n3. If argumentList is a List of a single Number, then\n...\n4. Return newTypedArray.\n", "includes": ["testBigIntTypedArray.js", "compareArray.js"], "features": ["BigInt", "Symbol.species", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/map/BigInt/speciesctor-get-species-custom-ctor-throws.js", "esid": " sec-%typedarray%.prototype.map", "description": " >Custom @@species constructor throws if it does not return a compatible object\n", "info": " |22.2.3.19 %TypedArray%.prototype.map ( callbackfn [ , thisArg ] )\n\n...\n6. Let A be ? TypedArraySpeciesCreate(O, \u00ab len \u00bb).\n...\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n4. Return ? TypedArrayCreate(constructor, argumentList).\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n...\n5. Let S be ? Get(C, @@species).\n...\n7. If IsConstructor(S) is true, return S.\n...\n\n22.2.4.6 TypedArrayCreate ( constructor, argumentList )\n\n1. Let newTypedArray be ? Construct(constructor, argumentList).\n2. Perform ? ValidateTypedArray(newTypedArray).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol.species", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/map/BigInt/speciesctor-get-species-custom-ctor.js", "esid": " sec-%typedarray%.prototype.map", "description": " >Use custom @@species constructor if available\n", "info": " |22.2.3.19 %TypedArray%.prototype.map ( callbackfn [ , thisArg ] )\n\n...\n6. Let A be ? TypedArraySpeciesCreate(O, \u00ab len \u00bb).\n...\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n4. Return ? TypedArrayCreate(constructor, argumentList).\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n...\n5. Let S be ? Get(C, @@species).\n...\n7. If IsConstructor(S) is true, return S.\n...\n\n22.2.4.6 TypedArrayCreate ( constructor, argumentList )\n\n1. Let newTypedArray be ? Construct(constructor, argumentList).\n2. Perform ? ValidateTypedArray(newTypedArray).\n3. If argumentList is a List of a single Number, then\n...\n4. Return newTypedArray.\n", "includes": ["testBigIntTypedArray.js", "compareArray.js"], "features": ["BigInt", "Symbol.species", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/map/BigInt/speciesctor-get-species-returns-throws.js", "esid": " sec-%typedarray%.prototype.map", "description": " >Throws if returned @@species is not a constructor, null or undefined.\n", "info": " |22.2.3.19 %TypedArray%.prototype.map ( callbackfn [ , thisArg ] )\n\n...\n6. Let A be ? TypedArraySpeciesCreate(O, \u00ab len \u00bb).\n...\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n...\n5. Let S be ? Get(C, @@species).\n6. If S is either undefined or null, return defaultConstructor.\n7. If IsConstructor(S) is true, return S.\n8. Throw a TypeError exception.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol.species", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/map/BigInt/speciesctor-get-species-use-default-ctor.js", "esid": " sec-%typedarray%.prototype.map", "description": " >Use defaultConstructor if @@species is either undefined or null\n", "info": " |22.2.3.19 %TypedArray%.prototype.map ( callbackfn [ , thisArg ] )\n\n...\n6. Let A be ? TypedArraySpeciesCreate(O, \u00ab len \u00bb).\n...\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n...\n5. Let S be ? Get(C, @@species).\n6. If S is either undefined or null, return defaultConstructor.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol.species", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/map/BigInt/speciesctor-get-species.js", "esid": " sec-%typedarray%.prototype.map", "description": " >get @@species from found constructor\n", "info": " |22.2.3.19 %TypedArray%.prototype.map ( callbackfn [ , thisArg ] )\n\n...\n6. Let A be ? TypedArraySpeciesCreate(O, \u00ab len \u00bb).\n...\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n1. Assert: Type(O) is Object.\n2. Let C be ? Get(O, \"constructor\").\n...\n5. Let S be ? Get(C, @@species).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol.species", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/map/BigInt/values-are-not-cached.js", "esid": " sec-%typedarray%.prototype.map", "description": " >Integer indexed values changed during iteration\n", "info": " |22.2.3.19 %TypedArray%.prototype.map ( callbackfn [ , thisArg ] )\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduce/BigInt/callbackfn-arguments-custom-accumulator.js", "esid": " sec-%typedarray%.prototype.reduce", "description": " >callbackfn arguments using custom accumulator\n", "info": " |22.2.3.20 %TypedArray%.prototype.reduce ( callbackfn [ , initialValue ] )\n\n%TypedArray%.prototype.reduce is a distinct function that implements the same\nalgorithm as Array.prototype.reduce as defined in 22.1.3.19 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\".\n\n22.1.3.19 Array.prototype.reduce ( callbackfn [ , initialValue ] )\n\n...\n8. Repeat, while k < len\n...\nc. If kPresent is true, then\n...\ni. Let accumulator be ? Call(callbackfn, undefined, \u00ab accumulator, kValue,\nk, O \u00bb).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduce/BigInt/callbackfn-arguments-default-accumulator.js", "esid": " sec-%typedarray%.prototype.reduce", "description": " >callbackfn arguments using default accumulator (value at index 0)\n", "info": " |22.2.3.20 %TypedArray%.prototype.reduce ( callbackfn [ , initialValue ] )\n\n%TypedArray%.prototype.reduce is a distinct function that implements the same\nalgorithm as Array.prototype.reduce as defined in 22.1.3.19 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\".\n\n22.1.3.19 Array.prototype.reduce ( callbackfn [ , initialValue ] )\n\n...\n7. Else initialValue is not present,\na. Let kPresent be false.\nb. Repeat, while kPresent is false and k < len\n...\niii. If kPresent is true, then\n1. Let accumulator be ? Get(O, Pk).\n...\n8. Repeat, while k < len\n...\nc. If kPresent is true, then\n...\ni. Let accumulator be ? Call(callbackfn, undefined, \u00ab accumulator, kValue,\nk, O \u00bb).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduce/BigInt/callbackfn-is-not-callable-throws.js", "esid": " sec-%typedarray%.prototype.reduce", "description": " >Throws TypeError if callbackfn is not callable\n", "info": " |22.2.3.20 %TypedArray%.prototype.reduce ( callbackfn [ , initialValue ] )\n\n%TypedArray%.prototype.reduce is a distinct function that implements the same\nalgorithm as Array.prototype.reduce as defined in 22.1.3.19 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\".\n\n22.1.3.19 Array.prototype.reduce ( callbackfn [ , initialValue ] )\n\n...\n3. If IsCallable(callbackfn) is false, throw a TypeError exception.\n4. If len is 0 and initialValue is not present, throw a TypeError exception.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduce/BigInt/callbackfn-no-iteration-over-non-integer-properties.js", "esid": " sec-%typedarray%.prototype.reduce", "description": " >Does not iterate over non-integer properties\n", "info": " |22.2.3.20 %TypedArray%.prototype.reduce ( callbackfn [ , initialValue ] )\n\n%TypedArray%.prototype.reduce is a distinct function that implements the same\nalgorithm as Array.prototype.reduce as defined in 22.1.3.19 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\".\n\n22.1.3.19 Array.prototype.reduce ( callbackfn [ , initialValue ] )\n\n...\n8. Repeat, while k < len\n...\nc. If kPresent is true, then\n...\ni. Let accumulator be ? Call(callbackfn, undefined, \u00ab accumulator, kValue,\nk, O \u00bb).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduce/BigInt/callbackfn-not-called-on-empty.js", "esid": " sec-%typedarray%.prototype.reduce", "description": " >callbackfn is not called on empty instances\n", "info": " |22.2.3.20 %TypedArray%.prototype.reduce ( callbackfn [ , initialValue ] )\n\n%TypedArray%.prototype.reduce is a distinct function that implements the same\nalgorithm as Array.prototype.reduce as defined in 22.1.3.19 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\".\n\n22.1.3.19 Array.prototype.reduce ( callbackfn [ , initialValue ] )\n\n...\n4. If len is 0 and initialValue is not present, throw a TypeError exception.\n...\n8. Repeat, while k < len\n...\nc. If kPresent is true, then\n...\ni. Let accumulator be ? Call(callbackfn, undefined, \u00ab accumulator, kValue,\nk, O \u00bb).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduce/BigInt/callbackfn-return-does-not-change-instance.js", "esid": " sec-%typedarray%.prototype.reduce", "description": " >The callbackfn return does not change the `this` instance\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduce/BigInt/callbackfn-returns-abrupt.js", "esid": " sec-%typedarray%.prototype.reduce", "description": " >Returns abrupt from callbackfn\n", "info": " |22.2.3.20 %TypedArray%.prototype.reduce ( callbackfn [ , initialValue ] )\n\n%TypedArray%.prototype.reduce is a distinct function that implements the same\nalgorithm as Array.prototype.reduce as defined in 22.1.3.19 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\".\n\n22.1.3.19 Array.prototype.reduce ( callbackfn [ , initialValue ] )\n\n...\n8. Repeat, while k < len\n...\nc. If kPresent is true, then\n...\ni. Let accumulator be ? Call(callbackfn, undefined, \u00ab accumulator, kValue,\nk, O \u00bb).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduce/BigInt/callbackfn-set-value-during-iteration.js", "esid": " sec-%typedarray%.prototype.reduce", "description": " >Integer indexed values changed during iteration\n", "info": " |22.2.3.20 %TypedArray%.prototype.reduce ( callbackfn [ , initialValue ] )\n\n%TypedArray%.prototype.reduce is a distinct function that implements the same\nalgorithm as Array.prototype.reduce as defined in 22.1.3.19 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\".\n\n22.1.3.19 Array.prototype.reduce ( callbackfn [ , initialValue ] )\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Reflect.set", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduce/BigInt/callbackfn-this.js", "esid": " sec-%typedarray%.prototype.reduce", "description": " >callbackfn `this` value\n", "info": " |22.2.3.20 %TypedArray%.prototype.reduce ( callbackfn [ , initialValue ] )\n\n%TypedArray%.prototype.reduce is a distinct function that implements the same\nalgorithm as Array.prototype.reduce as defined in 22.1.3.19 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\".\n\n22.1.3.19 Array.prototype.reduce ( callbackfn [ , initialValue ] )\n\n...\n8. Repeat, while k < len\n...\nc. If kPresent is true, then\n...\ni. Let accumulator be ? Call(callbackfn, undefined, \u00ab accumulator, kValue,\nk, O \u00bb).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduce/BigInt/empty-instance-return-initialvalue.js", "esid": " sec-%typedarray%.prototype.reduce", "description": " >Returns given initialValue on empty instances without calling callbackfn\n", "info": " |22.2.3.20 %TypedArray%.prototype.reduce ( callbackfn [ , initialValue ] )\n\n%TypedArray%.prototype.reduce is a distinct function that implements the same\nalgorithm as Array.prototype.reduce as defined in 22.1.3.19 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\".\n\n22.1.3.19 Array.prototype.reduce ( callbackfn [ , initialValue ] )\n\n...\n7. Else initialValue is not present,\n...\nb. Repeat, while kPresent is false and k < len\n...\niii. If kPresent is true, then\n1. Let accumulator be ? Get(O, Pk).\niv. Increase k by 1.\n...\n8. Repeat, while k < len\n...\n9. Return accumulator.\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduce/BigInt/empty-instance-with-no-initialvalue-throws.js", "esid": " sec-%typedarray%.prototype.reduce", "description": " >If len is 0 and initialValue is not present, throw a TypeError exception.\n", "info": " |22.2.3.20 %TypedArray%.prototype.reduce ( callbackfn [ , initialValue ] )\n\n%TypedArray%.prototype.reduce is a distinct function that implements the same\nalgorithm as Array.prototype.reduce as defined in 22.1.3.19 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\".\n\n22.1.3.19 Array.prototype.reduce ( callbackfn [ , initialValue ] )\n\n...\n4. If len is 0 and initialValue is not present, throw a TypeError exception.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduce/BigInt/get-length-uses-internal-arraylength.js", "esid": " sec-%typedarray%.prototype.reduce", "description": " Get \"length\" uses internal ArrayLength", "info": " |22.2.3.20 %TypedArray%.prototype.reduce ( callbackfn [ , initialValue ] )\n\n%TypedArray%.prototype.reduce is a distinct function that implements the same\nalgorithm as Array.prototype.reduce as defined in 22.1.3.19 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\".\n\n22.1.3.19 Array.prototype.reduce ( callbackfn [ , initialValue ] )\n\n1. Let O be ? ToObject(this value).\n2. Let len be ? ToLength(? Get(O, \"length\")).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduce/BigInt/result-is-last-callbackfn-return.js", "esid": " sec-%typedarray%.prototype.reduce", "description": " >Returns last accumulator value\n", "info": " |22.2.3.20 %TypedArray%.prototype.reduce ( callbackfn [ , initialValue ] )\n\n%TypedArray%.prototype.reduce is a distinct function that implements the same\nalgorithm as Array.prototype.reduce as defined in 22.1.3.19 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\".\n\n22.1.3.19 Array.prototype.reduce ( callbackfn [ , initialValue ] )\n\n...\n7. Else initialValue is not present,\n...\nb. Repeat, while kPresent is false and k < len\n...\niii. If kPresent is true, then\n1. Let accumulator be ? Get(O, Pk).\niv. Increase k by 1.\n...\n8. Repeat, while k < len\n...\nc. If kPresent is true, then\ni. Let kValue be ? Get(O, Pk).\nii. Let accumulator be ? Call(callbackfn, undefined, \u00ab accumulator,\nkValue, k, O \u00bb).\n9. Return accumulator.\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduce/BigInt/result-of-any-type.js", "esid": " sec-%typedarray%.prototype.reduce", "description": " >Result can be of any type without any number conversions\n", "info": " |22.2.3.20 %TypedArray%.prototype.reduce ( callbackfn [ , initialValue ] )\n\n%TypedArray%.prototype.reduce is a distinct function that implements the same\nalgorithm as Array.prototype.reduce as defined in 22.1.3.19 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\".\n\n22.1.3.19 Array.prototype.reduce ( callbackfn [ , initialValue ] )\n\n...\n7. Else initialValue is not present,\n...\nb. Repeat, while kPresent is false and k < len\n...\niii. If kPresent is true, then\n1. Let accumulator be ? Get(O, Pk).\niv. Increase k by 1.\n...\n8. Repeat, while k < len\n...\nc. If kPresent is true, then\ni. Let kValue be ? Get(O, Pk).\nii. Let accumulator be ? Call(callbackfn, undefined, \u00ab accumulator,\nkValue, k, O \u00bb).\n9. Return accumulator.\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduce/BigInt/return-first-value-without-callbackfn.js", "esid": " sec-%typedarray%.prototype.reduce", "description": " >Returns [0] without calling callbackfn if length is 1 and initialValue is not\npresent.\n", "info": " |22.2.3.20 %TypedArray%.prototype.reduce ( callbackfn [ , initialValue ] )\n\n%TypedArray%.prototype.reduce is a distinct function that implements the same\nalgorithm as Array.prototype.reduce as defined in 22.1.3.19 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\".\n\n22.1.3.19 Array.prototype.reduce ( callbackfn [ , initialValue ] )\n\n...\n7. Else initialValue is not present,\n...\nb. Repeat, while kPresent is false and k < len\n...\niii. If kPresent is true, then\n1. Let accumulator be ? Get(O, Pk).\niv. Increase k by 1.\n...\n8. Repeat, while k < len\n...\n9. Return accumulator.\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduce/BigInt/values-are-not-cached.js", "esid": " sec-%typedarray%.prototype.reduce", "description": " >Integer indexed values are not cached before iteration\n", "info": " |22.2.3.20 %TypedArray%.prototype.reduce ( callbackfn [ , initialValue ] )\n\n%TypedArray%.prototype.reduce is a distinct function that implements the same\nalgorithm as Array.prototype.reduce as defined in 22.1.3.19 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\".\n\n22.1.3.19 Array.prototype.reduce ( callbackfn [ , initialValue ] )\n\n...\n8. Repeat, while k < len\n...\nc. If kPresent is true, then\ni. Let kValue be ? Get(O, Pk).\nii. Let accumulator be ? Call(callbackfn, undefined, \u00ab accumulator, kValue,\nk, O \u00bb).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduceRight/BigInt/callbackfn-arguments-custom-accumulator.js", "esid": " sec-%typedarray%.prototype.reduceright", "description": " >callbackfn arguments using custom accumulator\n", "info": " |22.2.3.21 %TypedArray%.prototype.reduceRight ( callbackfn [ , initialValue ] )\n\n%TypedArray%.prototype.reduceRight is a distinct function that implements the\nsame algorithm as Array.prototype.reduceRight as defined in 22.1.3.20 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n22.1.3.20 Array.prototype.reduceRight ( callbackfn [ , initialValue ] )\n\n...\n8. Repeat, while k \u2265 0\n...\nc. If kPresent is true, then\ni. Let kValue be ? Get(O, Pk).\nii. Let accumulator be ? Call(callbackfn, undefined, \u00ab accumulator,\nkValue, k, O \u00bb).\nd. Decrease k by 1.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduceRight/BigInt/callbackfn-arguments-default-accumulator.js", "esid": " sec-%typedarray%.prototype.reduceright", "description": " >callbackfn arguments using default accumulator (value at last index)\n", "info": " |22.2.3.21 %TypedArray%.prototype.reduceRight ( callbackfn [ , initialValue ] )\n\n%TypedArray%.prototype.reduceRight is a distinct function that implements the\nsame algorithm as Array.prototype.reduceRight as defined in 22.1.3.20 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n22.1.3.20 Array.prototype.reduceRight ( callbackfn [ , initialValue ] )\n\n...\n7. Else initialValue is not present,\n...\nb. Repeat, while kPresent is false and k \u2265 0\n...\nii. Let kPresent be ? HasProperty(O, Pk).\niii. If kPresent is true, then\n1. Let accumulator be ? Get(O, Pk).\niv. Decrease k by 1.\n...\n8. Repeat, while k \u2265 0\n...\nc. If kPresent is true, then\ni. Let kValue be ? Get(O, Pk).\nii. Let accumulator be ? Call(callbackfn, undefined, \u00ab accumulator,\nkValue, k, O \u00bb).\nd. Decrease k by 1.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduceRight/BigInt/callbackfn-is-not-callable-throws.js", "esid": " sec-%typedarray%.prototype.reduceright", "description": " >Throws TypeError if callbackfn is not callable\n", "info": " |22.2.3.21 %TypedArray%.prototype.reduceRight ( callbackfn [ , initialValue ] )\n\n%TypedArray%.prototype.reduceRight is a distinct function that implements the\nsame algorithm as Array.prototype.reduceRight as defined in 22.1.3.20 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n22.1.3.20 Array.prototype.reduceRight ( callbackfn [ , initialValue ] )\n\n...\n3. If IsCallable(callbackfn) is false, throw a TypeError exception.\n4. If len is 0 and initialValue is not present, throw a TypeError exception.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduceRight/BigInt/callbackfn-no-iteration-over-non-integer-properties.js", "esid": " sec-%typedarray%.prototype.reduceright", "description": " >Does not iterate over non-integer properties\n", "info": " |22.2.3.21 %TypedArray%.prototype.reduceRight ( callbackfn [ , initialValue ] )\n\n%TypedArray%.prototype.reduceRight is a distinct function that implements the\nsame algorithm as Array.prototype.reduceRight as defined in 22.1.3.20 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n22.1.3.20 Array.prototype.reduceRight ( callbackfn [ , initialValue ] )\n\n...\n8. Repeat, while k \u2265 0\n...\nc. If kPresent is true, then\ni. Let kValue be ? Get(O, Pk).\nii. Let accumulator be ? Call(callbackfn, undefined, \u00ab accumulator,\nkValue, k, O \u00bb).\nd. Decrease k by 1.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduceRight/BigInt/callbackfn-not-called-on-empty.js", "esid": " sec-%typedarray%.prototype.reduceright", "description": " >callbackfn is not called on empty instances\n", "info": " |22.2.3.21 %TypedArray%.prototype.reduceRight ( callbackfn [ , initialValue ] )\n\n%TypedArray%.prototype.reduceRight is a distinct function that implements the\nsame algorithm as Array.prototype.reduceRight as defined in 22.1.3.20 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n22.1.3.20 Array.prototype.reduceRight ( callbackfn [ , initialValue ] )\n\n...\n4. If len is 0 and initialValue is not present, throw a TypeError exception.\n...\n8. Repeat, while k \u2265 0\n...\nc. If kPresent is true, then\ni. Let kValue be ? Get(O, Pk).\nii. Let accumulator be ? Call(callbackfn, undefined, \u00ab accumulator,\nkValue, k, O \u00bb).\nd. Decrease k by 1.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduceRight/BigInt/callbackfn-return-does-not-change-instance.js", "esid": " sec-%typedarray%.prototype.reduceright", "description": " >The callbackfn return does not change the `this` instance\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduceRight/BigInt/callbackfn-returns-abrupt.js", "esid": " sec-%typedarray%.prototype.reduceright", "description": " >Returns abrupt from callbackfn\n", "info": " |22.2.3.21 %TypedArray%.prototype.reduceRight ( callbackfn [ , initialValue ] )\n\n%TypedArray%.prototype.reduceRight is a distinct function that implements the\nsame algorithm as Array.prototype.reduceRight as defined in 22.1.3.20 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n22.1.3.20 Array.prototype.reduceRight ( callbackfn [ , initialValue ] )\n\n...\n8. Repeat, while k < len\n...\nc. If kPresent is true, then\n...\ni. Let accumulator be ? Call(callbackfn, undefined, \u00ab accumulator, kValue,\nk, O \u00bb).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduceRight/BigInt/callbackfn-set-value-during-iteration.js", "esid": " sec-%typedarray%.prototype.reduceright", "description": " >Integer indexed values changed during iteration\n", "info": " |22.2.3.21 %TypedArray%.prototype.reduceRight ( callbackfn [ , initialValue ] )\n\n%TypedArray%.prototype.reduceRight is a distinct function that implements the\nsame algorithm as Array.prototype.reduceRight as defined in 22.1.3.20 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n22.1.3.20 Array.prototype.reduceRight ( callbackfn [ , initialValue ] )\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Reflect.set", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduceRight/BigInt/callbackfn-this.js", "esid": " sec-%typedarray%.prototype.reduceright", "description": " >callbackfn `this` value\n", "info": " |22.2.3.21 %TypedArray%.prototype.reduceRight ( callbackfn [ , initialValue ] )\n\n%TypedArray%.prototype.reduceRight is a distinct function that implements the\nsame algorithm as Array.prototype.reduceRight as defined in 22.1.3.20 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n22.1.3.20 Array.prototype.reduceRight ( callbackfn [ , initialValue ] )\n\n...\n8. Repeat, while k \u2265 0\n...\nc. If kPresent is true, then\ni. Let kValue be ? Get(O, Pk).\nii. Let accumulator be ? Call(callbackfn, undefined, \u00ab accumulator,\nkValue, k, O \u00bb).\nd. Decrease k by 1.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduceRight/BigInt/empty-instance-return-initialvalue.js", "esid": " sec-%typedarray%.prototype.reduceright", "description": " >Returns given initialValue on empty instances without calling callbackfn\n", "info": " |22.2.3.21 %TypedArray%.prototype.reduceRight ( callbackfn [ , initialValue ] )\n\n%TypedArray%.prototype.reduceRight is a distinct function that implements the\nsame algorithm as Array.prototype.reduceRight as defined in 22.1.3.20 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n22.1.3.20 Array.prototype.reduceRight ( callbackfn [ , initialValue ] )\n\n...\n7. Else initialValue is not present,\n...\nb. Repeat, while kPresent is false and k \u2265 0\n...\nii. Let kPresent be ? HasProperty(O, Pk).\niii. If kPresent is true, then\n1. Let accumulator be ? Get(O, Pk).\niv. Decrease k by 1.\n...\n8. Repeat, while k \u2265 0\n...\n9. Return accumulator.\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduceRight/BigInt/empty-instance-with-no-initialvalue-throws.js", "esid": " sec-%typedarray%.prototype.reduceright", "description": " >If len is 0 and initialValue is not present, throw a TypeError exception.\n", "info": " |22.2.3.21 %TypedArray%.prototype.reduceRight ( callbackfn [ , initialValue ] )\n\n%TypedArray%.prototype.reduceRight is a distinct function that implements the\nsame algorithm as Array.prototype.reduceRight as defined in 22.1.3.20 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n22.1.3.20 Array.prototype.reduceRight ( callbackfn [ , initialValue ] )\n\n...\n4. If len is 0 and initialValue is not present, throw a TypeError exception.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduceRight/BigInt/get-length-uses-internal-arraylength.js", "esid": " sec-%typedarray%.prototype.reduceright", "description": " Get \"length\" uses internal ArrayLength", "info": " |22.2.3.21 %TypedArray%.prototype.reduceRight ( callbackfn [ , initialValue ] )\n\n%TypedArray%.prototype.reduceRight is a distinct function that implements the\nsame algorithm as Array.prototype.reduceRight as defined in 22.1.3.20 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n22.1.3.20 Array.prototype.reduceRight ( callbackfn [ , initialValue ] )\n\n1. Let O be ? ToObject(this value).\n2. Let len be ? ToLength(? Get(O, \"length\")).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduceRight/BigInt/result-is-last-callbackfn-return.js", "esid": " sec-%typedarray%.prototype.reduceright", "description": " >Returns last accumulator value\n", "info": " |22.2.3.21 %TypedArray%.prototype.reduceRight ( callbackfn [ , initialValue ] )\n\n%TypedArray%.prototype.reduceRight is a distinct function that implements the\nsame algorithm as Array.prototype.reduceRight as defined in 22.1.3.20 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n22.1.3.20 Array.prototype.reduceRight ( callbackfn [ , initialValue ] )\n\n...\n7. Else initialValue is not present,\n...\nb. Repeat, while kPresent is false and k \u2265 0\n...\nii. Let kPresent be ? HasProperty(O, Pk).\niii. If kPresent is true, then\n1. Let accumulator be ? Get(O, Pk).\niv. Decrease k by 1.\n...\n8. Repeat, while k \u2265 0\n...\nc. If kPresent is true, then\ni. Let kValue be ? Get(O, Pk).\nii. Let accumulator be ? Call(callbackfn, undefined, \u00ab accumulator,\nkValue, k, O \u00bb).\nd. Decrease k by 1.\n9. Return accumulator.\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduceRight/BigInt/result-of-any-type.js", "esid": " sec-%typedarray%.prototype.reduceright", "description": " >Result can be of any type without any number conversions\n", "info": " |22.2.3.21 %TypedArray%.prototype.reduceRight ( callbackfn [ , initialValue ] )\n\n%TypedArray%.prototype.reduceRight is a distinct function that implements the\nsame algorithm as Array.prototype.reduceRight as defined in 22.1.3.20 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n22.1.3.20 Array.prototype.reduceRight ( callbackfn [ , initialValue ] )\n\n...\n7. Else initialValue is not present,\n...\nb. Repeat, while kPresent is false and k \u2265 0\n...\nii. Let kPresent be ? HasProperty(O, Pk).\niii. If kPresent is true, then\n1. Let accumulator be ? Get(O, Pk).\niv. Decrease k by 1.\n...\n8. Repeat, while k \u2265 0\n...\nc. If kPresent is true, then\ni. Let kValue be ? Get(O, Pk).\nii. Let accumulator be ? Call(callbackfn, undefined, \u00ab accumulator,\nkValue, k, O \u00bb).\nd. Decrease k by 1.\n9. Return accumulator.\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduceRight/BigInt/return-first-value-without-callbackfn.js", "esid": " sec-%typedarray%.prototype.reduceright", "description": " >Returns [0] without calling callbackfn if length is 1 and initialValue is not\npresent.\n", "info": " |22.2.3.21 %TypedArray%.prototype.reduceRight ( callbackfn [ , initialValue ] )\n\n%TypedArray%.prototype.reduceRight is a distinct function that implements the\nsame algorithm as Array.prototype.reduceRight as defined in 22.1.3.20 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n22.1.3.20 Array.prototype.reduceRight ( callbackfn [ , initialValue ] )\n\n...\n7. Else initialValue is not present,\n...\nb. Repeat, while kPresent is false and k \u2265 0\n...\nii. Let kPresent be ? HasProperty(O, Pk).\niii. If kPresent is true, then\n1. Let accumulator be ? Get(O, Pk).\niv. Decrease k by 1.\n...\n8. Repeat, while k \u2265 0\n...\n9. Return accumulator.\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduceRight/BigInt/values-are-not-cached.js", "esid": " sec-%typedarray%.prototype.reduceright", "description": " >Integer indexed values are not cached before iteration\n", "info": " |22.2.3.21 %TypedArray%.prototype.reduceRight ( callbackfn [ , initialValue ] )\n\n%TypedArray%.prototype.reduceRight is a distinct function that implements the\nsame algorithm as Array.prototype.reduceRight as defined in 22.1.3.20 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n22.1.3.20 Array.prototype.reduceRight ( callbackfn [ , initialValue ] )\n\n...\n8. Repeat, while k \u2265 0\n...\nc. If kPresent is true, then\ni. Let kValue be ? Get(O, Pk).\nii. Let accumulator be ? Call(callbackfn, undefined, \u00ab accumulator,\nkValue, k, O \u00bb).\nd. Decrease k by 1.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reverse/BigInt/get-length-uses-internal-arraylength.js", "esid": " sec-%typedarray%.prototype.reverse", "description": " Get \"length\" uses internal ArrayLength", "info": " |22.2.3.22 %TypedArray%.prototype.reverse ( )\n\n%TypedArray%.prototype.reverse is a distinct function that implements the same\nalgorithm as Array.prototype.reverse as defined in 22.1.3.21 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\".\n\n22.1.3.21 Array.prototype.reverse ( )\n\n1. Let O be ? ToObject(this value).\n2. Let len be ? ToLength(? Get(O, \"length\")).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reverse/BigInt/preserves-non-numeric-properties.js", "esid": " sec-%typedarray%.prototype.reverse", "description": " Preserves non numeric properties", "info": " |22.2.3.22 %TypedArray%.prototype.reverse ( )\n\n%TypedArray%.prototype.reverse is a distinct function that implements the same\nalgorithm as Array.prototype.reverse as defined in 22.1.3.21 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\".\n\n22.1.3.21 Array.prototype.reverse ( )\n\n...\n6. Return O.\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reverse/BigInt/returns-original-object.js", "esid": " sec-%typedarray%.prototype.reverse", "description": " Returns the same object", "info": " |22.2.3.22 %TypedArray%.prototype.reverse ( )\n\n%TypedArray%.prototype.reverse is a distinct function that implements the same\nalgorithm as Array.prototype.reverse as defined in 22.1.3.21 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\".\n\n22.1.3.21 Array.prototype.reverse ( )\n\n...\n6. Return O.\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reverse/BigInt/reverts.js", "esid": " sec-%typedarray%.prototype.reverse", "description": " Reverts values", "info": " |22.2.3.22 %TypedArray%.prototype.reverse ( )\n\n%TypedArray%.prototype.reverse is a distinct function that implements the same\nalgorithm as Array.prototype.reverse as defined in 22.1.3.21 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\".\n\n22.1.3.21 Array.prototype.reverse ( )\n\n...\n6. Return O.\n", "includes": ["testBigIntTypedArray.js", "compareArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/BigInt/array-arg-negative-integer-offset-throws.js", "esid": " sec-%typedarray%.prototype.set-array-offset", "description": " >Throw a RangeError exception if targetOffset < 0\n", "info": " |22.2.3.23.1 %TypedArray%.prototype.set (array [ , offset ] )\n\n1. Assert: array is any ECMAScript language value other than an Object with a\n[[TypedArrayName]] internal slot. If it is such an Object, the definition in\n22.2.3.23.2 applies.\n...\n6. Let targetOffset be ? ToInteger(offset).\n7. If targetOffset < 0, throw a RangeError exception.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/BigInt/array-arg-offset-tointeger.js", "esid": " sec-%typedarray%.prototype.set-array-offset", "description": " >ToInteger(offset) operations\n", "info": " |22.2.3.23.1 %TypedArray%.prototype.set (array [ , offset ] )\n\n1. Assert: array is any ECMAScript language value other than an Object with a\n[[TypedArrayName]] internal slot. If it is such an Object, the definition in\n22.2.3.23.2 applies.\n...\n6. Let targetOffset be ? ToInteger(offset).\n7. If targetOffset < 0, throw a RangeError exception.\n...\n", "includes": ["testBigIntTypedArray.js", "compareArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/BigInt/array-arg-primitive-toobject.js", "esid": " sec-%typedarray%.prototype.set-array-offset", "description": " >Primitive `array` argument is coerced to an object.\n", "info": " |%TypedArray%.prototype.set ( typedArray [ , offset ] )\n\n1. Assert: array is any ECMAScript language value other than an Object\nwith a [[TypedArrayName]] internal slot. If it is such an Object,\nthe definition in 22.2.3.23.2 applies.\n[...]\n14. Let src be ? ToObject(array).\n15. Let srcLength be ? LengthOfArrayLike(src).\n[...]\n19. Let limit be targetByteIndex + targetElementSize \u00d7 srcLength.\n20. Repeat, while targetByteIndex < limit,\na. Let Pk be ! ToString(k).\nb. Let value be ? Get(src, Pk).\nc. If target.[[ContentType]] is BigInt, set value to ? ToBigInt(value).\n[...]\nf. Perform SetValueInBuffer(targetBuffer, targetByteIndex, targetType, value, true, Unordered).\n[...]\n", "includes": ["testBigIntTypedArray.js", "compareArray.js"], "features": ["BigInt", "TypedArray", "Symbol"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/BigInt/array-arg-return-abrupt-from-src-get-length.js", "esid": " sec-%typedarray%.prototype.set-array-offset", "description": " >Return abrupt getting src \"length\"\n", "info": " |22.2.3.23.1 %TypedArray%.prototype.set (array [ , offset ] )\n\n1. Assert: array is any ECMAScript language value other than an Object with a\n[[TypedArrayName]] internal slot. If it is such an Object, the definition in\n22.2.3.23.2 applies.\n...\n16. Let srcLength be ? ToLength(? Get(src, \"length\")).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/BigInt/array-arg-return-abrupt-from-src-get-value.js", "esid": " sec-%typedarray%.prototype.set-array-offset", "description": " >Return abrupt from getting src property value\n", "info": " |22.2.3.23.1 %TypedArray%.prototype.set (array [ , offset ] )\n\n1. Assert: array is any ECMAScript language value other than an Object with a\n[[TypedArrayName]] internal slot. If it is such an Object, the definition in\n22.2.3.23.2 applies.\n...\n21. Repeat, while targetByteIndex < limit\na. Let Pk be ! ToString(k).\nb. Let kNumber be ? ToNumber(? Get(src, Pk)).\nc. If IsDetachedBuffer(targetBuffer) is true, throw a TypeError exception.\nd. Perform SetValueInBuffer(targetBuffer, targetByteIndex, targetType,\nkNumber).\n...\n", "includes": ["testBigIntTypedArray.js", "compareArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/BigInt/array-arg-return-abrupt-from-src-length-symbol.js", "esid": " sec-%typedarray%.prototype.set-array-offset", "description": " >Return abrupt getting src \"length\" as symbol\n", "info": " |22.2.3.23.1 %TypedArray%.prototype.set (array [ , offset ] )\n\n1. Assert: array is any ECMAScript language value other than an Object with a\n[[TypedArrayName]] internal slot. If it is such an Object, the definition in\n22.2.3.23.2 applies.\n...\n16. Let srcLength be ? ToLength(? Get(src, \"length\")).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/BigInt/array-arg-return-abrupt-from-src-length.js", "esid": " sec-%typedarray%.prototype.set-array-offset", "description": " >Return abrupt from ToLength(src \"length\")\n", "info": " |22.2.3.23.1 %TypedArray%.prototype.set (array [ , offset ] )\n\n1. Assert: array is any ECMAScript language value other than an Object with a\n[[TypedArrayName]] internal slot. If it is such an Object, the definition in\n22.2.3.23.2 applies.\n...\n16. Let srcLength be ? ToLength(? Get(src, \"length\")).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/BigInt/array-arg-return-abrupt-from-src-tonumber-value-symbol.js", "esid": " sec-%typedarray%.prototype.set-array-offset", "description": " >Return abrupt from ToNumber(src property symbol value)\n", "info": " |22.2.3.23.1 %TypedArray%.prototype.set (array [ , offset ] )\n\n1. Assert: array is any ECMAScript language value other than an Object with a\n[[TypedArrayName]] internal slot. If it is such an Object, the definition in\n22.2.3.23.2 applies.\n...\n21. Repeat, while targetByteIndex < limit\na. Let Pk be ! ToString(k).\nb. Let kNumber be ? ToNumber(? Get(src, Pk)).\nc. If IsDetachedBuffer(targetBuffer) is true, throw a TypeError exception.\nd. Perform SetValueInBuffer(targetBuffer, targetByteIndex, targetType,\nkNumber).\n...\n", "includes": ["testBigIntTypedArray.js", "compareArray.js"], "features": ["BigInt", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/BigInt/array-arg-return-abrupt-from-src-tonumber-value.js", "esid": " sec-%typedarray%.prototype.set-array-offset", "description": " >Return abrupt from ToNumber(src property value)\n", "info": " |22.2.3.23.1 %TypedArray%.prototype.set (array [ , offset ] )\n\n1. Assert: array is any ECMAScript language value other than an Object with a\n[[TypedArrayName]] internal slot. If it is such an Object, the definition in\n22.2.3.23.2 applies.\n...\n21. Repeat, while targetByteIndex < limit\na. Let Pk be ! ToString(k).\nb. Let kNumber be ? ToNumber(? Get(src, Pk)).\nc. If IsDetachedBuffer(targetBuffer) is true, throw a TypeError exception.\nd. Perform SetValueInBuffer(targetBuffer, targetByteIndex, targetType,\nkNumber).\n...\n", "includes": ["testBigIntTypedArray.js", "compareArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/BigInt/array-arg-return-abrupt-from-tointeger-offset-symbol.js", "esid": " sec-%typedarray%.prototype.set-array-offset", "description": " >Return abrupt from ToInteger(Symbol offset)\n", "info": " |22.2.3.23.1 %TypedArray%.prototype.set (array [ , offset ] )\n\n1. Assert: array is any ECMAScript language value other than an Object with a\n[[TypedArrayName]] internal slot. If it is such an Object, the definition in\n22.2.3.23.2 applies.\n...\n6. Let targetOffset be ? ToInteger(offset).\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/BigInt/array-arg-return-abrupt-from-tointeger-offset.js", "esid": " sec-%typedarray%.prototype.set-array-offset", "description": " >Return abrupt from ToInteger(offset)\n", "info": " |22.2.3.23.1 %TypedArray%.prototype.set (array [ , offset ] )\n\n1. Assert: array is any ECMAScript language value other than an Object with a\n[[TypedArrayName]] internal slot. If it is such an Object, the definition in\n22.2.3.23.2 applies.\n...\n6. Let targetOffset be ? ToInteger(offset).\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/BigInt/array-arg-return-abrupt-from-toobject-offset.js", "esid": " sec-%typedarray%.prototype.set-array-offset", "description": " >Return abrupt from ToObject(array)\n", "info": " |22.2.3.23.1 %TypedArray%.prototype.set (array [ , offset ] )\n\n1. Assert: array is any ECMAScript language value other than an Object with a\n[[TypedArrayName]] internal slot. If it is such an Object, the definition in\n22.2.3.23.2 applies.\n...\n15. Let src be ? ToObject(array).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/BigInt/array-arg-set-values-in-order.js", "esid": " sec-%typedarray%.prototype.set-array-offset", "description": " >Get and set each value in order\n", "info": " |22.2.3.23.1 %TypedArray%.prototype.set (array [ , offset ] )\n\n1. Assert: array is any ECMAScript language value other than an Object with a\n[[TypedArrayName]] internal slot. If it is such an Object, the definition in\n22.2.3.23.2 applies.\n...\n21. Repeat, while targetByteIndex < limit\na. Let Pk be ! ToString(k).\nb. Let kNumber be ? ToNumber(? Get(src, Pk)).\nc. If IsDetachedBuffer(targetBuffer) is true, throw a TypeError exception.\nd. Perform SetValueInBuffer(targetBuffer, targetByteIndex, targetType,\nkNumber).\n...\n", "includes": ["testBigIntTypedArray.js", "compareArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/BigInt/array-arg-set-values.js", "esid": " sec-%typedarray%.prototype.set-array-offset", "description": " >Set values to target and return undefined\n", "info": " |22.2.3.23.1 %TypedArray%.prototype.set (array [ , offset ] )\n\n1. Assert: array is any ECMAScript language value other than an Object with a\n[[TypedArrayName]] internal slot. If it is such an Object, the definition in\n22.2.3.23.2 applies.\n...\n21. Repeat, while targetByteIndex < limit\nLet Pk be ! ToString(k).\nLet kNumber be ? ToNumber(? Get(src, Pk)).\nIf IsDetachedBuffer(targetBuffer) is true, throw a TypeError exception.\nPerform SetValueInBuffer(targetBuffer, targetByteIndex, targetType, kNumber).\n...\n22. Return undefined.\n", "includes": ["testBigIntTypedArray.js", "compareArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/BigInt/array-arg-src-tonumber-value-type-conversions.js", "esid": " sec-%typedarray%.prototype.set-array-offset", "description": " >Type conversions on ToNumber(src property value)\n", "info": " |22.2.3.23.1 %TypedArray%.prototype.set (array [ , offset ] )\n\n1. Assert: array is any ECMAScript language value other than an Object with a\n[[TypedArrayName]] internal slot. If it is such an Object, the definition in\n22.2.3.23.2 applies.\n...\n21. Repeat, while targetByteIndex < limit\na. Let Pk be ! ToString(k).\nb. Let kNumber be ? ToNumber(? Get(src, Pk)).\nc. If IsDetachedBuffer(targetBuffer) is true, throw a TypeError exception.\nd. Perform SetValueInBuffer(targetBuffer, targetByteIndex, targetType,\nkNumber).\n...\n", "includes": ["testBigIntTypedArray.js", "compareArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/BigInt/array-arg-src-values-are-not-cached.js", "esid": " sec-%typedarray%.prototype.set-array-offset", "description": " >Values from src array are not cached\n", "info": " |22.2.3.23.1 %TypedArray%.prototype.set (array [ , offset ] )\n\n1. Assert: array is any ECMAScript language value other than an Object with a\n[[TypedArrayName]] internal slot. If it is such an Object, the definition in\n22.2.3.23.2 applies.\n...\n21. Repeat, while targetByteIndex < limit\na. Let Pk be ! ToString(k).\nb. Let kNumber be ? ToNumber(? Get(src, Pk)).\nc. If IsDetachedBuffer(targetBuffer) is true, throw a TypeError exception.\nd. Perform SetValueInBuffer(targetBuffer, targetByteIndex, targetType,\nkNumber).\n...\n", "includes": ["testBigIntTypedArray.js", "compareArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/BigInt/array-arg-target-arraylength-internal.js", "esid": " sec-%typedarray%.prototype.set-array-offset", "description": " >Uses target's internal [[ArrayLength]]\n", "info": " |22.2.3.23.1 %TypedArray%.prototype.set (array [ , offset ] )\n\n1. Assert: array is any ECMAScript language value other than an Object with a\n[[TypedArrayName]] internal slot. If it is such an Object, the definition in\n22.2.3.23.2 applies.\n...\n10. Let targetLength be the value of target's [[ArrayLength]] internal slot.\n...\n17. If srcLength + targetOffset > targetLength, throw a RangeError exception.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/BigInt/bigint-tobigint64.js", "esid": " sec-%typedarray%.prototype.set-array-offset", "description": " >Behavior for input array of BigInts\n", "info": " |%TypedArray%.prototype.set ( array [ , offset ] )\nSets multiple values in this TypedArray, reading the values from the object\narray. The optional offset value indicates the first element index in this\nTypedArray where values are written. If omitted, it is assumed to be 0.\n...\n21. Repeat, while targetByteIndex < limit\na. Let Pk be ! ToString(k).\nb. Let kNumber be ? ToNumber(? Get(src, Pk)).\nc. Let value be ? Get(src, Pk).\nd. If target.[[TypedArrayName]] is \"BigUint64Array\" or \"BigInt64Array\",\nlet value be ? ToBigInt(value).\ne. Otherwise, let value be ? ToNumber(value).\nf. If IsDetachedBuffer(targetBuffer) is true, throw a TypeError exception.\ng. Perform SetValueInBuffer(targetBuffer, targetByteIndex, targetType,\nkNumbervalue, true, \"Unordered\").\nh. Set k to k + 1.\ni. Set targetByteIndex to targetByteIndex + targetElementSize.\n...\n\nSetValueInBuffer ( arrayBuffer, byteIndex, type, value, isTypedArray, order [ , isLittleEndian ] )\n...\n8. Let rawBytes be NumberToRawBytes(type, value, isLittleEndian).\n...\n\nNumberToRawBytes( type, value, isLittleEndian )\n...\n3. Else,\na. Let n be the Number value of the Element Size specified in Table\n[The TypedArray Constructors] for Element Type type.\nb. Let convOp be the abstract operation named in the Conversion Operation\ncolumn in Table 9 for Element Type type.\n\nThe TypedArray Constructors\nElement Type: BigInt64\nConversion Operation: ToBigInt64\n\nToBigInt64 ( argument )\nThe abstract operation ToBigInt64 converts argument to one of 264 integer\nvalues in the range -2^63 through 2^63-1, inclusive.\nThis abstract operation functions as follows:\n1. Let n be ? ToBigInt(argument).\n2. Let int64bit be n modulo 2^64.\n3. If int64bit \u2265 2^63, return int64bit - 2^64; otherwise return int64bit.\n\n", "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/BigInt/bigint-tobiguint64.js", "esid": " sec-%typedarray%.prototype.set-array-offset", "description": " >Behavior for input array of BigInts\n", "info": " |%TypedArray%.prototype.set ( array [ , offset ] )\nSets multiple values in this TypedArray, reading the values from the object\narray. The optional offset value indicates the first element index in this\nTypedArray where values are written. If omitted, it is assumed to be 0.\n...\n21. Repeat, while targetByteIndex < limit\na. Let Pk be ! ToString(k).\nb. Let kNumber be ? ToNumber(? Get(src, Pk)).\nc. Let value be ? Get(src, Pk).\nd. If target.[[TypedArrayName]] is \"BigUint64Array\" or \"BigInt64Array\",\nlet value be ? ToBigInt(value).\ne. Otherwise, let value be ? ToNumber(value).\nf. If IsDetachedBuffer(targetBuffer) is true, throw a TypeError exception.\ng. Perform SetValueInBuffer(targetBuffer, targetByteIndex, targetType,\nkNumbervalue, true, \"Unordered\").\nh. Set k to k + 1.\ni. Set targetByteIndex to targetByteIndex + targetElementSize.\n...\n\nSetValueInBuffer ( arrayBuffer, byteIndex, type, value, isTypedArray, order [ , isLittleEndian ] )\n...\n8. Let rawBytes be NumberToRawBytes(type, value, isLittleEndian).\n...\n\nNumberToRawBytes( type, value, isLittleEndian )\n...\n3. Else,\na. Let n be the Number value of the Element Size specified in Table\n[The TypedArray Constructors] for Element Type type.\nb. Let convOp be the abstract operation named in the Conversion Operation\ncolumn in Table 9 for Element Type type.\n\nThe TypedArray Constructors\nElement Type: BigUint64\nConversion Operation: ToBigUint64\n\nToBigUint64 ( argument )\nThe abstract operation ToBigInt64 converts argument to one of 264 integer\nvalues in the range -2^63 through 2^63-1, inclusive.\nThis abstract operation functions as follows:\n1. Let n be ? ToBigInt(argument).\n2. Let int64bit be n modulo 2^64.\n3. Return int64bit.\n\n", "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/BigInt/boolean-tobigint.js", "esid": " sec-%typedarray%.prototype.set-array-offset", "description": " >Behavior for input array of Booleans\n", "info": " |%TypedArray%.prototype.set ( array [ , offset ] )\nSets multiple values in this TypedArray, reading the values from the object\narray. The optional offset value indicates the first element index in this\nTypedArray where values are written. If omitted, it is assumed to be 0.\n...\n21. Repeat, while targetByteIndex < limit\na. Let Pk be ! ToString(k).\nb. Let kNumber be ? ToNumber(? Get(src, Pk)).\nc. Let value be ? Get(src, Pk).\nd. If target.[[TypedArrayName]] is \"BigUint64Array\" or \"BigInt64Array\",\nlet value be ? ToBigInt(value).\ne. Otherwise, let value be ? ToNumber(value).\nf. If IsDetachedBuffer(targetBuffer) is true, throw a TypeError exception.\ng. Perform SetValueInBuffer(targetBuffer, targetByteIndex, targetType,\nkNumbervalue, true, \"Unordered\").\nh. Set k to k + 1.\ni. Set targetByteIndex to targetByteIndex + targetElementSize.\n...\n\nToBigInt ( argument )\nObject, Apply the following steps:\n1. Let prim be ? ToPrimitive(argument, hint Number).\n2. Return the value that prim corresponds to in Table [BigInt Conversions]\n\nBigInt Conversions\nArgument Type: Boolean\nResult: Return 1n if prim is true and 0n if prim is false.\n\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/BigInt/null-tobigint.js", "esid": " sec-%typedarray%.prototype.set-array-offset", "description": " >Return abrupt on null\n", "info": " |%TypedArray%.prototype.set ( array [ , offset ] )\nSets multiple values in this TypedArray, reading the values from the object\narray. The optional offset value indicates the first element index in this\nTypedArray where values are written. If omitted, it is assumed to be 0.\n...\n21. Repeat, while targetByteIndex < limit\na. Let Pk be ! ToString(k).\nb. Let kNumber be ? ToNumber(? Get(src, Pk)).\nc. Let value be ? Get(src, Pk).\nd. If target.[[TypedArrayName]] is \"BigUint64Array\" or \"BigInt64Array\",\nlet value be ? ToBigInt(value).\ne. Otherwise, let value be ? ToNumber(value).\nf. If IsDetachedBuffer(targetBuffer) is true, throw a TypeError exception.\ng. Perform SetValueInBuffer(targetBuffer, targetByteIndex, targetType,\nkNumbervalue, true, \"Unordered\").\nh. Set k to k + 1.\ni. Set targetByteIndex to targetByteIndex + targetElementSize.\n...\n\nToBigInt ( argument )\nObject, Apply the following steps:\n1. Let prim be ? ToPrimitive(argument, hint Number).\n2. Return the value that prim corresponds to in Table [BigInt Conversions]\n\nBigInt Conversions\nArgument Type: Null\nResult: Throw a TypeError exception.\n\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/BigInt/number-tobigint.js", "esid": " sec-%typedarray%.prototype.set-array-offset", "description": " >Return abrupt on Number\n", "info": " |%TypedArray%.prototype.set ( array [ , offset ] )\nSets multiple values in this TypedArray, reading the values from the object\narray. The optional offset value indicates the first element index in this\nTypedArray where values are written. If omitted, it is assumed to be 0.\n...\n21. Repeat, while targetByteIndex < limit\na. Let Pk be ! ToString(k).\nb. Let kNumber be ? ToNumber(? Get(src, Pk)).\nc. Let value be ? Get(src, Pk).\nd. If target.[[TypedArrayName]] is \"BigUint64Array\" or \"BigInt64Array\",\nlet value be ? ToBigInt(value).\ne. Otherwise, let value be ? ToNumber(value).\nf. If IsDetachedBuffer(targetBuffer) is true, throw a TypeError exception.\ng. Perform SetValueInBuffer(targetBuffer, targetByteIndex, targetType,\nkNumbervalue, true, \"Unordered\").\nh. Set k to k + 1.\ni. Set targetByteIndex to targetByteIndex + targetElementSize.\n...\n\nToBigInt ( argument )\n\nObject, Apply the following steps:\n1. Let prim be ? ToPrimitive(argument, hint Number).\n2. Return the value that prim corresponds to in Table [BigInt Conversions]\n\nBigInt Conversions\nArgument Type: Number\nResult: Throw a TypeError exception.\n\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/BigInt/src-typedarray-big.js", "esid": " sec-%typedarray%.prototype.set-typedarray-offset", "description": " >If typedArray constructor argument is a Big(U)Int, succeed in set\n", "info": " |%TypedArray%.prototype.set( typedArray [ , offset ] )\nSets multiple values in this TypedArray, reading the values from the\ntypedArray argument object. The optional offset value indicates the first\nelement index in this TypedArray where values are written. If omitted, it\nis assumed to be 0.\n...\n23. If one of srcType and targetType contains the substring \"Big\" and the\nother does not, throw a TypeError exception.\n...\n\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/BigInt/src-typedarray-not-big-throws.js", "esid": " sec-%typedarray%.prototype.set-typedarray-offset", "description": " >If typedArray set argument is not a Big(U)Int, and target is \"Big\", throw\n", "info": " |%TypedArray%.prototype.set( typedArray [ , offset ] )\nSets multiple values in this TypedArray, reading the values from the\ntypedArray argument object. The optional offset value indicates the first\nelement index in this TypedArray where values are written. If omitted, it\nis assumed to be 0.\n...\n23. If one of srcType and targetType contains the substring \"Big\" and the\nother does not, throw a TypeError exception.\n...\n\n", "includes": ["testBigIntTypedArray.js", "testTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/BigInt/string-nan-tobigint.js", "esid": " sec-%typedarray%.prototype.set-array-offset", "description": " >Return abrupt String, when StringToBigInt returns NaN\n", "info": " |%TypedArray%.prototype.set ( array [ , offset ] )\nSets multiple values in this TypedArray, reading the values from the object\narray. The optional offset value indicates the first element index in this\nTypedArray where values are written. If omitted, it is assumed to be 0.\n...\n21. Repeat, while targetByteIndex < limit\na. Let Pk be ! ToString(k).\nb. Let kNumber be ? ToNumber(? Get(src, Pk)).\nc. Let value be ? Get(src, Pk).\nd. If target.[[TypedArrayName]] is \"BigUint64Array\" or \"BigInt64Array\",\nlet value be ? ToBigInt(value).\ne. Otherwise, let value be ? ToNumber(value).\nf. If IsDetachedBuffer(targetBuffer) is true, throw a TypeError exception.\ng. Perform SetValueInBuffer(targetBuffer, targetByteIndex, targetType,\nkNumbervalue, true, \"Unordered\").\nh. Set k to k + 1.\ni. Set targetByteIndex to targetByteIndex + targetElementSize.\n...\n\nToBigInt ( argument )\nObject, Apply the following steps:\n1. Let prim be ? ToPrimitive(argument, hint Number).\n2. Return the value that prim corresponds to in Table [BigInt Conversions]\n\nBigInt Conversions\nArgument Type: String\nResult:\n1. Let n be StringToBigInt(prim).\n2. If n is NaN, throw a SyntaxError exception.\n3. Return n.\n\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/BigInt/string-tobigint.js", "esid": " sec-%typedarray%.prototype.set-array-offset", "description": " >Behavior for input array of Strings, successful conversion\n", "info": " |%TypedArray%.prototype.set ( array [ , offset ] )\nSets multiple values in this TypedArray, reading the values from the object\narray. The optional offset value indicates the first element index in this\nTypedArray where values are written. If omitted, it is assumed to be 0.\n...\n21. Repeat, while targetByteIndex < limit\na. Let Pk be ! ToString(k).\nb. Let kNumber be ? ToNumber(? Get(src, Pk)).\nc. Let value be ? Get(src, Pk).\nd. If target.[[TypedArrayName]] is \"BigUint64Array\" or \"BigInt64Array\",\nlet value be ? ToBigInt(value).\ne. Otherwise, let value be ? ToNumber(value).\nf. If IsDetachedBuffer(targetBuffer) is true, throw a TypeError exception.\ng. Perform SetValueInBuffer(targetBuffer, targetByteIndex, targetType,\nkNumbervalue, true, \"Unordered\").\nh. Set k to k + 1.\ni. Set targetByteIndex to targetByteIndex + targetElementSize.\n...\n\nToBigInt ( argument )\nObject, Apply the following steps:\n1. Let prim be ? ToPrimitive(argument, hint Number).\n2. Return the value that prim corresponds to in Table [BigInt Conversions]\n\nBigInt Conversions\nArgument Type: String\nResult:\n1. Let n be StringToBigInt(prim).\n2. If n is NaN, throw a SyntaxError exception.\n3. Return n.\n\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/BigInt/symbol-tobigint.js", "esid": " sec-%typedarray%.prototype.set-array-offset", "description": " >Return abrupt on Symbol\n", "info": " |%TypedArray%.prototype.set ( array [ , offset ] )\nSets multiple values in this TypedArray, reading the values from the object\narray. The optional offset value indicates the first element index in this\nTypedArray where values are written. If omitted, it is assumed to be 0.\n...\n21. Repeat, while targetByteIndex < limit\na. Let Pk be ! ToString(k).\nb. Let kNumber be ? ToNumber(? Get(src, Pk)).\nc. Let value be ? Get(src, Pk).\nd. If target.[[TypedArrayName]] is \"BigUint64Array\" or \"BigInt64Array\",\nlet value be ? ToBigInt(value).\ne. Otherwise, let value be ? ToNumber(value).\nf. If IsDetachedBuffer(targetBuffer) is true, throw a TypeError exception.\ng. Perform SetValueInBuffer(targetBuffer, targetByteIndex, targetType,\nkNumbervalue, true, \"Unordered\").\nh. Set k to k + 1.\ni. Set targetByteIndex to targetByteIndex + targetElementSize.\n...\n\nToBigInt ( argument )\n\nObject, Apply the following steps:\n1. Let prim be ? ToPrimitive(argument, hint Number).\n2. Return the value that prim corresponds to in Table [BigInt Conversions]\n\nBigInt Conversions\nArgument Type: Symbol\nResult: Throw a TypeError exception.\n\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray", "Symbol"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/BigInt/typedarray-arg-negative-integer-offset-throws.js", "esid": " sec-%typedarray%.prototype.set-typedarray-offset", "description": " >Throw a RangeError exception if targetOffset < 0\n", "info": " |22.2.3.23.2 %TypedArray%.prototype.set(typedArray [ , offset ] )\n\n1. Assert: typedArray has a [[TypedArrayName]] internal slot. If it does not,\nthe definition in 22.2.3.23.1 applies.\n...\n6. Let targetOffset be ? ToInteger(offset).\n7. If targetOffset < 0, throw a RangeError exception.\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/BigInt/typedarray-arg-offset-tointeger.js", "esid": " sec-%typedarray%.prototype.set-typedarray-offset", "description": " >ToInteger(offset) operations\n", "info": " |22.2.3.23.2 %TypedArray%.prototype.set(typedArray [ , offset ] )\n\n1. Assert: typedArray has a [[TypedArrayName]] internal slot. If it does not,\nthe definition in 22.2.3.23.1 applies.\n...\n6. Let targetOffset be ? ToInteger(offset).\n", "includes": ["testBigIntTypedArray.js", "compareArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/BigInt/typedarray-arg-return-abrupt-from-tointeger-offset-symbol.js", "esid": " sec-%typedarray%.prototype.set-typedarray-offset", "description": " >Return abrupt from ToInteger(Symbol offset)\n", "info": " |22.2.3.23.2 %TypedArray%.prototype.set(typedArray [ , offset ] )\n\n1. Assert: typedArray has a [[TypedArrayName]] internal slot. If it does not,\nthe definition in 22.2.3.23.1 applies.\n...\n6. Let targetOffset be ? ToInteger(offset).\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/BigInt/typedarray-arg-return-abrupt-from-tointeger-offset.js", "esid": " sec-%typedarray%.prototype.set-typedarray-offset", "description": " >Return abrupt from ToInteger(offset)\n", "info": " |22.2.3.23.2 %TypedArray%.prototype.set(typedArray [ , offset ] )\n\n1. Assert: typedArray has a [[TypedArrayName]] internal slot. If it does not,\nthe definition in 22.2.3.23.1 applies.\n...\n6. Let targetOffset be ? ToInteger(offset).\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/BigInt/typedarray-arg-set-values-diff-buffer-other-type-sab.js", "esid": " sec-%typedarray%.prototype.set-typedarray-offset", "description": " >Set values from different instances using the different buffer and different\ntype.\n", "includes": ["testBigIntTypedArray.js", "compareArray.js"], "features": ["BigInt", "SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/BigInt/typedarray-arg-set-values-diff-buffer-other-type.js", "esid": " sec-%typedarray%.prototype.set-typedarray-offset", "description": " >Set values from different instances using the different buffer and different\ntype.\n", "info": " |22.2.3.23.2 %TypedArray%.prototype.set(typedArray [ , offset ] )\n\n1. Assert: typedArray has a [[TypedArrayName]] internal slot. If it does not,\nthe definition in 22.2.3.23.1 applies.\n...\n23. If SameValue(srcBuffer, targetBuffer) is true, then\n...\n24. Else, let srcByteIndex be srcByteOffset.\n...\n27. If SameValue(srcType, targetType) is true, then,\n...\n28. Else,\na. Repeat, while targetByteIndex < limit\ni. Let value be GetValueFromBuffer(srcBuffer, srcByteIndex, srcType).\nii. Perform SetValueInBuffer(targetBuffer, targetByteIndex, targetType,\nvalue).\n", "includes": ["testBigIntTypedArray.js", "compareArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/BigInt/typedarray-arg-set-values-diff-buffer-same-type-sab.js", "esid": " sec-%typedarray%.prototype.set-typedarray-offset", "description": " >Set values from different instances using the different buffer and same\nconstructor. srcBuffer values are cached.\n", "includes": ["testBigIntTypedArray.js", "compareArray.js"], "features": ["BigInt", "SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/BigInt/typedarray-arg-set-values-diff-buffer-same-type.js", "esid": " sec-%typedarray%.prototype.set-typedarray-offset", "description": " >Set values from different instances using the different buffer and same\nconstructor. srcBuffer values are cached.\n", "info": " |22.2.3.23.2 %TypedArray%.prototype.set(typedArray [ , offset ] )\n\n1. Assert: typedArray has a [[TypedArrayName]] internal slot. If it does not,\nthe definition in 22.2.3.23.1 applies.\n...\n23. If SameValue(srcBuffer, targetBuffer) is true, then\n...\n24. Else, let srcByteIndex be srcByteOffset.\n...\n27. If SameValue(srcType, targetType) is true, then,\na. NOTE: If srcType and targetType are the same, the transfer must be\nperformed in a manner that preserves the bit-level encoding of the source\ndata.\nb. Repeat, while targetByteIndex < limit\ni. Let value be GetValueFromBuffer(srcBuffer, srcByteIndex, \"Uint8\").\nii. Perform SetValueInBuffer(targetBuffer, targetByteIndex, \"Uint8\",\nvalue).\n...\n29. Return undefined.\n", "includes": ["testBigIntTypedArray.js", "compareArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/BigInt/typedarray-arg-set-values-same-buffer-same-type-sab.js", "esid": " sec-%typedarray%.prototype.set-typedarray-offset", "description": " >Set values from different instances using the same buffer and same\nconstructor. srcBuffer values are cached.\n", "includes": ["testBigIntTypedArray.js", "compareArray.js"], "features": ["BigInt", "SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/BigInt/typedarray-arg-set-values-same-buffer-same-type.js", "esid": " sec-%typedarray%.prototype.set-typedarray-offset", "description": " >Set values from different instances using the same buffer and same\nconstructor. srcBuffer values are cached.\n", "info": " |22.2.3.23.2 %TypedArray%.prototype.set(typedArray [ , offset ] )\n\n1. Assert: typedArray has a [[TypedArrayName]] internal slot. If it does not,\nthe definition in 22.2.3.23.1 applies.\n...\n23. If SameValue(srcBuffer, targetBuffer) is true, then\na. Let srcBuffer be ? CloneArrayBuffer(srcBuffer, srcByteOffset, srcLength,\n%ArrayBuffer%).\nb. NOTE: %ArrayBuffer% is used to clone srcBuffer because is it known to not\nhave any observable side-effects.\n...\n...\n27. If SameValue(srcType, targetType) is true, then,\na. NOTE: If srcType and targetType are the same, the transfer must be\nperformed in a manner that preserves the bit-level encoding of the source\ndata.\nb. Repeat, while targetByteIndex < limit\ni. Let value be GetValueFromBuffer(srcBuffer, srcByteIndex, \"Uint8\").\nii. Perform SetValueInBuffer(targetBuffer, targetByteIndex, \"Uint8\",\nvalue).\n", "includes": ["testBigIntTypedArray.js", "compareArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/BigInt/typedarray-arg-src-arraylength-internal.js", "esid": " sec-%typedarray%.prototype.set-typedarray-offset", "description": " >Uses typedArray's internal [[ArrayLength]]\n", "info": " |22.2.3.23.2 %TypedArray%.prototype.set(typedArray [ , offset ] )\n\n1. Assert: typedArray has a [[TypedArrayName]] internal slot. If it does not,\nthe definition in 22.2.3.23.1 applies.\n...\n20. Let srcLength be the value of typedArray's [[ArrayLength]] internal slot.\n...\n22. If srcLength + targetOffset > targetLength, throw a RangeError exception.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/BigInt/typedarray-arg-src-byteoffset-internal.js", "esid": " sec-%typedarray%.prototype.set-typedarray-offset", "description": " >Uses typedArray's internal [[ByteOffset]]\n", "info": " |22.2.3.23.2 %TypedArray%.prototype.set(typedArray [ , offset ] )\n1. Assert: typedArray has a [[TypedArrayName]] internal slot. If it does not,\nthe definition in 22.2.3.23.1 applies.\n...\n21. Let srcByteOffset be typedArray.[[ByteOffset]].\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/BigInt/typedarray-arg-src-range-greather-than-target-throws-rangeerror.js", "esid": " sec-%typedarray%.prototype.set-typedarray-offset", "description": " >If srcLength + targetOffset > targetLength, throw a RangeError exception.\n", "info": " |22.2.3.23.2 %TypedArray%.prototype.set(typedArray [ , offset ] )\n\n1. Assert: typedArray has a [[TypedArrayName]] internal slot. If it does not,\nthe definition in 22.2.3.23.1 applies.\n...\n6. Let targetOffset be ? ToInteger(offset).\n...\n10. Let targetLength be the value of target's [[ArrayLength]] internal slot.\n...\n20. Let srcLength be the value of typedArray's [[ArrayLength]] internal slot.\n...\n22. If srcLength + targetOffset > targetLength, throw a RangeError exception.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/BigInt/typedarray-arg-target-arraylength-internal.js", "esid": " sec-%typedarray%.prototype.set-typedarray-offset", "description": " >Uses target's internal [[ArrayLength]]\n", "info": " |22.2.3.23.2 %TypedArray%.prototype.set(typedArray [ , offset ] )\n\n1. Assert: typedArray has a [[TypedArrayName]] internal slot. If it does not,\nthe definition in 22.2.3.23.1 applies.\n2. Let target be the this value.\n...\n10. Let targetLength be the value of target's [[ArrayLength]] internal slot.\n...\n22. If srcLength + targetOffset > targetLength, throw a RangeError exception.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/BigInt/typedarray-arg-target-byteoffset-internal.js", "esid": " sec-%typedarray%.prototype.set-typedarray-offset", "description": " >Uses target's internal [[ArrayLength]]\n", "info": " |22.2.3.23.2 %TypedArray%.prototype.set(typedArray [ , offset ] )\n1. Assert: typedArray has a [[TypedArrayName]] internal slot. If it does not,\nthe definition in 22.2.3.23.1 applies.\n2. Let target be the this value.\n...\n16. Let targetByteOffset be target.[[ByteOffset]].\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/BigInt/undefined-tobigint.js", "esid": " sec-%typedarray%.prototype.set-typedarray-offset", "description": " >Return abrupt on undefined\n", "info": " |%TypedArray%.prototype.set ( array [ , offset ] )\nSets multiple values in this TypedArray, reading the values from the object\narray. The optional offset value indicates the first element index in this\nTypedArray where values are written. If omitted, it is assumed to be 0.\n...\n21. Repeat, while targetByteIndex < limit\na. Let Pk be ! ToString(k).\nb. Let kNumber be ? ToNumber(? Get(src, Pk)).\nc. Let value be ? Get(src, Pk).\nd. If target.[[TypedArrayName]] is \"BigUint64Array\" or \"BigInt64Array\",\nlet value be ? ToBigInt(value).\ne. Otherwise, let value be ? ToNumber(value).\nf. If IsDetachedBuffer(targetBuffer) is true, throw a TypeError exception.\ng. Perform SetValueInBuffer(targetBuffer, targetByteIndex, targetType,\nkNumbervalue, true, \"Unordered\").\nh. Set k to k + 1.\ni. Set targetByteIndex to targetByteIndex + targetElementSize.\n...\n\nToBigInt ( argument )\nObject, Apply the following steps:\n1. Let prim be ? ToPrimitive(argument, hint Number).\n2. Return the value that prim corresponds to in Table [BigInt Conversions]\n\nBigInt Conversions\nArgument Type: Undefined\nResult: Throw a TypeError exception.\n\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/src-typedarray-big-throws.js", "esid": " sec-%typedarray%.prototype.set-typedarray-offset", "description": " >If typedArray set argument is a Big(U)Int, and target not \"Big\", throw\n", "info": " |%TypedArray%.prototype.set( typedArray [ , offset ] )\nSets multiple values in this TypedArray, reading the values from the\ntypedArray argument object. The optional offset value indicates the first\nelement index in this TypedArray where values are written. If omitted, it\nis assumed to be 0.\n...\n23. If one of srcType and targetType contains the substring \"Big\" and the\nother does not, throw a TypeError exception.\n...\n\n", "includes": ["testBigIntTypedArray.js", "testTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/slice/BigInt/arraylength-internal.js", "esid": " sec-%typedarray%.prototype.slice", "description": " Use internal ArrayLength instead of getting a length property", "info": " |22.2.3.24 %TypedArray%.prototype.slice ( start, end )\n\n...\n3. Let len be the value of O's [[ArrayLength]] internal slot.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/slice/BigInt/infinity.js", "esid": " sec-%typedarray%.prototype.slice", "description": " Infinity values on start and end", "includes": ["testBigIntTypedArray.js", "compareArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/slice/BigInt/minus-zero.js", "esid": " sec-%typedarray%.prototype.slice", "description": " -0 values on start and end", "info": " |22.2.3.24 %TypedArray%.prototype.slice ( start, end )\n", "includes": ["testBigIntTypedArray.js", "compareArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/slice/BigInt/result-does-not-copy-ordinary-properties.js", "esid": " sec-%typedarray%.prototype.slice", "description": " Result does not import own properties", "info": " |22.2.3.24 %TypedArray%.prototype.slice( start , end )\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/slice/BigInt/results-with-different-length.js", "esid": " sec-%typedarray%.prototype.slice", "description": " slice may return a new instance with a smaller length", "includes": ["testBigIntTypedArray.js", "compareArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/slice/BigInt/results-with-empty-length.js", "esid": " sec-%typedarray%.prototype.slice", "description": " slice may return a new empty instance", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/slice/BigInt/results-with-same-length.js", "esid": " sec-%typedarray%.prototype.slice", "description": " slice may return a new instance with the same length", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/slice/BigInt/return-abrupt-from-end-symbol.js", "esid": " sec-%typedarray%.prototype.slice", "description": " Return abrupt from ToInteger(end), end is symbol", "info": " |22.2.3.24 %TypedArray%.prototype.slice ( start, end )\n\n...\n6. If end is undefined, let relativeEnd be len; else let relativeEnd be ?\nToInteger(end).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/slice/BigInt/return-abrupt-from-end.js", "esid": " sec-%typedarray%.prototype.slice", "description": " Return abrupt from ToInteger(end)", "info": " |22.2.3.24 %TypedArray%.prototype.slice ( start, end )\n\n...\n6. If end is undefined, let relativeEnd be len; else let relativeEnd be ?\nToInteger(end).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/slice/BigInt/return-abrupt-from-start-symbol.js", "esid": " sec-%typedarray%.prototype.slice", "description": " Return abrupt from ToInteger(start), start is symbol", "info": " |22.2.3.24 %TypedArray%.prototype.slice ( start, end )\n\n...\n4. Let relativeStart be ? ToInteger(start).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/slice/BigInt/return-abrupt-from-start.js", "esid": " sec-%typedarray%.prototype.slice", "description": " Return abrupt from ToInteger(start)", "info": " |22.2.3.24 %TypedArray%.prototype.slice ( start, end )\n\n...\n4. Let relativeStart be ? ToInteger(start).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/slice/BigInt/set-values-from-different-ctor-type.js", "esid": " sec-%typedarray%.prototype.slice", "description": " >Perform regular set if target's uses a different element type\n", "info": " |22.2.3.24 %TypedArray%.prototype.slice ( start, end )\n\n...\n9. Let A be ? TypedArraySpeciesCreate(O, \u00ab count \u00bb).\n10. Let srcName be the String value of O's [[TypedArrayName]] internal slot.\n11. Let srcType be the String value of the Element Type value in Table 50 for\nsrcName.\n12. Let targetName be the String value of A's [[TypedArrayName]] internal\nslot.\n13. Let targetType be the String value of the Element Type value in Table 50\nfor targetName.\n14. If SameValue(srcType, targetType) is false, then\na. Let n be 0.\nb. Repeat, while k < final\ni. Let Pk be ! ToString(k).\nii. Let kValue be ? Get(O, Pk).\niii. Perform ? Set(A, ! ToString(n), kValue, true).\niv. Increase k by 1.\nv. Increase n by 1.\n...\n16. Return A\n", "includes": ["testBigIntTypedArray.js", "compareArray.js"], "features": ["BigInt", "Symbol.species", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/slice/BigInt/speciesctor-get-ctor-abrupt.js", "esid": " sec-%typedarray%.prototype.slice", "description": " Return abrupt from SpeciesConstructor's get Constructor", "info": " |22.2.3.24 %TypedArray%.prototype.slice ( start, end )\n\n...\n9. Let A be ? TypedArraySpeciesCreate(O, \u00ab count \u00bb).\n...\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n1. Assert: Type(O) is Object.\n2. Let C be ? Get(O, \"constructor\").\n3. If C is undefined, return defaultConstructor.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/slice/BigInt/speciesctor-get-ctor-inherited.js", "esid": " sec-%typedarray%.prototype.slice", "description": " get inherited constructor on SpeciesConstructor", "info": " |22.2.3.24 %TypedArray%.prototype.slice ( start, end )\n\n...\n9. Let A be ? TypedArraySpeciesCreate(O, \u00ab count \u00bb).\n...\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n1. Assert: Type(O) is Object.\n2. Let C be ? Get(O, \"constructor\").\n3. If C is undefined, return defaultConstructor.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/slice/BigInt/speciesctor-get-ctor-returns-throws.js", "esid": " sec-%typedarray%.prototype.slice", "description": " >Throws if O.constructor returns a non-Object and non-undefined value\n", "info": " |22.2.3.24 %TypedArray%.prototype.slice ( start, end )\n\n...\n9. Let A be ? TypedArraySpeciesCreate(O, \u00ab count \u00bb).\n...\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n1. Assert: Type(O) is Object.\n2. Let C be ? Get(O, \"constructor\").\n3. If C is undefined, return defaultConstructor.\n4. If Type(C) is not Object, throw a TypeError exception.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/slice/BigInt/speciesctor-get-ctor.js", "esid": " sec-%typedarray%.prototype.slice", "description": " get constructor on SpeciesConstructor", "info": " |22.2.3.24 %TypedArray%.prototype.slice ( start, end )\n\n...\n9. Let A be ? TypedArraySpeciesCreate(O, \u00ab count \u00bb).\n...\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n1. Assert: Type(O) is Object.\n2. Let C be ? Get(O, \"constructor\").\n3. If C is undefined, return defaultConstructor.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/slice/BigInt/speciesctor-get-species-abrupt.js", "esid": " sec-%typedarray%.prototype.slice", "description": " >Returns abrupt from get @@species on found constructor\n", "info": " |22.2.3.24 %TypedArray%.prototype.slice ( start, end )\n\n...\n9. Let A be ? TypedArraySpeciesCreate(O, \u00ab count \u00bb).\n...\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n1. Assert: Type(O) is Object.\n2. Let C be ? Get(O, \"constructor\").\n...\n5. Let S be ? Get(C, @@species).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol.species", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/slice/BigInt/speciesctor-get-species-custom-ctor-invocation.js", "esid": " sec-%typedarray%.prototype.slice", "description": " >Verify arguments on custom @@species construct call\n", "info": " |22.2.3.24 %TypedArray%.prototype.slice ( start, end )\n\n...\n9. Let A be ? TypedArraySpeciesCreate(O, \u00ab count \u00bb).\n...\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n4. Return ? TypedArrayCreate(constructor, argumentList).\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n...\n5. Let S be ? Get(C, @@species).\n...\n7. If IsConstructor(S) is true, return S.\n...\n\n22.2.4.6 TypedArrayCreate ( constructor, argumentList )\n\n1. Let newTypedArray be ? Construct(constructor, argumentList).\n2. Perform ? ValidateTypedArray(newTypedArray).\n3. If argumentList is a List of a single Number, then\n...\n4. Return newTypedArray.\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol.species", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/slice/BigInt/speciesctor-get-species-custom-ctor-length-throws.js", "esid": " sec-%typedarray%.prototype.slice", "description": " >Throws a TypeError if new typedArray's length < count\n", "info": " |22.2.3.24 %TypedArray%.prototype.slice ( start, end )\n\n...\n9. Let A be ? TypedArraySpeciesCreate(O, \u00ab count \u00bb).\n...\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n4. Return ? TypedArrayCreate(constructor, argumentList).\n\n22.2.4.6 TypedArrayCreate ( constructor, argumentList )\n\n...\n3. If argumentList is a List of a single Number, then\na. If the value of newTypedArray's [[ArrayLength]] internal slot <\nargumentList[0], throw a TypeError exception.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol.species", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/slice/BigInt/speciesctor-get-species-custom-ctor-length.js", "esid": " sec-%typedarray%.prototype.slice", "description": " >Does not throw a TypeError if new typedArray's length >= count\n", "info": " |22.2.3.24 %TypedArray%.prototype.slice ( start, end )\n\n...\n9. Let A be ? TypedArraySpeciesCreate(O, \u00ab count \u00bb).\n...\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n4. Return ? TypedArrayCreate(constructor, argumentList).\n\n22.2.4.6 TypedArrayCreate ( constructor, argumentList )\n\n...\n3. If argumentList is a List of a single Number, then\na. If the value of newTypedArray's [[ArrayLength]] internal slot <\nargumentList[0], throw a TypeError exception.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol.species", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/slice/BigInt/speciesctor-get-species-custom-ctor-returns-another-instance.js", "esid": " sec-%typedarray%.prototype.slice", "description": " >Custom @@species constructor may return a totally different TypedArray\n", "info": " |22.2.3.24 %TypedArray%.prototype.slice ( start, end )\n\n...\n9. Let A be ? TypedArraySpeciesCreate(O, \u00ab count \u00bb).\n...\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n4. Return ? TypedArrayCreate(constructor, argumentList).\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n...\n5. Let S be ? Get(C, @@species).\n...\n7. If IsConstructor(S) is true, return S.\n...\n\n22.2.4.6 TypedArrayCreate ( constructor, argumentList )\n\n1. Let newTypedArray be ? Construct(constructor, argumentList).\n2. Perform ? ValidateTypedArray(newTypedArray).\n3. If argumentList is a List of a single Number, then\n...\n4. Return newTypedArray.\n", "includes": ["testBigIntTypedArray.js", "compareArray.js"], "features": ["BigInt", "Symbol.species", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/slice/BigInt/speciesctor-get-species-custom-ctor-throws.js", "esid": " sec-%typedarray%.prototype.slice", "description": " >Custom @@species constructor throws if it does not return a compatible object\n", "info": " |22.2.3.24 %TypedArray%.prototype.slice ( start, end )\n\n...\n9. Let A be ? TypedArraySpeciesCreate(O, \u00ab count \u00bb).\n...\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n4. Return ? TypedArrayCreate(constructor, argumentList).\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n...\n5. Let S be ? Get(C, @@species).\n...\n7. If IsConstructor(S) is true, return S.\n...\n\n22.2.4.6 TypedArrayCreate ( constructor, argumentList )\n\n1. Let newTypedArray be ? Construct(constructor, argumentList).\n2. Perform ? ValidateTypedArray(newTypedArray).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol.species", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/slice/BigInt/speciesctor-get-species-custom-ctor.js", "esid": " sec-%typedarray%.prototype.slice", "description": " >Use custom @@species constructor if available\n", "info": " |22.2.3.24 %TypedArray%.prototype.slice ( start, end )\n\n...\n9. Let A be ? TypedArraySpeciesCreate(O, \u00ab count \u00bb).\n...\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n4. Return ? TypedArrayCreate(constructor, argumentList).\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n...\n5. Let S be ? Get(C, @@species).\n...\n7. If IsConstructor(S) is true, return S.\n...\n\n22.2.4.6 TypedArrayCreate ( constructor, argumentList )\n\n1. Let newTypedArray be ? Construct(constructor, argumentList).\n2. Perform ? ValidateTypedArray(newTypedArray).\n3. If argumentList is a List of a single Number, then\n...\n4. Return newTypedArray.\n", "includes": ["testBigIntTypedArray.js", "compareArray.js"], "features": ["BigInt", "Symbol.species", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/slice/BigInt/speciesctor-get-species-returns-throws.js", "esid": " sec-%typedarray%.prototype.slice", "description": " >Throws if returned @@species is not a constructor, null or undefined.\n", "info": " |22.2.3.24 %TypedArray%.prototype.slice ( start, end )\n\n...\n9. Let A be ? TypedArraySpeciesCreate(O, \u00ab count \u00bb).\n...\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n...\n5. Let S be ? Get(C, @@species).\n6. If S is either undefined or null, return defaultConstructor.\n7. If IsConstructor(S) is true, return S.\n8. Throw a TypeError exception.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol.species", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/slice/BigInt/speciesctor-get-species-use-default-ctor.js", "esid": " sec-%typedarray%.prototype.slice", "description": " >Use defaultConstructor if @@species is either undefined or null\n", "info": " |22.2.3.24 %TypedArray%.prototype.slice ( start, end )\n\n...\n9. Let A be ? TypedArraySpeciesCreate(O, \u00ab count \u00bb).\n...\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n...\n5. Let S be ? Get(C, @@species).\n6. If S is either undefined or null, return defaultConstructor.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol.species", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/slice/BigInt/speciesctor-get-species.js", "esid": " sec-%typedarray%.prototype.slice", "description": " >get @@species from found constructor\n", "info": " |22.2.3.24 %TypedArray%.prototype.slice ( start, end )\n\n...\n9. Let A be ? TypedArraySpeciesCreate(O, \u00ab count \u00bb).\n...\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n1. Assert: Type(O) is Object.\n2. Let C be ? Get(O, \"constructor\").\n...\n5. Let S be ? Get(C, @@species).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol.species", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/slice/BigInt/tointeger-end.js", "esid": " sec-%typedarray%.prototype.slice", "description": " ToInteger(end)", "info": " |22.2.3.24 %TypedArray%.prototype.slice( start , end )\n\n...\n6. If end is undefined, let relativeEnd be len; else let relativeEnd be ?\nToInteger(end).\n...\n", "includes": ["testBigIntTypedArray.js", "compareArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/slice/BigInt/tointeger-start.js", "esid": " sec-%typedarray%.prototype.slice", "description": " ToInteger(begin)", "info": " |22.2.3.24 %TypedArray%.prototype.slice ( start, end )\n\n...\n4. Let relativeStart be ? ToInteger(start).\n...\n", "includes": ["testBigIntTypedArray.js", "compareArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/slice/bit-precision.js", "esid": " sec-%typedarray%.prototype.slice", "description": " Preservation of bit-level encoding", "info": " |[...]\n15. Else if count > 0, then\n[...]\ne. NOTE: If srcType and targetType are the same, the transfer must be\nperformed in a manner that preserves the bit-level encoding of the\nsource data.\nf. Let srcByteOffet be the value of O's [[ByteOffset]] internal slot.\ng. Let targetByteIndex be A's [[ByteOffset]] internal slot.\nh. Let srcByteIndex be (k \u00d7 elementSize) + srcByteOffet.\ni. Let limit be targetByteIndex + count \u00d7 elementSize.\nj. Repeat, while targetByteIndex < limit\ni. Let value be GetValueFromBuffer(srcBuffer, srcByteIndex, \"Uint8\").\nii. Perform SetValueInBuffer(targetBuffer, targetByteIndex, \"Uint8\",\nvalue).\niii. Increase srcByteIndex by 1.\niv. Increase targetByteIndex by 1.\n", "includes": ["nans.js", "compareArray.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/some/BigInt/callbackfn-arguments-with-thisarg.js", "esid": " sec-%typedarray%.prototype.some", "description": " >thisArg does not affect callbackfn arguments\n", "info": " |22.2.3.25 %TypedArray%.prototype.some ( callbackfn [ , thisArg ] )\n\n%TypedArray%.prototype.some is a distinct function that implements the same\nalgorithm as Array.prototype.some as defined in 22.1.3.24 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\".\n\n22.1.3.24 Array.prototype.some ( callbackfn [ , thisArg ] )\n\n...\n4. If thisArg was supplied, let T be thisArg; else let T be undefined.\n...\n6. Repeat, while k < len\n...\nc. If kPresent is true, then\ni. Let kValue be ? Get(O, Pk).\nii. Let testResult be ToBoolean(? Call(callbackfn, T, \u00ab kValue, k, O \u00bb)).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/some/BigInt/callbackfn-arguments-without-thisarg.js", "esid": " sec-%typedarray%.prototype.some", "description": " >callbackfn arguments\n", "info": " |22.2.3.25 %TypedArray%.prototype.some ( callbackfn [ , thisArg ] )\n\n%TypedArray%.prototype.some is a distinct function that implements the same\nalgorithm as Array.prototype.some as defined in 22.1.3.24 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\".\n\n22.1.3.24 Array.prototype.some ( callbackfn [ , thisArg ] )\n\n...\n4. If thisArg was supplied, let T be thisArg; else let T be undefined.\n...\n6. Repeat, while k < len\n...\nc. If kPresent is true, then\ni. Let kValue be ? Get(O, Pk).\nii. Let testResult be ToBoolean(? Call(callbackfn, T, \u00ab kValue, k, O \u00bb)).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/some/BigInt/callbackfn-no-interaction-over-non-integer.js", "esid": " sec-%typedarray%.prototype.some", "description": " >Does not interact over non-integer properties\n", "info": " |22.2.3.7 %TypedArray%.prototype.some ( callbackfn [ , thisArg ] )\n\n...\n6. Repeat, while k < len\n...\nc. If kPresent is true, then\ni. Let kValue be ? Get(O, Pk).\nii. Let testResult be ToBoolean(? Call(callbackfn, T, \u00ab kValue, k, O \u00bb)).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/some/BigInt/callbackfn-not-callable-throws.js", "esid": " sec-%typedarray%.prototype.some", "description": " Throws a TypeError if callbackfn is not callable", "info": " |22.2.3.25 %TypedArray%.prototype.some ( callbackfn [ , thisArg ] )\n\n%TypedArray%.prototype.some is a distinct function that implements the same\nalgorithm as Array.prototype.some as defined in 22.1.3.24 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\".\n\n22.1.3.24 Array.prototype.some ( callbackfn [ , thisArg ] )\n\n...\n3. If IsCallable(callbackfn) is false, throw a TypeError exception.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/some/BigInt/callbackfn-not-called-on-empty.js", "esid": " sec-%typedarray%.prototype.some", "description": " >callbackfn is not called on empty instances\n", "info": " |22.2.3.25 %TypedArray%.prototype.some ( callbackfn [ , thisArg ] )\n\n%TypedArray%.prototype.some is a distinct function that implements the same\nalgorithm as Array.prototype.some as defined in 22.1.3.24 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\".\n\n22.1.3.24 Array.prototype.some ( callbackfn [ , thisArg ] )\n\n...\n6. Repeat, while k < len\n..\nc. If kPresent is true, then\ni. Let kValue be ? Get(O, Pk).\nii. Let testResult be ToBoolean(? Call(callbackfn, T, \u00ab kValue, k, O \u00bb)).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/some/BigInt/callbackfn-return-does-not-change-instance.js", "esid": " sec-%typedarray%.prototype.some", "description": " >The callbackfn return does not change the instance\n", "info": " |22.2.3.25 %TypedArray%.prototype.some ( callbackfn [ , thisArg ] )\n\n%TypedArray%.prototype.some is a distinct function that implements the same\nalgorithm as Array.prototype.some as defined in 22.1.3.24 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\".\n\n22.1.3.24 Array.prototype.some ( callbackfn [ , thisArg ] )\n\n...\n6. Repeat, while k < len\n..\nc. If kPresent is true, then\ni. Let kValue be ? Get(O, Pk).\nii. Let testResult be ToBoolean(? Call(callbackfn, T, \u00ab kValue, k, O \u00bb)).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/some/BigInt/callbackfn-returns-abrupt.js", "esid": " sec-%typedarray%.prototype.some", "description": " Returns abrupt from callbackfn", "info": " |22.2.3.25 %TypedArray%.prototype.some ( callbackfn [ , thisArg ] )\n\n%TypedArray%.prototype.some is a distinct function that implements the same\nalgorithm as Array.prototype.some as defined in 22.1.3.24 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\".\n\n22.1.3.24 Array.prototype.some ( callbackfn [ , thisArg ] )\n\n...\n6. Repeat, while k < len\n..\nc. If kPresent is true, then\ni. Let kValue be ? Get(O, Pk).\nii. Let testResult be ToBoolean(? Call(callbackfn, T, \u00ab kValue, k, O \u00bb)).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/some/BigInt/callbackfn-set-value-during-interaction.js", "esid": " sec-%typedarray%.prototype.some", "description": " >Integer indexed values changed during iteration\n", "info": " |22.2.3.25 %TypedArray%.prototype.some ( callbackfn [ , thisArg ] )\n\n%TypedArray%.prototype.some is a distinct function that implements the same\nalgorithm as Array.prototype.some as defined in 22.1.3.24 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\".\n\n22.1.3.24 Array.prototype.some ( callbackfn [ , thisArg ] )\n\n...\n6. Repeat, while k < len\n..\nc. If kPresent is true, then\ni. Let kValue be ? Get(O, Pk).\nii. Let testResult be ToBoolean(? Call(callbackfn, T, \u00ab kValue, k, O \u00bb)).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Reflect.set", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/some/BigInt/callbackfn-this.js", "esid": " sec-%typedarray%.prototype.some", "description": " >callbackfn `this` value\n", "info": " |22.2.3.25 %TypedArray%.prototype.some ( callbackfn [ , thisArg ] )\n\n%TypedArray%.prototype.some is a distinct function that implements the same\nalgorithm as Array.prototype.some as defined in 22.1.3.24 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\".\n\n22.1.3.24 Array.prototype.some ( callbackfn [ , thisArg ] )\n\n...\n4. If thisArg was supplied, let T be thisArg; else let T be undefined.\n...\n6. Repeat, while k < len\n...\nc. If kPresent is true, then\n...\nii. Let testResult be ToBoolean(? Call(callbackfn, T, \u00ab kValue, k, O \u00bb)).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/some/BigInt/get-length-uses-internal-arraylength.js", "esid": " sec-%typedarray%.prototype.some", "description": " Get \"length\" uses internal ArrayLength", "info": " |22.2.3.25 %TypedArray%.prototype.some ( callbackfn [ , thisArg ] )\n\n%TypedArray%.prototype.some is a distinct function that implements the same\nalgorithm as Array.prototype.some as defined in 22.1.3.24 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\".\n\n22.1.3.24 Array.prototype.some ( callbackfn [ , thisArg ] )\n\n1. Let O be ? ToObject(this value).\n2. Let len be ? ToLength(? Get(O, \"length\")).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/some/BigInt/returns-false-if-every-cb-returns-false.js", "esid": " sec-%typedarray%.prototype.some", "description": " >Returns false if every callbackfn calls returns a coerced false.\n", "info": " |22.2.3.25 %TypedArray%.prototype.some ( callbackfn [ , thisArg ] )\n\n%TypedArray%.prototype.some is a distinct function that implements the same\nalgorithm as Array.prototype.some as defined in 22.1.3.24 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\".\n\n22.1.3.24 Array.prototype.some ( callbackfn [ , thisArg ] )\n\n...\n7. Return true.\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/some/BigInt/returns-true-if-any-cb-returns-true.js", "esid": " sec-%typedarray%.prototype.some", "description": " >Returns true if any callbackfn returns a coerced true.\n", "info": " |22.2.3.25 %TypedArray%.prototype.some ( callbackfn [ , thisArg ] )\n\n%TypedArray%.prototype.some is a distinct function that implements the same\nalgorithm as Array.prototype.some as defined in 22.1.3.24 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\".\n\n22.1.3.24 Array.prototype.some ( callbackfn [ , thisArg ] )\n\n...\n6. Repeat, while k < len\n...\nc. If kPresent is true, then\ni. Let kValue be ? Get(O, Pk).\nii. Let testResult be ToBoolean(? Call(callbackfn, T, \u00ab kValue, k, O \u00bb)).\niii. If testResult is true, return true.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/some/BigInt/values-are-not-cached.js", "esid": " sec-%typedarray%.prototype.some", "description": " >Integer indexed values are not cached before iteration\n", "info": " |22.2.3.25 %TypedArray%.prototype.some ( callbackfn [ , thisArg ] )\n\n%TypedArray%.prototype.some is a distinct function that implements the same\nalgorithm as Array.prototype.some as defined in 22.1.3.24 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\".\n\n22.1.3.24 Array.prototype.some ( callbackfn [ , thisArg ] )\n\n...\n6. Repeat, while k < len\n..\nc. If kPresent is true, then\ni. Let kValue be ? Get(O, Pk).\nii. Let testResult be ToBoolean(? Call(callbackfn, T, \u00ab kValue, k, O \u00bb)).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/sort/BigInt/arraylength-internal.js", "esid": " sec-%typedarray%.prototype.sort", "description": " Use internal ArrayLength instead of getting a length property", "info": " |22.2.3.26 %TypedArray%.prototype.sort ( comparefn )\n\n...\n3. Let len be the value of obj's [[ArrayLength]] internal slot.\n", "includes": ["testBigIntTypedArray.js", "compareArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/sort/BigInt/comparefn-call-throws.js", "esid": " sec-%typedarray%.prototype.sort", "description": " Returns abrupt from comparefn", "info": " |22.2.3.26 %TypedArray%.prototype.sort ( comparefn )\n\nWhen the TypedArray SortCompare abstract operation is called with two\narguments x and y, the following steps are taken:\n\n...\n2. If the argument comparefn is not undefined, then\na. Let v be ? Call(comparefn, undefined, \u00ab x, y \u00bb).\n...\n...\n\n22.1.3.25 Array.prototype.sort (comparefn)\n\nThe following steps are taken:\n\n- If an abrupt completion is returned from any of these operations, it is\nimmediately returned as the value of this function.\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/sort/BigInt/comparefn-calls.js", "esid": " sec-%typedarray%.prototype.sort", "description": " comparefn is called if not undefined", "info": " |22.2.3.26 %TypedArray%.prototype.sort ( comparefn )\n\nWhen the TypedArray SortCompare abstract operation is called with two\narguments x and y, the following steps are taken:\n\n...\n2. If the argument comparefn is not undefined, then\na. Let v be ? Call(comparefn, undefined, \u00ab x, y \u00bb).\n...\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/sort/BigInt/comparefn-is-undefined.js", "esid": " sec-%typedarray%.prototype.sort", "description": " >Treats explicit undefined comparefn the same as implicit undefined comparefn\n", "info": " |%TypedArray%.prototype.sort ( comparefn )\n\n1. If comparefn is not undefined and IsCallable(comparefn) is false, throw a TypeError exception.\n...\n", "includes": ["compareArray.js", "testBigIntTypedArray.js"], "features": ["TypedArray", "BigInt"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/sort/BigInt/comparefn-nonfunction-call-throws.js", "esid": " sec-%typedarray%.prototype.sort", "description": " throws on a non-undefined non-function", "info": " |22.2.3.26 %TypedArray%.prototype.sort ( comparefn )\n\nUpon entry, the following steps are performed to initialize evaluation\nof the sort function. These steps are used instead of the entry steps\nin 22.1.3.25:\n\n...\n1. If _comparefn_ is not *undefined* and IsCallable(_comparefn_) is *false*, throw a *TypeError* exception.\n...\n\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/sort/BigInt/return-same-instance.js", "esid": " sec-%typedarray%.prototype.sort", "description": " Returns the same instance", "info": " |22.2.3.26 %TypedArray%.prototype.sort ( comparefn )\n\nWhen the TypedArray SortCompare abstract operation is called with two\narguments x and y, the following steps are taken:\n\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/sort/BigInt/sortcompare-with-no-tostring.js", "esid": " sec-%typedarray%.prototype.sort", "description": " TypedArrays sort does not cast values to String", "info": " |22.2.3.26 %TypedArray%.prototype.sort ( comparefn )\n\nWhen the TypedArray SortCompare abstract operation is called with two\narguments x and y, the following steps are taken:\n\n...\n2. If the argument comparefn is not undefined, then\na. Let v be ? Call(comparefn, undefined, \u00ab x, y \u00bb).\n...\n...\n", "includes": ["testBigIntTypedArray.js", "compareArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/sort/BigInt/sorted-values.js", "esid": " sec-%typedarray%.prototype.sort", "description": " Sort values to numeric ascending order", "info": " |22.2.3.26 %TypedArray%.prototype.sort ( comparefn )\n\nWhen the TypedArray SortCompare abstract operation is called with two\narguments x and y, the following steps are taken:\n\n...\n", "includes": ["testBigIntTypedArray.js", "compareArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/sort/stability.js", "esid": " sec-%typedarray%.prototype.sort", "description": " Stability of %TypedArray%.prototype.sort.", "info": " |https://github.com/tc39/ecma262/pull/1433\n", "includes": ["testTypedArray.js", "compareArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/subarray/BigInt/infinity.js", "esid": " sec-%typedarray%.prototype.subarray", "description": " Infinity values on begin and end", "info": " |22.2.3.27 %TypedArray%.prototype.subarray( begin , end )\n", "includes": ["testBigIntTypedArray.js", "compareArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/subarray/BigInt/minus-zero.js", "esid": " sec-%typedarray%.prototype.subarray", "description": " -0 values on begin and end", "info": " |22.2.3.27 %TypedArray%.prototype.subarray( begin , end )\n", "includes": ["testBigIntTypedArray.js", "compareArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/subarray/BigInt/result-does-not-copy-ordinary-properties.js", "esid": " sec-%typedarray%.prototype.subarray", "description": " Subarray result does not import own property", "info": " |22.2.3.27 %TypedArray%.prototype.subarray( begin , end )\n\n...\n17. Return ? TypedArraySpeciesCreate(O, argumentsList).\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/subarray/BigInt/result-is-new-instance-from-same-ctor.js", "esid": " sec-%typedarray%.prototype.subarray", "description": " Returns a new instance from the same constructor", "info": " |22.2.3.27 %TypedArray%.prototype.subarray( begin , end )\n\n...\n17. Return ? TypedArraySpeciesCreate(O, argumentsList).\n", "includes": ["testBigIntTypedArray.js", "compareArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/subarray/BigInt/result-is-new-instance-with-shared-buffer.js", "esid": " sec-%typedarray%.prototype.subarray", "description": " Returns a new instance sharing the same buffer", "info": " |22.2.3.27 %TypedArray%.prototype.subarray( begin , end )\n\n...\n17. Return ? TypedArraySpeciesCreate(O, argumentsList).\n", "includes": ["testBigIntTypedArray.js", "compareArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/subarray/BigInt/results-with-different-length.js", "esid": " sec-%typedarray%.prototype.subarray", "description": " Subarray may return a new instance with a smaller length", "info": " |22.2.3.27 %TypedArray%.prototype.subarray( begin , end )\n\n...\n17. Return ? TypedArraySpeciesCreate(O, argumentsList).\n", "includes": ["testBigIntTypedArray.js", "compareArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/subarray/BigInt/results-with-empty-length.js", "esid": " sec-%typedarray%.prototype.subarray", "description": " Subarray may return a new empty instance", "info": " |22.2.3.27 %TypedArray%.prototype.subarray( begin , end )\n\n...\n17. Return ? TypedArraySpeciesCreate(O, argumentsList).\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/subarray/BigInt/results-with-same-length.js", "esid": " sec-%typedarray%.prototype.subarray", "description": " Subarray may return a new instance with the same length", "info": " |22.2.3.27 %TypedArray%.prototype.subarray( begin , end )\n\n...\n17. Return ? TypedArraySpeciesCreate(O, argumentsList).\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/subarray/BigInt/return-abrupt-from-begin-symbol.js", "esid": " sec-%typedarray%.prototype.subarray", "description": " Return abrupt from ToInteger(begin), begin is symbol", "info": " |22.2.3.27 %TypedArray%.prototype.subarray( begin , end )\n\n...\n7. Let relativeBegin be ? ToInteger(begin).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/subarray/BigInt/return-abrupt-from-begin.js", "esid": " sec-%typedarray%.prototype.subarray", "description": " Return abrupt from ToInteger(begin)", "info": " |22.2.3.27 %TypedArray%.prototype.subarray( begin , end )\n\n...\n7. Let relativeBegin be ? ToInteger(begin).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/subarray/BigInt/return-abrupt-from-end-symbol.js", "esid": " sec-%typedarray%.prototype.subarray", "description": " Return abrupt from ToInteger(end), end is symbol", "info": " |22.2.3.27 %TypedArray%.prototype.subarray( begin , end )\n\n...\n9. If end is undefined, let relativeEnd be srcLength; else, let relativeEnd\nbe ? ToInteger(end).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/subarray/BigInt/return-abrupt-from-end.js", "esid": " sec-%typedarray%.prototype.subarray", "description": " Return abrupt from ToInteger(end)", "info": " |22.2.3.27 %TypedArray%.prototype.subarray( begin , end )\n\n...\n9. If end is undefined, let relativeEnd be srcLength; else, let relativeEnd\nbe ? ToInteger(end).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/subarray/BigInt/speciesctor-get-ctor-abrupt.js", "esid": " sec-%typedarray%.prototype.subarray", "description": " Return abrupt from SpeciesConstructor's get Constructor", "info": " |22.2.3.27 %TypedArray%.prototype.subarray( begin , end )\n\n...\n17. Return ? TypedArraySpeciesCreate(O, argumentsList).\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n1. Assert: Type(O) is Object.\n2. Let C be ? Get(O, \"constructor\").\n3. If C is undefined, return defaultConstructor.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/subarray/BigInt/speciesctor-get-ctor-inherited.js", "esid": " sec-%typedarray%.prototype.subarray", "description": " get inherited constructor on SpeciesConstructor", "info": " |22.2.3.27 %TypedArray%.prototype.subarray( begin , end )\n\n...\n17. Return ? TypedArraySpeciesCreate(O, argumentsList).\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n1. Assert: Type(O) is Object.\n2. Let C be ? Get(O, \"constructor\").\n3. If C is undefined, return defaultConstructor.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/subarray/BigInt/speciesctor-get-ctor-returns-throws.js", "esid": " sec-%typedarray%.prototype.subarray", "description": " >Throws if O.constructor returns a non-Object and non-undefined value\n", "info": " |22.2.3.27 %TypedArray%.prototype.subarray( begin , end )\n\n...\n17. Return ? TypedArraySpeciesCreate(O, argumentsList).\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n1. Assert: Type(O) is Object.\n2. Let C be ? Get(O, \"constructor\").\n3. If C is undefined, return defaultConstructor.\n4. If Type(C) is not Object, throw a TypeError exception.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/subarray/BigInt/speciesctor-get-ctor.js", "esid": " sec-%typedarray%.prototype.subarray", "description": " get constructor on SpeciesConstructor", "info": " |22.2.3.27 %TypedArray%.prototype.subarray( begin , end )\n\n...\n17. Return ? TypedArraySpeciesCreate(O, argumentsList).\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n1. Assert: Type(O) is Object.\n2. Let C be ? Get(O, \"constructor\").\n3. If C is undefined, return defaultConstructor.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/subarray/BigInt/speciesctor-get-species-abrupt.js", "esid": " sec-%typedarray%.prototype.subarray", "description": " >Returns abrupt from get @@species on found constructor\n", "info": " |22.2.3.27 %TypedArray%.prototype.subarray( begin , end )\n\n...\n17. Return ? TypedArraySpeciesCreate(O, argumentsList).\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n1. Assert: Type(O) is Object.\n2. Let C be ? Get(O, \"constructor\").\n...\n5. Let S be ? Get(C, @@species).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol.species", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/subarray/BigInt/speciesctor-get-species-custom-ctor-invocation.js", "esid": " sec-%typedarray%.prototype.subarray", "description": " >Verify arguments on custom @@species construct call\n", "info": " |22.2.3.27 %TypedArray%.prototype.subarray( begin , end )\n\n...\n17. Return ? TypedArraySpeciesCreate(O, argumentsList).\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n4. Return ? TypedArrayCreate(constructor, argumentList).\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n...\n5. Let S be ? Get(C, @@species).\n...\n7. If IsConstructor(S) is true, return S.\n...\n\n22.2.4.6 TypedArrayCreate ( constructor, argumentList )\n\n1. Let newTypedArray be ? Construct(constructor, argumentList).\n2. Perform ? ValidateTypedArray(newTypedArray).\n3. If argumentList is a List of a single Number, then\n...\n4. Return newTypedArray.\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol.species", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/subarray/BigInt/speciesctor-get-species-custom-ctor-returns-another-instance.js", "esid": " sec-%typedarray%.prototype.subarray", "description": " >Custom @@species constructor may return a totally different TypedArray\n", "info": " |22.2.3.27 %TypedArray%.prototype.subarray( begin , end )\n\n...\n17. Return ? TypedArraySpeciesCreate(O, argumentsList).\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n4. Return ? TypedArrayCreate(constructor, argumentList).\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n...\n5. Let S be ? Get(C, @@species).\n...\n7. If IsConstructor(S) is true, return S.\n...\n\n22.2.4.6 TypedArrayCreate ( constructor, argumentList )\n\n1. Let newTypedArray be ? Construct(constructor, argumentList).\n2. Perform ? ValidateTypedArray(newTypedArray).\n3. If argumentList is a List of a single Number, then\n...\n4. Return newTypedArray.\n", "includes": ["testBigIntTypedArray.js", "compareArray.js"], "features": ["BigInt", "Symbol.species", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/subarray/BigInt/speciesctor-get-species-custom-ctor-throws.js", "esid": " sec-%typedarray%.prototype.subarray", "description": " >Custom @@species constructor throws if it does not return a compatible object\n", "info": " |22.2.3.27 %TypedArray%.prototype.subarray( begin , end )\n\n...\n17. Return ? TypedArraySpeciesCreate(O, argumentsList).\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n4. Return ? TypedArrayCreate(constructor, argumentList).\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n...\n5. Let S be ? Get(C, @@species).\n...\n7. If IsConstructor(S) is true, return S.\n...\n\n22.2.4.6 TypedArrayCreate ( constructor, argumentList )\n\n1. Let newTypedArray be ? Construct(constructor, argumentList).\n2. Perform ? ValidateTypedArray(newTypedArray).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol.species", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/subarray/BigInt/speciesctor-get-species-custom-ctor.js", "esid": " sec-%typedarray%.prototype.subarray", "description": " >Use custom @@species constructor if available\n", "info": " |22.2.3.27 %TypedArray%.prototype.subarray( begin , end )\n\n...\n17. Return ? TypedArraySpeciesCreate(O, argumentsList).\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n4. Return ? TypedArrayCreate(constructor, argumentList).\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n...\n5. Let S be ? Get(C, @@species).\n...\n7. If IsConstructor(S) is true, return S.\n...\n\n22.2.4.6 TypedArrayCreate ( constructor, argumentList )\n\n1. Let newTypedArray be ? Construct(constructor, argumentList).\n2. Perform ? ValidateTypedArray(newTypedArray).\n3. If argumentList is a List of a single Number, then\n...\n4. Return newTypedArray.\n", "includes": ["testBigIntTypedArray.js", "compareArray.js"], "features": ["BigInt", "Symbol.species", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/subarray/BigInt/speciesctor-get-species-returns-throws.js", "esid": " sec-%typedarray%.prototype.subarray", "description": " >Throws if returned @@species is not a constructor, null or undefined.\n", "info": " |22.2.3.27 %TypedArray%.prototype.subarray( begin , end )\n\n...\n17. Return ? TypedArraySpeciesCreate(O, argumentsList).\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n...\n5. Let S be ? Get(C, @@species).\n6. If S is either undefined or null, return defaultConstructor.\n7. If IsConstructor(S) is true, return S.\n8. Throw a TypeError exception.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol.species", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/subarray/BigInt/speciesctor-get-species-use-default-ctor.js", "esid": " sec-%typedarray%.prototype.subarray", "description": " >Use defaultConstructor if @@species is either undefined or null\n", "info": " |22.2.3.27 %TypedArray%.prototype.subarray( begin , end )\n\n...\n17. Return ? TypedArraySpeciesCreate(O, argumentsList).\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n...\n5. Let S be ? Get(C, @@species).\n6. If S is either undefined or null, return defaultConstructor.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol.species", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/subarray/BigInt/speciesctor-get-species.js", "esid": " sec-%typedarray%.prototype.subarray", "description": " >get @@species from found constructor\n", "info": " |22.2.3.27 %TypedArray%.prototype.subarray( begin , end )\n\n...\n17. Return ? TypedArraySpeciesCreate(O, argumentsList).\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n1. Assert: Type(O) is Object.\n2. Let C be ? Get(O, \"constructor\").\n...\n5. Let S be ? Get(C, @@species).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol.species", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/subarray/BigInt/tointeger-begin.js", "esid": " sec-%typedarray%.prototype.subarray", "description": " ToInteger(begin)", "info": " |22.2.3.27 %TypedArray%.prototype.subarray( begin , end )\n\n...\n7. Let relativeBegin be ? ToInteger(begin).\n...\n", "includes": ["testBigIntTypedArray.js", "compareArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/subarray/BigInt/tointeger-end.js", "esid": " sec-%typedarray%.prototype.subarray", "description": " ToInteger(end)", "info": " |22.2.3.27 %TypedArray%.prototype.subarray( begin , end )\n\n...\n9. If end is undefined, let relativeEnd be srcLength; else, let relativeEnd be\n? ToInteger(end).\n...\n", "includes": ["testBigIntTypedArray.js", "compareArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/toLocaleString/BigInt/calls-tolocalestring-from-each-value.js", "esid": " sec-%typedarray%.prototype.tolocalestring", "description": " Calls toLocaleString from each property's value", "info": " |22.2.3.28 %TypedArray%.prototype.toLocaleString ([ reserved1 [ , reserved2 ] ])\n\n%TypedArray%.prototype.toLocaleString is a distinct function that implements\nthe same algorithm as Array.prototype.toLocaleString as defined in 22.1.3.27\nexcept that the this object's [[ArrayLength]] internal slot is accessed in\nplace of performing a [[Get]] of \"length\".\n\n22.1.3.27 Array.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )\n\n...\n5. Let firstElement be ? Get(array, \"0\").\n6. If firstElement is undefined or null, then\na. Let R be the empty String.\n7. Else,\na. Let R be ? ToString(? Invoke(firstElement, \"toLocaleString\")).\n8. Let k be 1.\n9.Repeat, while k < len\na. Let S be a String value produced by concatenating R and separator.\nb. Let nextElement be ? Get(array, ! ToString(k)).\nc. If nextElement is undefined or null, then\ni. Let R be the empty String.\nd. Else,\ni. Let R be ? ToString(? Invoke(nextElement, \"toLocaleString\")).\n", "includes": ["testBigIntTypedArray.js", "compareArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/toLocaleString/BigInt/calls-tostring-from-each-value.js", "esid": " sec-%typedarray%.prototype.tolocalestring", "description": " >Calls toString from each property's value return from toLocaleString \n", "info": " |22.2.3.28 %TypedArray%.prototype.toLocaleString ([ reserved1 [ , reserved2 ] ])\n\n%TypedArray%.prototype.toLocaleString is a distinct function that implements\nthe same algorithm as Array.prototype.toLocaleString as defined in 22.1.3.27\nexcept that the this object's [[ArrayLength]] internal slot is accessed in\nplace of performing a [[Get]] of \"length\".\n\n22.1.3.27 Array.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )\n\n...\n5. Let firstElement be ? Get(array, \"0\").\n6. If firstElement is undefined or null, then\na. Let R be the empty String.\n7. Else,\na. Let R be ? ToString(? Invoke(firstElement, \"toLocaleString\")).\n8. Let k be 1.\n9.Repeat, while k < len\na. Let S be a String value produced by concatenating R and separator.\nb. Let nextElement be ? Get(array, ! ToString(k)).\nc. If nextElement is undefined or null, then\ni. Let R be the empty String.\nd. Else,\ni. Let R be ? ToString(? Invoke(nextElement, \"toLocaleString\")).\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/toLocaleString/BigInt/calls-valueof-from-each-value.js", "esid": " sec-%typedarray%.prototype.tolocalestring", "description": " >Calls valueOf from each property's value return from toLocaleString \n", "info": " |22.2.3.28 %TypedArray%.prototype.toLocaleString ([ reserved1 [ , reserved2 ] ])\n\n%TypedArray%.prototype.toLocaleString is a distinct function that implements\nthe same algorithm as Array.prototype.toLocaleString as defined in 22.1.3.27\nexcept that the this object's [[ArrayLength]] internal slot is accessed in\nplace of performing a [[Get]] of \"length\".\n\n22.1.3.27 Array.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )\n\n...\n5. Let firstElement be ? Get(array, \"0\").\n6. If firstElement is undefined or null, then\na. Let R be the empty String.\n7. Else,\na. Let R be ? ToString(? Invoke(firstElement, \"toLocaleString\")).\n8. Let k be 1.\n9.Repeat, while k < len\na. Let S be a String value produced by concatenating R and separator.\nb. Let nextElement be ? Get(array, ! ToString(k)).\nc. If nextElement is undefined or null, then\ni. Let R be the empty String.\nd. Else,\ni. Let R be ? ToString(? Invoke(nextElement, \"toLocaleString\")).\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/toLocaleString/BigInt/empty-instance-returns-empty-string.js", "esid": " sec-%typedarray%.prototype.tolocalestring", "description": " Returns an empty string if called on an empty instance", "info": " |22.2.3.28 %TypedArray%.prototype.toLocaleString ([ reserved1 [ , reserved2 ] ])\n\n%TypedArray%.prototype.toLocaleString is a distinct function that implements\nthe same algorithm as Array.prototype.toLocaleString as defined in 22.1.3.27\nexcept that the this object's [[ArrayLength]] internal slot is accessed in\nplace of performing a [[Get]] of \"length\".\n\n22.1.3.27 Array.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )\n\n...\n4. If len is zero, return the empty String.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/toLocaleString/BigInt/get-length-uses-internal-arraylength.js", "esid": " sec-%typedarray%.prototype.tolocalestring", "description": "  Get \"length\" uses internal ArrayLength", "info": " |22.2.3.28 %TypedArray%.prototype.toLocaleString ([ reserved1 [ , reserved2 ] ])\n\n%TypedArray%.prototype.toLocaleString is a distinct function that implements\nthe same algorithm as Array.prototype.toLocaleString as defined in 22.1.3.27\nexcept that the this object's [[ArrayLength]] internal slot is accessed in\nplace of performing a [[Get]] of \"length\".\n\n22.1.3.27 Array.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )\n\n1. Let array be ? ToObject(this value).\n2.Let len be ? ToLength(? Get(array, \"length\")).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/toLocaleString/BigInt/return-abrupt-from-firstelement-tolocalestring.js", "esid": " sec-%typedarray%.prototype.tolocalestring", "description": " Returns abrupt from firstElement's toLocaleString", "info": " |22.2.3.28 %TypedArray%.prototype.toLocaleString ([ reserved1 [ , reserved2 ] ])\n\n%TypedArray%.prototype.toLocaleString is a distinct function that implements\nthe same algorithm as Array.prototype.toLocaleString as defined in 22.1.3.27\nexcept that the this object's [[ArrayLength]] internal slot is accessed in\nplace of performing a [[Get]] of \"length\".\n\n22.1.3.27 Array.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )\n\n...\n4. If len is zero, return the empty String.\n5. Let firstElement be ? Get(array, \"0\").\n6. If firstElement is undefined or null, then\na. Let R be the empty String.\n7. Else,\na. Let R be ? ToString(? Invoke(firstElement, \"toLocaleString\")).\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/toLocaleString/BigInt/return-abrupt-from-firstelement-tostring.js", "esid": " sec-%typedarray%.prototype.tolocalestring", "description": " >Return abrupt from firstElement's toLocaleString => toString\n", "info": " |22.2.3.28 %TypedArray%.prototype.toLocaleString ([ reserved1 [ , reserved2 ] ])\n\n%TypedArray%.prototype.toLocaleString is a distinct function that implements\nthe same algorithm as Array.prototype.toLocaleString as defined in 22.1.3.27\nexcept that the this object's [[ArrayLength]] internal slot is accessed in\nplace of performing a [[Get]] of \"length\".\n\n22.1.3.27 Array.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )\n\n...\n5. Let firstElement be ? Get(array, \"0\").\n6. If firstElement is undefined or null, then\na. Let R be the empty String.\n7. Else,\na. Let R be ? ToString(? Invoke(firstElement, \"toLocaleString\")).\n8. Let k be 1.\n9.Repeat, while k < len\na. Let S be a String value produced by concatenating R and separator.\nb. Let nextElement be ? Get(array, ! ToString(k)).\nc. If nextElement is undefined or null, then\ni. Let R be the empty String.\nd. Else,\ni. Let R be ? ToString(? Invoke(nextElement, \"toLocaleString\")).\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/toLocaleString/BigInt/return-abrupt-from-firstelement-valueof.js", "esid": " sec-%typedarray%.prototype.tolocalestring", "description": " >Return abrupt from firstElement's toLocaleString => valueOf\n", "info": " |22.2.3.28 %TypedArray%.prototype.toLocaleString ([ reserved1 [ , reserved2 ] ])\n\n%TypedArray%.prototype.toLocaleString is a distinct function that implements\nthe same algorithm as Array.prototype.toLocaleString as defined in 22.1.3.27\nexcept that the this object's [[ArrayLength]] internal slot is accessed in\nplace of performing a [[Get]] of \"length\".\n\n22.1.3.27 Array.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )\n\n...\n5. Let firstElement be ? Get(array, \"0\").\n6. If firstElement is undefined or null, then\na. Let R be the empty String.\n7. Else,\na. Let R be ? ToString(? Invoke(firstElement, \"toLocaleString\")).\n8. Let k be 1.\n9.Repeat, while k < len\na. Let S be a String value produced by concatenating R and separator.\nb. Let nextElement be ? Get(array, ! ToString(k)).\nc. If nextElement is undefined or null, then\ni. Let R be the empty String.\nd. Else,\ni. Let R be ? ToString(? Invoke(nextElement, \"toLocaleString\")).\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/toLocaleString/BigInt/return-abrupt-from-nextelement-tolocalestring.js", "esid": " sec-%typedarray%.prototype.tolocalestring", "description": " Returns abrupt from a nextElement's toLocaleString", "info": " |22.2.3.28 %TypedArray%.prototype.toLocaleString ([ reserved1 [ , reserved2 ] ])\n\n%TypedArray%.prototype.toLocaleString is a distinct function that implements\nthe same algorithm as Array.prototype.toLocaleString as defined in 22.1.3.27\nexcept that the this object's [[ArrayLength]] internal slot is accessed in\nplace of performing a [[Get]] of \"length\".\n\n22.1.3.27 Array.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )\n\n...\n9.Repeat, while k < len\na. Let S be a String value produced by concatenating R and separator.\nb. Let nextElement be ? Get(array, ! ToString(k)).\nc. If nextElement is undefined or null, then\ni. Let R be the empty String.\nd. Else,\ni. Let R be ? ToString(? Invoke(nextElement, \"toLocaleString\")).\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/toLocaleString/BigInt/return-abrupt-from-nextelement-tostring.js", "esid": " sec-%typedarray%.prototype.tolocalestring", "description": " >Return abrupt from nextElement's toLocaleString => valueOf\n", "info": " |22.2.3.28 %TypedArray%.prototype.toLocaleString ([ reserved1 [ , reserved2 ] ])\n\n%TypedArray%.prototype.toLocaleString is a distinct function that implements\nthe same algorithm as Array.prototype.toLocaleString as defined in 22.1.3.27\nexcept that the this object's [[ArrayLength]] internal slot is accessed in\nplace of performing a [[Get]] of \"length\".\n\n22.1.3.27 Array.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )\n\n...\n5. Let firstElement be ? Get(array, \"0\").\n6. If firstElement is undefined or null, then\na. Let R be the empty String.\n7. Else,\na. Let R be ? ToString(? Invoke(firstElement, \"toLocaleString\")).\n8. Let k be 1.\n9.Repeat, while k < len\na. Let S be a String value produced by concatenating R and separator.\nb. Let nextElement be ? Get(array, ! ToString(k)).\nc. If nextElement is undefined or null, then\ni. Let R be the empty String.\nd. Else,\ni. Let R be ? ToString(? Invoke(nextElement, \"toLocaleString\")).\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/toLocaleString/BigInt/return-abrupt-from-nextelement-valueof.js", "esid": " sec-%typedarray%.prototype.tolocalestring", "description": " >Return abrupt from nextElement's toLocaleString => valueOf\n", "info": " |22.2.3.28 %TypedArray%.prototype.toLocaleString ([ reserved1 [ , reserved2 ] ])\n\n%TypedArray%.prototype.toLocaleString is a distinct function that implements\nthe same algorithm as Array.prototype.toLocaleString as defined in 22.1.3.27\nexcept that the this object's [[ArrayLength]] internal slot is accessed in\nplace of performing a [[Get]] of \"length\".\n\n22.1.3.27 Array.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )\n\n...\n5. Let firstElement be ? Get(array, \"0\").\n6. If firstElement is undefined or null, then\na. Let R be the empty String.\n7. Else,\na. Let R be ? ToString(? Invoke(firstElement, \"toLocaleString\")).\n8. Let k be 1.\n9.Repeat, while k < len\na. Let S be a String value produced by concatenating R and separator.\nb. Let nextElement be ? Get(array, ! ToString(k)).\nc. If nextElement is undefined or null, then\ni. Let R be the empty String.\nd. Else,\ni. Let R be ? ToString(? Invoke(nextElement, \"toLocaleString\")).\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/toLocaleString/BigInt/return-result.js", "esid": " sec-%typedarray%.prototype.tolocalestring", "description": " Returns a string", "info": " |22.2.3.28 %TypedArray%.prototype.toLocaleString ([ reserved1 [ , reserved2 ] ])\n\n%TypedArray%.prototype.toLocaleString is a distinct function that implements\nthe same algorithm as Array.prototype.toLocaleString as defined in 22.1.3.27\nexcept that the this object's [[ArrayLength]] internal slot is accessed in\nplace of performing a [[Get]] of \"length\".\n\n22.1.3.27 Array.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )\n\n...\n5. Let firstElement be ? Get(array, \"0\").\n6. If firstElement is undefined or null, then\na. Let R be the empty String.\n7. Else,\na. Let R be ? ToString(? Invoke(firstElement, \"toLocaleString\")).\n8. Let k be 1.\n9.Repeat, while k < len\na. Let S be a String value produced by concatenating R and separator.\nb. Let nextElement be ? Get(array, ! ToString(k)).\nc. If nextElement is undefined or null, then\ni. Let R be the empty String.\nd. Else,\ni. Let R be ? ToString(? Invoke(nextElement, \"toLocaleString\")).\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/values/BigInt/iter-prototype.js", "esid": " sec-%typedarray%.prototype.values", "description": " >The prototype of the returned iterator is ArrayIteratorPrototype\n", "info": " |22.2.3.30 %TypedArray%.prototype.values ( )\n\n...\n3. Return CreateArrayIterator(O, \"value\").\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol.iterator", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/values/BigInt/return-itor.js", "esid": " sec-%typedarray%.prototype.values", "description": " Return an iterator for the values.", "info": " |22.2.3.30 %TypedArray%.prototype.values ( )\n\n...\n3. Return CreateArrayIterator(O, \"value\").\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/BigInt64Array/BYTES_PER_ELEMENT.js", "esid": " sec-typedarray.bytes_per_element", "description": " BigInt64Array.BYTES_PER_ELEMENT property descriptor", "info": " |22.2.5.1 TypedArray.BYTES_PER_ELEMENT\n\nThe value of TypedArray.BYTES_PER_ELEMENT is the Number value of the\nElement Size value specified in Table 52 for TypedArray.\n\nThis property has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: false }.\n", "includes": ["propertyHelper.js"], "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/BigInt64Array/constructor.js", "esid": " sec-typedarray-constructors", "description": " BigInt64Array is a constructor function", "info": " |22.2.4 The TypedArray Constructors\n\n[...]\n\nThe TypedArray intrinsic constructor functions are single functions\nwhose behaviour is overloaded based upon the number and types of its\narguments. The actual behaviour of a call of TypedArray depends upon\nthe number and kind of arguments that are passed to it.\n", "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/BigInt64Array/is-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >The BigInt64Array constructor implements [[Construct]]\n", "info": " |IsConstructor ( argument )\n\nThe abstract operation IsConstructor takes argument argument (an ECMAScript language value).\nIt determines if argument is a function object with a [[Construct]] internal method.\nIt performs the following steps when called:\n\nIf Type(argument) is not Object, return false.\nIf argument has a [[Construct]] internal method, return true.\nReturn false.\n", "includes": ["isConstructor.js"], "features": ["Reflect.construct", "BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/BigInt64Array/length.js", "esid": " sec-typedarray-constructors", "description": " BigInt64Array.length property descriptor", "info": " |The TypedArray Constructors\n\nThe length property of the TypedArray constructor function is 3.\n\n17 ECMAScript Standard Built-in Objects\n\n...\n\nUnless otherwise specified, the length property of a built-in function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/BigInt64Array/name.js", "esid": " sec-properties-of-the-typedarray-constructors", "description": " BigInt64Array.name property descriptor", "info": " |22.2.5 Properties of the TypedArray Constructors\n\n[...]\n\nEach TypedArray constructor has a name property whose value is the\nString value of the constructor name specified for it in Table 52.\n\n17 ECMAScript Standard Built-in Objects\n\nEvery built-in function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String. Unless otherwise specified, this value is the name that\nis given to the function in this specification. For functions that\nare specified as properties of objects, the name value is the\nproperty name string used to access the function. [...]\n\nUnless otherwise specified, the name property of a built-in function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/BigInt64Array/prop-desc.js", "esid": " sec-typedarray-objects", "description": " BigInt64Array property descriptor", "info": " |17 ECMAScript Standard Built-in Objects\n", "includes": ["propertyHelper.js"], "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/BigInt64Array/proto.js", "esid": " sec-properties-of-the-typedarray-constructors", "description": " BigInt64Array prototype internal slot", "info": " |22.2.5 Properties of the TypedArray Constructors\n\nThe value of the [[Prototype]] internal slot of each TypedArray\nconstructor is the %TypedArray% intrinsic object.\n", "includes": ["testTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/BigInt64Array/prototype/BYTES_PER_ELEMENT.js", "esid": " sec-typedarray.prototype.bytes_per_element", "description": " BigInt64Array.prototype.BYTES_PER_ELEMENT property descriptor", "info": " |22.2.5.1 TypedArray.prototype.BYTES_PER_ELEMENT\n\nThe value of TypedArray.prototype.BYTES_PER_ELEMENT is the Number\nvalue of the Element Size value specified in Table 52 for TypedArray.\n\nThis property has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: false }.\n", "includes": ["propertyHelper.js"], "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/BigInt64Array/prototype/constructor.js", "esid": " sec-typedarray.prototype.constructor", "description": " BigInt64Array.prototype.constructor property descriptor", "info": " |22.2.6.2 TypedArray.prototype.constructor\n\nThe initial value of a TypedArray.prototype.constructor is the\ncorresponding %TypedArray% intrinsic object.\n\n17 ECMAScript Standard Built-in Objects\n", "includes": ["propertyHelper.js"], "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/BigInt64Array/prototype/not-typedarray-object.js", "esid": " sec-properties-of-typedarray-prototype-objects", "description": " BigInt64Array.prototype is not a TypedArray instance", "info": " |22.2.6 Properties of TypedArray Prototype Objects\n\n[...] A TypedArray prototype object is an ordinary object. It does not\nhave a [[ViewedArrayBuffer]] or any other of the internal slots that\nare specific to TypedArray instance objects.\n", "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/BigInt64Array/prototype/proto.js", "esid": " sec-properties-of-typedarray-prototype-objects", "description": " BigInt64Array.prototype prototype internal slot", "info": " |22.2.6 Properties of TypedArray Prototype Objects\n\nThe value of the [[Prototype]] internal slot of a TypedArray prototype\nobject is the intrinsic object %TypedArrayPrototype%. [...]\n", "includes": ["testTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/BigInt64Array/prototype.js", "esid": " sec-typedarray.prototype", "description": " BigInt64Array.prototype property descriptor", "info": " |22.2.5.2 TypedArray.prototype\n\nThe initial value of TypedArray.prototype is the corresponding\nTypedArray prototype intrinsic object (22.2.6).\n\nThis property has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: false }.\n", "includes": ["propertyHelper.js"], "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/BigUint64Array/BYTES_PER_ELEMENT.js", "esid": " sec-typedarray.bytes_per_element", "description": " BigUint64Array.BYTES_PER_ELEMENT property descriptor", "info": " |22.2.5.1 TypedArray.BYTES_PER_ELEMENT\n\nThe value of TypedArray.BYTES_PER_ELEMENT is the Number value of the\nElement Size value specified in Table 52 for TypedArray.\n\nThis property has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: false }.\n", "includes": ["propertyHelper.js"], "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/BigUint64Array/constructor.js", "esid": " sec-typedarray-constructors", "description": " BigUint64Array is a constructor function", "info": " |22.2.4 The TypedArray Constructors\n\n[...]\n\nThe TypedArray intrinsic constructor functions are single functions\nwhose behaviour is overloaded based upon the number and types of its\narguments. The actual behaviour of a call of TypedArray depends upon\nthe number and kind of arguments that are passed to it.\n", "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/BigUint64Array/is-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >The BigUint64Array constructor implements [[Construct]]\n", "info": " |IsConstructor ( argument )\n\nThe abstract operation IsConstructor takes argument argument (an ECMAScript language value).\nIt determines if argument is a function object with a [[Construct]] internal method.\nIt performs the following steps when called:\n\nIf Type(argument) is not Object, return false.\nIf argument has a [[Construct]] internal method, return true.\nReturn false.\n", "includes": ["isConstructor.js"], "features": ["Reflect.construct", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/BigUint64Array/length.js", "esid": " sec-typedarray-constructors", "description": " BigUint64Array.length property descriptor", "info": " |The TypedArray Constructors\n\nThe length property of the TypedArray constructor function is 3.\n\n17 ECMAScript Standard Built-in Objects\n\n...\n\nUnless otherwise specified, the length property of a built-in function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/BigUint64Array/name.js", "esid": " sec-properties-of-the-typedarray-constructors", "description": " BigUint64Array.name property descriptor", "info": " |22.2.5 Properties of the TypedArray Constructors\n\n[...]\n\nEach TypedArray constructor has a name property whose value is the\nString value of the constructor name specified for it in Table 52.\n\n17 ECMAScript Standard Built-in Objects\n\nEvery built-in function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String. Unless otherwise specified, this value is the name that\nis given to the function in this specification. For functions that\nare specified as properties of objects, the name value is the\nproperty name string used to access the function. [...]\n\nUnless otherwise specified, the name property of a built-in function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/BigUint64Array/prop-desc.js", "esid": " sec-typedarray-objects", "description": " BigUint64Array property descriptor", "info": " |17 ECMAScript Standard Built-in Objects\n", "includes": ["propertyHelper.js"], "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/BigUint64Array/proto.js", "esid": " sec-properties-of-the-typedarray-constructors", "description": " BigUint64Array prototype internal slot", "info": " |22.2.5 Properties of the TypedArray Constructors\n\nThe value of the [[Prototype]] internal slot of each TypedArray\nconstructor is the %TypedArray% intrinsic object.\n", "includes": ["testTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/BigUint64Array/prototype/BYTES_PER_ELEMENT.js", "esid": " sec-typedarray.prototype.bytes_per_element", "description": " BigUint64Array.prototype.BYTES_PER_ELEMENT property descriptor", "info": " |22.2.5.1 TypedArray.prototype.BYTES_PER_ELEMENT\n\nThe value of TypedArray.prototype.BYTES_PER_ELEMENT is the Number\nvalue of the Element Size value specified in Table 52 for TypedArray.\n\nThis property has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: false }.\n", "includes": ["propertyHelper.js"], "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/BigUint64Array/prototype/constructor.js", "esid": " sec-typedarray.prototype.constructor", "description": " BigUint64Array.prototype.constructor property descriptor", "info": " |22.2.6.2 TypedArray.prototype.constructor\n\nThe initial value of a TypedArray.prototype.constructor is the\ncorresponding %TypedArray% intrinsic object.\n\n17 ECMAScript Standard Built-in Objects\n", "includes": ["propertyHelper.js"], "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/BigUint64Array/prototype/not-typedarray-object.js", "esid": " sec-properties-of-typedarray-prototype-objects", "description": " BigUint64Array.prototype is not a TypedArray instance", "info": " |22.2.6 Properties of TypedArray Prototype Objects\n\n[...] A TypedArray prototype object is an ordinary object. It does not\nhave a [[ViewedArrayBuffer]] or any other of the internal slots that\nare specific to TypedArray instance objects.\n", "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/BigUint64Array/prototype/proto.js", "esid": " sec-properties-of-typedarray-prototype-objects", "description": " BigUint64Array.prototype prototype internal slot", "info": " |22.2.6 Properties of TypedArray Prototype Objects\n\nThe value of the [[Prototype]] internal slot of a TypedArray prototype\nobject is the intrinsic object %TypedArrayPrototype%. [...]\n", "includes": ["testTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/BigUint64Array/prototype.js", "esid": " sec-typedarray.prototype", "description": " BigUint64Array.prototype property descriptor", "info": " |22.2.5.2 TypedArray.prototype\n\nThe initial value of TypedArray.prototype is the corresponding\nTypedArray prototype intrinsic object (22.2.6).\n\nThis property has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: false }.\n", "includes": ["propertyHelper.js"], "features": ["BigInt"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/typedarray-arg/src-typedarray-big-throws.js", "esid": " sec-typedarray-typedarray", "description": " >If typedArray constructor argument is a Big(U)Int, throw\n", "info": " |22.2.4.3 TypedArray ( typedArray )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has a [[TypedArrayName]] internal slot.\n\n...\n19. Else,\n...\nc. If one of srcType and elementType contains the substring \"Big\" and the other\ndoes not, throw a TypeError exception.\n\n", "includes": ["testBigIntTypedArray.js", "testTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/buffer-arg/bufferbyteoffset-throws-from-modulo-element-size-sab.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Throws a RangeError if bufferByteLength modulo elementSize \u2260 0\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n...\n13. If length is undefined, then\na. If bufferByteLength modulo elementSize \u2260 0, throw a RangeError exception.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/buffer-arg/bufferbyteoffset-throws-from-modulo-element-size.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Throws a RangeError if bufferByteLength modulo elementSize \u2260 0\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n...\n13. If length is undefined, then\na. If bufferByteLength modulo elementSize \u2260 0, throw a RangeError exception.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/buffer-arg/byteoffset-is-negative-throws-sab.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Throws a RangeError if ToInteger(byteOffset) is < 0\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n...\n7. Let offset be ? ToInteger(byteOffset).\n8. If offset < 0, throw a RangeError exception.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/buffer-arg/byteoffset-is-negative-throws.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Throws a RangeError if ToInteger(byteOffset) is < 0\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n...\n7. Let offset be ? ToInteger(byteOffset).\n8. If offset < 0, throw a RangeError exception.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/buffer-arg/byteoffset-is-negative-zero-sab.js", "esid": " pending", "description": " >TypedArray's [[ByteOffset]] internal slot is always a positive number, test with negative zero.\n", "info": " |%TypedArray% ( buffer [ , byteOffset [ , length ] ] )\n\n...\n6. Let offset be ? ToInteger(byteOffset).\n7. If offset < 0, throw a RangeError exception.\n8. If offset is -0, let offset be +0.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/buffer-arg/byteoffset-is-negative-zero.js", "esid": " pending", "description": " >TypedArray's [[ByteOffset]] internal slot is always a positive number, test with negative zero.\n", "info": " |%TypedArray% ( buffer [ , byteOffset [ , length ] ] )\n\n...\n6. Let offset be ? ToInteger(byteOffset).\n7. If offset < 0, throw a RangeError exception.\n8. If offset is -0, let offset be +0.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/buffer-arg/byteoffset-is-symbol-throws-sab.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Return abrupt from parsing integer value from byteOffset as a symbol\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n...\n7. Let offset be ? ToInteger(byteOffset).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol", "SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/buffer-arg/byteoffset-is-symbol-throws.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Return abrupt from parsing integer value from byteOffset as a symbol\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n...\n7. Let offset be ? ToInteger(byteOffset).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/buffer-arg/byteoffset-throws-from-modulo-element-size-sab.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Throws a RangeError if ToInteger(byteOffset) modulo elementSize is not 0\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n...\n10. If offset modulo elementSize \u2260 0, throw a RangeError exception.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/buffer-arg/byteoffset-throws-from-modulo-element-size.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Throws a RangeError if ToInteger(byteOffset) modulo elementSize is not 0\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n...\n10. If offset modulo elementSize \u2260 0, throw a RangeError exception.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/buffer-arg/byteoffset-to-number-throws-sab.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Return abrupt from parsing integer value from byteOffset\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n...\n7. Let offset be ? ToInteger(byteOffset).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/buffer-arg/byteoffset-to-number-throws.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Return abrupt from parsing integer value from byteOffset\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n...\n7. Let offset be ? ToInteger(byteOffset).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/buffer-arg/custom-proto-access-throws-sab.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Return abrupt completion getting newTarget's prototype\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n...\n4. Let O be ? AllocateTypedArray(constructorName, NewTarget,\n%TypedArrayPrototype%).\n...\n\n22.2.4.2.1 Runtime Semantics: AllocateTypedArray (constructorName, newTarget,\ndefaultProto [ , length ])\n\n1. Let proto be ? GetPrototypeFromConstructor(newTarget, defaultProto).\n...\n\n9.1.15 GetPrototypeFromConstructor ( constructor, intrinsicDefaultProto )\n\n...\n3. Let proto be ? Get(constructor, \"prototype\").\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Reflect", "SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/buffer-arg/custom-proto-access-throws.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Return abrupt completion getting newTarget's prototype\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n...\n4. Let O be ? AllocateTypedArray(constructorName, NewTarget,\n%TypedArrayPrototype%).\n...\n\n22.2.4.2.1 Runtime Semantics: AllocateTypedArray (constructorName, newTarget,\ndefaultProto [ , length ])\n\n1. Let proto be ? GetPrototypeFromConstructor(newTarget, defaultProto).\n...\n\n9.1.15 GetPrototypeFromConstructor ( constructor, intrinsicDefaultProto )\n\n...\n3. Let proto be ? Get(constructor, \"prototype\").\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Reflect", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/buffer-arg/defined-length-and-offset-sab.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Return new typedArray from defined length and offset\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/buffer-arg/defined-length-and-offset.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Return new typedArray from defined length and offset\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/buffer-arg/defined-length-sab.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Return new typedArray from defined length\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/buffer-arg/defined-length.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Return new typedArray from defined length\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/buffer-arg/defined-negative-length-sab.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Throws RangeError for negative ToInteger(length)\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/buffer-arg/defined-negative-length.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Throws RangeError for negative ToInteger(length)\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/buffer-arg/defined-offset-sab.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Return new typedArray from defined offset\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/buffer-arg/defined-offset.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Return new typedArray from defined offset\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/buffer-arg/excessive-length-throws-sab.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >If offset + newByteLength > bufferByteLength, throw a RangeError exception.\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n...\n14. Else,\na. Let newLength be ? ToLength(length).\nb. Let newByteLength be newLength \u00d7 elementSize.\nc. If offset+newByteLength > bufferByteLength, throw a RangeError exception.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/buffer-arg/excessive-length-throws.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >If offset + newByteLength > bufferByteLength, throw a RangeError exception.\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n...\n14. Else,\na. Let newLength be ? ToLength(length).\nb. Let newByteLength be newLength \u00d7 elementSize.\nc. If offset+newByteLength > bufferByteLength, throw a RangeError exception.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/buffer-arg/excessive-offset-throws-sab.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Throws a RangeError if bufferByteLength - ToInteger(byteOffset) < 0\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n...\n13. If length is undefined, then\na. If bufferByteLength modulo elementSize \u2260 0, throw a RangeError exception.\nb. Let newByteLength be bufferByteLength - offset.\nc. If newByteLength < 0, throw a RangeError exception.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/buffer-arg/excessive-offset-throws.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Throws a RangeError if bufferByteLength - ToInteger(byteOffset) < 0\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n...\n13. If length is undefined, then\na. If bufferByteLength modulo elementSize \u2260 0, throw a RangeError exception.\nb. Let newByteLength be bufferByteLength - offset.\nc. If newByteLength < 0, throw a RangeError exception.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/buffer-arg/invoked-with-undefined-newtarget-sab.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Throws a TypeError if NewTarget is undefined.\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n...\n2. If NewTarget is undefined, throw a TypeError exception.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/buffer-arg/invoked-with-undefined-newtarget.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Throws a TypeError if NewTarget is undefined.\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n...\n2. If NewTarget is undefined, throw a TypeError exception.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/buffer-arg/is-referenced-sab.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Reuse buffer argument instead of making a new clone\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n...\n15. Set O's [[ViewedArrayBuffer]] internal slot to buffer.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/buffer-arg/is-referenced.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Reuse buffer argument instead of making a new clone\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n...\n15. Set O's [[ViewedArrayBuffer]] internal slot to buffer.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/buffer-arg/length-access-throws-sab.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Returns abrupt from ToLength(length)\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n...\n14. Else,\na. Let newLength be ? ToLength(length).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/buffer-arg/length-access-throws.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Returns abrupt from ToLength(length)\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n...\n14. Else,\na. Let newLength be ? ToLength(length).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/buffer-arg/length-is-symbol-throws-sab.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Throws a TypeError if length is a Symbol\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n...\n14. Else,\na. Let newLength be ? ToLength(length).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol", "SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/buffer-arg/length-is-symbol-throws.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Throws a TypeError if length is a Symbol\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n...\n14. Else,\na. Let newLength be ? ToLength(length).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/buffer-arg/new-instance-extensibility-sab.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >The new typedArray instance from a buffer argument is extensible\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\n...\n4. Let O be ? AllocateTypedArray(constructorName, NewTarget,\n\"%TypedArrayPrototype%\").\n...\n\n22.2.4.2.1 Runtime Semantics: AllocateTypedArray (constructorName, newTarget,\ndefaultProto [ , length ])\n\n...\n2. Let obj be IntegerIndexedObjectCreate(proto, \u00ab [[ViewedArrayBuffer]],\n[[TypedArrayName]], [[ByteLength]], [[ByteOffset]], [[ArrayLength]] \u00bb).\n...\n\n9.4.5.7 IntegerIndexedObjectCreate (prototype, internalSlotsList)\n\n...\n11. Set the [[Extensible]] internal slot of A to true.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/buffer-arg/new-instance-extensibility.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >The new typedArray instance from a buffer argument is extensible\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\n...\n4. Let O be ? AllocateTypedArray(constructorName, NewTarget,\n\"%TypedArrayPrototype%\").\n...\n\n22.2.4.2.1 Runtime Semantics: AllocateTypedArray (constructorName, newTarget,\ndefaultProto [ , length ])\n\n...\n2. Let obj be IntegerIndexedObjectCreate(proto, \u00ab [[ViewedArrayBuffer]],\n[[TypedArrayName]], [[ByteLength]], [[ByteOffset]], [[ArrayLength]] \u00bb).\n...\n\n9.4.5.7 IntegerIndexedObjectCreate (prototype, internalSlotsList)\n\n...\n11. Set the [[Extensible]] internal slot of A to true.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/buffer-arg/returns-new-instance-sab.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Return new typedArray from undefined offset and length\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/buffer-arg/returns-new-instance.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Return new typedArray from undefined offset and length\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/buffer-arg/toindex-bytelength-sab.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >ToIndex(length) operations\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n...\n11. If length is either not present or undefined, then\n...\n12. Else,\na. Let newLength be ? ToIndex(length).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/buffer-arg/toindex-bytelength.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >ToIndex(length) operations\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n...\n11. If length is either not present or undefined, then\n...\n12. Else,\na. Let newLength be ? ToIndex(length).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/buffer-arg/toindex-byteoffset-sab.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >ToIndex(byteOffset) operations\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n...\n7. Let offset be ? ToIndex(byteOffset).\n8. If offset modulo elementSize \u2260 0, throw a RangeError exception.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/buffer-arg/toindex-byteoffset.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >ToIndex(byteOffset) operations\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n...\n7. Let offset be ? ToIndex(byteOffset).\n8. If offset modulo elementSize \u2260 0, throw a RangeError exception.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/buffer-arg/typedarray-backed-by-sharedarraybuffer.js", "esid": " sec-typedarray-typedarray", "description": " >Passing a SharedArrayBuffer-backed TypedArray to a TypedArray constructor\nproduces an ArrayBuffer-backed TypedArray.\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/buffer-arg/use-custom-proto-if-object-sab.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Use prototype from new target if it's an Object\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n...\n4. Let O be ? AllocateTypedArray(constructorName, NewTarget,\n%TypedArrayPrototype%).\n...\n\n22.2.4.2.1 Runtime Semantics: AllocateTypedArray (constructorName, newTarget,\ndefaultProto [ , length ])\n\n1. Let proto be ? GetPrototypeFromConstructor(newTarget, defaultProto).\n2. Let obj be IntegerIndexedObjectCreate (proto, \u00ab[[ViewedArrayBuffer]],\n[[TypedArrayName]], [[ByteLength]], [[ByteOffset]], [[ArrayLength]]\u00bb ).\n...\n\n9.4.5.7 IntegerIndexedObjectCreate (prototype, internalSlotsList)\n\n...\n10. Set the [[Prototype]] internal slot of A to prototype.\n...\n12. Return A.\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "SharedArrayBuffer", "Reflect", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/buffer-arg/use-custom-proto-if-object.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Use prototype from new target if it's an Object\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n...\n4. Let O be ? AllocateTypedArray(constructorName, NewTarget,\n%TypedArrayPrototype%).\n...\n\n22.2.4.2.1 Runtime Semantics: AllocateTypedArray (constructorName, newTarget,\ndefaultProto [ , length ])\n\n1. Let proto be ? GetPrototypeFromConstructor(newTarget, defaultProto).\n2. Let obj be IntegerIndexedObjectCreate (proto, \u00ab[[ViewedArrayBuffer]],\n[[TypedArrayName]], [[ByteLength]], [[ByteOffset]], [[ArrayLength]]\u00bb ).\n...\n\n9.4.5.7 IntegerIndexedObjectCreate (prototype, internalSlotsList)\n\n...\n10. Set the [[Prototype]] internal slot of A to prototype.\n...\n12. Return A.\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Reflect", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/buffer-arg/use-default-proto-if-custom-proto-is-not-object-sab.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Use prototype from %TypedArray% if newTarget's prototype is not an Object\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n...\n4. Let O be ? AllocateTypedArray(constructorName, NewTarget,\n%TypedArrayPrototype%).\n...\n\n22.2.4.2.1 Runtime Semantics: AllocateTypedArray (constructorName, newTarget,\ndefaultProto [ , length ])\n\n1. Let proto be ? GetPrototypeFromConstructor(newTarget, defaultProto).\n2. Let obj be IntegerIndexedObjectCreate (proto, \u00ab[[ViewedArrayBuffer]],\n[[TypedArrayName]], [[ByteLength]], [[ByteOffset]], [[ArrayLength]]\u00bb ).\n...\n\n9.4.5.7 IntegerIndexedObjectCreate (prototype, internalSlotsList)\n\n...\n10. Set the [[Prototype]] internal slot of A to prototype.\n...\n12. Return A.\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/buffer-arg/use-default-proto-if-custom-proto-is-not-object.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Use prototype from %TypedArray% if newTarget's prototype is not an Object\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n...\n4. Let O be ? AllocateTypedArray(constructorName, NewTarget,\n%TypedArrayPrototype%).\n...\n\n22.2.4.2.1 Runtime Semantics: AllocateTypedArray (constructorName, newTarget,\ndefaultProto [ , length ])\n\n1. Let proto be ? GetPrototypeFromConstructor(newTarget, defaultProto).\n2. Let obj be IntegerIndexedObjectCreate (proto, \u00ab[[ViewedArrayBuffer]],\n[[TypedArrayName]], [[ByteLength]], [[ByteOffset]], [[ArrayLength]]\u00bb ).\n...\n\n9.4.5.7 IntegerIndexedObjectCreate (prototype, internalSlotsList)\n\n...\n10. Set the [[Prototype]] internal slot of A to prototype.\n...\n12. Return A.\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/length-arg/custom-proto-access-throws.js", "esid": " sec-typedarray-length", "description": " >Return abrupt completion getting newTarget's prototype\n", "info": " |22.2.4.2 TypedArray ( length )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is not Object.\n\n...\n8. Return ? AllocateTypedArray(constructorName, NewTarget,\n%TypedArrayPrototype%, elementLength).\n\n22.2.4.2.1 Runtime Semantics: AllocateTypedArray (constructorName, newTarget,\ndefaultProto [ , length ])\n\n1. Let proto be ? GetPrototypeFromConstructor(newTarget, defaultProto).\n...\n\n9.1.15 GetPrototypeFromConstructor ( constructor, intrinsicDefaultProto )\n\n...\n3. Let proto be ? Get(constructor, \"prototype\").\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Reflect", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/length-arg/init-zeros.js", "esid": " sec-typedarray-length", "description": " All bytes are initialized to zero", "info": " |22.2.4.2 TypedArray ( length )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is not Object.\n\n...\n8. Return ? AllocateTypedArray(constructorName, NewTarget,\n%TypedArrayPrototype%, elementLength).\n\n22.2.4.2.1 Runtime Semantics: AllocateTypedArray (constructorName, newTarget,\ndefaultProto [ , length ])\n\n5. If length was not passed, then\n...\n6. Else,\na. Perform ? AllocateTypedArrayBuffer(obj, length).\n\n22.2.4.2.2 Runtime Semantics: AllocateTypedArrayBuffer\n\n7. Let data be ? AllocateArrayBuffer(%ArrayBuffer%, byteLength).\n\n24.1.1.1 AllocateArrayBuffer\n\n3. Let block be ? CreateByteDataBlock(byteLength).\n\n6.2.6.1 CreateByteDataBlock\n\n1. Assert: size\u22650.\n2. Let db be a new Data Block value consisting of size bytes. If it is\nimpossible to create such a Data Block, throw a RangeError exception.\n3. Set all of the bytes of db to 0.\n4. Return db. \n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/length-arg/is-infinity-throws-rangeerror.js", "esid": " sec-typedarray-length", "description": " >Throws a RangeError if length is a Infinity value\n", "info": " |22.2.4.2 TypedArray ( length )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is not Object.\n\n...\n4. Let numberLength be ? ToNumber(length).\n5. Let elementLength be ToLength(numberLength).\n6. If SameValueZero(numberLength, elementLength) is false, throw a RangeError\nexception.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/length-arg/is-negative-integer-throws-rangeerror.js", "esid": " sec-typedarray-length", "description": " >Throws a RangeError if ToInteger(length) is a negative value\n", "info": " |22.2.4.2 TypedArray ( length )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is not Object.\n\n...\n3. Let elementLength be ? ToIndex(length).\n...\n\n7.1.17 ToIndex ( value )\n\n1. If value is undefined, then\n...\n2. Else,\na. Let integerIndex be ? ToInteger(value).\nb. If integerIndex < 0, throw a RangeError exception.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/length-arg/is-symbol-throws.js", "esid": " sec-typedarray-length", "description": " >If length is a Symbol, throw a TypeError exception.\n", "info": " |22.2.4.2 TypedArray ( length )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is not Object.\n\n...\n4. Let numberLength be ? ToNumber(length).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/length-arg/new-instance-extensibility.js", "esid": " sec-typedarray-length", "description": " >The new typedArray instance from a length argument is extensible\n", "info": " |22.2.4.2 TypedArray ( length )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is not Object.\n\n...\n8. Return ? AllocateTypedArray(constructorName, NewTarget,\n%TypedArrayPrototype%, elementLength).\n\n22.2.4.2.1 Runtime Semantics: AllocateTypedArray (constructorName, newTarget,\ndefaultProto [ , length ])\n\n...\n2. Let obj be IntegerIndexedObjectCreate(proto, \u00ab [[ViewedArrayBuffer]],\n[[TypedArrayName]], [[ByteLength]], [[ByteOffset]], [[ArrayLength]] \u00bb).\n...\n\n9.4.5.7 IntegerIndexedObjectCreate (prototype, internalSlotsList)\n\n...\n11. Set the [[Extensible]] internal slot of A to true.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/length-arg/returns-object.js", "esid": " sec-typedarray-length", "description": " >Return a TypedArray object\n", "info": " |22.2.4.2 TypedArray ( length )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is not Object.\n\n...\n8. Return ? AllocateTypedArray(constructorName, NewTarget,\n%TypedArrayPrototype%, elementLength).\n\n22.2.4.2.1 Runtime Semantics: AllocateTypedArray (constructorName, newTarget,\ndefaultProto [ , length ])\n\n...\n7. Return obj\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/length-arg/toindex-length.js", "esid": " sec-typedarray-length", "description": " >ToIndex(length) operations\n", "info": " |22.2.4.2 TypedArray ( length )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is not Object.\n\n...\n3. Let elementLength be ? ToIndex(length).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/length-arg/undefined-newtarget-throws.js", "esid": " sec-typedarray-length", "description": " >Throws a TypeError if NewTarget is undefined.\n", "info": " |22.2.4.2 TypedArray ( length )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is not Object.\n\n...\n2. If NewTarget is undefined, throw a TypeError exception.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/length-arg/use-custom-proto-if-object.js", "esid": " sec-typedarray-length", "description": " >Use prototype from new target if it's an Object\n", "info": " |22.2.4.2 TypedArray ( length )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is not Object.\n\n...\n8. Return ? AllocateTypedArray(constructorName, NewTarget,\n%TypedArrayPrototype%, elementLength).\n\n22.2.4.2.1 Runtime Semantics: AllocateTypedArray (constructorName, newTarget,\ndefaultProto [ , length ])\n\n1. Let proto be ? GetPrototypeFromConstructor(newTarget, defaultProto).\n2. Let obj be IntegerIndexedObjectCreate (proto, \u00ab[[ViewedArrayBuffer]],\n[[TypedArrayName]], [[ByteLength]], [[ByteOffset]], [[ArrayLength]]\u00bb ).\n...\n\n9.4.5.7 IntegerIndexedObjectCreate (prototype, internalSlotsList)\n\n...\n10. Set the [[Prototype]] internal slot of A to prototype.\n...\n12. Return A.\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Reflect", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/length-arg/use-default-proto-if-custom-proto-is-not-object.js", "esid": " sec-typedarray-length", "description": " >Use prototype from %TypedArray% if newTarget's prototype is not an Object\n", "info": " |22.2.4.2 TypedArray ( length )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is not Object.\n\n...\n8. Return ? AllocateTypedArray(constructorName, NewTarget,\n%TypedArrayPrototype%, elementLength).\n\n22.2.4.2.1 Runtime Semantics: AllocateTypedArray (constructorName, newTarget,\ndefaultProto [ , length ])\n\n1. Let proto be ? GetPrototypeFromConstructor(newTarget, defaultProto).\n2. Let obj be IntegerIndexedObjectCreate (proto, \u00ab[[ViewedArrayBuffer]],\n[[TypedArrayName]], [[ByteLength]], [[ByteOffset]], [[ArrayLength]]\u00bb ).\n...\n\n9.4.5.7 IntegerIndexedObjectCreate (prototype, internalSlotsList)\n\n...\n10. Set the [[Prototype]] internal slot of A to prototype.\n...\n12. Return A.\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/no-args/custom-proto-access-throws.js", "esid": " sec-typedarray", "description": " >Return abrupt completion getting newTarget's prototype\n", "info": " |22.2.4.1 TypedArray( )\n\nThis description applies only if the TypedArray function is called with no\narguments.\n\n...\n3. Return ? AllocateTypedArray(constructorName, NewTarget,\n%TypedArrayPrototype%, 0).\n\n22.2.4.2.1 Runtime Semantics: AllocateTypedArray (constructorName, newTarget,\ndefaultProto [ , length ])\n\n1. Let proto be ? GetPrototypeFromConstructor(newTarget, defaultProto).\n...\n\n9.1.15 GetPrototypeFromConstructor ( constructor, intrinsicDefaultProto )\n\n...\n3. Let proto be ? Get(constructor, \"prototype\").\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Reflect", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/no-args/new-instance-extensibility.js", "esid": " sec-typedarray", "description": " >The new typedArray instance is extensible\n", "info": " |22.2.4.1 TypedArray( )\n\nThis description applies only if the TypedArray function is called with no\narguments.\n\n...\n3. Return ? AllocateTypedArray(constructorName, NewTarget,\n%TypedArrayPrototype%, 0).\n\n22.2.4.2.1 Runtime Semantics: AllocateTypedArray (constructorName, newTarget,\ndefaultProto [ , length ])\n\n...\n2. Let obj be IntegerIndexedObjectCreate(proto, \u00ab [[ViewedArrayBuffer]],\n[[TypedArrayName]], [[ByteLength]], [[ByteOffset]], [[ArrayLength]] \u00bb).\n...\n\n9.4.5.7 IntegerIndexedObjectCreate (prototype, internalSlotsList)\n\n...\n11. Set the [[Extensible]] internal slot of A to true.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/no-args/returns-object.js", "esid": " sec-typedarray", "description": " >Return a TypedArray object\n", "info": " |22.2.4.1 TypedArray( )\n\nThis description applies only if the TypedArray function is called with no\narguments.\n\n...\n3. Return ? AllocateTypedArray(constructorName, NewTarget,\n%TypedArrayPrototype%, 0).\n\n22.2.4.2.1 Runtime Semantics: AllocateTypedArray (constructorName, newTarget,\ndefaultProto [ , length ])\n\n...\n7. Return obj\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/no-args/undefined-newtarget-throws.js", "esid": " sec-typedarray", "description": " >Throws a TypeError if NewTarget is undefined.\n", "info": " |22.2.4.1 TypedArray( )\n\nThis description applies only if the TypedArray function is called with no\narguments.\n\n1. If NewTarget is undefined, throw a TypeError exception.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/no-args/use-custom-proto-if-object.js", "esid": " sec-typedarray", "description": " >Use prototype from new target if it's an Object\n", "info": " |22.2.4.1 TypedArray( )\n\nThis description applies only if the TypedArray function is called with no\narguments.\n\n...\n3. Return ? AllocateTypedArray(constructorName, NewTarget,\n%TypedArrayPrototype%, 0).\n\n22.2.4.2.1 Runtime Semantics: AllocateTypedArray (constructorName, newTarget,\ndefaultProto [ , length ])\n\n1. Let proto be ? GetPrototypeFromConstructor(newTarget, defaultProto).\n2. Let obj be IntegerIndexedObjectCreate (proto, \u00ab[[ViewedArrayBuffer]],\n[[TypedArrayName]], [[ByteLength]], [[ByteOffset]], [[ArrayLength]]\u00bb ).\n...\n\n9.4.5.7 IntegerIndexedObjectCreate (prototype, internalSlotsList)\n\n...\n10. Set the [[Prototype]] internal slot of A to prototype.\n...\n12. Return A.\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Reflect", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/no-args/use-default-proto-if-custom-proto-is-not-object.js", "esid": " sec-typedarray", "description": " >Use prototype from %TypedArray% if newTarget's prototype is not an Object\n", "info": " |22.2.4.1 TypedArray( )\n\nThis description applies only if the TypedArray function is called with no\narguments.\n\n...\n3. Return ? AllocateTypedArray(constructorName, NewTarget,\n%TypedArrayPrototype%, 0).\n\n22.2.4.2.1 Runtime Semantics: AllocateTypedArray (constructorName, newTarget,\ndefaultProto [ , length ])\n\n1. Let proto be ? GetPrototypeFromConstructor(newTarget, defaultProto).\n2. Let obj be IntegerIndexedObjectCreate (proto, \u00ab[[ViewedArrayBuffer]],\n[[TypedArrayName]], [[ByteLength]], [[ByteOffset]], [[ArrayLength]]\u00bb ).\n...\n\n9.4.5.7 IntegerIndexedObjectCreate (prototype, internalSlotsList)\n\n...\n10. Set the [[Prototype]] internal slot of A to prototype.\n...\n12. Return A.\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/object-arg/as-array-returns.js", "esid": " sec-typedarray-object", "description": " >Return typedArray from array argument\n", "info": " |22.2.4.4 TypedArray ( object )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject does not have either a [[TypedArrayName]] or an [[ArrayBufferData]]\ninternal slot.\n\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/object-arg/as-generator-iterable-returns.js", "esid": " sec-typedarray-object", "description": " >Return typedArray from iterable argument\n", "info": " |22.2.4.4 TypedArray ( object )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject does not have either a [[TypedArrayName]] or an [[ArrayBufferData]]\ninternal slot.\n\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/object-arg/bigint-tobigint64.js", "esid": " sec-typedarray-object", "description": " >Behavior for input array of BigInts\n", "info": " |TypedArray ( object )\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject does not have either a [[TypedArrayName]] or an [[ArrayBufferData]]\ninternal slot.\n...\n8. Repeat, while k < len\n...\nb. Let kValue be ? Get(arrayLike, Pk).\nc. Perform ? Set(O, Pk, kValue, true).\n...\n\n[[Set]] ( P, V, Receiver)\n...\n2. If Type(P) is String and if SameValue(O, Receiver) is true, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\ni. Perform ? IntegerIndexedElementSet(O, numericIndex, V).\nii. Return true.\n...\n\nIntegerIndexedElementSet ( O, index, value )\n\nAssert: O is an Integer-Indexed exotic object.\nIf O.[[ContentType]] is BigInt, let numValue be ? ToBigInt(value).\nOtherwise, let numValue be ? ToNumber(value).\nLet buffer be O.[[ViewedArrayBuffer]].\nIf IsDetachedBuffer(buffer) is false and ! IsValidIntegerIndex(O, index) is true, then\nLet offset be O.[[ByteOffset]].\nLet arrayTypeName be the String value of O.[[TypedArrayName]].\nLet elementSize be the Element Size value specified in Table 62 for arrayTypeName.\nLet indexedPosition be (\u211d(index) \u00d7 elementSize) + offset.\nLet elementType be the Element Type value in Table 62 for arrayTypeName.\nPerform SetValueInBuffer(buffer, indexedPosition, elementType, numValue, true, Unordered).\nReturn NormalCompletion(undefined).\n\nSetValueInBuffer ( arrayBuffer, byteIndex, type, value, isTypedArray, order [ , isLittleEndian ] )\n...\n8. Let rawBytes be NumberToRawBytes(type, value, isLittleEndian).\n...\n\nNumberToRawBytes( type, value, isLittleEndian )\n...\n3. Else,\na. Let n be the Number value of the Element Size specified in Table\n[The TypedArray Constructors] for Element Type type.\nb. Let convOp be the abstract operation named in the Conversion Operation\ncolumn in Table 9 for Element Type type.\n\nThe TypedArray Constructors\nElement Type: BigInt64\nConversion Operation: ToBigInt64\n\nToBigInt64 ( argument )\nThe abstract operation ToBigInt64 converts argument to one of 264 integer\nvalues in the range -2^63 through 2^63-1, inclusive.\nThis abstract operation functions as follows:\n1. Let n be ? ToBigInt(argument).\n2. Let int64bit be n modulo 2^64.\n3. If int64bit \u2265 2^63, return int64bit - 2^64; otherwise return int64bit.\n\n", "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/object-arg/bigint-tobiguint64.js", "esid": " sec-typedarray-object", "description": " >Behavior for input array of BigInts\n", "info": " |TypedArray ( object )\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject does not have either a [[TypedArrayName]] or an [[ArrayBufferData]]\ninternal slot.\n...\n8. Repeat, while k < len\n...\nb. Let kValue be ? Get(arrayLike, Pk).\nc. Perform ? Set(O, Pk, kValue, true).\n...\n\n[[Set]] ( P, V, Receiver)\n...\n2. If Type(P) is String and if SameValue(O, Receiver) is true, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\ni. Perform ? IntegerIndexedElementSet(O, numericIndex, V).\nii. Return true.\n...\n\nIntegerIndexedElementSet ( O, index, value )\n\nAssert: O is an Integer-Indexed exotic object.\nIf O.[[ContentType]] is BigInt, let numValue be ? ToBigInt(value).\nOtherwise, let numValue be ? ToNumber(value).\nLet buffer be O.[[ViewedArrayBuffer]].\nIf IsDetachedBuffer(buffer) is false and ! IsValidIntegerIndex(O, index) is true, then\nLet offset be O.[[ByteOffset]].\nLet arrayTypeName be the String value of O.[[TypedArrayName]].\nLet elementSize be the Element Size value specified in Table 62 for arrayTypeName.\nLet indexedPosition be (\u211d(index) \u00d7 elementSize) + offset.\nLet elementType be the Element Type value in Table 62 for arrayTypeName.\nPerform SetValueInBuffer(buffer, indexedPosition, elementType, numValue, true, Unordered).\nReturn NormalCompletion(undefined).\n\nSetValueInBuffer ( arrayBuffer, byteIndex, type, value, isTypedArray, order [ , isLittleEndian ] )\n...\n8. Let rawBytes be NumberToRawBytes(type, value, isLittleEndian).\n...\n\nNumberToRawBytes( type, value, isLittleEndian )\n...\n3. Else,\na. Let n be the Number value of the Element Size specified in Table\n[The TypedArray Constructors] for Element Type type.\nb. Let convOp be the abstract operation named in the Conversion Operation\ncolumn in Table 9 for Element Type type.\n\nThe TypedArray Constructors\nElement Type: BigUint64\nConversion Operation: ToBigUint64\n\nToBigUint64 ( argument )\nThe abstract operation ToBigInt64 converts argument to one of 264 integer\nvalues in the range -2^63 through 2^63-1, inclusive.\nThis abstract operation functions as follows:\n1. Let n be ? ToBigInt(argument).\n2. Let int64bit be n modulo 2^64.\n3. Return int64bit.\n\n", "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/object-arg/boolean-tobigint.js", "esid": " sec-typedarray-object", "description": " >Behavior for input array of Booleans\n", "info": " |TypedArray ( object )\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject does not have either a [[TypedArrayName]] or an [[ArrayBufferData]]\ninternal slot.\n...\n8. Repeat, while k < len\n...\nb. Let kValue be ? Get(arrayLike, Pk).\nc. Perform ? Set(O, Pk, kValue, true).\n...\n\n[[Set]] ( P, V, Receiver)\n...\n2. If Type(P) is String and if SameValue(O, Receiver) is true, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\ni. Perform ? IntegerIndexedElementSet(O, numericIndex, V).\nii. Return true.\n...\n\nIntegerIndexedElementSet ( O, index, value )\n\nAssert: O is an Integer-Indexed exotic object.\nIf O.[[ContentType]] is BigInt, let numValue be ? ToBigInt(value).\nOtherwise, let numValue be ? ToNumber(value).\nLet buffer be O.[[ViewedArrayBuffer]].\nIf IsDetachedBuffer(buffer) is false and ! IsValidIntegerIndex(O, index) is true, then\nLet offset be O.[[ByteOffset]].\nLet arrayTypeName be the String value of O.[[TypedArrayName]].\nLet elementSize be the Element Size value specified in Table 62 for arrayTypeName.\nLet indexedPosition be (\u211d(index) \u00d7 elementSize) + offset.\nLet elementType be the Element Type value in Table 62 for arrayTypeName.\nPerform SetValueInBuffer(buffer, indexedPosition, elementType, numValue, true, Unordered).\nReturn NormalCompletion(undefined).\n\nToBigInt ( argument )\nObject, Apply the following steps:\n1. Let prim be ? ToPrimitive(argument, hint Number).\n2. Return the value that prim corresponds to in Table [BigInt Conversions]\n\nBigInt Conversions\nArgument Type: Boolean\nResult: Return 1n if prim is true and 0n if prim is false.\n\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/object-arg/custom-proto-access-throws.js", "esid": " sec-typedarray-object", "description": " >Return abrupt completion getting newTarget's prototype\n", "info": " |22.2.4.4 TypedArray ( object )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject does not have either a [[TypedArrayName]] or an [[ArrayBufferData]]\ninternal slot.\n\n...\n3. Let O be ? AllocateTypedArray(TypedArray.[[TypedArrayConstructorName]],\nNewTarget, \"%TypedArrayPrototype%\").\n...\n\n22.2.4.2.1 Runtime Semantics: AllocateTypedArray (constructorName, newTarget,\ndefaultProto [ , length ])\n\n1. Let proto be ? GetPrototypeFromConstructor(newTarget, defaultProto).\n...\n\n9.1.15 GetPrototypeFromConstructor ( constructor, intrinsicDefaultProto )\n\n...\n3. Let proto be ? Get(constructor, \"prototype\").\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Reflect", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/object-arg/iterating-throws.js", "esid": " sec-typedarray-object", "description": " >Return abrupt from iterating object argument\n", "info": " |22.2.4.4 TypedArray ( object )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject does not have either a [[TypedArrayName]] or an [[ArrayBufferData]]\ninternal slot.\n\n...\n4. Let arrayLike be ? IterableToArrayLike(object).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/object-arg/iterator-not-callable-throws.js", "esid": " sec-typedarray-object", "description": " >Return abrupt when object @@iterator is not callable\n", "info": " |22.2.4.4 TypedArray ( object )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject does not have either a [[TypedArrayName]] or an [[ArrayBufferData]]\ninternal slot.\n\n...\n4. Let arrayLike be ? IterableToArrayLike(object).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol.iterator", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/object-arg/iterator-throws.js", "esid": " sec-typedarray-object", "description": " >Return abrupt from getting object @@iterator\n", "info": " |22.2.4.4 TypedArray ( object )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject does not have either a [[TypedArrayName]] or an [[ArrayBufferData]]\ninternal slot.\n\n...\n4. Let arrayLike be ? IterableToArrayLike(object).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol.iterator", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/object-arg/length-excessive-throws.js", "esid": " sec-typedarray-object", "description": " >Return abrupt from allocating array buffer with excessive length\n", "info": " |22.2.4.4 TypedArray ( object )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject does not have either a [[TypedArrayName]] or an [[ArrayBufferData]]\ninternal slot.\n\n...\n6. Perform ? AllocateTypedArrayBuffer(O, len).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/object-arg/length-is-symbol-throws.js", "esid": " sec-typedarray-object", "description": " >Return abrupt from length property as a Symbol on the object argument\n", "info": " |22.2.4.4 TypedArray ( object )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject does not have either a [[TypedArrayName]] or an [[ArrayBufferData]]\ninternal slot.\n\n...\n5. Let len be ? ToLength(? Get(arrayLike, \"length\")).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/object-arg/length-throws.js", "esid": " sec-typedarray-object", "description": " >Return abrupt from getting length property on the object argument\n", "info": " |22.2.4.4 TypedArray ( object )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject does not have either a [[TypedArrayName]] or an [[ArrayBufferData]]\ninternal slot.\n\n...\n5. Let len be ? ToLength(? Get(arrayLike, \"length\")).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/object-arg/new-instance-extensibility.js", "esid": " sec-typedarray-object", "description": " >The new typedArray instance from an object argument is extensible\n", "info": " |22.2.4.4 TypedArray ( object )\n\n...\n4. Let O be ? AllocateTypedArray(constructorName, NewTarget,\n\"%TypedArrayPrototype%\").\n...\n\n22.2.4.2.1 Runtime Semantics: AllocateTypedArray (constructorName, newTarget,\ndefaultProto [ , length ])\n\n...\n2. Let obj be IntegerIndexedObjectCreate(proto, \u00ab [[ViewedArrayBuffer]],\n[[TypedArrayName]], [[ByteLength]], [[ByteOffset]], [[ArrayLength]] \u00bb).\n...\n\n9.4.5.7 IntegerIndexedObjectCreate (prototype, internalSlotsList)\n\n...\n11. Set the [[Extensible]] internal slot of A to true.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/object-arg/null-tobigint.js", "esid": " sec-typedarray-object", "description": " >Return abrupt on null\n", "info": " |TypedArray ( object )\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject does not have either a [[TypedArrayName]] or an [[ArrayBufferData]]\ninternal slot.\n...\n8. Repeat, while k < len\n...\nb. Let kValue be ? Get(arrayLike, Pk).\nc. Perform ? Set(O, Pk, kValue, true).\n...\n\n[[Set]] ( P, V, Receiver)\n...\n2. If Type(P) is String and if SameValue(O, Receiver) is true, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\ni. Perform ? IntegerIndexedElementSet(O, numericIndex, V).\nii. Return true.\n...\n\nIntegerIndexedElementSet ( O, index, value )\n\nAssert: O is an Integer-Indexed exotic object.\nIf O.[[ContentType]] is BigInt, let numValue be ? ToBigInt(value).\nOtherwise, let numValue be ? ToNumber(value).\nLet buffer be O.[[ViewedArrayBuffer]].\nIf IsDetachedBuffer(buffer) is false and ! IsValidIntegerIndex(O, index) is true, then\nLet offset be O.[[ByteOffset]].\nLet arrayTypeName be the String value of O.[[TypedArrayName]].\nLet elementSize be the Element Size value specified in Table 62 for arrayTypeName.\nLet indexedPosition be (\u211d(index) \u00d7 elementSize) + offset.\nLet elementType be the Element Type value in Table 62 for arrayTypeName.\nPerform SetValueInBuffer(buffer, indexedPosition, elementType, numValue, true, Unordered).\nReturn NormalCompletion(undefined).\n\nToBigInt ( argument )\nObject, Apply the following steps:\n1. Let prim be ? ToPrimitive(argument, hint Number).\n2. Return the value that prim corresponds to in Table [BigInt Conversions]\n\nBigInt Conversions\nArgument Type: Null\nResult: Throw a TypeError exception.\n\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/object-arg/number-tobigint.js", "esid": " sec-typedarray-object", "description": " >Return abrupt on Number\n", "info": " |22.2.4.4 TypedArray ( object )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject does not have either a [[TypedArrayName]] or an [[ArrayBufferData]]\ninternal slot.\n\n...\n8. Repeat, while k < len\n...\nb. Let kValue be ? Get(arrayLike, Pk).\nc. Perform ? Set(O, Pk, kValue, true).\n...\n\n9.4.5.5 [[Set]] ( P, V, Receiver)\n\n...\n2. If Type(P) is String and if SameValue(O, Receiver) is true, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\ni. Perform ? IntegerIndexedElementSet(O, numericIndex, V).\nii. Return true.\n...\n\nIntegerIndexedElementSet ( O, index, value )\n\nAssert: O is an Integer-Indexed exotic object.\nIf O.[[ContentType]] is BigInt, let numValue be ? ToBigInt(value).\nOtherwise, let numValue be ? ToNumber(value).\nLet buffer be O.[[ViewedArrayBuffer]].\nIf IsDetachedBuffer(buffer) is false and ! IsValidIntegerIndex(O, index) is true, then\nLet offset be O.[[ByteOffset]].\nLet arrayTypeName be the String value of O.[[TypedArrayName]].\nLet elementSize be the Element Size value specified in Table 62 for arrayTypeName.\nLet indexedPosition be (\u211d(index) \u00d7 elementSize) + offset.\nLet elementType be the Element Type value in Table 62 for arrayTypeName.\nPerform SetValueInBuffer(buffer, indexedPosition, elementType, numValue, true, Unordered).\nReturn NormalCompletion(undefined).\n\nToBigInt ( argument )\n\nObject, Apply the following steps:\n1. Let prim be ? ToPrimitive(argument, hint Number).\n2. Return the value that prim corresponds to in Table [BigInt Conversions]\n\nBigInt Conversions\nArgument Type: Number\nResult: Throw a TypeError exception.\n\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/object-arg/string-nan-tobigint.js", "esid": " sec-typedarray-object", "description": " >Return abrupt String, when StringToBigInt returns NaN\n", "info": " |22.2.4.4 TypedArray ( object )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject does not have either a [[TypedArrayName]] or an [[ArrayBufferData]]\ninternal slot.\n\n...\n8. Repeat, while k < len\n...\nb. Let kValue be ? Get(arrayLike, Pk).\nc. Perform ? Set(O, Pk, kValue, true).\n...\n\n9.4.5.5 [[Set]] ( P, V, Receiver)\n\n...\n2. If Type(P) is String and if SameValue(O, Receiver) is true, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\ni. Perform ? IntegerIndexedElementSet(O, numericIndex, V).\nii. Return true.\n...\n\nIntegerIndexedElementSet ( O, index, value )\n\nAssert: O is an Integer-Indexed exotic object.\nIf O.[[ContentType]] is BigInt, let numValue be ? ToBigInt(value).\nOtherwise, let numValue be ? ToNumber(value).\nLet buffer be O.[[ViewedArrayBuffer]].\nIf IsDetachedBuffer(buffer) is false and ! IsValidIntegerIndex(O, index) is true, then\nLet offset be O.[[ByteOffset]].\nLet arrayTypeName be the String value of O.[[TypedArrayName]].\nLet elementSize be the Element Size value specified in Table 62 for arrayTypeName.\nLet indexedPosition be (\u211d(index) \u00d7 elementSize) + offset.\nLet elementType be the Element Type value in Table 62 for arrayTypeName.\nPerform SetValueInBuffer(buffer, indexedPosition, elementType, numValue, true, Unordered).\nReturn NormalCompletion(undefined).\n\nToBigInt ( argument )\n\nObject, Apply the following steps:\n1. Let prim be ? ToPrimitive(argument, hint Number).\n2. Return the value that prim corresponds to in Table [BigInt Conversions]\n\nBigInt Conversions\nArgument Type: String\nResult:\n1. Let n be StringToBigInt(prim).\n2. If n is NaN, throw a SyntaxError exception.\n3. Return n.\n\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/object-arg/string-tobigint.js", "esid": " sec-typedarray-object", "description": " >Behavior for input array of Strings, successful conversion\n", "info": " |22.2.4.4 TypedArray ( object )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject does not have either a [[TypedArrayName]] or an [[ArrayBufferData]]\ninternal slot.\n\n...\n8. Repeat, while k < len\n...\nb. Let kValue be ? Get(arrayLike, Pk).\nc. Perform ? Set(O, Pk, kValue, true).\n...\n\n9.4.5.5 [[Set]] ( P, V, Receiver)\n\n...\n2. If Type(P) is String and if SameValue(O, Receiver) is true, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\ni. Perform ? IntegerIndexedElementSet(O, numericIndex, V).\nii. Return true.\n...\n\nIntegerIndexedElementSet ( O, index, value )\n\nAssert: O is an Integer-Indexed exotic object.\nIf O.[[ContentType]] is BigInt, let numValue be ? ToBigInt(value).\nOtherwise, let numValue be ? ToNumber(value).\nLet buffer be O.[[ViewedArrayBuffer]].\nIf IsDetachedBuffer(buffer) is false and ! IsValidIntegerIndex(O, index) is true, then\nLet offset be O.[[ByteOffset]].\nLet arrayTypeName be the String value of O.[[TypedArrayName]].\nLet elementSize be the Element Size value specified in Table 62 for arrayTypeName.\nLet indexedPosition be (\u211d(index) \u00d7 elementSize) + offset.\nLet elementType be the Element Type value in Table 62 for arrayTypeName.\nPerform SetValueInBuffer(buffer, indexedPosition, elementType, numValue, true, Unordered).\nReturn NormalCompletion(undefined).\n\nToBigInt ( argument )\n\nObject, Apply the following steps:\n1. Let prim be ? ToPrimitive(argument, hint Number).\n2. Return the value that prim corresponds to in Table [BigInt Conversions]\n\nBigInt Conversions\nArgument Type: String\nResult:\n1. Let n be StringToBigInt(prim).\n2. If n is NaN, throw a SyntaxError exception.\n3. Return n.\n\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/object-arg/symbol-tobigint.js", "esid": " sec-typedarray-object", "description": " >Return abrupt on Symbol\n", "info": " |22.2.4.4 TypedArray ( object )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject does not have either a [[TypedArrayName]] or an [[ArrayBufferData]]\ninternal slot.\n\n...\n8. Repeat, while k < len\n...\nb. Let kValue be ? Get(arrayLike, Pk).\nc. Perform ? Set(O, Pk, kValue, true).\n...\n\n9.4.5.5 [[Set]] ( P, V, Receiver)\n\n...\n2. If Type(P) is String and if SameValue(O, Receiver) is true, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\ni. Perform ? IntegerIndexedElementSet(O, numericIndex, V).\nii. Return true.\n...\n\nIntegerIndexedElementSet ( O, index, value )\n\nAssert: O is an Integer-Indexed exotic object.\nIf O.[[ContentType]] is BigInt, let numValue be ? ToBigInt(value).\nOtherwise, let numValue be ? ToNumber(value).\nLet buffer be O.[[ViewedArrayBuffer]].\nIf IsDetachedBuffer(buffer) is false and ! IsValidIntegerIndex(O, index) is true, then\nLet offset be O.[[ByteOffset]].\nLet arrayTypeName be the String value of O.[[TypedArrayName]].\nLet elementSize be the Element Size value specified in Table 62 for arrayTypeName.\nLet indexedPosition be (\u211d(index) \u00d7 elementSize) + offset.\nLet elementType be the Element Type value in Table 62 for arrayTypeName.\nPerform SetValueInBuffer(buffer, indexedPosition, elementType, numValue, true, Unordered).\nReturn NormalCompletion(undefined).\n\nToBigInt ( argument )\n\nObject, Apply the following steps:\n1. Let prim be ? ToPrimitive(argument, hint Number).\n2. Return the value that prim corresponds to in Table [BigInt Conversions]\n\nBigInt Conversions\nArgument Type: Symbol\nResult: Throw a TypeError exception.\n\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray", "Symbol"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/object-arg/throws-from-property.js", "esid": " sec-typedarray-object", "description": " >Return abrupt from getting object property\n", "info": " |22.2.4.4 TypedArray ( object )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject does not have either a [[TypedArrayName]] or an [[ArrayBufferData]]\ninternal slot.\n\n...\n8. Repeat, while k < len\n...\nb. Let kValue be ? Get(arrayLike, Pk).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/object-arg/throws-setting-obj-to-primitive-typeerror.js", "esid": " sec-typedarray-object", "description": " >Throw TypeError from @@toPrimitive returning an Object when setting a property\n", "info": " |22.2.4.4 TypedArray ( object )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject does not have either a [[TypedArrayName]] or an [[ArrayBufferData]]\ninternal slot.\n\n...\n8. Repeat, while k < len\n...\nb. Let kValue be ? Get(arrayLike, Pk).\nc. Perform ? Set(O, Pk, kValue, true).\n...\n\n9.4.5.5 [[Set]] ( P, V, Receiver)\n\n...\n2. If Type(P) is String and if SameValue(O, Receiver) is true, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\ni. Perform ? IntegerIndexedElementSet(O, numericIndex, V).\nii. Return true.\n...\n\nIntegerIndexedElementSet ( O, index, value )\n\nAssert: O is an Integer-Indexed exotic object.\nIf O.[[ContentType]] is BigInt, let numValue be ? ToBigInt(value).\nOtherwise, let numValue be ? ToNumber(value).\nLet buffer be O.[[ViewedArrayBuffer]].\nIf IsDetachedBuffer(buffer) is false and ! IsValidIntegerIndex(O, index) is true, then\nLet offset be O.[[ByteOffset]].\nLet arrayTypeName be the String value of O.[[TypedArrayName]].\nLet elementSize be the Element Size value specified in Table 62 for arrayTypeName.\nLet indexedPosition be (\u211d(index) \u00d7 elementSize) + offset.\nLet elementType be the Element Type value in Table 62 for arrayTypeName.\nPerform SetValueInBuffer(buffer, indexedPosition, elementType, numValue, true, Unordered).\nReturn NormalCompletion(undefined).\n\nToBigInt ( argument )\n\nObject, Apply the following steps:\n1. Let prim be ? ToPrimitive(argument, hint Number).\n2. Return the value that prim corresponds to in Table 10.\n\n7.1.1 ToPrimitive ( input [ , PreferredType ] )\n\n...\n4. Let exoticToPrim be ? GetMethod(input, @@toPrimitive).\n5. If exoticToPrim is not undefined, then\na. Let result be ? Call(exoticToPrim, input, \u00ab hint \u00bb).\nb. If Type(result) is not Object, return result.\nc. Throw a TypeError exception.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol.toPrimitive", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/object-arg/throws-setting-obj-to-primitive.js", "esid": " sec-typedarray-object", "description": " >Return abrupt from @@toPrimitive when setting a property\n", "info": " |22.2.4.4 TypedArray ( object )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject does not have either a [[TypedArrayName]] or an [[ArrayBufferData]]\ninternal slot.\n\n...\n8. Repeat, while k < len\n...\nb. Let kValue be ? Get(arrayLike, Pk).\nc. Perform ? Set(O, Pk, kValue, true).\n...\n\n9.4.5.5 [[Set]] ( P, V, Receiver)\n\n...\n2. If Type(P) is String and if SameValue(O, Receiver) is true, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\ni. Perform ? IntegerIndexedElementSet(O, numericIndex, V).\nii. Return true.\n...\n\nIntegerIndexedElementSet ( O, index, value )\n\nAssert: O is an Integer-Indexed exotic object.\nIf O.[[ContentType]] is BigInt, let numValue be ? ToBigInt(value).\nOtherwise, let numValue be ? ToNumber(value).\nLet buffer be O.[[ViewedArrayBuffer]].\nIf IsDetachedBuffer(buffer) is false and ! IsValidIntegerIndex(O, index) is true, then\nLet offset be O.[[ByteOffset]].\nLet arrayTypeName be the String value of O.[[TypedArrayName]].\nLet elementSize be the Element Size value specified in Table 62 for arrayTypeName.\nLet indexedPosition be (\u211d(index) \u00d7 elementSize) + offset.\nLet elementType be the Element Type value in Table 62 for arrayTypeName.\nPerform SetValueInBuffer(buffer, indexedPosition, elementType, numValue, true, Unordered).\nReturn NormalCompletion(undefined).\n\nToBigInt ( argument )\n\nObject, Apply the following steps:\n1. Let prim be ? ToPrimitive(argument, hint Number).\n2. Return the value that prim corresponds to in Table 10.\n\n7.1.1 ToPrimitive ( input [ , PreferredType ] )\n\n...\n4. Let exoticToPrim be ? GetMethod(input, @@toPrimitive).\n5. If exoticToPrim is not undefined, then\na. Let result be ? Call(exoticToPrim, input, \u00ab hint \u00bb).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol.toPrimitive", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/object-arg/throws-setting-obj-tostring.js", "esid": " sec-typedarray-object", "description": " >Return abrupt from toString() when setting a property\n", "info": " |22.2.4.4 TypedArray ( object )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject does not have either a [[TypedArrayName]] or an [[ArrayBufferData]]\ninternal slot.\n\n...\n8. Repeat, while k < len\n...\nb. Let kValue be ? Get(arrayLike, Pk).\nc. Perform ? Set(O, Pk, kValue, true).\n...\n\n9.4.5.5 [[Set]] ( P, V, Receiver)\n\n...\n2. If Type(P) is String and if SameValue(O, Receiver) is true, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\ni. Perform ? IntegerIndexedElementSet(O, numericIndex, V).\nii. Return true.\n...\n\nIntegerIndexedElementSet ( O, index, value )\n\nAssert: O is an Integer-Indexed exotic object.\nIf O.[[ContentType]] is BigInt, let numValue be ? ToBigInt(value).\nOtherwise, let numValue be ? ToNumber(value).\nLet buffer be O.[[ViewedArrayBuffer]].\nIf IsDetachedBuffer(buffer) is false and ! IsValidIntegerIndex(O, index) is true, then\nLet offset be O.[[ByteOffset]].\nLet arrayTypeName be the String value of O.[[TypedArrayName]].\nLet elementSize be the Element Size value specified in Table 62 for arrayTypeName.\nLet indexedPosition be (\u211d(index) \u00d7 elementSize) + offset.\nLet elementType be the Element Type value in Table 62 for arrayTypeName.\nPerform SetValueInBuffer(buffer, indexedPosition, elementType, numValue, true, Unordered).\nReturn NormalCompletion(undefined).\n\nToBigInt ( argument )\n\nObject, Apply the following steps:\n1. Let prim be ? ToPrimitive(argument, hint Number).\n2. Return the value that prim corresponds to in Table 10.\n\n7.1.1 ToPrimitive ( input [ , PreferredType ] )\n\n...\n4. Let exoticToPrim be ? GetMethod(input, @@toPrimitive).\n5. If exoticToPrim is not undefined, then\na. Let result be ? Call(exoticToPrim, input, \u00ab hint \u00bb).\nb. If Type(result) is not Object, return result.\nc. Throw a TypeError exception.\n...\n7. Return ? OrdinaryToPrimitive(input, hint).\n\nOrdinaryToPrimitive\n\n...\n5. For each name in methodNames in List order, do\na. Let method be ? Get(O, name).\nb. If IsCallable(method) is true, then\ni. Let result be ? Call(method, O).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/object-arg/throws-setting-obj-valueof-typeerror.js", "esid": " sec-typedarray-object", "description": " >Throw TypeError from OrdinaryToPrimitive when setting a property\n", "info": " |22.2.4.4 TypedArray ( object )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject does not have either a [[TypedArrayName]] or an [[ArrayBufferData]]\ninternal slot.\n\n...\n8. Repeat, while k < len\n...\nb. Let kValue be ? Get(arrayLike, Pk).\nc. Perform ? Set(O, Pk, kValue, true).\n...\n\n9.4.5.5 [[Set]] ( P, V, Receiver)\n\n...\n2. If Type(P) is String and if SameValue(O, Receiver) is true, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\ni. Perform ? IntegerIndexedElementSet(O, numericIndex, V).\nii. Return true.\n...\n\nIntegerIndexedElementSet ( O, index, value )\n\nAssert: O is an Integer-Indexed exotic object.\nIf O.[[ContentType]] is BigInt, let numValue be ? ToBigInt(value).\nOtherwise, let numValue be ? ToNumber(value).\nLet buffer be O.[[ViewedArrayBuffer]].\nIf IsDetachedBuffer(buffer) is false and ! IsValidIntegerIndex(O, index) is true, then\nLet offset be O.[[ByteOffset]].\nLet arrayTypeName be the String value of O.[[TypedArrayName]].\nLet elementSize be the Element Size value specified in Table 62 for arrayTypeName.\nLet indexedPosition be (\u211d(index) \u00d7 elementSize) + offset.\nLet elementType be the Element Type value in Table 62 for arrayTypeName.\nPerform SetValueInBuffer(buffer, indexedPosition, elementType, numValue, true, Unordered).\nReturn NormalCompletion(undefined).\n\nToBigInt ( argument )\n\nObject, Apply the following steps:\n1. Let prim be ? ToPrimitive(argument, hint Number).\n2. Return the value that prim corresponds to in Table 10.\n\n7.1.1 ToPrimitive ( input [ , PreferredType ] )\n\n...\n4. Let exoticToPrim be ? GetMethod(input, @@toPrimitive).\n5. If exoticToPrim is not undefined, then\na. Let result be ? Call(exoticToPrim, input, \u00ab hint \u00bb).\nb. If Type(result) is not Object, return result.\nc. Throw a TypeError exception.\n...\n7. Return ? OrdinaryToPrimitive(input, hint).\n\nOrdinaryToPrimitive\n\n...\n5. For each name in methodNames in List order, do\na. Let method be ? Get(O, name).\nb. If IsCallable(method) is true, then\ni. Let result be ? Call(method, O).\nii. If Type(result) is not Object, return result.\n6. Throw a TypeError exception.\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/object-arg/throws-setting-obj-valueof.js", "esid": " sec-typedarray-object", "description": " >Return abrupt from valueOf() when setting a property\n", "info": " |22.2.4.4 TypedArray ( object )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject does not have either a [[TypedArrayName]] or an [[ArrayBufferData]]\ninternal slot.\n\n...\n8. Repeat, while k < len\n...\nb. Let kValue be ? Get(arrayLike, Pk).\nc. Perform ? Set(O, Pk, kValue, true).\n...\n\n9.4.5.5 [[Set]] ( P, V, Receiver)\n\n...\n2. If Type(P) is String and if SameValue(O, Receiver) is true, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\ni. Perform ? IntegerIndexedElementSet(O, numericIndex, V).\nii. Return true.\n...\n\nIntegerIndexedElementSet ( O, index, value )\n\nAssert: O is an Integer-Indexed exotic object.\nIf O.[[ContentType]] is BigInt, let numValue be ? ToBigInt(value).\nOtherwise, let numValue be ? ToNumber(value).\nLet buffer be O.[[ViewedArrayBuffer]].\nIf IsDetachedBuffer(buffer) is false and ! IsValidIntegerIndex(O, index) is true, then\nLet offset be O.[[ByteOffset]].\nLet arrayTypeName be the String value of O.[[TypedArrayName]].\nLet elementSize be the Element Size value specified in Table 62 for arrayTypeName.\nLet indexedPosition be (\u211d(index) \u00d7 elementSize) + offset.\nLet elementType be the Element Type value in Table 62 for arrayTypeName.\nPerform SetValueInBuffer(buffer, indexedPosition, elementType, numValue, true, Unordered).\nReturn NormalCompletion(undefined).\n\nToBigInt ( argument )\n\nObject, Apply the following steps:\n1. Let prim be ? ToPrimitive(argument, hint Number).\n2. Return the value that prim corresponds to in Table 10.\n\n7.1.1 ToPrimitive ( input [ , PreferredType ] )\n\n...\n4. Let exoticToPrim be ? GetMethod(input, @@toPrimitive).\n5. If exoticToPrim is not undefined, then\na. Let result be ? Call(exoticToPrim, input, \u00ab hint \u00bb).\nb. If Type(result) is not Object, return result.\nc. Throw a TypeError exception.\n...\n7. Return ? OrdinaryToPrimitive(input, hint).\n\nOrdinaryToPrimitive\n\n...\n5. For each name in methodNames in List order, do\na. Let method be ? Get(O, name).\nb. If IsCallable(method) is true, then\ni. Let result be ? Call(method, O).\nii. If Type(result) is not Object, return result.\n6. Throw a TypeError exception.\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/object-arg/throws-setting-property.js", "esid": " sec-typedarray-object", "description": " >Return abrupt from setting property\n", "info": " |22.2.4.4 TypedArray ( object )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject does not have either a [[TypedArrayName]] or an [[ArrayBufferData]]\ninternal slot.\n\n...\n8. Repeat, while k < len\n...\nb. Let kValue be ? Get(arrayLike, Pk).\nc. Perform ? Set(O, Pk, kValue, true).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/object-arg/throws-setting-symbol-property.js", "esid": " sec-typedarray-object", "description": " >Return abrupt from setting property\n", "info": " |22.2.4.4 TypedArray ( object )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject does not have either a [[TypedArrayName]] or an [[ArrayBufferData]]\ninternal slot.\n\n...\n8. Repeat, while k < len\n...\nb. Let kValue be ? Get(arrayLike, Pk).\nc. Perform ? Set(O, Pk, kValue, true).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/object-arg/undefined-newtarget-throws.js", "esid": " sec-typedarray-object", "description": " >Throws a TypeError if NewTarget is undefined.\n", "info": " |22.2.4.4 TypedArray ( object )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject does not have either a [[TypedArrayName]] or an [[ArrayBufferData]]\ninternal slot.\n\n...\n2. If NewTarget is undefined, throw a TypeError exception.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/object-arg/undefined-tobigint.js", "esid": " sec-typedarray-object", "description": " >Return abrupt on undefined\n", "info": " |TypedArray ( object )\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject does not have either a [[TypedArrayName]] or an [[ArrayBufferData]]\ninternal slot.\n...\n8. Repeat, while k < len\n...\nb. Let kValue be ? Get(arrayLike, Pk).\nc. Perform ? Set(O, Pk, kValue, true).\n...\n\n[[Set]] ( P, V, Receiver)\n...\n2. If Type(P) is String and if SameValue(O, Receiver) is true, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\ni. Perform ? IntegerIndexedElementSet(O, numericIndex, V).\nii. Return true.\n...\n\nIntegerIndexedElementSet ( O, index, value )\n\nAssert: O is an Integer-Indexed exotic object.\nIf O.[[ContentType]] is BigInt, let numValue be ? ToBigInt(value).\nOtherwise, let numValue be ? ToNumber(value).\nLet buffer be O.[[ViewedArrayBuffer]].\nIf IsDetachedBuffer(buffer) is false and ! IsValidIntegerIndex(O, index) is true, then\nLet offset be O.[[ByteOffset]].\nLet arrayTypeName be the String value of O.[[TypedArrayName]].\nLet elementSize be the Element Size value specified in Table 62 for arrayTypeName.\nLet indexedPosition be (\u211d(index) \u00d7 elementSize) + offset.\nLet elementType be the Element Type value in Table 62 for arrayTypeName.\nPerform SetValueInBuffer(buffer, indexedPosition, elementType, numValue, true, Unordered).\nReturn NormalCompletion(undefined).\n\nToBigInt ( argument )\nObject, Apply the following steps:\n1. Let prim be ? ToPrimitive(argument, hint Number).\n2. Return the value that prim corresponds to in Table [BigInt Conversions]\n\nBigInt Conversions\nArgument Type: Undefined\nResult: Throw a TypeError exception.\n\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/object-arg/use-custom-proto-if-object.js", "esid": " sec-typedarray-object", "description": " >Use prototype from new target if it's an Object\n", "info": " |22.2.4.4 TypedArray ( object )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject does not have either a [[TypedArrayName]] or an [[ArrayBufferData]]\ninternal slot.\n\n...\n3. Let O be ? AllocateTypedArray(TypedArray.[[TypedArrayConstructorName]],\nNewTarget, \"%TypedArrayPrototype%\").\n...\n\n22.2.4.2.1 Runtime Semantics: AllocateTypedArray (constructorName, newTarget,\ndefaultProto [ , length ])\n\n1. Let proto be ? GetPrototypeFromConstructor(newTarget, defaultProto).\n2. Let obj be IntegerIndexedObjectCreate (proto, \u00ab[[ViewedArrayBuffer]],\n[[TypedArrayName]], [[ByteLength]], [[ByteOffset]], [[ArrayLength]]\u00bb ).\n...\n\n9.4.5.7 IntegerIndexedObjectCreate (prototype, internalSlotsList)\n\n...\n10. Set the [[Prototype]] internal slot of A to prototype.\n...\n12. Return A.\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Reflect", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/object-arg/use-default-proto-if-custom-proto-is-not-object.js", "esid": " sec-typedarray-object", "description": " >Use prototype from %TypedArray% if newTarget's prototype is not an Object\n", "info": " |22.2.4.4 TypedArray ( object )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject does not have either a [[TypedArrayName]] or an [[ArrayBufferData]]\ninternal slot.\n\n...\n3. Let O be ? AllocateTypedArray(TypedArray.[[TypedArrayConstructorName]],\nNewTarget, \"%TypedArrayPrototype%\").\n...\n\n22.2.4.2.1 Runtime Semantics: AllocateTypedArray (constructorName, newTarget,\ndefaultProto [ , length ])\n\n1. Let proto be ? GetPrototypeFromConstructor(newTarget, defaultProto).\n2. Let obj be IntegerIndexedObjectCreate (proto, \u00ab[[ViewedArrayBuffer]],\n[[TypedArrayName]], [[ByteLength]], [[ByteOffset]], [[ArrayLength]]\u00bb ).\n...\n\n9.4.5.7 IntegerIndexedObjectCreate (prototype, internalSlotsList)\n\n...\n10. Set the [[Prototype]] internal slot of A to prototype.\n...\n12. Return A.\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/typedarray-arg/custom-proto-access-throws.js", "esid": " sec-typedarray-typedarray", "description": " >Return abrupt completion getting newTarget's prototype\n", "info": " |22.2.4.3 TypedArray ( typedArray )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has a [[TypedArrayName]] internal slot.\n\n...\n4. Let O be ? AllocateTypedArray(constructorName, NewTarget,\n%TypedArrayPrototype%).\n...\n\n22.2.4.2.1 Runtime Semantics: AllocateTypedArray (constructorName, newTarget,\ndefaultProto [ , length ])\n\n1. Let proto be ? GetPrototypeFromConstructor(newTarget, defaultProto).\n...\n\n9.1.15 GetPrototypeFromConstructor ( constructor, intrinsicDefaultProto )\n\n...\n3. Let proto be ? Get(constructor, \"prototype\").\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Reflect", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/typedarray-arg/new-instance-extensibility.js", "esid": " sec-typedarray-typedarray", "description": " >The new typedArray instance from a typedArray argument is extensible\n", "info": " |22.2.4.3 TypedArray ( typedArray )\n\n...\n4. Let O be ? AllocateTypedArray(constructorName, NewTarget,\n\"%TypedArrayPrototype%\").\n...\n\n22.2.4.2.1 Runtime Semantics: AllocateTypedArray (constructorName, newTarget,\ndefaultProto [ , length ])\n\n...\n2. Let obj be IntegerIndexedObjectCreate(proto, \u00ab [[ViewedArrayBuffer]],\n[[TypedArrayName]], [[ByteLength]], [[ByteOffset]], [[ArrayLength]] \u00bb).\n...\n\n9.4.5.7 IntegerIndexedObjectCreate (prototype, internalSlotsList)\n\n...\n11. Set the [[Extensible]] internal slot of A to true.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/typedarray-arg/other-ctor-buffer-ctor-access-throws.js", "esid": " sec-typedarray-typedarray", "description": " >Return abrupt completion from getting typedArray argument's buffer.constructor\n", "info": " |22.2.4.3 TypedArray ( typedArray )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has a [[TypedArrayName]] internal slot.\n\n...\n18. Else,\na. Let bufferConstructor be ? SpeciesConstructor(srcData, %ArrayBuffer%).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n...\n2. Let C be ? Get(O, \"constructor\").\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/typedarray-arg/other-ctor-buffer-ctor-custom-species.js", "esid": " sec-typedarray-typedarray", "description": " >Use default ArrayBuffer constructor on undefined buffer.constructor.@@species\n", "info": " |22.2.4.3 TypedArray ( typedArray )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has a [[TypedArrayName]] internal slot.\n\n...\n18. Else,\na. Let bufferConstructor be ? SpeciesConstructor(srcData, %ArrayBuffer%).\nb. Let data be ? AllocateArrayBuffer(bufferConstructor, byteLength).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n...\n5. Let S be ? Get(C, @@species).\n6. If S is either undefined or null, return defaultConstructor.\n7. If IsConstructor(S) is true, return S.\n...\n\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol.species", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/typedarray-arg/other-ctor-buffer-ctor-not-object-throws.js", "esid": " sec-typedarray-typedarray", "description": " >Return abrupt completion from typedArray argument's buffer.constructor's value\n", "info": " |22.2.4.3 TypedArray ( typedArray )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has a [[TypedArrayName]] internal slot.\n\n...\n18. Else,\na. Let bufferConstructor be ? SpeciesConstructor(srcData, %ArrayBuffer%).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n...\n2. Let C be ? Get(O, \"constructor\").\n...\n4. If Type(C) is not Object, throw a TypeError exception.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/typedarray-arg/other-ctor-buffer-ctor-species-access-throws.js", "esid": " sec-typedarray-typedarray", "description": " >Return abrupt from getting typedArray argument's buffer.constructor.@@species\n", "info": " |22.2.4.3 TypedArray ( typedArray )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has a [[TypedArrayName]] internal slot.\n\n...\n18. Else,\na. Let bufferConstructor be ? SpeciesConstructor(srcData, %ArrayBuffer%).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n...\n5. Let S be ? Get(C, @@species).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol.species", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/typedarray-arg/other-ctor-buffer-ctor-species-not-ctor-throws.js", "esid": " sec-typedarray-typedarray", "description": " >Return abrupt from buffer.constructor.@@species.prototype\n", "info": " |22.2.4.3 TypedArray ( typedArray )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has a [[TypedArrayName]] internal slot.\n\n...\n18. Else,\na. Let bufferConstructor be ? SpeciesConstructor(srcData, %ArrayBuffer%).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n...\n5. Let S be ? Get(C, @@species).\n6. If S is either undefined or null, return defaultConstructor.\n7. If IsConstructor(S) is true, return S.\n8. Throw a TypeError exception.\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol.species", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/typedarray-arg/other-ctor-buffer-ctor-species-null.js", "esid": " sec-typedarray-typedarray", "description": " >Use default ArrayBuffer constructor on null buffer.constructor.@@species\n", "info": " |22.2.4.3 TypedArray ( typedArray )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has a [[TypedArrayName]] internal slot.\n\n...\n18. Else,\na. Let bufferConstructor be ? SpeciesConstructor(srcData, %ArrayBuffer%).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n...\n5. Let S be ? Get(C, @@species).\n6. If S is either undefined or null, return defaultConstructor.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol.species", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/typedarray-arg/other-ctor-buffer-ctor-species-prototype-throws.js", "esid": " sec-typedarray-typedarray", "description": " >Return abrupt from buffer.constructor.@@species.prototype\n", "info": " |22.2.4.3 TypedArray ( typedArray )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has a [[TypedArrayName]] internal slot.\n\n...\n18. Else,\na. Let bufferConstructor be ? SpeciesConstructor(srcData, %ArrayBuffer%).\nb. Let data be ? AllocateArrayBuffer(bufferConstructor, byteLength).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n...\n5. Let S be ? Get(C, @@species).\n6. If S is either undefined or null, return defaultConstructor.\n7. If IsConstructor(S) is true, return S.\n...\n\n24.1.1.1 AllocateArrayBuffer ( constructor, byteLength )\n\n...\n1. Let obj be ? OrdinaryCreateFromConstructor(constructor,\n\"%ArrayBufferPrototype%\", \u00ab [[ArrayBufferData]], [[ArrayBufferByteLength]] \u00bb )\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol.species", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/typedarray-arg/other-ctor-buffer-ctor-species-undefined.js", "esid": " sec-typedarray-typedarray", "description": " >Use default ArrayBuffer constructor on undefined buffer.constructor.@@species\n", "info": " |22.2.4.3 TypedArray ( typedArray )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has a [[TypedArrayName]] internal slot.\n\n...\n18. Else,\na. Let bufferConstructor be ? SpeciesConstructor(srcData, %ArrayBuffer%).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n...\n5. Let S be ? Get(C, @@species).\n6. If S is either undefined or null, return defaultConstructor.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol.species", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/typedarray-arg/other-ctor-returns-new-typedarray.js", "esid": " sec-typedarray-typedarray", "description": " Instantiate a new TypedArray with an existing TypedArray", "info": " |22.2.4.3 TypedArray ( typedArray )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has a [[TypedArrayName]] internal slot.\n\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/typedarray-arg/same-ctor-buffer-ctor-access-throws.js", "esid": " sec-typedarray-typedarray", "description": " >Return abrupt completion from getting typedArray argument's buffer.constructor\n", "info": " |22.2.4.3 TypedArray ( typedArray )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has a [[TypedArrayName]] internal slot.\n\n...\n17. If SameValue(elementType, srcType) is true, then\na. Let data be ? CloneArrayBuffer(srcData, srcByteOffset).\n...\n\n24.1.1.4 CloneArrayBuffer ( srcBuffer, srcByteOffset [ , cloneConstructor ] )\n\n...\n2. If cloneConstructor is not present, then\na. Let cloneConstructor be ? SpeciesConstructor(srcBuffer, %ArrayBuffer%).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n...\n2. Let C be ? Get(O, \"constructor\").\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/typedarray-arg/same-ctor-buffer-ctor-species-custom.js", "esid": " sec-typedarray-typedarray", "description": " >Use default ArrayBuffer constructor on undefined buffer.constructor.@@species\n", "info": " |22.2.4.3 TypedArray ( typedArray )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has a [[TypedArrayName]] internal slot.\n\n...\n17. If SameValue(elementType, srcType) is true, then\na. Let data be ? CloneArrayBuffer(srcData, srcByteOffset).\n...\n\n24.1.1.4 CloneArrayBuffer ( srcBuffer, srcByteOffset [ , cloneConstructor ] )\n\n...\n2. If cloneConstructor is not present, then\na. Let cloneConstructor be ? SpeciesConstructor(srcBuffer, %ArrayBuffer%).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n...\n5. Let S be ? Get(C, @@species).\n6. If S is either undefined or null, return defaultConstructor.\n7. If IsConstructor(S) is true, return S.\n...\n\n24.1.1.4 CloneArrayBuffer ( srcBuffer, srcByteOffset [ , cloneConstructor ] )\n\n...\n8. Let targetBuffer be ? AllocateArrayBuffer(cloneConstructor, cloneLength).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol.species", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/typedarray-arg/same-ctor-buffer-ctor-species-not-ctor.js", "esid": " sec-typedarray-typedarray", "description": " >Return abrupt from buffer.constructor.@@species.prototype\n", "info": " |22.2.4.3 TypedArray ( typedArray )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has a [[TypedArrayName]] internal slot.\n\n...\n17. If SameValue(elementType, srcType) is true, then\na. Let data be ? CloneArrayBuffer(srcData, srcByteOffset).\n...\n\n24.1.1.4 CloneArrayBuffer ( srcBuffer, srcByteOffset [ , cloneConstructor ] )\n\n...\n2. If cloneConstructor is not present, then\na. Let cloneConstructor be ? SpeciesConstructor(srcBuffer, %ArrayBuffer%).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n...\n5. Let S be ? Get(C, @@species).\n6. If S is either undefined or null, return defaultConstructor.\n7. If IsConstructor(S) is true, return S.\n8. Throw a TypeError exception.\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol.species", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/typedarray-arg/same-ctor-buffer-ctor-species-null.js", "esid": " sec-typedarray-typedarray", "description": " >Use default ArrayBuffer constructor on null buffer.constructor.@@species\n", "info": " |22.2.4.3 TypedArray ( typedArray )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has a [[TypedArrayName]] internal slot.\n\n...\n17. If SameValue(elementType, srcType) is true, then\na. Let data be ? CloneArrayBuffer(srcData, srcByteOffset).\n...\n\n24.1.1.4 CloneArrayBuffer ( srcBuffer, srcByteOffset [ , cloneConstructor ] )\n\n...\n2. If cloneConstructor is not present, then\na. Let cloneConstructor be ? SpeciesConstructor(srcBuffer, %ArrayBuffer%).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n...\n5. Let S be ? Get(C, @@species).\n6. If S is either undefined or null, return defaultConstructor.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol.species", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/typedarray-arg/same-ctor-buffer-ctor-species-prototype-throws.js", "esid": " sec-typedarray-typedarray", "description": " >Return abrupt from buffer.constructor.@@species.prototype\n", "info": " |22.2.4.3 TypedArray ( typedArray )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has a [[TypedArrayName]] internal slot.\n\n...\n17. If SameValue(elementType, srcType) is true, then\na. Let data be ? CloneArrayBuffer(srcData, srcByteOffset).\n...\n\n24.1.1.4 CloneArrayBuffer ( srcBuffer, srcByteOffset [ , cloneConstructor ] )\n\n...\n2. If cloneConstructor is not present, then\na. Let cloneConstructor be ? SpeciesConstructor(srcBuffer, %ArrayBuffer%).\n...\n8. Let targetBuffer be ? AllocateArrayBuffer(cloneConstructor, cloneLength).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n...\n5. Let S be ? Get(C, @@species).\n6. If S is either undefined or null, return defaultConstructor.\n7. If IsConstructor(S) is true, return S.\n...\n\n24.1.1.1 AllocateArrayBuffer ( constructor, byteLength )\n\n...\n1. Let obj be ? OrdinaryCreateFromConstructor(constructor,\n\"%ArrayBufferPrototype%\", \u00ab [[ArrayBufferData]], [[ArrayBufferByteLength]] \u00bb )\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol.species", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/typedarray-arg/same-ctor-buffer-ctor-species-throws.js", "esid": " sec-typedarray-typedarray", "description": " >Return abrupt from getting typedArray argument's buffer.constructor.@@species\n", "info": " |22.2.4.3 TypedArray ( typedArray )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has a [[TypedArrayName]] internal slot.\n\n...\n17. If SameValue(elementType, srcType) is true, then\na. Let data be ? CloneArrayBuffer(srcData, srcByteOffset).\n...\n\n24.1.1.4 CloneArrayBuffer ( srcBuffer, srcByteOffset [ , cloneConstructor ] )\n\n...\n2. If cloneConstructor is not present, then\na. Let cloneConstructor be ? SpeciesConstructor(srcBuffer, %ArrayBuffer%).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n...\n5. Let S be ? Get(C, @@species).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol.species", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/typedarray-arg/same-ctor-buffer-ctor-species-undefined.js", "esid": " sec-typedarray-typedarray", "description": " >Use default ArrayBuffer constructor on undefined buffer.constructor.@@species\n", "info": " |22.2.4.3 TypedArray ( typedArray )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has a [[TypedArrayName]] internal slot.\n\n...\n17. If SameValue(elementType, srcType) is true, then\na. Let data be ? CloneArrayBuffer(srcData, srcByteOffset).\n...\n\n24.1.1.4 CloneArrayBuffer ( srcBuffer, srcByteOffset [ , cloneConstructor ] )\n\n...\n2. If cloneConstructor is not present, then\na. Let cloneConstructor be ? SpeciesConstructor(srcBuffer, %ArrayBuffer%).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n...\n5. Let S be ? Get(C, @@species).\n6. If S is either undefined or null, return defaultConstructor.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol.species", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/typedarray-arg/same-ctor-buffer-ctor-value-not-obj-throws.js", "esid": " sec-typedarray-typedarray", "description": " >Return abrupt completion from typedArray argument's buffer.constructor's value\n", "info": " |22.2.4.3 TypedArray ( typedArray )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has a [[TypedArrayName]] internal slot.\n\n...\n17. If SameValue(elementType, srcType) is true, then\na. Let data be ? CloneArrayBuffer(srcData, srcByteOffset).\n...\n\n24.1.1.4 CloneArrayBuffer ( srcBuffer, srcByteOffset [ , cloneConstructor ] )\n\n...\n2. If cloneConstructor is not present, then\na. Let cloneConstructor be ? SpeciesConstructor(srcBuffer, %ArrayBuffer%).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n...\n2. Let C be ? Get(O, \"constructor\").\n...\n4. If Type(C) is not Object, throw a TypeError exception.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/typedarray-arg/same-ctor-returns-new-cloned-typedarray.js", "esid": " sec-typedarray-typedarray", "description": " >Same typedArray ctor argument returns a new cloned typedArray\n", "info": " |22.2.4.3 TypedArray ( typedArray )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has a [[TypedArrayName]] internal slot.\n\n...\n17. If SameValue(elementType, srcType) is true, then\na. Let data be ? CloneArrayBuffer(srcData, srcByteOffset).\n...\n23. Return O.\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/typedarray-arg/src-typedarray-not-big-throws.js", "esid": " sec-typedarray-typedarray", "description": " >If typedArray constructor argument is not a Big(U)Int, throw\n", "info": " |22.2.4.3 TypedArray ( typedArray )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has a [[TypedArrayName]] internal slot.\n\n...\n19. Else,\n...\nc. If one of srcType and elementType contains the substring \"Big\" and the other\ndoes not, throw a TypeError exception.\n\n", "includes": ["testBigIntTypedArray.js", "testTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors-bigint/typedarray-arg/undefined-newtarget-throws.js", "esid": " sec-typedarray-typedarray", "description": " >Throws a TypeError if NewTarget is undefined.\n", "info": " |22.2.4.3 TypedArray ( typedArray )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has a [[TypedArrayName]] internal slot.\n\n...\n2. If NewTarget is undefined, throw a TypeError exception.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/from/BigInt/arylk-get-length-error.js", "esid": " sec-%typedarray%.from", "description": " Returns error produced by accessing array-like's length", "info": " |22.2.2.1 %TypedArray%.from ( source [ , mapfn [ , thisArg ] ] )\n\n...\n7. Let len be ? ToLength(? Get(arrayLike, \"length\")).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/from/BigInt/arylk-to-length-error.js", "esid": " sec-%typedarray%.from", "description": " Returns error produced by interpreting length property as a length", "info": " |22.2.2.1 %TypedArray%.from ( source [ , mapfn [ , thisArg ] ] )\n\n...\n7. Let len be ? ToLength(? Get(arrayLike, \"length\")).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/from/BigInt/custom-ctor-does-not-instantiate-ta-throws.js", "esid": " sec-%typedarray%.from", "description": " >Custom constructor needs to instantiate a TypedArray\n", "info": " |22.2.2.1 %TypedArray%.from ( source [ , mapfn [ , thisArg ] ] )\n\n...\n8. Let targetObj be ? TypedArrayCreate(C, \u00ablen\u00bb).\n...\n\n22.2.4.6 TypedArrayCreate ( constructor, argumentList )\n\n1. Let newTypedArray be ? Construct(constructor, argumentList).\n2. Perform ? ValidateTypedArray(newTypedArray).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/from/BigInt/custom-ctor-returns-other-instance.js", "esid": " sec-%typedarray%.from", "description": " >Custom constructor can return any TypedArray instance with higher or same\nlength\n", "info": " |%TypedArray%.from ( source [ , mapfn [ , thisArg ] ] )\n\n...\n7. If usingIterator is not undefined, then\na. Let values be ? IterableToList(source, usingIterator).\nb. Let len be the number of elements in values.\nc. Let targetObj be ? TypedArrayCreate(C, \u00ablen\u00bb).\n...\n10. Let len be ? ToLength(? Get(arrayLike, \"length\")).\n11. Let targetObj be ? TypedArrayCreate(C, \u00ab len \u00bb).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol.iterator", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/from/BigInt/custom-ctor-returns-smaller-instance-throws.js", "esid": " sec-%typedarray%.from", "description": " >Throws a TypeError if a custom `this` returns a smaller instance\n", "info": " |%TypedArray%.from ( source [ , mapfn [ , thisArg ] ] )\n\n...\n7. If usingIterator is not undefined, then\na. Let values be ? IterableToList(source, usingIterator).\nb. Let len be the number of elements in values.\nc. Let targetObj be ? TypedArrayCreate(C, \u00ablen\u00bb).\n...\n10. Let len be ? ToLength(? Get(arrayLike, \"length\")).\n11. Let targetObj be ? TypedArrayCreate(C, \u00ab len \u00bb).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol.iterator", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/from/BigInt/custom-ctor.js", "esid": " sec-%typedarray%.from", "description": " >Calls and return abrupt completion from custom constructor\n", "info": " |22.2.2.1 %TypedArray%.from ( source [ , mapfn [ , thisArg ] ] )\n\n...\n8. Let targetObj be ? TypedArrayCreate(C, \u00ablen\u00bb).\n...\n\n22.2.4.6 TypedArrayCreate ( constructor, argumentList )\n\n1. Let newTypedArray be ? Construct(constructor, argumentList).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/from/BigInt/inherited.js", "esid": " sec-%typedarray%.from", "description": " >`from` is %TypedArray%.from\n", "info": " |22.2.1 The %TypedArray% Intrinsic Object\n\nThe %TypedArray% intrinsic object is a constructor function object that all of\nthe TypedArray constructor object inherit from.\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/from/BigInt/invoked-as-func.js", "esid": " sec-%typedarray%.from", "description": " >\"from\" cannot be invoked as a function\n", "info": " |22.2.2.1 %TypedArray%.from ( source [ , mapfn [ , thisArg ] ] )\n\n1. Let C be the this value.\n2. If IsConstructor(C) is false, throw a TypeError exception.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/from/BigInt/iter-access-error.js", "esid": " sec-%typedarray%.from", "description": " Returns error produced by accessing @@iterator", "info": " |22.2.2.1 %TypedArray%.from ( source [ , mapfn [ , thisArg ] ] )\n\n...\n6. Let arrayLike be ? IterableToArrayLike(source).\n...\n\n22.2.2.1.1 Runtime Semantics: IterableToArrayLike( items )\n\n1. Let usingIterator be ? GetMethod(items, @@iterator).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol.iterator", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/from/BigInt/iter-invoke-error.js", "esid": " sec-%typedarray%.from", "description": " Returns error produced by invoking @@iterator", "info": " |22.2.2.1 %TypedArray%.from ( source [ , mapfn [ , thisArg ] ] )\n\n...\n6. Let arrayLike be ? IterableToArrayLike(source).\n...\n\n22.2.2.1.1 Runtime Semantics: IterableToArrayLike( items )\n\n1. Let usingIterator be ? GetMethod(items, @@iterator).\n2. If usingIterator is not undefined, then\na. Let iterator be ? GetIterator(items, usingIterator).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol.iterator", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/from/BigInt/iter-next-error.js", "esid": " sec-%typedarray%.from", "description": " Returns error produced by advancing the iterator", "info": " |22.2.2.1.1 Runtime Semantics: IterableToArrayLike( items )\n\n2. If usingIterator is not undefined, then\n...\nd. Repeat, while next is not false\ni. Let next be ? IteratorStep(iterator).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol.iterator", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/from/BigInt/iter-next-value-error.js", "esid": " sec-%typedarray%.from", "description": " Returns error produced by accessing iterated value", "info": " |22.2.2.1.1 Runtime Semantics: IterableToArrayLike( items )\n\n2. If usingIterator is not undefined, then\n...\nd. Repeat, while next is not false\n...\nii. If next is not false, then\n1. Let nextValue be ? IteratorValue(next).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol.iterator", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/from/BigInt/mapfn-abrupt-completion.js", "esid": " sec-%typedarray%.from", "description": " >Return abrupt from mapfn\n", "info": " |22.2.2.1 %TypedArray%.from ( source [ , mapfn [ , thisArg ] ] )\n\n...\n10. Repeat, while k < len\n...\nc. If mapping is true, then\ni. Let mappedValue be ? Call(mapfn, T, \u00ab kValue, k \u00bb).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/from/BigInt/mapfn-arguments.js", "esid": " sec-%typedarray%.from", "description": " >Assert mapfn arguments\n", "info": " |22.2.2.1 %TypedArray%.from ( source [ , mapfn [ , thisArg ] ] )\n\n...\n10. Repeat, while k < len\n...\nc. If mapping is true, then\ni. Let mappedValue be ? Call(mapfn, T, \u00ab kValue, k \u00bb).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/from/BigInt/mapfn-is-not-callable.js", "esid": " sec-%typedarray%.from", "description": " Throw a TypeError exception is mapfn is not callable", "info": " |22.2.2.1 %TypedArray%.from ( source [ , mapfn [ , thisArg ] ] )\n\n...\n3. If mapfn was supplied and mapfn is not undefined, then\na. If IsCallable(mapfn) is false, throw a TypeError exception.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol", "Symbol.iterator", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/from/BigInt/mapfn-this-with-thisarg.js", "esid": " sec-%typedarray%.from", "description": " >Assert mapfn `this` with thisArg\n", "info": " |22.2.2.1 %TypedArray%.from ( source [ , mapfn [ , thisArg ] ] )\n\n...\n5. If thisArg was supplied, let T be thisArg; else let T be undefined.\n...\n10. Repeat, while k < len\n...\nc. If mapping is true, then\ni. Let mappedValue be ? Call(mapfn, T, \u00ab kValue, k \u00bb).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/from/BigInt/mapfn-this-without-thisarg-non-strict.js", "esid": " sec-%typedarray%.from", "description": " >Assert mapfn `this` without thisArg\n", "info": " |22.2.2.1 %TypedArray%.from ( source [ , mapfn [ , thisArg ] ] )\n\n...\n5. If thisArg was supplied, let T be thisArg; else let T be undefined.\n...\n10. Repeat, while k < len\n...\nc. If mapping is true, then\ni. Let mappedValue be ? Call(mapfn, T, \u00ab kValue, k \u00bb).\n...\n", "includes": ["testBigIntTypedArray.js"], "flags": ["noStrict"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/from/BigInt/mapfn-this-without-thisarg-strict.js", "esid": " sec-%typedarray%.from", "description": " >Assert mapfn `this` without thisArg\n", "info": " |22.2.2.1 %TypedArray%.from ( source [ , mapfn [ , thisArg ] ] )\n\n...\n5. If thisArg was supplied, let T be thisArg; else let T be undefined.\n...\n10. Repeat, while k < len\n...\nc. If mapping is true, then\ni. Let mappedValue be ? Call(mapfn, T, \u00ab kValue, k \u00bb).\n...\n", "includes": ["testBigIntTypedArray.js"], "flags": ["onlyStrict"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/from/BigInt/new-instance-empty.js", "esid": " sec-%typedarray%.from", "description": " >Return a new empty TypedArray\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/from/BigInt/new-instance-from-ordinary-object.js", "esid": " sec-%typedarray%.from", "description": " >Return a new TypedArray from an ordinary object\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Array.prototype.values", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/from/BigInt/new-instance-from-sparse-array.js", "esid": " sec-%typedarray%.from", "description": " >Throws a TypeError casting undefined value from sparse array to BigInt\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/from/BigInt/new-instance-using-custom-ctor.js", "esid": " sec-%typedarray%.from", "description": " >Return a new TypedArray using a custom Constructor\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/from/BigInt/new-instance-with-mapfn.js", "esid": " sec-%typedarray%.from", "description": " >Return a new TypedArray using mapfn\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/from/BigInt/new-instance-without-mapfn.js", "esid": " sec-%typedarray%.from", "description": " >Return a new TypedArray\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/from/BigInt/property-abrupt-completion.js", "esid": " sec-%typedarray%.from", "description": " >Return abrupt from source property\n", "info": " |22.2.2.1 %TypedArray%.from ( source [ , mapfn [ , thisArg ] ] )\n\n...\n10. Repeat, while k < len\n...\nb. Let kValue be ? Get(arrayLike, Pk).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/from/BigInt/set-value-abrupt-completion.js", "esid": " sec-%typedarray%.from", "description": " >Return abrupt from setting a value on the new typedarray\n", "info": " |22.2.2.1 %TypedArray%.from ( source [ , mapfn [ , thisArg ] ] )\n\n...\n10. Repeat, while k < len\n...\nc. If mapping is true, then\ni. Let mappedValue be ? Call(mapfn, T, \u00ab kValue, k \u00bb).\nd. Else, let mappedValue be kValue.\ne. Perform ? Set(targetObj, Pk, mappedValue, true).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/from/BigInt/source-value-is-symbol-throws.js", "esid": " sec-%typedarray%.from", "description": " >Throws a TypeError if argument is a Symbol\n", "info": " |IntegerIndexedElementSet ( O, index, value )\n\nAssert: O is an Integer-Indexed exotic object.\nIf O.[[ContentType]] is BigInt, let numValue be ? ToBigInt(value).\nOtherwise, let numValue be ? ToNumber(value).\nLet buffer be O.[[ViewedArrayBuffer]].\nIf IsDetachedBuffer(buffer) is false and ! IsValidIntegerIndex(O, index) is true, then\nLet offset be O.[[ByteOffset]].\nLet arrayTypeName be the String value of O.[[TypedArrayName]].\nLet elementSize be the Element Size value specified in Table 62 for arrayTypeName.\nLet indexedPosition be (\u211d(index) \u00d7 elementSize) + offset.\nLet elementType be the Element Type value in Table 62 for arrayTypeName.\nPerform SetValueInBuffer(buffer, indexedPosition, elementType, numValue, true, Unordered).\nReturn NormalCompletion(undefined).\n\nReturn NormalCompletion(undefined).\n\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/from/BigInt/this-is-not-constructor.js", "esid": " sec-%typedarray%.from", "description": " >Throws a TypeError exception if this is not a constructor\n", "info": " |22.2.2.1 %TypedArray%.from ( source [ , mapfn [ , thisArg ] ] )\n\n1. Let C be the this value.\n2. If IsConstructor(C) is false, throw a TypeError exception.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/DefineOwnProperty/BigInt/desc-value-throws.js", "esid": " sec-integer-indexed-exotic-objects-defineownproperty-p-desc", "description": " >Return abrupt from the evaluation of ToNumber(desc.value)\n", "info": " |9.4.5.3 [[DefineOwnProperty]] ( P, Desc)\n...\n3. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\n...\nxi. If Desc has a [[Value]] field, then\n1. Let value be Desc.[[Value]].\n2. Return ? IntegerIndexedElementSet(O, intIndex, value).\n...\n\nIntegerIndexedElementSet ( O, index, value )\n\nAssert: O is an Integer-Indexed exotic object.\nIf O.[[ContentType]] is BigInt, let numValue be ? ToBigInt(value).\nOtherwise, let numValue be ? ToNumber(value).\nLet buffer be O.[[ViewedArrayBuffer]].\nIf IsDetachedBuffer(buffer) is false and ! IsValidIntegerIndex(O, index) is true, then\nLet offset be O.[[ByteOffset]].\nLet arrayTypeName be the String value of O.[[TypedArrayName]].\nLet elementSize be the Element Size value specified in Table 62 for arrayTypeName.\nLet indexedPosition be (\u211d(index) \u00d7 elementSize) + offset.\nLet elementType be the Element Type value in Table 62 for arrayTypeName.\nPerform SetValueInBuffer(buffer, indexedPosition, elementType, numValue, true, Unordered).\nReturn NormalCompletion(undefined).\n\nReturn NormalCompletion(undefined).\n\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/DefineOwnProperty/BigInt/key-is-greater-than-last-index.js", "esid": " sec-integer-indexed-exotic-objects-defineownproperty-p-desc", "description": " >Returns false if numericIndex is >= [[ArrayLength]]\n", "info": " |9.4.5.3 [[DefineOwnProperty]] ( P, Desc)\n...\n3. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\n...\nii. Let intIndex be numericIndex.\n...\nv. Let length be the value of O's [[ArrayLength]] internal slot.\nvi. If intIndex \u2265 length, return false.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Reflect", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/DefineOwnProperty/BigInt/key-is-lower-than-zero.js", "esid": " sec-integer-indexed-exotic-objects-defineownproperty-p-desc", "description": " >Returns false if numericIndex is < 0\n", "info": " |9.4.5.3 [[DefineOwnProperty]] ( P, Desc)\n...\n3. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\n...\nii. Let intIndex be numericIndex.\niv. If intIndex < 0, return false.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Reflect", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/DefineOwnProperty/BigInt/key-is-minus-zero.js", "esid": " sec-integer-indexed-exotic-objects-defineownproperty-p-desc", "description": " >Returns false if numericIndex is \"-0\"\n", "info": " |9.4.5.3 [[DefineOwnProperty]] ( P, Desc)\n...\n3. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\ni. If IsInteger(numericIndex) is false, return false.\nii. Let intIndex be numericIndex.\niii. If intIndex = -0, return false.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Reflect", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/DefineOwnProperty/BigInt/key-is-not-numeric-index.js", "esid": " sec-integer-indexed-exotic-objects-defineownproperty-p-desc", "description": " >Returns an ordinary property value if key is not a CanonicalNumericIndex\n", "info": " |9.4.5.3 [[DefineOwnProperty]] ( P, Desc)\n...\n3. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\n...\n4. Return OrdinaryDefineOwnProperty(O, P, Desc).\n...\n", "includes": ["testBigIntTypedArray.js", "propertyHelper.js"], "features": ["BigInt", "Reflect", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/DefineOwnProperty/BigInt/key-is-numericindex-accessor-desc.js", "esid": " sec-integer-indexed-exotic-objects-defineownproperty-p-desc", "description": " >Returns false if key is a numeric index and Descriptor is an\nAccessorDescriptor\n", "info": " |9.4.5.3 [[DefineOwnProperty]] ( P, Desc)\n...\n3. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\n...\nvii. If IsAccessorDescriptor(Desc) is true, return false.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Reflect", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/DefineOwnProperty/BigInt/key-is-numericindex-desc-not-enumerable.js", "esid": " sec-integer-indexed-exotic-objects-defineownproperty-p-desc", "description": " >Returns false if key is a numeric index and Desc.[[Enumerable]] is false\n", "info": " |9.4.5.3 [[DefineOwnProperty]] ( P, Desc)\n...\n3. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\n...\nix. If Desc has an [[Enumerable]] field and if Desc.[[Enumerable]] is\nfalse, return false.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Reflect", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/DefineOwnProperty/BigInt/key-is-numericindex-desc-not-writable.js", "esid": " sec-integer-indexed-exotic-objects-defineownproperty-p-desc", "description": " >Returns false if key is a numeric index and Desc.[[Writable]] is false\n", "info": " |9.4.5.3 [[DefineOwnProperty]] ( P, Desc)\n...\n3. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\n...\nx. If Desc has a [[Writable]] field and if Desc.[[Writable]] is false,\nreturn false.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Reflect", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/DefineOwnProperty/BigInt/key-is-symbol.js", "esid": " sec-integer-indexed-exotic-objects-defineownproperty-p-desc", "description": " >Define an ordinary property value if key is a Symbol\n", "info": " |9.4.5.3 [[DefineOwnProperty]] ( P, Desc)\n...\n3. If Type(P) is String, then\n...\n4. Return OrdinaryDefineOwnProperty(O, P, Desc).\n...\n", "includes": ["testBigIntTypedArray.js", "propertyHelper.js"], "features": ["BigInt", "Reflect", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/DefineOwnProperty/BigInt/non-extensible-new-key.js", "esid": " sec-integer-indexed-exotic-objects-defineownproperty-p-desc", "description": " >Can't define a new non-numerical key on a non-extensible instance\n", "info": " |9.4.5.3 [[DefineOwnProperty]] ( P, Desc)\n...\n3. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\n...\n4. Return OrdinaryDefineOwnProperty(O, P, Desc).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Reflect", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/DefineOwnProperty/BigInt/non-extensible-redefine-key.js", "esid": " sec-integer-indexed-exotic-objects-defineownproperty-p-desc", "description": " >Redefine a non-numerical key on a non-extensible instance\n", "info": " |9.4.5.3 [[DefineOwnProperty]] ( P, Desc)\n...\n3. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\n...\n4. Return OrdinaryDefineOwnProperty(O, P, Desc).\n...\n", "includes": ["testBigIntTypedArray.js", "propertyHelper.js"], "features": ["BigInt", "Reflect", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/DefineOwnProperty/BigInt/set-value.js", "esid": " sec-integer-indexed-exotic-objects-defineownproperty-p-desc", "description": " >Set the value and return true\n", "info": " |9.4.5.3 [[DefineOwnProperty]] ( P, Desc)\n...\n3. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\n...\nxi. If Desc has a [[Value]] field, then\n1. Let value be Desc.[[Value]].\n2. Return ? IntegerIndexedElementSet(O, intIndex, value).\n...\n\nIntegerIndexedElementSet ( O, index, value )\n\nAssert: O is an Integer-Indexed exotic object.\nIf O.[[ContentType]] is BigInt, let numValue be ? ToBigInt(value).\nOtherwise, let numValue be ? ToNumber(value).\nLet buffer be O.[[ViewedArrayBuffer]].\nIf IsDetachedBuffer(buffer) is false and ! IsValidIntegerIndex(O, index) is true, then\nLet offset be O.[[ByteOffset]].\nLet arrayTypeName be the String value of O.[[TypedArrayName]].\nLet elementSize be the Element Size value specified in Table 62 for arrayTypeName.\nLet indexedPosition be (\u211d(index) \u00d7 elementSize) + offset.\nLet elementType be the Element Type value in Table 62 for arrayTypeName.\nPerform SetValueInBuffer(buffer, indexedPosition, elementType, numValue, true, Unordered).\nReturn NormalCompletion(undefined).\n\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Reflect", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/DefineOwnProperty/BigInt/this-is-not-extensible.js", "esid": " sec-integer-indexed-exotic-objects-defineownproperty-p-desc", "description": " >Returns false for non-numeric index property value if `this` is not extensible\n", "info": " |9.4.5.3 [[DefineOwnProperty]] ( P, Desc)\n...\n3. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\n...\n4. Return OrdinaryDefineOwnProperty(O, P, Desc).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Reflect", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/DefineOwnProperty/key-is-greater-than-last-index.js", "esid": " sec-integer-indexed-exotic-objects-defineownproperty-p-desc", "description": " >Returns false if numericIndex is >= [[ArrayLength]]\n", "info": " |9.4.5.3 [[DefineOwnProperty]] ( P, Desc)\n...\n3. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\n...\nii. Let intIndex be numericIndex.\n...\nv. Let length be the value of O's [[ArrayLength]] internal slot.\nvi. If intIndex \u2265 length, return false.\n...\n", "includes": ["testTypedArray.js"], "features": ["Reflect", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/DefineOwnProperty/key-is-lower-than-zero.js", "esid": " sec-integer-indexed-exotic-objects-defineownproperty-p-desc", "description": " >Returns false if numericIndex is < 0\n", "info": " |9.4.5.3 [[DefineOwnProperty]] ( P, Desc)\n...\n3. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\n...\nii. Let intIndex be numericIndex.\niv. If intIndex < 0, return false.\n...\n", "includes": ["testTypedArray.js"], "features": ["Reflect", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/DefineOwnProperty/key-is-minus-zero.js", "esid": " sec-integer-indexed-exotic-objects-defineownproperty-p-desc", "description": " >Returns false if numericIndex is \"-0\"\n", "info": " |9.4.5.3 [[DefineOwnProperty]] ( P, Desc)\n...\n3. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\ni. If IsInteger(numericIndex) is false, return false.\nii. Let intIndex be numericIndex.\niii. If intIndex = -0, return false.\n...\n", "includes": ["testTypedArray.js"], "features": ["Reflect", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/Delete/BigInt/indexed-value-ab-non-strict.js", "esid": " sec-integer-indexed-exotic-objects-delete-p", "description": " >Return value from valid numeric index\n", "info": " |[[Delete]] (P)\n\n...\nAssert: IsPropertyKey(P) is true.\nAssert: O is an Integer-Indexed exotic object.\nIf Type(P) is String, then\nLet numericIndex be ! CanonicalNumericIndexString(P).\nIf numericIndex is not undefined, then\nIf IsDetachedBuffer(O.[[ViewedArrayBuffer]]) is true, return true.\nIf ! IsValidIntegerIndex(O, numericIndex) is false, return true.\nReturn false.\n...\n", "flags": ["noStrict"], "includes": ["testBigIntTypedArray.js"], "features": ["align-detached-buffer-semantics-with-web-reality", "BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/Delete/BigInt/indexed-value-ab-strict.js", "esid": " sec-integer-indexed-exotic-objects-delete-p", "description": " >Return value from valid numeric index\n", "info": " |[[Delete]] (P)\n\n...\nAssert: IsPropertyKey(P) is true.\nAssert: O is an Integer-Indexed exotic object.\nIf Type(P) is String, then\nLet numericIndex be ! CanonicalNumericIndexString(P).\nIf numericIndex is not undefined, then\nIf IsDetachedBuffer(O.[[ViewedArrayBuffer]]) is true, return true.\nIf ! IsValidIntegerIndex(O, numericIndex) is false, return true.\nReturn false.\n...\n", "flags": ["onlyStrict"], "includes": ["testBigIntTypedArray.js"], "features": ["align-detached-buffer-semantics-with-web-reality", "BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/Delete/BigInt/key-is-not-minus-zero-non-strict.js", "esid": " sec-integer-indexed-exotic-objects-delete-p", "description": " >Return true if key is a CanonicalNumericIndex and IsValidIntegerIndex(O, numericIndex) is false.\n", "info": " |[[Delete]] (P)\n\n...\nAssert: IsPropertyKey(P) is true.\nAssert: O is an Integer-Indexed exotic object.\nIf Type(P) is String, then\nLet numericIndex be ! CanonicalNumericIndexString(P).\nIf numericIndex is not undefined, then\nIf IsDetachedBuffer(O.[[ViewedArrayBuffer]]) is true, return true.\nIf ! IsValidIntegerIndex(O, numericIndex) is false, return true.\nReturn false.\n\n...\n\nIntegerIndexedElementGet ( O, index )\n\n...\nIf ! IsValidIntegerIndex(O, index) is false, return undefined.\n...\n", "flags": ["noStrict"], "includes": ["testBigIntTypedArray.js"], "features": ["align-detached-buffer-semantics-with-web-reality", "BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/Delete/BigInt/key-is-not-minus-zero-strict.js", "esid": " sec-integer-indexed-exotic-objects-delete-p", "description": " >Return true if key is a CanonicalNumericIndex and IsValidIntegerIndex(O, numericIndex) is false.\n", "info": " |[[Delete]] (P)\n\n...\nAssert: IsPropertyKey(P) is true.\nAssert: O is an Integer-Indexed exotic object.\nIf Type(P) is String, then\nLet numericIndex be ! CanonicalNumericIndexString(P).\nIf numericIndex is not undefined, then\nIf IsDetachedBuffer(O.[[ViewedArrayBuffer]]) is true, return true.\nIf ! IsValidIntegerIndex(O, numericIndex) is false, return true.\nReturn false.\n\n...\n\nIntegerIndexedElementGet ( O, index )\n\n...\nIf ! IsValidIntegerIndex(O, index) is false, return undefined.\n...\n", "flags": ["onlyStrict"], "includes": ["testBigIntTypedArray.js"], "features": ["align-detached-buffer-semantics-with-web-reality", "BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/Delete/BigInt/key-is-not-numeric-index-get-throws.js", "esid": " sec-integer-indexed-exotic-objects-delete-p", "description": " >Use OrdinaryDelete if key is not a CanonicalNumericIndex\n", "info": " |[[Delete]] (P)\n\n...\nAssert: IsPropertyKey(P) is true.\nAssert: O is an Integer-Indexed exotic object.\nIf Type(P) is String, then\nLet numericIndex be ! CanonicalNumericIndexString(P).\nIf numericIndex is not undefined, then\nIf IsDetachedBuffer(O.[[ViewedArrayBuffer]]) is true, return true.\nIf ! IsValidIntegerIndex(O, numericIndex) is false, return true.\nReturn false.\n...\nReturn ? OrdinaryDelete(O, P).\n\n", "includes": ["testBigIntTypedArray.js"], "features": ["align-detached-buffer-semantics-with-web-reality", "BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/Delete/BigInt/key-is-not-numeric-index-non-strict.js", "esid": " sec-integer-indexed-exotic-objects-delete-p", "description": " >Use OrdinaryDelete if key is not a CanonicalNumericIndex\n", "info": " |[[Delete]] (P)\n\n...\nAssert: IsPropertyKey(P) is true.\nAssert: O is an Integer-Indexed exotic object.\nIf Type(P) is String, then\nLet numericIndex be ! CanonicalNumericIndexString(P).\nIf numericIndex is not undefined, then\nIf IsDetachedBuffer(O.[[ViewedArrayBuffer]]) is true, return true.\nIf ! IsValidIntegerIndex(O, numericIndex) is false, return true.\nReturn false.\n...\nReturn ? OrdinaryDelete(O, P).\n", "flags": ["noStrict"], "includes": ["testBigIntTypedArray.js"], "features": ["align-detached-buffer-semantics-with-web-reality", "BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/Delete/BigInt/key-is-not-numeric-index-strict.js", "esid": " sec-integer-indexed-exotic-objects-delete-p", "description": " >Use OrdinaryDelete if key is not a CanonicalNumericIndex\n", "info": " |[[Delete]] (P)\n\n...\nAssert: IsPropertyKey(P) is true.\nAssert: O is an Integer-Indexed exotic object.\nIf Type(P) is String, then\nLet numericIndex be ! CanonicalNumericIndexString(P).\nIf numericIndex is not undefined, then\nIf IsDetachedBuffer(O.[[ViewedArrayBuffer]]) is true, return true.\nIf ! IsValidIntegerIndex(O, numericIndex) is false, return true.\nReturn false.\n...\nReturn ? OrdinaryDelete(O, P).\n", "flags": ["onlyStrict"], "includes": ["testBigIntTypedArray.js"], "features": ["align-detached-buffer-semantics-with-web-reality", "BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/Delete/BigInt/key-is-out-of-bounds-non-strict.js", "esid": " sec-integer-indexed-exotic-objects-delete-p", "description": " >Return true if IsValidIntegerIndex(O, numericIndex) is false.\n", "info": " |[[Delete]] (P)\n\n...\nAssert: IsPropertyKey(P) is true.\nAssert: O is an Integer-Indexed exotic object.\nIf Type(P) is String, then\nLet numericIndex be ! CanonicalNumericIndexString(P).\nIf numericIndex is not undefined, then\nIf IsDetachedBuffer(O.[[ViewedArrayBuffer]]) is true, return true.\nIf ! IsValidIntegerIndex(O, numericIndex) is false, return true.\nReturn false.\n...\nReturn ? OrdinaryDelete(O, P).\n\n", "flags": ["noStrict"], "includes": ["testBigIntTypedArray.js"], "features": ["align-detached-buffer-semantics-with-web-reality", "BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/Delete/BigInt/key-is-out-of-bounds-strict.js", "esid": " sec-integer-indexed-exotic-objects-delete-p", "description": " >Return true if IsValidIntegerIndex(O, numericIndex) is false.\n", "info": " |[[Delete]] (P)\n\n...\nAssert: IsPropertyKey(P) is true.\nAssert: O is an Integer-Indexed exotic object.\nIf Type(P) is String, then\nLet numericIndex be ! CanonicalNumericIndexString(P).\nIf numericIndex is not undefined, then\nIf IsDetachedBuffer(O.[[ViewedArrayBuffer]]) is true, return true.\nIf ! IsValidIntegerIndex(O, numericIndex) is false, return true.\nReturn false.\n...\nReturn ? OrdinaryDelete(O, P).\n\n", "flags": ["onlyStrict"], "includes": ["testBigIntTypedArray.js"], "features": ["align-detached-buffer-semantics-with-web-reality", "BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/Delete/BigInt/key-is-symbol.js", "esid": " sec-integer-indexed-exotic-objects-delete-p", "description": " >Use OrdinaryDelete if key is a Symbol\n", "info": " |[[Delete]] (P)\n\n...\nAssert: IsPropertyKey(P) is true.\nAssert: O is an Integer-Indexed exotic object.\nIf Type(P) is String, then\n...\nReturn ? OrdinaryDelete(O, P).\n\n", "includes": ["testBigIntTypedArray.js"], "features": ["align-detached-buffer-semantics-with-web-reality", "BigInt", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/Get/BigInt/indexed-value-sab.js", "esid": " sec-integer-indexed-exotic-objects-get-p-receiver", "description": " >Return value from valid numeric index, with SharedArrayBuffer\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray", "SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/Get/BigInt/indexed-value.js", "esid": " sec-integer-indexed-exotic-objects-get-p-receiver", "description": " >Return value from valid numeric index\n", "info": " |9.4.5.4 [[Get]] (P, Receiver)\n\n...\n2. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\ni. Return ? IntegerIndexedElementGet(O, numericIndex).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/Get/BigInt/key-is-not-minus-zero.js", "esid": " sec-integer-indexed-exotic-objects-get-p-receiver", "description": " >Return undefined if key is numeric index is -0.\n", "info": " |9.4.5.4 [[Get]] (P, Receiver)\n\n...\n2. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\ni. Return ? IntegerIndexedElementGet(O, numericIndex).\n...\n\n9.4.5.8 IntegerIndexedElementGet ( O, index )\n\n...\n6. If index = -0, return undefined.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/Get/BigInt/key-is-not-numeric-index-get-throws.js", "esid": " sec-integer-indexed-exotic-objects-get-p-receiver", "description": " >Returns abrupt from OrdinaryGet when key is not a numeric index\n", "info": " |9.4.5.4 [[Get]] (P, Receiver)\n\n...\n2. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\n...\n3. Return ? OrdinaryGet(O, P, Receiver).\n\n9.1.8.1 OrdinaryGet (O, P, Receiver)\n\n...\n8. Return ? Call(getter, Receiver).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["align-detached-buffer-semantics-with-web-reality", "BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/Get/BigInt/key-is-not-numeric-index.js", "esid": " sec-integer-indexed-exotic-objects-get-p-receiver", "description": " >Use OrdinaryGet if key is not a CanonicalNumericIndex\n", "info": " |9.4.5.4 [[Get]] (P, Receiver)\n\n...\n2. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\n...\n3. Return ? OrdinaryGet(O, P, Receiver).\n", "includes": ["testBigIntTypedArray.js"], "features": ["align-detached-buffer-semantics-with-web-reality", "BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/Get/BigInt/key-is-out-of-bounds.js", "esid": " sec-integer-indexed-exotic-objects-get-p-receiver", "description": " >Return undefined if key is numeric index < 0 or index \u2265 [[ArrayLength]].\n", "info": " |9.4.5.4 [[Get]] (P, Receiver)\n\n...\n2. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\ni. Return ? IntegerIndexedElementGet(O, numericIndex).\n...\n\n9.4.5.8 IntegerIndexedElementGet ( O, index )\n\n...\n7. Let length be the value of O's [[ArrayLength]] internal slot.\n8. If index < 0 or index \u2265 length, return undefined.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/Get/BigInt/key-is-symbol.js", "esid": " sec-integer-indexed-exotic-objects-get-p-receiver", "description": " >Use OrdinaryGet if key is a Symbol\n", "info": " |9.4.5.4 [[Get]] (P, Receiver)\n\n...\n2. If Type(P) is String, then\n...\n3. Return ? OrdinaryGet(O, P, Receiver).\n", "includes": ["testBigIntTypedArray.js"], "features": ["align-detached-buffer-semantics-with-web-reality", "BigInt", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/GetOwnProperty/BigInt/key-is-minus-zero.js", "esid": " sec-integer-indexed-exotic-objects-getownproperty-p", "description": " Returns undefined when P is -0.", "info": " |9.4.5.1 [[GetOwnProperty]] ( P )\n\n...\n3. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\ni. Let value be ? IntegerIndexedElementGet(O, numericIndex).\nii. If value is undefined, return undefined.\n...\n\n7.1.16 CanonicalNumericIndexString ( argument )\n\n...\n2. If argument is \"-0\", return -0.\n...\n\n9.4.5.8 IntegerIndexedElementGet ( O, index )\n\n...\n6. If index = -0, return undefined.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/GetOwnProperty/BigInt/key-is-not-integer.js", "esid": " sec-integer-indexed-exotic-objects-getownproperty-p", "description": " Returns undefined when P is not an integer.", "info": " |9.4.5.1 [[GetOwnProperty]] ( P )\n\n...\n3. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\ni. Let value be ? IntegerIndexedElementGet(O, numericIndex).\nii. If value is undefined, return undefined.\n...\n\n9.4.5.8 IntegerIndexedElementGet ( O, index )\n\n...\n5. If IsInteger(index) is false, return undefined.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/GetOwnProperty/BigInt/key-is-not-numeric-index.js", "esid": " sec-integer-indexed-exotic-objects-getownproperty-p", "description": " >Returns an ordinary property value if key is not a CanonicalNumericIndex\n", "info": " |9.4.5.1 [[GetOwnProperty]] ( P )\n\n...\n3. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\n...\n4. Return OrdinaryGetOwnProperty(O, P).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/GetOwnProperty/BigInt/key-is-out-of-bounds.js", "esid": " sec-integer-indexed-exotic-objects-getownproperty-p", "description": " Returns undefined when P is not a valid index number.", "info": " |9.4.5.1 [[GetOwnProperty]] ( P )\n\n...\n3. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\ni. Let value be ? IntegerIndexedElementGet(O, numericIndex).\nii. If value is undefined, return undefined.\n...\n\n9.4.5.8 IntegerIndexedElementGet ( O, index )\n\n...\n7. Let length be the value of O's [[ArrayLength]] internal slot.\n8. If index < 0 or index \u2265 length, return undefined.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/GetOwnProperty/BigInt/key-is-symbol.js", "esid": " sec-integer-indexed-exotic-objects-getownproperty-p", "description": " >Returns an ordinary property value if key is a Symbol\n", "info": " |9.4.5.1 [[GetOwnProperty]] ( P )\n\n...\n3. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\n...\n4. Return OrdinaryGetOwnProperty(O, P).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/HasProperty/BigInt/abrupt-from-ordinary-has-parent-hasproperty.js", "esid": " sec-integer-indexed-exotic-objects-hasproperty-p", "description": " Return abrupt from OrdinaryHasProperty parent's [[HasProperty]]", "info": " |9.4.5.2 [[HasProperty]](P)\n\n...\n3. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\ni. Let buffer be O.[[ViewedArrayBuffer]].\nii. If IsDetachedBuffer(buffer) is true, return false.\n...\n\n9.1.7.1 OrdinaryHasProperty (O, P)\n\n...\n2. Let hasOwn be ? O.[[GetOwnProperty]](P).\n3. If hasOwn is not undefined, return true.\n4. Let parent be ? O.[[GetPrototypeOf]]().\n5. If parent is not null, then\na. Return ? parent.[[HasProperty]](P).\n6. Return false.\n", "includes": ["testBigIntTypedArray.js"], "features": ["align-detached-buffer-semantics-with-web-reality", "BigInt", "Reflect", "Proxy", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/HasProperty/BigInt/indexed-value.js", "esid": " sec-integer-indexed-exotic-objects-hasproperty-p", "description": " >Return true for indexed properties\n", "info": " |9.4.5.2 [[HasProperty]](P)\n\n...\n3. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\ni. Let buffer be O.[[ViewedArrayBuffer]].\nii. If IsDetachedBuffer(buffer) is true, return false.\niii. If ! IsValidIntegerIndex(O, numericIndex) is false, return false.\niv. Return true.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["align-detached-buffer-semantics-with-web-reality", "BigInt", "Reflect", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/HasProperty/BigInt/inherited-property.js", "esid": " sec-integer-indexed-exotic-objects-hasproperty-p", "description": " >Find inherited properties if property is not a CanonicalNumericIndexString\n", "info": " |9.4.5.2 [[HasProperty]](P)\n\n...\n3. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\n...\n4. Return ? OrdinaryHasProperty(O, P).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Reflect", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/HasProperty/BigInt/key-is-greater-than-last-index.js", "esid": " sec-integer-indexed-exotic-objects-hasproperty-p", "description": " Return false if P's value is >= this's [[ArrayLength]]", "info": " |9.4.5.2 [[HasProperty]](P)\n\n...\n3. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\n...\niii. If ! IsValidIntegerIndex(O, numericIndex) is false, return false.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["align-detached-buffer-semantics-with-web-reality", "BigInt", "Reflect", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/HasProperty/BigInt/key-is-lower-than-zero.js", "esid": " sec-integer-indexed-exotic-objects-hasproperty-p", "description": " Return false if P's value is < 0", "info": " |9.4.5.2 [[HasProperty]](P)\n\n...\n3. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\n...\niii. If ! IsValidIntegerIndex(O, numericIndex) is false, return false.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["align-detached-buffer-semantics-with-web-reality", "BigInt", "Reflect", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/HasProperty/BigInt/key-is-minus-zero.js", "esid": " sec-integer-indexed-exotic-objects-hasproperty-p", "description": " Return false if P's value is \"-0\"", "info": " |9.4.5.2 [[HasProperty]](P)\n\n...\n3. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\n...\niii. If ! IsValidIntegerIndex(O, numericIndex) is false, return false.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["align-detached-buffer-semantics-with-web-reality", "BigInt", "Reflect", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/HasProperty/BigInt/key-is-not-numeric-index.js", "esid": " sec-integer-indexed-exotic-objects-hasproperty-p", "description": " >Return boolean from properties that are not a CanonicalNumericIndexString\n", "info": " |9.4.5.2 [[HasProperty]](P)\n\n...\n3. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\n...\n4. Return ? OrdinaryHasProperty(O, P).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Reflect", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/HasProperty/BigInt/key-is-symbol.js", "esid": " sec-integer-indexed-exotic-objects-hasproperty-p", "description": " >Return boolean from Symbol properties\n", "info": " |9.4.5.2 [[HasProperty]](P)\n\n...\n3. If Type(P) is String, then\n...\n4. Return ? OrdinaryHasProperty(O, P).\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Reflect", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/OwnPropertyKeys/BigInt/integer-indexes-and-string-and-symbol-keys-.js", "esid": " sec-integer-indexed-exotic-objects-ownpropertykeys", "description": " >Return integer index + non numeric string keys\n", "info": " |9.4.5.6 [[OwnPropertyKeys]] ()\n\n...\n3. Let len be the value of O's [[ArrayLength]] internal slot.\n4. For each integer i starting with 0 such that i < len, in ascending order,\na. Add ! ToString(i) as the last element of keys.\n...\n", "includes": ["testBigIntTypedArray.js", "compareArray.js"], "features": ["BigInt", "Reflect", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/OwnPropertyKeys/BigInt/integer-indexes-and-string-keys.js", "esid": " sec-integer-indexed-exotic-objects-ownpropertykeys", "description": " >Return integer index + non numeric string keys\n", "info": " |9.4.5.6 [[OwnPropertyKeys]] ()\n\n...\n3. Let len be the value of O's [[ArrayLength]] internal slot.\n4. For each integer i starting with 0 such that i < len, in ascending order,\na. Add ! ToString(i) as the last element of keys.\n...\n", "includes": ["testBigIntTypedArray.js", "compareArray.js"], "features": ["BigInt", "Reflect", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/OwnPropertyKeys/BigInt/integer-indexes.js", "esid": " sec-integer-indexed-exotic-objects-ownpropertykeys", "description": " >Return keys\n", "info": " |9.4.5.6 [[OwnPropertyKeys]] ()\n\n...\n3. Let len be the value of O's [[ArrayLength]] internal slot.\n4. For each integer i starting with 0 such that i < len, in ascending order,\na. Add ! ToString(i) as the last element of keys.\n...\n", "includes": ["testBigIntTypedArray.js", "compareArray.js"], "features": ["BigInt", "Reflect", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/OwnPropertyKeys/BigInt/not-enumerable-keys.js", "esid": " sec-integer-indexed-exotic-objects-ownpropertykeys", "description": " >List not-enumerable own keys\n", "info": " |9.4.5.6 [[OwnPropertyKeys]] ()\n\n...\n3. Let len be the value of O's [[ArrayLength]] internal slot.\n4. For each integer i starting with 0 such that i < len, in ascending order,\na. Add ! ToString(i) as the last element of keys.\n...\n", "includes": ["testBigIntTypedArray.js", "compareArray.js"], "features": ["BigInt", "Reflect", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/Set/BigInt/bigint-tobigint64.js", "esid": " sec-assignment-operators-runtime-semantics-evaluation", "description": " >Behavior for input array of BigInts\n", "info": " |Runtime Semantics: Evaluation\nAssignmentExpression : LeftHandSideExpression = AssignmentExpression\n1. If LeftHandSideExpression is neither an ObjectLiteral nor an ArrayLiteral, then\n...\nf. Perform ? PutValue(lref, rval).\n...\n\nPutValue ( V, W )\n...\n6. Else if IsPropertyReference(V) is true, then\na. If HasPrimitiveBase(V) is true, then\ni. Assert: In this case, base will never be undefined or null.\nii. Set base to ! ToObject(base).\nb. Let succeeded be ? base.[[Set]](GetReferencedName(V), W, GetThisValue(V)).\nc. If succeeded is false and IsStrictReference(V) is true, throw a TypeError\nexception.\nd. Return.\n\n[[Set]] ( P, V, Receiver )\nWhen the [[Set]] internal method of an Integer-Indexed exotic object O is\ncalled with property key P, value V, and ECMAScript language value Receiver,\nthe following steps are taken:\n1. Assert: IsPropertyKey(P) is true.\n2. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\ni. Return ? IntegerIndexedElementSet(O, numericIndex, V).\n\nIntegerIndexedElementSet ( O, index, value )\n5. If arrayTypeName is \"BigUint64Array\" or \"BigInt64Array\",\nlet numValue be ? ToBigInt(value).\n...\n16. Perform SetValueInBuffer(buffer, indexedPosition, elementType, numValue, true, \"Unordered\").\n17. Return true.\n\nSetValueInBuffer ( arrayBuffer, byteIndex, type, value, isTypedArray, order [ , isLittleEndian ] )\n...\n8. Let rawBytes be NumberToRawBytes(type, value, isLittleEndian).\n...\n\nNumberToRawBytes( type, value, isLittleEndian )\n...\n3. Else,\na. Let n be the Number value of the Element Size specified in Table\n[The TypedArray Constructors] for Element Type type.\nb. Let convOp be the abstract operation named in the Conversion Operation\ncolumn in Table 9 for Element Type type.\n\nThe TypedArray Constructors\nElement Type: BigInt64\nConversion Operation: ToBigInt64\n\nToBigInt64 ( argument )\nThe abstract operation ToBigInt64 converts argument to one of 264 integer\nvalues in the range -2^63 through 2^63-1, inclusive.\nThis abstract operation functions as follows:\n1. Let n be ? ToBigInt(argument).\n2. Let int64bit be n modulo 2^64.\n3. If int64bit \u2265 2^63, return int64bit - 2^64; otherwise return int64bit.\n\n", "features": ["align-detached-buffer-semantics-with-web-reality", "BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/Set/BigInt/bigint-tobiguint64.js", "esid": " sec-assignment-operators-runtime-semantics-evaluation", "description": " >Behavior for input array of BigInts\n", "info": " |Runtime Semantics: Evaluation\nAssignmentExpression : LeftHandSideExpression = AssignmentExpression\n1. If LeftHandSideExpression is neither an ObjectLiteral nor an ArrayLiteral, then\n...\nf. Perform ? PutValue(lref, rval).\n...\n\nPutValue ( V, W )\n...\n6. Else if IsPropertyReference(V) is true, then\na. If HasPrimitiveBase(V) is true, then\ni. Assert: In this case, base will never be undefined or null.\nii. Set base to ! ToObject(base).\nb. Let succeeded be ? base.[[Set]](GetReferencedName(V), W, GetThisValue(V)).\nc. If succeeded is false and IsStrictReference(V) is true, throw a TypeError\nexception.\nd. Return.\n\n[[Set]] ( P, V, Receiver )\nWhen the [[Set]] internal method of an Integer-Indexed exotic object O is\ncalled with property key P, value V, and ECMAScript language value Receiver,\nthe following steps are taken:\n1. Assert: IsPropertyKey(P) is true.\n2. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\ni. Return ? IntegerIndexedElementSet(O, numericIndex, V).\n\nIntegerIndexedElementSet ( O, index, value )\n5. If arrayTypeName is \"BigUint64Array\" or \"BigInt64Array\",\nlet numValue be ? ToBigInt(value).\n...\n16. Perform SetValueInBuffer(buffer, indexedPosition, elementType, numValue, true, \"Unordered\").\n17. Return true.\n\nSetValueInBuffer ( arrayBuffer, byteIndex, type, value, isTypedArray, order [ , isLittleEndian ] )\n...\n8. Let rawBytes be NumberToRawBytes(type, value, isLittleEndian).\n...\n\nNumberToRawBytes( type, value, isLittleEndian )\n...\n3. Else,\na. Let n be the Number value of the Element Size specified in Table\n[The TypedArray Constructors] for Element Type type.\nb. Let convOp be the abstract operation named in the Conversion Operation\ncolumn in Table 9 for Element Type type.\n\nThe TypedArray Constructors\nElement Type: BigUint64\nConversion Operation: ToBigUint64\n\nToBigUint64 ( argument )\nThe abstract operation ToBigInt64 converts argument to one of 264 integer\nvalues in the range -2^63 through 2^63-1, inclusive.\nThis abstract operation functions as follows:\n1. Let n be ? ToBigInt(argument).\n2. Let int64bit be n modulo 2^64.\n3. Return int64bit.\n\n", "features": ["align-detached-buffer-semantics-with-web-reality", "BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/Set/BigInt/boolean-tobigint.js", "esid": " sec-assignment-operators-runtime-semantics-evaluation", "description": " >Behavior for assigning Booleans to BigInt TypedArray\n", "info": " |Runtime Semantics: Evaluation\nAssignmentExpression : LeftHandSideExpression = AssignmentExpression\n1. If LeftHandSideExpression is neither an ObjectLiteral nor an ArrayLiteral, then\n...\nf. Perform ? PutValue(lref, rval).\n...\n\nPutValue ( V, W )\n...\n6. Else if IsPropertyReference(V) is true, then\na. If HasPrimitiveBase(V) is true, then\ni. Assert: In this case, base will never be undefined or null.\nii. Set base to ! ToObject(base).\nb. Let succeeded be ? base.[[Set]](GetReferencedName(V), W, GetThisValue(V)).\nc. If succeeded is false and IsStrictReference(V) is true, throw a TypeError\nexception.\nd. Return.\n\n[[Set]] ( P, V, Receiver )\nWhen the [[Set]] internal method of an Integer-Indexed exotic object O is\ncalled with property key P, value V, and ECMAScript language value Receiver,\nthe following steps are taken:\n1. Assert: IsPropertyKey(P) is true.\n2. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\ni. Return ? IntegerIndexedElementSet(O, numericIndex, V).\n\nIntegerIndexedElementSet ( O, index, value )\n5. If arrayTypeName is \"BigUint64Array\" or \"BigInt64Array\",\nlet numValue be ? ToBigInt(value).\n...\n\nToBigInt ( argument )\nObject, Apply the following steps:\n1. Let prim be ? ToPrimitive(argument, hint Number).\n2. Return the value that prim corresponds to in Table [BigInt Conversions]\n\nBigInt Conversions\nArgument Type: Boolean\nResult: Return 1n if prim is true and 0n if prim is false.\n\n", "includes": ["testBigIntTypedArray.js"], "features": ["align-detached-buffer-semantics-with-web-reality", "BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/Set/BigInt/indexed-value.js", "esid": " sec-integer-indexed-exotic-objects-set-p-v-receiver", "description": " >Returns true after setting value\n", "info": " |9.4.5.5 [[Set]] ( P, V, Receiver)\n\n...\n2. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\ni. Perform ? IntegerIndexedElementSet(O, numericIndex, V).\nii. Return true.\n...\n\n", "includes": ["testBigIntTypedArray.js"], "features": ["align-detached-buffer-semantics-with-web-reality", "BigInt", "Reflect", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/Set/BigInt/key-is-not-numeric-index-set-throws.js", "esid": " sec-integer-indexed-exotic-objects-set-p-v-receiver", "description": " >Returns abrupt from OrdinarySet when key is not a numeric index\n", "info": " |9.4.5.5 [[Set]] ( P, V, Receiver)\n\n...\n2. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\n...\n3. Return ? OrdinarySet(O, P, V, Receiver).\n\n9.1.9.1 OrdinarySet (O, P, V, Receiver)\n\n...\n8. Perform ? Call(setter, Receiver, \u00ab V \u00bb).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["align-detached-buffer-semantics-with-web-reality", "BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/Set/BigInt/key-is-not-numeric-index.js", "esid": " sec-integer-indexed-exotic-objects-set-p-v-receiver", "description": " >Use OrdinarySet if key is not a CanonicalNumericIndex\n", "info": " |9.4.5.5 [[Set]] ( P, V, Receiver)\n\n...\n2. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\n...\n3. Return ? OrdinarySet(O, P, V, Receiver).\n", "includes": ["testBigIntTypedArray.js"], "features": ["align-detached-buffer-semantics-with-web-reality", "BigInt", "Reflect", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/Set/BigInt/key-is-symbol.js", "esid": " sec-integer-indexed-exotic-objects-set-p-v-receiver", "description": " >Use OrdinarySet if key is a Symbol\n", "info": " |9.4.5.5 [[Set]] ( P, V, Receiver)\n\n...\n2. If Type(P) is String, then\n...\n3. Return ? OrdinarySet(O, P, V, Receiver).\n", "includes": ["testBigIntTypedArray.js"], "features": ["align-detached-buffer-semantics-with-web-reality", "BigInt", "Reflect", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/Set/BigInt/null-tobigint.js", "esid": " sec-assignment-operators-runtime-semantics-evaluation", "description": " >Return abrupt on null\n", "info": " |Runtime Semantics: Evaluation\nAssignmentExpression : LeftHandSideExpression = AssignmentExpression\n1. If LeftHandSideExpression is neither an ObjectLiteral nor an ArrayLiteral, then\n...\nf. Perform ? PutValue(lref, rval).\n...\n\nPutValue ( V, W )\n...\n6. Else if IsPropertyReference(V) is true, then\na. If HasPrimitiveBase(V) is true, then\ni. Assert: In this case, base will never be undefined or null.\nii. Set base to ! ToObject(base).\nb. Let succeeded be ? base.[[Set]](GetReferencedName(V), W, GetThisValue(V)).\nc. If succeeded is false and IsStrictReference(V) is true, throw a TypeError\nexception.\nd. Return.\n\n[[Set]] ( P, V, Receiver )\nWhen the [[Set]] internal method of an Integer-Indexed exotic object O is\ncalled with property key P, value V, and ECMAScript language value Receiver,\nthe following steps are taken:\n1. Assert: IsPropertyKey(P) is true.\n2. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\ni. Return ? IntegerIndexedElementSet(O, numericIndex, V).\n\nIntegerIndexedElementSet ( O, index, value )\n5. If arrayTypeName is \"BigUint64Array\" or \"BigInt64Array\",\nlet numValue be ? ToBigInt(value).\n...\n\nToBigInt ( argument )\nObject, Apply the following steps:\n1. Let prim be ? ToPrimitive(argument, hint Number).\n2. Return the value that prim corresponds to in Table [BigInt Conversions]\n\nBigInt Conversions\nArgument Type: Null\nResult: Throw a TypeError exception.\n\n", "includes": ["testBigIntTypedArray.js"], "features": ["align-detached-buffer-semantics-with-web-reality", "BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/Set/BigInt/number-tobigint.js", "esid": "  sec-assignment-operators-runtime-semantics-evaluation", "description": " >Return abrupt on Number\n", "info": " |Runtime Semantics: Evaluation\nAssignmentExpression : LeftHandSideExpression = AssignmentExpression\n1. If LeftHandSideExpression is neither an ObjectLiteral nor an ArrayLiteral, then\n...\nf. Perform ? PutValue(lref, rval).\n...\n\nPutValue ( V, W )\n...\n6. Else if IsPropertyReference(V) is true, then\na. If HasPrimitiveBase(V) is true, then\ni. Assert: In this case, base will never be undefined or null.\nii. Set base to ! ToObject(base).\nb. Let succeeded be ? base.[[Set]](GetReferencedName(V), W, GetThisValue(V)).\nc. If succeeded is false and IsStrictReference(V) is true, throw a TypeError\nexception.\nd. Return.\n\n[[Set]] ( P, V, Receiver )\nWhen the [[Set]] internal method of an Integer-Indexed exotic object O is\ncalled with property key P, value V, and ECMAScript language value Receiver,\nthe following steps are taken:\n1. Assert: IsPropertyKey(P) is true.\n2. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\ni. Return ? IntegerIndexedElementSet(O, numericIndex, V).\n\nIntegerIndexedElementSet ( O, index, value )\n5. If arrayTypeName is \"BigUint64Array\" or \"BigInt64Array\",\nlet numValue be ? ToBigInt(value).\n...\n\nToBigInt ( argument )\nObject, Apply the following steps:\n1. Let prim be ? ToPrimitive(argument, hint Number).\n2. Return the value that prim corresponds to in Table [BigInt Conversions]\n\nBigInt Conversions\nArgument Type: Number\nResult: Throw a TypeError exception.\n\n", "includes": ["testBigIntTypedArray.js"], "features": ["align-detached-buffer-semantics-with-web-reality", "BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/Set/BigInt/string-nan-tobigint.js", "esid": " sec-assignment-operators-runtime-semantics-evaluation", "description": " >Return abrupt String, when StringToBigInt returns NaN\n", "info": " |Runtime Semantics: Evaluation\nAssignmentExpression : LeftHandSideExpression = AssignmentExpression\n1. If LeftHandSideExpression is neither an ObjectLiteral nor an ArrayLiteral, then\n...\nf. Perform ? PutValue(lref, rval).\n...\n\nPutValue ( V, W )\n...\n6. Else if IsPropertyReference(V) is true, then\na. If HasPrimitiveBase(V) is true, then\ni. Assert: In this case, base will never be undefined or null.\nii. Set base to ! ToObject(base).\nb. Let succeeded be ? base.[[Set]](GetReferencedName(V), W, GetThisValue(V)).\nc. If succeeded is false and IsStrictReference(V) is true, throw a TypeError\nexception.\nd. Return.\n\n[[Set]] ( P, V, Receiver )\nWhen the [[Set]] internal method of an Integer-Indexed exotic object O is\ncalled with property key P, value V, and ECMAScript language value Receiver,\nthe following steps are taken:\n1. Assert: IsPropertyKey(P) is true.\n2. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\ni. Return ? IntegerIndexedElementSet(O, numericIndex, V).\n\nIntegerIndexedElementSet ( O, index, value )\n...\n5. If arrayTypeName is \"BigUint64Array\" or \"BigInt64Array\",\nlet numValue be ? ToBigInt(value).\n...\n\nToBigInt ( argument )\nObject, Apply the following steps:\n1. Let prim be ? ToPrimitive(argument, hint Number).\n2. Return the value that prim corresponds to in Table [BigInt Conversions]\n\nBigInt Conversions\nArgument Type: String\nResult:\n1. Let n be StringToBigInt(prim).\n2. If n is NaN, throw a SyntaxError exception.\n3. Return n.\n\n", "includes": ["testBigIntTypedArray.js"], "features": ["align-detached-buffer-semantics-with-web-reality", "BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/Set/BigInt/string-tobigint.js", "esid": " sec-assignment-operators-runtime-semantics-evaluation", "description": " >Behavior for input array of Strings, successful conversion\n", "info": " |Runtime Semantics: Evaluation\nAssignmentExpression : LeftHandSideExpression = AssignmentExpression\n1. If LeftHandSideExpression is neither an ObjectLiteral nor an ArrayLiteral, then\n...\nf. Perform ? PutValue(lref, rval).\n...\n\nPutValue ( V, W )\n...\n6. Else if IsPropertyReference(V) is true, then\na. If HasPrimitiveBase(V) is true, then\ni. Assert: In this case, base will never be undefined or null.\nii. Set base to ! ToObject(base).\nb. Let succeeded be ? base.[[Set]](GetReferencedName(V), W, GetThisValue(V)).\nc. If succeeded is false and IsStrictReference(V) is true, throw a TypeError\nexception.\nd. Return.\n\n[[Set]] ( P, V, Receiver )\nWhen the [[Set]] internal method of an Integer-Indexed exotic object O is\ncalled with property key P, value V, and ECMAScript language value Receiver,\nthe following steps are taken:\n1. Assert: IsPropertyKey(P) is true.\n2. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\ni. Return ? IntegerIndexedElementSet(O, numericIndex, V).\n\nIntegerIndexedElementSet ( O, index, value )\n5. If arrayTypeName is \"BigUint64Array\" or \"BigInt64Array\",\nlet numValue be ? ToBigInt(value).\n...\n\nToBigInt ( argument )\nObject, Apply the following steps:\n1. Let prim be ? ToPrimitive(argument, hint Number).\n2. Return the value that prim corresponds to in Table [BigInt Conversions]\n\nBigInt Conversions\nArgument Type: String\nResult:\n1. Let n be StringToBigInt(prim).\n2. If n is NaN, throw a SyntaxError exception.\n3. Return n.\n\nStringToBigInt (argument)\nApply the algorithm in 3.1.3.1 with the following changes:\n* Replace the StrUnsignedDecimalLiteral production with DecimalDigits to\nnot allow Infinity, decimal points, or exponents.\n* If the MV is NaN, return NaN, otherwise return the BigInt which exactly\ncorresponds to the MV, rather than rounding to a Number.\n\n", "includes": ["testBigIntTypedArray.js"], "features": ["align-detached-buffer-semantics-with-web-reality", "BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/Set/BigInt/symbol-tobigint.js", "esid": " sec-assignment-operators-runtime-semantics-evaluation", "description": " >Return abrupt on Symbol\n", "info": " |Runtime Semantics: Evaluation\nAssignmentExpression : LeftHandSideExpression = AssignmentExpression\n1. If LeftHandSideExpression is neither an ObjectLiteral nor an ArrayLiteral, then\n...\nf. Perform ? PutValue(lref, rval).\n...\n\nPutValue ( V, W )\n...\n6. Else if IsPropertyReference(V) is true, then\na. If HasPrimitiveBase(V) is true, then\ni. Assert: In this case, base will never be undefined or null.\nii. Set base to ! ToObject(base).\nb. Let succeeded be ? base.[[Set]](GetReferencedName(V), W, GetThisValue(V)).\nc. If succeeded is false and IsStrictReference(V) is true, throw a TypeError\nexception.\nd. Return.\n\n[[Set]] ( P, V, Receiver )\nWhen the [[Set]] internal method of an Integer-Indexed exotic object O is\ncalled with property key P, value V, and ECMAScript language value Receiver,\nthe following steps are taken:\n1. Assert: IsPropertyKey(P) is true.\n2. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\ni. Return ? IntegerIndexedElementSet(O, numericIndex, V).\n\nIntegerIndexedElementSet ( O, index, value )\n5. If arrayTypeName is \"BigUint64Array\" or \"BigInt64Array\",\nlet numValue be ? ToBigInt(value).\n...\n\nToBigInt ( argument )\nObject, Apply the following steps:\n1. Let prim be ? ToPrimitive(argument, hint Number).\n2. Return the value that prim corresponds to in Table [BigInt Conversions]\n\nBigInt Conversions\nArgument Type: Symbol\nResult: Throw a TypeError exception.\n\n", "includes": ["testBigIntTypedArray.js"], "features": ["align-detached-buffer-semantics-with-web-reality", "BigInt", "TypedArray", "Symbol"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/Set/BigInt/undefined-tobigint.js", "esid": " sec-assignment-operators-runtime-semantics-evaluation", "description": " >Return abrupt on undefined\n", "info": " |Runtime Semantics: Evaluation\nAssignmentExpression : LeftHandSideExpression = AssignmentExpression\n1. If LeftHandSideExpression is neither an ObjectLiteral nor an ArrayLiteral, then\n...\nf. Perform ? PutValue(lref, rval).\n...\n\nPutValue ( V, W )\n...\n6. Else if IsPropertyReference(V) is true, then\na. If HasPrimitiveBase(V) is true, then\ni. Assert: In this case, base will never be undefined or null.\nii. Set base to ! ToObject(base).\nb. Let succeeded be ? base.[[Set]](GetReferencedName(V), W, GetThisValue(V)).\nc. If succeeded is false and IsStrictReference(V) is true, throw a TypeError\nexception.\nd. Return.\n\n[[Set]] ( P, V, Receiver )\nWhen the [[Set]] internal method of an Integer-Indexed exotic object O is\ncalled with property key P, value V, and ECMAScript language value Receiver,\nthe following steps are taken:\n1. Assert: IsPropertyKey(P) is true.\n2. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\ni. Return ? IntegerIndexedElementSet(O, numericIndex, V).\n\nIntegerIndexedElementSet ( O, index, value )\n...\n5. If arrayTypeName is \"BigUint64Array\" or \"BigInt64Array\",\nlet numValue be ? ToBigInt(value).\n...\n\nToBigInt ( argument )\nObject, Apply the following steps:\n1. Let prim be ? ToPrimitive(argument, hint Number).\n2. Return the value that prim corresponds to in Table [BigInt Conversions]\n\nBigInt Conversions\nArgument Type: Undefined\nResult: Throw a TypeError exception.\n\n", "includes": ["testBigIntTypedArray.js"], "features": ["align-detached-buffer-semantics-with-web-reality", "BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/Set/bigint-tonumber.js", "esid": "  sec-assignment-operators-runtime-semantics-evaluation", "description": " >Return abrupt on BigInt\n", "info": " |Runtime Semantics: Evaluation\nAssignmentExpression : LeftHandSideExpression = AssignmentExpression\n1. If LeftHandSideExpression is neither an ObjectLiteral nor an ArrayLiteral, then\n...\nf. Perform ? PutValue(lref, rval).\n...\n\nPutValue ( V, W )\n...\n6. Else if IsPropertyReference(V) is true, then\na. If HasPrimitiveBase(V) is true, then\ni. Assert: In this case, base will never be undefined or null.\nii. Set base to ! ToObject(base).\nb. Let succeeded be ? base.[[Set]](GetReferencedName(V), W, GetThisValue(V)).\nc. If succeeded is false and IsStrictReference(V) is true, throw a TypeError\nexception.\nd. Return.\n\n[[Set]] ( P, V, Receiver )\nWhen the [[Set]] internal method of an Integer-Indexed exotic object O is\ncalled with property key P, value V, and ECMAScript language value Receiver,\nthe following steps are taken:\n1. Assert: IsPropertyKey(P) is true.\n2. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\ni. Return ? IntegerIndexedElementSet(O, numericIndex, V).\n\nIntegerIndexedElementSet ( O, index, value )\n5. If arrayTypeName is \"BigUint64Array\" or \"BigInt64Array\",\nlet numValue be ? ToBigInt(value).\n6. Otherwise, let numValue be ? ToNumber(value).\n...\n\nToNumber ( argument )\nThe abstract operation ToNumber converts argument to a value of type Number\naccording to:\n\nNumber Conversion\nArgument Type: BigInt\nResult: Throw a TypeError Exception\n\n", "includes": ["testTypedArray.js"], "features": ["align-detached-buffer-semantics-with-web-reality", "BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/of/BigInt/argument-is-symbol-throws.js", "esid": " sec-%typedarray%.of", "description": " >Throws a TypeError if argument is a Symbol\n", "info": " |IntegerIndexedElementSet ( O, index, value )\n\nAssert: O is an Integer-Indexed exotic object.\nIf O.[[ContentType]] is BigInt, let numValue be ? ToBigInt(value).\nOtherwise, let numValue be ? ToNumber(value).\nLet buffer be O.[[ViewedArrayBuffer]].\nIf IsDetachedBuffer(buffer) is false and ! IsValidIntegerIndex(O, index) is true, then\nLet offset be O.[[ByteOffset]].\nLet arrayTypeName be the String value of O.[[TypedArrayName]].\nLet elementSize be the Element Size value specified in Table 62 for arrayTypeName.\nLet indexedPosition be (\u211d(index) \u00d7 elementSize) + offset.\nLet elementType be the Element Type value in Table 62 for arrayTypeName.\nPerform SetValueInBuffer(buffer, indexedPosition, elementType, numValue, true, Unordered).\nReturn NormalCompletion(undefined).\n\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/of/BigInt/argument-number-value-throws.js", "esid": " sec-%typedarray%.of", "description": " >Return abrupt from object value\n", "info": " |22.2.2.2 %TypedArray%.of ( ...items )\n\n...\n7. Repeat, while k < len\n...\nc. Perform ? Set(newObj, Pk, kValue, true).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/of/BigInt/custom-ctor-does-not-instantiate-ta-throws.js", "esid": " sec-%typedarray%.of", "description": " >Custom constructor needs to instantiate a TypedArray\n", "info": " |22.2.2.2 %TypedArray%.of ( ...items )\n\n...\n5. Let newObj be ? TypedArrayCreate(C, \u00ablen\u00bb).\n...\n\n22.2.4.6 TypedArrayCreate ( constructor, argumentList )\n\n1. Let newTypedArray be ? Construct(constructor, argumentList).\n2. Perform ? ValidateTypedArray(newTypedArray).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/of/BigInt/custom-ctor-returns-other-instance.js", "esid": " sec-%typedarray%.of", "description": " >Custom constructor can return any TypedArray instance with higher or same\nlength\n", "info": " |%TypedArray%.of ( ...items )\n\n1. Let len be the actual number of arguments passed to this function.\n...\n5. Let newObj be ? TypedArrayCreate(C, \u00ab len \u00bb).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/of/BigInt/custom-ctor-returns-smaller-instance-throws.js", "esid": " sec-%typedarray%.of", "description": " >Throws a TypeError if a custom `this` returns a smaller instance\n", "info": " |%TypedArray%.of ( ...items )\n\n1. Let len be the actual number of arguments passed to this function.\n...\n5. Let newObj be ? TypedArrayCreate(C, \u00ab len \u00bb).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/of/BigInt/custom-ctor.js", "esid": " sec-%typedarray%.of", "description": " >Calls and return abrupt from custom constructor\n", "info": " |22.2.2.2 %TypedArray%.of ( ...items )\n\n...\n5. Let newObj be ? TypedArrayCreate(C, \u00ablen\u00bb).\n...\n\n22.2.4.6 TypedArrayCreate ( constructor, argumentList )\n\n1. Let newTypedArray be ? Construct(constructor, argumentList).\n2. Perform ? ValidateTypedArray(newTypedArray).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/of/BigInt/inherited.js", "esid": " sec-%typedarray%.of", "description": " >`of` is %TypedArray%.of\n", "info": " |22.2.1 The %TypedArray% Intrinsic Object\n\nThe %TypedArray% intrinsic object is a constructor function object that all of\nthe TypedArray constructor object inherit from.\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/of/BigInt/invoked-as-func.js", "esid": " sec-%typedarray%.of", "description": " >\"of\" cannot be invoked as a function\n", "info": " |22.2.2.2 %TypedArray%.of ( ...items )\n\n...\n3. Let C be the this value.\n4. If IsConstructor(C) is false, throw a TypeError exception.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/of/BigInt/new-instance-empty.js", "esid": " sec-%typedarray%.of", "description": " >Return a new empty TypedArray\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/of/BigInt/new-instance-using-custom-ctor.js", "esid": " sec-%typedarray%.of", "description": " >Return a new TypedArray using a custom Constructor\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/of/BigInt/new-instance.js", "esid": " sec-%typedarray%.of", "description": " >Return a new TypedArray\n", "info": " |9.4.5.5 [[Set]] ( P, V, Receiver)\n\n...\n2. If Type(P) is String and if SameValue(O, Receiver) is true, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\ni. Perform ? IntegerIndexedElementSet(O, numericIndex, V).\nii. Return true.\n...\n\nIntegerIndexedElementSet ( O, index, value )\n\nAssert: O is an Integer-Indexed exotic object.\nIf O.[[ContentType]] is BigInt, let numValue be ? ToBigInt(value).\nOtherwise, let numValue be ? ToNumber(value).\nLet buffer be O.[[ViewedArrayBuffer]].\nIf IsDetachedBuffer(buffer) is false and ! IsValidIntegerIndex(O, index) is true, then\nLet offset be O.[[ByteOffset]].\nLet arrayTypeName be the String value of O.[[TypedArrayName]].\nLet elementSize be the Element Size value specified in Table 62 for arrayTypeName.\nLet indexedPosition be (\u211d(index) \u00d7 elementSize) + offset.\nLet elementType be the Element Type value in Table 62 for arrayTypeName.\nPerform SetValueInBuffer(buffer, indexedPosition, elementType, numValue, true, Unordered).\nReturn NormalCompletion(undefined).\n\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/of/BigInt/this-is-not-constructor.js", "esid": " sec-%typedarray%.of", "description": " >Throws a TypeError exception if this is not a constructor\n", "info": " |22.2.2.2 %TypedArray%.of ( ...items )\n\n...\n3. Let C be the this value.\n4. If IsConstructor(C) is false, throw a TypeError exception.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/prototype/Symbol.toStringTag/bigint-inherited.js", "esid": " sec-get-%typedarray%.prototype-@@tostringtag", "description": " >_TypedArray_.prototype[@@toStringTag] is inherited from %TypedArray%\n_TypedArray_.prototype has no own property @@toStringTag\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol.toStringTag", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/prototype/bigint-Symbol.iterator.js", "esid": " sec-%typedarray%.prototype-@@iterator", "description": " >_TypedArray_.prototype has no own property @@iterator\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol.iterator", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/prototype/buffer/bigint-inherited.js", "esid": " sec-get-%typedarray%.prototype.buffer", "description": " >_TypedArray_.prototype has no own property \"buffer\"\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/prototype/byteLength/bigint-inherited.js", "esid": " sec-get-%typedarray%.prototype.bytelength", "description": " >_TypedArray_.prototype has no own property \"byteLength\"\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/prototype/byteOffset/bigint-inherited.js", "esid": " sec-get-%typedarray%.prototype.byteoffset", "description": " >_TypedArray_.prototype has no own property \"byteOffset\"\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/prototype/copyWithin/bigint-inherited.js", "esid": " sec-%typedarray%.prototype.copywithin", "description": " >_TypedArray_.prototype has no own property \"copyWithin\"\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/prototype/entries/bigint-inherited.js", "esid": " sec-%typedarray%.prototype.entries", "description": " >_TypedArray_.prototype has no own property \"entries\"\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/prototype/every/bigint-inherited.js", "esid": " sec-%typedarray%.prototype.every", "description": " >_TypedArray_.prototype has no own property \"every\"\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/prototype/fill/bigint-inherited.js", "esid": " sec-%typedarray%.prototype.fill", "description": " >_TypedArray_.prototype has no own property \"fill\"\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/prototype/filter/bigint-inherited.js", "esid": " sec-%typedarray%.prototype.filter", "description": " >_TypedArray_.prototype has no own property \"filter\"\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/prototype/find/bigint-inherited.js", "esid": " sec-%typedarray%.prototype.find", "description": " >_TypedArray_.prototype has no own property \"find\"\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/prototype/findIndex/bigint-inherited.js", "esid": " sec-%typedarray%.prototype.findindex", "description": " >_TypedArray_.prototype has no own property \"findIndex\"\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/prototype/forEach/bigint-inherited.js", "esid": " sec-%typedarray%.prototype.foreach", "description": " >_TypedArray_.prototype has no own property \"forEach\"\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/prototype/indexOf/bigint-inherited.js", "esid": " sec-%typedarray%.prototype.indexof", "description": " >_TypedArray_.prototype has no own property \"indexOf\"\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/prototype/join/bigint-inherited.js", "esid": " sec-%typedarray%.prototype.join", "description": " >_TypedArray_.prototype has no own property \"join\"\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/prototype/keys/bigint-inherited.js", "esid": " sec-%typedarray%.prototype.keys", "description": " >_TypedArray_.prototype has no own property \"keys\"\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/prototype/lastIndexOf/bigint-inherited.js", "esid": " sec-%typedarray%.prototype.lastindexof", "description": " >_TypedArray_.prototype has no own property \"lastIndexOf\"\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/prototype/length/bigint-inherited.js", "esid": " sec-get-%typedarray%.prototype.length", "description": " >_TypedArray_.prototype has no own property \"length\"\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/prototype/map/bigint-inherited.js", "esid": " sec-%typedarray%.prototype.map", "description": " >_TypedArray_.prototype has no own property \"map\"\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/prototype/reduce/bigint-inherited.js", "esid": " sec-get-%typedarray%.prototype.reduce", "description": " >_TypedArray_.prototype has no own property \"reduce\"\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/prototype/reduceRight/bigint-inherited.js", "esid": " sec-%typedarray%.prototype.reduceright", "description": " >_TypedArray_.prototype has no own property \"reduceRight\"\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/prototype/reverse/bigint-inherited.js", "esid": " sec-%typedarray%.prototype.reverse", "description": " >_TypedArray_.prototype has no own property \"reverse\"\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/prototype/set/bigint-inherited.js", "esid": " sec-%typedarray%.prototype.set", "description": " >_TypedArray_.prototype has no own property \"set\"\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/prototype/slice/bigint-inherited.js", "esid": " sec-%typedarray%.prototype.slice", "description": " >_TypedArray_.prototype has no own property \"slice\"\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/prototype/some/bigint-inherited.js", "esid": " sec-%typedarray%.prototype.some", "description": " >_TypedArray_.prototype has no own property \"some\"\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/prototype/sort/bigint-inherited.js", "esid": " sec-%typedarray%.prototype.sort", "description": " >_TypedArray_.prototype has no own property \"sort\"\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/prototype/subarray/bigint-inherited.js", "esid": " sec-%typedarray%.prototype.subarray", "description": " >_TypedArray_.prototype has no own property \"subarray\"\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/prototype/toLocaleString/bigint-inherited.js", "esid": " sec-%typedarray%.prototype.tolocalestring", "description": " >_TypedArray_.prototype has no own property \"toLocaleString\"\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/prototype/toString/bigint-inherited.js", "esid": " sec-%typedarray%.prototype.tostring", "description": " >_TypedArray_.prototype has no own property \"toString\"\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/prototype/values/bigint-inherited.js", "esid": " sec-%typedarray%.prototype.values", "description": " >_TypedArray_.prototype has no own property \"values\"\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/global/global-object.js", "esid": " sec-other-properties-of-the-global-object-globalthis", "description": " \"'globalThis' should be the global object\"", "author": " Jordan Harband", "features": ["globalThis"]}, {"path": "./test262-main/test/built-ins/global/property-descriptor.js", "esid": " sec-other-properties-of-the-global-object-globalthis", "description": " \"'globalThis' should be writable, non-enumerable, and configurable\"", "author": " Jordan Harband", "includes": ["propertyHelper.js"], "features": ["globalThis"]}, {"path": "./test262-main/test/intl402/BigInt/prototype/toLocaleString/builtin.js", "esid": " sec-bigint.prototype.tolocalestring", "description": " >Tests that BigInt.prototype.toLocaleString meets the requirements\nfor built-in objects defined by the introduction of chapter 17 of\nthe ECMAScript Language Specification.\n", "author": " Norbert Lindenberg", "includes": ["isConstructor.js"], "features": ["Reflect.construct", "BigInt"]}, {"path": "./test262-main/test/intl402/BigInt/prototype/toLocaleString/length.js", "esid": " sec-bigint.prototype.tolocalestring", "description": " >BigInt.prototype.toLocaleString.length is 0.\n", "info": " |BigInt.prototype.toLocaleString ( [ locales [ , options ] ] )\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery built-in function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description. Optional parameters\n(which are indicated with brackets: [ ]) or rest parameters (which\nare shown using the form \u00ab...name\u00bb) are not included in the default\nargument count.\nUnless otherwise specified, the length property of a built-in function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n\n", "includes": ["propertyHelper.js"], "features": ["BigInt"]}, {"path": "./test262-main/test/intl402/BigInt/prototype/toLocaleString/name.js", "esid": " sec-bigint.prototype.tolocalestring", "description": " >BigInt.prototype.toLocaleString.name is toLocaleString.\n", "info": " |BigInt.prototype.toLocaleString ( [ locales [ , options ] ] )\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery built-in function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String. For functions that are specified as properties of objects,\nthe name value is the property name string used to access the function.\n\nUnless otherwise specified, the name property of a built-in function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n\n", "includes": ["propertyHelper.js"], "features": ["BigInt"]}, {"path": "./test262-main/test/intl402/BigInt/prototype/toLocaleString/prop-desc.js", "esid": " sec-bigint.prototype.tolocalestring", "description": " Checks the \"toLocaleString\" property of the BigInt prototype object.", "info": " |BigInt.prototype.toLocaleString ( [ locales [ , options ] ] )\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery other data property described in clauses 18 through 26 and in\nAnnex B.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false,\n[[Configurable]]: true } unless otherwise specified.\n\n", "includes": ["propertyHelper.js"], "features": ["BigInt"]}, {"path": "./test262-main/test/intl402/BigInt/prototype/toLocaleString/taint-Intl-NumberFormat.js", "esid": " sec-bigint.prototype.tolocalestring", "description": " >Tests that Number.prototype.toLocaleString uses the standard\nbuilt-in Intl.NumberFormat constructor.\n", "includes": ["testIntl.js"], "features": ["BigInt"]}, {"path": "./test262-main/test/intl402/BigInt/prototype/toLocaleString/this-value-invalid.js", "esid": " sec-bigint.prototype.tolocalestring", "description": " Tests that toLocaleString handles \"thisBigIntValue\" correctly.", "features": ["BigInt"]}, {"path": "./test262-main/test/intl402/Collator/missing-unicode-ext-value-defaults-to-true.js", "version": 5, "esid": " 9.2.5_11_g_ii_2", "description": " >Tests that missing Unicode extension values default to true for\nboolean keys.\n", "author": " Norbert Lindenberg"}, {"path": "./test262-main/test/intl402/DateTimeFormat/constructor-options-order.js", "esid": " sec-initializedatetimeformat", "description": " Checks the order of getting options for the DateTimeFormat constructor.", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/intl-legacy-constructed-symbol-on-unwrap.js", "esid": " sec-unwrapdatetimeformat", "description": " >Tests that [[FallbackSymbol]]'s [[Description]] is \"IntlLegacyConstructedSymbol\" if normative optional is implemented.\n", "author": " Yusuke Suzuki", "features": ["intl-normative-optional"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/intl-legacy-constructed-symbol.js", "esid": " sec-intl.datetimeformat", "description": " >Tests that [[FallbackSymbol]]'s [[Description]] is \"IntlLegacyConstructedSymbol\" if normative optional is implemented.\n", "author": " Yusuke Suzuki", "features": ["intl-normative-optional"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/resolvedOptions/order.js", "esid": " sec-intl.datetimeformat.prototype.resolvedoptions", "description": " Verifies the property order for the object returned by resolvedOptions().", "includes": ["arrayContains.js"]}, {"path": "./test262-main/test/intl402/Intl/getCanonicalLocales/invalid-tags.js", "esid": " sec-intl.getcanonicallocales", "description": " >Throws a RangeError if the language tag is invalid.\n", "info": " |8.2.1 Intl.getCanonicalLocales (locales)\n1. Let ll be ? CanonicalizeLocaleList(locales).\n...\n\n9.2.1 CanonicalizeLocaleList (locales)\n...\n7. Repeat, while k < len\n...\nc. If kPresent is true, then\n...\niv. If IsStructurallyValidLanguageTag(tag) is false, throw a RangeError exception.\n...\n", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/Intl/getCanonicalLocales/transformed-ext-invalid.js", "esid": " sec-intl.getcanonicallocales", "description": " >A RangeError is thrown when a language tag includes an invalid transformed extension subtag.\n", "info": " |8.2.1 Intl.getCanonicalLocales (locales)\n1. Let ll be ? CanonicalizeLocaleList(locales).\n2. Return CreateArrayFromList(ll).\n\n9.2.1 CanonicalizeLocaleList (locales)\n...\n7. Repeat, while k < len\n...\nc. If kPresent is true, then\n...\nv. If IsStructurallyValidLanguageTag(tag) is false, throw a RangeError exception.\n...\n\n", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/Intl/getCanonicalLocales/unicode-ext-key-with-digit.js", "esid": " sec-intl.getcanonicallocales", "description": " >Test Unicode extension subtags where the ukey subtag contains a digit.\n", "info": " |8.2.1 Intl.getCanonicalLocales (locales)\n1. Let ll be ? CanonicalizeLocaleList(locales).\n2. Return CreateArrayFromList(ll).\n\n9.2.1 CanonicalizeLocaleList (locales)\n...\n7. Repeat, while k < len\n...\nc. If kPresent is true, then\n...\nv. If IsStructurallyValidLanguageTag(tag) is false, throw a RangeError exception.\nvi. Let canonicalizedTag be CanonicalizeUnicodeLocaleId(tag).\n...\n\n", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/NumberFormat/intl-legacy-constructed-symbol-on-unwrap.js", "esid": " sec-unwrapnumberformat", "description": " >Tests that [[FallbackSymbol]]'s [[Description]] is \"IntlLegacyConstructedSymbol\" if normative optional is implemented.\n", "author": " Yusuke Suzuki", "features": ["intl-normative-optional"]}, {"path": "./test262-main/test/intl402/NumberFormat/intl-legacy-constructed-symbol.js", "esid": " sec-intl.numberformat", "description": " >Tests that [[FallbackSymbol]]'s [[Description]] is \"IntlLegacyConstructedSymbol\" if normative optional is implemented.\n", "author": " Yusuke Suzuki", "features": ["intl-normative-optional"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/format-fraction-digits.js", "version": 5, "esid": " 11.3.2_TRF", "description": " >Tests that the digits are determined correctly when specifying\npre/post decimal digits.\n", "author": " Norbert Lindenberg", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/format-negative-numbers.js", "version": 5, "esid": " 11.3.2_FN_1", "description": " >Tests that Intl.NumberFormat.prototype.formatdoesn't treat all\nnumbers as negative.\n", "info": " |PartitionNumberPattern ( numberFormat, x )\n1. If x is not NaN and x < 0 or _x_ is -0, then\na. Let _x_ be -_x_.\nb. Let _pattern_ be _numberFormat_.[[NegativePattern]].\n", "author": " Roozbeh Pournader"}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/format-significant-digits.js", "version": 5, "esid": " 11.3.2_TRP", "description": " >Tests that the digits are determined correctly when specifying\nsignificant digits.\n", "author": " Norbert Lindenberg", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/constructor/constructor/locales-invalid.js", "esid": " sec-Intl.RelativeTimeFormat", "description": " Checks error cases for the locales argument to the RelativeTimeFormat constructor.", "info": " |InitializeRelativeTimeFormat (relativeTimeFormat, locales, options)\n3. Let _requestedLocales_ be ? CanonicalizeLocaleList(_locales_).\n", "includes": ["testIntl.js"], "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/constructor/constructor/locales-valid.js", "esid": " sec-Intl.RelativeTimeFormat", "description": " Checks various cases for the locales argument to the RelativeTimeFormat constructor.", "info": " |InitializeRelativeTimeFormat (relativeTimeFormat, locales, options)\n3. Let _requestedLocales_ be ? CanonicalizeLocaleList(_locales_).\n", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/constructor/constructor/newtarget-undefined.js", "esid": " sec-intl.RelativeTimeFormat", "description": " >Verifies the NewTarget check for Intl.RelativeTimeFormat.\n", "info": " |Intl.RelativeTimeFormat ([ locales [ , options ]])\n\n1. If NewTarget is undefined, throw a TypeError exception.\n", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/constructor/constructor/options-invalid.js", "esid": " sec-Intl.RelativeTimeFormat", "description": " Checks handling of a null options argument to the RelativeTimeFormat constructor.", "info": " |InitializeRelativeTimeFormat (relativeTimeFormat, locales, options)\n5. Else\na. Let options be ? ToObject(options).\n", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/constructor/constructor/options-localeMatcher-invalid.js", "esid": " sec-Intl.RelativeTimeFormat", "description": " Checks handling of invalid value for the localeMatcher option to the RelativeTimeFormat constructor.", "info": " |InitializeRelativeTimeFormat (relativeTimeFormat, locales, options)\n7. Let matcher be ? GetOption(options, \"localeMatcher\", \"string\", \u00ab\"lookup\", \"best fit\"\u00bb, \"best fit\").\n", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/constructor/constructor/options-numeric-invalid.js", "esid": " sec-Intl.RelativeTimeFormat", "description": " Checks handling of invalid value for the numeric option to the RelativeTimeFormat constructor.", "info": " |InitializeRelativeTimeFormat (relativeTimeFormat, locales, options)\n16. Let numeric be ? GetOption(options, \"numeric\", \"string\", \u00ab\"always\", \"auto\"\u00bb, \"always\").\n", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/constructor/constructor/options-numeric-valid.js", "esid": " sec-Intl.RelativeTimeFormat", "description": " Checks handling of valid values for the numeric option to the RelativeTimeFormat constructor.", "info": " |InitializeRelativeTimeFormat (relativeTimeFormat, locales, options)\n16. Let numeric be ? GetOption(options, \"numeric\", \"string\", \u00ab\"always\", \"auto\"\u00bb, \"always\").\n17. Set relativeTimeFormat.[[Numeric]] to numeric.\n", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/constructor/constructor/options-proto.js", "esid": " sec-Intl.RelativeTimeFormat", "description": " |Checks that the RelativeTimeFormat constructor does not cause the\nNumberFormat and PluralRules constructors to get properties off\nObject.prototype through the options objects it creates.\n", "info": " |InitializeRelativeTimeFormat (relativeTimeFormat, locales, options)\n20. Let nfOptions be ObjectCreate(null).\n25. Let prOptions be ObjectCreate(null).\n", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/constructor/constructor/options-style-invalid.js", "esid": " sec-Intl.RelativeTimeFormat", "description": " Checks handling of invalid value for the style option to the RelativeTimeFormat constructor.", "info": " |InitializeRelativeTimeFormat (relativeTimeFormat, locales, options)\n14. Let s be ? GetOption(options, \"style\", \"string\", \u00ab\"long\", \"short\", \"narrow\"\u00bb, \"long\").\n", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/constructor/constructor/options-style-valid.js", "esid": " sec-Intl.RelativeTimeFormat", "description": " Checks handling of valid values for the style option to the RelativeTimeFormat constructor.", "info": " |InitializeRelativeTimeFormat (relativeTimeFormat, locales, options)\n14. Let s be ? GetOption(options, \"style\", \"string\", \u00ab\"long\", \"short\", \"narrow\"\u00bb, \"long\").\n15. Set relativeTimeFormat.[[Style]] to s.\n", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/constructor/constructor/options-toobject-prototype.js", "esid": " sec-Intl.RelativeTimeFormat", "description": " Checks handling of non-object option arguments to the RelativeTimeFormat constructor.", "info": " |InitializeRelativeTimeFormat (relativeTimeFormat, locales, options)\n", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/constructor/constructor/options-toobject.js", "esid": " sec-Intl.RelativeTimeFormat", "description": " Checks handling of non-object option arguments to the RelativeTimeFormat constructor.", "info": " |InitializeRelativeTimeFormat (relativeTimeFormat, locales, options)\n", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/constructor/constructor/options-undefined.js", "esid": " sec-Intl.RelativeTimeFormat", "description": " Checks handling of non-object option arguments to the RelativeTimeFormat constructor.", "info": " |InitializeRelativeTimeFormat (relativeTimeFormat, locales, options)\n", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/constructor/constructor/subclassing.js", "esid": " sec-Intl.RelativeTimeFormat", "description": " Checks that RelativeTimeFormat can be subclassed.", "info": " |Intl.RelativeTimeFormat ( [ locales [ , options ] ] )\n\n2. Let relativeTimeFormat be ! OrdinaryCreateFromConstructor(NewTarget, \"%RelativeTimeFormatPrototype%\", \u00ab [[InitializedRelativeTimeFormat]] \u00bb).\n\n", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/constructor/length.js", "esid": " sec-Intl.RelativeTimeFormat", "description": " >Checks the \"length\" property of the RelativeTimeFormat constructor.\n", "info": " |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nThe RelativeTimeFormat constructor is a standard built-in property of the Intl object.\nEvery built-in function object, including constructors, has a length property whose value is an integer. Unless otherwise specified, this value is equal to the largest number of named arguments shown in the subclause headings for the function description. Optional parameters (which are indicated with brackets: [ ]) or rest parameters (which are shown using the form \u00ab...name\u00bb) are not included in the default argument count.\nUnless otherwise specified, the length property of a built-in function object has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/constructor/name.js", "esid": " sec-Intl.RelativeTimeFormat", "description": " >Checks the \"name\" property of the RelativeTimeFormat constructor.\n", "info": " |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, that is not identified as an anonymous function has a name property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification.\nUnless otherwise specified, the name property of a built-in function object, if it exists, has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/constructor/prop-desc.js", "esid": " sec-Intl.RelativeTimeFormat", "description": " >\"RelativeTimeFormat\" property of Intl.\n", "info": " |Intl.RelativeTimeFormat (...)\n\n7 Requirements for Standard Built-in ECMAScript Objects\n\nUnless specified otherwise in this document, the objects, functions, and constructors\ndescribed in this standard are subject to the generic requirements and restrictions\nspecified for standard built-in ECMAScript objects in the ECMAScript 2018 Language\nSpecification, 9th edition, clause 17, or successor.\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the\nattributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true }\nunless otherwise specified.\n\n", "includes": ["propertyHelper.js"], "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/constructor/prototype.js", "esid": " sec-Intl.RelativeTimeFormat", "description": " The prototype of the Intl.RelativeTimeFormat constructor is %FunctionPrototype%.", "info": " |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nUnless otherwise specified every built-in function object has the %FunctionPrototype% object as the initial value of its [[Prototype]] internal slot.\n", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/constructor/supportedLocalesOf/basic.js", "esid": " sec-Intl.RelativeTimeFormat.supportedLocalesOf", "description": " >Tests that Intl.RelativeTimeFormat has a supportedLocalesOf property,\nand it works as planned.\n", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/constructor/supportedLocalesOf/branding.js", "esid": " sec-Intl.RelativeTimeFormat.supportedLocalesOf", "description": " >Verifies there's no branding check for Intl.RelativeTimeFormat.supportedLocalesOf().\n", "info": " |Intl.RelativeTimeFormat.supportedLocalesOf ( locales [, options ])\n", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/constructor/supportedLocalesOf/length.js", "esid": " sec-Intl.RelativeTimeFormat.supportedLocalesOf", "description": " >Checks the \"length\" property of Intl.RelativeTimeFormat.supportedLocalesOf().\n", "info": " |The value of the length property of the supportedLocalesOf method is 1.\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, has a length property whose value is an integer.\nUnless otherwise specified, the length property of a built-in function object has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/constructor/supportedLocalesOf/locales-invalid.js", "esid": " sec-Intl.RelativeTimeFormat.supportedLocalesOf", "description": " Checks error cases for the locales argument to the supportedLocalesOf function.", "info": " |Intl.RelativeTimeFormat.supportedLocalesOf ( locales [, options ])\n\n2. Let requestedLocales be CanonicalizeLocaleList(locales).\n", "includes": ["testIntl.js"], "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/constructor/supportedLocalesOf/name.js", "esid": " sec-Intl.RelativeTimeFormat.supportedLocalesOf", "description": " >Checks the \"name\" property of Intl.RelativeTimeFormat.supportedLocalesOf().\n", "info": " |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, that is not identified as an anonymous function has a name property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification.\nUnless otherwise specified, the name property of a built-in function object, if it exists, has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/constructor/supportedLocalesOf/options-localeMatcher-invalid.js", "esid": " sec-Intl.RelativeTimeFormat.supportedLocalesOf", "description": " Checks handling of invalid values for the localeMatcher option to the supportedLocalesOf function.", "info": " |SupportedLocales ( availableLocales, requestedLocales, options )\n\n1. If options is not undefined, then\nb. Let matcher be ? GetOption(options, \"localeMatcher\", \"string\", \u00ab\"lookup\", \"best fit\"\u00bb, \"best fit\").\n", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/constructor/supportedLocalesOf/options-null.js", "esid": " sec-Intl.RelativeTimeFormat.supportedLocalesOf", "description": " Checks handling of a null options argument to the supportedLocalesOf function.", "info": " |SupportedLocales ( availableLocales, requestedLocales, options )\n\n1. If options is not undefined, then\na. Let options be ? ToObject(options).\n", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/constructor/supportedLocalesOf/options-toobject.js", "esid": " sec-Intl.RelativeTimeFormat.supportedLocalesOf", "description": " Checks handling of non-object options arguments to the supportedLocalesOf function.", "info": " |SupportedLocales ( availableLocales, requestedLocales, options )\n\n1. If options is not undefined, then\na. Let options be ? ToObject(options).\n", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/constructor/supportedLocalesOf/options-undefined.js", "esid": " sec-Intl.RelativeTimeFormat.supportedLocalesOf", "description": " Checks handling of an undefined options argument to the supportedLocalesOf function.", "info": " |SupportedLocales ( availableLocales, requestedLocales, options )\n\n1. If options is not undefined, then\nb. Let matcher be ? GetOption(options, \"localeMatcher\", \"string\", \u00ab\"lookup\", \"best fit\"\u00bb, \"best fit\").\n", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/constructor/supportedLocalesOf/prop-desc.js", "esid": " sec-Intl.RelativeTimeFormat.supportedLocalesOf", "description": " >Checks the \"supportedLocalesOf\" property of the RelativeTimeFormat prototype object.\n", "info": " |Intl.RelativeTimeFormat.supportedLocalesOf ( locales [, options ])\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js"], "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/constructor/supportedLocalesOf/result-type.js", "esid": " sec-Intl.RelativeTimeFormat.supportedLocalesOf", "description": " Verifies the type of the return value of Intl.RelativeTimeFormat.supportedLocalesOf().", "info": " |Intl.RelativeTimeFormat.supportedLocalesOf ( locales [, options ])\n", "includes": ["propertyHelper.js"], "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/instance/extensibility.js", "esid": " sec-Intl.RelativeTimeFormat", "description": " >Intl.RelativeTimeFormat instance object extensibility\n", "info": " |17 ECMAScript Standard Built-in Objects:\n\nUnless specified otherwise, the [[Extensible]] internal slot\nof a built-in object initially has the value true.\n", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/instance/prototype.js", "esid": " sec-Intl.RelativeTimeFormat", "description": " >Intl.RelativeTimeFormat instance object is created from %RelativeTimeFormatPrototype%.\n", "info": " |Intl.RelativeTimeFormat ([ locales [ , options ]])\n\n2. Let relativeTimeFormat be ! OrdinaryCreateFromConstructor(NewTarget, \"%RelativeTimeFormatPrototype%\").\n", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/prototype/constructor/prop-desc.js", "esid": " sec-Intl.RelativeTimeFormat.prototype.constructor", "description": " Checks the \"constructor\" property of the RelativeTimeFormat prototype object.", "info": " |Intl.RelativeTimeFormat.prototype.constructor\n\nThe initial value of Intl.RelativeTimeFormat.prototype.constructor is %RelativeTimeFormat%.\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js"], "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/prototype/format/branding.js", "esid": " sec-Intl.RelativeTimeFormat.prototype.format", "description": " Verifies the branding check for the \"format\" function of the RelativeTimeFormat prototype object.", "info": " |Intl.RelativeTimeFormat.prototype.format( value, unit )\n\n2. If Type(relativeTimeFormat) is not Object or relativeTimeFormat does not have an [[InitializedRelativeTimeFormat]] internal slot whose value is true, throw a TypeError exception.\n", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/prototype/format/en-us-numeric-always.js", "esid": " sec-Intl.RelativeTimeFormat.prototype.format", "description": " Checks the behavior of Intl.RelativeTimeFormat.prototype.format() in English.", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/prototype/format/en-us-numeric-auto.js", "esid": " sec-Intl.RelativeTimeFormat.prototype.format", "description": " Checks the behavior of Intl.RelativeTimeFormat.prototype.format() in English.", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/prototype/format/en-us-style-short.js", "esid": " sec-Intl.RelativeTimeFormat.prototype.format", "description": " Checks the behavior of Intl.RelativeTimeFormat.prototype.format() in English.", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/prototype/format/length.js", "esid": " sec-Intl.RelativeTimeFormat.prototype.format", "description": " Checks the \"length\" property of Intl.RelativeTimeFormat.prototype.format().", "info": " |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nThe RelativeTimeFormat constructor is a standard built-in property of the Intl object.\nEvery built-in function object, including constructors, has a length property whose value is an integer. Unless otherwise specified, this value is equal to the largest number of named arguments shown in the subclause headings for the function description. Optional parameters (which are indicated with brackets: [ ]) or rest parameters (which are shown using the form \u00ab...name\u00bb) are not included in the default argument count.\nUnless otherwise specified, the length property of a built-in function object has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/prototype/format/name.js", "esid": " sec-Intl.RelativeTimeFormat.prototype.format", "description": " Checks the \"name\" property of Intl.RelativeTimeFormat.prototype.format().", "info": " |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, that is not identified as an anonymous function has a name property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification.\nUnless otherwise specified, the name property of a built-in function object, if it exists, has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/prototype/format/prop-desc.js", "esid": " sec-Intl.RelativeTimeFormat.prototype.format", "description": " Checks the \"format\" property of the RelativeTimeFormat prototype object.", "info": " |Intl.RelativeTimeFormat.prototype.format ()\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js"], "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/prototype/format/unit-invalid.js", "esid": " sec-Intl.RelativeTimeFormat.prototype.format", "description": " Checks the handling of invalid unit arguments to Intl.RelativeTimeFormat.prototype.format().", "info": " |SingularRelativeTimeUnit ( unit )\n\n10. If unit is not one of \"second\", \"minute\", \"hour\", \"day\", \"week\", \"month\", \"quarter\", \"year\", throw a RangeError exception.\n\n", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/prototype/format/unit-plural.js", "esid": " sec-Intl.RelativeTimeFormat.prototype.format", "description": " Checks the handling of plural unit arguments to Intl.RelativeTimeFormat.prototype.format().", "info": " |SingularRelativeTimeUnit ( unit )\n\n2. If unit is \"seconds\", return \"second\".\n3. If unit is \"minutes\", return \"minute\".\n4. If unit is \"hours\", return \"hour\".\n5. If unit is \"days\", return \"day\".\n6. If unit is \"weeks\", return \"week\".\n7. If unit is \"months\", return \"month\".\n8. If unit is \"quarters\", return \"quarter\".\n9. If unit is \"years\", return \"year\".\n\n", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/prototype/format/value-non-finite.js", "esid": " sec-Intl.RelativeTimeFormat.prototype.format", "description": " Checks the handling of invalid value arguments to Intl.RelativeTimeFormat.prototype.format().", "info": " |Intl.RelativeTimeFormat.prototype.format( value, unit )\n\n3. Let value be ? ToNumber(value).\n\nPartitionRelativeTimePattern ( relativeTimeFormat, value, unit )\n\n4. If isFinite(value) is false, then throw a RangeError exception.\n\n", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/prototype/format/value-symbol.js", "esid": " sec-Intl.RelativeTimeFormat.prototype.format", "description": " Checks the handling of invalid value arguments to Intl.RelativeTimeFormat.prototype.format().", "info": " |Intl.RelativeTimeFormat.prototype.format( value, unit )\n\n3. Let value be ? ToNumber(value).\n\n", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/prototype/format/value-tonumber.js", "esid": " sec-Intl.RelativeTimeFormat.prototype.format", "description": " Checks the handling of non-number value arguments to Intl.RelativeTimeFormat.prototype.format().", "info": " |Intl.RelativeTimeFormat.prototype.format( value, unit )\n\n3. Let value be ? ToNumber(value).\n\n", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/prototype/prop-desc.js", "esid": " sec-Intl.RelativeTimeFormat.prototype", "description": " >Checks the \"prototype\" property of the RelativeTimeFormat constructor.\n", "info": " |Intl.RelativeTimeFormat.prototype\n\nThe value of Intl.RelativeTimeFormat.prototype is %RelativeTimeFormatPrototype%.\n\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/prototype/resolvedOptions/branding.js", "esid": " sec-Intl.RelativeTimeFormat.prototype.resolvedOptions", "description": " Verifies the branding check for the \"resolvedOptions\" function of the RelativeTimeFormat prototype object.", "info": " |Intl.RelativeTimeFormat.prototype.resolvedOptions ()\n\n2. If Type(relativeTimeFormat) is not Object or relativeTimeFormat does not have an [[InitializedRelativeTimeFormat]] internal slot whose value is true, throw a TypeError exception.\n", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/prototype/resolvedOptions/caching.js", "esid": " sec-Intl.RelativeTimeFormat.prototype.resolvedOptions", "description": " Verifies that the return value of Intl.RelativeTimeFormat.prototype.resolvedOptions() is not cached.", "info": " |Intl.RelativeTimeFormat.prototype.resolvedOptions ()\n\n4. Let options be ! ObjectCreate(%ObjectPrototype%).\n", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/prototype/resolvedOptions/length.js", "esid": " sec-Intl.RelativeTimeFormat.prototype.resolvedOptions", "description": " Checks the \"length\" property of Intl.RelativeTimeFormat.prototype.resolvedOptions().", "info": " |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nThe RelativeTimeFormat constructor is a standard built-in property of the Intl object.\nEvery built-in function object, including constructors, has a length property whose value is an integer. Unless otherwise specified, this value is equal to the largest number of named arguments shown in the subclause headings for the function description. Optional parameters (which are indicated with brackets: [ ]) or rest parameters (which are shown using the form \u00ab...name\u00bb) are not included in the default argument count.\nUnless otherwise specified, the length property of a built-in function object has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/prototype/resolvedOptions/name.js", "esid": " sec-Intl.RelativeTimeFormat.prototype.resolvedOptions", "description": " Checks the \"name\" property of Intl.RelativeTimeFormat.prototype.resolvedOptions().", "info": " |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, that is not identified as an anonymous function has a name property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification.\nUnless otherwise specified, the name property of a built-in function object, if it exists, has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/prototype/resolvedOptions/prop-desc.js", "esid": " sec-Intl.RelativeTimeFormat.prototype.resolvedOptions", "description": " Checks the \"resolvedOptions\" property of the RelativeTimeFormat prototype object.", "info": " |Intl.RelativeTimeFormat.prototype.resolvedOptions ()\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js"], "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/prototype/resolvedOptions/type.js", "esid": " sec-Intl.RelativeTimeFormat.prototype.resolvedOptions", "description": " Checks the properties of the result of Intl.RelativeTimeFormat.prototype.resolvedOptions().", "info": " |Intl.RelativeTimeFormat.prototype.resolvedOptions ()\n\n4. Let options be ! ObjectCreate(%ObjectPrototype%).\n5. For each row of Table 1, except the header row, do\nd. Perform ! CreateDataPropertyOrThrow(options, p, v).\n", "includes": ["propertyHelper.js"], "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/prototype/toStringTag/toString.js", "esid": " sec-intl.RelativeTimeFormat.prototype-@@tostringtag", "description": " >Checks Object.prototype.toString with Intl.RelativeTimeFormat objects.\n", "info": " |Intl.RelativeTimeFormat.prototype[ @@toStringTag ]\n\nThe initial value of the @@toStringTag property is the string value \"Intl.RelativeTimeFormat\".\n", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/prototype/toStringTag/toStringTag.js", "esid": " sec-intl.RelativeTimeFormat.prototype-@@tostringtag", "description": " >Checks the @@toStringTag property of the RelativeTimeFormat prototype object.\n", "info": " |Intl.RelativeTimeFormat.prototype[ @@toStringTag ]\n\nThe initial value of the @@toStringTag property is the string value \"Intl.RelativeTimeFormat\".\n\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.RelativeTimeFormat", "Symbol.toStringTag"]}, {"path": "./test262-main/test/intl402/language-tags-invalid.js", "version": 5, "esid": " 6.2.2_c", "description": " >Tests that language tags with invalid subtag sequences are not\naccepted.\n", "author": " Norbert Lindenberg", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/supportedLocalesOf-returned-array-elements-are-not-frozen.js", "version": 5, "esid": " 9.2.8_4", "description": " >Tests that the array returned by SupportedLocales is extensible,\nwritable and configurable.\n", "author": " Norbert Lindenberg", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/language/comments/hashbang/eval-indirect.js", "esid": " pending", "description": " >Hashbang comments should be available in Script evaluator contexts. (indirect eval)\n", "info": " |HashbangComment::\n#! SingleLineCommentChars[opt]\n", "features": ["hashbang"]}, {"path": "./test262-main/test/language/comments/hashbang/eval.js", "esid": " pending", "description": " >Hashbang comments should be available in Script evaluator contexts. (direct eval)\n", "info": " |HashbangComment::\n#! SingleLineCommentChars[opt]\n", "features": ["hashbang"]}, {"path": "./test262-main/test/language/comments/hashbang/no-line-separator.js", "esid": " pending", "description": " >Hashbang comments should not require a newline afterwards\n", "info": " |HashbangComment::\n#! SingleLineCommentChars[opt]\n", "features": ["hashbang"]}, {"path": "./test262-main/test/language/eval-code/direct/arrow-fn-body-cntns-arguments-func-decl-arrow-func-declare-arguments-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| function declaration.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/arrow-fn-body-cntns-arguments-lex-bind-arrow-func-declare-arguments-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| lexical binding.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/arrow-fn-body-cntns-arguments-var-bind-arrow-func-declare-arguments-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| var-binding.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/expressions/addition/bigint-and-number.js", "esid": " sec-addition-operator-plus-runtime-semantics-evaluation", "description": " Mixing BigInt and Number produces a TypeError for addition operator", "features": ["BigInt"], "info": " |Let lprim be ? ToPrimitive(lval).\nLet rprim be ? ToPrimitive(rval).\n...\nLet lnum be ? ToNumeric(lprim)\nLet rnum be ? ToNumeric(rprim)\nIf Type(lnum) does not equal Type(rnum), throw a TypeError exception.\n"}, {"path": "./test262-main/test/language/expressions/addition/bigint-arithmetic.js", "esid": " sec-addition-operator-plus-runtime-semantics-evaluation", "description": " BigInt addition arithmetic", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/addition/bigint-errors.js", "description": " addition operator ToNumeric with BigInt operands", "esid": " sec-addition-operator-plus-runtime-semantics-evaluation", "features": ["BigInt", "Symbol", "Symbol.toPrimitive", "computed-property-names"]}, {"path": "./test262-main/test/language/expressions/addition/bigint-toprimitive.js", "description": " addition operator ToNumeric with BigInt operands", "esid": " sec-addition-operator-plus-runtime-semantics-evaluation", "features": ["BigInt", "Symbol.toPrimitive", "computed-property-names"]}, {"path": "./test262-main/test/language/expressions/addition/bigint-wrapped-values.js", "description": " addition operator ToNumeric with BigInt operands", "esid": " sec-addition-operator-plus-runtime-semantics-evaluation", "features": ["BigInt", "Symbol.toPrimitive", "computed-property-names"]}, {"path": "./test262-main/test/language/expressions/addition/coerce-bigint-to-string.js", "description": " ToString is applied BigInt values in an additive expression with another string", "esid": " prod-AdditiveExpression", "info": " |AdditiveExpression: AdditiveExpression + MultiplicativeExpression\n\n...\n7. If Type(lprim) is String or Type(rprim) is String, then\na. Let lstr be ? ToString(lprim).\nb. Let rstr be ? ToString(rprim).\nc. Return the String that is the result of concatenating lstr and rstr.\n...\n\nToString Applied to the BigInt Type\n\n1. If i is less than zero, return the String concatenation of the String \"-\" and ToString(-i).\n2. Return the String consisting of the code units of the digits of the decimal representation of i.\n", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/arrow-function/unscopables-with-in-nested-fn.js", "description": " Symbol.unscopables behavior across scope boundaries (arrow function expression)", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["globalThis", "Symbol.unscopables"], "flags": ["generated", "noStrict"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n...\nLet envRec be lex's EnvironmentRecord.\nLet exists be ? envRec.HasBinding(name).\n\nHasBinding\n\n...\nIf the withEnvironment flag of envRec is false, return true.\nLet unscopables be ? Get(bindings, @@unscopables).\nIf Type(unscopables) is Object, then\nLet blocked be ToBoolean(? Get(unscopables, N)).\nIf blocked is true, return false.\n\n(The `with` Statement) Runtime Semantics: Evaluation\n\n...\nSet the withEnvironment flag of newEnv\u2019s EnvironmentRecord to true.\n...\n\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/unscopables-with.js", "description": " Symbol.unscopables behavior across scope boundaries (arrow function expression)", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["globalThis", "Symbol.unscopables"], "flags": ["generated", "noStrict"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n...\nLet envRec be lex's EnvironmentRecord.\nLet exists be ? envRec.HasBinding(name).\n\nHasBinding\n\n...\nIf the withEnvironment flag of envRec is false, return true.\nLet unscopables be ? Get(bindings, @@unscopables).\nIf Type(unscopables) is Object, then\nLet blocked be ToBoolean(? Get(unscopables, N)).\nIf blocked is true, return false.\n\n(The `with` Statement) Runtime Semantics: Evaluation\n\n...\nSet the withEnvironment flag of newEnv\u2019s EnvironmentRecord to true.\n...\n\n"}, {"path": "./test262-main/test/language/expressions/bitwise-and/bigint-and-number.js", "esid": " sec-binary-bitwise-operators-runtime-semantics-evaluation", "description": " Mixing BigInt and Number produces a TypeError for bitwise-and operator", "features": ["BigInt"], "info": " |Let lnum be ? ToNumeric(leftValue).\nLet rnum be ? ToNumeric(rightValue).\nIf Type(lnum) does not equal Type(rnum), throw a TypeError exception.\n"}, {"path": "./test262-main/test/language/expressions/bitwise-and/bigint-errors.js", "description": " bitwise-and operator ToNumeric with BigInt operands", "esid": " sec-binary-bitwise-operators-runtime-semantics-evaluation", "features": ["BigInt", "Symbol", "Symbol.toPrimitive", "computed-property-names"]}, {"path": "./test262-main/test/language/expressions/bitwise-and/bigint-non-primitive.js", "description": " Bitwise AND for BigInt non-primitive values", "esid": " sec-binary-bitwise-operators-runtime-semantics-evaluation", "info": " |5. Let lnum be ? ToNumeric(lval).\n6. Let rnum be ? ToNumeric(rval).\n...\n8. Let T be Type(lnum).\n9. If @ is &, return T::bitwiseAND(lnum, rnum).\n\n", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/bitwise-and/bigint-toprimitive.js", "description": " bitwise-and operator ToNumeric with BigInt operands", "esid": " sec-binary-bitwise-operators-runtime-semantics-evaluation", "features": ["BigInt", "Symbol.toPrimitive", "computed-property-names"]}, {"path": "./test262-main/test/language/expressions/bitwise-and/bigint-wrapped-values.js", "description": " bitwise-and operator ToNumeric with BigInt operands", "esid": " sec-binary-bitwise-operators-runtime-semantics-evaluation", "features": ["BigInt", "Symbol.toPrimitive", "computed-property-names"]}, {"path": "./test262-main/test/language/expressions/bitwise-and/bigint.js", "description": " Bitwise AND for BigInt values", "esid": " sec-bitwise-op", "info": " |BitwiseOp(op, x, y)\n\n1. Let result be 0.\n2. Let shift be 0.\n3. Repeat, until (x = 0 or x = -1) and (y = 0 or y = -1),\na. Let xDigit be x modulo 2.\nb. Let yDigit be y modulo 2.\nc. Let result be result + 2**shift * op(xDigit, yDigit)\nd. Let shift be shift + 1.\ne. Let x be (x - xDigit) / 2.\nf. Let y be (y - yDigit) / 2.\n4. If op(x modulo 2, y modulo 2) \u2260 0,\na. Let result be result - 2**shift. NOTE: This extends the sign.\n5. Return result.\n\n", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/bitwise-not/bigint-non-primitive.js", "description": " Bitwise NOT for BigInt object wrappers", "esid": " sec-bitwise-not-operator-runtime-semantics-evaluation", "info": " |Runtime Semantics: Evaluation\nUnaryExpression : ~ UnaryExpression\n\n1. Let expr be the result of evaluating UnaryExpression.\n2. Let oldValue be ? ToNumeric(? GetValue(expr)).\n3. Let T be Type(oldValue).\n4. Return ? T::bitwiseNOT(oldValue).\n\n", "features": ["BigInt", "Symbol.toPrimitive"]}, {"path": "./test262-main/test/language/expressions/bitwise-not/bigint.js", "description": " Bitwise NOT for BigInt values", "esid": " sec-numeric-types-bigint-bitwiseNOT", "info": " |BigInt::bitwiseNOT (x)\n\nThe abstract operation BigInt::bitwiseNOT with an argument x of BigInt type returns the one's complement of x; that is, -x - 1.\n\n", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/bitwise-or/bigint-and-number.js", "esid": " sec-binary-bitwise-operators-runtime-semantics-evaluation", "description": " Mixing BigInt and Number produces a TypeError for bitwise-or operator", "features": ["BigInt"], "info": " |Let lnum be ? ToNumeric(leftValue).\nLet rnum be ? ToNumeric(rightValue).\nIf Type(lnum) does not equal Type(rnum), throw a TypeError exception.\n"}, {"path": "./test262-main/test/language/expressions/bitwise-or/bigint-errors.js", "description": " bitwise-or operator ToNumeric with BigInt operands", "esid": " sec-binary-bitwise-operators-runtime-semantics-evaluation", "features": ["BigInt", "Symbol", "Symbol.toPrimitive", "computed-property-names"]}, {"path": "./test262-main/test/language/expressions/bitwise-or/bigint-non-primitive.js", "description": " Bitwise OR for BigInt non-primitive values", "esid": " sec-binary-bitwise-operators-runtime-semantics-evaluation", "info": " |5. Let lnum be ? ToNumeric(lval).\n6. Let rnum be ? ToNumeric(rval).\n...\n8. Let T be Type(lnum).\n...\n10. If @ is |, return T::bitwiseOR(lnum, rnum).\n\n", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/bitwise-or/bigint-toprimitive.js", "description": " bitwise-or operator ToNumeric with BigInt operands", "esid": " sec-binary-bitwise-operators-runtime-semantics-evaluation", "features": ["BigInt", "Symbol.toPrimitive", "computed-property-names"]}, {"path": "./test262-main/test/language/expressions/bitwise-or/bigint-wrapped-values.js", "description": " bitwise-or operator ToNumeric with BigInt operands", "esid": " sec-binary-bitwise-operators-runtime-semantics-evaluation", "features": ["BigInt", "Symbol.toPrimitive", "computed-property-names"]}, {"path": "./test262-main/test/language/expressions/bitwise-or/bigint.js", "description": " Bitwise OR for BigInt values", "esid": " sec-bitwise-op", "info": " |BitwiseOp(op, x, y)\n\n1. Let result be 0.\n2. Let shift be 0.\n3. Repeat, until (x = 0 or x = -1) and (y = 0 or y = -1),\na. Let xDigit be x modulo 2.\nb. Let yDigit be y modulo 2.\nc. Let result be result + 2**shift * op(xDigit, yDigit)\nd. Let shift be shift + 1.\ne. Let x be (x - xDigit) / 2.\nf. Let y be (y - yDigit) / 2.\n4. If op(x modulo 2, y modulo 2) \u2260 0,\na. Let result be result - 2**shift. NOTE: This extends the sign.\n5. Return result.\n\n", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/bitwise-xor/bigint-and-number.js", "esid": " sec-binary-bitwise-operators-runtime-semantics-evaluation", "description": " Mixing BigInt and Number produces a TypeError for bitwise-xor operator", "features": ["BigInt"], "info": " |Let lnum be ? ToNumeric(leftValue).\nLet rnum be ? ToNumeric(rightValue).\nIf Type(lnum) does not equal Type(rnum), throw a TypeError exception.\n"}, {"path": "./test262-main/test/language/expressions/bitwise-xor/bigint-errors.js", "description": " bitwise-xor operator ToNumeric with BigInt operands", "esid": " sec-binary-bitwise-operators-runtime-semantics-evaluation", "features": ["BigInt", "Symbol", "Symbol.toPrimitive", "computed-property-names"]}, {"path": "./test262-main/test/language/expressions/bitwise-xor/bigint-non-primitive.js", "description": " Bitwise XOR for BigInt non-primitive values", "esid": " sec-binary-bitwise-operators-runtime-semantics-evaluation", "info": " |5. Let lnum be ? ToNumeric(lval).\n6. Let rnum be ? ToNumeric(rval).\n...\n8. Let T be Type(lnum).\n...\n11. Otherwise, @ is ^; return T::bitwiseXOR(lnum, rnum).\n\n", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/bitwise-xor/bigint-toprimitive.js", "description": " bitwise-xor operator ToNumeric with BigInt operands", "esid": " sec-binary-bitwise-operators-runtime-semantics-evaluation", "features": ["BigInt", "Symbol.toPrimitive", "computed-property-names"]}, {"path": "./test262-main/test/language/expressions/bitwise-xor/bigint-wrapped-values.js", "description": " bitwise-xor operator ToNumeric with BigInt operands", "esid": " sec-binary-bitwise-operators-runtime-semantics-evaluation", "features": ["BigInt", "Symbol.toPrimitive", "computed-property-names"]}, {"path": "./test262-main/test/language/expressions/bitwise-xor/bigint.js", "description": " Bitwise XOR for BigInt values", "esid": " sec-bitwise-op", "info": " |BitwiseOp(op, x, y)\n\n1. Let result be 0.\n2. Let shift be 0.\n3. Repeat, until (x = 0 or x = -1) and (y = 0 or y = -1),\na. Let xDigit be x modulo 2.\nb. Let yDigit be y modulo 2.\nc. Let result be result + 2**shift * op(xDigit, yDigit)\nd. Let shift be shift + 1.\ne. Let x be (x - xDigit) / 2.\nf. Let y be (y - yDigit) / 2.\n4. If op(x modulo 2, y modulo 2) \u2260 0,\na. Let result be result - 2**shift. NOTE: This extends the sign.\n5. Return result.\n\n", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/class/subclass-builtins/subclass-BigInt64Array.js", "description": " new SubBigInt64Array() instanceof BigInt64Array (Subclass instanceof Heritage)", "features": ["TypedArray", "BigInt"], "flags": ["generated"]}, {"path": "./test262-main/test/language/expressions/class/subclass-builtins/subclass-BigUint64Array.js", "description": " new SubBigUint64Array() instanceof BigUint64Array (Subclass instanceof Heritage)", "features": ["TypedArray", "BigInt"], "flags": ["generated"]}, {"path": "./test262-main/test/language/expressions/division/bigint-and-number.js", "esid": " sec-multiplicative-operators-runtime-semantics-evaluation", "description": " Mixing BigInt and Number produces a TypeError for division operator", "features": ["BigInt"], "info": " |Let lnum be ? ToNumeric(leftValue).\nLet rnum be ? ToNumeric(rightValue).\nIf Type(lnum) does not equal Type(rnum), throw a TypeError exception.\n"}, {"path": "./test262-main/test/language/expressions/division/bigint-arithmetic.js", "esid": " sec-multiplicative-operators-runtime-semantics-evaluation", "description": " BigInt division arithmetic", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/division/bigint-complex-infinity.js", "description": " BigInt division of complex infinity (1/0)", "esid": " sec-multiplicative-operators-runtime-semantics-evaluation", "info": " |Runtime Semantics: Evaluation\n\nMultiplicativeExpression: MultiplicativeExpression MultiplicativeOperator ExponentiationExpression\n\n...\n11. If MultiplicativeOperator is /, return T::divide(lnum, rnum).\n...\n\nBigInt::divide (x, y)\n\n1. If y is 0n, throw a RangeError exception.\n...\n", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/division/bigint-errors.js", "description": " division operator ToNumeric with BigInt operands", "esid": " sec-multiplicative-operators-runtime-semantics-evaluation", "features": ["BigInt", "Symbol", "Symbol.toPrimitive", "computed-property-names"]}, {"path": "./test262-main/test/language/expressions/division/bigint-toprimitive.js", "description": " division operator ToNumeric with BigInt operands", "esid": " sec-multiplicative-operators-runtime-semantics-evaluation", "features": ["BigInt", "Symbol.toPrimitive", "computed-property-names"]}, {"path": "./test262-main/test/language/expressions/division/bigint-wrapped-values.js", "description": " division operator ToNumeric with BigInt operands", "esid": " sec-multiplicative-operators-runtime-semantics-evaluation", "features": ["BigInt", "Symbol.toPrimitive", "computed-property-names"]}, {"path": "./test262-main/test/language/expressions/does-not-equals/bigint-and-bigint.js", "description": " Non-strict inequality comparison of BigInt values", "esid": " sec-abstract-equality-comparison", "info": " |1. If Type(x) is the same as Type(y), then\na. Return the result of performing Strict Equality Comparison x === y.\n\nsec-numeric-types-bigint-equal\nBigInt::equal (x, y)\n\nThe abstract operation BigInt::equal with two arguments x and y of BigInt type returns true if x and y have the same mathematical integer value and false otherwise.\n\n", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/does-not-equals/bigint-and-boolean.js", "description": " Non-strict inequality comparison of BigInt and Boolean values", "esid": " sec-abstract-equality-comparison", "info": " |8. If Type(x) is Boolean, return the result of the comparison ToNumber(x) == y.\n9. If Type(y) is Boolean, return the result of the comparison x == ToNumber(y).\n...\n12. If Type(x) is BigInt and Type(y) is Number, or if Type(x) is Number and Type(y) is BigInt,\n...\nb. If the mathematical value of x is equal to the mathematical value of y, return true, otherwise return false.\n\n", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/does-not-equals/bigint-and-incomparable-primitive.js", "description": " Non-strict inequality comparison of BigInt and miscellaneous primitive values", "esid": " sec-equality-operators-runtime-semantics-evaluation", "info": " |EqualityExpression : EqualityExpression != RelationalExpression\n...\n5. Return the result of performing Abstract Equality Comparison rval == lval.\n6. If r is true, return false. Otherwise, return true.\n\n", "features": ["BigInt", "Symbol"]}, {"path": "./test262-main/test/language/expressions/does-not-equals/bigint-and-non-finite.js", "description": " Non-strict inequality comparison of BigInt and non-finite Number values", "esid": " sec-abstract-equality-comparison", "info": " |12. If Type(x) is BigInt and Type(y) is Number, or if Type(x) is Number and Type(y) is BigInt,\na. If x or y are any of NaN, +\u221e, or -\u221e, return false.\n\n", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/does-not-equals/bigint-and-number-extremes.js", "description": " Non-strict inequality comparison of BigInt and large Number values", "esid": " sec-abstract-equality-comparison", "info": " |12. If Type(x) is BigInt and Type(y) is Number, or if Type(x) is Number and Type(y) is BigInt,\nb. If the mathematical value of x is equal to the mathematical value of y, return true, otherwise return false.\n\n", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/does-not-equals/bigint-and-number.js", "description": " Non-strict inequality comparison of BigInt and Number values", "esid": " sec-abstract-equality-comparison", "info": " |12. If Type(x) is BigInt and Type(y) is Number, or if Type(x) is Number and Type(y) is BigInt,\nb. If the mathematical value of x is equal to the mathematical value of y, return true, otherwise return false.\n\n", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/does-not-equals/bigint-and-object.js", "description": " Non-strict inequality comparison of BigInt values and non-primitive objects", "esid": " sec-abstract-equality-comparison", "info": " |10. If Type(x) is either String, Number, BigInt, or Symbol and Type(y) is Object, return the result of the comparison x == ? ToPrimitive(y).\n11. If Type(x) is Object and Type(y) is either String, Number, BigInt, or Symbol, return the result of the comparison ? ToPrimitive(x) == y.\n\nthen after the recursion:\n\n1. If Type(x) is the same as Type(y), then\na. Return the result of performing Strict Equality Comparison x === y.\n...\n6. If Type(x) is BigInt and Type(y) is String,\na. Let n be StringToBigInt(y).\nb. If n is NaN, return false.\nc. Return the result of x == n.\n7. If Type(x) is String and Type(y) is BigInt, return the result of y == x.\n\n", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/does-not-equals/bigint-and-string.js", "description": " Non-strict inequality comparison of BigInt and String values", "esid": " sec-abstract-equality-comparison", "info": " |1. If Type(x) is different from Type(y), return false.\n\n", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/dynamic-import/assign-expr-get-value-abrupt-throws.js", "description": " >Return Abrupt from the GetValue evaluation on the given AssignmentExpression\n", "esid": " sec-import-call-runtime-semantics-evaluation", "info": " |Import Calls\n\nRuntime Semantics: Evaluation\n\nImportCall : import(AssignmentExpression)\n\n1. Let referencingScriptOrModule be ! GetActiveScriptOrModule().\n2. Let argRef be the result of evaluating AssignmentExpression.\n3. Let specifier be ? GetValue(argRef).\n4. Let promiseCapability be ! NewPromiseCapability(%Promise%).\n5. Let specifierString be ToString(specifier).\n6. IfAbruptRejectPromise(specifierString, promiseCapability).\n7. Perform ! HostImportModuleDynamically(referencingScriptOrModule, specifierString, promiseCapability).\n8. Return promiseCapability.[[Promise]].\n", "features": ["dynamic-import"]}, {"path": "./test262-main/test/language/expressions/dynamic-import/assignment-expression/yield-star.js", "description": " >Dynamic Import receives an AssignmentExpression (yield [no LineTerminator here] AssignmentExpression)\n", "esid": " prod-ImportCall", "info": " |ImportCall [Yield]:\nimport ( AssignmentExpression[+In, ?Yield] )\n\nAssignmentExpression[In, Yield, Await]:\nConditionalExpression[?In, ?Yield, ?Await]\n[+Yield]YieldExpression[?In, ?Await]\nArrowFunction[?In, ?Yield, ?Await]\nAsyncArrowFunction[?In, ?Yield, ?Await]\nLeftHandSideExpression[?Yield, ?Await] = AssignmentExpression[?In, ?Yield, ?Await]\nLeftHandSideExpression[?Yield, ?Await] AssignmentOperator AssignmentExpression[?In, ?Yield, ?Await]\n", "features": ["dynamic-import"]}, {"path": "./test262-main/test/language/expressions/dynamic-import/syntax/valid/nested-arrow-assignment-expression-empty-str-is-valid-assign-expr.js", "description": " Calling import('') (nested arrow syntax)", "esid": " sec-import-call-runtime-semantics-evaluation", "features": ["dynamic-import"], "flags": ["generated"], "info": " |ImportCall :\nimport( AssignmentExpression )\n\n1. Let referencingScriptOrModule be ! GetActiveScriptOrModule().\n2. Assert: referencingScriptOrModule is a Script Record or Module Record (i.e. is not null).\n3. Let argRef be the result of evaluating AssignmentExpression.\n4. Let specifier be ? GetValue(argRef).\n5. Let promiseCapability be ! NewPromiseCapability(%Promise%).\n6. Let specifierString be ToString(specifier).\n7. IfAbruptRejectPromise(specifierString, promiseCapability).\n8. Perform ! HostImportModuleDynamically(referencingScriptOrModule, specifierString, promiseCapability).\n9. Return promiseCapability.[[Promise]].\n\n"}, {"path": "./test262-main/test/language/expressions/dynamic-import/syntax/valid/nested-arrow-assignment-expression-nested-imports.js", "description": " ImportCall is a CallExpression can be nested in other import calls (nested arrow syntax)", "esid": " sec-import-call-runtime-semantics-evaluation", "features": ["dynamic-import"], "flags": ["generated"], "info": " |ImportCall :\nimport( AssignmentExpression )\n\n1. Let referencingScriptOrModule be ! GetActiveScriptOrModule().\n2. Assert: referencingScriptOrModule is a Script Record or Module Record (i.e. is not null).\n3. Let argRef be the result of evaluating AssignmentExpression.\n4. Let specifier be ? GetValue(argRef).\n5. Let promiseCapability be ! NewPromiseCapability(%Promise%).\n6. Let specifierString be ToString(specifier).\n7. IfAbruptRejectPromise(specifierString, promiseCapability).\n8. Perform ! HostImportModuleDynamically(referencingScriptOrModule, specifierString, promiseCapability).\n9. Return promiseCapability.[[Promise]].\n\n"}, {"path": "./test262-main/test/language/expressions/dynamic-import/syntax/valid/nested-arrow-assignment-expression-script-code-valid.js", "description": " import() can be used in script code (nested arrow syntax)", "esid": " sec-import-call-runtime-semantics-evaluation", "features": ["dynamic-import"], "flags": ["generated"], "info": " |ImportCall :\nimport( AssignmentExpression )\n\n1. Let referencingScriptOrModule be ! GetActiveScriptOrModule().\n2. Assert: referencingScriptOrModule is a Script Record or Module Record (i.e. is not null).\n3. Let argRef be the result of evaluating AssignmentExpression.\n4. Let specifier be ? GetValue(argRef).\n5. Let promiseCapability be ! NewPromiseCapability(%Promise%).\n6. Let specifierString be ToString(specifier).\n7. IfAbruptRejectPromise(specifierString, promiseCapability).\n8. Perform ! HostImportModuleDynamically(referencingScriptOrModule, specifierString, promiseCapability).\n9. Return promiseCapability.[[Promise]].\n\n"}, {"path": "./test262-main/test/language/expressions/dynamic-import/syntax/valid/nested-arrow-empty-str-is-valid-assign-expr.js", "description": " Calling import('') (nested arrow syntax)", "esid": " sec-import-call-runtime-semantics-evaluation", "features": ["dynamic-import"], "flags": ["generated"], "info": " |ImportCall :\nimport( AssignmentExpression )\n\n1. Let referencingScriptOrModule be ! GetActiveScriptOrModule().\n2. Assert: referencingScriptOrModule is a Script Record or Module Record (i.e. is not null).\n3. Let argRef be the result of evaluating AssignmentExpression.\n4. Let specifier be ? GetValue(argRef).\n5. Let promiseCapability be ! NewPromiseCapability(%Promise%).\n6. Let specifierString be ToString(specifier).\n7. IfAbruptRejectPromise(specifierString, promiseCapability).\n8. Perform ! HostImportModuleDynamically(referencingScriptOrModule, specifierString, promiseCapability).\n9. Return promiseCapability.[[Promise]].\n\n"}, {"path": "./test262-main/test/language/expressions/dynamic-import/syntax/valid/nested-arrow-nested-imports.js", "description": " ImportCall is a CallExpression can be nested in other import calls (nested arrow syntax)", "esid": " sec-import-call-runtime-semantics-evaluation", "features": ["dynamic-import"], "flags": ["generated"], "info": " |ImportCall :\nimport( AssignmentExpression )\n\n1. Let referencingScriptOrModule be ! GetActiveScriptOrModule().\n2. Assert: referencingScriptOrModule is a Script Record or Module Record (i.e. is not null).\n3. Let argRef be the result of evaluating AssignmentExpression.\n4. Let specifier be ? GetValue(argRef).\n5. Let promiseCapability be ! NewPromiseCapability(%Promise%).\n6. Let specifierString be ToString(specifier).\n7. IfAbruptRejectPromise(specifierString, promiseCapability).\n8. Perform ! HostImportModuleDynamically(referencingScriptOrModule, specifierString, promiseCapability).\n9. Return promiseCapability.[[Promise]].\n\n"}, {"path": "./test262-main/test/language/expressions/dynamic-import/syntax/valid/nested-arrow-script-code-valid.js", "description": " import() can be used in script code (nested arrow syntax)", "esid": " sec-import-call-runtime-semantics-evaluation", "features": ["dynamic-import"], "flags": ["generated"], "info": " |ImportCall :\nimport( AssignmentExpression )\n\n1. Let referencingScriptOrModule be ! GetActiveScriptOrModule().\n2. Assert: referencingScriptOrModule is a Script Record or Module Record (i.e. is not null).\n3. Let argRef be the result of evaluating AssignmentExpression.\n4. Let specifier be ? GetValue(argRef).\n5. Let promiseCapability be ! NewPromiseCapability(%Promise%).\n6. Let specifierString be ToString(specifier).\n7. IfAbruptRejectPromise(specifierString, promiseCapability).\n8. Perform ! HostImportModuleDynamically(referencingScriptOrModule, specifierString, promiseCapability).\n9. Return promiseCapability.[[Promise]].\n\n"}, {"path": "./test262-main/test/language/expressions/dynamic-import/syntax/valid/nested-async-arrow-function-await-empty-str-is-valid-assign-expr.js", "description": " Calling import('') (nested in async arrow function)", "esid": " sec-import-call-runtime-semantics-evaluation", "features": ["dynamic-import"], "flags": ["generated"], "info": " |ImportCall :\nimport( AssignmentExpression )\n\n1. Let referencingScriptOrModule be ! GetActiveScriptOrModule().\n2. Assert: referencingScriptOrModule is a Script Record or Module Record (i.e. is not null).\n3. Let argRef be the result of evaluating AssignmentExpression.\n4. Let specifier be ? GetValue(argRef).\n5. Let promiseCapability be ! NewPromiseCapability(%Promise%).\n6. Let specifierString be ToString(specifier).\n7. IfAbruptRejectPromise(specifierString, promiseCapability).\n8. Perform ! HostImportModuleDynamically(referencingScriptOrModule, specifierString, promiseCapability).\n9. Return promiseCapability.[[Promise]].\n\n"}, {"path": "./test262-main/test/language/expressions/dynamic-import/syntax/valid/nested-async-arrow-function-await-nested-imports.js", "description": " ImportCall is a CallExpression can be nested in other import calls (nested in async arrow function)", "esid": " sec-import-call-runtime-semantics-evaluation", "features": ["dynamic-import"], "flags": ["generated"], "info": " |ImportCall :\nimport( AssignmentExpression )\n\n1. Let referencingScriptOrModule be ! GetActiveScriptOrModule().\n2. Assert: referencingScriptOrModule is a Script Record or Module Record (i.e. is not null).\n3. Let argRef be the result of evaluating AssignmentExpression.\n4. Let specifier be ? GetValue(argRef).\n5. Let promiseCapability be ! NewPromiseCapability(%Promise%).\n6. Let specifierString be ToString(specifier).\n7. IfAbruptRejectPromise(specifierString, promiseCapability).\n8. Perform ! HostImportModuleDynamically(referencingScriptOrModule, specifierString, promiseCapability).\n9. Return promiseCapability.[[Promise]].\n\n"}, {"path": "./test262-main/test/language/expressions/dynamic-import/syntax/valid/nested-async-arrow-function-await-script-code-valid.js", "description": " import() can be used in script code (nested in async arrow function)", "esid": " sec-import-call-runtime-semantics-evaluation", "features": ["dynamic-import"], "flags": ["generated"], "info": " |ImportCall :\nimport( AssignmentExpression )\n\n1. Let referencingScriptOrModule be ! GetActiveScriptOrModule().\n2. Assert: referencingScriptOrModule is a Script Record or Module Record (i.e. is not null).\n3. Let argRef be the result of evaluating AssignmentExpression.\n4. Let specifier be ? GetValue(argRef).\n5. Let promiseCapability be ! NewPromiseCapability(%Promise%).\n6. Let specifierString be ToString(specifier).\n7. IfAbruptRejectPromise(specifierString, promiseCapability).\n8. Perform ! HostImportModuleDynamically(referencingScriptOrModule, specifierString, promiseCapability).\n9. Return promiseCapability.[[Promise]].\n\n"}, {"path": "./test262-main/test/language/expressions/dynamic-import/syntax/valid/nested-async-arrow-function-return-await-empty-str-is-valid-assign-expr.js", "description": " Calling import('') (nested in async arrow function, returned)", "esid": " sec-import-call-runtime-semantics-evaluation", "features": ["dynamic-import"], "flags": ["generated"], "info": " |ImportCall :\nimport( AssignmentExpression )\n\n1. Let referencingScriptOrModule be ! GetActiveScriptOrModule().\n2. Assert: referencingScriptOrModule is a Script Record or Module Record (i.e. is not null).\n3. Let argRef be the result of evaluating AssignmentExpression.\n4. Let specifier be ? GetValue(argRef).\n5. Let promiseCapability be ! NewPromiseCapability(%Promise%).\n6. Let specifierString be ToString(specifier).\n7. IfAbruptRejectPromise(specifierString, promiseCapability).\n8. Perform ! HostImportModuleDynamically(referencingScriptOrModule, specifierString, promiseCapability).\n9. Return promiseCapability.[[Promise]].\n\n"}, {"path": "./test262-main/test/language/expressions/dynamic-import/syntax/valid/nested-async-arrow-function-return-await-nested-imports.js", "description": " ImportCall is a CallExpression can be nested in other import calls (nested in async arrow function, returned)", "esid": " sec-import-call-runtime-semantics-evaluation", "features": ["dynamic-import"], "flags": ["generated"], "info": " |ImportCall :\nimport( AssignmentExpression )\n\n1. Let referencingScriptOrModule be ! GetActiveScriptOrModule().\n2. Assert: referencingScriptOrModule is a Script Record or Module Record (i.e. is not null).\n3. Let argRef be the result of evaluating AssignmentExpression.\n4. Let specifier be ? GetValue(argRef).\n5. Let promiseCapability be ! NewPromiseCapability(%Promise%).\n6. Let specifierString be ToString(specifier).\n7. IfAbruptRejectPromise(specifierString, promiseCapability).\n8. Perform ! HostImportModuleDynamically(referencingScriptOrModule, specifierString, promiseCapability).\n9. Return promiseCapability.[[Promise]].\n\n"}, {"path": "./test262-main/test/language/expressions/dynamic-import/syntax/valid/nested-async-arrow-function-return-await-script-code-valid.js", "description": " import() can be used in script code (nested in async arrow function, returned)", "esid": " sec-import-call-runtime-semantics-evaluation", "features": ["dynamic-import"], "flags": ["generated"], "info": " |ImportCall :\nimport( AssignmentExpression )\n\n1. Let referencingScriptOrModule be ! GetActiveScriptOrModule().\n2. Assert: referencingScriptOrModule is a Script Record or Module Record (i.e. is not null).\n3. Let argRef be the result of evaluating AssignmentExpression.\n4. Let specifier be ? GetValue(argRef).\n5. Let promiseCapability be ! NewPromiseCapability(%Promise%).\n6. Let specifierString be ToString(specifier).\n7. IfAbruptRejectPromise(specifierString, promiseCapability).\n8. Perform ! HostImportModuleDynamically(referencingScriptOrModule, specifierString, promiseCapability).\n9. Return promiseCapability.[[Promise]].\n\n"}, {"path": "./test262-main/test/language/expressions/dynamic-import/syntax/valid/nested-async-function-await-empty-str-is-valid-assign-expr.js", "description": " Calling import('') (nested arrow syntax)", "esid": " sec-import-call-runtime-semantics-evaluation", "features": ["dynamic-import"], "flags": ["generated"], "info": " |ImportCall :\nimport( AssignmentExpression )\n\n1. Let referencingScriptOrModule be ! GetActiveScriptOrModule().\n2. Assert: referencingScriptOrModule is a Script Record or Module Record (i.e. is not null).\n3. Let argRef be the result of evaluating AssignmentExpression.\n4. Let specifier be ? GetValue(argRef).\n5. Let promiseCapability be ! NewPromiseCapability(%Promise%).\n6. Let specifierString be ToString(specifier).\n7. IfAbruptRejectPromise(specifierString, promiseCapability).\n8. Perform ! HostImportModuleDynamically(referencingScriptOrModule, specifierString, promiseCapability).\n9. Return promiseCapability.[[Promise]].\n\n"}, {"path": "./test262-main/test/language/expressions/dynamic-import/syntax/valid/nested-async-function-await-nested-imports.js", "description": " ImportCall is a CallExpression can be nested in other import calls (nested arrow syntax)", "esid": " sec-import-call-runtime-semantics-evaluation", "features": ["dynamic-import"], "flags": ["generated"], "info": " |ImportCall :\nimport( AssignmentExpression )\n\n1. Let referencingScriptOrModule be ! GetActiveScriptOrModule().\n2. Assert: referencingScriptOrModule is a Script Record or Module Record (i.e. is not null).\n3. Let argRef be the result of evaluating AssignmentExpression.\n4. Let specifier be ? GetValue(argRef).\n5. Let promiseCapability be ! NewPromiseCapability(%Promise%).\n6. Let specifierString be ToString(specifier).\n7. IfAbruptRejectPromise(specifierString, promiseCapability).\n8. Perform ! HostImportModuleDynamically(referencingScriptOrModule, specifierString, promiseCapability).\n9. Return promiseCapability.[[Promise]].\n\n"}, {"path": "./test262-main/test/language/expressions/dynamic-import/syntax/valid/nested-async-function-await-script-code-valid.js", "description": " import() can be used in script code (nested arrow syntax)", "esid": " sec-import-call-runtime-semantics-evaluation", "features": ["dynamic-import"], "flags": ["generated"], "info": " |ImportCall :\nimport( AssignmentExpression )\n\n1. Let referencingScriptOrModule be ! GetActiveScriptOrModule().\n2. Assert: referencingScriptOrModule is a Script Record or Module Record (i.e. is not null).\n3. Let argRef be the result of evaluating AssignmentExpression.\n4. Let specifier be ? GetValue(argRef).\n5. Let promiseCapability be ! NewPromiseCapability(%Promise%).\n6. Let specifierString be ToString(specifier).\n7. IfAbruptRejectPromise(specifierString, promiseCapability).\n8. Perform ! HostImportModuleDynamically(referencingScriptOrModule, specifierString, promiseCapability).\n9. Return promiseCapability.[[Promise]].\n\n"}, {"path": "./test262-main/test/language/expressions/dynamic-import/syntax/valid/nested-async-function-empty-str-is-valid-assign-expr.js", "description": " Calling import('') (nested arrow syntax)", "esid": " sec-import-call-runtime-semantics-evaluation", "features": ["dynamic-import"], "flags": ["generated"], "info": " |ImportCall :\nimport( AssignmentExpression )\n\n1. Let referencingScriptOrModule be ! GetActiveScriptOrModule().\n2. Assert: referencingScriptOrModule is a Script Record or Module Record (i.e. is not null).\n3. Let argRef be the result of evaluating AssignmentExpression.\n4. Let specifier be ? GetValue(argRef).\n5. Let promiseCapability be ! NewPromiseCapability(%Promise%).\n6. Let specifierString be ToString(specifier).\n7. IfAbruptRejectPromise(specifierString, promiseCapability).\n8. Perform ! HostImportModuleDynamically(referencingScriptOrModule, specifierString, promiseCapability).\n9. Return promiseCapability.[[Promise]].\n\n"}, {"path": "./test262-main/test/language/expressions/dynamic-import/syntax/valid/nested-async-function-nested-imports.js", "description": " ImportCall is a CallExpression can be nested in other import calls (nested arrow syntax)", "esid": " sec-import-call-runtime-semantics-evaluation", "features": ["dynamic-import"], "flags": ["generated"], "info": " |ImportCall :\nimport( AssignmentExpression )\n\n1. Let referencingScriptOrModule be ! GetActiveScriptOrModule().\n2. Assert: referencingScriptOrModule is a Script Record or Module Record (i.e. is not null).\n3. Let argRef be the result of evaluating AssignmentExpression.\n4. Let specifier be ? GetValue(argRef).\n5. Let promiseCapability be ! NewPromiseCapability(%Promise%).\n6. Let specifierString be ToString(specifier).\n7. IfAbruptRejectPromise(specifierString, promiseCapability).\n8. Perform ! HostImportModuleDynamically(referencingScriptOrModule, specifierString, promiseCapability).\n9. Return promiseCapability.[[Promise]].\n\n"}, {"path": "./test262-main/test/language/expressions/dynamic-import/syntax/valid/nested-async-function-return-await-empty-str-is-valid-assign-expr.js", "description": " Calling import('') (nested arrow syntax)", "esid": " sec-import-call-runtime-semantics-evaluation", "features": ["dynamic-import"], "flags": ["generated"], "info": " |ImportCall :\nimport( AssignmentExpression )\n\n1. Let referencingScriptOrModule be ! GetActiveScriptOrModule().\n2. Assert: referencingScriptOrModule is a Script Record or Module Record (i.e. is not null).\n3. Let argRef be the result of evaluating AssignmentExpression.\n4. Let specifier be ? GetValue(argRef).\n5. Let promiseCapability be ! NewPromiseCapability(%Promise%).\n6. Let specifierString be ToString(specifier).\n7. IfAbruptRejectPromise(specifierString, promiseCapability).\n8. Perform ! HostImportModuleDynamically(referencingScriptOrModule, specifierString, promiseCapability).\n9. Return promiseCapability.[[Promise]].\n\n"}, {"path": "./test262-main/test/language/expressions/dynamic-import/syntax/valid/nested-async-function-return-await-nested-imports.js", "description": " ImportCall is a CallExpression can be nested in other import calls (nested arrow syntax)", "esid": " sec-import-call-runtime-semantics-evaluation", "features": ["dynamic-import"], "flags": ["generated"], "info": " |ImportCall :\nimport( AssignmentExpression )\n\n1. Let referencingScriptOrModule be ! GetActiveScriptOrModule().\n2. Assert: referencingScriptOrModule is a Script Record or Module Record (i.e. is not null).\n3. Let argRef be the result of evaluating AssignmentExpression.\n4. Let specifier be ? GetValue(argRef).\n5. Let promiseCapability be ! NewPromiseCapability(%Promise%).\n6. Let specifierString be ToString(specifier).\n7. IfAbruptRejectPromise(specifierString, promiseCapability).\n8. Perform ! HostImportModuleDynamically(referencingScriptOrModule, specifierString, promiseCapability).\n9. Return promiseCapability.[[Promise]].\n\n"}, {"path": "./test262-main/test/language/expressions/dynamic-import/syntax/valid/nested-async-function-return-await-script-code-valid.js", "description": " import() can be used in script code (nested arrow syntax)", "esid": " sec-import-call-runtime-semantics-evaluation", "features": ["dynamic-import"], "flags": ["generated"], "info": " |ImportCall :\nimport( AssignmentExpression )\n\n1. Let referencingScriptOrModule be ! GetActiveScriptOrModule().\n2. Assert: referencingScriptOrModule is a Script Record or Module Record (i.e. is not null).\n3. Let argRef be the result of evaluating AssignmentExpression.\n4. Let specifier be ? GetValue(argRef).\n5. Let promiseCapability be ! NewPromiseCapability(%Promise%).\n6. Let specifierString be ToString(specifier).\n7. IfAbruptRejectPromise(specifierString, promiseCapability).\n8. Perform ! HostImportModuleDynamically(referencingScriptOrModule, specifierString, promiseCapability).\n9. Return promiseCapability.[[Promise]].\n\n"}, {"path": "./test262-main/test/language/expressions/dynamic-import/syntax/valid/nested-async-function-script-code-valid.js", "description": " import() can be used in script code (nested arrow syntax)", "esid": " sec-import-call-runtime-semantics-evaluation", "features": ["dynamic-import"], "flags": ["generated"], "info": " |ImportCall :\nimport( AssignmentExpression )\n\n1. Let referencingScriptOrModule be ! GetActiveScriptOrModule().\n2. Assert: referencingScriptOrModule is a Script Record or Module Record (i.e. is not null).\n3. Let argRef be the result of evaluating AssignmentExpression.\n4. Let specifier be ? GetValue(argRef).\n5. Let promiseCapability be ! NewPromiseCapability(%Promise%).\n6. Let specifierString be ToString(specifier).\n7. IfAbruptRejectPromise(specifierString, promiseCapability).\n8. Perform ! HostImportModuleDynamically(referencingScriptOrModule, specifierString, promiseCapability).\n9. Return promiseCapability.[[Promise]].\n\n"}, {"path": "./test262-main/test/language/expressions/dynamic-import/syntax/valid/nested-async-gen-await-empty-str-is-valid-assign-expr.js", "description": " Calling import('') (nested in async generator, awaited)", "esid": " sec-import-call-runtime-semantics-evaluation", "features": ["dynamic-import", "async-iteration"], "flags": ["generated"], "info": " |ImportCall :\nimport( AssignmentExpression )\n\n1. Let referencingScriptOrModule be ! GetActiveScriptOrModule().\n2. Assert: referencingScriptOrModule is a Script Record or Module Record (i.e. is not null).\n3. Let argRef be the result of evaluating AssignmentExpression.\n4. Let specifier be ? GetValue(argRef).\n5. Let promiseCapability be ! NewPromiseCapability(%Promise%).\n6. Let specifierString be ToString(specifier).\n7. IfAbruptRejectPromise(specifierString, promiseCapability).\n8. Perform ! HostImportModuleDynamically(referencingScriptOrModule, specifierString, promiseCapability).\n9. Return promiseCapability.[[Promise]].\n\n"}, {"path": "./test262-main/test/language/expressions/dynamic-import/syntax/valid/nested-async-gen-await-nested-imports.js", "description": " ImportCall is a CallExpression can be nested in other import calls (nested in async generator, awaited)", "esid": " sec-import-call-runtime-semantics-evaluation", "features": ["dynamic-import", "async-iteration"], "flags": ["generated"], "info": " |ImportCall :\nimport( AssignmentExpression )\n\n1. Let referencingScriptOrModule be ! GetActiveScriptOrModule().\n2. Assert: referencingScriptOrModule is a Script Record or Module Record (i.e. is not null).\n3. Let argRef be the result of evaluating AssignmentExpression.\n4. Let specifier be ? GetValue(argRef).\n5. Let promiseCapability be ! NewPromiseCapability(%Promise%).\n6. Let specifierString be ToString(specifier).\n7. IfAbruptRejectPromise(specifierString, promiseCapability).\n8. Perform ! HostImportModuleDynamically(referencingScriptOrModule, specifierString, promiseCapability).\n9. Return promiseCapability.[[Promise]].\n\n"}, {"path": "./test262-main/test/language/expressions/dynamic-import/syntax/valid/nested-async-gen-await-script-code-valid.js", "description": " import() can be used in script code (nested in async generator, awaited)", "esid": " sec-import-call-runtime-semantics-evaluation", "features": ["dynamic-import", "async-iteration"], "flags": ["generated"], "info": " |ImportCall :\nimport( AssignmentExpression )\n\n1. Let referencingScriptOrModule be ! GetActiveScriptOrModule().\n2. Assert: referencingScriptOrModule is a Script Record or Module Record (i.e. is not null).\n3. Let argRef be the result of evaluating AssignmentExpression.\n4. Let specifier be ? GetValue(argRef).\n5. Let promiseCapability be ! NewPromiseCapability(%Promise%).\n6. Let specifierString be ToString(specifier).\n7. IfAbruptRejectPromise(specifierString, promiseCapability).\n8. Perform ! HostImportModuleDynamically(referencingScriptOrModule, specifierString, promiseCapability).\n9. Return promiseCapability.[[Promise]].\n\n"}, {"path": "./test262-main/test/language/expressions/dynamic-import/syntax/valid/nested-function-empty-str-is-valid-assign-expr.js", "description": " Calling import('') (nested function syntax)", "esid": " sec-import-call-runtime-semantics-evaluation", "features": ["dynamic-import"], "flags": ["generated"], "info": " |ImportCall :\nimport( AssignmentExpression )\n\n1. Let referencingScriptOrModule be ! GetActiveScriptOrModule().\n2. Assert: referencingScriptOrModule is a Script Record or Module Record (i.e. is not null).\n3. Let argRef be the result of evaluating AssignmentExpression.\n4. Let specifier be ? GetValue(argRef).\n5. Let promiseCapability be ! NewPromiseCapability(%Promise%).\n6. Let specifierString be ToString(specifier).\n7. IfAbruptRejectPromise(specifierString, promiseCapability).\n8. Perform ! HostImportModuleDynamically(referencingScriptOrModule, specifierString, promiseCapability).\n9. Return promiseCapability.[[Promise]].\n\n"}, {"path": "./test262-main/test/language/expressions/dynamic-import/syntax/valid/nested-function-nested-imports.js", "description": " ImportCall is a CallExpression can be nested in other import calls (nested function syntax)", "esid": " sec-import-call-runtime-semantics-evaluation", "features": ["dynamic-import"], "flags": ["generated"], "info": " |ImportCall :\nimport( AssignmentExpression )\n\n1. Let referencingScriptOrModule be ! GetActiveScriptOrModule().\n2. Assert: referencingScriptOrModule is a Script Record or Module Record (i.e. is not null).\n3. Let argRef be the result of evaluating AssignmentExpression.\n4. Let specifier be ? GetValue(argRef).\n5. Let promiseCapability be ! NewPromiseCapability(%Promise%).\n6. Let specifierString be ToString(specifier).\n7. IfAbruptRejectPromise(specifierString, promiseCapability).\n8. Perform ! HostImportModuleDynamically(referencingScriptOrModule, specifierString, promiseCapability).\n9. Return promiseCapability.[[Promise]].\n\n"}, {"path": "./test262-main/test/language/expressions/dynamic-import/syntax/valid/nested-function-return-empty-str-is-valid-assign-expr.js", "description": " Calling import('') (nested function syntax)", "esid": " sec-import-call-runtime-semantics-evaluation", "features": ["dynamic-import"], "flags": ["generated"], "info": " |ImportCall :\nimport( AssignmentExpression )\n\n1. Let referencingScriptOrModule be ! GetActiveScriptOrModule().\n2. Assert: referencingScriptOrModule is a Script Record or Module Record (i.e. is not null).\n3. Let argRef be the result of evaluating AssignmentExpression.\n4. Let specifier be ? GetValue(argRef).\n5. Let promiseCapability be ! NewPromiseCapability(%Promise%).\n6. Let specifierString be ToString(specifier).\n7. IfAbruptRejectPromise(specifierString, promiseCapability).\n8. Perform ! HostImportModuleDynamically(referencingScriptOrModule, specifierString, promiseCapability).\n9. Return promiseCapability.[[Promise]].\n\n"}, {"path": "./test262-main/test/language/expressions/dynamic-import/syntax/valid/nested-function-return-nested-imports.js", "description": " ImportCall is a CallExpression can be nested in other import calls (nested function syntax)", "esid": " sec-import-call-runtime-semantics-evaluation", "features": ["dynamic-import"], "flags": ["generated"], "info": " |ImportCall :\nimport( AssignmentExpression )\n\n1. Let referencingScriptOrModule be ! GetActiveScriptOrModule().\n2. Assert: referencingScriptOrModule is a Script Record or Module Record (i.e. is not null).\n3. Let argRef be the result of evaluating AssignmentExpression.\n4. Let specifier be ? GetValue(argRef).\n5. Let promiseCapability be ! NewPromiseCapability(%Promise%).\n6. Let specifierString be ToString(specifier).\n7. IfAbruptRejectPromise(specifierString, promiseCapability).\n8. Perform ! HostImportModuleDynamically(referencingScriptOrModule, specifierString, promiseCapability).\n9. Return promiseCapability.[[Promise]].\n\n"}, {"path": "./test262-main/test/language/expressions/dynamic-import/syntax/valid/nested-function-return-script-code-valid.js", "description": " import() can be used in script code (nested function syntax)", "esid": " sec-import-call-runtime-semantics-evaluation", "features": ["dynamic-import"], "flags": ["generated"], "info": " |ImportCall :\nimport( AssignmentExpression )\n\n1. Let referencingScriptOrModule be ! GetActiveScriptOrModule().\n2. Assert: referencingScriptOrModule is a Script Record or Module Record (i.e. is not null).\n3. Let argRef be the result of evaluating AssignmentExpression.\n4. Let specifier be ? GetValue(argRef).\n5. Let promiseCapability be ! NewPromiseCapability(%Promise%).\n6. Let specifierString be ToString(specifier).\n7. IfAbruptRejectPromise(specifierString, promiseCapability).\n8. Perform ! HostImportModuleDynamically(referencingScriptOrModule, specifierString, promiseCapability).\n9. Return promiseCapability.[[Promise]].\n\n"}, {"path": "./test262-main/test/language/expressions/dynamic-import/syntax/valid/nested-function-script-code-valid.js", "description": " import() can be used in script code (nested function syntax)", "esid": " sec-import-call-runtime-semantics-evaluation", "features": ["dynamic-import"], "flags": ["generated"], "info": " |ImportCall :\nimport( AssignmentExpression )\n\n1. Let referencingScriptOrModule be ! GetActiveScriptOrModule().\n2. Assert: referencingScriptOrModule is a Script Record or Module Record (i.e. is not null).\n3. Let argRef be the result of evaluating AssignmentExpression.\n4. Let specifier be ? GetValue(argRef).\n5. Let promiseCapability be ! NewPromiseCapability(%Promise%).\n6. Let specifierString be ToString(specifier).\n7. IfAbruptRejectPromise(specifierString, promiseCapability).\n8. Perform ! HostImportModuleDynamically(referencingScriptOrModule, specifierString, promiseCapability).\n9. Return promiseCapability.[[Promise]].\n\n"}, {"path": "./test262-main/test/language/expressions/equals/bigint-and-bigint.js", "description": " Non-strict equality comparison of BigInt values", "esid": " sec-abstract-equality-comparison", "info": " |1. If Type(x) is the same as Type(y), then\na. Return the result of performing Strict Equality Comparison x === y.\n\nsec-numeric-types-bigint-equal\nBigInt::equal (x, y)\n\nThe abstract operation BigInt::equal with two arguments x and y of BigInt type returns true if x and y have the same mathematical integer value and false otherwise.\n\n", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/equals/bigint-and-boolean.js", "description": " Non-strict equality comparison of BigInt and Boolean values", "esid": " sec-abstract-equality-comparison", "info": " |8. If Type(x) is Boolean, return the result of the comparison ToNumber(x) == y.\n9. If Type(y) is Boolean, return the result of the comparison x == ToNumber(y).\n...\n12. If Type(x) is BigInt and Type(y) is Number, or if Type(x) is Number and Type(y) is BigInt,\n...\nb. If the mathematical value of x is equal to the mathematical value of y, return true, otherwise return false.\n\n", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/equals/bigint-and-incomparable-primitive.js", "description": " Non-strict equality comparison of BigInt and miscellaneous primitive values", "esid": " sec-equality-operators-runtime-semantics-evaluation", "info": " |EqualityExpression : EqualityExpression == RelationalExpression\n...\n5. Return the result of performing Abstract Equality Comparison rval == lval.\n\n", "features": ["BigInt", "Symbol"]}, {"path": "./test262-main/test/language/expressions/equals/bigint-and-non-finite.js", "description": " Non-strict equality comparison of BigInt and non-finite Number values", "esid": " sec-abstract-equality-comparison", "info": " |12. If Type(x) is BigInt and Type(y) is Number, or if Type(x) is Number and Type(y) is BigInt,\na. If x or y are any of NaN, +\u221e, or -\u221e, return false.\n\n", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/equals/bigint-and-number-extremes.js", "description": " Non-strict equality comparison of BigInt and large Number values", "esid": " sec-abstract-equality-comparison", "info": " |12. If Type(x) is BigInt and Type(y) is Number, or if Type(x) is Number and Type(y) is BigInt,\nb. If the mathematical value of x is equal to the mathematical value of y, return true, otherwise return false.\n\n", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/equals/bigint-and-number.js", "description": " Non-strict equality comparison of BigInt and Number values", "esid": " sec-abstract-equality-comparison", "info": " |12. If Type(x) is BigInt and Type(y) is Number, or if Type(x) is Number and Type(y) is BigInt,\nb. If the mathematical value of x is equal to the mathematical value of y, return true, otherwise return false.\n\n", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/equals/bigint-and-object.js", "description": " Non-strict equality comparison of BigInt values and non-primitive objects", "esid": " sec-abstract-equality-comparison", "info": " |10. If Type(x) is either String, Number, BigInt, or Symbol and Type(y) is Object, return the result of the comparison x == ? ToPrimitive(y).\n11. If Type(x) is Object and Type(y) is either String, Number, BigInt, or Symbol, return the result of the comparison ? ToPrimitive(x) == y.\n\nthen after the recursion:\n\n1. If Type(x) is the same as Type(y), then\na. Return the result of performing Strict Equality Comparison x === y.\n...\n6. If Type(x) is BigInt and Type(y) is String,\na. Let n be StringToBigInt(y).\nb. If n is NaN, return false.\nc. Return the result of x == n.\n7. If Type(x) is String and Type(y) is BigInt, return the result of y == x.\n\n", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/equals/bigint-and-string.js", "description": " Non-strict equality comparison of BigInt and String values", "esid": " sec-abstract-equality-comparison", "info": " |1. If Type(x) is different from Type(y), return false.\n\n", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/exponentiation/bigint-and-number.js", "esid": " sec-exp-operator-runtime-semantics-evaluation", "description": " Mixing BigInt and Number produces a TypeError for exponentiation operator", "features": ["BigInt"], "info": " |Let base be ? ToNumeric(leftValue).\nLet exponent be ? ToNumeric(rightValue).\nIf Type(base) does not equal Type(exponent), throw a TypeError exception.\n"}, {"path": "./test262-main/test/language/expressions/exponentiation/bigint-arithmetic.js", "esid": " sec-exp-operator-runtime-semantics-evaluation", "description": " BigInt exponentiation arithmetic", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/exponentiation/bigint-errors.js", "description": " exponentiation operator ToNumeric with BigInt operands", "esid": " sec-exp-operator-runtime-semantics-evaluation", "features": ["BigInt", "Symbol", "Symbol.toPrimitive", "computed-property-names"]}, {"path": "./test262-main/test/language/expressions/exponentiation/bigint-negative-exponent-throws.js", "description": " If the BigInt exponent is < 0, throw a RangeError exception", "esid": " sec-exp-operator-runtime-semantics-evaluation", "info": " |ExponentiationExpression: UpdateExpression ** ExponentiationExpression\n\n...\n9. Return ? Type(base)::exponentiate(base, exponent).\n\nBigInt::exponentiate (base, exponent)\n\n1. If exponent < 0, throw a RangeError exception.\n...\n", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/exponentiation/bigint-toprimitive.js", "description": " exponentiation operator ToNumeric with BigInt operands", "esid": " sec-exp-operator-runtime-semantics-evaluation", "features": ["BigInt", "Symbol.toPrimitive", "computed-property-names"]}, {"path": "./test262-main/test/language/expressions/exponentiation/bigint-wrapped-values.js", "description": " exponentiation operator ToNumeric with BigInt operands", "esid": " sec-exp-operator-runtime-semantics-evaluation", "features": ["BigInt", "Symbol.toPrimitive", "computed-property-names"]}, {"path": "./test262-main/test/language/expressions/exponentiation/bigint-zero-base-zero-exponent.js", "description": " If the BigInt base and exponent are both 0n, return 1n", "esid": " sec-exp-operator-runtime-semantics-evaluation", "info": " |ExponentiationExpression: UpdateExpression ** ExponentiationExpression\n\n...\n9. Return ? Type(base)::exponentiate(base, exponent).\n\nBigInt::exponentiate (base, exponent)\n\n1. If exponent < 0, throw a RangeError exception.\n2. If base is 0n and exponent is 0n, return 1n.\n3. Return a BigInt representing the mathematical value of base raised to the power exponent.\n...\n", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/function/unscopables-with-in-nested-fn.js", "description": " Symbol.unscopables behavior across scope boundaries (function expression)", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["globalThis", "Symbol.unscopables"], "flags": ["generated", "noStrict"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n...\nLet envRec be lex's EnvironmentRecord.\nLet exists be ? envRec.HasBinding(name).\n\nHasBinding\n\n...\nIf the withEnvironment flag of envRec is false, return true.\nLet unscopables be ? Get(bindings, @@unscopables).\nIf Type(unscopables) is Object, then\nLet blocked be ToBoolean(? Get(unscopables, N)).\nIf blocked is true, return false.\n\n(The `with` Statement) Runtime Semantics: Evaluation\n\n...\nSet the withEnvironment flag of newEnv\u2019s EnvironmentRecord to true.\n...\n\n"}, {"path": "./test262-main/test/language/expressions/function/unscopables-with.js", "description": " Symbol.unscopables behavior across scope boundaries (function expression)", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["globalThis", "Symbol.unscopables"], "flags": ["generated", "noStrict"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n...\nLet envRec be lex's EnvironmentRecord.\nLet exists be ? envRec.HasBinding(name).\n\nHasBinding\n\n...\nIf the withEnvironment flag of envRec is false, return true.\nLet unscopables be ? Get(bindings, @@unscopables).\nIf Type(unscopables) is Object, then\nLet blocked be ToBoolean(? Get(unscopables, N)).\nIf blocked is true, return false.\n\n(The `with` Statement) Runtime Semantics: Evaluation\n\n...\nSet the withEnvironment flag of newEnv\u2019s EnvironmentRecord to true.\n...\n\n"}, {"path": "./test262-main/test/language/expressions/generators/unscopables-with-in-nested-fn.js", "description": " Symbol.unscopables behavior across scope boundaries (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["globalThis", "Symbol.unscopables", "generators"], "flags": ["generated", "noStrict"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n\n...\nLet envRec be lex's EnvironmentRecord.\nLet exists be ? envRec.HasBinding(name).\n\nHasBinding\n\n...\nIf the withEnvironment flag of envRec is false, return true.\nLet unscopables be ? Get(bindings, @@unscopables).\nIf Type(unscopables) is Object, then\nLet blocked be ToBoolean(? Get(unscopables, N)).\nIf blocked is true, return false.\n\n(The `with` Statement) Runtime Semantics: Evaluation\n\n...\nSet the withEnvironment flag of newEnv\u2019s EnvironmentRecord to true.\n...\n\n"}, {"path": "./test262-main/test/language/expressions/generators/unscopables-with.js", "description": " Symbol.unscopables behavior across scope boundaries (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["globalThis", "Symbol.unscopables", "generators"], "flags": ["generated", "noStrict"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n\n...\nLet envRec be lex's EnvironmentRecord.\nLet exists be ? envRec.HasBinding(name).\n\nHasBinding\n\n...\nIf the withEnvironment flag of envRec is false, return true.\nLet unscopables be ? Get(bindings, @@unscopables).\nIf Type(unscopables) is Object, then\nLet blocked be ToBoolean(? Get(unscopables, N)).\nIf blocked is true, return false.\n\n(The `with` Statement) Runtime Semantics: Evaluation\n\n...\nSet the withEnvironment flag of newEnv\u2019s EnvironmentRecord to true.\n...\n\n"}, {"path": "./test262-main/test/language/expressions/greater-than/bigint-and-bigint.js", "description": " Comparisons of BigInt and BigInt values", "esid": " sec-abstract-relational-comparison", "info": " |...\n3. If both px and py are Strings, then\n...\n4. Else,\na. Let nx be ? ToNumeric(px). Because px and py are primitive values evaluation order is not important.\nb. Let ny be ? ToNumeric(py).\nc. If Type(nx) is Type(ny), return ? Type(nx)::lessThan(nx, ny).\n\nsec-numeric-types-bigint-lessThan\nBigInt::lessThan (x, y)\n\nThe abstract operation BigInt::lessThan with two arguments x and y of BigInt type returns true if x is less than y and false otherwise.\n\n", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/greater-than/bigint-and-boolean.js", "description": " Relational comparison of BigInt and boolean values", "esid": " sec-abstract-relational-comparison", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/greater-than/bigint-and-incomparable-string.js", "description": " Relational comparison of BigInt and string values", "esid": " sec-abstract-relational-comparison", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/greater-than/bigint-and-non-finite.js", "description": " Comparisons of BigInt and non-finite Number values", "esid": " sec-abstract-relational-comparison", "info": " |...\n3. If both px and py are Strings, then\n...\n4. Else,\na. Let nx be ? ToNumeric(px). Because px and py are primitive values evaluation order is not important.\nb. Let ny be ? ToNumeric(py).\nc. If Type(nx) is Type(ny), return ? Type(nx)::lessThan(nx, ny).\nd. Assert: Type(nx) is BigInt and Type(ny) is Number, or if Type(nx) is Number and Type(ny) is BigInt.\ne. If x or y are any of NaN, return undefined.\nf. If x is -\u221e, or y is +\u221e, return true.\ng. If x is +\u221e, or y is -\u221e, return false.\n", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/greater-than/bigint-and-number-extremes.js", "description": " Comparisons of BigInt and Number values", "esid": " sec-abstract-relational-comparison", "info": " |...\n3. If both px and py are Strings, then\n...\n4. Else,\na. Let nx be ? ToNumeric(px). Because px and py are primitive values evaluation order is not important.\nb. Let ny be ? ToNumeric(py).\nc. If Type(nx) is Type(ny), return ? Type(nx)::lessThan(nx, ny).\nd. Assert: Type(nx) is BigInt and Type(ny) is Number, or if Type(nx) is Number and Type(ny) is BigInt.\ne. If x or y are any of NaN, return undefined.\nf. If x is -\u221e, or y is +\u221e, return true.\ng. If x is +\u221e, or y is -\u221e, return false.\nh. If the mathematical value of nx is less than the mathematical value of ny, return true, otherwise return false.\n", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/greater-than/bigint-and-number.js", "description": " Comparisons of BigInt and Number values", "esid": " sec-abstract-relational-comparison", "info": " |...\n3. If both px and py are Strings, then\n...\n4. Else,\na. Let nx be ? ToNumeric(px). Because px and py are primitive values evaluation order is not important.\nb. Let ny be ? ToNumeric(py).\nc. If Type(nx) is Type(ny), return ? Type(nx)::lessThan(nx, ny).\nd. Assert: Type(nx) is BigInt and Type(ny) is Number, or if Type(nx) is Number and Type(ny) is BigInt.\ne. If x or y are any of NaN, return undefined.\nf. If x is -\u221e, or y is +\u221e, return true.\ng. If x is +\u221e, or y is -\u221e, return false.\nh. If the mathematical value of nx is less than the mathematical value of ny, return true, otherwise return false.\n", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/greater-than/bigint-and-string.js", "description": " Relational comparison of BigInt and string values", "esid": " sec-abstract-relational-comparison", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/greater-than/bigint-and-symbol.js", "description": " Relational comparison of BigInt and Symbol values", "esid": " sec-abstract-relational-comparison", "features": ["BigInt", "Symbol"]}, {"path": "./test262-main/test/language/expressions/greater-than-or-equal/bigint-and-bigint.js", "description": " Comparisons of BigInt and BigInt values", "esid": " sec-abstract-relational-comparison", "info": " |...\n3. If both px and py are Strings, then\n...\n4. Else,\na. Let nx be ? ToNumeric(px). Because px and py are primitive values evaluation order is not important.\nb. Let ny be ? ToNumeric(py).\nc. If Type(nx) is Type(ny), return ? Type(nx)::lessThan(nx, ny).\n\nsec-numeric-types-bigint-lessThan\nBigInt::lessThan (x, y)\n\nThe abstract operation BigInt::lessThan with two arguments x and y of BigInt type returns true if x is less than y and false otherwise.\n\n", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/greater-than-or-equal/bigint-and-incomparable-string.js", "description": " Relational comparison of BigInt and string values", "esid": " sec-abstract-relational-comparison", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/greater-than-or-equal/bigint-and-non-finite.js", "description": " Comparisons of BigInt and non-finite Number values", "esid": " sec-abstract-relational-comparison", "info": " |...\n3. If both px and py are Strings, then\n...\n4. Else,\na. Let nx be ? ToNumeric(px). Because px and py are primitive values evaluation order is not important.\nb. Let ny be ? ToNumeric(py).\nc. If Type(nx) is Type(ny), return ? Type(nx)::lessThan(nx, ny).\nd. Assert: Type(nx) is BigInt and Type(ny) is Number, or if Type(nx) is Number and Type(ny) is BigInt.\ne. If x or y are any of NaN, return undefined.\nf. If x is -\u221e, or y is +\u221e, return true.\ng. If x is +\u221e, or y is -\u221e, return false.\n", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/greater-than-or-equal/bigint-and-number-extremes.js", "description": " Comparisons of large BigInt and Number values", "esid": " sec-abstract-relational-comparison", "info": " |...\n3. If both px and py are Strings, then\n...\n4. Else,\na. Let nx be ? ToNumeric(px). Because px and py are primitive values evaluation order is not important.\nb. Let ny be ? ToNumeric(py).\nc. If Type(nx) is Type(ny), return ? Type(nx)::lessThan(nx, ny).\nd. Assert: Type(nx) is BigInt and Type(ny) is Number, or if Type(nx) is Number and Type(ny) is BigInt.\ne. If x or y are any of NaN, return undefined.\nf. If x is -\u221e, or y is +\u221e, return true.\ng. If x is +\u221e, or y is -\u221e, return false.\nh. If the mathematical value of nx is less than the mathematical value of ny, return true, otherwise return false.\n", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/greater-than-or-equal/bigint-and-number.js", "description": " Comparisons of BigInt and Number values", "esid": " sec-abstract-relational-comparison", "info": " |...\n3. If both px and py are Strings, then\n...\n4. Else,\na. Let nx be ? ToNumeric(px). Because px and py are primitive values evaluation order is not important.\nb. Let ny be ? ToNumeric(py).\nc. If Type(nx) is Type(ny), return ? Type(nx)::lessThan(nx, ny).\nd. Assert: Type(nx) is BigInt and Type(ny) is Number, or if Type(nx) is Number and Type(ny) is BigInt.\ne. If x or y are any of NaN, return undefined.\nf. If x is -\u221e, or y is +\u221e, return true.\ng. If x is +\u221e, or y is -\u221e, return false.\nh. If the mathematical value of nx is less than the mathematical value of ny, return true, otherwise return false.\n", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/greater-than-or-equal/bigint-and-string.js", "description": " Relational comparison of BigInt and string values", "esid": " sec-abstract-relational-comparison", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/left-shift/bigint-and-number.js", "esid": " sec-left-shift-operator-runtime-semantics-evaluation", "description": " Mixing BigInt and Number produces a TypeError for left-shift operator", "features": ["BigInt"], "info": " |Let lnum be ? ToNumeric(leftValue).\nLet rnum be ? ToNumeric(rightValue).\nIf Type(lnum) does not equal Type(rnum), throw a TypeError exception.\n"}, {"path": "./test262-main/test/language/expressions/left-shift/bigint-errors.js", "description": " left-shift operator ToNumeric with BigInt operands", "esid": " sec-left-shift-operator-runtime-semantics-evaluation", "features": ["BigInt", "Symbol", "Symbol.toPrimitive", "computed-property-names"]}, {"path": "./test262-main/test/language/expressions/left-shift/bigint-non-primitive.js", "description": " Left shift for non-primitive BigInt values", "esid": " sec-left-shift-operator-runtime-semantics-evaluation", "info": " |ShiftExpression : ShiftExpression << AdditiveExpression\n\n1. Let lref be the result of evaluating ShiftExpression.\n2. Let lval be ? GetValue(lref).\n3. Let rref be the result of evaluating AdditiveExpression.\n4. Let rval be ? GetValue(rref).\n5. Let lnum be ? ToNumeric(lval).\n6. Let rnum be ? ToNumeric(rval).\n7. If Type(lnum) does not equal Type(rnum), throw a TypeError exception.\n8. Let T be Type(lnum).\n9. Return T::leftShift(lnum, rnum).\n\n", "features": ["BigInt", "Symbol.toPrimitive"]}, {"path": "./test262-main/test/language/expressions/left-shift/bigint-toprimitive.js", "description": " left-shift operator ToNumeric with BigInt operands", "esid": " sec-left-shift-operator-runtime-semantics-evaluation", "features": ["BigInt", "Symbol.toPrimitive", "computed-property-names"]}, {"path": "./test262-main/test/language/expressions/left-shift/bigint-wrapped-values.js", "description": " left-shift operator ToNumeric with BigInt operands", "esid": " sec-left-shift-operator-runtime-semantics-evaluation", "features": ["BigInt", "Symbol.toPrimitive", "computed-property-names"]}, {"path": "./test262-main/test/language/expressions/left-shift/bigint.js", "description": " Left shift for BigInt values", "esid": " sec-numeric-types-bigint-leftShift", "info": " |BigInt::leftShift (x, y)\n\nThe abstract operation BigInt::leftShift with two arguments x and y of BigInt:\n\n1. If y < 0,\na. Return a BigInt representing x divided by 2-y, rounding down to the nearest integer, including for negative numbers.\n2. Return a BigInt representing x multiplied by 2y.\n\nNOTE: Semantics here should be equivalent to a bitwise shift, treating the BigInt as an infinite length string of binary two's complement digits.\n\n", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/less-than/bigint-and-bigint.js", "description": " Comparisons of BigInt and BigInt values", "esid": " sec-abstract-relational-comparison", "info": " |...\n3. If both px and py are Strings, then\n...\n4. Else,\na. Let nx be ? ToNumeric(px). Because px and py are primitive values evaluation order is not important.\nb. Let ny be ? ToNumeric(py).\nc. If Type(nx) is Type(ny), return ? Type(nx)::lessThan(nx, ny).\n\nsec-numeric-types-bigint-lessThan\nBigInt::lessThan (x, y)\n\nThe abstract operation BigInt::lessThan with two arguments x and y of BigInt type returns true if x is less than y and false otherwise.\n\n", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/less-than/bigint-and-boolean.js", "description": " Relational comparison of BigInt and boolean values", "esid": " sec-abstract-relational-comparison", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/less-than/bigint-and-incomparable-string.js", "description": " Relational comparison of BigInt and string values", "esid": " sec-abstract-relational-comparison", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/less-than/bigint-and-non-finite.js", "description": " Comparisons of BigInt and non-finite Number values", "esid": " sec-abstract-relational-comparison", "info": " |...\n3. If both px and py are Strings, then\n...\n4. Else,\na. Let nx be ? ToNumeric(px). Because px and py are primitive values evaluation order is not important.\nb. Let ny be ? ToNumeric(py).\nc. If Type(nx) is Type(ny), return ? Type(nx)::lessThan(nx, ny).\nd. Assert: Type(nx) is BigInt and Type(ny) is Number, or if Type(nx) is Number and Type(ny) is BigInt.\ne. If x or y are any of NaN, return undefined.\nf. If x is -\u221e, or y is +\u221e, return true.\ng. If x is +\u221e, or y is -\u221e, return false.\n", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/less-than/bigint-and-number-extremes.js", "description": " Comparisons of large BigInt and Number values", "esid": " sec-abstract-relational-comparison", "info": " |...\n3. If both px and py are Strings, then\n...\n4. Else,\na. Let nx be ? ToNumeric(px). Because px and py are primitive values evaluation order is not important.\nb. Let ny be ? ToNumeric(py).\nc. If Type(nx) is Type(ny), return ? Type(nx)::lessThan(nx, ny).\nd. Assert: Type(nx) is BigInt and Type(ny) is Number, or if Type(nx) is Number and Type(ny) is BigInt.\ne. If x or y are any of NaN, return undefined.\nf. If x is -\u221e, or y is +\u221e, return true.\ng. If x is +\u221e, or y is -\u221e, return false.\nh. If the mathematical value of nx is less than the mathematical value of ny, return true, otherwise return false.\n", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/less-than/bigint-and-number.js", "description": " Comparisons of BigInt and Number values", "esid": " sec-abstract-relational-comparison", "info": " |...\n3. If both px and py are Strings, then\n...\n4. Else,\na. Let nx be ? ToNumeric(px). Because px and py are primitive values evaluation order is not important.\nb. Let ny be ? ToNumeric(py).\nc. If Type(nx) is Type(ny), return ? Type(nx)::lessThan(nx, ny).\nd. Assert: Type(nx) is BigInt and Type(ny) is Number, or if Type(nx) is Number and Type(ny) is BigInt.\ne. If x or y are any of NaN, return undefined.\nf. If x is -\u221e, or y is +\u221e, return true.\ng. If x is +\u221e, or y is -\u221e, return false.\nh. If the mathematical value of nx is less than the mathematical value of ny, return true, otherwise return false.\n", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/less-than/bigint-and-string.js", "description": " Relational comparison of BigInt and string values", "esid": " sec-abstract-relational-comparison", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/less-than/bigint-and-symbol.js", "description": " Relational comparison of BigInt and Symbol values", "esid": " sec-abstract-relational-comparison", "features": ["BigInt", "Symbol"]}, {"path": "./test262-main/test/language/expressions/less-than-or-equal/bigint-and-bigint.js", "description": " Comparisons of BigInt and BigInt values", "esid": " sec-abstract-relational-comparison", "info": " |...\n3. If both px and py are Strings, then\n...\n4. Else,\na. Let nx be ? ToNumeric(px). Because px and py are primitive values evaluation order is not important.\nb. Let ny be ? ToNumeric(py).\nc. If Type(nx) is Type(ny), return ? Type(nx)::lessThan(nx, ny).\n\nsec-numeric-types-bigint-lessThan\nBigInt::lessThan (x, y)\n\nThe abstract operation BigInt::lessThan with two arguments x and y of BigInt type returns true if x is less than y and false otherwise.\n\n", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/less-than-or-equal/bigint-and-incomparable-string.js", "description": " Relational comparison of BigInt and string values", "esid": " sec-abstract-relational-comparison", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/less-than-or-equal/bigint-and-non-finite.js", "description": " Comparisons of BigInt and non-finite Number values", "esid": " sec-abstract-relational-comparison", "info": " |...\n3. If both px and py are Strings, then\n...\n4. Else,\na. Let nx be ? ToNumeric(px). Because px and py are primitive values evaluation order is not important.\nb. Let ny be ? ToNumeric(py).\nc. If Type(nx) is Type(ny), return ? Type(nx)::lessThan(nx, ny).\nd. Assert: Type(nx) is BigInt and Type(ny) is Number, or if Type(nx) is Number and Type(ny) is BigInt.\ne. If x or y are any of NaN, return undefined.\nf. If x is -\u221e, or y is +\u221e, return true.\ng. If x is +\u221e, or y is -\u221e, return false.\n", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/less-than-or-equal/bigint-and-number-extremes.js", "description": " Comparisons of BigInt and Number values", "esid": " sec-abstract-relational-comparison", "info": " |...\n3. If both px and py are Strings, then\n...\n4. Else,\na. Let nx be ? ToNumeric(px). Because px and py are primitive values evaluation order is not important.\nb. Let ny be ? ToNumeric(py).\nc. If Type(nx) is Type(ny), return ? Type(nx)::lessThan(nx, ny).\nd. Assert: Type(nx) is BigInt and Type(ny) is Number, or if Type(nx) is Number and Type(ny) is BigInt.\ne. If x or y are any of NaN, return undefined.\nf. If x is -\u221e, or y is +\u221e, return true.\ng. If x is +\u221e, or y is -\u221e, return false.\nh. If the mathematical value of nx is less than the mathematical value of ny, return true, otherwise return false.\n", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/less-than-or-equal/bigint-and-number.js", "description": " Comparisons of BigInt and Number values", "esid": " sec-abstract-relational-comparison", "info": " |...\n3. If both px and py are Strings, then\n...\n4. Else,\na. Let nx be ? ToNumeric(px). Because px and py are primitive values evaluation order is not important.\nb. Let ny be ? ToNumeric(py).\nc. If Type(nx) is Type(ny), return ? Type(nx)::lessThan(nx, ny).\nd. Assert: Type(nx) is BigInt and Type(ny) is Number, or if Type(nx) is Number and Type(ny) is BigInt.\ne. If x or y are any of NaN, return undefined.\nf. If x is -\u221e, or y is +\u221e, return true.\ng. If x is +\u221e, or y is -\u221e, return false.\nh. If the mathematical value of nx is less than the mathematical value of ny, return true, otherwise return false.\n", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/less-than-or-equal/bigint-and-string.js", "description": " Relational comparison of BigInt and string values", "esid": " sec-abstract-relational-comparison", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/logical-not/bigint.js", "description": " Conversion of BigInt values to booleans", "esid": " sec-logical-not-operator-runtime-semantics-evaluation", "info": " |UnaryExpression: ! UnaryExpression\n\n1. Let expr be the result of evaluating UnaryExpression.\n2. Let oldValue be ToBoolean(? GetValue(expr)).\n3. If oldValue is true, return false.\n4. Return true.\n\nToBoolean ( argument )\n\nBigInt: Return false if argument is 0n; otherwise return true.\n", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/modulus/bigint-and-number.js", "esid": " sec-multiplicative-operators-runtime-semantics-evaluation", "description": " Mixing BigInt and Number produces a TypeError for modulus operator", "features": ["BigInt"], "info": " |Let lnum be ? ToNumeric(leftValue).\nLet rnum be ? ToNumeric(rightValue).\nIf Type(lnum) does not equal Type(rnum), throw a TypeError exception.\n"}, {"path": "./test262-main/test/language/expressions/modulus/bigint-arithmetic.js", "esid": " sec-multiplicative-operators-runtime-semantics-evaluation", "description": " BigInt remainder arithmetic", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/modulus/bigint-errors.js", "description": " modulus operator ToNumeric with BigInt operands", "esid": " sec-multiplicative-operators-runtime-semantics-evaluation", "features": ["BigInt", "Symbol", "Symbol.toPrimitive", "computed-property-names"]}, {"path": "./test262-main/test/language/expressions/modulus/bigint-modulo-zero.js", "description": " BigInt modulo 0 throws a range error", "esid": " sec-multiplicative-operators-runtime-semantics-evaluation", "info": " |Runtime Semantics: Evaluation\n\nMultiplicativeExpression: MultiplicativeExpression MultiplicativeOperator ExponentiationExpression\n\n...\n12. Otherwise, MultiplicativeOperator is %; return T::remainder(lnum, rnum).\n...\n\nBigInt::remainder (x, y)\n\n1. If y is 0n, throw a RangeError exception.\n2. Return the BigInt representing x modulo y.\n", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/modulus/bigint-toprimitive.js", "description": " modulus operator ToNumeric with BigInt operands", "esid": " sec-multiplicative-operators-runtime-semantics-evaluation", "features": ["BigInt", "Symbol.toPrimitive", "computed-property-names"]}, {"path": "./test262-main/test/language/expressions/modulus/bigint-wrapped-values.js", "description": " modulus operator ToNumeric with BigInt operands", "esid": " sec-multiplicative-operators-runtime-semantics-evaluation", "features": ["BigInt", "Symbol.toPrimitive", "computed-property-names"]}, {"path": "./test262-main/test/language/expressions/multiplication/bigint-and-number.js", "esid": " sec-multiplicative-operators-runtime-semantics-evaluation", "description": " Mixing BigInt and Number produces a TypeError for multiplication operator", "features": ["BigInt"], "info": " |Let lnum be ? ToNumeric(leftValue).\nLet rnum be ? ToNumeric(rightValue).\nIf Type(lnum) does not equal Type(rnum), throw a TypeError exception.\n"}, {"path": "./test262-main/test/language/expressions/multiplication/bigint-arithmetic.js", "esid": " sec-multiplicative-operators-runtime-semantics-evaluation", "description": " BigInt multiplication arithmetic", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/multiplication/bigint-errors.js", "description": " multiplication operator ToNumeric with BigInt operands", "esid": " sec-multiplicative-operators-runtime-semantics-evaluation", "features": ["BigInt", "Symbol", "Symbol.toPrimitive", "computed-property-names"]}, {"path": "./test262-main/test/language/expressions/multiplication/bigint-toprimitive.js", "description": " multiplication operator ToNumeric with BigInt operands", "esid": " sec-multiplicative-operators-runtime-semantics-evaluation", "features": ["BigInt", "Symbol.toPrimitive", "computed-property-names"]}, {"path": "./test262-main/test/language/expressions/multiplication/bigint-wrapped-values.js", "description": " multiplication operator ToNumeric with BigInt operands", "esid": " sec-multiplicative-operators-runtime-semantics-evaluation", "features": ["BigInt", "Symbol.toPrimitive", "computed-property-names"]}, {"path": "./test262-main/test/language/expressions/postfix-decrement/bigint.js", "description": " Postfix decrement for references to BigInt values", "esid": " sec-postfix-decrement-operator-runtime-semantics-evaluation", "info": " |1. Let expr be the result of evaluating UnaryExpression.\n2. Let oldValue be ? ToNumeric(? GetValue(expr)).\n3. Let newValue be ? Type(oldvalue)::subtract(oldValue, Type(oldValue)::unit).\n4. Perform ? PutValue(expr, newValue).\n5. Return oldValue.\n", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/postfix-increment/bigint.js", "description": " Postfix increment for references to BigInt values", "esid": " sec-postfix-increment-operator-runtime-semantics-evaluation", "info": " |1. Let expr be the result of evaluating UnaryExpression.\n2. Let oldValue be ? ToNumeric(? GetValue(expr)).\n3. Let newValue be ? Type(oldvalue)::add(oldValue, Type(oldValue)::unit).\n4. Perform ? PutValue(expr, newValue).\n5. Return oldValue.\n", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/prefix-decrement/bigint.js", "description": " Prefix decrement for references to BigInt values", "esid": " sec-prefix-decrement-operator-runtime-semantics-evaluation", "info": " |1. Let expr be the result of evaluating UnaryExpression.\n2. Let oldValue be ? ToNumeric(? GetValue(expr)).\n3. Let newValue be ? Type(oldvalue)::subtract(oldValue, Type(oldValue)::unit).\n4. Perform ? PutValue(expr, newValue).\n5. Return newValue.\n", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/prefix-increment/bigint.js", "description": " Prefix increment for references to BigInt values", "esid": " sec-prefix-increment-operator-runtime-semantics-evaluation", "info": " |1. Let expr be the result of evaluating UnaryExpression.\n2. Let oldValue be ? ToNumeric(? GetValue(expr)).\n3. Let newValue be ? Type(oldvalue)::add(oldValue, Type(oldValue)::unit).\n4. Perform ? PutValue(expr, newValue).\n5. Return newValue.\n", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/right-shift/bigint-and-number.js", "esid": " sec-signed-right-shift-operator-runtime-semantics-evaluation", "description": " Mixing BigInt and Number produces a TypeError for right-shift operator", "features": ["BigInt"], "info": " |Let lnum be ? ToNumeric(leftValue).\nLet rnum be ? ToNumeric(rightValue).\nIf Type(lnum) does not equal Type(rnum), throw a TypeError exception.\n"}, {"path": "./test262-main/test/language/expressions/right-shift/bigint-errors.js", "description": " right-shift operator ToNumeric with BigInt operands", "esid": " sec-signed-right-shift-operator-runtime-semantics-evaluation", "features": ["BigInt", "Symbol", "Symbol.toPrimitive", "computed-property-names"]}, {"path": "./test262-main/test/language/expressions/right-shift/bigint-non-primitive.js", "description": " Right shift for non-primitive BigInt values", "esid": " sec-signed-right-shift-operator-runtime-semantics-evaluation", "info": " |ShiftExpression : ShiftExpression >> AdditiveExpression\n\n1. Let lref be the result of evaluating ShiftExpression.\n2. Let lval be ? GetValue(lref).\n3. Let rref be the result of evaluating AdditiveExpression.\n4. Let rval be ? GetValue(rref).\n5. Let lnum be ? ToNumeric(lval).\n6. Let rnum be ? ToNumeric(rval).\n7. If Type(lnum) does not equal Type(rnum), throw a TypeError exception.\n8. Let T be Type(lnum).\n9. Return T::signedRightShift(lnum, rnum).\n\n", "features": ["BigInt", "Symbol.toPrimitive"]}, {"path": "./test262-main/test/language/expressions/right-shift/bigint-toprimitive.js", "description": " right-shift operator ToNumeric with BigInt operands", "esid": " sec-signed-right-shift-operator-runtime-semantics-evaluation", "features": ["BigInt", "Symbol.toPrimitive", "computed-property-names"]}, {"path": "./test262-main/test/language/expressions/right-shift/bigint-wrapped-values.js", "description": " right-shift operator ToNumeric with BigInt operands", "esid": " sec-signed-right-shift-operator-runtime-semantics-evaluation", "features": ["BigInt", "Symbol.toPrimitive", "computed-property-names"]}, {"path": "./test262-main/test/language/expressions/right-shift/bigint.js", "description": " Right shift for BigInt values", "esid": " sec-numeric-types-bigint-signedRightShift", "info": " |BigInt::signedRightShift (x, y)\n\nThe abstract operation BigInt::signedRightShift with arguments x and y of type BigInt:\n\n1. Return BigInt::leftShift(x, -y).\n\nsec-numeric-types-bigint-leftShift\nBigInt::leftShift (x, y)\n\nThe abstract operation BigInt::leftShift with two arguments x and y of BigInt:\n\n1. If y < 0,\na. Return a BigInt representing x divided by 2-y, rounding down to the nearest integer, including for negative numbers.\n2. Return a BigInt representing x multiplied by 2y.\n\nNOTE: Semantics here should be equivalent to a bitwise shift, treating the BigInt as an infinite length string of binary two's complement digits.\n\n", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/strict-does-not-equals/bigint-and-bigint.js", "description": " Strict inequality comparison of BigInt values", "esid": " sec-strict-equality-comparison", "info": " |1. If Type(x) is different from Type(y), return false.\n2. If Type(x) is Number or BigInt, then\na. Return ! Type(x)::equal(x, y).\n\nsec-numeric-types-bigint-equal\nBigInt::equal (x, y)\n\nThe abstract operation BigInt::equal with two arguments x and y of BigInt type returns true if x and y have the same mathematical integer value and false otherwise.\n\n", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/strict-does-not-equals/bigint-and-boolean.js", "description": " Strict inequality comparison of BigInt and Boolean values", "esid": " sec-strict-equality-comparison", "info": " |1. If Type(x) is different from Type(y), return false.\n\n", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/strict-does-not-equals/bigint-and-incomparable-primitive.js", "description": " Strict inequality comparison of BigInt and miscellaneous primitive values", "esid": " sec-strict-equality-comparison", "info": " |1. If Type(x) is different from Type(y), return false.\n\n", "features": ["BigInt", "Symbol"]}, {"path": "./test262-main/test/language/expressions/strict-does-not-equals/bigint-and-non-finite.js", "description": " Strict inequality comparison of BigInt and non-finite Number values", "esid": " sec-strict-equality-comparison", "info": " |1. If Type(x) is different from Type(y), return false.\n\n", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/strict-does-not-equals/bigint-and-number-extremes.js", "description": " Strict inequality comparison of BigInt and large Number values", "esid": " sec-strict-equality-comparison", "info": " |1. If Type(x) is different from Type(y), return false.\n\n", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/strict-does-not-equals/bigint-and-number.js", "description": " Strict inequality comparison of BigInt and Number values", "esid": " sec-strict-equality-comparison", "info": " |1. If Type(x) is different from Type(y), return false.\n\n", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/strict-does-not-equals/bigint-and-object.js", "description": " Strict inequality comparison of BigInt values and non-primitive objects", "esid": " sec-strict-equality-comparison", "info": " |1. If Type(x) is different from Type(y), return false.\n\n", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/strict-does-not-equals/bigint-and-string.js", "description": " Strict inequality comparison of BigInt and String values", "esid": " sec-strict-equality-comparison", "info": " |1. If Type(x) is different from Type(y), return false.\n\n", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/strict-equals/bigint-and-bigint.js", "description": " Strict equality comparison of BigInt values", "esid": " sec-strict-equality-comparison", "info": " |1. If Type(x) is different from Type(y), return false.\n2. If Type(x) is Number or BigInt, then\na. Return ! Type(x)::equal(x, y).\n\nsec-numeric-types-bigint-equal\nBigInt::equal (x, y)\n\nThe abstract operation BigInt::equal with two arguments x and y of BigInt type returns true if x and y have the same mathematical integer value and false otherwise.\n\n", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/strict-equals/bigint-and-boolean.js", "description": " Strict equality comparison of BigInt and Boolean values", "esid": " sec-strict-equality-comparison", "info": " |1. If Type(x) is different from Type(y), return false.\n\n", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/strict-equals/bigint-and-incomparable-primitive.js", "description": " Strict equality comparison of BigInt and miscellaneous primitive values", "esid": " sec-strict-equality-comparison", "info": " |1. If Type(x) is different from Type(y), return false.\n\n", "features": ["BigInt", "Symbol"]}, {"path": "./test262-main/test/language/expressions/strict-equals/bigint-and-non-finite.js", "description": " Strict equality comparison of BigInt and non-finite Number values", "esid": " sec-strict-equality-comparison", "info": " |1. If Type(x) is different from Type(y), return false.\n\n", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/strict-equals/bigint-and-number-extremes.js", "description": " Strict equality comparison of BigInt and large Number values", "esid": " sec-strict-equality-comparison", "info": " |1. If Type(x) is different from Type(y), return false.\n\n", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/strict-equals/bigint-and-number.js", "description": " Strict equality comparison of BigInt and Number values", "esid": " sec-strict-equality-comparison", "info": " |1. If Type(x) is different from Type(y), return false.\n\n", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/strict-equals/bigint-and-object.js", "description": " Strict equality comparison of BigInt values and non-primitive objects", "esid": " sec-strict-equality-comparison", "info": " |1. If Type(x) is different from Type(y), return false.\n\n", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/strict-equals/bigint-and-string.js", "description": " Strict equality comparison of BigInt and String values", "esid": " sec-strict-equality-comparison", "info": " |1. If Type(x) is different from Type(y), return false.\n\n", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/subtraction/bigint-and-number.js", "esid": " sec-subtraction-operator-minus-runtime-semantics-evaluation", "description": " Mixing BigInt and Number produces a TypeError for subtraction operator", "features": ["BigInt"], "info": " |Let lnum be ? ToNumeric(leftValue).\nLet rnum be ? ToNumeric(rightValue).\nIf Type(lnum) does not equal Type(rnum), throw a TypeError exception.\n"}, {"path": "./test262-main/test/language/expressions/subtraction/bigint-arithmetic.js", "esid": " sec-subtraction-operator-minus-runtime-semantics-evaluation", "description": " BigInt subtraction arithmetic", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/subtraction/bigint-errors.js", "description": " subtraction operator ToNumeric with BigInt operands", "esid": " sec-subtraction-operator-minus-runtime-semantics-evaluation", "features": ["BigInt", "Symbol", "Symbol.toPrimitive", "computed-property-names"]}, {"path": "./test262-main/test/language/expressions/subtraction/bigint-toprimitive.js", "description": " subtraction operator ToNumeric with BigInt operands", "esid": " sec-subtraction-operator-minus-runtime-semantics-evaluation", "features": ["BigInt", "Symbol.toPrimitive", "computed-property-names"]}, {"path": "./test262-main/test/language/expressions/subtraction/bigint-wrapped-values.js", "description": " subtraction operator ToNumeric with BigInt operands", "esid": " sec-subtraction-operator-minus-runtime-semantics-evaluation", "features": ["BigInt", "Symbol.toPrimitive", "computed-property-names"]}, {"path": "./test262-main/test/language/expressions/typeof/bigint.js", "esid": " sec-typeof-operator-runtime-semantics-evaluation", "description": " typeof BigInt literal and BigInt object", "info": " |The typeof Operator\n\nRuntime Semantics: Evaluation\n\n...\nReturn a String according to Table 35.\n\n#table-35\n\nBigInt \"bigint\"\nObject(BigInt()) \"object\"\n\n", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/unary-minus/bigint-non-primitive.js", "description": " Unary minus for BigInt object wrappers", "esid": " sec-unary-minus-operator-runtime-semantics-evaluation", "info": " |Runtime Semantics: Evaluation\nUnaryExpression : - UnaryExpression\n\n1. Let expr be the result of evaluating UnaryExpression.\n2. Let oldValue be ? ToNumeric(? GetValue(expr)).\n3. Let T be Type(oldValue).\n4. Return ? T::unaryMinus(oldValue).\n\n", "features": ["BigInt", "Symbol.toPrimitive"]}, {"path": "./test262-main/test/language/expressions/unary-minus/bigint.js", "description": " Unary minus for BigInt values", "esid": " sec-numeric-types-bigint-unaryMinus", "info": " |BigInt::unaryMinus (x)\n\nThe abstract operation BigInt::unaryMinus with an argument x of BigInt type returns the result of negating x.\n\nNote: There is only one 0n value; -0n is the same as 0n.\n\n", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/unary-plus/bigint-throws.js", "description": " The Unary + Operator throws a TypeError on BigInt numbers", "esid": " sec-unary-plus-operator-runtime-semantics-evaluation", "info": " |UnaryExpression: + UnaryExpression\n\n1. Let expr be the result of evaluating UnaryExpression.\n2. Return ? ToNumber(? GetValue(expr)).\n\nToNumber ( argument )\n\nBigInt: Throw a TypeError exception\n", "features": ["BigInt"]}, {"path": "./test262-main/test/language/expressions/unsigned-right-shift/bigint-and-number.js", "esid": " sec-unsigned-right-shift-operator-runtime-semantics-evaluation", "description": " Mixing BigInt and Number produces a TypeError for unsigned-right-shift operator", "features": ["BigInt"], "info": " |Let lnum be ? ToNumeric(leftValue).\nLet rnum be ? ToNumeric(rightValue).\nIf Type(lnum) does not equal Type(rnum), throw a TypeError exception.\n"}, {"path": "./test262-main/test/language/expressions/unsigned-right-shift/bigint-errors.js", "description": " unsigned-right-shift operator ToNumeric with BigInt operands", "esid": " sec-unsigned-right-shift-operator-runtime-semantics-evaluation", "info": " After ToNumeric type coercion, unsigned-right-shift always throws for BigInt operands", "features": ["BigInt", "Symbol", "Symbol.toPrimitive", "computed-property-names"]}, {"path": "./test262-main/test/language/expressions/unsigned-right-shift/bigint-non-primitive.js", "description": " Unsigned right shift always throws for non-primitive BigInt values", "esid": " sec-unsigned-right-shift-operator-runtime-semantics-evaluation", "info": " |ShiftExpression : ShiftExpression >>> AdditiveExpression\n\n1. Let lref be the result of evaluating ShiftExpression.\n2. Let lval be ? GetValue(lref).\n3. Let rref be the result of evaluating AdditiveExpression.\n4. Let rval be ? GetValue(rref).\n5. Let lnum be ? ToNumeric(lval).\n6. Let rnum be ? ToNumeric(rval).\n7. If Type(lnum) does not equal Type(rnum), throw a TypeError exception.\n8. Let T be Type(lnum).\n9. Return T::unsignedRightShift(lnum, rnum).\n\nNote: BigInt::unsignedRightShift always throws a TypeError\n\n", "features": ["BigInt", "Symbol.toPrimitive"]}, {"path": "./test262-main/test/language/expressions/unsigned-right-shift/bigint-toprimitive.js", "description": " unsigned-right-shift operator ToNumeric with BigInt operands", "esid": " sec-unsigned-right-shift-operator-runtime-semantics-evaluation", "info": " After ToNumeric type coercion, unsigned-right-shift always throws for BigInt operands", "features": ["BigInt", "Symbol.toPrimitive", "computed-property-names"]}, {"path": "./test262-main/test/language/expressions/unsigned-right-shift/bigint-wrapped-values.js", "description": " unsigned-right-shift operator ToNumeric with BigInt operands", "esid": " sec-unsigned-right-shift-operator-runtime-semantics-evaluation", "info": " After ToNumeric type coercion, unsigned-right-shift always throws for BigInt operands", "features": ["BigInt", "Symbol.toPrimitive", "computed-property-names"]}, {"path": "./test262-main/test/language/expressions/unsigned-right-shift/bigint.js", "description": " Unsigned right shift always throws for BigInt values", "esid": " sec-numeric-types-bigint-unsignedRightShift", "info": " |BigInt::unsignedRightShift (x, y)\n\nThe abstract operation BigInt::unsignedRightShift with two arguments x and y of type BigInt:\n\n1. Throw a TypeError exception.\n\n", "features": ["BigInt"]}, {"path": "./test262-main/test/language/identifiers/part-unicode-11.0.0-escaped.js", "author": " Mathias Bynens", "esid": " sec-names-and-keywords", "description": " |Test that Unicode v11.0.0 ID_Continue characters are accepted as\nidentifier part characters in escaped form, i.e.\n- \\uXXXX or \\u{XXXX} for BMP symbols\n- \\u{XXXXXX} for astral symbols\n", "info": " |Generated by https://github.com/mathiasbynens/caniunicode\n"}, {"path": "./test262-main/test/language/identifiers/part-unicode-11.0.0.js", "author": " Mathias Bynens", "esid": " sec-names-and-keywords", "description": " |Test that Unicode v11.0.0 ID_Continue characters are accepted as\nidentifier part characters.\n", "info": " |Generated by https://github.com/mathiasbynens/caniunicode\n"}, {"path": "./test262-main/test/language/identifiers/part-unicode-12.0.0-escaped.js", "author": " Mathias Bynens", "esid": " sec-names-and-keywords", "description": " |Test that Unicode v12.0.0 ID_Continue characters are accepted as\nidentifier part characters in escaped form, i.e.\n- \\uXXXX or \\u{XXXX} for BMP symbols\n- \\u{XXXXXX} for astral symbols\n", "info": " |Generated by https://github.com/mathiasbynens/caniunicode\n"}, {"path": "./test262-main/test/language/identifiers/part-unicode-12.0.0.js", "author": " Mathias Bynens", "esid": " sec-names-and-keywords", "description": " |Test that Unicode v12.0.0 ID_Continue characters are accepted as\nidentifier part characters.\n", "info": " |Generated by https://github.com/mathiasbynens/caniunicode\n"}, {"path": "./test262-main/test/language/identifiers/start-unicode-11.0.0-escaped.js", "author": " Mathias Bynens", "esid": " sec-names-and-keywords", "description": " |Test that Unicode v11.0.0 ID_Start characters are accepted as\nidentifier start characters in escaped form, i.e.\n- \\uXXXX or \\u{XXXX} for BMP symbols\n- \\u{XXXXXX} for astral symbols\n", "info": " |Generated by https://github.com/mathiasbynens/caniunicode\n"}, {"path": "./test262-main/test/language/identifiers/start-unicode-11.0.0.js", "author": " Mathias Bynens", "esid": " sec-names-and-keywords", "description": " |Test that Unicode v11.0.0 ID_Start characters are accepted as\nidentifier start characters.\n", "info": " |Generated by https://github.com/mathiasbynens/caniunicode\n"}, {"path": "./test262-main/test/language/identifiers/start-unicode-12.0.0-escaped.js", "author": " Mathias Bynens", "esid": " sec-names-and-keywords", "description": " |Test that Unicode v12.0.0 ID_Start characters are accepted as\nidentifier start characters in escaped form, i.e.\n- \\uXXXX or \\u{XXXX} for BMP symbols\n- \\u{XXXXXX} for astral symbols\n", "info": " |Generated by https://github.com/mathiasbynens/caniunicode\n"}, {"path": "./test262-main/test/language/identifiers/start-unicode-12.0.0.js", "author": " Mathias Bynens", "esid": " sec-names-and-keywords", "description": " |Test that Unicode v12.0.0 ID_Start characters are accepted as\nidentifier start characters.\n", "info": " |Generated by https://github.com/mathiasbynens/caniunicode\n"}, {"path": "./test262-main/test/language/literals/string/line-separator-eval.js", "esid": " sec-literals-string-literals", "description": " >U+2028 LINE SEPARATOR can appear in string literals (eval code).\n", "info": " |11.8.4 String Literals\n\nAll code points may appear literally in a string literal except for the\nclosing quote code points, U+005C (REVERSE SOLIDUS), U+000D (CARRIAGE RETURN),\nand U+000A (LINE FEED).\n", "features": ["json-superset"]}, {"path": "./test262-main/test/language/literals/string/line-separator.js", "esid": " sec-literals-string-literals", "description": " >U+2028 LINE SEPARATOR can appear in string literals.\n", "info": " |11.8.4 String Literals\n\nAll code points may appear literally in a string literal except for the\nclosing quote code points, U+005C (REVERSE SOLIDUS), U+000D (CARRIAGE RETURN),\nand U+000A (LINE FEED).\n", "features": ["json-superset"]}, {"path": "./test262-main/test/language/literals/string/paragraph-separator-eval.js", "esid": " sec-literals-string-literals", "description": " >U+2029 PARAGRAPH SEPARATOR can appear in string literals (eval code).\n", "info": " |11.8.4 String Literals\n\nAll code points may appear literally in a string literal except for the\nclosing quote code points, U+005C (REVERSE SOLIDUS), U+000D (CARRIAGE RETURN),\nand U+000A (LINE FEED).\n", "features": ["json-superset"]}, {"path": "./test262-main/test/language/literals/string/paragraph-separator.js", "esid": " sec-literals-string-literals", "description": " >U+2029 PARAGRAPH SEPARATOR can appear in string literals.\n", "info": " |11.8.4 String Literals\n\nAll code points may appear literally in a string literal except for the\nclosing quote code points, U+005C (REVERSE SOLIDUS), U+000D (CARRIAGE RETURN),\nand U+000A (LINE FEED).\n", "features": ["json-superset"]}, {"path": "./test262-main/test/language/statements/class/subclass-builtins/subclass-BigInt64Array.js", "description": " new SubBigInt64Array() instanceof BigInt64Array (Subclass instanceof Heritage)", "features": ["TypedArray", "BigInt"], "flags": ["generated"]}, {"path": "./test262-main/test/language/statements/class/subclass-builtins/subclass-BigUint64Array.js", "description": " new SubBigUint64Array() instanceof BigUint64Array (Subclass instanceof Heritage)", "features": ["TypedArray", "BigInt"], "flags": ["generated"]}, {"path": "./test262-main/test/language/statements/class/super/in-constructor-superproperty-evaluation.js", "esid": " sec-makesuperpropertyreference", "description": " >SuperProperty evaluation order: super() thisBinding initialization must occur first.\n"}, {"path": "./test262-main/test/language/statements/function/unscopables-with-in-nested-fn.js", "description": " Symbol.unscopables behavior across scope boundaries (function declaration)", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["globalThis", "Symbol.unscopables"], "flags": ["generated", "noStrict"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n...\nLet envRec be lex's EnvironmentRecord.\nLet exists be ? envRec.HasBinding(name).\n\nHasBinding\n\n...\nIf the withEnvironment flag of envRec is false, return true.\nLet unscopables be ? Get(bindings, @@unscopables).\nIf Type(unscopables) is Object, then\nLet blocked be ToBoolean(? Get(unscopables, N)).\nIf blocked is true, return false.\n\n(The `with` Statement) Runtime Semantics: Evaluation\n\n...\nSet the withEnvironment flag of newEnv\u2019s EnvironmentRecord to true.\n...\n\n"}, {"path": "./test262-main/test/language/statements/function/unscopables-with.js", "description": " Symbol.unscopables behavior across scope boundaries (function declaration)", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["globalThis", "Symbol.unscopables"], "flags": ["generated", "noStrict"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n...\nLet envRec be lex's EnvironmentRecord.\nLet exists be ? envRec.HasBinding(name).\n\nHasBinding\n\n...\nIf the withEnvironment flag of envRec is false, return true.\nLet unscopables be ? Get(bindings, @@unscopables).\nIf Type(unscopables) is Object, then\nLet blocked be ToBoolean(? Get(unscopables, N)).\nIf blocked is true, return false.\n\n(The `with` Statement) Runtime Semantics: Evaluation\n\n...\nSet the withEnvironment flag of newEnv\u2019s EnvironmentRecord to true.\n...\n\n"}, {"path": "./test262-main/test/language/statements/generators/unscopables-with-in-nested-fn.js", "description": " Symbol.unscopables behavior across scope boundaries (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["globalThis", "Symbol.unscopables", "generators"], "flags": ["generated", "noStrict"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n\n...\nLet envRec be lex's EnvironmentRecord.\nLet exists be ? envRec.HasBinding(name).\n\nHasBinding\n\n...\nIf the withEnvironment flag of envRec is false, return true.\nLet unscopables be ? Get(bindings, @@unscopables).\nIf Type(unscopables) is Object, then\nLet blocked be ToBoolean(? Get(unscopables, N)).\nIf blocked is true, return false.\n\n(The `with` Statement) Runtime Semantics: Evaluation\n\n...\nSet the withEnvironment flag of newEnv\u2019s EnvironmentRecord to true.\n...\n\n"}, {"path": "./test262-main/test/language/statements/generators/unscopables-with.js", "description": " Symbol.unscopables behavior across scope boundaries (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["globalThis", "Symbol.unscopables", "generators"], "flags": ["generated", "noStrict"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n\n...\nLet envRec be lex's EnvironmentRecord.\nLet exists be ? envRec.HasBinding(name).\n\nHasBinding\n\n...\nIf the withEnvironment flag of envRec is false, return true.\nLet unscopables be ? Get(bindings, @@unscopables).\nIf Type(unscopables) is Object, then\nLet blocked be ToBoolean(? Get(unscopables, N)).\nIf blocked is true, return false.\n\n(The `with` Statement) Runtime Semantics: Evaluation\n\n...\nSet the withEnvironment flag of newEnv\u2019s EnvironmentRecord to true.\n...\n\n"}]