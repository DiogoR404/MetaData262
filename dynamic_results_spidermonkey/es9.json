[{"path": "./test262-main/test/built-ins/Array/from/iter-map-fn-err.js", "esid": " sec-array.from", "description": " Error invoking map function (traversed via iterator)", "info": " |[...]\n6. If usingIterator is not undefined, then\n[...]\ng. Repeat\n[...]\nvii. If mapping is true, then\n1. Let mappedValue be Call(mapfn, T, \u00abnextValue, k\u00bb).\n2. If mappedValue is an abrupt completion, return\nIteratorClose(iterator, mappedValue).\n", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/built-ins/Array/from/iter-set-elem-prop-err.js", "esid": " sec-array.from", "description": " Error setting property on result value (traversed via iterator)", "info": " |[...]\n6. If usingIterator is not undefined, then\n[...]\ng. Repeat\n[...]\nix. Let defineStatus be CreateDataPropertyOrThrow(A, Pk,\nmappedValue).\nx. If defineStatus is an abrupt completion, return\nIteratorClose(iterator, defineStatus).\n", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/built-ins/Array/length/define-own-prop-length-no-value-order.js", "esid": " sec-arraysetlength", "description": " >Ordinary descriptor validation if [[Value]] is absent.\n", "info": " |ArraySetLength ( A, Desc )\n\n1. If Desc.[[Value]] is absent, then\na. Return OrdinaryDefineOwnProperty(A, \"length\", Desc).\n\nOrdinaryDefineOwnProperty ( O, P, Desc )\n\n[...]\n3. Return ValidateAndApplyPropertyDescriptor(O, P, extensible, Desc, current).\n\nValidateAndApplyPropertyDescriptor ( O, P, extensible, Desc, current )\n\n[...]\n4. If current.[[Configurable]] is false, then\na. If Desc.[[Configurable]] is present and its value is true, return false.\nb. If Desc.[[Enumerable]] is present and\n! SameValue(Desc.[[Enumerable]], current.[[Enumerable]]) is false, return false.\n[...]\n6. Else if ! SameValue(! IsDataDescriptor(current), ! IsDataDescriptor(Desc)) is false, then\na. If current.[[Configurable]] is false, return false.\n[...]\n7. Else if IsDataDescriptor(current) and IsDataDescriptor(Desc) are both true, then\na. If current.[[Configurable]] is false and current.[[Writable]] is false, then\ni. If Desc.[[Writable]] is present and Desc.[[Writable]] is true, return false.\n", "features": ["Reflect"]}, {"path": "./test262-main/test/built-ins/Array/prototype/Symbol.iterator.js", "description": " Initial state of the Symbol.iterator property", "info": " |The initial value of the @@iterator property is the same function object as\nthe initial value of the Array.prototype.values property.\n\nPer ES6 section 17, the method should exist on the Array prototype, and it\nshould be writable and configurable, but not enumerable.\n", "includes": ["propertyHelper.js"], "features": ["Symbol.iterator"], "esid": " sec-array.prototype-@@iterator"}, {"path": "./test262-main/test/built-ins/Array/prototype/pop/S15.4.4.6_A2_T2.js", "info": " |The pop function is intentionally generic.\nIt does not require that its this value be an Array object\n", "esid": " sec-array.prototype.pop", "description": " >If ToUint32(length) equal zero, call the [[Put]] methodof this\nobject with arguments \"length\" and 0 and return undefined\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/pop/S15.4.4.6_A3_T1.js", "info": " Check ToLength(length) for non Array objects", "esid": " sec-array.prototype.pop", "description": " length = 4294967296"}, {"path": "./test262-main/test/built-ins/Array/prototype/pop/S15.4.4.6_A3_T2.js", "info": " Check ToLength(length) for non Array objects", "esid": " sec-array.prototype.pop", "description": " length = 4294967297"}, {"path": "./test262-main/test/built-ins/Array/prototype/pop/clamps-to-integer-limit.js", "esid": " sec-array.prototype.pop", "description": " >Length values exceeding 2^53-1 are clamped to 2^53-1.\n", "info": " |1. ...\n2. Let len be ? ToLength(? Get(O, \"length\")).\n...\n4. Else len > 0,\na. Let newLen be len-1.\n...\ne. Perform ? Set(O, \"length\", newLen, true).\n...\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/pop/length-near-integer-limit.js", "esid": " sec-array.prototype.pop", "description": " >A value is removed from an array-like object whose length property is near the integer limit.\n", "info": " |...\n2. Let len be ? ToLength(? Get(O, \"length\")).\n...\n4. Else len > 0,\na. Let newLen be len-1.\nb. Let index be ! ToString(newLen).\nc. Let element be ? Get(O, index).\nd. Perform ? DeletePropertyOrThrow(O, index).\ne. Perform ? Set(O, \"length\", newLen, true).\nf. Return element. \n"}, {"path": "./test262-main/test/built-ins/Array/prototype/push/S15.4.4.7_A2_T2.js", "info": " |The push function is intentionally generic.\nIt does not require that its this value be an Array object\n", "esid": " sec-array.prototype.push", "description": " >The arguments are appended to the end of the array, inthe order\nin which they appear. The new length of the array is returnedas\nthe result of the call\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/push/S15.4.4.7_A4_T1.js", "info": " Check ToLength(length) for non Array objects", "esid": " sec-array.prototype.push", "description": " length = 4294967296"}, {"path": "./test262-main/test/built-ins/Array/prototype/push/clamps-to-integer-limit.js", "esid": " sec-array.prototype.push", "description": " >Length values exceeding 2^53-1 are clamped to 2^53-1.\n", "info": " |1. ...\n2. Let len be ? ToLength(? Get(O, \"length\")).\n3. Let items be a List whose elements are, in left to right order, the arguments\nthat were passed to this function invocation.\n4. Let argCount be the number of elements in items.\n...\n7. Perform ? Set(O, \"length\", len, true).\n...\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/push/length-near-integer-limit-set-failure.js", "esid": " sec-array.prototype.push", "description": " >A value is inserted in an array-like object whose length property is near the integer limit.\nUnsuccessful [[Set]] raises a TypeError.\n", "info": " |Array.prototype.push ( ...items )\n\n[...]\n2. Let len be ? LengthOfArrayLike(O).\n[...]\n4. Let argCount be the number of elements in items.\n[...]\n6. Repeat, while items is not empty,\na. Remove the first element from items and let E be the value of the element.\nb. Perform ? Set(O, ! ToString(len), E, true).\nc. Set len to len + 1.\n[...]\n\nOrdinarySetWithOwnDescriptor ( O, P, V, Receiver, ownDesc )\n\n[...]\n3. If IsDataDescriptor(ownDesc) is true, then\na. If ownDesc.[[Writable]] is false, return false.\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/push/length-near-integer-limit.js", "esid": " sec-array.prototype.push", "description": " >A value is inserted in an array-like object whose length property is near the integer limit.\n", "info": " |...\n2. Let len be ? ToLength(? Get(O, \"length\")).\n3. Let items be a List whose elements are, in left to right order, the\narguments that were passed to this function invocation.\n...\n5. Repeat, while items is not empty\n...\n7. Perform ? Set(O, \"length\", len, true).\n...\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/push/throws-if-integer-limit-exceeded.js", "esid": " sec-array.prototype.push", "description": " >A TypeError is thrown if the new length exceeds 2^53-1.\n", "info": " |1. ...\n2. Let len be ? ToLength(? Get(O, \"length\")).\n3. Let items be a List whose elements are, in left to right order, the arguments\nthat were passed to this function invocation.\n4. Let argCount be the number of elements in items.\n5. If len + argCount > 2^53-1, throw a TypeError exception.\n...\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/reverse/length-exceeding-integer-limit-with-object.js", "esid": " sec-array.prototype.reverse", "description": " >Ensure reverse() implementation correctly handles length exceeding 2^53-1 with plain objects.\n", "info": " |...\n2. Let len be ? ToLength(? Get(O, \"length\")).\n...\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/reverse/length-exceeding-integer-limit-with-proxy.js", "esid": " sec-array.prototype.reverse", "description": " >Ensure correct MOP operations are called when length exceeds 2^53-1.\n", "includes": ["compareArray.js", "proxyTrapsHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/slice/S15.4.4.10_A3_T1.js", "info": " Check ToLength(length) for non Array objects", "esid": " sec-array.prototype.slice", "description": " length = 4294967296"}, {"path": "./test262-main/test/built-ins/Array/prototype/slice/S15.4.4.10_A3_T2.js", "info": " Check ToLength(length) for non Array objects", "esid": " sec-array.prototype.slice", "description": " length = 4294967297"}, {"path": "./test262-main/test/built-ins/Array/prototype/slice/create-non-array-invalid-len.js", "esid": " sec-array.prototype.slice", "description": " Abrupt completion from creating a new array", "info": " |[...]\n8. Let A be ? ArraySpeciesCreate(O, count).\n[...]\n\n9.4.2.3 ArraySpeciesCreate\n\n[...]\n3. Let isArray be ? IsArray(originalArray).\n4. If isArray is false, return ? ArrayCreate(length).\n\n9.4.2.2 ArrayCreate\n\n[...]\n3. If length>232-1, throw a RangeError exception.\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/slice/create-proxied-array-invalid-len.js", "esid": " sec-array.prototype.slice", "description": " >Ensure a RangeError is thrown when a proxied array returns an invalid array length.\n", "info": " |[...]\n8. Let A be ? ArraySpeciesCreate(O, count).\n[...]\n\n9.4.2.3 ArraySpeciesCreate\n\n[...]\n3. Let isArray be ? IsArray(originalArray).\n[...]\n5. Let C be ? Get(originalArray, \"constructor\").\n[...]\n10. Return ? Construct(C, \u00ab length \u00bb).\n\n9.4.2.2 ArrayCreate\n\n[...]\n3. If length>2^32-1, throw a RangeError exception.\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Array/prototype/slice/length-exceeding-integer-limit-proxied-array.js", "esid": " sec-array.prototype.slice", "description": " >Length property is clamped to 2^53-1, test with indices near 2^53-1 and negative indices\nand a proxy to an array.\n", "info": " |...\n2. Let len be ? ToLength(? Get(O, \"length\")).\n3. Let relativeStart be ? ToInteger(start).\n4. If relativeStart < 0, let k be max((len + relativeStart), 0);\nelse let k be min(relativeStart, len).\n5. If end is undefined, let relativeEnd be len; else let relativeEnd be ? ToInteger(end).\n6. If relativeEnd < 0, let final be max((len + relativeEnd), 0);\nelse let final be min(relativeEnd, len).\n...\n", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/slice/length-exceeding-integer-limit.js", "esid": " sec-array.prototype.slice", "description": " >Length property is clamped to 2^53-1, test with indices near 2^53-1 and negative indices.\n", "info": " |...\n2. Let len be ? ToLength(? Get(O, \"length\")).\n3. Let relativeStart be ? ToInteger(start).\n4. If relativeStart < 0, let k be max((len + relativeStart), 0);\nelse let k be min(relativeStart, len).\n5. If end is undefined, let relativeEnd be len; else let relativeEnd be ? ToInteger(end).\n6. If relativeEnd < 0, let final be max((len + relativeEnd), 0);\nelse let final be min(relativeEnd, len).\n...\n", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/sort/comparefn-nonfunction-call-throws.js", "esid": " sec-array.prototype.sort", "description": " throws on a non-undefined non-function", "info": " |22.1.3.25 Array.prototype.sort ( comparefn )\n\nUpon entry, the following steps are performed to initialize evaluation\nof the sort function:\n\n...\n1. If _comparefn_ is not *undefined* and IsCallable(_comparefn_) is *false*, throw a *TypeError* exception.\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Array/prototype/sort/precise-prototype-accessors.js", "esid": " sec-array.prototype.sort", "description": " >Previously implementation-defined aspects of Array.prototype.sort.\n", "info": " |Historically, many aspects of Array.prototype.sort remained\nimplementation-defined. https://github.com/tc39/ecma262/pull/1585\ndescribed some behaviors more precisely, reducing the amount of cases\nthat result in an implementation-defined sort order.\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/splice/S15.4.4.12_A3_T1.js", "info": " Check ToLength(length) for non Array objects", "esid": " sec-array.prototype.splice", "description": " length is arbitrarily"}, {"path": "./test262-main/test/built-ins/Array/prototype/splice/clamps-length-to-integer-limit.js", "esid": " sec-array.prototype.splice", "description": " >Length values exceeding 2^53-1 are clamped to 2^53-1.\n", "info": " |1. ...\n2. Let len be ? ToLength(? Get(O, \"length\")).\n...\n5. If the number of actual arguments is 0, then\na. Let insertCount be 0.\nb. Let actualDeleteCount be 0.\n...\n19. Perform ? Set(O, \"length\", len - actualDeleteCount + itemCount, true).\n...\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/splice/create-non-array-invalid-len.js", "esid": " sec-array.prototype.splice", "description": " Abrupt completion from creating a new array", "info": " |[...]\n9. Let A be ? ArraySpeciesCreate(O, actualDeleteCount).\n[...]\n\n9.4.2.3 ArraySpeciesCreate\n\n[...]\n3. Let isArray be ? IsArray(originalArray).\n4. If isArray is false, return ? ArrayCreate(length).\n\n9.4.2.2 ArrayCreate\n\n[...]\n3. If length>232-1, throw a RangeError exception.\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/splice/create-species-length-exceeding-integer-limit.js", "esid": " sec-array.prototype.splice", "description": " >Create species constructor with length exceeding integer limit and ensure MOP\noperations are called in correct order.\n", "info": " |...\n9. Let A be ? ArraySpeciesCreate(O, actualDeleteCount).\n10. Let k be 0.\n11. Repeat, while k < actualDeleteCount\na. Let from be ! ToString(actualStart+k).\nb. Let fromPresent be ? HasProperty(O, from).\nc. If fromPresent is true, then\ni. Let fromValue be ? Get(O, from).\nii. Perform ? CreateDataPropertyOrThrow(A, ! ToString(k), fromValue).\nd. Increment k by 1.\n12. Perform ? Set(A, \"length\", actualDeleteCount, true).\n...\n", "includes": ["compareArray.js", "proxyTrapsHelper.js"], "features": ["Symbol.species"]}, {"path": "./test262-main/test/built-ins/Array/prototype/splice/create-species-undef-invalid-len.js", "esid": " sec-array.prototype.splice", "description": " >An undefined value for the @@species constructor triggers the creationof\nan Array exotic object\n", "info": " |[...]\n9. Let A be ? ArraySpeciesCreate(O, actualDeleteCount).\n[...]\n\n9.4.2.3 ArraySpeciesCreate\n\n[...]\n5. Let C be ? Get(originalArray, \"constructor\").\n[...]\n7. If Type(C) is Object, then\na. Let C be ? Get(C, @@species).\nb. If C is null, let C be undefined.\n8. If C is undefined, return ? ArrayCreate(length).\n\n9.4.2.2 ArrayCreate\n\n[...]\n3. If length>232-1, throw a RangeError exception.\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Array/prototype/splice/length-and-deleteCount-exceeding-integer-limit.js", "esid": " sec-array.prototype.splice", "description": " >Length and deleteCount are both clamped to 2^53-1 when they exceed the integer limit.\n", "info": " |...\n2. Let len be ? ToLength(? Get(O, \"length\")).\n...\n7. Else,\na. Let insertCount be the number of actual arguments minus 2.\nb. Let dc be ? ToInteger(deleteCount).\nc. Let actualDeleteCount be min(max(dc, 0), len - actualStart).\n...\n11. Repeat, while k < actualDeleteCount\na. Let from be ! ToString(actualStart+k).\nb. Let fromPresent be ? HasProperty(O, from).\nc. If fromPresent is true, then\ni. Let fromValue be ? Get(O, from).\nii. Perform ? CreateDataPropertyOrThrow(A, ! ToString(k), fromValue).\nd. Increment k by 1.\n...\n", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/splice/length-exceeding-integer-limit-shrink-array.js", "esid": " sec-array.prototype.splice", "description": " >An element is removed from an array-like object whose length exceeds the integer limit.\n", "info": " |...\n15. If itemCount < actualDeleteCount, then\na. Let k be actualStart.\nb. Repeat, while k < (len - actualDeleteCount)\ni. Let from be ! ToString(k+actualDeleteCount).\nii. Let to be ! ToString(k+itemCount).\niii. Let fromPresent be ? HasProperty(O, from).\niv. If fromPresent is true, then\n1. Let fromValue be ? Get(O, from).\n2. Perform ? Set(O, to, fromValue, true).\nv. Else fromPresent is false,\n1. Perform ? DeletePropertyOrThrow(O, to).\nvi. Increase k by 1.\nc. Let k be len.\nd. Repeat, while k > (len - actualDeleteCount + itemCount)\ni. Perform ? DeletePropertyOrThrow(O, ! ToString(k-1)).\nii. Decrease k by 1.\n...\n", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/splice/length-near-integer-limit-grow-array.js", "esid": " sec-array.prototype.splice", "description": " >A value is inserted in an array-like object whose length property is near the integer limit.\n", "info": " |...\n16. Else if itemCount > actualDeleteCount, then\na. Let k be (len - actualDeleteCount).\nb. Repeat, while k > actualStart\ni. Let from be ! ToString(k + actualDeleteCount - 1).\nii. Let to be ! ToString(k + itemCount - 1).\niii. Let fromPresent be ? HasProperty(O, from).\niv. If fromPresent is true, then\n1. Let fromValue be ? Get(O, from).\n2. Perform ? Set(O, to, fromValue, true).\nv. Else fromPresent is false,\n1. Perform ? DeletePropertyOrThrow(O, to).\nvi. Decrease k by 1.\n...\n", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/splice/throws-if-integer-limit-exceeded.js", "esid": " sec-array.prototype.splice", "description": " >A TypeError is thrown if the new length exceeds 2^53-1.\n", "info": " |1. ...\n2. Let len be ? ToLength(? Get(O, \"length\")).\n...\n7. Else,\na. Let insertCount be the number of actual arguments minus 2.\nb. Let dc be ? ToInteger(deleteCount).\nc. Let actualDeleteCount be min(max(dc, 0), len - actualStart).\n8. If len+insertCount-actualDeleteCount > 2^53-1, throw a TypeError exception.\n...\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/unshift/clamps-to-integer-limit.js", "esid": " sec-array.prototype.unshift", "description": " >Length values exceeding 2^53-1 are clamped to 2^53-1.\n", "info": " |1. ...\n2. Let len be ? ToLength(? Get(O, \"length\")).\n3. Let argCount be the number of actual arguments.\n4. If argCount > 0, then ...\n5. Perform ? Set(O, \"length\", len+argCount, true).\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/unshift/length-near-integer-limit.js", "esid": " sec-array.prototype.unshift", "description": " >Test properties are correctly accessed when length property is near 2^53-1.\n", "info": " |2. Let len be ? ToLength(? Get(O, \"length\")).\n3. Let argCount be the number of actual arguments.\n4. If argCount > 0, then\n...\nb. Let k be len.\nc. Repeat, while k > 0,\ni. Let from be ! ToString(k-1).\nii. Let to be ! ToString(k+argCount-1).\niii. Let fromPresent be ? HasProperty(O, from).\niv. If fromPresent is true, then\n1. Let fromValue be ? Get(O, from).\n2. Perform ? Set(O, to, fromValue, true).\nv. Else fromPresent is false,\n1. Perform ? DeletePropertyOrThrow(O, to).\nvi. Decrease k by 1.\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/unshift/throws-if-integer-limit-exceeded.js", "esid": " sec-array.prototype.unshift", "description": " >A TypeError is thrown if the new length exceeds 2^53-1.\n", "info": " |1. ...\n2. Let len be ? ToLength(? Get(O, \"length\")).\n3. Let argCount be the number of actual arguments.\n4. If argCount > 0, then\na. If len+argCount > 2^53-1, throw a TypeError exception.\nb. ...\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/values/iteration-mutable.js", "esid": " sec-array.prototype.values", "description": " >New items in the array are accessible via iteration until iterator is \"done\".\n", "info": " |When an item is added to the array after the iterator is created but\nbefore the iterator is \"done\" (as defined by 22.1.5.2.1), the new item's\nvalue should be accessible via iteration. When an item is added to the\narray after the iterator is \"done\", the new item should not be\naccessible via iteration.\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/values/iteration.js", "esid": " sec-array.prototype.values", "description": " >The return is a valid iterator with the array's numeric properties.\n", "info": " |22.1.3.29 Array.prototype.values ( )\n\n1. Let O be ToObject(this value).\n2. ReturnIfAbrupt(O).\n3. Return CreateArrayIterator(O, \"value\").\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/values/length.js", "esid": " sec-array.prototype.values", "description": " Array.prototype.values `length` property", "info": " |ES6 Section 17:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this value\nis equal to the largest number of named arguments shown in the subclause\nheadings for the function description, including optional parameters.\n\n[...]\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/values/name.js", "esid": " sec-array.prototype.values", "description": " Array.prototype.values `name` property", "info": " |ES6 Section 17:\n\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value is a\nString. Unless otherwise specified, this value is the name that is given to\nthe function in this specification.\n\n[...]\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/values/prop-desc.js", "esid": " sec-array.prototype.values", "description": " Array.prototype.values property descriptor", "info": " |Every other data property described in clauses 18 through 26 and in Annex\nB.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false,\n[[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/values/returns-iterator-from-object.js", "esid": " sec-array.prototype.values", "description": " >Creates an iterator from a custom object.\n", "info": " |22.1.3.29 Array.prototype.values ( )\n\n1. Let O be ToObject(this value).\n2. ReturnIfAbrupt(O).\n3. Return CreateArrayIterator(O, \"value\").\n", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/built-ins/Array/prototype/values/returns-iterator.js", "esid": " sec-array.prototype.values", "description": " >The method should return an Iterator instance.\n", "info": " |22.1.3.29 Array.prototype.values ( )\n\n1. Let O be ToObject(this value).\n2. ReturnIfAbrupt(O).\n3. Return CreateArrayIterator(O, \"value\").\n\n22.1.5.1 CreateArrayIterator Abstract Operation\n\n...\n2. Let iterator be ObjectCreate(%ArrayIteratorPrototype%, \u00ab\u200d[[IteratedObject]],\n[[ArrayIteratorNextIndex]], [[ArrayIterationKind]]\u00bb).\n...\n6. Return iterator.\n", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/built-ins/ArrayBuffer/allocation-limit.js", "esid": " sec-arraybuffer-length", "description": " >Throws a RangeError if requested Data Block is too large.\n", "info": " |ArrayBuffer( length )\n\n...\n6. Return AllocateArrayBuffer(NewTarget, byteLength).\n\n6.2.6.1 CreateByteDataBlock(size)\n...\n2. Let db be a new Data Block value consisting of size bytes. If it is\nimpossible to create such a Data Block, throw a RangeError exception.\n...\n"}, {"path": "./test262-main/test/built-ins/ArrayBuffer/length-is-too-large-throws.js", "esid": " sec-arraybuffer-length", "description": " >Throws a RangeError if length >= 2 ** 53\n", "info": " |ArrayBuffer( length )\n\n1. If NewTarget is undefined, throw a TypeError exception.\n2. Let byteLength be ? ToIndex(length).\n\nToIndex( value )\n\n1. If value is undefined, then\na. Let index be 0.\n2. Else,\na. Let integerIndex be ? ToInteger(value).\nb. If integerIndex < 0, throw a RangeError exception.\n...\n"}, {"path": "./test262-main/test/built-ins/ArrayBuffer/negative-length-throws.js", "esid": " sec-arraybuffer-length", "description": " >Throws a Range Error if length represents an integer < 0\n", "info": " |ArrayBuffer( length )\n\n1. If NewTarget is undefined, throw a TypeError exception.\n2. Let byteLength be ? ToIndex(length).\n\nToIndex( value )\n\n1. If value is undefined, then\na. Let index be 0.\n2. Else,\na. Let integerIndex be ? ToInteger(value).\nb. If integerIndex < 0, throw a RangeError exception.\n...\n"}, {"path": "./test262-main/test/built-ins/ArrayBuffer/prototype/byteLength/this-is-sharedarraybuffer.js", "esid": " sec-get-arraybuffer.prototype.bytelength", "description": " Throws a TypeError exception when `this` is a SharedArrayBuffer", "features": ["align-detached-buffer-semantics-with-web-reality", "SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/ArrayBuffer/prototype/slice/this-is-sharedarraybuffer.js", "esid": " sec-arraybuffer.prototype.slice", "description": " >Throws a TypeError if `this` is a SharedArrayBuffer\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/AsyncArrowFunction/is-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >The AsyncArrowFunction constructor implements [[Construct]]\n", "info": " |IsConstructor ( argument )\n\nThe abstract operation IsConstructor takes argument argument (an ECMAScript language value).\nIt determines if argument is a function object with a [[Construct]] internal method.\nIt performs the following steps when called:\n\nIf Type(argument) is not Object, return false.\nIf argument has a [[Construct]] internal method, return true.\nReturn false.\n", "includes": ["isConstructor.js", "hidden-constructors.js"], "features": ["Reflect.construct"]}, {"path": "./test262-main/test/built-ins/AsyncFromSyncIteratorPrototype/next/return-promise.js", "esid": " sec-%asyncfromsynciteratorprototype%.next", "description": " >\"next\" returns a promise for an IteratorResult object\n", "info": " |%AsyncFromSyncIteratorPrototype%.next ( value )\n...\n2. Let promiseCapability be ! NewPromiseCapability(%Promise%).\n...\n18. Return promiseCapability.[[Promise]].\n\n", "features": ["async-iteration"]}, {"path": "./test262-main/test/built-ins/AsyncFunction/is-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >The AsyncFunction constructor implements [[Construct]]\n", "info": " |IsConstructor ( argument )\n\nThe abstract operation IsConstructor takes argument argument (an ECMAScript language value).\nIt determines if argument is a function object with a [[Construct]] internal method.\nIt performs the following steps when called:\n\nIf Type(argument) is not Object, return false.\nIf argument has a [[Construct]] internal method, return true.\nReturn false.\n", "includes": ["isConstructor.js", "hidden-constructors.js"], "features": ["Reflect.construct"]}, {"path": "./test262-main/test/built-ins/AsyncGeneratorFunction/extensibility.js", "esid": " sec-properties-of-asyncgeneratorfunction", "description": " Object extensibility", "info": " |The value of the [[Extensible]] internal slot of the AsyncGeneratorFunction\nconstructor is true.\n", "features": ["async-iteration"]}, {"path": "./test262-main/test/built-ins/AsyncGeneratorFunction/has-instance.js", "esid": " sec-properties-of-asyncgeneratorfunction", "description": " >AsyncGenerator function instances are correctly reported as instances of the\nAsyncGeneratorFunction intrinsic.\n", "features": ["async-iteration"]}, {"path": "./test262-main/test/built-ins/AsyncGeneratorFunction/instance-construct-throws.js", "esid": " sec-asyncgeneratorfunction", "description": " The instance created by AsyncGeneratorFunction is not a constructor", "info": " |AsyncGeneratorFunction ( p1, p2, \u2026 , pn, body )\n...\n3. Return ? CreateDynamicFunction(C, NewTarget, \"async generator\", args).\n\nRuntime Semantics: CreateDynamicFunction( constructor, newTarget, kind, args )\n...\n32. Let F be FunctionAllocate(proto, strict, kind).\n...\n\nFunctionAllocate ( functionPrototype, strict, functionKind )\n// [[Construct]] and [[ConstructKind]] are not set for functionKind=\"async generators\"\n\n", "features": ["async-iteration"]}, {"path": "./test262-main/test/built-ins/AsyncGeneratorFunction/instance-length.js", "esid": " sec-asyncgeneratorfunction", "description": " Definition of instance `length` property", "info": " |AsyncGeneratorFunction ( p1, p2, \u2026 , pn, body )\n...\n3. Return CreateDynamicFunction(C, NewTarget, \"async generator\", args).\n\nRuntime Semantics: CreateDynamicFunction\n...\n// the parameter \"args\" is sliced into \"parameters\" and \"body\"\n26. Perform FunctionInitialize(F, Normal, parameters, body, scope).\n...\n\nFunctionInitialize\n...\n2. Let len be the ExpectedArgumentCount of ParameterList.\n3. Perform ! DefinePropertyOrThrow(F, \"length\",\nPropertyDescriptor{[[Value]]: len, [[Writable]]: false, [[Enumerable]]:\nfalse, [[Configurable]]: true}).\n...\n", "includes": ["propertyHelper.js"], "features": ["async-iteration"]}, {"path": "./test262-main/test/built-ins/AsyncGeneratorFunction/instance-name.js", "esid": " sec-asyncgeneratorfunction", "description": " Assignment of function `name` attribute", "info": " |AsyncGeneratorFunction ( p1, p2, \u2026 , pn, body )\n...\n3. Return CreateDynamicFunction(C, NewTarget, \"async generator\", args).\n\nRuntimeSemantics: CreateDynamicFunction(constructor, newTarget, kind, args)\n...\n29. Perform SetFunctionName(F, \"anonymous\").\n", "includes": ["propertyHelper.js"], "features": ["async-iteration"]}, {"path": "./test262-main/test/built-ins/AsyncGeneratorFunction/instance-prototype.js", "esid": " sec-asyncgeneratorfunction", "description": " Definition of instance `prototype` property", "info": " |AsyncGeneratorFunction ( p1, p2, \u2026 , pn, body )\n...\n3. Return CreateDynamicFunction(C, NewTarget, \"async generator\", args).\n\nRuntime Semantics: CreateDynamicFunction\n...\n37. Else if kind is \"async generator\", then\na. Let prototype be ObjectCreate(%AsyncGeneratorPrototype%).\nb. Perform DefinePropertyOrThrow(F, \"prototype\",\nPropertyDescriptor{[[Value]]: prototype, [[Writable]]: true,\n[[Enumerable]]: false, [[Configurable]]: false}).\n...\n", "includes": ["propertyHelper.js"], "features": ["async-iteration"]}, {"path": "./test262-main/test/built-ins/AsyncGeneratorFunction/is-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >The AsyncGeneratorFunction constructor implements [[Construct]]\n", "info": " |IsConstructor ( argument )\n\nThe abstract operation IsConstructor takes argument argument (an ECMAScript language value).\nIt determines if argument is a function object with a [[Construct]] internal method.\nIt performs the following steps when called:\n\nIf Type(argument) is not Object, return false.\nIf argument has a [[Construct]] internal method, return true.\nReturn false.\n", "includes": ["isConstructor.js", "hidden-constructors.js"], "features": ["Reflect.construct"]}, {"path": "./test262-main/test/built-ins/AsyncGeneratorFunction/length.js", "esid": " sec-asyncgeneratorfunction-length", "description": " >This is a data property with a value of 1. This property has the attributes\n{ [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["async-iteration"]}, {"path": "./test262-main/test/built-ins/AsyncGeneratorFunction/name.js", "esid": " sec-properties-of-asyncgeneratorfunction", "description": " Function \"name\" property", "info": " |The value of the name property of the AsyncGeneratorFunction\nis \"AsyncGeneratorFunction\".\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value is a\nString.\n\nUnless otherwise specified, the name property of a built-in Function object,\nif it exists, has the attributes { [[Writable]]: false, [[Enumerable]]:\nfalse, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["async-iteration"]}, {"path": "./test262-main/test/built-ins/AsyncGeneratorFunction/prototype/Symbol.toStringTag.js", "esid": " sec-asyncgeneratorfunction-prototype-tostringtag", "description": " >`Symbol.toStringTag` property descriptor\n", "info": " |The initial value of the @@toStringTag property is the String\nvalue \"AsyncGeneratorFunction\".\n\nThis property has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["async-iteration", "Symbol.toStringTag"]}, {"path": "./test262-main/test/built-ins/AsyncGeneratorFunction/prototype/constructor.js", "esid": " sec-asyncgeneratorfunction-prototype-constructor", "description": " >`constructor` property of the AsyncGeneratorFunction.prototype object\n", "info": " |The initial value of AsyncGeneratorFunction.prototype.constructor is the intrinsic\nobject %AsyncGeneratorFunction%.\n\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]:\nfalse, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["async-iteration"]}, {"path": "./test262-main/test/built-ins/AsyncGeneratorFunction/prototype/extensibility.js", "esid": " sec-properties-of-asyncgenerator-prototype", "description": " Object extensibility", "info": " |The initial value of the [[Extensible]] internal slot of the\nAsyncGeneratorFunction prototype object is true.\n", "features": ["async-iteration"]}, {"path": "./test262-main/test/built-ins/AsyncGeneratorFunction/prototype/not-callable.js", "esid": " sec-properties-of-asyncgeneratorfunction-prototype", "description": " >%AsyncGeneratorFunction.prototype% is an ordinary non-callable object.\n", "info": " |Properties of the AsyncGeneratorFunction Prototype Object\n\nThe AsyncGeneratorFunction prototype object:\n\n[...]\n* is an ordinary object.\n* is not a function object and does not have an [[ECMAScriptCode]] internal slot\nor any other of the internal slots listed in Table 28 or Table 75.\n", "features": ["async-iteration"]}, {"path": "./test262-main/test/built-ins/AsyncGeneratorFunction/prototype/prop-desc.js", "description": " AsyncGeneratorFunction.prototype property descriptor", "esid": " sec-asyncgeneratorfunction-prototype", "info": " |This property has the attributes { [[Writable]]: false, [[Enumerable]]:\nfalse, [[Configurable]]: false }.\n", "includes": ["propertyHelper.js"], "features": ["async-iteration"]}, {"path": "./test262-main/test/built-ins/AsyncGeneratorFunction/prototype/prototype.js", "esid": " sec-asyncgeneratorfunction-prototype-prototype", "description": " >The value of AsyncGeneratorFunction.prototype.prototype is the\n%AsyncGeneratorPrototype% intrinsic object.\n\nThis property has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["async-iteration"]}, {"path": "./test262-main/test/built-ins/AsyncGeneratorPrototype/Symbol.toStringTag.js", "esid": " sec-asyncgenerator-prototype-tostringtag", "description": " >`Symbol.toStringTag` property descriptor\n", "info": " |The initial value of the @@toStringTag property is the String value\n\"AsyncGenerator\".\n\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]:\nfalse, [[Configurable]]: true }.\n\n", "includes": ["propertyHelper.js"], "features": ["async-iteration", "Symbol.toStringTag"]}, {"path": "./test262-main/test/built-ins/AsyncGeneratorPrototype/constructor.js", "esid": " sec-asyncgenerator-prototype-constructor", "description": " >The GeneratorPrototype intrinsic's constructor.\n", "info": " |AsyncGenerator.prototype.constructor\n\nThe initial value of AsyncGenerator.prototype.constructor is the\nintrinsic object %AsyncGenerator%.\n\nThis property has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n\n", "includes": ["propertyHelper.js"], "features": ["async-iteration"]}, {"path": "./test262-main/test/built-ins/AsyncGeneratorPrototype/next/length.js", "esid": " sec-asyncgenerator-prototype-next", "description": " >AsyncGenerator.prototype.next.length is 1.\n", "info": " |AsyncGenerator.prototype.next ( value )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["async-iteration"]}, {"path": "./test262-main/test/built-ins/AsyncGeneratorPrototype/next/name.js", "esid": " sec-asyncgenerator-prototype-next", "description": " >Generator.prototype.next.name is \"next\".\n", "info": " |Generator.prototype.next ( value )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["async-iteration"]}, {"path": "./test262-main/test/built-ins/AsyncGeneratorPrototype/next/prop-desc.js", "esid": " sec-asyncgenerator-prototype-next", "description": " GeneratorPrototype.next property description", "info": " |This property has the attributes { [[Writable]]: false, [[Enumerable]]:\nfalse, [[Configurable]]: false }.\n", "includes": ["propertyHelper.js"], "features": ["async-iteration"]}, {"path": "./test262-main/test/built-ins/AsyncGeneratorPrototype/next/return-promise.js", "esid": " sec-asyncgenerator-prototype-next", "description": " >\"next\" returns a promise for an IteratorResult object\n", "info": " |AsyncGenerator.prototype.next ( value )\n1. Let generator be the this value.\n2. Let completion be NormalCompletion(value).\n3. Return ! AsyncGeneratorEnqueue(generator, completion).\n\nAsyncGeneratorEnqueue ( generator, completion )\n...\n2. Let promiseCapability be ! NewPromiseCapability(%Promise%).\n...\n9. Return promiseCapability.[[Promise]].\n\n", "features": ["async-iteration"]}, {"path": "./test262-main/test/built-ins/AsyncGeneratorPrototype/return/length.js", "esid": " sec-asyncgenerator-prototype-return", "description": " >AsyncGenerator.prototype.return.length is 1.\n", "info": " |AsyncGenerator.prototype.return ( value )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["async-iteration"]}, {"path": "./test262-main/test/built-ins/AsyncGeneratorPrototype/return/name.js", "esid": " sec-asyncgenerator-prototype-return", "description": " >Generator.prototype.next.name is \"return\".\n", "info": " |Generator.prototype.return ( value )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["async-iteration"]}, {"path": "./test262-main/test/built-ins/AsyncGeneratorPrototype/return/prop-desc.js", "esid": " sec-asyncgenerator-prototype-thow", "description": " GeneratorPrototype.return property description", "info": " |This property has the attributes { [[Writable]]: false, [[Enumerable]]:\nfalse, [[Configurable]]: false }.\n", "includes": ["propertyHelper.js"], "features": ["async-iteration"]}, {"path": "./test262-main/test/built-ins/AsyncGeneratorPrototype/return/return-promise.js", "esid": " sec-asyncgenerator-prototype-next", "description": " >\"return\" returns a promise\n", "info": " |AsyncGenerator.prototype.return ( value )\n1. Let generator be the this value.\n2. Let completion be Completion{[[Type]]: return, [[Value]]: value,\n[[Target]]: empty}.\n3. Return ! AsyncGeneratorEnqueue(generator, completion).\n\nAsyncGeneratorEnqueue ( generator, completion )\n...\n2. Let promiseCapability be ! NewPromiseCapability(%Promise%).\n...\n9. Return promiseCapability.[[Promise]].\n\n", "features": ["async-iteration"]}, {"path": "./test262-main/test/built-ins/AsyncGeneratorPrototype/throw/length.js", "esid": " sec-asyncgenerator-prototype-throw", "description": " >AsyncGenerator.prototype.throw.length is 1.\n", "info": " |AsyncGenerator.prototype.throw ( value )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["async-iteration"]}, {"path": "./test262-main/test/built-ins/AsyncGeneratorPrototype/throw/name.js", "esid": " sec-asyncgenerator-prototype-throw", "description": " >Generator.prototype.next.name is \"throw\".\n", "info": " |Generator.prototype.throw ( value )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["async-iteration"]}, {"path": "./test262-main/test/built-ins/AsyncGeneratorPrototype/throw/prop-desc.js", "esid": " sec-asyncgenerator-prototype-thow", "description": " GeneratorPrototype.throw property description", "info": " |This property has the attributes { [[Writable]]: false, [[Enumerable]]:\nfalse, [[Configurable]]: false }.\n", "includes": ["propertyHelper.js"], "features": ["async-iteration"]}, {"path": "./test262-main/test/built-ins/AsyncIteratorPrototype/Symbol.asyncIterator/length.js", "esid": " sec-asynciteratorprototype-asynciterator", "description": " Length of AsyncIteratorPrototype[ @@asyncIterator ]", "info": " |ECMAScript Standard Built-in Objects\n...\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this value\nis equal to the largest number of named arguments shown in the subclause\nheadings for the function description, including optional parameters.\n...\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "features": ["Symbol.asyncIterator", "async-iteration"], "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/AsyncIteratorPrototype/Symbol.asyncIterator/name.js", "esid": " sec-asynciteratorprototype-asynciterator", "description": " Descriptor for `name` property", "info": " |%AsyncIteratorPrototype% [ @@asyncIterator ] ( )\n...\nThe value of the name property of this function is \"[Symbol.asyncIterator]\".\n\nECMAScript Standard Built-in Objects\n...\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value is a\nString. Unless otherwise specified, this value is the name that is given to\nthe function in this specification.\n...\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "features": ["Symbol.asyncIterator", "async-iteration"], "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/AsyncIteratorPrototype/Symbol.asyncIterator/prop-desc.js", "esid": " sec-asynciteratorprototype", "description": " Property descriptor", "info": " |ECMAScript Standard Built-in Objects\n\nEvery other data property described in clauses 18 through 26 and in Annex\nB.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false,\n[[Configurable]]: true } unless otherwise specified.\n", "features": ["Symbol.asyncIterator", "async-iteration"], "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/AsyncIteratorPrototype/Symbol.asyncIterator/return-val.js", "esid": " sec-asynciteratorprototype-asynciterator", "description": " Return value of @@asyncIterator", "info": " |%AsyncIteratorPrototype% [ @@asyncIterator ] ( )\n1. Return the this value.\n", "features": ["Symbol.asyncIterator", "async-iteration"]}, {"path": "./test262-main/test/built-ins/Atomics/Symbol.toStringTag.js", "esid": " sec-atomics-@@tostringtag", "description": " >`Symbol.toStringTag` property descriptor on Atomics\n", "info": " |The initial value of the @@toStringTag property is the String value\n\"Atomics\".\n\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]:\nfalse, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Atomics", "Symbol", "Symbol.toStringTag"]}, {"path": "./test262-main/test/built-ins/Atomics/add/bad-range.js", "esid": " sec-atomics.add", "description": " >Test range checking of Atomics.add on arrays that allow atomic operations\n", "includes": ["testAtomics.js", "testTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/add/descriptor.js", "esid": " sec-atomics.add", "description": " Testing descriptor property of Atomics.add", "includes": ["propertyHelper.js"], "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/add/expected-return-value.js", "esid": " sec-atomics.add", "description": " >Atomics.add returns the value that existed at the\nindex prior to the operation.\n", "info": " |Atomics.add( typedArray, index, value )\n\n1. Return ? AtomicReadModifyWrite(typedArray, index, value, add).\n\nAtomicReadModifyWrite( typedArray, index, value, op )\n\n...\n9. Return GetModifySetValueInBuffer(buffer, indexedPosition,\nelementType, v, op).\n\n\nGetModifySetValueInBuffer( arrayBuffer,\nbyteIndex, type, value, op [ , isLittleEndian ] )\n\n...\n16. Return RawBytesToNumber(type, rawBytesRead, isLittleEndian).\n\n", "features": ["Atomics", "SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/add/good-views.js", "esid": " sec-atomics.add", "description": " Test Atomics.add on arrays that allow atomic operations.", "includes": ["testAtomics.js", "testTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/add/length.js", "esid": " sec-atomics.add", "description": " >Atomics.add.length is 3.\n", "info": " |Atomics.add ( ia, index, val )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/add/name.js", "esid": " sec-atomics.add", "description": " >Atomics.add.name is \"add\".\n", "includes": ["propertyHelper.js"], "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/add/non-shared-int-views-throws.js", "esid": " sec-atomics.add", "description": " >Atomics.add throws when operating on non-sharable integer TypedArrays\n", "includes": ["testTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/add/non-views.js", "esid": " sec-atomics.add", "description": " >Test Atomics.add on view values other than TypedArrays\n", "includes": ["testAtomics.js"], "features": ["ArrayBuffer", "Atomics", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/add/not-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >Atomics.add does not implement [[Construct]], is not new-able\n", "info": " |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n", "includes": ["isConstructor.js"], "features": ["Reflect.construct", "Atomics", "arrow-function", "TypedArray", "SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/Atomics/and/bad-range.js", "esid": " sec-atomics.and", "description": " >Test range checking of Atomics.and on arrays that allow atomic operations\n", "includes": ["testAtomics.js", "testTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/and/descriptor.js", "esid": " sec-atomics.and", "description": " Testing descriptor property of Atomics.and", "includes": ["propertyHelper.js"], "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/and/expected-return-value.js", "esid": " sec-atomics.and", "description": " >Atomics.and returns the value that existed at the\nindex prior to the operation.\n", "info": " |Atomics.and( typedArray, index, value )\n\n1. Return ? AtomicReadModifyWrite(typedArray, index, value, and).\n\nAtomicReadModifyWrite( typedArray, index, value, op )\n\n...\n9. Return GetModifySetValueInBuffer(buffer, indexedPosition,\nelementType, v, op).\n\n\nGetModifySetValueInBuffer( arrayBuffer,\nbyteIndex, type, value, op [ , isLittleEndian ] )\n\n...\n16. Return RawBytesToNumber(type, rawBytesRead, isLittleEndian).\n\n", "features": ["Atomics", "SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/and/good-views.js", "esid": " sec-atomics.and", "description": " Test Atomics.and on arrays that allow atomic operations", "includes": ["testAtomics.js", "testTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/and/length.js", "esid": " sec-atomics.and", "description": " >Atomics.and.length is 3.\n", "info": " |Atomics.and ( ia, index, val )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/and/name.js", "esid": " sec-atomics.and", "description": " >Atomics.and.name is \"and\".\n", "includes": ["propertyHelper.js"], "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/and/non-shared-int-views-throws.js", "esid": " sec-atomics.and", "description": " >Atomics.and throws when operating on non-sharable integer TypedArrays\n", "includes": ["testTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/and/non-views.js", "esid": " sec-atomics.and", "description": " >Test Atomics.and on view values other than TypedArrays\n", "includes": ["testAtomics.js"], "features": ["ArrayBuffer", "Atomics", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/and/not-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >Atomics.and does not implement [[Construct]], is not new-able\n", "info": " |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n", "includes": ["isConstructor.js"], "features": ["Reflect.construct", "Atomics", "arrow-function", "TypedArray", "SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/Atomics/compareExchange/bad-range.js", "esid": " sec-atomics.compareexchange", "description": " >Test range checking of Atomics.compareExchange on arrays that allow atomic operations\n", "includes": ["testAtomics.js", "testTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/compareExchange/descriptor.js", "esid": " sec-atomics.compareexchange", "description": " Testing descriptor property of Atomics.compareExchange", "includes": ["propertyHelper.js"], "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/compareExchange/expected-return-value.js", "esid": " sec-atomics.compareExchange", "description": " >Atomics.compareExchange returns the value that existed at the\nindex prior to the operation.\n", "info": " |Atomics.compareExchange( typedArray, index, expectedValue, replacementValue )\n\n...\n12. Let compareExchange denote a semantic function of two List of\nbyte values arguments that returns the second argument if the\nfirst argument is element-wise equal to expectedBytes.\n13. Return GetModifySetValueInBuffer(buffer, indexedPosition,\nelementType, replacement, compareExchange).\n\n\nGetModifySetValueInBuffer( arrayBuffer,\nbyteIndex, type, value, op [ , isLittleEndian ] )\n\n...\n16. Return RawBytesToNumber(type, rawBytesRead, isLittleEndian).\n\n", "features": ["Atomics", "SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/compareExchange/good-views.js", "esid": " sec-atomics.compareexchange", "description": " Test Atomics.compareExchange on arrays that allow atomic operations.", "includes": ["testAtomics.js", "testTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/compareExchange/length.js", "esid": " sec-atomics.compareexchange", "description": " >Atomics.compareExchange.length is 4.\n", "info": " |Atomics.compareExchange ( ia, index, expect, replace )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/compareExchange/name.js", "esid": " sec-atomics.compareexchange", "description": " >Atomics.compareExchange.name is \"compareExchange\".\n", "includes": ["propertyHelper.js"], "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/compareExchange/non-shared-int-views-throws.js", "esid": " sec-atomics.compareExchange", "description": " >Atomics.compareExchange throws when operating on non-sharable integer TypedArrays\n", "includes": ["testTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/compareExchange/non-views.js", "esid": " sec-atomics.compareexchange", "description": " >Test Atomics.compareExchange on view values other than TypedArrays\n", "includes": ["testAtomics.js"], "features": ["ArrayBuffer", "Atomics", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/compareExchange/not-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >Atomics.compareExchange does not implement [[Construct]], is not new-able\n", "info": " |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n", "includes": ["isConstructor.js"], "features": ["Reflect.construct", "Atomics", "arrow-function", "TypedArray", "SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/Atomics/exchange/bad-range.js", "esid": " sec-atomics.exchange", "description": " >Test range checking of Atomics.exchange on arrays that allow atomic operations\n", "includes": ["testAtomics.js", "testTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/exchange/descriptor.js", "esid": " sec-atomics.exchange", "description": " Testing descriptor property of Atomics.exchange", "includes": ["propertyHelper.js"], "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/exchange/expected-return-value.js", "esid": " sec-atomics.exchange", "description": " >Atomics.and returns the value that existed at the\nindex prior to the operation.\n", "info": " |Atomics.exchange( typedArray, index, value )\n\n1. Return ? AtomicReadModifyWrite(typedArray, index, value, second).\n\nAtomicReadModifyWrite( typedArray, index, value, op )\n\n...\n9. Return GetModifySetValueInBuffer(buffer, indexedPosition,\nelementType, v, op).\n\n\nGetModifySetValueInBuffer( arrayBuffer,\nbyteIndex, type, value, op [ , isLittleEndian ] )\n\n...\n16. Return RawBytesToNumber(type, rawBytesRead, isLittleEndian).\n\n", "features": ["Atomics", "SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/exchange/good-views.js", "esid": " sec-atomics.exchange", "description": " Test Atomics.exchange on arrays that allow atomic operations.", "includes": ["testAtomics.js", "testTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/exchange/length.js", "esid": " sec-atomics.exchange", "description": " >Atomics.exchange.length is 3.\n", "info": " |Atomics.exchange ( ia, index, val )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/exchange/name.js", "esid": " sec-atomics.exchange", "description": " >Atomics.exchange.name is \"exchange\".\n", "includes": ["propertyHelper.js"], "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/exchange/non-shared-int-views-throws.js", "esid": " sec-atomics.add", "description": " >Atomics.add throws when operating on non-sharable integer TypedArrays\n", "includes": ["testTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/exchange/non-views.js", "esid": " sec-atomics.exchange", "description": " >Test Atomics.exchange on view values other than TypedArrays\n", "includes": ["testAtomics.js"], "features": ["ArrayBuffer", "Atomics", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/exchange/nonshared-int-views.js", "esid": " sec-atomics.exchange", "description": " >Atomics.exchange throws when operating on non-sharable integer TypedArrays\n", "includes": ["testTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/exchange/not-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >Atomics.exchange does not implement [[Construct]], is not new-able\n", "info": " |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n", "includes": ["isConstructor.js"], "features": ["Reflect.construct", "Atomics", "arrow-function", "TypedArray", "SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/Atomics/isLockFree/corner-cases.js", "esid": " sec-atomics.islockfree", "description": " >Test isLockFree on various non-intuitive arguments\n", "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/isLockFree/descriptor.js", "esid": " sec-atomics.islockfree", "description": " Testing descriptor property of Atomics.add", "includes": ["propertyHelper.js"], "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/isLockFree/expected-return-value.js", "esid": " sec-atomics.islockfree", "description": " >Atomics.isLockFree( size )\nLet n be ? ToInteger(size).\nLet AR be the Agent Record of the surrounding agent.\nIf n equals 1, return AR.[[IsLockFree1]].\nIf n equals 2, return AR.[[IsLockFree2]].\nIf n equals 4, return true.\nIf n equals 8, return AR.[[IsLockFree8]].\nReturn false.\n", "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/isLockFree/length.js", "esid": " sec-atomics.islockfree", "description": " >Atomics.isLockFree.length is 1.\n", "info": " |Atomics.isLockFree ( x )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/isLockFree/name.js", "esid": " sec-atomics.islockfree", "description": " >Atomics.isLockFree.name is \"isLockFree\".\n", "includes": ["propertyHelper.js"], "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/isLockFree/not-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >Atomics.isLockFree does not implement [[Construct]], is not new-able\n", "info": " |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n", "includes": ["isConstructor.js"], "features": ["Reflect.construct", "Atomics", "arrow-function", "TypedArray", "SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/Atomics/load/bad-range.js", "esid": " sec-atomics.load", "description": " >Test range checking of Atomics.load on arrays that allow atomic operations\n", "includes": ["testAtomics.js", "testTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/load/descriptor.js", "esid": " sec-atomics.load", "description": " Testing descriptor property of Atomics.load", "includes": ["propertyHelper.js"], "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/load/expected-return-value.js", "esid": " sec-atomics.load", "description": " >Atomics.load returns the value that existed at the\nindex prior to the operation.\n", "info": " |Atomics.load( typedArray, index, value )\n\n1. Return ? AtomicLoad(typedArray, index).\n\nAtomicLoad( typedArray, index )\n\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray).\n2. Let i be ? ValidateAtomicAccess(typedArray, index).\n3. Let arrayTypeName be typedArray.[[TypedArrayName]].\n4. Let elementSize be the Number value of the Element Size value\nspecified in Table 56 for arrayTypeName.\n5. Let elementType be the String value of the Element Type value\nin Table 56 for arrayTypeName.\n6. Let offset be typedArray.[[ByteOffset]].\n7. Let indexedPosition be (i \u00d7 elementSize) + offset.\n8. Return GetValueFromBuffer(buffer, indexedPosition, elementType,\ntrue, \"SeqCst\").\n\n", "features": ["Atomics", "SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/load/good-views.js", "esid": " sec-atomics.load", "description": " Test Atomics.load on arrays that allow atomic operations.", "includes": ["testAtomics.js", "testTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/load/length.js", "esid": " sec-atomics.load", "description": " >Atomics.load.length is 2.\n", "info": " |Atomics.load ( ia, index )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/load/name.js", "esid": " sec-atomics.load", "description": " >Atomics.load.name is \"load\".\n", "includes": ["propertyHelper.js"], "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/load/non-shared-int-views-throws.js", "esid": " sec-atomics.load", "description": " >Atomics.load throws when operating on non-sharable integer TypedArrays\n", "includes": ["testTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/load/non-views.js", "esid": " sec-atomics.load", "description": " >Test Atomics.load on view values other than TypedArrays\n", "includes": ["testAtomics.js"], "features": ["ArrayBuffer", "Atomics", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/load/not-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >Atomics.load does not implement [[Construct]], is not new-able\n", "info": " |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n", "includes": ["isConstructor.js"], "features": ["Reflect.construct", "Atomics", "arrow-function", "TypedArray", "SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/Atomics/notify/count-symbol-throws.js", "esid": " sec-atomics.notify", "description": " >Return abrupt when symbol passed for 'count' argument to Atomics.notify\n", "info": " |Atomics.notify( typedArray, index, count )\n\n...\n3. If count is undefined, let c be +\u221e.\n4. Else,\na. Let intCount be ? ToInteger(count).\n...\n\n", "features": ["Atomics", "SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/notify/non-int32-typedarray-throws.js", "esid": " sec-atomics.notify", "description": " >Throws a TypeError if typedArray arg is not an Int32Array\n", "info": " |Atomics.notify( typedArray, index, count )\n\n1.Let buffer be ? ValidateSharedIntegerTypedArray(typedArray, true).\n...\n5.If onlyInt32 is true, then\nIf typeName is not \"Int32Array\", throw a TypeError exception.\n", "features": ["Atomics", "Float32Array", "Float64Array", "Int8Array", "TypedArray", "Uint16Array", "Uint8Array", "Uint8ClampedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/notify/non-shared-bufferdata-non-shared-int-views-throws.js", "esid": " sec-atomics.notify", "description": " >Atomics.notify throws on non-shared integer TypedArrays\n", "features": ["ArrayBuffer", "Atomics", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/notify/non-shared-int-views.js", "esid": " sec-atomics.notify", "description": " >Test Atomics.notify on non-shared integer TypedArrays\n", "features": ["Atomics", "SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/notify/non-views.js", "esid": " sec-atomics.notify", "description": " >Test Atomics.notify on view values other than TypedArrays\n", "includes": ["testAtomics.js"], "features": ["ArrayBuffer", "Atomics", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/notify/not-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >Atomics.notify does not implement [[Construct]], is not new-able\n", "info": " |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n", "includes": ["isConstructor.js"], "features": ["Reflect.construct", "Atomics", "arrow-function", "TypedArray", "SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/Atomics/notify/not-a-typedarray-throws.js", "esid": " sec-atomics.notify", "description": " >Throws a TypeError if the typedArray arg is not a TypedArray object\n", "info": " |Atomics.notify( typedArray, index, count )\n\n1.Let buffer be ? ValidateSharedIntegerTypedArray(typedArray, true).\n...\n3.If typedArray does not have a [[TypedArrayName]] internal slot, throw a TypeError exception.\n\n", "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/notify/not-an-object-throws.js", "esid": " sec-atomics.notify", "description": " >Throws a TypeError if typedArray arg is not an Object\n", "info": " |Atomics.notify( typedArray, index, count )\n\n1.Let buffer be ? ValidateSharedIntegerTypedArray(typedArray, true).\n...\n2. if Type(typedArray) is not Object, throw a TypeError exception\n", "features": ["Atomics", "Symbol"]}, {"path": "./test262-main/test/built-ins/Atomics/notify/validate-arraytype-before-count-coercion.js", "esid": " sec-atomics.notify", "description": " >TypedArray type is validated before `count` argument is coerced.\n", "info": " |24.4.12 Atomics.notify ( typedArray, index, count )\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray, true).\n...\n\n24.4.1.1 ValidateSharedIntegerTypedArray ( typedArray [ , onlyInt32 ] )\n...\n4. Let typeName be typedArray.[[TypedArrayName]].\n5. If onlyInt32 is true, then\na. If typeName is not \"Int32Array\", throw a TypeError exception.\n6. Else,\na. If typeName is not \"Int8Array\", \"Uint8Array\", \"Int16Array\", \"Uint16Array\", \"Int32Array\",\nor \"Uint32Array\", throw a TypeError exception.\n...\n", "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/notify/validate-arraytype-before-index-coercion.js", "esid": " sec-atomics.notify", "description": " >TypedArray type is validated before `index` argument is coerced.\n", "info": " |24.4.12 Atomics.notify ( typedArray, index, count )\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray, true).\n...\n\n24.4.1.1 ValidateSharedIntegerTypedArray ( typedArray [ , onlyInt32 ] )\n...\n4. Let typeName be typedArray.[[TypedArrayName]].\n5. If onlyInt32 is true, then\na. If typeName is not \"Int32Array\", throw a TypeError exception.\n6. Else,\na. If typeName is not \"Int8Array\", \"Uint8Array\", \"Int16Array\", \"Uint16Array\", \"Int32Array\",\nor \"Uint32Array\", throw a TypeError exception.\n...\n", "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/or/bad-range.js", "esid": " sec-atomics.or", "description": " >Test range checking of Atomics.or on arrays that allow atomic operations\n", "includes": ["testAtomics.js", "testTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/or/descriptor.js", "esid": " sec-atomics.or", "description": " Testing descriptor property of Atomics.or", "includes": ["propertyHelper.js"], "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/or/expected-return-value.js", "esid": " sec-atomics.or", "description": " >Atomics.and returns the value that existed at the\nindex prior to the operation.\n", "info": " |Atomics.or( typedArray, index, value )\n\n1. Return ? AtomicReadModifyWrite(typedArray, index, value, or).\n\nAtomicReadModifyWrite( typedArray, index, value, op )\n\n...\n9. Return GetModifySetValueInBuffer(buffer, indexedPosition,\nelementType, v, op).\n\n\nGetModifySetValueInBuffer( arrayBuffer,\nbyteIndex, type, value, op [ , isLittleEndian ] )\n\n...\n16. Return RawBytesToNumber(type, rawBytesRead, isLittleEndian).\n\n", "features": ["Atomics", "SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/or/good-views.js", "esid": " sec-atomics.or", "description": " Test Atomics.or on arrays that allow atomic operations", "includes": ["testAtomics.js", "testTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/or/length.js", "esid": " sec-atomics.or", "description": " >Atomics.or.length is 3.\n", "info": " |Atomics.or ( ia, index, val )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/or/name.js", "esid": " sec-atomics.or", "description": " >Atomics.or.name is \"or\".\n", "includes": ["propertyHelper.js"], "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/or/non-shared-int-views-throws.js", "esid": " sec-atomics.and", "description": " >Atomics.and throws when operating on non-sharable integer TypedArrays\n", "includes": ["testTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/or/non-views.js", "esid": " sec-atomics.or", "description": " >Test Atomics.or on view values other than TypedArrays\n", "includes": ["testAtomics.js"], "features": ["ArrayBuffer", "Atomics", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/or/not-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >Atomics.or does not implement [[Construct]], is not new-able\n", "info": " |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n", "includes": ["isConstructor.js"], "features": ["Reflect.construct", "Atomics", "arrow-function", "TypedArray", "SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/Atomics/prop-desc.js", "esid": " sec-atomics-object", "description": " >Property descriptor of Atomics\n", "info": " |The Atomics Object\n\n...\nThe Atomics object does not have a [[Construct]] internal method;\nit is not possible to use the Atomics object as a constructor with the new operator.\n\nThe Atomics object does not have a [[Call]] internal method;\nit is not possible to invoke the Atomics object as a function.\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2\nhas the attributes { [[Writable]]: true, [[Enumerable]]: false,\n[[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js"], "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/proto.js", "esid": " sec-atomics-object", "description": " >The prototype of Atomics is Object.prototype\n", "info": " |The Atomics Object\n\nThe value of the [[Prototype]] internal slot of the Atomics object is the\nintrinsic object %ObjectPrototype%.\n", "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/store/bad-range.js", "esid": " sec-atomics.store", "description": " >Test range checking of Atomics.store on arrays that allow atomic operations\n", "includes": ["testAtomics.js", "testTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/store/descriptor.js", "esid": " sec-atomics.store", "description": " Testing descriptor property of Atomics.store", "includes": ["propertyHelper.js"], "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/store/expected-return-value.js", "esid": " sec-atomics.store", "description": " >Atomics.store returns the newly stored value\n", "info": " |Atomics.store( typedArray, index, value )\n\n...\n3. Let v be ? ToInteger(value).\n...\n9. Perform SetValueInBuffer(buffer, indexedPosition,\nelementType, v, true, \"SeqCst\").\n10. Return v.\n\n", "features": ["Atomics", "SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/store/good-views.js", "esid": " sec-atomics.store", "description": " Test Atomics.store on arrays that allow atomic operations.", "includes": ["testAtomics.js", "testTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/store/length.js", "esid": " sec-atomics.store", "description": " >Atomics.store.length is 3.\n", "info": " |Atomics.store ( ia, index, val )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/store/name.js", "esid": " sec-atomics.store", "description": " >Atomics.store.name is \"store\".\n", "includes": ["propertyHelper.js"], "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/store/non-shared-int-views-throws.js", "esid": " sec-atomics.store", "description": " >Atomics.store throws when operating on non-sharable integer TypedArrays\n", "includes": ["testTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/store/non-views.js", "esid": " sec-atomics.store", "description": " >Test Atomics.store on view values other than TypedArrays\n", "includes": ["testAtomics.js"], "features": ["ArrayBuffer", "Atomics", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/store/not-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >Atomics.store does not implement [[Construct]], is not new-able\n", "info": " |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n", "includes": ["isConstructor.js"], "features": ["Reflect.construct", "Atomics", "arrow-function", "TypedArray", "SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/Atomics/sub/bad-range.js", "esid": " sec-atomics.sub", "description": " >Test range checking of Atomics.sub on arrays that allow atomic operations\n", "includes": ["testAtomics.js", "testTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/sub/descriptor.js", "esid": " sec-atomics.sub", "description": " Testing descriptor property of Atomics.sub", "includes": ["propertyHelper.js"], "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/sub/expected-return-value.js", "esid": " sec-atomics.sub", "description": " >Atomics.and returns the value that existed at the\nindex prior to the operation.\n", "info": " |Atomics.sub( typedArray, index, value )\n\n1. Return ? AtomicReadModifyWrite(typedArray, index, value, subtract).\n\nAtomicReadModifyWrite( typedArray, index, value, op )\n\n...\n9. Return GetModifySetValueInBuffer(buffer, indexedPosition,\nelementType, v, op).\n\n\nGetModifySetValueInBuffer( arrayBuffer,\nbyteIndex, type, value, op [ , isLittleEndian ] )\n\n...\n16. Return RawBytesToNumber(type, rawBytesRead, isLittleEndian).\n\n", "features": ["Atomics", "SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/sub/good-views.js", "esid": " sec-atomics.sub", "description": " Test Atomics.sub on arrays that allow atomic operations", "includes": ["testAtomics.js", "testTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/sub/length.js", "esid": " sec-atomics.sub", "description": " >Atomics.sub.length is 3.\n", "info": " |Atomics.sub ( ia, index, val )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/sub/name.js", "esid": " sec-atomics.sub", "description": " >Atomics.sub.name is \"sub\".\n", "includes": ["propertyHelper.js"], "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/sub/non-shared-int-views-throws.js", "esid": " sec-atomics.sub", "description": " >Atomics.sub throws when operating on non-sharable integer TypedArrays\n", "includes": ["testTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/sub/non-views.js", "esid": " sec-atomics.sub", "description": " >Test Atomics.sub on view values other than TypedArrays\n", "includes": ["testAtomics.js"], "features": ["ArrayBuffer", "Atomics", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/sub/not-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >Atomics.sub does not implement [[Construct]], is not new-able\n", "info": " |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n", "includes": ["isConstructor.js"], "features": ["Reflect.construct", "Atomics", "arrow-function", "TypedArray", "SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/Atomics/wait/bad-range.js", "esid": " sec-atomics.wait", "description": " >Test range checking of Atomics.wait on arrays that allow atomic operations\n", "info": " |Atomics.wait( typedArray, index, value, timeout )\n\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray, true).\n...\n\n", "includes": ["testAtomics.js"], "features": ["ArrayBuffer", "Atomics", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/wait/descriptor.js", "esid": " sec-atomics.wait", "description": " Testing descriptor property of Atomics.wait", "includes": ["propertyHelper.js"], "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/wait/false-for-timeout.js", "esid": " sec-atomics.wait", "description": " >False timeout arg should result in an +0 timeout\n", "info": " |Atomics.wait( typedArray, index, value, timeout )\n\n4. Let q be ? ToNumber(timeout).\n\nBoolean -> If argument is true, return 1. If argument is false, return +0.\n\n", "features": ["Atomics", "SharedArrayBuffer", "Symbol", "Symbol.toPrimitive", "TypedArray"], "flags": ["CanBlockIsTrue"]}, {"path": "./test262-main/test/built-ins/Atomics/wait/length.js", "esid": " sec-atomics.wait", "description": " >Atomics.wait.length is 4.\n", "info": " |Atomics.wait ( ia, index, expect, timeout )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/wait/name.js", "esid": " sec-atomics.wait", "description": " >Atomics.wait.name is \"wait\".\n", "includes": ["propertyHelper.js"], "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/wait/negative-index-throws.js", "esid": " sec-atomics.wait", "description": " >Throws a RangeError is index < 0\n", "info": " |Atomics.wait( typedArray, index, value, timeout )\n\n2.Let i be ? ValidateAtomicAccess(typedArray, index).\n...\n2.Let accessIndex be ? ToIndex(requestIndex).\n...\n2.b If integerIndex < 0, throw a RangeError exception\n\n", "features": ["Atomics", "SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/wait/negative-timeout.js", "esid": " sec-atomics.wait", "description": " >Test that Atomics.wait times out with a negative timeout\n", "features": ["Atomics", "SharedArrayBuffer", "TypedArray"], "flags": ["CanBlockIsTrue"]}, {"path": "./test262-main/test/built-ins/Atomics/wait/non-int32-typedarray-throws.js", "esid": " sec-atomics.wait", "description": " >Throws a TypeError if typedArray arg is not an Int32Array\n", "info": " |Atomics.wait( typedArray, index, value, timeout )\n\n1.Let buffer be ? ValidateSharedIntegerTypedArray(typedArray, true).\n...\n5.If onlyInt32 is true, then\nIf typeName is not \"Int32Array\", throw a TypeError exception.\n", "features": ["Atomics", "Float32Array", "Float64Array", "Int8Array", "TypedArray", "Uint16Array", "Uint8Array", "Uint8ClampedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/wait/non-shared-bufferdata-throws.js", "esid": " sec-atomics.wait", "description": " >Throws a TypeError if typedArray.buffer is not a SharedArrayBuffer\n", "info": " |Atomics.wait( typedArray, index, value, timeout )\n\n1.Let buffer be ? ValidateSharedIntegerTypedArray(typedArray, true).\n...\n9.If IsSharedArrayBuffer(buffer) is false, throw a TypeError exception.\n...\n4.If bufferData is a Data Block, return false.\n", "features": ["ArrayBuffer", "Atomics", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/wait/not-a-typedarray-throws.js", "esid": " sec-atomics.wait", "description": " >Throws a TypeError if the typedArray arg is not a TypedArray object\n", "info": " |Atomics.wait( typedArray, index, value, timeout )\n\n1.Let buffer be ? ValidateSharedIntegerTypedArray(typedArray, true).\n...\n3.If typedArray does not have a [[TypedArrayName]] internal slot, throw a TypeError exception.\n\n", "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/wait/not-an-object-throws.js", "esid": " sec-atomics.wait", "description": " >Throws a TypeError if typedArray arg is not an Object\n", "info": " |Atomics.wait( typedArray, index, value, timeout )\n\n1.Let buffer be ? ValidateSharedIntegerTypedArray(typedArray, true).\n...\n2. if Type(typedArray) is not Object, throw a TypeError exception\n", "features": ["Atomics", "Symbol"]}, {"path": "./test262-main/test/built-ins/Atomics/wait/null-for-timeout.js", "esid": " sec-atomics.wait", "description": " >Throws a TypeError if index arg can not be converted to an Integer\n", "info": " |Atomics.wait( typedArray, index, value, timeout )\n\n4. Let q be ? ToNumber(timeout).\n\nNull -> Return +0.\n\n", "features": ["Atomics", "SharedArrayBuffer", "Symbol", "Symbol.toPrimitive", "TypedArray"], "flags": ["CanBlockIsTrue"]}, {"path": "./test262-main/test/built-ins/Atomics/wait/object-for-timeout.js", "esid": " sec-atomics.wait", "description": " >Throws a TypeError if index arg can not be converted to an Integer\n", "info": " |Atomics.wait( typedArray, index, value, timeout )\n\n4. Let q be ? ToNumber(timeout).\n\nObject -> Apply the following steps:\n\nLet primValue be ? ToPrimitive(argument, hint Number).\nReturn ? ToNumber(primValue).\n\n", "features": ["Atomics", "SharedArrayBuffer", "Symbol", "Symbol.toPrimitive", "TypedArray"], "flags": ["CanBlockIsTrue"]}, {"path": "./test262-main/test/built-ins/Atomics/wait/out-of-range-index-throws.js", "esid": " sec-atomics.wait", "description": " >Throws a RangeError if value of index arg is out of range\n", "info": " |Atomics.wait( typedArray, index, value, timeout )\n\n2.Let i be ? ValidateAtomicAccess(typedArray, index).\n...\n2.Let accessIndex be ? ToIndex(requestIndex).\n...\n5. If accessIndex \u2265 length, throw a RangeError exception.\n", "features": ["Atomics", "SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/wait/poisoned-object-for-timeout-throws.js", "esid": " sec-atomics.wait", "description": " >Throws a TypeError if index arg can not be converted to an Integer\n", "info": " |Atomics.wait( typedArray, index, value, timeout )\n\n4. Let q be ? ToNumber(timeout).\n\nObject -> Apply the following steps:\n\nLet primValue be ? ToPrimitive(argument, hint Number).\nReturn ? ToNumber(primValue).\n\n", "features": ["Atomics", "SharedArrayBuffer", "Symbol", "Symbol.toPrimitive", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/wait/symbol-for-index-throws.js", "esid": " sec-atomics.wait", "description": " >Throws a TypeError if index arg can not be converted to an Integer\n", "info": " |Atomics.wait( typedArray, index, value, timeout )\n\n2. Let i be ? ValidateAtomicAccess(typedArray, index).\n\nValidateAtomicAccess( typedArray, requestIndex )\n\n2. Let accessIndex be ? ToIndex(requestIndex).\n\nToIndex ( value )\n\n2. Else,\na. Let integerIndex be ? ToInteger(value).\n\nToInteger(value)\n\n1. Let number be ? ToNumber(argument).\n\nSymbol --> Throw a TypeError exception.\n\n", "features": ["Atomics", "SharedArrayBuffer", "Symbol", "Symbol.toPrimitive", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/wait/symbol-for-timeout-throws.js", "esid": " sec-atomics.wait", "description": " >Throws a TypeError if index arg can not be converted to an Integer\n", "info": " |Atomics.wait( typedArray, index, value, timeout )\n\n4. Let q be ? ToNumber(timeout).\n\nSymbol --> Throw a TypeError exception.\n\n", "features": ["Atomics", "SharedArrayBuffer", "Symbol", "Symbol.toPrimitive", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/wait/symbol-for-value-throws.js", "esid": " sec-atomics.wait", "description": " >Throws a TypeError if value arg is a Symbol\n", "info": " |Atomics.wait( typedArray, index, value, timeout )\n\n3. Let v be ? ToInt32(value).\n\nToInt32(value)\n\n1.Let number be ? ToNumber(argument).\n\nSymbol --> Throw a TypeError exception.\n\n", "features": ["Atomics", "SharedArrayBuffer", "Symbol", "Symbol.toPrimitive", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/wait/true-for-timeout.js", "esid": " sec-atomics.wait", "description": " >Throws a TypeError if index arg can not be converted to an Integer\n", "info": " |Atomics.wait( typedArray, index, value, timeout )\n\n4. Let q be ? ToNumber(timeout).\n\nBoolean -> If argument is true, return 1. If argument is false, return +0.\n\n", "features": ["Atomics", "SharedArrayBuffer", "Symbol", "Symbol.toPrimitive", "TypedArray"], "flags": ["CanBlockIsTrue"]}, {"path": "./test262-main/test/built-ins/Atomics/wait/validate-arraytype-before-index-coercion.js", "esid": " sec-atomics.wait", "description": " >TypedArray type is validated before `index` argument is coerced.\n", "info": " |24.4.11 Atomics.wait ( typedArray, index, value, timeout )\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray, true).\n...\n\n24.4.1.1 ValidateSharedIntegerTypedArray ( typedArray [ , onlyInt32 ] )\n...\n4. Let typeName be typedArray.[[TypedArrayName]].\n5. If onlyInt32 is true, then\na. If typeName is not \"Int32Array\", throw a TypeError exception.\n6. Else,\na. If typeName is not \"Int8Array\", \"Uint8Array\", \"Int16Array\", \"Uint16Array\", \"Int32Array\",\nor \"Uint32Array\", throw a TypeError exception.\n...\n", "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/wait/validate-arraytype-before-timeout-coercion.js", "esid": " sec-atomics.notify", "description": " >TypedArray type is validated before `timeout` argument is coerced.\n", "info": " |24.4.11 Atomics.wait ( typedArray, index, value, timeout )\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray, true).\n...\n\n24.4.1.1 ValidateSharedIntegerTypedArray ( typedArray [ , onlyInt32 ] )\n...\n4. Let typeName be typedArray.[[TypedArrayName]].\n5. If onlyInt32 is true, then\na. If typeName is not \"Int32Array\", throw a TypeError exception.\n6. Else,\na. If typeName is not \"Int8Array\", \"Uint8Array\", \"Int16Array\", \"Uint16Array\", \"Int32Array\",\nor \"Uint32Array\", throw a TypeError exception.\n...\n", "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/wait/validate-arraytype-before-value-coercion.js", "esid": " sec-atomics.notify", "description": " >TypedArray type is validated before `value` argument is coerced.\n", "info": " |24.4.11 Atomics.wait ( typedArray, index, value, timeout )\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray, true).\n...\n\n24.4.1.1 ValidateSharedIntegerTypedArray ( typedArray [ , onlyInt32 ] )\n...\n4. Let typeName be typedArray.[[TypedArrayName]].\n5. If onlyInt32 is true, then\na. If typeName is not \"Int32Array\", throw a TypeError exception.\n6. Else,\na. If typeName is not \"Int8Array\", \"Uint8Array\", \"Int16Array\", \"Uint16Array\", \"Int32Array\",\nor \"Uint32Array\", throw a TypeError exception.\n...\n", "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/xor/bad-range.js", "esid": " sec-atomics.xor", "description": " >Test range checking of Atomics.xor on arrays that allow atomic operations\n", "includes": ["testAtomics.js", "testTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/xor/descriptor.js", "esid": " sec-atomics.xor", "description": " Testing descriptor property of Atomics.xor", "includes": ["propertyHelper.js"], "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/xor/expected-return-value.js", "esid": " sec-atomics.xor", "description": " >Atomics.xor returns the value that existed at the\nindex prior to the operation.\n", "info": " |Atomics.xor( typedArray, index, value )\n\n1. Return ? AtomicReadModifyWrite(typedArray, index, value, xor).\n\nAtomicReadModifyWrite( typedArray, index, value, op )\n\n...\n9. Return GetModifySetValueInBuffer(buffer, indexedPosition,\nelementType, v, op).\n\n\nGetModifySetValueInBuffer( arrayBuffer,\nbyteIndex, type, value, op [ , isLittleEndian ] )\n\n...\n16. Return RawBytesToNumber(type, rawBytesRead, isLittleEndian).\n\n", "features": ["Atomics", "SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/xor/good-views.js", "esid": " sec-atomics.xor", "description": " Test Atomics.xor on arrays that allow atomic operations", "includes": ["testAtomics.js", "testTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/xor/length.js", "esid": " sec-atomics.xor", "description": " >Atomics.xor.length is 3.\n", "info": " |Atomics.xor ( ia, index, val )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/xor/name.js", "esid": " sec-atomics.xor", "description": " >Atomics.xor.name is \"xor\".\n", "includes": ["propertyHelper.js"], "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/xor/non-shared-int-views-throws.js", "esid": " sec-atomics.and", "description": " >Atomics.and throws when operating on non-sharable integer TypedArrays\n", "includes": ["testTypedArray.js"], "features": ["ArrayBuffer", "Atomics", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/xor/non-views.js", "esid": " sec-atomics.xor", "description": " >Test Atomics.xor on view values other than TypedArrays\n", "includes": ["testAtomics.js"], "features": ["ArrayBuffer", "Atomics", "DataView", "SharedArrayBuffer", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/xor/not-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >Atomics.xor does not implement [[Construct]], is not new-able\n", "info": " |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n", "includes": ["isConstructor.js"], "features": ["Reflect.construct", "Atomics", "arrow-function", "TypedArray", "SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/DataView/buffer-does-not-have-arraybuffer-data-throws-sab.js", "esid": " sec-dataview-buffer-byteoffset-bytelength", "description": " >Throws a TypeError if buffer does not have [[ArrayBufferData]]\n", "info": " |24.2.2.1 DataView (buffer, byteOffset, byteLength )\n\n...\n2. If Type(buffer) is not Object, throw a TypeError exception.\n3. If buffer does not have an [[ArrayBufferData]] internal slot, throw a\nTypeError exception.\n...\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/DataView/buffer-reference-sab.js", "esid": " sec-dataview-buffer-byteoffset-bytelength", "description": " >Reuse buffer argument instead of making a new clone\n", "info": " |24.2.2.1 DataView (buffer, byteOffset, byteLength )\n\n...\n14. Set O's [[ViewedArrayBuffer]] internal slot to buffer.\n...\n17. Return O.\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/DataView/byteoffset-is-negative-throws-sab.js", "esid": " sec-dataview-buffer-byteoffset-bytelength", "description": " >Throws a RangeError if ToInteger(byteOffset) < 0\n", "info": " |24.2.2.1 DataView (buffer, byteOffset, byteLength )\n\n...\n4. Let numberOffset be ? ToNumber(byteOffset).\n5. Let offset be ToInteger(numberOffset).\n6. If numberOffset \u2260 offset or offset < 0, throw a RangeError exception.\n...\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/DataView/byteoffset-is-negative-throws.js", "esid": " sec-dataview-buffer-byteoffset-bytelength", "description": " >Throws a RangeError if ToInteger(byteOffset) < 0\n", "info": " |24.2.2.1 DataView (buffer, byteOffset, byteLength )\n\n...\n4. Let numberOffset be ? ToNumber(byteOffset).\n5. Let offset be ToInteger(numberOffset).\n6. If numberOffset \u2260 offset or offset < 0, throw a RangeError exception.\n...\n"}, {"path": "./test262-main/test/built-ins/DataView/custom-proto-access-throws-sab.js", "esid": " sec-dataview-buffer-byteoffset-bytelength", "description": " >Return abrupt from newTarget's custom constructor prototype\n", "info": " |24.2.2.1 DataView (buffer, byteOffset, byteLength )\n\n...\n12. Let O be ? OrdinaryCreateFromConstructor(NewTarget, \"%DataViewPrototype%\",\n\u00ab [[DataView]], [[ViewedArrayBuffer]], [[ByteLength]], [[ByteOffset]] \u00bb).\n...\n17. Return O.\n\n9.1.13 OrdinaryCreateFromConstructor ( constructor, intrinsicDefaultProto [ ,\ninternalSlotsList ] )\n\n...\n2. Let proto be ? GetPrototypeFromConstructor(constructor,\nintrinsicDefaultProto).\n3. Return ObjectCreate(proto, internalSlotsList).\n\n9.1.15 GetPrototypeFromConstructor ( constructor, intrinsicDefaultProto )\n\n...\n3. Let proto be ? Get(constructor, \"prototype\").\n...\n", "features": ["Reflect.construct", "SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/DataView/custom-proto-if-not-object-fallbacks-to-default-prototype-sab.js", "esid": " sec-dataview-buffer-byteoffset-bytelength", "description": " >Use DataView.prototype if newTarget's prototype is not an Object\n", "info": " |24.2.2.1 DataView (buffer, byteOffset, byteLength )\n\n...\n12. Let O be ? OrdinaryCreateFromConstructor(NewTarget, \"%DataViewPrototype%\",\n\u00ab [[DataView]], [[ViewedArrayBuffer]], [[ByteLength]], [[ByteOffset]] \u00bb).\n...\n17. Return O.\n\n9.1.13 OrdinaryCreateFromConstructor ( constructor, intrinsicDefaultProto [ ,\ninternalSlotsList ] )\n\n...\n2. Let proto be ? GetPrototypeFromConstructor(constructor,\nintrinsicDefaultProto).\n3. Return ObjectCreate(proto, internalSlotsList).\n\n9.1.15 GetPrototypeFromConstructor ( constructor, intrinsicDefaultProto )\n\n...\n3. Let proto be ? Get(constructor, \"prototype\").\n4. If Type(proto) is not Object, then\na. Let realm be ? GetFunctionRealm(constructor).\nb. Let proto be realm's intrinsic object named intrinsicDefaultProto.\n5. Return proto.\n...\n", "features": ["Reflect.construct", "SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/DataView/custom-proto-if-object-is-used-sab.js", "esid": " sec-dataview-buffer-byteoffset-bytelength", "description": " >Use newTarget's custom constructor prototype if Object\n", "info": " |24.2.2.1 DataView (buffer, byteOffset, byteLength )\n\n...\n12. Let O be ? OrdinaryCreateFromConstructor(NewTarget, \"%DataViewPrototype%\",\n\u00ab [[DataView]], [[ViewedArrayBuffer]], [[ByteLength]], [[ByteOffset]] \u00bb).\n...\n17. Return O.\n\n9.1.13 OrdinaryCreateFromConstructor ( constructor, intrinsicDefaultProto [ ,\ninternalSlotsList ] )\n\n...\n2. Let proto be ? GetPrototypeFromConstructor(constructor,\nintrinsicDefaultProto).\n3. Return ObjectCreate(proto, internalSlotsList).\n\n9.1.15 GetPrototypeFromConstructor ( constructor, intrinsicDefaultProto )\n\n...\n3. Let proto be ? Get(constructor, \"prototype\").\n4. If Type(proto) is not Object, then\na. Let realm be ? GetFunctionRealm(constructor).\nb. Let proto be realm's intrinsic object named intrinsicDefaultProto.\n5. Return proto.\n...\n", "features": ["Reflect.construct", "SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/DataView/defined-bytelength-and-byteoffset-sab.js", "esid": " sec-dataview-buffer-byteoffset-bytelength", "description": " >Return new instance from defined length and offset\n", "info": " |24.2.2.1 DataView (buffer, byteOffset, byteLength )\n\n...\n17. Return O.\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/DataView/defined-byteoffset-sab.js", "esid": " sec-dataview-buffer-byteoffset-bytelength", "description": " >Return new instance from defined offset\n", "info": " |24.2.2.1 DataView (buffer, byteOffset, byteLength )\n\n...\n17. Return O.\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/DataView/defined-byteoffset-undefined-bytelength-sab.js", "esid": " sec-dataview-buffer-byteoffset-bytelength", "description": " >Return new instance from defined byteoffset and undefined bytelength\n", "info": " |24.2.2.1 DataView (buffer, byteOffset, byteLength )\n\n...\n8. If byteLength is either not present or undefined, then\na. Let viewByteLength be bufferByteLength - offset.\n...\n17. Return O.\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/DataView/excessive-bytelength-throws-sab.js", "esid": " sec-dataview-buffer-byteoffset-bytelength", "description": " >Throws RangeError if offset + viewByteLength > bufferByteLength\n", "info": " |24.2.2.1 DataView (buffer, byteOffset, byteLength )\n\n...\n10. If byteLength is undefined, then\n...\n11. Else,\na. Let viewByteLength be ? ToLength(byteLength).\nb. If offset+viewByteLength > bufferByteLength, throw a RangeError\nexception.\n...\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/DataView/excessive-bytelength-throws.js", "esid": " sec-dataview-buffer-byteoffset-bytelength", "description": " >Throws RangeError if offset + viewByteLength > bufferByteLength\n", "info": " |24.2.2.1 DataView (buffer, byteOffset, byteLength )\n\n...\n10. If byteLength is undefined, then\n...\n11. Else,\na. Let viewByteLength be ? ToLength(byteLength).\nb. If offset+viewByteLength > bufferByteLength, throw a RangeError\nexception.\n...\n"}, {"path": "./test262-main/test/built-ins/DataView/excessive-byteoffset-throws-sab.js", "esid": " sec-dataview-buffer-byteoffset-bytelength", "description": " >Throws a RangeError if offset > bufferByteLength\n", "info": " |24.2.2.1 DataView (buffer, byteOffset, byteLength )\n\n...\n8. Let bufferByteLength be the value of buffer's [[ArrayBufferByteLength]]\ninternal slot.\n9. If offset > bufferByteLength, throw a RangeError exception.\n...\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/DataView/excessive-byteoffset-throws.js", "esid": " sec-dataview-buffer-byteoffset-bytelength", "description": " >Throws a RangeError if offset > bufferByteLength\n", "info": " |24.2.2.1 DataView (buffer, byteOffset, byteLength )\n\n...\n8. Let bufferByteLength be the value of buffer's [[ArrayBufferByteLength]]\ninternal slot.\n9. If offset > bufferByteLength, throw a RangeError exception.\n...\n"}, {"path": "./test262-main/test/built-ins/DataView/instance-extensibility-sab.js", "esid": " sec-dataview-buffer-byteoffset-bytelength", "description": " >The new instance is extensible\n", "info": " |24.2.2.1 DataView (buffer, byteOffset, byteLength )\n\n...\n12. Let O be ? OrdinaryCreateFromConstructor(NewTarget, \"%DataViewPrototype%\",\n\u00ab [[DataView]], [[ViewedArrayBuffer]], [[ByteLength]], [[ByteOffset]] \u00bb).\n...\n17. Return O.\n\n9.1.13 OrdinaryCreateFromConstructor ( constructor, intrinsicDefaultProto [ ,\ninternalSlotsList ] )\n\n...\n3. Return ObjectCreate(proto, internalSlotsList).\n\n9.1.12 ObjectCreate (proto [ , internalSlotsList ])\n\n...\n5. Set the [[Extensible]] internal slot of obj to true.\n...\n", "features": ["SharedArrayBuffer"], "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/DataView/negative-bytelength-throws-sab.js", "esid": " sec-dataview-buffer-byteoffset-bytelength", "description": " >Throws a RangeError if ToInteger(byteLength) < 0\n", "info": " |24.2.2.1 DataView (buffer, byteOffset, byteLength )\n\n...\n8. If byteLength is either not present or undefined, then\na. Let viewByteLength be bufferByteLength - offset.\n9. Else,\na. Let viewByteLength be ? ToIndex(byteLength).\n...\n\nToIndex ( value )\n\n1. If value is undefined, then\na. Let index be 0.\n2. Else,\na. Let integerIndex be ? ToInteger(value).\nb. If integerIndex < 0, throw a RangeError exception.\n...\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/DataView/negative-bytelength-throws.js", "esid": " sec-dataview-buffer-byteoffset-bytelength", "description": " >Throws a RangeError if ToInteger(byteLength) < 0\n", "info": " |24.2.2.1 DataView (buffer, byteOffset, byteLength )\n\n...\n8. If byteLength is either not present or undefined, then\na. Let viewByteLength be bufferByteLength - offset.\n9. Else,\na. Let viewByteLength be ? ToIndex(byteLength).\n...\n\nToIndex ( value )\n\n1. If value is undefined, then\na. Let index be 0.\n2. Else,\na. Let integerIndex be ? ToInteger(value).\nb. If integerIndex < 0, throw a RangeError exception.\n...\n"}, {"path": "./test262-main/test/built-ins/DataView/negative-byteoffset-throws-sab.js", "esid": " sec-dataview-buffer-byteoffset-bytelength", "description": " >Throws a RangeError if ToInteger(byteOffset) < 0\n", "info": " |24.2.2.1 DataView (buffer, byteOffset, byteLength )\n\n...\n4. Let offset be ? ToIndex(byteOffset).\n...\n\nToIndex ( value )\n\n1. If value is undefined, then\na. Let index be 0.\n2. Else,\na. Let integerIndex be ? ToInteger(value).\nb. If integerIndex < 0, throw a RangeError exception.\n...\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/DataView/negative-byteoffset-throws.js", "esid": " sec-dataview-buffer-byteoffset-bytelength", "description": " >Throws a RangeError if ToInteger(byteOffset) < 0\n", "info": " |24.2.2.1 DataView (buffer, byteOffset, byteLength )\n\n...\n4. Let offset be ? ToIndex(byteOffset).\n...\n\nToIndex ( value )\n\n1. If value is undefined, then\na. Let index be 0.\n2. Else,\na. Let integerIndex be ? ToInteger(value).\nb. If integerIndex < 0, throw a RangeError exception.\n...\n"}, {"path": "./test262-main/test/built-ins/DataView/newtarget-undefined-throws-sab.js", "esid": " sec-dataview-buffer-byteoffset-bytelength", "description": " >Throws a TypeError if NewTarget is undefined.\n", "info": " |24.2.2.1 DataView (buffer, byteOffset, byteLength )\n\n1. If NewTarget is undefined, throw a TypeError exception.\n...\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/buffer/return-buffer-sab.js", "esid": " sec-get-dataview.prototype.buffer", "description": " >Return buffer from [[ViewedArrayBuffer]] internal slot\n", "info": " |24.2.4.1 get DataView.prototype.buffer\n\n...\n5. Let buffer be the value of O's [[ViewedArrayBuffer]] internal slot.\n6. Return buffer.\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/buffer/this-has-no-dataview-internal-sab.js", "esid": " sec-get-dataview.prototype.buffer", "description": " >Throws a TypeError exception when `this` does not have a [[DataView]] internal\nslot\n", "info": " |24.2.4.1 get DataView.prototype.buffer\n\n1. Let O be the this value.\n2. If Type(O) is not Object, throw a TypeError exception.\n3. If O does not have a [[DataView]] internal slot, throw a TypeError\nexception.\n...\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/byteLength/return-bytelength-sab.js", "esid": " sec-get-dataview.prototype.bytelength", "description": " >Return value from [[ByteLength]] internal slot\n", "info": " |24.2.4.2 get DataView.prototype.byteLength\n\n...\n7. Let size be the value of O's [[ByteLength]] internal slot.\n8. Return size.\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/byteLength/this-has-no-dataview-internal-sab.js", "esid": " sec-get-dataview.prototype.bytelength", "description": " >Throws a TypeError exception when `this` does not have a [[DataView]] internal\nslot\n", "info": " |24.2.4.2 get DataView.prototype.byteLength\n\n1. Let O be the this value.\n2. If Type(O) is not Object, throw a TypeError exception.\n3. If O does not have a [[DataView]] internal slot, throw a TypeError\nexception.\n...\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/byteOffset/return-byteoffset-sab.js", "esid": " sec-get-dataview.prototype.byteoffset", "description": " >Return value from [[ByteOffset]] internal slot\n", "info": " |24.2.4.3 get DataView.prototype.byteOffset\n\n...\n7. Let offset be the value of O's [[ByteOffset]] internal slot.\n8. Return offset.\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/byteOffset/this-has-no-dataview-internal-sab.js", "esid": " sec-get-dataview.prototype.byteoffset", "description": " >Throws a TypeError exception when `this` does not have a [[DataView]] internal\nslot\n", "info": " |24.2.4.3 get DataView.prototype.byteOffset\n\n1. Let O be the this value.\n2. If Type(O) is not Object, throw a TypeError exception.\n3. If O does not have a [[DataView]] internal slot, throw a TypeError\nexception.\n...\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getInt32/index-is-out-of-range-sab.js", "esid": " sec-dataview.prototype.getint32", "description": " >Throws a RangeError if getIndex + elementSize > viewSize\n", "info": " |24.2.4.9 DataView.prototype.getInt32 ( byteOffset [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Int32\").\n\n24.2.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\n\n...\n10. Let viewOffset be the value of view's [[ByteOffset]] internal slot.\n11. Let viewSize be the value of view's [[ByteLength]] internal slot.\n12. Let elementSize be the Number value of the Element Size value specified in\nTable 50 for Element Type type.\n13. If getIndex + elementSize > viewSize, throw a RangeError exception.\n...\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getInt32/negative-byteoffset-throws-sab.js", "esid": " sec-dataview.prototype.getint32", "description": " >Throws a RangeError if getIndex < 0\n", "info": " |24.2.4.9 DataView.prototype.getInt32 ( byteOffset [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Int32\").\n\n24.2.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\n\n...\n4. Let getIndex be ? ToIndex(requestIndex).\n...\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getInt32/return-abrupt-from-tonumber-byteoffset-sab.js", "esid": " sec-dataview.prototype.getint32", "description": " >Return abrupt from ToNumber(byteOffset)\n", "info": " |24.2.4.9 DataView.prototype.getInt32 ( byteOffset [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Int32\").\n\n24.2.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\n\n...\n4. Let numberIndex be ? ToNumber(requestIndex).\n...\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getInt32/return-abrupt-from-tonumber-byteoffset-symbol-sab.js", "esid": " sec-dataview.prototype.getint32", "description": " >Return abrupt from ToNumber(symbol byteOffset)\n", "info": " |24.2.4.9 DataView.prototype.getInt32 ( byteOffset [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Int32\").\n\n24.2.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\n\n...\n4. Let numberIndex be ? ToNumber(requestIndex).\n...\n", "features": ["SharedArrayBuffer", "Symbol"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getInt32/return-value-clean-arraybuffer-sab.js", "esid": " sec-dataview.prototype.getint32", "description": " >Return value from Buffer using a clean ArrayBuffer\n", "info": " |24.2.4.9 DataView.prototype.getInt32 ( byteOffset [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Int32\").\n\n24.2.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\n\n...\n14. Let bufferIndex be getIndex + viewOffset.\n15. Return GetValueFromBuffer(buffer, bufferIndex, type, isLittleEndian).\n...\n\n24.1.1.5 GetValueFromBuffer ( arrayBuffer, byteIndex, type [ , isLittleEndian\n] )\n\n...\n8. If isLittleEndian is false, reverse the order of the elements of rawValue.\n...\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getInt32/return-values-custom-offset-sab.js", "esid": " sec-dataview.prototype.getint32", "description": " >Return values from Buffer using a custom offset\n", "info": " |24.2.4.9 DataView.prototype.getInt32 ( byteOffset [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Int32\").\n\n24.2.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\n\n...\n14. Let bufferIndex be getIndex + viewOffset.\n15. Return GetValueFromBuffer(buffer, bufferIndex, type, isLittleEndian).\n...\n\n24.1.1.5 GetValueFromBuffer ( arrayBuffer, byteIndex, type [ , isLittleEndian\n] )\n\n...\n8. If isLittleEndian is false, reverse the order of the elements of rawValue.\n...\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getInt32/return-values-sab.js", "esid": " sec-dataview.prototype.getint32", "description": " >Return values from Buffer\n", "info": " |24.2.4.9 DataView.prototype.getInt32 ( byteOffset [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Int32\").\n\n24.2.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\n\n...\n14. Let bufferIndex be getIndex + viewOffset.\n15. Return GetValueFromBuffer(buffer, bufferIndex, type, isLittleEndian).\n...\n\n24.1.1.5 GetValueFromBuffer ( arrayBuffer, byteIndex, type [ , isLittleEndian\n] )\n\n...\n8. If isLittleEndian is false, reverse the order of the elements of rawValue.\n...\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getInt32/this-has-no-dataview-internal-sab.js", "esid": " sec-dataview.prototype.getint32", "description": " >Throws a TypeError if this does not have a [[DataView]] internal slot\n", "info": " |24.2.4.9 DataView.prototype.getInt32 ( byteOffset [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Int32\").\n\n24.2.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\n\n1. If Type(view) is not Object, throw a TypeError exception.\n2. If view does not have a [[DataView]] internal slot, throw a TypeError\nexception.\n...\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getInt32/to-boolean-littleendian-sab.js", "esid": " sec-dataview.prototype.getint32", "description": " >Boolean littleEndian argument coerced in ToBoolean\n", "info": " |24.2.4.9 DataView.prototype.getInt32 ( byteOffset [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Int32\").\n\n24.2.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\n\n...\n14. Let bufferIndex be getIndex + viewOffset.\n15. Return GetValueFromBuffer(buffer, bufferIndex, type, isLittleEndian).\n...\n\n24.1.1.5 GetValueFromBuffer ( arrayBuffer, byteIndex, type [ , isLittleEndian\n] )\n\n...\n8. If isLittleEndian is false, reverse the order of the elements of rawValue.\n...\n", "features": ["SharedArrayBuffer", "Symbol"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getInt32/toindex-byteoffset-sab.js", "esid": " sec-dataview.prototype.getint32", "description": " >ToIndex conversions on byteOffset\n", "info": " |24.2.4.9 DataView.prototype.getInt32 ( byteOffset [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Int32\").\n\n24.2.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\n\n...\n4. Let getIndex be ? ToIndex(requestIndex).\n...\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/DataView/return-abrupt-tonumber-bytelength-sab.js", "esid": " sec-dataview-buffer-byteoffset-bytelength", "description": " >Return abrupt from ToLength(byteLength)\n", "info": " |24.2.2.1 DataView (buffer, byteOffset, byteLength )\n\n...\n10. If byteLength is undefined, then\na. Let viewByteLength be bufferByteLength - offset.\n11. Else,\na. Let viewByteLength be ? ToLength(byteLength).\n...\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/DataView/return-abrupt-tonumber-bytelength-symbol-sab.js", "esid": " sec-dataview-buffer-byteoffset-bytelength", "description": " >Return abrupt from ToLength(symbol byteLength)\n", "info": " |24.2.2.1 DataView (buffer, byteOffset, byteLength )\n\n...\n10. If byteLength is undefined, then\na. Let viewByteLength be bufferByteLength - offset.\n11. Else,\na. Let viewByteLength be ? ToLength(byteLength).\n...\n", "features": ["SharedArrayBuffer", "Symbol"]}, {"path": "./test262-main/test/built-ins/DataView/return-abrupt-tonumber-byteoffset-sab.js", "esid": " sec-dataview-buffer-byteoffset-bytelength", "description": " >Return abrupt from ToNumber(byteOffset)\n", "info": " |24.2.2.1 DataView (buffer, byteOffset, byteLength )\n\n...\n4. Let numberOffset be ? ToNumber(byteOffset).\n...\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/DataView/return-abrupt-tonumber-byteoffset-symbol-sab.js", "esid": " sec-dataview-buffer-byteoffset-bytelength", "description": " >Return abrupt from ToNumber(symbol byteOffset)\n", "info": " |24.2.2.1 DataView (buffer, byteOffset, byteLength )\n\n...\n4. Let numberOffset be ? ToNumber(byteOffset).\n...\n", "features": ["SharedArrayBuffer", "Symbol"]}, {"path": "./test262-main/test/built-ins/DataView/return-instance-sab.js", "esid": " sec-dataview-buffer-byteoffset-bytelength", "description": " >Returns new instance\n", "info": " |24.2.2.1 DataView (buffer, byteOffset, byteLength )\n\n...\n12. Let O be ? OrdinaryCreateFromConstructor(NewTarget, \"%DataViewPrototype%\",\n\u00ab [[DataView]], [[ViewedArrayBuffer]], [[ByteLength]], [[ByteOffset]] \u00bb).\n...\n17. Return O.\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/DataView/toindex-bytelength-sab.js", "esid": " sec-dataview-buffer-byteoffset-bytelength", "description": " >ToIndex conversions on byteLength\n", "info": " |24.2.2.1 DataView ( buffer, byteOffset, byteLength )\n\n...\n8. If byteLength is either not present or undefined, then\na. Let viewByteLength be bufferByteLength - offset.\n9. Else,\na. Let viewByteLength be ? ToIndex(byteLength).\nb. If offset + viewByteLength > bufferByteLength, throw a RangeError\nexception.\n...\n\nToIndex( value )\n\n1. If value is undefined, then\na. Let index be 0.\n2. Else,\na. Let integerIndex be ? ToInteger(value).\nb. If integerIndex < 0, throw a RangeError exception.\nc. Let index be ! ToLength(integerIndex).\nd. If SameValueZero(integerIndex, index) is false, throw a RangeError exception.\n3. Return index.\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/DataView/toindex-byteoffset-sab.js", "esid": " sec-dataview-buffer-byteoffset-bytelength", "description": " >ToIndex conversions on byteOffset\n", "info": " |24.2.2.1 DataView ( buffer, byteOffset, byteLength )\n\n...\n4. Let offset be ? ToIndex(byteOffset).\n...\n\nToIndex( value )\n\n1. If value is undefined, then\na. Let index be 0.\n2. Else,\na. Let integerIndex be ? ToInteger(value).\nb. If integerIndex < 0, throw a RangeError exception.\nc. Let index be ! ToLength(integerIndex).\nd. If SameValueZero(integerIndex, index) is false, throw a RangeError exception.\n3. Return index.\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/Date/prototype/toString/non-date-receiver.js", "esid": " sec-date.prototype.tostring", "description": " Date.prototype.toString throws a TypeError on non-Date receivers", "info": " |Date.prototype.toString ( )\n\n1. Let tv be ? thisTimeValue(this value).\n"}, {"path": "./test262-main/test/built-ins/Error/prototype/S15.11.4_A2.js", "info": " |The value of the internal [[Class]] property of Error prototype object is\n\"Object\"\n", "version": 5, "esid": " 15.11.4_A2", "description": " >Getting the value of the internal [[Class]] property using\nError.prototype.toString() function\n"}, {"path": "./test262-main/test/built-ins/Error/prototype/no-error-data.js", "esid": " sec-properties-of-the-error-prototype-object", "description": " >The Error Prototype object does not have a [[ErrorData]] internal slot.\n", "info": " |Properties of the Error Prototype Object\n\nThe Error prototype object:\n[...]\n* is not an Error instance and does not have an [[ErrorData]] internal slot.\n\nObject.prototype.toString ( )\n\n[...]\n8. Else if O has an [[ErrorData]] internal slot, let builtinTag be \"Error\".\n[...]\n15. Let tag be ? Get(O, @@toStringTag).\n16. If Type(tag) is not String, set tag to builtinTag.\n17. Return the string-concatenation of \"[object \", tag, and \"]\".\n", "features": ["Symbol.toStringTag"]}, {"path": "./test262-main/test/built-ins/Function/prototype/toString/AsyncFunction.js", "author": " Brian Terlson <brian.terlson@microsoft.com>", "esid": " sec-function.prototype.tostring", "description": " >Function.prototype.toString on an async function created with the\nAsyncFunction constructor.\n", "features": ["async-functions"], "includes": ["nativeFunctionMatcher.js"]}, {"path": "./test262-main/test/built-ins/Function/prototype/toString/AsyncGenerator.js", "esid": " sec-function.prototype.tostring", "description": " >Function.prototype.toString on an async generator created with the\nAsyncGenerator constructor.\n", "features": ["async-iteration"], "includes": ["nativeFunctionMatcher.js"]}, {"path": "./test262-main/test/built-ins/Function/prototype/toString/Function.js", "esid": " sec-createdynamicfunction", "description": " Function.prototype.toString on a function created with the Function constructor", "includes": ["nativeFunctionMatcher.js"]}, {"path": "./test262-main/test/built-ins/Function/prototype/toString/GeneratorFunction.js", "esid": " sec-createdynamicfunction", "description": " Function.prototype.toString on a generator function created with the GeneratorFunction constructor", "features": ["generators"], "includes": ["nativeFunctionMatcher.js"]}, {"path": "./test262-main/test/built-ins/Function/prototype/toString/async-arrow-function.js", "esid": " sec-async-arrow-function-definitions-runtime-semantics-evaluation", "description": " Function.prototype.toString on an async arrow function", "features": ["async-functions"], "includes": ["nativeFunctionMatcher.js"]}, {"path": "./test262-main/test/built-ins/Function/prototype/toString/async-function-declaration.js", "author": " Brian Terlson <brian.terlson@microsoft.com>", "esid": " sec-function.prototype.tostring", "description": " Function.prototype.toString on an async function declaration", "features": ["async-functions"], "includes": ["nativeFunctionMatcher.js"]}, {"path": "./test262-main/test/built-ins/Function/prototype/toString/async-function-expression.js", "author": " Brian Terlson <brian.terlson@microsoft.com>", "esid": " sec-function.prototype.tostring", "description": " Function.prototype.toString on an async function expression", "features": ["async-functions"], "includes": ["nativeFunctionMatcher.js"]}, {"path": "./test262-main/test/built-ins/Function/prototype/toString/async-generator-declaration.js", "esid": " sec-function.prototype.tostring", "description": " Function.prototype.toString on an async generator declaration", "features": ["async-iteration"], "includes": ["nativeFunctionMatcher.js"]}, {"path": "./test262-main/test/built-ins/Function/prototype/toString/async-generator-expression.js", "esid": " sec-function.prototype.tostring", "description": " Function.prototype.toString on an async generator expression", "features": ["async-iteration"], "includes": ["nativeFunctionMatcher.js"]}, {"path": "./test262-main/test/built-ins/Function/prototype/toString/async-generator-method-class-expression-static.js", "esid": " sec-function.prototype.tostring", "description": " Function.prototype.toString on an async generator method", "features": ["async-iteration"], "includes": ["nativeFunctionMatcher.js"]}, {"path": "./test262-main/test/built-ins/Function/prototype/toString/async-generator-method-class-expression.js", "esid": " sec-function.prototype.tostring", "description": " Function.prototype.toString on an async generator method", "features": ["async-iteration"], "includes": ["nativeFunctionMatcher.js"]}, {"path": "./test262-main/test/built-ins/Function/prototype/toString/async-generator-method-class-statement-static.js", "esid": " sec-function.prototype.tostring", "description": " Function.prototype.toString on an async generator method", "features": ["async-iteration"], "includes": ["nativeFunctionMatcher.js"]}, {"path": "./test262-main/test/built-ins/Function/prototype/toString/async-generator-method-class-statement.js", "esid": " sec-function.prototype.tostring", "description": " Function.prototype.toString on an async generator method", "features": ["async-iteration"], "includes": ["nativeFunctionMatcher.js"]}, {"path": "./test262-main/test/built-ins/Function/prototype/toString/async-generator-method-object.js", "esid": " sec-function.prototype.tostring", "description": " Function.prototype.toString on an async generator method", "features": ["async-iteration"], "includes": ["nativeFunctionMatcher.js"]}, {"path": "./test262-main/test/built-ins/Function/prototype/toString/async-method-class-expression-static.js", "esid": " sec-function.prototype.tostring", "description": " Function.prototype.toString on an async method", "features": ["async-functions"], "includes": ["nativeFunctionMatcher.js"]}, {"path": "./test262-main/test/built-ins/Function/prototype/toString/async-method-class-expression.js", "esid": " sec-function.prototype.tostring", "description": " Function.prototype.toString on an async method", "features": ["async-functions"], "includes": ["nativeFunctionMatcher.js"]}, {"path": "./test262-main/test/built-ins/Function/prototype/toString/async-method-class-statement-static.js", "esid": " sec-function.prototype.tostring", "description": " Function.prototype.toString on an async method", "features": ["async-functions"], "includes": ["nativeFunctionMatcher.js"]}, {"path": "./test262-main/test/built-ins/Function/prototype/toString/async-method-class-statement.js", "esid": " sec-function.prototype.tostring", "description": " Function.prototype.toString on an async method", "features": ["async-functions"], "includes": ["nativeFunctionMatcher.js"]}, {"path": "./test262-main/test/built-ins/Function/prototype/toString/async-method-object.js", "author": " Brian Terlson <brian.terlson@microsoft.com>", "esid": " sec-function.prototype.tostring", "description": " Function.prototype.toString on an async method", "features": ["async-functions"], "includes": ["nativeFunctionMatcher.js"]}, {"path": "./test262-main/test/built-ins/Function/prototype/toString/class-declaration-complex-heritage.js", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "description": " Function.prototype.toString on a class declaration (with complex heritage)", "includes": ["nativeFunctionMatcher.js"]}, {"path": "./test262-main/test/built-ins/Function/prototype/toString/class-declaration-explicit-ctor.js", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "description": " Function.prototype.toString on a class declaration (explicit constructor)", "includes": ["nativeFunctionMatcher.js"]}, {"path": "./test262-main/test/built-ins/Function/prototype/toString/class-declaration-implicit-ctor.js", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "description": " Function.prototype.toString on a class declaration (implicit constructor)", "includes": ["nativeFunctionMatcher.js"]}, {"path": "./test262-main/test/built-ins/Function/prototype/toString/class-expression-explicit-ctor.js", "esid": " sec-class-definitions-runtime-semantics-evaluation", "description": " Function.prototype.toString on a class expression (explicit constructor)", "includes": ["nativeFunctionMatcher.js"]}, {"path": "./test262-main/test/built-ins/Function/prototype/toString/class-expression-implicit-ctor.js", "esid": " sec-class-definitions-runtime-semantics-evaluation", "description": " Function.prototype.toString on a class expression (implicit constructor)", "includes": ["nativeFunctionMatcher.js"]}, {"path": "./test262-main/test/built-ins/Function/prototype/toString/function-declaration-non-simple-parameter-list.js", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "description": " Function.prototype.toString on a function with a non-simple parameter list", "includes": ["nativeFunctionMatcher.js"]}, {"path": "./test262-main/test/built-ins/Function/prototype/toString/function-declaration.js", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "description": " Function.prototype.toString on a function declaration", "includes": ["nativeFunctionMatcher.js"]}, {"path": "./test262-main/test/built-ins/Function/prototype/toString/function-expression.js", "esid": " sec-function-definitions-runtime-semantics-evaluation", "description": " Function.prototype.toString on a function expression", "includes": ["nativeFunctionMatcher.js"]}, {"path": "./test262-main/test/built-ins/Function/prototype/toString/generator-function-declaration.js", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "description": " Function.prototype.toString on a generator function declaration", "includes": ["nativeFunctionMatcher.js"]}, {"path": "./test262-main/test/built-ins/Function/prototype/toString/generator-function-expression.js", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "description": " Function.prototype.toString on a generator function expression", "includes": ["nativeFunctionMatcher.js"]}, {"path": "./test262-main/test/built-ins/Function/prototype/toString/generator-method.js", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "description": " Function.prototype.toString on a generator method", "includes": ["nativeFunctionMatcher.js"]}, {"path": "./test262-main/test/built-ins/Function/prototype/toString/getter-class-expression-static.js", "esid": " sec-method-definitions-runtime-semantics-propertydefinitionevaluation", "description": " Function.prototype.toString on a getter (class; static)", "includes": ["nativeFunctionMatcher.js"]}, {"path": "./test262-main/test/built-ins/Function/prototype/toString/getter-class-expression.js", "esid": " sec-method-definitions-runtime-semantics-propertydefinitionevaluation", "description": " Function.prototype.toString on a getter (class)", "includes": ["nativeFunctionMatcher.js"]}, {"path": "./test262-main/test/built-ins/Function/prototype/toString/getter-class-statement-static.js", "esid": " sec-method-definitions-runtime-semantics-propertydefinitionevaluation", "description": " Function.prototype.toString on a getter (class; static)", "includes": ["nativeFunctionMatcher.js"]}, {"path": "./test262-main/test/built-ins/Function/prototype/toString/getter-class-statement.js", "esid": " sec-method-definitions-runtime-semantics-propertydefinitionevaluation", "description": " Function.prototype.toString on a getter (class)", "includes": ["nativeFunctionMatcher.js"]}, {"path": "./test262-main/test/built-ins/Function/prototype/toString/getter-object.js", "esid": " sec-method-definitions-runtime-semantics-propertydefinitionevaluation", "description": " Function.prototype.toString on a getter (object)", "includes": ["nativeFunctionMatcher.js"]}, {"path": "./test262-main/test/built-ins/Function/prototype/toString/line-terminator-normalisation-LF.js", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "description": " Function.prototype.toString line terminator normalisation (LF)", "info": " |Function.prototype.toString should not normalise line terminator sequences to Line Feed characters.\nThis file uses Line Feed characters as line terminators.\n", "includes": ["nativeFunctionMatcher.js"]}, {"path": "./test262-main/test/built-ins/Function/prototype/toString/method-class-expression-static.js", "esid": " sec-runtime-semantics-definemethod", "description": " Function.prototype.toString on a method (class; static)", "includes": ["nativeFunctionMatcher.js"]}, {"path": "./test262-main/test/built-ins/Function/prototype/toString/method-class-statement-static.js", "esid": " sec-runtime-semantics-definemethod", "description": " Function.prototype.toString on a method (class; static)", "includes": ["nativeFunctionMatcher.js"]}, {"path": "./test262-main/test/built-ins/Function/prototype/toString/method-class-statement.js", "esid": " sec-runtime-semantics-definemethod", "description": " Function.prototype.toString on a method (class)", "includes": ["nativeFunctionMatcher.js"]}, {"path": "./test262-main/test/built-ins/Function/prototype/toString/method-computed-property-name.js", "esid": " sec-runtime-semantics-definemethod", "description": " Function.prototype.toString on a method (object)", "includes": ["nativeFunctionMatcher.js"]}, {"path": "./test262-main/test/built-ins/Function/prototype/toString/method-object.js", "esid": " sec-runtime-semantics-definemethod", "description": " Function.prototype.toString on a method (object)", "includes": ["nativeFunctionMatcher.js"]}, {"path": "./test262-main/test/built-ins/Function/prototype/toString/setter-class-expression-static.js", "esid": " sec-method-definitions-runtime-semantics-propertydefinitionevaluation", "description": " Function.prototype.toString on a setter (class; static)", "includes": ["nativeFunctionMatcher.js"]}, {"path": "./test262-main/test/built-ins/Function/prototype/toString/setter-class-expression.js", "esid": " sec-method-definitions-runtime-semantics-propertydefinitionevaluation", "description": " Function.prototype.toString on a setter (class)", "includes": ["nativeFunctionMatcher.js"]}, {"path": "./test262-main/test/built-ins/Function/prototype/toString/setter-class-statement-static.js", "esid": " sec-method-definitions-runtime-semantics-propertydefinitionevaluation", "description": " Function.prototype.toString on a setter (class; static)", "includes": ["nativeFunctionMatcher.js"]}, {"path": "./test262-main/test/built-ins/Function/prototype/toString/setter-class-statement.js", "esid": " sec-method-definitions-runtime-semantics-propertydefinitionevaluation", "description": " Function.prototype.toString on a setter (class)", "includes": ["nativeFunctionMatcher.js"]}, {"path": "./test262-main/test/built-ins/Function/prototype/toString/setter-object.js", "esid": " sec-method-definitions-runtime-semantics-propertydefinitionevaluation", "description": " Function.prototype.toString on a setter (object)", "includes": ["nativeFunctionMatcher.js"]}, {"path": "./test262-main/test/built-ins/Function/prototype/toString/unicode.js", "esid": " sec-function.prototype.tostring", "description": " Function.prototype.toString on a function with Unicode escape sequences", "info": " |Function.prototype.toString returns a slice of the source text before\nany potential Unicode escape sequence substitution in identifiers\n", "includes": ["nativeFunctionMatcher.js"]}, {"path": "./test262-main/test/built-ins/GeneratorFunction/instance-construct-throws.js", "esid": " sec-generatorfunction", "description": " The instance created by GeneratorFunction is not a constructor", "info": " |25.2.1.1 GeneratorFunction ( p1, p2, \u2026 , pn, body )\n\n...\n3. Return ? CreateDynamicFunction(C, NewTarget, \"generator\", args).\n\n19.2.1.1.1 Runtime Semantics: CreateDynamicFunction( constructor, newTarget, kind, args )\n\n...\n34. If kind is \"generator\", then\na. Let prototype be ObjectCreate(%GeneratorPrototype%).\nb. Perform DefinePropertyOrThrow(F, \"prototype\", PropertyDescriptor{[[Value]]: prototype,\n[[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: false}).\n...\n", "features": ["generators"]}, {"path": "./test262-main/test/built-ins/GeneratorFunction/instance-restricted-properties.js", "description": " >Functions created using GeneratorFunction intrinsic function do not have\nown properties \"caller\" or \"arguments\", but inherit them from\n%FunctionPrototype%.\n", "features": ["generators"]}, {"path": "./test262-main/test/built-ins/GeneratorFunction/is-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >The GeneratorFunction constructor implements [[Construct]]\n", "info": " |IsConstructor ( argument )\n\nThe abstract operation IsConstructor takes argument argument (an ECMAScript language value).\nIt determines if argument is a function object with a [[Construct]] internal method.\nIt performs the following steps when called:\n\nIf Type(argument) is not Object, return false.\nIf argument has a [[Construct]] internal method, return true.\nReturn false.\n", "includes": ["isConstructor.js", "hidden-constructors.js"], "features": ["Reflect.construct"]}, {"path": "./test262-main/test/built-ins/GeneratorFunction/prototype/constructor.js", "esid": " sec-generatorfunction.prototype.constructor", "description": " >`constructor` property of the GeneratorFunction.prototype object\n", "info": " |The initial value of GeneratorFunction.prototype.constructor is the intrinsic\nobject %GeneratorFunction%.\n\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]:\nfalse, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["generators"]}, {"path": "./test262-main/test/built-ins/GeneratorFunction/prototype/prototype.js", "version": 6, "esid": " 25.2.3.2", "description": " >The value of GeneratorFunction.prototype.prototype is the\n%GeneratorPrototype% intrinsic object.\n\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]:\nfalse, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["generators"]}, {"path": "./test262-main/test/built-ins/GeneratorPrototype/constructor.js", "description": " >The GeneratorPrototype intrinsic should define a `constructor` property\nthat is non-enumerable, non-writable, and configurable.\n", "includes": ["propertyHelper.js"], "version": 6, "esid": " 25.3.1", "features": ["generators"]}, {"path": "./test262-main/test/built-ins/Map/iterator-close-after-set-failure.js", "version": 6, "esid": " 23.1.1.1", "description": " >The iterator is closed when `Map.prototype.set` throws an error.\n", "info": " |Map ( [ iterable ] )\n\n...\n9. Repeat\n...\nk. Let status be Call(adder, map, \u00abk.[[value]], v.[[value]]\u00bb).\nl. If status is an abrupt completion, return IteratorClose(iter, status).\n", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/built-ins/Map/iterator-item-first-entry-returns-abrupt.js", "version": 6, "esid": " 23.1.1.1", "description": " >Closes iterator if item first entry completes abruptly.\n", "info": " |Map ( [ iterable ] )\n\n...\n9. Repeat\n...\nd. Let nextItem be IteratorValue(next).\n...\ng. Let k be Get(nextItem, \"0\").\nh. If k is an abrupt completion, return IteratorClose(iter, k).\n...\n", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/built-ins/Map/iterator-item-second-entry-returns-abrupt.js", "version": 6, "esid": " 23.1.1.1", "description": " >Closes iterator if item second entry completes abruptly.\n", "info": " |Map ( [ iterable ] )\n\n...\n9. Repeat\n...\nd. Let nextItem be IteratorValue(next).\n...\ni. Let v be Get(nextItem, \"1\").\nj. If v is an abrupt completion, return IteratorClose(iter, v).\n...\n", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/built-ins/NativeErrors/EvalError/proto.js", "version": 6, "esid": " 19.5.6.2", "description": " >The prototype of EvalError is Error.\n", "info": " |The value of the [[Prototype]] internal slot of a NativeError constructor is the intrinsic object %Error% (19.5.1).\n"}, {"path": "./test262-main/test/built-ins/NativeErrors/EvalError/prototype/not-error-object.js", "version": 6, "esid": " 19.5.6.3", "description": " >EvalError.prototype is not an error object instance.\n", "info": " |Each NativeError prototype object is an ordinary object. It is not an\nError instance and does not have an [[ErrorData]] internal slot.\n"}, {"path": "./test262-main/test/built-ins/NativeErrors/RangeError/proto.js", "version": 6, "esid": " 19.5.6.2", "description": " >The prototype of RangeError is Error.\n", "info": " |The value of the [[Prototype]] internal slot of a NativeError constructor is the intrinsic object %Error% (19.5.1).\n"}, {"path": "./test262-main/test/built-ins/NativeErrors/RangeError/prototype/not-error-object.js", "version": 6, "esid": " 19.5.6.3", "description": " >RangeError.prototype is not an error object instance.\n", "info": " |Each NativeError prototype object is an ordinary object. It is not an\nError instance and does not have an [[ErrorData]] internal slot.\n"}, {"path": "./test262-main/test/built-ins/NativeErrors/ReferenceError/proto.js", "version": 6, "esid": " 19.5.6.2", "description": " >The prototype of ReferenceError is Error.\n", "info": " |The value of the [[Prototype]] internal slot of a NativeError constructor is the intrinsic object %Error% (19.5.1).\n"}, {"path": "./test262-main/test/built-ins/NativeErrors/ReferenceError/prototype/not-error-object.js", "version": 6, "esid": " 19.5.6.3", "description": " >ReferenceError.prototype is not an error object instance.\n", "info": " |Each NativeError prototype object is an ordinary object. It is not an\nError instance and does not have an [[ErrorData]] internal slot.\n"}, {"path": "./test262-main/test/built-ins/NativeErrors/SyntaxError/proto.js", "version": 6, "esid": " 19.5.6.2", "description": " >The prototype of SyntaxError is Error.\n", "info": " |The value of the [[Prototype]] internal slot of a NativeError constructor is the intrinsic object %Error% (19.5.1).\n"}, {"path": "./test262-main/test/built-ins/NativeErrors/SyntaxError/prototype/not-error-object.js", "version": 6, "esid": " 19.5.6.3", "description": " >SyntaxError.prototype is not an error object instance.\n", "info": " |Each NativeError prototype object is an ordinary object. It is not an\nError instance and does not have an [[ErrorData]] internal slot.\n"}, {"path": "./test262-main/test/built-ins/NativeErrors/TypeError/proto.js", "version": 6, "esid": " 19.5.6.2", "description": " >The prototype of TypeError is Error.\n", "info": " |The value of the [[Prototype]] internal slot of a NativeError constructor is the intrinsic object %Error% (19.5.1).\n"}, {"path": "./test262-main/test/built-ins/NativeErrors/TypeError/prototype/not-error-object.js", "version": 6, "esid": " 19.5.6.3", "description": " >TypeError.prototype is not an error object instance.\n", "info": " |Each NativeError prototype object is an ordinary object. It is not an\nError instance and does not have an [[ErrorData]] internal slot.\n"}, {"path": "./test262-main/test/built-ins/NativeErrors/URIError/proto.js", "version": 6, "esid": " 19.5.6.2", "description": " >The prototype of URIError is Error.\n", "info": " |The value of the [[Prototype]] internal slot of a NativeError constructor is the intrinsic object %Error% (19.5.1).\n"}, {"path": "./test262-main/test/built-ins/NativeErrors/URIError/prototype/not-error-object.js", "version": 6, "esid": " 19.5.6.3", "description": " >URIError.prototype is not an error object instance.\n", "info": " |Each NativeError prototype object is an ordinary object. It is not an\nError instance and does not have an [[ErrorData]] internal slot.\n"}, {"path": "./test262-main/test/built-ins/Number/prototype/toFixed/range.js", "esid": " sec-number.prototype.tofixed", "description": " Number.prototype.toFixed permits fractionDigits from 0 to 100", "info": " |Number.prototype.toFixed ( fractionDigits )\n\n...\n3. If _f_ &lt; 0 or _f_ &gt; 100, throw a *RangeError* exception.\n...\n"}, {"path": "./test262-main/test/built-ins/Object/defineProperty/15.2.3.6-4-292-1.js", "version": 5, "esid": " 15.2.3.6-4-292-1", "description": " >Object.defineProperty - 'O' is an Arguments object of a function\nthat has formal parameters, 'name' is own property of 'O' which is\nalso defined in [[ParameterMap]] of 'O', and 'desc' is data\ndescriptor, test updating multiple attribute values of 'name'\n(10.6 [[DefineOwnProperty]] step 3 and 5.b)\n", "includes": ["propertyHelper.js"], "flags": ["noStrict"]}, {"path": "./test262-main/test/built-ins/Object/defineProperty/15.2.3.6-4-293-2.js", "version": 5, "esid": " 15.2.3.6-4-293-2", "description": " >Object.defineProperty - 'O' is an Arguments object of a function\nthat has formal parameters, 'name' is own data property of 'O'\nwhich is also defined in [[ParameterMap]] of 'O', test TypeError\nis thrown when updating the [[Value]] attribute value of 'name'\nwhich is defined as unwritable and non-configurable (10.6\n[[DefineOwnProperty]] step 4 and step 5b)\n", "includes": ["propertyHelper.js"], "flags": ["noStrict"]}, {"path": "./test262-main/test/built-ins/Object/defineProperty/15.2.3.6-4-293-3.js", "version": 5, "esid": " 15.2.3.6-4-293-3", "description": " >Object.defineProperty - 'O' is an Arguments object of a function\nthat has formal parameters, 'name' is own data property of 'O'\nwhich is also defined in [[ParameterMap]] of 'O', test TypeError\nis not thrown when updating the [[Value]] attribute value of\n'name' which is defined as non-writable and configurable (10.6\n[[DefineOwnProperty]] step 3 and step 5.b)\n", "includes": ["propertyHelper.js"], "flags": ["noStrict"]}, {"path": "./test262-main/test/built-ins/Object/defineProperty/15.2.3.6-4-294-1.js", "version": 5, "esid": " 15.2.3.6-4-294-1", "description": " >Object.defineProperty - 'O' is an Arguments object of a function\nthat has formal parameters, 'name' is own data property of 'O'\nwhich is also defined in [[ParameterMap]] of 'O', test TypeError\nis thrown when updating the [[Writable]] attribute value of 'name'\nwhich is defined as non-configurable (10.6 [[DefineOwnProperty]]\nstep 4 and 5b)\n", "includes": ["propertyHelper.js"], "flags": ["noStrict"]}, {"path": "./test262-main/test/built-ins/Object/defineProperty/15.2.3.6-4-295-1.js", "version": 5, "esid": " 15.2.3.6-4-295-1", "description": " >Object.defineProperty - 'O' is an Arguments object of a function\nthat has formal parameters, 'name' is own data property of 'O'\nwhich is also defined in [[ParameterMap]] of 'O', test TypeError\nis thrown when updating the [[Enumerable]] attribute value of\n'name' which is defined as non-configurable (10.6\n[[DefineOwnProperty]] step 4 and step 5b)\n", "includes": ["propertyHelper.js"], "flags": ["noStrict"]}, {"path": "./test262-main/test/built-ins/Object/defineProperty/15.2.3.6-4-296-1.js", "version": 5, "esid": " 15.2.3.6-4-296-1", "description": " >Object.defineProperty - 'O' is an Arguments object of a function\nthat has formal parameters, 'name' is own data property of 'O'\nwhich is also defined in [[ParameterMap]] of 'O', test TypeError\nis thrown when updating the [[Configurable]] attribute value of\n'name' which is defined as non-configurable (10.6\n[[DefineOwnProperty]] step 4 and step 5b)\n", "includes": ["propertyHelper.js"], "flags": ["noStrict"]}, {"path": "./test262-main/test/built-ins/Object/getPrototypeOf/15.2.3.2-2-12.js", "version": 5, "esid": " 15.2.3.2-2-12", "description": " >Object.getPrototypeOf returns the [[Prototype]] of its parameter\n(EvalError)\n"}, {"path": "./test262-main/test/built-ins/Object/getPrototypeOf/15.2.3.2-2-13.js", "version": 5, "esid": " 15.2.3.2-2-13", "description": " >Object.getPrototypeOf returns the [[Prototype]] of its parameter\n(RangeError)\n"}, {"path": "./test262-main/test/built-ins/Object/getPrototypeOf/15.2.3.2-2-14.js", "version": 5, "esid": " 15.2.3.2-2-14", "description": " >Object.getPrototypeOf returns the [[Prototype]] of its parameter\n(ReferenceError)\n"}, {"path": "./test262-main/test/built-ins/Object/getPrototypeOf/15.2.3.2-2-15.js", "version": 5, "esid": " 15.2.3.2-2-15", "description": " >Object.getPrototypeOf returns the [[Prototype]] of its parameter\n(SyntaxError)\n"}, {"path": "./test262-main/test/built-ins/Object/getPrototypeOf/15.2.3.2-2-16.js", "version": 5, "esid": " 15.2.3.2-2-16", "description": " >Object.getPrototypeOf returns the [[Prototype]] of its parameter\n(TypeError)\n"}, {"path": "./test262-main/test/built-ins/Object/getPrototypeOf/15.2.3.2-2-17.js", "version": 5, "esid": " 15.2.3.2-2-17", "description": " >Object.getPrototypeOf returns the [[Prototype]] of its parameter\n(URIError)\n"}, {"path": "./test262-main/test/built-ins/Object/seal/seal-asyncgeneratorfunction.js", "esid": " sec-object.seal", "description": " >Object.seal AsyncGeneratorFunction\n", "info": " |If Type(O) is not Object, return O.\nLet status be ? SetIntegrityLevel(O, sealed).\n\nSetIntegrityLevel ( O, level )\n\nAssert: Type(O) is Object.\nAssert: level is either sealed or frozen.\nLet status be ? O.[[PreventExtensions]]().\nIf status is false, return false.\nLet keys be ? O.[[OwnPropertyKeys]]().\nIf level is sealed, then\nFor each element k of keys, do\nPerform ? DefinePropertyOrThrow(O, k, PropertyDescriptor { [[Configurable]]: false }).\nElse,\nAssert: level is frozen.\nFor each element k of keys, do\nLet currentDesc be ? O.[[GetOwnProperty]](k).\nIf currentDesc is not undefined, then\nIf IsAccessorDescriptor(currentDesc) is true, then\nLet desc be the PropertyDescriptor { [[Configurable]]: false }.\nElse,\nLet desc be the PropertyDescriptor { [[Configurable]]: false, [[Writable]]: false }.\nPerform ? DefinePropertyOrThrow(O, k, desc).\nReturn true.\n\n"}, {"path": "./test262-main/test/built-ins/Object/seal/seal-sharedarraybuffer.js", "esid": " sec-object.seal", "description": " >Object.seal SharedArrayBuffer\n", "info": " |If Type(O) is not Object, return O.\nLet status be ? SetIntegrityLevel(O, sealed).\n\nSetIntegrityLevel ( O, level )\n\nAssert: Type(O) is Object.\nAssert: level is either sealed or frozen.\nLet status be ? O.[[PreventExtensions]]().\nIf status is false, return false.\nLet keys be ? O.[[OwnPropertyKeys]]().\nIf level is sealed, then\nFor each element k of keys, do\nPerform ? DefinePropertyOrThrow(O, k, PropertyDescriptor { [[Configurable]]: false }).\nElse,\nAssert: level is frozen.\nFor each element k of keys, do\nLet currentDesc be ? O.[[GetOwnProperty]](k).\nIf currentDesc is not undefined, then\nIf IsAccessorDescriptor(currentDesc) is true, then\nLet desc be the PropertyDescriptor { [[Configurable]]: false }.\nElse,\nLet desc be the PropertyDescriptor { [[Configurable]]: false, [[Writable]]: false }.\nPerform ? DefinePropertyOrThrow(O, k, desc).\nReturn true.\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/Promise/all/invoke-resolve-error-close.js", "description": " >Explicit iterator closing in response to error\n", "esid": " sec-promise.all", "info": " |11. Let result be PerformPromiseAll(iteratorRecord, C, promiseCapability).\n12. If result is an abrupt completion,\na. If iteratorRecord.[[done]] is false, let result be\nIteratorClose(iterator, result).\nb. IfAbruptRejectPromise(result, promiseCapability).\n\n[...]\n\n25.4.4.1.1 Runtime Semantics: PerformPromiseAll\n\n[...]\n6. Repeat\n[...]\ni. Let nextPromise be Invoke(constructor, \"resolve\", \u00abnextValue\u00bb).\nj. ReturnIfAbrupt(nextPromise ).\n", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/built-ins/Promise/all/invoke-then-error-close.js", "description": " >Error thrown when invoking the instance's `then` method (closing iterator)\n", "esid": " sec-performpromiseall", "info": " |11. Let result be PerformPromiseAll(iteratorRecord, C, promiseCapability).\n12. If result is an abrupt completion,\na. If iteratorRecord.[[done]] is false, let result be\nIteratorClose(iterator, result).\nb. IfAbruptRejectPromise(result, promiseCapability).\n\n[...]\n\n25.4.4.1.1 Runtime Semantics: PerformPromiseAll\n\n[...]\n6. Repeat\n[...]\nr. Let result be Invoke(nextPromise, \"then\", \u00abresolveElement,\nresultCapability.[[Reject]]\u00bb).\ns. ReturnIfAbrupt(result).\n", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/built-ins/Promise/all/invoke-then-get-error-close.js", "description": " >Error thrown when accesing the instance's `then` method (closing iterator)\n", "esid": " sec-performpromiseall", "info": " |11. Let result be PerformPromiseAll(iteratorRecord, C, promiseCapability).\n12. If result is an abrupt completion,\na. If iteratorRecord.[[done]] is false, let result be\nIteratorClose(iterator, result).\nb. IfAbruptRejectPromise(result, promiseCapability).\n\n[...]\n\n25.4.4.1.1 Runtime Semantics: PerformPromiseAll\n\n[...]\n6. Repeat\n[...]\nr. Let result be Invoke(nextPromise, \"then\", \u00abresolveElement,\nresultCapability.[[Reject]]\u00bb).\ns. ReturnIfAbrupt(result).\n", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/built-ins/Promise/prototype/finally/invokes-then-with-function.js", "author": " Jordan Harband", "description": " Promise.prototype.finally invokes `then` method", "esid": " sec-promise.prototype.finally", "features": ["Promise.prototype.finally", "Reflect.construct", "arrow-function"], "includes": ["isConstructor.js"]}, {"path": "./test262-main/test/built-ins/Promise/prototype/finally/invokes-then-with-non-function.js", "author": " Jordan Harband", "description": " Promise.prototype.finally invokes `then` method", "esid": " sec-promise.prototype.finally", "features": ["Promise.prototype.finally"]}, {"path": "./test262-main/test/built-ins/Promise/prototype/finally/is-a-function.js", "author": " Jordan Harband", "description": " Promise.prototype.finally is a function", "esid": " sec-promise.prototype.finally", "features": ["Promise.prototype.finally"]}, {"path": "./test262-main/test/built-ins/Promise/prototype/finally/length.js", "author": " Jordan Harband", "description": " Promise.prototype.finally `length` property", "esid": " sec-promise.prototype.finally", "info": " |ES6 Section 17:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this value\nis equal to the largest number of named arguments shown in the subclause\nheadings for the function description, including optional parameters.\n\n[...]\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Promise.prototype.finally"]}, {"path": "./test262-main/test/built-ins/Promise/prototype/finally/name.js", "author": " Jordan Harband", "description": " Promise.prototype.finally `name` property", "esid": " sec-promise.prototype.finally", "info": " |ES Section 17:\n\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value is a\nString. Unless otherwise specified, this value is the name that is given to\nthe function in this specification.\n\n[...]\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Promise.prototype.finally"]}, {"path": "./test262-main/test/built-ins/Promise/prototype/finally/prop-desc.js", "author": " Jordan Harband", "description": " Promise.prototype.finally property descriptor", "esid": " sec-promise.prototype.finally", "info": " |Every other data property described in clauses 18 through 26 and in Annex\nB.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false,\n[[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js"], "features": ["Promise.prototype.finally"]}, {"path": "./test262-main/test/built-ins/Promise/prototype/finally/rejected-observable-then-calls-argument.js", "esid": " sec-catchfinallyfunctions", "description": " >thrower is anonymous built-in function with length of 1 that throws reason.\n", "info": " |Catch Finally Functions\n\n...\n8. Let thrower be equivalent to a function that throws reason.\n9. Return ? Invoke(promise, \"then\", \u00ab thrower \u00bb).\n\nThe \"length\" property of a Catch Finally function is 1.\n", "features": ["Promise.prototype.finally", "Reflect.construct", "class", "arrow-function"], "includes": ["isConstructor.js"], "flags": ["async"]}, {"path": "./test262-main/test/built-ins/Promise/prototype/finally/subclass-species-constructor-reject-count.js", "author": " Jordan Harband", "description": " finally on rejected Promise calls the SpeciesConstructor", "esid": " sec-promise.prototype.finally", "features": ["Promise.prototype.finally"]}, {"path": "./test262-main/test/built-ins/Promise/prototype/finally/subclass-species-constructor-resolve-count.js", "author": " Jordan Harband", "description": " finally on resolved Promise calls the SpeciesConstructor", "esid": " sec-promise.prototype.finally", "features": ["Promise.prototype.finally"]}, {"path": "./test262-main/test/built-ins/Promise/prototype/finally/this-value-non-object.js", "author": " Jordan Harband", "description": " >Promise.prototype.finally called with a non-object-coercible `this` value\n", "esid": " sec-promise.prototype.finally", "features": ["Promise.prototype.finally"]}, {"path": "./test262-main/test/built-ins/Promise/prototype/finally/this-value-proxy.js", "author": " Jordan Harband", "description": " >Promise.prototype.finally called with a non-branded Promise does not throw\n", "esid": " sec-promise.prototype.finally", "features": ["Promise.prototype.finally"]}, {"path": "./test262-main/test/built-ins/Promise/prototype/finally/this-value-then-not-callable.js", "author": " Jordan Harband", "description": " >Promise.prototype.finally called with a `this` value that does not define a\ncallable `then` property\n", "esid": " sec-promise.prototype.finally", "features": ["Symbol", "Promise.prototype.finally"]}, {"path": "./test262-main/test/built-ins/Promise/prototype/finally/this-value-then-poisoned.js", "author": " Jordan Harband", "description": " >Promise.prototype.finally called with a `this` value whose `then` property is\nan accessor property that returns an abrupt completion\n", "esid": " sec-promise.prototype.finally", "features": ["Promise.prototype.finally"]}, {"path": "./test262-main/test/built-ins/Promise/prototype/finally/this-value-then-throws.js", "author": " Jordan Harband", "description": " >Promise.prototype.finally called with a `this` value that defines a `then`\nmethod which returns an abrupt completion.\n", "esid": " sec-promise.prototype.finally", "features": ["Promise.prototype.finally"]}, {"path": "./test262-main/test/built-ins/Promise/prototype/finally/this-value-thenable.js", "esid": " sec-promise.prototype.finally", "description": " >Promise.prototype.finally invoked on thenable returns result of \"then\" call.\n", "features": ["Promise.prototype.finally"]}, {"path": "./test262-main/test/built-ins/Promise/race/invoke-resolve-error-close.js", "description": " >Explicit iterator closing in response to error from `Promise.resolve`\n", "esid": " sec-promise.race", "info": " |[...]\n11. Let result be PerformPromiseRace(iteratorRecord, promiseCapability, C).\n12. If result is an abrupt completion, then\na. If iteratorRecord.[[done]] is false, let result be\nIteratorClose(iterator,result).\nb. IfAbruptRejectPromise(result, promiseCapability).\n\n\n25.4.4.3.1 Runtime Semantics: PerformPromiseRace\n\n1. Repeat\n[...]\nh. Let nextPromise be Invoke(C, \"resolve\", \u00abnextValue\u00bb).\ni. ReturnIfAbrupt(nextPromise).\n", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/built-ins/Promise/race/invoke-then-error-close.js", "description": " >Error thrown when invoking the instance's `then` method (closing iterator)\n", "esid": " sec-promise.race", "info": " |11. Let result be PerformPromiseRace(iteratorRecord, C, promiseCapability).\n12. If result is an abrupt completion,\na. If iteratorRecord.[[done]] is false, let result be\nIteratorClose(iterator, result).\nb. IfAbruptRejectPromise(result, promiseCapability).\n\n[...]\n\n25.4.4.3.1 Runtime Semantics: PerformPromiseRace\n\n1. Repeat\n[...]\nj. Let result be Invoke(nextPromise, \"then\",\n\u00abpromiseCapability.[[Resolve]], promiseCapability.[[Reject]]\u00bb).\nk. ReturnIfAbrupt(result).\n", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/built-ins/Promise/race/invoke-then-get-error-close.js", "description": " >Error thrown when accessing the instance's `then` method (closing iterator)\n", "esid": " sec-promise.race", "info": " |11. Let result be PerformPromiseRace(iteratorRecord, C, promiseCapability).\n12. If result is an abrupt completion,\na. If iteratorRecord.[[done]] is false, let result be\nIteratorClose(iterator, result).\nb. IfAbruptRejectPromise(result, promiseCapability).\n\n[...]\n\n25.4.4.3.1 Runtime Semantics: PerformPromiseRace\n\n1. Repeat\n[...]\nj. Let result be Invoke(nextPromise, \"then\",\n\u00abpromiseCapability.[[Resolve]], promiseCapability.[[Reject]]\u00bb).\nk. ReturnIfAbrupt(result).\n", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/built-ins/Proxy/defineProperty/trap-is-undefined-target-is-proxy.js", "esid": " sec-proxy-object-internal-methods-and-internal-slots-defineownproperty-p-desc", "description": " >If \"defineProperty\" trap is null or undefined, [[DefineOwnProperty]] call\nis properly forwarded to [[ProxyTarget]] (which is also a Proxy object).\n", "info": " |[[DefineOwnProperty]] (P, Desc)\n\n[...]\n5. Let target be O.[[ProxyTarget]].\n6. Let trap be ? GetMethod(handler, \"defineProperty\").\n7. If trap is undefined, then\na. Return ? target.[[DefineOwnProperty]](P, Desc).\n", "features": ["Proxy", "Reflect"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/RegExp/character-class-escape-non-whitespace-u180e.js", "esid": " sec-characterclassescape", "description": " Detect non WhiteSpace using \\S+", "info": " |The production CharacterClassEscape :: S evaluates by returning\nthe set of all characters not included in the set returned by\nCharacterClassEscape :: s\n\nThe Mongolian Vowel Separator (u180e) became a non whitespace character\nsince Unicode 6.3.0\n", "features": ["u180e"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/15.10.6.js", "version": 5, "esid": " 15.10.6", "description": " RegExp.prototype is itself a not RegExp"}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.search/lastindex-no-restore.js", "version": 6, "esid": " 21.2.5.9", "description": " Behavior when some lastIndex writes should be skipped.", "info": " |[...]\n4. Let previousLastIndex be ? Get(rx, \"lastIndex\").\n5. If SameValue(previousLastIndex, 0) is false, then\na. Perform ? Set(rx, \"lastIndex\", 0, true).\n[...]\n7. Let currentLastIndex be ? Get(rx, \"lastIndex\").\n8. If SameValue(currentLastIndex, previousLastIndex) is false, then\na. Perform ? Set(rx, \"lastIndex\", previousLastIndex, true).\n[...]\n", "features": ["Symbol.search"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/global/this-val-regexp-prototype.js", "esid": " sec-get-regexp.prototype.global", "description": " >Return value of `undefined` when the \"this\" value is the RegExp prototype\nobject\n", "info": " |1. Let R be the this value.\n2. If Type(R) is not Object, throw a TypeError exception.\n3. If R does not have an [[OriginalFlags]] internal slot, then\na. If SameValue(R, %RegExpPrototype%) is true, return undefined.\n"}, {"path": "./test262-main/test/built-ins/RegExp/prototype/ignoreCase/this-val-regexp-prototype.js", "esid": " sec-get-regexp.prototype.ignorecase", "description": " >Return value of `undefined` when the \"this\" value is the RegExp prototype\nobject\n", "info": " |1. Let R be the this value.\n2. If Type(R) is not Object, throw a TypeError exception.\n3. If R does not have an [[OriginalFlags]] internal slot, then\na. If SameValue(R, %RegExpPrototype%) is true, return undefined.\n"}, {"path": "./test262-main/test/built-ins/RegExp/prototype/multiline/this-val-regexp-prototype.js", "esid": " sec-get-regexp.prototype.multiline", "description": " >Return value of `undefined` when the \"this\" value is the RegExp prototype\nobject\n", "info": " |1. Let R be the this value.\n2. If Type(R) is not Object, throw a TypeError exception.\n3. If R does not have an [[OriginalFlags]] internal slot, then\na. If SameValue(R, %RegExpPrototype%) is true, return undefined.\n"}, {"path": "./test262-main/test/built-ins/RegExp/prototype/no-regexp-matcher.js", "esid": " sec-properties-of-the-regexp-prototype-object", "description": " >The RegExp prototype object does not have a [[RegExpMatcher]] internal slot\n", "info": " |The RegExp prototype object is an ordinary object. It is not a RegExp\ninstance and does not have a [[RegExpMatcher]] internal slot or any of the\nother internal slots of RegExp instance objects.\n\n21.2.5.2 RegExp.prototype.exec\n\n1. Let R be the this value.\n2. If Type(R) is not Object, throw a TypeError exception.\n3. If R does not have a [[RegExpMatcher]] internal slot, throw a TypeError\nexception.\n"}, {"path": "./test262-main/test/built-ins/RegExp/prototype/sticky/this-val-regexp-prototype.js", "esid": " sec-get-regexp.prototype.sticky", "description": " >Return value of `undefined` when the \"this\" value is the RegExp prototype\nobject\n", "info": " |1. Let R be the this value.\n2. If Type(R) is not Object, throw a TypeError exception.\n3. If R does not have an [[OriginalFlags]] internal slot, then\na. If SameValue(R, %RegExpPrototype%) is true, return undefined.\n"}, {"path": "./test262-main/test/built-ins/RegExp/prototype/unicode/this-val-regexp-prototype.js", "esid": " sec-get-regexp.prototype.unicode", "description": " >Return value of `undefined` when the \"this\" value is the RegExp prototype\nobject\n", "info": " |1. Let R be the this value.\n2. If Type(R) is not Object, throw a TypeError exception.\n3. If R does not have an [[OriginalFlags]] internal slot, then\na. If SameValue(R, %RegExpPrototype%) is true, return undefined.\n"}, {"path": "./test262-main/test/built-ins/RegExp/u180e.js", "esid": " prod-CharacterClassEscape", "description": " >U+180E is no longer a Unicode `Space_Separator` symbol as of Unicode v6.3.0.\n", "info": " |21.2.2.12 CharacterClassEscape\n\n...\n\nThe production CharacterClassEscape::s evaluates as follows:\n\nReturn the set of characters containing the characters that are on the\nright-hand side of the WhiteSpace or LineTerminator productions.\n\nThe production CharacterClassEscape::S evaluates as follows:\n\nReturn the set of all characters not included in the set returned by\nCharacterClassEscape::s .\n", "features": ["u180e"]}, {"path": "./test262-main/test/built-ins/Set/set-iterator-close-after-add-failure.js", "version": 6, "esid": " 23.2.1.1", "description": " >Set ( [ iterable ] )\n\nWhen the Set function is called with optional argument iterable the following steps are taken:\n\n...\n9. Repeat\na. Let next be IteratorStep(iter).\nb. ReturnIfAbrupt(next).\nc. If next is false, return set.\nd. Let nextValue be IteratorValue(next).\ne. ReturnIfAbrupt(nextValue).\nf. Let status be Call(adder, set, \u00abnextValue.[[value]]\u00bb).\ng. If status is an abrupt completion, return IteratorClose(iter, status).\n\n", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/allocation-limit.js", "esid": " sec-sharedarraybuffer-length", "description": " >Throws a RangeError if requested Data Block is too large.\n", "info": " |SharedArrayBuffer( length )\n\n...\n3. Return AllocateSharedArrayBuffer(NewTarget, byteLength).\n\n6.2.7.2 CreateSharedByteDataBlock(size)\n...\n2. Let db be a new Shared Data Block value consisting of size\nbytes. If it is impossible to create such a Shared Data Block,\nthrow a RangeError exception.\n...\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/data-allocation-after-object-creation.js", "esid": " sec-sharedarraybuffer-length", "description": " >The new SharedArrayBuffer instance is created prior to allocating the Data Block.\n", "info": " |SharedArrayBuffer( length )\n\n...\n3. Return AllocateSharedArrayBuffer(NewTarget, byteLength).\n\nAllocateSharedArrayBuffer( constructor, byteLength )\n1. Let obj be ? OrdinaryCreateFromConstructor(constructor, \"%SharedArrayBufferPrototype%\",\n\u00ab[[ArrayBufferData]], [[ArrayBufferByteLength]]\u00bb ).\n...\n3. Let block be ? CreateByteDataBlock(byteLength).\n...\n", "features": ["SharedArrayBuffer", "Reflect.construct"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/init-zero.js", "esid": " sec-createsharedbytedatablock", "description": " All bytes are initialized to zero", "features": ["SharedArrayBuffer", "DataView"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/is-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >The SharedArrayBuffer constructor implements [[Construct]]\n", "info": " |IsConstructor ( argument )\n\nThe abstract operation IsConstructor takes argument argument (an ECMAScript language value).\nIt determines if argument is a function object with a [[Construct]] internal method.\nIt performs the following steps when called:\n\nIf Type(argument) is not Object, return false.\nIf argument has a [[Construct]] internal method, return true.\nReturn false.\n", "includes": ["isConstructor.js"], "features": ["Reflect.construct", "SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/length-is-absent.js", "esid": " sec-sharedarraybuffer-length", "description": " >Returns an empty instance if length is absent\n", "info": " |SharedArrayBuffer( length )\n\n1. If NewTarget is undefined, throw a TypeError exception.\n2. Let byteLength be ? ToIndex(length).\n3. Return ? AllocateSharedArrayBuffer(NewTarget, byteLength).\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/length-is-too-large-throws.js", "esid": " sec-sharedarraybuffer-length", "description": " >Throws a RangeError if length >= 2 ** 53\n", "info": " |SharedArrayBuffer( length )\n\n1. If NewTarget is undefined, throw a TypeError exception.\n2. Let byteLength be ? ToIndex(length).\n\nToIndex( value )\n\n1. If value is undefined, then\na. Let index be 0.\n2. Else,\na. Let integerIndex be ? ToInteger(value).\nb. If integerIndex < 0, throw a RangeError exception.\n...\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/length.js", "esid": " sec-sharedarraybuffer-constructor", "description": " >SharedArrayBuffer.length is 1.\n", "info": " |SharedArrayBuffer( length )\n\nECMAScript Standard Built-in Objects:\n\nEvery built-in function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description. Optional parameters\n(which are indicated with brackets: [ ]) or rest parameters (which\nare shown using the form \u00ab...name\u00bb) are not included in the default\nargument count.\n\nUnless otherwise specified, the length property of a built-in function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/negative-length-throws.js", "esid": " sec-sharedarraybuffer-length", "description": " >Throws a Range Error if length represents an integer < 0\n", "info": " |SharedArrayBuffer( length )\n\n1. If NewTarget is undefined, throw a TypeError exception.\n2. Let byteLength be ? ToIndex(length).\n\nToIndex( value )\n\n1. If value is undefined, then\na. Let index be 0.\n2. Else,\na. Let integerIndex be ? ToInteger(value).\nb. If integerIndex < 0, throw a RangeError exception.\n...\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/newtarget-prototype-is-not-object.js", "esid": " sec-sharedarraybuffer-length", "description": " >[[Prototype]] defaults to %SharedArrayBufferPrototype% if NewTarget.prototype is not an object.\n", "info": " |SharedArrayBuffer( length )\n\nSharedArrayBuffer called with argument length performs the following steps:\n\n...\n3. Return AllocateSharedArrayBuffer(NewTarget, byteLength).\n\nAllocateSharedArrayBuffer( constructor, byteLength )\n1. Let obj be ? OrdinaryCreateFromConstructor(constructor, \"%SharedArrayBufferPrototype%\",\n\u00ab[[ArrayBufferData]], [[ArrayBufferByteLength]]\u00bb ).\n...\n", "features": ["SharedArrayBuffer", "Symbol", "Reflect.construct"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/Symbol.toStringTag.js", "description": " >`Symbol.toStringTag` property descriptor\n", "info": " |The initial value of the @@toStringTag property is the String value\n\"SharedArrayBuffer\".\n\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]:\nfalse, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["SharedArrayBuffer", "Symbol.toStringTag"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/byteLength/invoked-as-accessor.js", "description": " Requires this value to have a [[ArrayBufferData]] internal slot", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/byteLength/invoked-as-func.js", "description": " Throws a TypeError exception when invoked as a function", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/byteLength/length.js", "description": " >get SharedArrayBuffer.prototype.byteLength.length is 0.\n", "includes": ["propertyHelper.js"], "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/byteLength/name.js", "description": " >get SharedArrayBuffer.prototype.byteLength\n\n", "includes": ["propertyHelper.js"], "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/byteLength/prop-desc.js", "description": " >\"byteLength\" property of SharedArrayBuffer.prototype\n", "includes": ["propertyHelper.js"], "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/byteLength/return-bytelength.js", "description": " Return value from [[ByteLength]] internal slot", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/byteLength/this-has-no-typedarrayname-internal.js", "description": " >Throws a TypeError exception when `this` does not have a [[ArrayBufferData]]\ninternal slot\n", "features": ["SharedArrayBuffer", "DataView", "Int8Array"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/byteLength/this-is-arraybuffer.js", "esid": " sec-get-sharedarraybuffer.prototype.bytelength", "description": " Throws a TypeError exception when `this` is an ArrayBuffer", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/byteLength/this-is-not-object.js", "description": " Throws a TypeError exception when `this` is not Object", "features": ["SharedArrayBuffer", "Symbol"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/constructor.js", "description": " >The `SharedArrayBuffer.prototype.constructor` property descriptor.\n", "includes": ["propertyHelper.js"], "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/slice/context-is-not-arraybuffer-object.js", "description": " >Throws a TypeError if `this` does not have an [[ArrayBufferData]] internal slot.\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/slice/context-is-not-object.js", "description": " >Throws a TypeError if `this` is not an Object.\n", "info": " |SharedArrayBuffer.prototype.slice ( start, end )\n", "features": ["SharedArrayBuffer", "Symbol"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/slice/descriptor.js", "description": " >SharedArrayBuffer.prototype.slice has default data property attributes.\n", "info": " |SharedArrayBuffer.prototype.slice ( start, end )\n\n17 ECMAScript Standard Built-in Objects:\nEvery other data property described in clauses 18 through 26 and in\nAnnex B.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false,\n[[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js"], "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/slice/end-default-if-absent.js", "description": " >The `end` index defaults to [[ArrayBufferByteLength]] if absent.\n", "info": " |SharedArrayBuffer.prototype.slice ( start, end )\n\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/slice/end-default-if-undefined.js", "description": " >The `end` index defaults to [[ArrayBufferByteLength]] if undefined.\n", "info": " |SharedArrayBuffer.prototype.slice ( start, end )\n\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/slice/end-exceeds-length.js", "description": " >Large `end` index is clamped to [[ArrayBufferByteLength]].\n", "info": " |SharedArrayBuffer.prototype.slice ( start, end )\n\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/slice/extensible.js", "description": " >SharedArrayBuffer.prototype.slice is extensible.\n", "info": " |SharedArrayBuffer.prototype.slice ( start, end )\n\n17 ECMAScript Standard Built-in Objects:\nUnless specified otherwise, the [[Extensible]] internal slot\nof a built-in object initially has the value true.\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/slice/length.js", "description": " >SharedArrayBuffer.prototype.slice.length is 2.\n", "info": " |SharedArrayBuffer.prototype.slice ( start, end )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/slice/name.js", "description": " >SharedArrayBuffer.prototype.slice.name is \"slice\".\n", "info": " |SharedArrayBuffer.prototype.slice ( start, end )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/slice/negative-end.js", "description": " >Negative `end` index is relative to [[ArrayBufferByteLength]].\n", "info": " |SharedArrayBuffer.prototype.slice ( start, end )\n\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/slice/negative-start.js", "description": " >Negative `start` index is relative to [[ArrayBufferByteLength]].\n", "info": " |SharedArrayBuffer.prototype.slice ( start, end )\n\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/slice/nonconstructor.js", "description": " >SharedArrayBuffer.prototype.slice is not a constructor function.\n", "info": " |SharedArrayBuffer.prototype.slice ( start, end )\n\n17 ECMAScript Standard Built-in Objects:\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified\nin the description of a particular function.\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/slice/not-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >SharedArrayBuffer.prototype.slice does not implement [[Construct]], is not new-able\n", "info": " |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n", "includes": ["isConstructor.js"], "features": ["Reflect.construct", "SharedArrayBuffer", "arrow-function"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/slice/number-conversion.js", "description": " >ToInteger(start) is called before ToInteger(end).\n", "info": " |SharedArrayBuffer.prototype.slice ( start, end )\n\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/slice/species-constructor-is-not-object.js", "description": " >Throws TypeError if `constructor` property is not an object.\n", "info": " |SharedArrayBuffer.prototype.slice ( start, end )\n\n", "features": ["SharedArrayBuffer", "Symbol"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/slice/species-constructor-is-undefined.js", "description": " >Uses default constructor is `constructor` property is undefined.\n", "info": " |SharedArrayBuffer.prototype.slice ( start, end )\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/slice/species-is-not-constructor.js", "description": " >Throws a TypeError if species constructor is not a constructor function.\n", "info": " |SharedArrayBuffer.prototype.slice ( start, end )\n\n", "features": ["SharedArrayBuffer", "Symbol.species"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/slice/species-is-not-object.js", "description": " >Throws a TypeError if species constructor is not an object.\n", "info": " |SharedArrayBuffer.prototype.slice ( start, end )\n\n", "features": ["SharedArrayBuffer", "Symbol.species"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/slice/species-is-null.js", "description": " >Uses default constructor is species constructor is null.\n", "info": " |SharedArrayBuffer.prototype.slice ( start, end )\n\n", "features": ["SharedArrayBuffer", "Symbol.species"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/slice/species-is-undefined.js", "description": " >Uses default constructor is species constructor is undefined.\n", "info": " |SharedArrayBuffer.prototype.slice ( start, end )\n\n", "features": ["SharedArrayBuffer", "Symbol.species"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/slice/species-returns-larger-arraybuffer.js", "description": " >Does not throw TypeError if new SharedArrayBuffer is too large.\n", "info": " |SharedArrayBuffer.prototype.slice ( start, end )\n\n", "features": ["SharedArrayBuffer", "Symbol.species"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/slice/species-returns-not-arraybuffer.js", "description": " >Throws a TypeError if new object is not an SharedArrayBuffer instance.\n", "info": " |SharedArrayBuffer.prototype.slice ( start, end )\n\n", "features": ["SharedArrayBuffer", "Symbol.species"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/slice/species-returns-same-arraybuffer.js", "description": " >Throws a TypeError if species constructor returns `this` value.\n", "info": " |SharedArrayBuffer.prototype.slice ( start, end )\n\n", "features": ["SharedArrayBuffer", "Symbol.species"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/slice/species-returns-smaller-arraybuffer.js", "description": " >Throws a TypeError if new SharedArrayBuffer is too small.\n", "info": " |SharedArrayBuffer.prototype.slice ( start, end )\n\n", "features": ["SharedArrayBuffer", "Symbol.species"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/slice/species.js", "description": " >New SharedArrayBuffer instance is created from SpeciesConstructor.\n", "info": " |SharedArrayBuffer.prototype.slice ( start, end )\n\n", "features": ["SharedArrayBuffer", "Symbol.species"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/slice/start-default-if-absent.js", "description": " >The `start` index defaults to 0 if absent.\n", "info": " |SharedArrayBuffer.prototype.slice ( start, end )\n\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/slice/start-default-if-undefined.js", "description": " >The `start` index defaults to 0 if undefined.\n", "info": " |SharedArrayBuffer.prototype.slice ( start, end )\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/slice/start-exceeds-end.js", "description": " >Returns zero-length buffer if `start` index exceeds `end` index.\n", "info": " |SharedArrayBuffer.prototype.slice ( start, end )\n\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/slice/start-exceeds-length.js", "description": " >Large `start` index is clamped to [[ArrayBufferByteLength]].\n", "info": " |SharedArrayBuffer.prototype.slice ( start, end )\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/slice/this-is-arraybuffer.js", "esid": " sec-sharedarraybuffer.prototype.slice", "description": " >Throws a TypeError if `this` is an ArrayBuffer\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/slice/tointeger-conversion-end.js", "description": " >The `end` index parameter is converted to an integral numeric value.\n", "info": " |SharedArrayBuffer.prototype.slice ( start, end )\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype/slice/tointeger-conversion-start.js", "description": " >The `start` index parameter is converted to an integral numeric value.\n", "info": " |SharedArrayBuffer.prototype.slice ( start, end )\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/prototype-from-newtarget.js", "esid": " sec-sharedarraybuffer-length", "description": " >The [[Prototype]] internal slot is computed from NewTarget.\n", "info": " |SharedArrayBuffer( length )\n\nSharedArrayBuffer called with argument length performs the following steps:\n\n...\n3. Return AllocateSharedArrayBuffer(NewTarget, byteLength).\n\nAllocateSharedArrayBuffer( constructor, byteLength )\n1. Let obj be ? OrdinaryCreateFromConstructor(constructor, \"%SharedArrayBufferPrototype%\",\n\u00ab[[ArrayBufferData]], [[ArrayBufferByteLength]]\u00bb ).\n...\n", "features": ["SharedArrayBuffer", "Reflect.construct"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/return-abrupt-from-length-symbol.js", "esid": " sec-sharedarraybuffer-length", "description": " >Throws a TypeError if length is a symbol\n", "info": " |SharedArrayBuffer( length )\n\n1. If NewTarget is undefined, throw a TypeError exception.\n2. Let byteLength be ? ToIndex(length).\n...\n", "features": ["SharedArrayBuffer", "Symbol"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/return-abrupt-from-length.js", "esid": " sec-sharedarraybuffer-length", "description": " >Return abrupt from ToIndex(length)\n", "info": " |SharedArrayBuffer( length )\n\n1. If NewTarget is undefined, throw a TypeError exception.\n2. Let byteLength be ? ToIndex(length).\n...\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/toindex-length.js", "esid": " sec-sharedarraybuffer-length", "description": " >The `length` parameter is converted to a value numeric index value.\n", "info": " |SharedArrayBuffer( length )\n\n1. If NewTarget is undefined, throw a TypeError exception.\n2. Let byteLength be ? ToIndex(length).\n3. Return ? AllocateSharedArrayBuffer(NewTarget, byteLength).\n\nToIndex( value )\n\n1. If value is undefined, then\na. Let index be 0.\n2. Else,\na. Let integerIndex be ? ToInteger(value).\nb. If integerIndex < 0, throw a RangeError exception.\nc. Let index be ! ToLength(integerIndex).\nd. If SameValueZero(integerIndex, index) is false, throw a RangeError exception.\n3. Return index.\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/undefined-newtarget-throws.js", "esid": " sec-sharedarraybuffer-length", "description": " >Throws a TypeError if SharedArrayBuffer is called as a function.\n", "info": " |SharedArrayBuffer( length )\n\nSharedArrayBuffer called with argument length performs the following steps:\n\n1. If NewTarget is undefined, throw a TypeError exception.\n...\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/SharedArrayBuffer/zero-length.js", "esid": " sec-sharedarraybuffer-length", "description": " >The `length` parameter can be zero.\n", "info": " |SharedArrayBuffer( length )\n\n...\n2. Let numberLength be ToNumber(length).\n3. Let byteLength be ToLength(numberLength).\n4. ReturnIfAbrupt(byteLength).\n5. If SameValueZero(numberLength, byteLength) is false, throw a RangeError exception.\n...\n", "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/String/prototype/indexOf/position-tointeger-toprimitive.js", "description": " String.prototype.indexOf type coercion for position parameter", "esid": " sec-string.prototype.indexof", "info": " |String.prototype.indexOf ( searchString [ , position ] )\n\n4. Let pos be ? ToInteger(position).\n", "features": ["Symbol.toPrimitive", "computed-property-names"]}, {"path": "./test262-main/test/built-ins/String/prototype/indexOf/searchstring-tostring-toprimitive.js", "description": " String.prototype.indexOf type coercion for searchString parameter", "esid": " sec-string.prototype.indexof", "info": " |String.prototype.indexOf ( searchString [ , position ] )\n\n3. Let searchStr be ? ToString(searchString).\n", "features": ["Symbol.toPrimitive", "computed-property-names"]}, {"path": "./test262-main/test/built-ins/String/prototype/split/separator-regexp.js", "esid": " sec-string.prototype.split", "description": " Separator is a regexp", "info": " |String.prototype.split ( separator, limit )\n\nIf separator is neither undefined nor null, then\nLet splitter be ? GetMethod(separator, @@split).\nIf splitter is not undefined, then\nReturn ? Call(splitter, separator, \u00ab O, limit \u00bb).\n\nRegExp.prototype [ @@split ] ( string, limit )\n\nLet C be ? SpeciesConstructor(rx, %RegExp%).\n\n", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/String/prototype/toLocaleLowerCase/Final_Sigma_U180E.js", "esid": " sec-string.prototype.tolocalelowercase", "description": " >Check if String.prototype.toLocaleLowerCase supports conditional mappings defined in SpecialCasings,\ntest Final_Sigma context with Mongolian Vowel Separator\n", "info": " |The result must be derived according to the locale-insensitive case mappings in the Unicode Character\nDatabase (this explicitly includes not only the UnicodeData.txt file, but also all locale-insensitive\nmappings in the SpecialCasings.txt file that accompanies it).\n", "features": ["u180e"]}, {"path": "./test262-main/test/built-ins/String/prototype/toLocaleLowerCase/special_casing_conditional.js", "description": " >Check if String.prototype.toLocaleLowerCase supports conditional mappings defined in SpecialCasings\n", "info": " |The result must be derived according to the locale-insensitive case mappings in the Unicode Character\nDatabase (this explicitly includes not only the UnicodeData.txt file, but also all locale-insensitive\nmappings in the SpecialCasings.txt file that accompanies it).\n", "version": 6, "esid": " 21.1.3.20"}, {"path": "./test262-main/test/built-ins/String/prototype/toLocaleUpperCase/special_casing.js", "description": " >Check if String.prototype.toLocaleUpperCase supports mappings defined in SpecialCasings\n", "info": " |The result must be derived according to the locale-insensitive case mappings in the Unicode Character\nDatabase (this explicitly includes not only the UnicodeData.txt file, but also all locale-insensitive\nmappings in the SpecialCasings.txt file that accompanies it).\n", "version": 6, "esid": " 21.1.3.21"}, {"path": "./test262-main/test/built-ins/String/prototype/toLowerCase/Final_Sigma_U180E.js", "esid": " sec-string.prototype.tolowercase", "description": " >Check if String.prototype.toLowerCase supports conditional mappings defined in SpecialCasings,\ntest Final_Sigma context with Mongolian Vowel Separator\n", "info": " |The result must be derived according to the locale-insensitive case mappings in the Unicode Character\nDatabase (this explicitly includes not only the UnicodeData.txt file, but also all locale-insensitive\nmappings in the SpecialCasings.txt file that accompanies it).\n", "features": ["u180e"]}, {"path": "./test262-main/test/built-ins/String/prototype/toLowerCase/special_casing.js", "description": " >Check if String.prototype.toLowerCase supports mappings defined in SpecialCasings\n", "info": " |The result must be derived according to the locale-insensitive case mappings in the Unicode Character\nDatabase (this explicitly includes not only the UnicodeData.txt file, but also all locale-insensitive\nmappings in the SpecialCasings.txt file that accompanies it).\n", "version": 6, "esid": " 21.1.3.22"}, {"path": "./test262-main/test/built-ins/String/prototype/toLowerCase/special_casing_conditional.js", "description": " >Check if String.prototype.toLowerCase supports conditional mappings defined in SpecialCasings\n", "info": " |The result must be derived according to the locale-insensitive case mappings in the Unicode Character\nDatabase (this explicitly includes not only the UnicodeData.txt file, but also all locale-insensitive\nmappings in the SpecialCasings.txt file that accompanies it).\n", "version": 6, "esid": " 21.1.3.22"}, {"path": "./test262-main/test/built-ins/String/prototype/toUpperCase/special_casing.js", "description": " >Check if String.prototype.toUpperCase supports mappings defined in SpecialCasings\n", "info": " |The result must be derived according to the locale-insensitive case mappings in the Unicode Character\nDatabase (this explicitly includes not only the UnicodeData.txt file, but also all locale-insensitive\nmappings in the SpecialCasings.txt file that accompanies it).\n", "version": 6, "esid": " 21.1.3.24"}, {"path": "./test262-main/test/built-ins/Symbol/asyncIterator/prop-desc.js", "esid": " sec-symbol.asynciterator", "description": " >`Symbol.asyncIterator` property descriptor\n", "info": " |This property has the attributes { [[Writable]]: false, [[Enumerable]]:\nfalse, [[Configurable]]: false }.\n", "includes": ["propertyHelper.js"], "features": ["Symbol.asyncIterator"]}, {"path": "./test262-main/test/built-ins/ThrowTypeError/frozen.js", "esid": " sec-%throwtypeerror%", "description": " >The integrity level of %ThrowTypeError% is \"frozen\".\n", "info": " |%ThrowTypeError% ( )\n\nThe value of the [[Extensible]] internal slot of a %ThrowTypeError%\nfunction is false.\nThe length property of a %ThrowTypeError% function has the attributes\n{ [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\n"}, {"path": "./test262-main/test/built-ins/TypedArray/length.js", "esid": " sec-%typedarray%", "description": " >TypedArray has a \"length\" property whose value is 0.\n", "info": " |%TypedArray% ( )\n\nThe length property of the %TypedArray% constructor function is 0.\n\n17 ECMAScript Standard Built-in Objects\n\n...\n\nUnless otherwise specified, the length property of a built-in function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/fill/fill-values-conversion-once.js", "esid": " sec-%typedarray%.prototype.fill", "description": " >Fills all the elements with non numeric values values.\n", "info": " |22.2.3.8 %TypedArray%.prototype.fill (value [ , start [ , end ] ] )\n\n...\n3. Let _value_ be ? ToNumber(_value_).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/lastIndexOf/tointeger-fromindex.js", "esid": " sec-%typedarray%.prototype.lastindexof", "description": " Return -1 if fromIndex >= ArrayLength - converted values", "info": " |22.2.3.17 %TypedArray%.prototype.lastIndexOf ( searchElement [ , fromIndex ] )\n\n%TypedArray%.prototype.lastIndexOf is a distinct function that implements the\nsame algorithm as Array.prototype.lastIndexOf as defined in 22.1.3.15 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n22.1.3.15 Array.prototype.lastIndexOf ( searchElement [ , fromIndex ] )\n\n...\n4. If argument fromIndex was passed, let n be ? ToInteger(fromIndex); else let\nn be len-1.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/array-arg-negative-integer-offset-throws.js", "esid": " sec-%typedarray%.prototype.set-array-offset", "description": " >Throw a RangeError exception if targetOffset < 0\n", "info": " |22.2.3.23.1 %TypedArray%.prototype.set (array [ , offset ] )\n\n1. Assert: array is any ECMAScript language value other than an Object with a\n[[TypedArrayName]] internal slot. If it is such an Object, the definition in\n22.2.3.23.2 applies.\n...\n6. Let targetOffset be ? ToInteger(offset).\n7. If targetOffset < 0, throw a RangeError exception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/array-arg-primitive-toobject.js", "esid": " sec-%typedarray%.prototype.set-array-offset", "description": " >Primitive `array` argument is coerced to an object.\n", "info": " |%TypedArray%.prototype.set ( typedArray [ , offset ] )\n\n1. Assert: array is any ECMAScript language value other than an Object\nwith a [[TypedArrayName]] internal slot. If it is such an Object,\nthe definition in 22.2.3.23.2 applies.\n[...]\n14. Let src be ? ToObject(array).\n15. Let srcLength be ? LengthOfArrayLike(src).\n[...]\n19. Let limit be targetByteIndex + targetElementSize \u00d7 srcLength.\n20. Repeat, while targetByteIndex < limit,\na. Let Pk be ! ToString(k).\nb. Let value be ? Get(src, Pk).\n[...]\nd. Otherwise, set value to ? ToNumber(value).\n[...]\nf. Perform SetValueInBuffer(targetBuffer, targetByteIndex, targetType, value, true, Unordered).\n[...]\n", "includes": ["testTypedArray.js", "compareArray.js"], "features": ["TypedArray", "Symbol"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/typedarray-arg-negative-integer-offset-throws.js", "esid": " sec-%typedarray%.prototype.set-typedarray-offset", "description": " >Throw a RangeError exception if targetOffset < 0\n", "info": " |22.2.3.23.2 %TypedArray%.prototype.set(typedArray [ , offset ] )\n\n1. Assert: typedArray has a [[TypedArrayName]] internal slot. If it does not,\nthe definition in 22.2.3.23.1 applies.\n...\n6. Let targetOffset be ? ToInteger(offset).\n7. If targetOffset < 0, throw a RangeError exception.\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/typedarray-arg-set-values-diff-buffer-other-type-conversions-sab.js", "esid": " sec-%typedarray%.prototype.set-typedarray-offset", "description": " >Set converted values from different buffer of different types and different type instances\n", "includes": ["byteConversionValues.js", "testTypedArray.js"], "features": ["SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/typedarray-arg-set-values-diff-buffer-other-type-sab.js", "esid": " sec-%typedarray%.prototype.set-typedarray-offset", "description": " >Set values from different instances using the different buffer and different\ntype.\n", "includes": ["testTypedArray.js", "compareArray.js"], "features": ["SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/typedarray-arg-set-values-diff-buffer-same-type-sab.js", "esid": " sec-%typedarray%.prototype.set-typedarray-offset", "description": " >Set values from different instances using the different buffer and same\nconstructor. srcBuffer values are cached.\n", "includes": ["testTypedArray.js", "compareArray.js"], "features": ["SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/typedarray-arg-set-values-same-buffer-same-type-sab.js", "esid": " sec-%typedarray%.prototype.set-typedarray-offset", "description": " >Set values from different instances using the same buffer and same\nconstructor. srcBuffer values are cached.\n", "includes": ["testTypedArray.js", "compareArray.js"], "features": ["SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/typedarray-arg-src-range-greather-than-target-throws-rangeerror.js", "esid": " sec-%typedarray%.prototype.set-typedarray-offset", "description": " >If srcLength + targetOffset > targetLength, throw a RangeError exception.\n", "info": " |22.2.3.23.2 %TypedArray%.prototype.set(typedArray [ , offset ] )\n\n1. Assert: typedArray has a [[TypedArrayName]] internal slot. If it does not,\nthe definition in 22.2.3.23.1 applies.\n...\n6. Let targetOffset be ? ToInteger(offset).\n...\n10. Let targetLength be the value of target's [[ArrayLength]] internal slot.\n...\n20. Let srcLength be the value of typedArray's [[ArrayLength]] internal slot.\n...\n22. If srcLength + targetOffset > targetLength, throw a RangeError exception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/bufferbyteoffset-throws-from-modulo-element-size-sab.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Throws a RangeError if bufferByteLength modulo elementSize \u2260 0\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n\nLet elementSize be the Number value of the Element Size value in Table 56 for constructorName.*\n...\nIf length is either not present or undefined, then\na. If bufferByteLength modulo elementSize \u2260 0, throw a RangeError exception.\n...\n\n* Int8Array, Uint8Array, Uint8ClampedArray all have element size 1, so will never fail.\n\n", "includes": ["testTypedArray.js"], "features": ["SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/byteoffset-is-negative-throws-sab.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Throws a RangeError if ToInteger(byteOffset) is < 0\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n...\n7. Let offset be ? ToInteger(byteOffset).\n8. If offset < 0, throw a RangeError exception.\n...\n", "includes": ["testTypedArray.js"], "features": ["SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/byteoffset-is-negative-throws.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Throws a RangeError if ToInteger(byteOffset) is < 0\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n...\n7. Let offset be ? ToInteger(byteOffset).\n8. If offset < 0, throw a RangeError exception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/byteoffset-is-negative-zero-sab.js", "esid": " pending", "description": " >TypedArray's [[ByteOffset]] internal slot is always a positive number, test with negative zero.\n", "info": " |%TypedArray% ( buffer [ , byteOffset [ , length ] ] )\n\n...\n6. Let offset be ? ToInteger(byteOffset).\n7. If offset < 0, throw a RangeError exception.\n8. If offset is -0, let offset be +0.\n...\n", "includes": ["testTypedArray.js"], "features": ["SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/byteoffset-is-symbol-throws-sab.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Return abrupt from parsing integer value from byteOffset as a symbol\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n...\n7. Let offset be ? ToInteger(byteOffset).\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/byteoffset-throws-from-modulo-element-size-sab.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Throws a RangeError if ToInteger(byteOffset) modulo elementSize is not 0\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n\nLet elementSize be the Number value of the Element Size value in Table 56 for constructorName.*\n\n...\nIf offset modulo elementSize \u2260 0, throw a RangeError exception.\n...\n\n* Int8Array, Uint8Array, Uint8ClampedArray all have element size 1, so will never fail.\n\n", "includes": ["testTypedArray.js"], "features": ["SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/byteoffset-to-number-throws-sab.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Return abrupt from parsing integer value from byteOffset\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n...\n7. Let offset be ? ToInteger(byteOffset).\n...\n", "includes": ["testTypedArray.js"], "features": ["SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/custom-proto-access-throws-sab.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Return abrupt completion getting newTarget's prototype\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n...\n4. Let O be ? AllocateTypedArray(constructorName, NewTarget,\n%TypedArrayPrototype%).\n...\n\n22.2.4.2.1 Runtime Semantics: AllocateTypedArray (constructorName, newTarget,\ndefaultProto [ , length ])\n\n1. Let proto be ? GetPrototypeFromConstructor(newTarget, defaultProto).\n...\n\n9.1.15 GetPrototypeFromConstructor ( constructor, intrinsicDefaultProto )\n\n...\n3. Let proto be ? Get(constructor, \"prototype\").\n...\n", "includes": ["testTypedArray.js"], "features": ["Reflect", "SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/defined-length-and-offset-sab.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Return new typedArray from defined length and offset\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n", "includes": ["testTypedArray.js"], "features": ["SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/defined-length-sab.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Return new typedArray from defined length\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n", "includes": ["testTypedArray.js"], "features": ["SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/defined-negative-length-sab.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Throws RangeError for negative ToInteger(length)\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n", "includes": ["testTypedArray.js"], "features": ["SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/defined-negative-length.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Throws RangeError for negative ToInteger(length)\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/defined-offset-sab.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Return new typedArray from defined offset\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n", "includes": ["testTypedArray.js"], "features": ["SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/excessive-length-throws-sab.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >If offset + newByteLength > bufferByteLength, throw a RangeError exception.\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n...\n14. Else,\na. Let newLength be ? ToLength(length).\nb. Let newByteLength be newLength \u00d7 elementSize.\nc. If offset+newByteLength > bufferByteLength, throw a RangeError exception.\n...\n", "includes": ["testTypedArray.js"], "features": ["SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/excessive-offset-throws-sab.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Throws a RangeError if bufferByteLength - ToInteger(byteOffset) < 0\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n...\n13. If length is undefined, then\na. If bufferByteLength modulo elementSize \u2260 0, throw a RangeError exception.\nb. Let newByteLength be bufferByteLength - offset.\nc. If newByteLength < 0, throw a RangeError exception.\n...\n", "includes": ["testTypedArray.js"], "features": ["SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/invoked-with-undefined-newtarget-sab.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Throws a TypeError if NewTarget is undefined.\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n...\n2. If NewTarget is undefined, throw a TypeError exception.\n...\n", "includes": ["testTypedArray.js"], "features": ["SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/is-referenced-sab.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Reuse buffer argument instead of making a new clone\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n...\n15. Set O's [[ViewedArrayBuffer]] internal slot to buffer.\n...\n", "includes": ["testTypedArray.js"], "features": ["SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/length-access-throws-sab.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Returns abrupt from ToLength(length)\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n...\n14. Else,\na. Let newLength be ? ToLength(length).\n...\n", "includes": ["testTypedArray.js"], "features": ["SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/length-is-symbol-throws-sab.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Throws a TypeError if length is a Symbol\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n...\n14. Else,\na. Let newLength be ? ToLength(length).\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/new-instance-extensibility-sab.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >The new typedArray instance from a buffer argument is extensible\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\n...\n4. Let O be ? AllocateTypedArray(constructorName, NewTarget,\n\"%TypedArrayPrototype%\").\n...\n\n22.2.4.2.1 Runtime Semantics: AllocateTypedArray (constructorName, newTarget,\ndefaultProto [ , length ])\n\n...\n2. Let obj be IntegerIndexedObjectCreate(proto, \u00ab [[ViewedArrayBuffer]],\n[[TypedArrayName]], [[ByteLength]], [[ByteOffset]], [[ArrayLength]] \u00bb).\n...\n\n9.4.5.7 IntegerIndexedObjectCreate (prototype, internalSlotsList)\n\n...\n11. Set the [[Extensible]] internal slot of A to true.\n...\n", "includes": ["testTypedArray.js"], "features": ["SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/returns-new-instance-sab.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Return new typedArray from undefined offset and length\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n", "includes": ["testTypedArray.js"], "features": ["SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/toindex-bytelength-sab.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >ToIndex(length) operations\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n...\n11. If length is either not present or undefined, then\n...\n12. Else,\na. Let newLength be ? ToIndex(length).\n...\n", "includes": ["testTypedArray.js"], "features": ["SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/toindex-byteoffset-sab.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >ToIndex(byteOffset) operations\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n...\n7. Let offset be ? ToIndex(byteOffset).\n8. If offset modulo elementSize \u2260 0, throw a RangeError exception.\n...\n", "includes": ["testTypedArray.js"], "features": ["SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/typedarray-backed-by-sharedarraybuffer.js", "esid": " sec-typedarray-typedarray", "description": " >Passing a SharedArrayBuffer-backed TypedArray to a TypedArray constructor\nproduces an ArrayBuffer-backed TypedArray.\n", "includes": ["testTypedArray.js"], "features": ["SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/use-custom-proto-if-object-sab.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Use prototype from new target if it's an Object\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n...\n4. Let O be ? AllocateTypedArray(constructorName, NewTarget,\n%TypedArrayPrototype%).\n...\n\n22.2.4.2.1 Runtime Semantics: AllocateTypedArray (constructorName, newTarget,\ndefaultProto [ , length ])\n\n1. Let proto be ? GetPrototypeFromConstructor(newTarget, defaultProto).\n2. Let obj be IntegerIndexedObjectCreate (proto, \u00ab[[ViewedArrayBuffer]],\n[[TypedArrayName]], [[ByteLength]], [[ByteOffset]], [[ArrayLength]]\u00bb ).\n...\n\n9.4.5.7 IntegerIndexedObjectCreate (prototype, internalSlotsList)\n\n...\n10. Set the [[Prototype]] internal slot of A to prototype.\n...\n12. Return A.\n", "includes": ["testTypedArray.js"], "features": ["SharedArrayBuffer", "Reflect", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/use-default-proto-if-custom-proto-is-not-object-sab.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Use prototype from %TypedArray% if newTarget's prototype is not an Object\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n...\n4. Let O be ? AllocateTypedArray(constructorName, NewTarget,\n%TypedArrayPrototype%).\n...\n\n22.2.4.2.1 Runtime Semantics: AllocateTypedArray (constructorName, newTarget,\ndefaultProto [ , length ])\n\n1. Let proto be ? GetPrototypeFromConstructor(newTarget, defaultProto).\n2. Let obj be IntegerIndexedObjectCreate (proto, \u00ab[[ViewedArrayBuffer]],\n[[TypedArrayName]], [[ByteLength]], [[ByteOffset]], [[ArrayLength]]\u00bb ).\n...\n\n9.4.5.7 IntegerIndexedObjectCreate (prototype, internalSlotsList)\n\n...\n10. Set the [[Prototype]] internal slot of A to prototype.\n...\n12. Return A.\n", "includes": ["testTypedArray.js"], "features": ["SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/length-arg/is-infinity-throws-rangeerror.js", "esid": " sec-typedarray-length", "description": " >Throws a RangeError if length is a Infinity value\n", "info": " |22.2.4.2 TypedArray ( length )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is not Object.\n\n...\n4. Let numberLength be ? ToNumber(length).\n5. Let elementLength be ToLength(numberLength).\n6. If SameValueZero(numberLength, elementLength) is false, throw a RangeError\nexception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/length-arg/is-negative-integer-throws-rangeerror.js", "esid": " sec-typedarray-length", "description": " >Throws a RangeError if ToInteger(length) is a negative value\n", "info": " |22.2.4.2 TypedArray ( length )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is not Object.\n\n...\n3. Let elementLength be ? ToIndex(length).\n...\n\n7.1.17 ToIndex ( value )\n\n1. If value is undefined, then\n...\n2. Else,\na. Let integerIndex be ? ToInteger(value).\nb. If integerIndex < 0, throw a RangeError exception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/length-arg/toindex-length.js", "esid": " sec-typedarray-length", "description": " >ToIndex(length) operations\n", "info": " |22.2.4.2 TypedArray ( length )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is not Object.\n\n...\n3. Let elementLength be ? ToIndex(length).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/object-arg/length-excessive-throws.js", "esid": " sec-typedarray-object", "description": " >Return abrupt from allocating array buffer with excessive length\n", "info": " |22.2.4.4 TypedArray ( object )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject does not have either a [[TypedArrayName]] or an [[ArrayBufferData]]\ninternal slot.\n\n...\n6. Perform ? AllocateTypedArrayBuffer(O, len).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/Delete/BigInt/indexed-value-sab-non-strict.js", "esid": " sec-integer-indexed-exotic-objects-delete-p", "description": " >Return value from valid numeric index, with SharedArrayBuffer\n", "flags": ["noStrict"], "includes": ["testTypedArray.js"], "features": ["align-detached-buffer-semantics-with-web-reality", "TypedArray", "SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/Delete/BigInt/indexed-value-sab-strict.js", "esid": " sec-integer-indexed-exotic-objects-delete-p", "description": " >Throws TypeError exception in strict mode.\n", "flags": ["onlyStrict"], "includes": ["testTypedArray.js"], "features": ["align-detached-buffer-semantics-with-web-reality", "TypedArray", "SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/Delete/indexed-value-sab-non-strict.js", "esid": " sec-integer-indexed-exotic-objects-delete-p", "description": " >Return value from valid numeric index, with SharedArrayBuffer\n", "flags": ["noStrict"], "includes": ["testTypedArray.js"], "features": ["align-detached-buffer-semantics-with-web-reality", "TypedArray", "SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/Delete/indexed-value-sab-strict.js", "esid": " sec-integer-indexed-exotic-objects-delete-p", "description": " >Throws TypeError exception in strict mode.\n", "flags": ["onlyStrict"], "includes": ["testTypedArray.js"], "features": ["align-detached-buffer-semantics-with-web-reality", "TypedArray", "SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/Get/indexed-value-sab.js", "esid": " sec-integer-indexed-exotic-objects-get-p-receiver", "description": " >Return value from valid numeric index, with SharedArrayBuffer\n", "includes": ["testTypedArray.js"], "features": ["TypedArray", "SharedArrayBuffer"]}, {"path": "./test262-main/test/built-ins/WeakMap/iterator-close-after-set-failure.js", "esid": " sec-weakmap-iterable", "description": " >Return IteratorClose(iter, status) if fail on adding value on constructing.\n", "info": " |WeakMap ( [ iterable ] )\n\n...\n9. Repeat\nk. Let status be Call(adder, map, \u00abk.[[value]], v.[[value]]\u00bb).\nl. If status is an abrupt completion, return IteratorClose(iter, status).\n", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/built-ins/WeakMap/iterator-item-first-entry-returns-abrupt.js", "esid": " sec-weakmap-iterable", "description": " >Closes iterator if item first entry completes abruptly.\n", "info": " |WeakMap ( [ iterable ] )\n\n...\n9. Repeat\n...\nd. Let nextItem be IteratorValue(next).\n...\ng. Let k be Get(nextItem, \"0\").\nh. If k is an abrupt completion, return IteratorClose(iter, k).\n...\n", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/built-ins/WeakMap/iterator-item-second-entry-returns-abrupt.js", "esid": " sec-weakmap-iterable", "description": " >Closes iterator if item second entry completes abruptly.\n", "info": " |WeakMap ( [ iterable ] )\n\n...\n9. Repeat\n...\nd. Let nextItem be IteratorValue(next).\n...\ni. Let v be Get(nextItem, \"1\").\nj. If v is an abrupt completion, return IteratorClose(iter, v).\n...\n", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/built-ins/WeakMap/iterator-items-are-not-object-close-iterator.js", "esid": " sec-weakmap-iterable", "description": " >Closes the iterator object after not object error on next item.\n", "info": " |WeakMap ( [ iterable ] )\n\n...\n9. Repeat\n...\nd. Let nextItem be IteratorValue(next).\ne. ReturnIfAbrupt(nextItem).\nf. If Type(nextItem) is not Object,\ni. Let error be Completion{[[type]]: throw, [[value]]: a newly created\nTypeError object, [[target]]:empty}.\nii. Return IteratorClose(iter, error).\n", "features": [""]}, {"path": "./test262-main/test/built-ins/WeakSet/iterator-close-after-add-failure.js", "esid": " sec-weakset-iterable", "description": " >Return IteratorClose(iter, status) if fail on adding value on constructing.\n", "info": " |WeakSet ( [ iterable ] )\n\n...\n9. Repeat\nf. Let status be Call(adder, set, \u00abnextValue\u00bb).\ng. If status is an abrupt completion, return IteratorClose(iter, status).\n", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/intl402/Collator/default-options-object-prototype.js", "esid": " sec-initializecollator", "description": " >Monkey-patching Object.prototype does not change the default\noptions for Collator as a null prototype is used.\n", "info": " |InitializeCollator ( collator, locales, options )\n\n1. If _options_ is *undefined*, then\n1. Let _options_ be ObjectCreate(*null*).\n"}, {"path": "./test262-main/test/intl402/Collator/prototype/compare/name.js", "esid": " sec-Intl.Collator.prototype.compare", "description": " >get Intl.Collator.prototype.compare.name is \"get compare\".\n", "info": " |10.3.3 get Intl.Collator.prototype.compare\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/Collator/prototype/this-value-collator-prototype.js", "esid": " sec-properties-of-the-intl-collator-prototype-object", "description": " >Tests that Intl.Collator.prototype is not an object that has been\ninitialized as an Intl.Collator.\n"}, {"path": "./test262-main/test/intl402/Collator/this-value-ignored.js", "version": 5, "esid": " 10.1.1_1", "description": " Tests that the this-value is ignored in Collator.", "author": " Norbert Lindenberg", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/constructor-options-throwing-getters.js", "esid": " sec-initializedatetimeformat", "description": " Checks the propagation of exceptions from the options for the DateTimeFormat constructor."}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/format/format-function-length.js", "esid": " sec-intl.datetimeformat.prototype.format", "description": " >The length of the bound DateTime Format function is 1.\n", "info": " |get Intl.DateTimeFormat.prototype.format\n\n...\n4. If dtf.[[BoundFormat]] is undefined, then\na. Let F be a new built-in function object as defined in DateTime Format Functions (12.1.5).\nb. Let bf be BoundFunctionCreate(F, dft, \u00ab \u00bb).\nc. Perform ! DefinePropertyOrThrow(bf, \"length\", PropertyDescriptor {[[Value]]: 1,\n[[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true}).\n...\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/format/name.js", "esid": " sec-Intl.DateTimeFormat.prototype.format", "description": " >get Intl.DateTimeFormat.prototype.format.name is \"get format\".\n", "info": " |12.4.3 get Intl.DateTimeFormat.prototype.format\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/format/time-clip-near-time-boundaries.js", "esid": " sec-partitiondatetimepattern", "description": " |TimeClip is applied when calling Intl.DateTimeFormat.prototype.format.\n", "info": " >12.1.6 PartitionDateTimePattern ( dateTimeFormat, x )\n\n1. Let x be TimeClip(x).\n2. If x is NaN, throw a RangeError exception.\n3. ...\n\n20.3.1.15 TimeClip ( time )\n...\n2. If abs(time) > 8.64 \u00d7 10^15, return NaN.\n...\n\n", "includes": ["dateConstants.js"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/format/time-clip-to-integer.js", "esid": " sec-partitiondatetimepattern", "description": " |TimeClip applies ToInteger on its input value.\n", "info": " >12.1.6 PartitionDateTimePattern ( dateTimeFormat, x )\n\n1. Let x be TimeClip(x).\n2. ...\n\n20.3.1.15 TimeClip ( time )\n...\n3. Let clippedTime be ! ToInteger(time).\n4. If clippedTime is -0, set clippedTime to +0.\n5. Return clippedTime.\n"}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/formatToParts/length.js", "description": " Intl.DateTimeFormat.prototype.formatToParts.length. ", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/formatToParts/time-clip-near-time-boundaries.js", "esid": " sec-partitiondatetimepattern", "description": " |TimeClip is applied when calling Intl.DateTimeFormat.prototype.formatToParts.\n", "info": " >12.1.6 PartitionDateTimePattern ( dateTimeFormat, x )\n\n1. Let x be TimeClip(x).\n2. If x is NaN, throw a RangeError exception.\n3. ...\n\n20.3.1.15 TimeClip ( time )\n...\n2. If abs(time) > 8.64 \u00d7 10^15, return NaN.\n...\n\n", "includes": ["dateConstants.js"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/formatToParts/time-clip-to-integer.js", "esid": " sec-partitiondatetimepattern", "description": " |TimeClip applies ToInteger on its input value.\n", "info": " >12.1.6 PartitionDateTimePattern ( dateTimeFormat, x )\n\n1. Let x be TimeClip(x).\n2. ...\n\n20.3.1.15 TimeClip ( time )\n...\n3. Let clippedTime be ! ToInteger(time).\n4. If clippedTime is -0, set clippedTime to +0.\n5. Return clippedTime.\n"}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/resolvedOptions/hourCycle.js", "esid": " sec-Intl.DateTimeFormat.prototype.resolvedOptions", "description": " >Intl.DateTimeFormat.prototype.resolvedOptions properly\nreflect hourCycle settings.\n", "info": " |12.4.5 Intl.DateTimeFormat.prototype.resolvedOptions()\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/resolvedOptions/order-style.js", "esid": " sec-intl.datetimeformat.prototype.resolvedoptions", "description": " Verifies the property order for the object returned by resolvedOptions().", "includes": ["arrayContains.js"], "features": ["Intl.DateTimeFormat-datetimestyle"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/resolvedOptions/resolved-locale-with-hc-unicode.js", "esid": " sec-Intl.DateTimeFormat.prototype.resolvedOptions", "description": " >The resolved locale doesn't include a hc Unicode extension value if the\nhour12 or hourCycle option is also present.\n", "info": " |12.1.1 InitializeDateTimeFormat(dateTimeFormat, locales, options)\n...\n6. Let hour12 be ? GetOption(options, \"hour12\", \"boolean\", undefined, undefined).\n7. Let hourCycle be ? GetOption(options, \"hourCycle\", \"string\", \u00ab \"h11\", \"h12\", \"h23\", \"h24\" \u00bb, undefined).\n8. If hour12 is not undefined, then\na. Let hourCycle be null.\n9. Set opt.[[hc]] to hourCycle.\n...\n\n9.2.6 ResolveLocale(availableLocales, requestedLocales, options, relevantExtensionKeys, localeData)\n...\n8. For each element key of relevantExtensionKeys in List order, do\n...\ni. If options has a field [[<key>]], then\ni. Let optionsValue be options.[[<key>]].\nii. Assert: Type(optionsValue) is either String, Undefined, or Null.\niii. If keyLocaleData contains optionsValue, then\n1. If SameValue(optionsValue, value) is false, then\na. Let value be optionsValue.\nb. Let supportedExtensionAddition be \"\".\n...\n"}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/this-value-datetimeformat-prototype.js", "esid": " sec-properties-of-intl-datetimeformat-prototype-object", "description": " >Tests that Intl.DateTimeFormat.prototype is not an object that has\nbeen initialized as an Intl.DateTimeFormat.\n", "author": " Roozbeh Pournader"}, {"path": "./test262-main/test/intl402/DateTimeFormat/this-value-ignored.js", "esid": " sec-intl-datetimeformat-constructor", "description": " >Tests that the this-value is ignored in DateTimeFormat, if the this-value\nisn't a DateTimeFormat instance.\n", "author": " Norbert Lindenberg", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/Number/prototype/toLocaleString/default-options-object-prototype.js", "esid": " sec-initializenumberformat", "description": " >Monkey-patching Object.prototype does not change the default\noptions for NumberFormat as a null prototype is used.\n", "info": " |InitializeNumberFormat ( numberFormat, locales, options )\n\n1. If _options_ is *undefined*, then\n1. Let _options_ be ObjectCreate(*null*).\n"}, {"path": "./test262-main/test/intl402/NumberFormat/default-options-object-prototype.js", "esid": " sec-initializenumberformat", "description": " >Monkey-patching Object.prototype does not change the default\noptions for NumberFormat as a null prototype is used.\n", "info": " |InitializeNumberFormat ( numberFormat, locales, options )\n\n1. If _options_ is *undefined*, then\n1. Let _options_ be ObjectCreate(*null*).\n"}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/name.js", "esid": " sec-Intl.NumberFormat.prototype.format", "description": " >get Intl.NumberFormat.prototype.format.name is \"get format\".\n", "info": " |11.4.3 get Intl.NumberFormat.prototype.format\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/formatToParts/default-parameter.js", "esid": " sec-intl.numberformat.prototype.formattoparts", "description": " Intl.NumberFormat.prototype.formatToParts called with no parameters", "info": " |Intl.NumberFormat.prototype.formatToParts ([ value ])\n\n3. If value is not provided, let value be undefined.\n"}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/formatToParts/length.js", "description": " Intl.NumberFormat.prototype.formatToParts.length. ", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/formatToParts/main.js", "description": " Tests for existance and behavior of Intl.NumberFormat.prototype.formatToParts"}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/formatToParts/name.js", "description": " Intl.NumberFormat.prototype.formatToParts.name value and descriptor. ", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/formatToParts/prop-desc.js", "esid": " sec-intl.numberformat.prototype.formattoparts", "description": " >\"formatToParts\" property of Intl.NumberFormat.prototype.\n", "info": " |11.4.4 Intl.NumberFormat.prototype.formatToParts\n\n7 Requirements for Standard Built-in ECMAScript Objects\n\nUnless specified otherwise in this document, the objects, functions, and constructors\ndescribed in this standard are subject to the generic requirements and restrictions\nspecified for standard built-in ECMAScript objects in the ECMAScript 2018 Language\nSpecification, 9th edition, clause 17, or successor.\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery accessor property described in clauses 18 through 26 and in Annex B.2 has the\nattributes { [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\nIf only a get accessor function is described, the set accessor function is the default\nvalue, undefined. If only a set accessor is described the get accessor is the default\nvalue, undefined.\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/formatToParts/value-tonumber.js", "esid": " sec-intl.numberformat.prototype.formattoparts", "description": " >Tests that Intl.NumberFormat.prototype.formatToParts converts\nits argument (called value) to a number using ToNumber (7.1.3).\n", "info": " |11.1.4 Number Format Functions\n\n4. Let x be ? ToNumber(value).\n", "features": ["Symbol"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/this-value-numberformat-prototype.js", "esid": " sec-properties-of-intl-numberformat-prototype-object", "description": " >Tests that Intl.NumberFormat.prototype is not an object that has been\ninitialized as an Intl.NumberFormat.\n", "author": " Roozbeh Pournader"}, {"path": "./test262-main/test/intl402/NumberFormat/significant-digits-options-get-sequence.js", "version": 5, "esid": " 11.1.1_32", "description": " >Tests that the options minimumSignificantDigits and\nmaximumSignificantDigits are read in the right sequence.\n", "author": " Norbert Lindenberg"}, {"path": "./test262-main/test/intl402/NumberFormat/this-value-ignored.js", "esid": " sec-intl-numberformat-constructor", "description": " >Tests that the this-value is ignored in NumberFormat, if the this-value\nisn't a NumberFormat instance.\n", "author": " Norbert Lindenberg", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/PluralRules/builtin.js", "esid": " sec-Intl.PluralRules", "description": " >Tests that Intl.PluralRules meets the requirements for\nbuilt-in objects defined by the introduction of chapter 17 of the\nECMAScript Language Specification.\n", "author": " Zibi Braniecki"}, {"path": "./test262-main/test/intl402/PluralRules/can-be-subclassed.js", "esid": " sec-intl-pluralrules-constructor", "description": " Tests that Intl.PluralRules can be subclassed.", "author": " Zibi Braniecki", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/intl402/PluralRules/constructor-options-throwing-getters.js", "esid": " sec-initializepluralrules", "description": " Checks the propagation of exceptions from the options for the NumberFormat constructor."}, {"path": "./test262-main/test/intl402/PluralRules/default-options-object-prototype.js", "esid": " sec-initializepluralrules", "description": " >Monkey-patching Object.prototype does not change the default\noptions for PluralRules as a null prototype is used.\n", "info": " |InitializePluralRules ( collator, locales, options )\n\n1. If _options_ is *undefined*, then\n1. Let _options_ be ObjectCreate(*null*).\n"}, {"path": "./test262-main/test/intl402/PluralRules/internals.js", "esid": " sec-intl-pluralrules-constructor", "description": " >Tests that objects constructed by Intl.PluralRules have the specified\ninternal properties.\n", "author": " Zibi Braniecki"}, {"path": "./test262-main/test/intl402/PluralRules/length.js", "esid": " sec-Intl.PluralRules", "description": " Intl.PluralRules.length.", "author": " Zibi Braniecki", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/PluralRules/name.js", "esid": " sec-Intl.PluralRules", "description": " Intl.PluralRules.name is \"PluralRules\"", "author": " Zibi Braniecki", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/PluralRules/prop-desc.js", "esid": " sec-Intl.PluralRules", "description": " >\"PluralRules\" property of Intl.\n", "info": " |Intl.PluralRules (...)\n\n7 Requirements for Standard Built-in ECMAScript Objects\n\nUnless specified otherwise in this document, the objects, functions, and constructors\ndescribed in this standard are subject to the generic requirements and restrictions\nspecified for standard built-in ECMAScript objects in the ECMAScript 2018 Language\nSpecification, 9th edition, clause 17, or successor.\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the\nattributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true }\nunless otherwise specified.\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/PluralRules/prototype/bind.js", "esid": " sec-properties-of-intl-pluralrules-prototype-object", "description": " >Tests that Intl.PluralRules.prototype functions throw a TypeError if\ncalled on a non-object value or an object that hasn't been\ninitialized as a PluralRules.\n", "author": " Zibi Braniecki"}, {"path": "./test262-main/test/intl402/PluralRules/prototype/builtins.js", "esid": " sec-properties-of-intl-pluralrules-prototype-object", "description": " >Tests that Intl.PluralRules.prototype meets the requirements for\nbuilt-in objects defined by the introduction of chapter 17 of the\nECMAScript Language Specification.\n", "author": " Zibi Braniecki"}, {"path": "./test262-main/test/intl402/PluralRules/prototype/constructor/main.js", "esid": " sec-Intl.PluralRules.prototype.constructor", "description": " >Tests that Intl.PluralRules.prototype is an object that has been\ninitialized as an Intl.PluralRules.\n", "author": " Zibi Braniecki"}, {"path": "./test262-main/test/intl402/PluralRules/prototype/constructor/prop-desc.js", "esid": " sec-intl.pluralrules.prototype.constructor", "description": " >\"constructor\" property of Intl.PluralRules.prototype.\n", "info": " |Intl.PluralRules.prototype.constructor\n\n7 Requirements for Standard Built-in ECMAScript Objects\n\nUnless specified otherwise in this document, the objects, functions, and constructors\ndescribed in this standard are subject to the generic requirements and restrictions\nspecified for standard built-in ECMAScript objects in the ECMAScript 2018 Language\nSpecification, 9th edition, clause 17, or successor.\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the\nattributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true }\nunless otherwise specified.\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/PluralRules/prototype/properties.js", "esid": " sec-properties-of-intl-pluralrules-prototype-object", "description": " Tests that Intl.PluralRules.prototype has the required attributes.", "author": " Zibi Braniecki", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/PluralRules/prototype/resolvedOptions/builtins.js", "esid": " sec-Intl.PluralRules.prototype.resolvedOptions", "description": " >Tests that Intl.PluralRules.prototype.resolvedOptions meets the requirements for\nbuilt-in objects defined by the introduction of chapter 17 of the\nECMAScript Language Specification.\n", "author": " Zibi Braniecki", "includes": ["isConstructor.js"], "features": ["Reflect.construct"]}, {"path": "./test262-main/test/intl402/PluralRules/prototype/resolvedOptions/length.js", "esid": " sec-intl.pluralrules.prototype.resolvedoptions", "description": " >Intl.PluralRules.prototype.resolvedOptions.length is 0.\n", "info": " |Intl.PluralRules.prototype.resolvedOptions ()\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery built-in function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description. Optional parameters\n(which are indicated with brackets: [ ]) or rest parameters (which\nare shown using the form \u00ab...name\u00bb) are not included in the default\nargument count.\nUnless otherwise specified, the length property of a built-in function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/PluralRules/prototype/resolvedOptions/name.js", "esid": " sec-Intl.PluralRules.resolvedOptions.name", "description": " Intl.PluralRules.resolvedOptions.name is \"resolvedOptions\"", "author": " Zibi Braniecki", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/PluralRules/prototype/resolvedOptions/pluralCategories.js", "esid": " sec-Intl.PluralRules.prototype.resolvedOptions", "description": " >Tests that Intl.PluralRules.prototype.resolvedOptions creates a new array\nfor the pluralCategories property on every call.\n", "includes": ["propertyHelper.js", "compareArray.js"]}, {"path": "./test262-main/test/intl402/PluralRules/prototype/resolvedOptions/prop-desc.js", "esid": " sec-intl.pluralrules.prototype.resolvedoptions", "description": " >\"resolvedOptions\" property of Intl.PluralRules.prototype.\n", "info": " |Intl.PluralRules.prototype.resolvedOptions ()\n\n7 Requirements for Standard Built-in ECMAScript Objects\n\nUnless specified otherwise in this document, the objects, functions, and constructors\ndescribed in this standard are subject to the generic requirements and restrictions\nspecified for standard built-in ECMAScript objects in the ECMAScript 2018 Language\nSpecification, 9th edition, clause 17, or successor.\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the\nattributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true }\nunless otherwise specified.\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/PluralRules/prototype/resolvedOptions/properties.js", "esid": " sec-Intl.PluralRules.prototype.resolvedOptions", "description": " >Tests that the object returned by\nIntl.PluralRules.prototype.resolvedOptionshas the right\nproperties.\n", "author": " Zibi Braniecki", "includes": ["testIntl.js", "propertyHelper.js"]}, {"path": "./test262-main/test/intl402/PluralRules/prototype/select/length.js", "esid": " sec-intl.pluralrules.prototype.select", "description": " >Intl.PluralRules.prototype.select is 1.\n", "info": " |Intl.PluralRules.prototype.select( value )\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery built-in function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description. Optional parameters\n(which are indicated with brackets: [ ]) or rest parameters (which\nare shown using the form \u00ab...name\u00bb) are not included in the default\nargument count.\nUnless otherwise specified, the length property of a built-in function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/PluralRules/prototype/select/name.js", "esid": " sec-Intl.PluralRules.prototype.select", "description": " Intl.PluralRules.prototype.select.name is \"select\"", "author": " Zibi Braniecki", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/PluralRules/prototype/select/non-finite.js", "esid": " sec-Intl.PluralRules.prototype.select", "description": " Tests that select function returns \"other\" for non finite values.", "info": " |1.1.4. ResolvePlural (pluralRules, n)\n(...)\n1.1.4_3. If isFinite(n) is false, then\n1.1.4_3.a. Return \"other\".\n", "author": " Zibi Braniecki"}, {"path": "./test262-main/test/intl402/PluralRules/prototype/select/prop-desc.js", "esid": " sec-intl.pluralrules.prototype.select", "description": " >\"select\" property of Intl.PluralRules.prototype.\n", "info": " |Intl.PluralRules.prototype.select( value )\n\n7 Requirements for Standard Built-in ECMAScript Objects\n\nUnless specified otherwise in this document, the objects, functions, and constructors\ndescribed in this standard are subject to the generic requirements and restrictions\nspecified for standard built-in ECMAScript objects in the ECMAScript 2018 Language\nSpecification, 9th edition, clause 17, or successor.\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the\nattributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true }\nunless otherwise specified.\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/PluralRules/prototype/select/tainting.js", "esid": " sec-intl-pluralrules-abstracts", "description": " >Tests that the behavior of a Record is not affected by\nadversarialchanges to Object.prototype.\n", "info": " |1.1.1. InitializePluralRules (pluralRules, locales, options)\n(...)\n1.1.1_6. Let t be ? GetOption(options, \"type\", \"string\", \u00ab \"cardinal\", \"ordinal\" \u00bb, \"cardinal\").\n", "author": " Zibi Braniecki", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/PluralRules/prototype/toStringTag/toString-changed-tag.js", "esid": " sec-intl.pluralrules.prototype-tostringtag", "description": " >Object.prototype.toString utilizes Intl.PluralRules.prototype[@@toStringTag].\n", "info": " |Object.prototype.toString ( )\n\n[...]\n14. Else, let builtinTag be \"Object\".\n15. Let tag be ? Get(O, @@toStringTag).\n16. If Type(tag) is not String, set tag to builtinTag.\n17. Return the string-concatenation of \"[object \", tag, and \"]\".\n\nIntl.PluralRules.prototype [ @@toStringTag ]\n\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "features": ["Symbol.toStringTag"]}, {"path": "./test262-main/test/intl402/PluralRules/prototype/toStringTag/toString-removed-tag.js", "esid": " sec-intl.pluralrules.prototype-tostringtag", "description": " >Object.prototype.toString doesn't special-case neither Intl.PluralRules instances nor its prototype.\n", "info": " |Object.prototype.toString ( )\n\n[...]\n14. Else, let builtinTag be \"Object\".\n15. Let tag be ? Get(O, @@toStringTag).\n16. If Type(tag) is not String, set tag to builtinTag.\n17. Return the string-concatenation of \"[object \", tag, and \"]\".\n", "features": ["Symbol.toStringTag"]}, {"path": "./test262-main/test/intl402/PluralRules/supportedLocalesOf/arguments.js", "esid": " sec-Intl.PluralRules.supportedLocalesOf", "description": " >Tests that Intl.PluralRules.supportedLocalesOf doesn't access\narguments that it's not given.\n", "author": " Zibi Braniecki", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/PluralRules/supportedLocalesOf/length.js", "esid": " sec-intl.pluralrules.supportedlocalesof", "description": " >Intl.PluralRules.supportedLocalesOf.length is 1.\n", "info": " |Intl.PluralRules.supportedLocalesOf ( locales [ , options ] )\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery built-in function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description. Optional parameters\n(which are indicated with brackets: [ ]) or rest parameters (which\nare shown using the form \u00ab...name\u00bb) are not included in the default\nargument count.\nUnless otherwise specified, the length property of a built-in function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/PluralRules/supportedLocalesOf/main.js", "esid": " sec-Intl.PluralRules.supportedLocalesOf", "description": " >Tests that Intl.PluralRules has a supportedLocalesOf property, and\nit works as planned.\n", "author": " Zibi Braniecki"}, {"path": "./test262-main/test/intl402/PluralRules/supportedLocalesOf/name.js", "esid": " sec-Intl.PluralRules.supportedLocalesOf", "description": " Tests that Intl.PluralRules.supportedLocalesOf.name is \"supportedLocalesOf\"", "author": " Zibi Braniecki", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/PluralRules/supportedLocalesOf/prop-desc.js", "esid": " sec-intl.pluralrules.supportedlocalesof", "description": " >\"supportedLocalesOf\" property of Intl.PluralRules.\n", "info": " |Intl.PluralRules.supportedLocalesOf ( locales [ , options ] )\n\n7 Requirements for Standard Built-in ECMAScript Objects\n\nUnless specified otherwise in this document, the objects, functions, and constructors\ndescribed in this standard are subject to the generic requirements and restrictions\nspecified for standard built-in ECMAScript objects in the ECMAScript 2018 Language\nSpecification, 9th edition, clause 17, or successor.\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the\nattributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true }\nunless otherwise specified.\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/PluralRules/supportedLocalesOf/supportedLocalesOf.js", "esid": " sec-Intl.PluralRules.supportedLocalesOf", "description": " >Tests that Intl.PluralRules.supportedLocalesOf meets the requirements for\nbuilt-in objects defined by the introduction of chapter 17 of the\nECMAScript Language Specification.\n", "author": " Zibi Braniecki", "includes": ["isConstructor.js"], "features": ["Reflect.construct"]}, {"path": "./test262-main/test/intl402/String/prototype/localeCompare/default-options-object-prototype.js", "esid": " sec-initializecollator", "description": " >Monkey-patching Object.prototype does not change the default\noptions for Collator as a null prototype is used.\n", "info": " |InitializeCollator ( collator, locales, options )\n\n1. If _options_ is *undefined*, then\n1. Let _options_ be ObjectCreate(*null*).\n"}, {"path": "./test262-main/test/intl402/String/prototype/toLocaleLowerCase/capital_I_with_dot.js", "description": " >Check if String.prototype.toLocaleLowerCase supports mappings defined in SpecialCasings\n", "info": " |The result must be derived according to the case mappings in the Unicode character database (this explicitly\nincludes not only the UnicodeData.txt file, but also the SpecialCasings.txt file that accompanies it).\n", "version": 6, "esid": " 21.1.3.20"}, {"path": "./test262-main/test/intl402/String/prototype/toLocaleLowerCase/special_casing_Azeri.js", "description": " >Check if String.prototype.toLocaleLowerCase supports language-sensitive mappings defined in SpecialCasings (Azeri)\n", "info": " |The result must be derived according to the case mappings in the Unicode character database (this explicitly\nincludes not only the UnicodeData.txt file, but also the SpecialCasings.txt file that accompanies it).\n", "version": 6, "esid": " 21.1.3.20"}, {"path": "./test262-main/test/intl402/String/prototype/toLocaleLowerCase/special_casing_Lithuanian.js", "description": " >Check if String.prototype.toLocaleLowerCase supports language-sensitive mappings defined in SpecialCasings (Lithuanian)\n", "info": " |The result must be derived according to the case mappings in the Unicode character database (this explicitly\nincludes not only the UnicodeData.txt file, but also the SpecialCasings.txt file that accompanies it).\n", "version": 6, "esid": " 21.1.3.20"}, {"path": "./test262-main/test/intl402/String/prototype/toLocaleLowerCase/special_casing_Turkish.js", "description": " >Check if String.prototype.toLocaleLowerCase supports language-sensitive mappings defined in SpecialCasings (Turkish)\n", "info": " |The result must be derived according to the case mappings in the Unicode character database (this explicitly\nincludes not only the UnicodeData.txt file, but also the SpecialCasings.txt file that accompanies it).\n", "version": 6, "esid": " 21.1.3.20"}, {"path": "./test262-main/test/intl402/String/prototype/toLocaleUpperCase/special_casing_Azeri.js", "description": " >Check if String.prototype.toLocaleUpperCase supports language-sensitive mappings defined in SpecialCasings (Azeri)\n", "info": " |The result must be derived according to the case mappings in the Unicode character database (this explicitly\nincludes not only the UnicodeData.txt file, but also the SpecialCasings.txt file that accompanies it).\n", "version": 6, "esid": " 21.1.3.21"}, {"path": "./test262-main/test/intl402/String/prototype/toLocaleUpperCase/special_casing_Lithuanian.js", "description": " >Check if String.prototype.toLocaleUpperCase supports language-sensitive mappings defined in SpecialCasings (Lithuanian)\n", "info": " |The result must be derived according to the case mappings in the Unicode character database (this explicitly\nincludes not only the UnicodeData.txt file, but also the SpecialCasings.txt file that accompanies it).\n", "version": 6, "esid": " 21.1.3.21"}, {"path": "./test262-main/test/intl402/String/prototype/toLocaleUpperCase/special_casing_Turkish.js", "description": " >Check if String.prototype.toLocaleUpperCase supports language-sensitive mappings defined in SpecialCasings (Turkish)\n", "info": " |The result must be derived according to the case mappings in the Unicode character database (this explicitly\nincludes not only the UnicodeData.txt file, but also the SpecialCasings.txt file that accompanies it).\n", "version": 6, "esid": " 21.1.3.21"}, {"path": "./test262-main/test/language/arguments-object/mapped/mapped-arguments-nonconfigurable-3.js", "info": " Mapped arguments object with non-configurable property", "description": " >Mapping works when property is non-configurable, arguments property\nis changed with [[DefineOwnProperty]].\n", "flags": ["noStrict"]}, {"path": "./test262-main/test/language/arguments-object/mapped/mapped-arguments-nonconfigurable-delete-3.js", "info": " Mapped arguments object with non-configurable property", "description": " >Mapping works when property is non-configurable, arguments property\nwas not deleted. Arguments property is changed with\n[[DefineOwnProperty]].\n", "flags": ["noStrict"]}, {"path": "./test262-main/test/language/arguments-object/mapped/mapped-arguments-nonconfigurable-nonwritable-5.js", "info": " Mapped arguments object with non-configurable property", "description": " >Mapped arguments property is changed to non-configurable and\nnon-writable. Perform property attribute changes with two\n[[DefineOwnProperty]] calls. Add intervening call to\n[[DefineOwnProperty]].\n", "flags": ["noStrict"]}, {"path": "./test262-main/test/language/arguments-object/mapped/mapped-arguments-nonconfigurable-strict-delete-3.js", "info": " Mapped arguments object with non-configurable property", "description": " >Mapping works when property is non-configurable, arguments property\nwas not deleted. [[Delete]] operations throws TypeError if called\nfrom strict-mode code. Arguments property is changed with\n[[DefineOwnProperty]].\n", "flags": ["noStrict"]}, {"path": "./test262-main/test/language/arguments-object/mapped/nonconfigurable-descriptors-define-failure.js", "esid": " sec-arguments-exotic-objects-defineownproperty-p-desc", "description": " >OrdinaryDefineOwnProperty returning `false` doesn't leave `arguments` in a\ncorrupted state, for both mapped and unmapped indices.\n", "info": " |[[DefineOwnProperty]] ( P, Desc )\n\n[...]\n6. Let allowed be ? OrdinaryDefineOwnProperty(args, P, newArgDesc).\n7. If allowed is false, return false.\n", "flags": ["noStrict"]}, {"path": "./test262-main/test/language/arguments-object/mapped/nonconfigurable-descriptors-set-value-with-define-property.js", "description": " Mapped arguments property descriptor change with non-configurable property", "info": " |Mapping keep working when property is set to non-configurable and its\nvalue is changed using [[DefineOwnProperty]].\n", "flags": ["noStrict"], "esid": " sec-arguments-exotic-objects-defineownproperty-p-desc", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/language/arguments-object/mapped/writable-enumerable-configurable-descriptor.js", "esid": " sec-arguments-exotic-objects-defineownproperty-p-desc", "description": " >Index stays mapped when redefined with complete descriptor, which differs only\nby the [[Value]] field. Unmapped index is created.\n", "info": " |[[DefineOwnProperty]] ( P, Desc )\n\n[...]\n6. Let allowed be ? OrdinaryDefineOwnProperty(args, P, newArgDesc).\n7. If allowed is false, return false.\n8. If isMapped is true, then\n[...]\nb. Else,\ni. If Desc.[[Value]] is present, then\n1. Let setStatus be Set(map, P, Desc.[[Value]], false).\n2. Assert: setStatus is true because formal parameters mapped by argument objects are always writable.\n9. Return true.\n", "flags": ["noStrict"]}, {"path": "./test262-main/test/language/comments/hashbang/function-constructor.js", "esid": " pending", "description": " >Hashbang comments should not be allowed in function evaluator contexts.\n", "info": " |HashbangComment::\n#! SingleLineCommentChars[opt]\n", "features": ["hashbang"]}, {"path": "./test262-main/test/language/destructuring/binding/syntax/destructuring-array-parameters-function-arguments-length.js", "esid": " sec-destructuring-binding-patterns-static-semantics-hasinitializer", "description": " >Function.length when ArrayBindingPattern in FormalParameterList\n", "info": " |#sec-function-definitions-static-semantics-expectedargumentcount\n\nStatic Semantics: ExpectedArgumentCount\n\nFormalParameterList : FormalParameter\n\n1. If HasInitializer of FormalParameter is true, return 0.\n2. Return 1.\n\n#sec-destructuring-binding-patterns-static-semantics-hasinitializer\n\nStatic Semantics: HasInitializer\n\nBindingElement : BindingPattern\n\n1. Return false.\n\n", "features": ["destructuring-binding"]}, {"path": "./test262-main/test/language/destructuring/binding/syntax/destructuring-object-parameters-function-arguments-length.js", "esid": " sec-destructuring-binding-patterns-static-semantics-hasinitializer", "description": " >Function.length when ObjectBindingPattern in FormalParameterList\n", "info": " |#sec-function-definitions-static-semantics-expectedargumentcount\n\nStatic Semantics: ExpectedArgumentCount\n\nFormalParameterList : FormalParameter\n\n1. If HasInitializer of FormalParameter is true, return 0.\n2. Return 1.\n\n#sec-destructuring-binding-patterns-static-semantics-hasinitializer\n\nStatic Semantics: HasInitializer\n\nBindingElement : BindingPattern\n\n1. Return false.\n\n", "features": ["destructuring-binding"]}, {"path": "./test262-main/test/language/expressions/array/spread-err-mult-err-obj-unresolvable.js", "description": " Object Spread operator results in error when using an unresolvable reference (Array initializer)", "esid": " sec-runtime-semantics-arrayaccumulation", "features": ["object-spread"], "flags": ["generated"], "info": " |SpreadElement : ...AssignmentExpression\n\n1. Let spreadRef be the result of evaluating AssignmentExpression.\n2. Let spreadObj be ? GetValue(spreadRef).\n3. Let iterator be ? GetIterator(spreadObj).\n4. Repeat\na. Let next be ? IteratorStep(iterator).\nb. If next is false, return nextIndex.\nc. Let nextValue be ? IteratorValue(next).\nd. Let status be CreateDataProperty(array, ToString(ToUint32(nextIndex)),\nnextValue).\ne. Assert: status is true.\nf. Let nextIndex be nextIndex + 1.\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/array/spread-err-sngl-err-obj-unresolvable.js", "description": " Object Spread operator results in error when using an unresolvable reference (Array initializer)", "esid": " sec-runtime-semantics-arrayaccumulation", "features": ["object-spread"], "flags": ["generated"], "info": " |SpreadElement : ...AssignmentExpression\n\n1. Let spreadRef be the result of evaluating AssignmentExpression.\n2. Let spreadObj be ? GetValue(spreadRef).\n3. Let iterator be ? GetIterator(spreadObj).\n4. Repeat\na. Let next be ? IteratorStep(iterator).\nb. If next is false, return nextIndex.\nc. Let nextValue be ? IteratorValue(next).\nd. Let status be CreateDataProperty(array, ToString(ToUint32(nextIndex)),\nnextValue).\ne. Assert: status is true.\nf. Let nextIndex be nextIndex + 1.\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/array/spread-mult-obj-ident.js", "description": " Object Spread operator following other properties (Array initializer)", "esid": " sec-runtime-semantics-arrayaccumulation", "features": ["object-spread"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |SpreadElement : ...AssignmentExpression\n\n1. Let spreadRef be the result of evaluating AssignmentExpression.\n2. Let spreadObj be ? GetValue(spreadRef).\n3. Let iterator be ? GetIterator(spreadObj).\n4. Repeat\na. Let next be ? IteratorStep(iterator).\nb. If next is false, return nextIndex.\nc. Let nextValue be ? IteratorValue(next).\nd. Let status be CreateDataProperty(array, ToString(ToUint32(nextIndex)),\nnextValue).\ne. Assert: status is true.\nf. Let nextIndex be nextIndex + 1.\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/array/spread-mult-obj-null.js", "description": " Object Spread operator following other arguments with null value (Array initializer)", "esid": " sec-runtime-semantics-arrayaccumulation", "features": ["object-spread"], "flags": ["generated"], "info": " |SpreadElement : ...AssignmentExpression\n\n1. Let spreadRef be the result of evaluating AssignmentExpression.\n2. Let spreadObj be ? GetValue(spreadRef).\n3. Let iterator be ? GetIterator(spreadObj).\n4. Repeat\na. Let next be ? IteratorStep(iterator).\nb. If next is false, return nextIndex.\nc. Let nextValue be ? IteratorValue(next).\nd. Let status be CreateDataProperty(array, ToString(ToUint32(nextIndex)),\nnextValue).\ne. Assert: status is true.\nf. Let nextIndex be nextIndex + 1.\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/array/spread-mult-obj-undefined.js", "description": " Object Spread operator following other arguments with undefined (Array initializer)", "esid": " sec-runtime-semantics-arrayaccumulation", "features": ["object-spread"], "flags": ["generated"], "info": " |SpreadElement : ...AssignmentExpression\n\n1. Let spreadRef be the result of evaluating AssignmentExpression.\n2. Let spreadObj be ? GetValue(spreadRef).\n3. Let iterator be ? GetIterator(spreadObj).\n4. Repeat\na. Let next be ? IteratorStep(iterator).\nb. If next is false, return nextIndex.\nc. Let nextValue be ? IteratorValue(next).\nd. Let status be CreateDataProperty(array, ToString(ToUint32(nextIndex)),\nnextValue).\ne. Assert: status is true.\nf. Let nextIndex be nextIndex + 1.\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/array/spread-obj-getter-descriptor.js", "description": " Spread operation with getter results in data property descriptor (Array initializer)", "esid": " sec-runtime-semantics-arrayaccumulation", "features": ["object-spread"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |SpreadElement : ...AssignmentExpression\n\n1. Let spreadRef be the result of evaluating AssignmentExpression.\n2. Let spreadObj be ? GetValue(spreadRef).\n3. Let iterator be ? GetIterator(spreadObj).\n4. Repeat\na. Let next be ? IteratorStep(iterator).\nb. If next is false, return nextIndex.\nc. Let nextValue be ? IteratorValue(next).\nd. Let status be CreateDataProperty(array, ToString(ToUint32(nextIndex)),\nnextValue).\ne. Assert: status is true.\nf. Let nextIndex be nextIndex + 1.\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/array/spread-obj-getter-init.js", "description": " Getter in object literal is not evaluated (Array initializer)", "esid": " sec-runtime-semantics-arrayaccumulation", "features": ["object-spread"], "flags": ["generated"], "info": " |SpreadElement : ...AssignmentExpression\n\n1. Let spreadRef be the result of evaluating AssignmentExpression.\n2. Let spreadObj be ? GetValue(spreadRef).\n3. Let iterator be ? GetIterator(spreadObj).\n4. Repeat\na. Let next be ? IteratorStep(iterator).\nb. If next is false, return nextIndex.\nc. Let nextValue be ? IteratorValue(next).\nd. Let status be CreateDataProperty(array, ToString(ToUint32(nextIndex)),\nnextValue).\ne. Assert: status is true.\nf. Let nextIndex be nextIndex + 1.\n"}, {"path": "./test262-main/test/language/expressions/array/spread-obj-manipulate-outter-obj-in-getter.js", "description": " Getter manipulates outter object before it's spread operation (Array initializer)", "esid": " sec-runtime-semantics-arrayaccumulation", "features": ["object-spread"], "flags": ["generated"], "info": " |SpreadElement : ...AssignmentExpression\n\n1. Let spreadRef be the result of evaluating AssignmentExpression.\n2. Let spreadObj be ? GetValue(spreadRef).\n3. Let iterator be ? GetIterator(spreadObj).\n4. Repeat\na. Let next be ? IteratorStep(iterator).\nb. If next is false, return nextIndex.\nc. Let nextValue be ? IteratorValue(next).\nd. Let status be CreateDataProperty(array, ToString(ToUint32(nextIndex)),\nnextValue).\ne. Assert: status is true.\nf. Let nextIndex be nextIndex + 1.\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/array/spread-obj-mult-spread-getter.js", "description": " Multiple Object Spread usage calls getter multiple times (Array initializer)", "esid": " sec-runtime-semantics-arrayaccumulation", "features": ["object-spread"], "flags": ["generated"], "info": " |SpreadElement : ...AssignmentExpression\n\n1. Let spreadRef be the result of evaluating AssignmentExpression.\n2. Let spreadObj be ? GetValue(spreadRef).\n3. Let iterator be ? GetIterator(spreadObj).\n4. Repeat\na. Let next be ? IteratorStep(iterator).\nb. If next is false, return nextIndex.\nc. Let nextValue be ? IteratorValue(next).\nd. Let status be CreateDataProperty(array, ToString(ToUint32(nextIndex)),\nnextValue).\ne. Assert: status is true.\nf. Let nextIndex be nextIndex + 1.\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/array/spread-obj-mult-spread.js", "description": " Multiple Object Spread operation (Array initializer)", "esid": " sec-runtime-semantics-arrayaccumulation", "features": ["object-spread"], "flags": ["generated"], "info": " |SpreadElement : ...AssignmentExpression\n\n1. Let spreadRef be the result of evaluating AssignmentExpression.\n2. Let spreadObj be ? GetValue(spreadRef).\n3. Let iterator be ? GetIterator(spreadObj).\n4. Repeat\na. Let next be ? IteratorStep(iterator).\nb. If next is false, return nextIndex.\nc. Let nextValue be ? IteratorValue(next).\nd. Let status be CreateDataProperty(array, ToString(ToUint32(nextIndex)),\nnextValue).\ne. Assert: status is true.\nf. Let nextIndex be nextIndex + 1.\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/array/spread-obj-null.js", "description": " Null Object Spread is ignored (Array initializer)", "esid": " sec-runtime-semantics-arrayaccumulation", "features": ["object-spread"], "flags": ["generated"], "info": " |SpreadElement : ...AssignmentExpression\n\n1. Let spreadRef be the result of evaluating AssignmentExpression.\n2. Let spreadObj be ? GetValue(spreadRef).\n3. Let iterator be ? GetIterator(spreadObj).\n4. Repeat\na. Let next be ? IteratorStep(iterator).\nb. If next is false, return nextIndex.\nc. Let nextValue be ? IteratorValue(next).\nd. Let status be CreateDataProperty(array, ToString(ToUint32(nextIndex)),\nnextValue).\ne. Assert: status is true.\nf. Let nextIndex be nextIndex + 1.\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/array/spread-obj-override-immutable.js", "description": " Object Spread overriding immutable properties (Array initializer)", "esid": " sec-runtime-semantics-arrayaccumulation", "features": ["object-spread"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |SpreadElement : ...AssignmentExpression\n\n1. Let spreadRef be the result of evaluating AssignmentExpression.\n2. Let spreadObj be ? GetValue(spreadRef).\n3. Let iterator be ? GetIterator(spreadObj).\n4. Repeat\na. Let next be ? IteratorStep(iterator).\nb. If next is false, return nextIndex.\nc. Let nextValue be ? IteratorValue(next).\nd. Let status be CreateDataProperty(array, ToString(ToUint32(nextIndex)),\nnextValue).\ne. Assert: status is true.\nf. Let nextIndex be nextIndex + 1.\n"}, {"path": "./test262-main/test/language/expressions/array/spread-obj-overrides-prev-properties.js", "description": " Object Spread properties overrides previous definitions (Array initializer)", "esid": " sec-runtime-semantics-arrayaccumulation", "features": ["object-spread"], "flags": ["generated"], "info": " |SpreadElement : ...AssignmentExpression\n\n1. Let spreadRef be the result of evaluating AssignmentExpression.\n2. Let spreadObj be ? GetValue(spreadRef).\n3. Let iterator be ? GetIterator(spreadObj).\n4. Repeat\na. Let next be ? IteratorStep(iterator).\nb. If next is false, return nextIndex.\nc. Let nextValue be ? IteratorValue(next).\nd. Let status be CreateDataProperty(array, ToString(ToUint32(nextIndex)),\nnextValue).\ne. Assert: status is true.\nf. Let nextIndex be nextIndex + 1.\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/array/spread-obj-skip-non-enumerable.js", "description": " Object Spread doesn't copy non-enumerable properties (Array initializer)", "esid": " sec-runtime-semantics-arrayaccumulation", "features": ["object-spread"], "flags": ["generated"], "info": " |SpreadElement : ...AssignmentExpression\n\n1. Let spreadRef be the result of evaluating AssignmentExpression.\n2. Let spreadObj be ? GetValue(spreadRef).\n3. Let iterator be ? GetIterator(spreadObj).\n4. Repeat\na. Let next be ? IteratorStep(iterator).\nb. If next is false, return nextIndex.\nc. Let nextValue be ? IteratorValue(next).\nd. Let status be CreateDataProperty(array, ToString(ToUint32(nextIndex)),\nnextValue).\ne. Assert: status is true.\nf. Let nextIndex be nextIndex + 1.\n"}, {"path": "./test262-main/test/language/expressions/array/spread-obj-spread-order.js", "description": " Spread operation follows [[OwnPropertyKeys]] order (Array initializer)", "esid": " sec-runtime-semantics-arrayaccumulation", "features": ["Symbol", "object-spread"], "flags": ["generated"], "includes": ["compareArray.js"], "info": " |SpreadElement : ...AssignmentExpression\n\n1. Let spreadRef be the result of evaluating AssignmentExpression.\n2. Let spreadObj be ? GetValue(spreadRef).\n3. Let iterator be ? GetIterator(spreadObj).\n4. Repeat\na. Let next be ? IteratorStep(iterator).\nb. If next is false, return nextIndex.\nc. Let nextValue be ? IteratorValue(next).\nd. Let status be CreateDataProperty(array, ToString(ToUint32(nextIndex)),\nnextValue).\ne. Assert: status is true.\nf. Let nextIndex be nextIndex + 1.\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/array/spread-obj-symbol-property.js", "description": " Spread operation where source object contains Symbol properties (Array initializer)", "esid": " sec-runtime-semantics-arrayaccumulation", "features": ["Symbol", "object-spread"], "flags": ["generated"], "info": " |SpreadElement : ...AssignmentExpression\n\n1. Let spreadRef be the result of evaluating AssignmentExpression.\n2. Let spreadObj be ? GetValue(spreadRef).\n3. Let iterator be ? GetIterator(spreadObj).\n4. Repeat\na. Let next be ? IteratorStep(iterator).\nb. If next is false, return nextIndex.\nc. Let nextValue be ? IteratorValue(next).\nd. Let status be CreateDataProperty(array, ToString(ToUint32(nextIndex)),\nnextValue).\ne. Assert: status is true.\nf. Let nextIndex be nextIndex + 1.\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/array/spread-obj-undefined.js", "description": " Undefined Object Spread is ignored (Array initializer)", "esid": " sec-runtime-semantics-arrayaccumulation", "features": ["object-spread"], "flags": ["generated"], "info": " |SpreadElement : ...AssignmentExpression\n\n1. Let spreadRef be the result of evaluating AssignmentExpression.\n2. Let spreadObj be ? GetValue(spreadRef).\n3. Let iterator be ? GetIterator(spreadObj).\n4. Repeat\na. Let next be ? IteratorStep(iterator).\nb. If next is false, return nextIndex.\nc. Let nextValue be ? IteratorValue(next).\nd. Let status be CreateDataProperty(array, ToString(ToUint32(nextIndex)),\nnextValue).\ne. Assert: status is true.\nf. Let nextIndex be nextIndex + 1.\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/array/spread-obj-with-overrides.js", "description": " Object Spread properties being overriden (Array initializer)", "esid": " sec-runtime-semantics-arrayaccumulation", "features": ["Symbol", "object-spread"], "flags": ["generated"], "info": " |SpreadElement : ...AssignmentExpression\n\n1. Let spreadRef be the result of evaluating AssignmentExpression.\n2. Let spreadObj be ? GetValue(spreadRef).\n3. Let iterator be ? GetIterator(spreadObj).\n4. Repeat\na. Let next be ? IteratorStep(iterator).\nb. If next is false, return nextIndex.\nc. Let nextValue be ? IteratorValue(next).\nd. Let status be CreateDataProperty(array, ToString(ToUint32(nextIndex)),\nnextValue).\ne. Assert: status is true.\nf. Let nextIndex be nextIndex + 1.\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/array/spread-sngl-obj-ident.js", "description": " Object Spread operator without other arguments (Array initializer)", "esid": " sec-runtime-semantics-arrayaccumulation", "features": ["object-spread"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |SpreadElement : ...AssignmentExpression\n\n1. Let spreadRef be the result of evaluating AssignmentExpression.\n2. Let spreadObj be ? GetValue(spreadRef).\n3. Let iterator be ? GetIterator(spreadObj).\n4. Repeat\na. Let next be ? IteratorStep(iterator).\nb. If next is false, return nextIndex.\nc. Let nextValue be ? IteratorValue(next).\nd. Let status be CreateDataProperty(array, ToString(ToUint32(nextIndex)),\nnextValue).\ne. Assert: status is true.\nf. Let nextIndex be nextIndex + 1.\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/ArrowFunction_restricted-properties.js", "description": " >Functions created using ArrowFunction syntactic form do not have\nown properties \"caller\" or \"arguments\", but inherit them from\n%FunctionPrototype%.\n", "version": 6, "esid": " 16.1"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/ary-init-iter-close.js", "description": " Iterator is closed when not exhausted by pattern evaluation (arrow function expression)", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n[...]\n4. If iteratorRecord.[[done]] is false, return ? IteratorClose(iterator,\nresult).\n[...]\n\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/ary-ptrn-elem-id-init-fn-name-arrow.js", "description": " SingleNameBinding does assign name to arrow functions (arrow function expression)", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/ary-ptrn-elem-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (arrow function expression)", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/ary-ptrn-elem-id-init-fn-name-cover.js", "description": " SingleNameBinding does assign name to \"anonymous\" functions \"through\" cover grammar (arrow function expression)", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/ary-ptrn-elem-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (arrow function expression)", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/ary-ptrn-elem-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (arrow function expression)", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/dflt-ary-init-iter-close.js", "description": " Iterator is closed when not exhausted by pattern evaluation (arrow function expression (default parameter))", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n[...]\n4. If iteratorRecord.[[done]] is false, return ? IteratorClose(iterator,\nresult).\n[...]\n\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/dflt-ary-ptrn-elem-id-init-fn-name-arrow.js", "description": " SingleNameBinding does assign name to arrow functions (arrow function expression (default parameter))", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/dflt-ary-ptrn-elem-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (arrow function expression (default parameter))", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/dflt-ary-ptrn-elem-id-init-fn-name-cover.js", "description": " SingleNameBinding does assign name to \"anonymous\" functions \"through\" cover grammar (arrow function expression (default parameter))", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/dflt-ary-ptrn-elem-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (arrow function expression (default parameter))", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/dflt-ary-ptrn-elem-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (arrow function expression (default parameter))", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/dflt-obj-ptrn-id-init-fn-name-arrow.js", "description": " SingleNameBinding assigns `name` to arrow functions (arrow function expression (default parameter))", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/dflt-obj-ptrn-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (arrow function expression (default parameter))", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/dflt-obj-ptrn-id-init-fn-name-cover.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" functions \"through\" cover grammar (arrow function expression (default parameter))", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/dflt-obj-ptrn-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (arrow function expression (default parameter))", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/dflt-obj-ptrn-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (arrow function expression (default parameter))", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/dflt-obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (arrow function expression (default parameter))", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/dflt-obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (arrow function expression (default parameter))", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/dflt-obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (arrow function expression (default parameter))", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/obj-ptrn-id-init-fn-name-arrow.js", "description": " SingleNameBinding assigns `name` to arrow functions (arrow function expression)", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/obj-ptrn-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (arrow function expression)", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/obj-ptrn-id-init-fn-name-cover.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" functions \"through\" cover grammar (arrow function expression)", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/obj-ptrn-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (arrow function expression)", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/obj-ptrn-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (arrow function expression)", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (arrow function expression)", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (arrow function expression)", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (arrow function expression)", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-elem-init-fn-name-arrow.js", "description": " Assignment of function `name` attribute (ArrowFunction) (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nAssignmentElement[Yield] : DestructuringAssignmentTarget Initializeropt\n[...] 7. If Initializer is present and value is undefined and\nIsAnonymousFunctionDefinition(Initializer) and IsIdentifierRef of\nDestructuringAssignmentTarget are both true, then\na. Let hasNameProperty be HasOwnProperty(v, \"name\").\nb. ReturnIfAbrupt(hasNameProperty).\nc. If hasNameProperty is false, perform SetFunctionName(v,\nGetReferencedName(lref)).\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-elem-init-fn-name-class.js", "description": " Assignment of function `name` attribute (ClassExpression) (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["class", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nAssignmentElement[Yield] : DestructuringAssignmentTarget Initializeropt\n[...] 7. If Initializer is present and value is undefined and\nIsAnonymousFunctionDefinition(Initializer) and IsIdentifierRef of\nDestructuringAssignmentTarget are both true, then\na. Let hasNameProperty be HasOwnProperty(v, \"name\").\nb. ReturnIfAbrupt(hasNameProperty).\nc. If hasNameProperty is false, perform SetFunctionName(v,\nGetReferencedName(lref)).\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-elem-init-fn-name-cover.js", "description": " Assignment of function `name` attribute (CoverParenthesizedExpression) (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nAssignmentElement[Yield] : DestructuringAssignmentTarget Initializeropt\n[...] 7. If Initializer is present and value is undefined and\nIsAnonymousFunctionDefinition(Initializer) and IsIdentifierRef of\nDestructuringAssignmentTarget are both true, then\na. Let hasNameProperty be HasOwnProperty(v, \"name\").\nb. ReturnIfAbrupt(hasNameProperty).\nc. If hasNameProperty is false, perform SetFunctionName(v,\nGetReferencedName(lref)).\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-elem-init-fn-name-fn.js", "description": " Assignment of function `name` attribute (FunctionExpression) (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["class", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nAssignmentElement[Yield] : DestructuringAssignmentTarget Initializeropt\n[...] 7. If Initializer is present and value is undefined and\nIsAnonymousFunctionDefinition(Initializer) and IsIdentifierRef of\nDestructuringAssignmentTarget are both true, then\na. Let hasNameProperty be HasOwnProperty(v, \"name\").\nb. ReturnIfAbrupt(hasNameProperty).\nc. If hasNameProperty is false, perform SetFunctionName(v,\nGetReferencedName(lref)).\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-elem-init-fn-name-gen.js", "description": " Assignment of function `name` attribute (GeneratorExpression) (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nAssignmentElement[Yield] : DestructuringAssignmentTarget Initializeropt\n[...] 7. If Initializer is present and value is undefined and\nIsAnonymousFunctionDefinition(Initializer) and IsIdentifierRef of\nDestructuringAssignmentTarget are both true, then\na. Let hasNameProperty be HasOwnProperty(v, \"name\").\nb. ReturnIfAbrupt(hasNameProperty).\nc. If hasNameProperty is false, perform SetFunctionName(v,\nGetReferencedName(lref)).\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-elem-iter-nrml-close-err.js", "description": " Abrupt completion returned from IteratorClose (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nArrayAssignmentPattern : [ AssignmentElementList ]\n\n[...]\n5. If iteratorRecord.[[done]] is false, return IteratorClose(iterator, result).\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-elem-iter-nrml-close-null.js", "description": " IteratorClose throws a TypeError when `return` returns a non-Object value (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nArrayAssignmentPattern : [ AssignmentElementList ]\n\n[...]\n5. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nresult).\n6. Return result.\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n7. If completion.[[type]] is throw, return Completion(completion).\n8. If innerResult.[[type]] is throw, return Completion(innerResult).\n9. If Type(innerResult.[[value]]) is not Object, throw a TypeError\nexception.\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-elem-iter-nrml-close.js", "description": " IteratorClose is called when assignment evaluation has not exhausted the iterator (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nArrayAssignmentPattern : [ AssignmentElementList ]\n\n[...]\n5. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nresult).\n6. Return result.\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n[...]\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-elem-iter-rtrn-close-err.js", "description": " IteratorClose is called when reference evaluation produces a \"return\" completion (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nArrayAssignmentPattern : [ AssignmentElementList ]\n\n[...]\n5. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nresult).\n6. Return result.\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n7. If completion.[[type]] is throw, return Completion(completion).\n8. If innerResult.[[type]] is throw, return Completion(innerResult).\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-elem-iter-rtrn-close-null.js", "description": " IteratorClose throws a TypeError when `return` returns a non-Object value (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nArrayAssignmentPattern : [ AssignmentElementList ]\n\n[...]\n5. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nresult).\n6. Return result.\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n7. If completion.[[type]] is throw, return Completion(completion).\n8. If innerResult.[[type]] is throw, return Completion(innerResult).\n9. If Type(innerResult.[[value]]) is not Object, throw a TypeError\nexception.\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-elem-iter-rtrn-close.js", "description": " IteratorClose is called when reference evaluation produces a \"return\" completion (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nArrayAssignmentPattern : [ AssignmentElementList ]\n\n[...]\n5. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nresult).\n6. Return result.\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n7. If completion.[[type]] is throw, return Completion(completion).\n8. If innerResult.[[type]] is throw, return Completion(innerResult).\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-elem-iter-thrw-close-err.js", "description": " IteratorClose is called when reference evaluation produces a \"throw\" completion (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nArrayAssignmentPattern : [ AssignmentElementList ]\n\n[...]\n5. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nresult).\n6. Return result.\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-elem-iter-thrw-close.js", "description": " IteratorClose is called when reference evaluation produces a \"throw\" completion (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nArrayAssignmentPattern : [ AssignmentElementList ]\n\n[...]\n5. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nresult).\n6. Return result.\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n[...]\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-elem-trlg-iter-elision-iter-nrml-close-err.js", "description": " Abrupt completion returned from IteratorClose (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nArrayAssignmentPattern :\n[ AssignmentElementList , Elisionopt AssignmentRestElementopt ]\n\n[...]\n6. If Elision is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with\niteratorRecord as the argument.\nb. If status is an abrupt completion, then\n[...]\n8. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nstatus).\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-elem-trlg-iter-elision-iter-nrml-close-null.js", "description": " IteratorClose throws a TypeError when `return` returns a non-Object value (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nArrayAssignmentPattern :\n[ AssignmentElementList , Elisionopt AssignmentRestElementopt ]\n\n[...]\n6. If Elision is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with\niteratorRecord as the argument.\nb. If status is an abrupt completion, then\n[...]\n8. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nstatus).\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n7. If completion.[[type]] is throw, return Completion(completion).\n8. If innerResult.[[type]] is throw, return Completion(innerResult).\n9. If Type(innerResult.[[value]]) is not Object, throw a TypeError\nexception.\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-elem-trlg-iter-elision-iter-nrml-close.js", "description": " IteratorClose invoked when elision does not exhaust the iterator (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nArrayAssignmentPattern :\n[ AssignmentElementList , Elisionopt AssignmentRestElementopt ]\n\n[...]\n6. If Elision is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with\niteratorRecord as the argument.\nb. If status is an abrupt completion, then\n[...]\n8. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nstatus).\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n[...]\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-elem-trlg-iter-list-nrml-close-err.js", "description": " Abrupt completion returned from IteratorClose (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nArrayAssignmentPattern :\n[ AssignmentElementList , Elisionopt AssignmentRestElementopt ]\n\n[...]\n3. Let iteratorRecord be Record {[[iterator]]: iterator, [[done]]: false}.\n4. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentElementList using\niteratorRecord as the argument.\n5. If status is an abrupt completion, then\na. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nstatus).\nb. Return Completion(status).\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-elem-trlg-iter-list-nrml-close-null.js", "description": " IteratorClose throws a TypeError when `return` returns a non-Object value (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nArrayAssignmentPattern :\n[ AssignmentElementList , Elisionopt AssignmentRestElementopt ]\n\n[...]\n3. Let iteratorRecord be Record {[[iterator]]: iterator, [[done]]: false}.\n4. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentElementList using\niteratorRecord as the argument.\n5. If status is an abrupt completion, then\na. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nstatus).\nb. Return Completion(status).\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n7. If completion.[[type]] is throw, return Completion(completion).\n8. If innerResult.[[type]] is throw, return Completion(innerResult).\n9. If Type(innerResult.[[value]]) is not Object, throw a TypeError\nexception.\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-elem-trlg-iter-list-nrml-close.js", "description": " IteratorClose is invoked when evaluation of AssignmentElementList completes without exhausting the iterator (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nArrayAssignmentPattern :\n[ AssignmentElementList , Elisionopt AssignmentRestElementopt ]\n\n[...]\n3. Let iteratorRecord be Record {[[iterator]]: iterator, [[done]]: false}.\n4. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentElementList using\niteratorRecord as the argument.\n5. If status is an abrupt completion, then\na. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nstatus).\nb. Return Completion(status).\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n[...]\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-elem-trlg-iter-list-rtrn-close-err.js", "description": " IteratorClose is invoked when evaluation of AssignmentElementList returns a \"return\" completion and the iterator has not been marked as \"done\" (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nArrayAssignmentPattern :\n[ AssignmentElementList , Elisionopt AssignmentRestElementopt ]\n\n[...]\n3. Let iteratorRecord be Record {[[iterator]]: iterator, [[done]]: false}.\n4. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentElementList using\niteratorRecord as the argument.\n5. If status is an abrupt completion, then\na. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nstatus).\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n7. If completion.[[type]] is throw, return Completion(completion).\n8. If innerResult.[[type]] is throw, return Completion(innerResult).\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-elem-trlg-iter-list-rtrn-close-null.js", "description": " IteratorClose throws a TypeError when `return` returns a non-Object value (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nArrayAssignmentPattern :\n[ AssignmentElementList , Elisionopt AssignmentRestElementopt ]\n\n[...]\n3. Let iteratorRecord be Record {[[iterator]]: iterator, [[done]]: false}.\n4. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentElementList using\niteratorRecord as the argument.\n5. If status is an abrupt completion, then\na. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nstatus).\nb. Return Completion(status).\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n7. If completion.[[type]] is throw, return Completion(completion).\n8. If innerResult.[[type]] is throw, return Completion(innerResult).\n9. If Type(innerResult.[[value]]) is not Object, throw a TypeError\nexception.\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-elem-trlg-iter-list-rtrn-close.js", "description": " IteratorClose is invoked when evaluation of AssignmentElementList returns a \"return\" completion and the iterator has not been marked as \"done\" (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nArrayAssignmentPattern :\n[ AssignmentElementList , Elisionopt AssignmentRestElementopt ]\n\n[...]\n3. Let iteratorRecord be Record {[[iterator]]: iterator, [[done]]: false}.\n4. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentElementList using\niteratorRecord as the argument.\n5. If status is an abrupt completion, then\na. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nstatus).\nb. Return Completion(status).\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n7. If completion.[[type]] is throw, return Completion(completion).\n8. If innerResult.[[type]] is throw, return Completion(innerResult).\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-elem-trlg-iter-list-thrw-close-err.js", "description": " IteratorClose is invoked when evaluation of AssignmentElementList returns a \"throw\" completion and the iterator has not been marked as \"done\" (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nArrayAssignmentPattern :\n[ AssignmentElementList , Elisionopt AssignmentRestElementopt ]\n\n[...]\n3. Let iteratorRecord be Record {[[iterator]]: iterator, [[done]]: false}.\n4. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentElementList using\niteratorRecord as the argument.\n5. If status is an abrupt completion, then\na. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nstatus).\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n7. If completion.[[type]] is throw, return Completion(completion).\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-elem-trlg-iter-list-thrw-close.js", "description": " IteratorClose is invoked when evaluation of AssignmentElementList returns a \"throw\" completion and the iterator has not been marked as \"done\" (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nArrayAssignmentPattern :\n[ AssignmentElementList , Elisionopt AssignmentRestElementopt ]\n\n[...]\n3. Let iteratorRecord be Record {[[iterator]]: iterator, [[done]]: false}.\n4. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentElementList using\niteratorRecord as the argument.\n5. If status is an abrupt completion, then\na. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nstatus).\nb. Return Completion(status).\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n[...]\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-elem-trlg-iter-rest-rtrn-close-err.js", "description": " IteratorClose is called when AssignmentRestEvaluation produces a \"return\" completion due to reference evaluation (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nArrayAssignmentPattern :\n[ AssignmentElementList , Elisionopt AssignmentRestElementopt ]\n\n[...]\n7. If AssignmentRestElement is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentRestElement\nwith iteratorRecord as the argument.\n8. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nstatus).\n9. Return Completion(status).\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n7. If completion.[[type]] is throw, return Completion(completion).\n8. If innerResult.[[type]] is throw, return Completion(innerResult).\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-elem-trlg-iter-rest-rtrn-close-null.js", "description": " IteratorClose throws a TypeError when `return` returns a non-Object value (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nArrayAssignmentPattern :\n[ AssignmentElementList , Elisionopt AssignmentRestElementopt ]\n\n[...]\n7. If AssignmentRestElement is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentRestElement\nwith iteratorRecord as the argument.\n8. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nstatus).\n9. Return Completion(status).\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n7. If completion.[[type]] is throw, return Completion(completion).\n8. If innerResult.[[type]] is throw, return Completion(innerResult).\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-elem-trlg-iter-rest-rtrn-close.js", "description": " IteratorClose is called when AssignmentRestEvaluation produces a \"return\" completion due to reference evaluation (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nArrayAssignmentPattern :\n[ AssignmentElementList , Elisionopt AssignmentRestElementopt ]\n\n[...]\n7. If AssignmentRestElement is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentRestElement\nwith iteratorRecord as the argument.\n8. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nstatus).\n9. Return Completion(status).\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n7. If completion.[[type]] is throw, return Completion(completion).\n8. If innerResult.[[type]] is throw, return Completion(innerResult).\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-elem-trlg-iter-rest-thrw-close-err.js", "description": " IteratorClose is called when AssignmentRestEvaluation produces a \"throw\" completion due to reference evaluation (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nArrayAssignmentPattern :\n[ AssignmentElementList , Elisionopt AssignmentRestElementopt ]\n\n[...]\n7. If AssignmentRestElement is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentRestElement\nwith iteratorRecord as the argument.\n8. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nstatus).\n9. Return Completion(status).\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n7. If completion.[[type]] is throw, return Completion(completion)\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-elem-trlg-iter-rest-thrw-close.js", "description": " IteratorClose is called when AssignmentRestEvaluation produces a \"throw\" completion due to reference evaluation (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nArrayAssignmentPattern :\n[ AssignmentElementList , Elisionopt AssignmentRestElementopt ]\n\n[...]\n7. If AssignmentRestElement is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentRestElement\nwith iteratorRecord as the argument.\n8. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nstatus).\n9. Return Completion(status).\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n[...]\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-elision-iter-nrml-close-err.js", "description": " Abrupt completion returned from IteratorClose (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nArrayAssignmentPattern : [ Elision ]\n\n1. Let iterator be GetIterator(value).\n[...]\n5. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nresult).\n6. Return result.\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-elision-iter-nrml-close-null.js", "description": " IteratorClose throws a TypeError when `return` returns a non-Object value (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nArrayAssignmentPattern : [ Elision ]\n\n1. Let iterator be GetIterator(value).\n[...]\n5. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nresult).\n[...]\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n7. If completion.[[type]] is throw, return Completion(completion).\n8. If innerResult.[[type]] is throw, return Completion(innerResult).\n9. If Type(innerResult.[[value]]) is not Object, throw a TypeError\nexception.\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-elision-iter-nrml-close.js", "description": " IteratorClose is called when assignment evaluation has not exhausted the iterator (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nArrayAssignmentPattern : [ Elision ]\n\n1. Let iterator be GetIterator(value).\n[...]\n5. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nresult).\n[...]\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n[...]\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-empty-iter-close-err.js", "description": " Abrupt completion returned from IteratorClose (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nArrayAssignmentPattern : [ ]\n\n1. Let iterator be GetIterator(value).\n2. ReturnIfAbrupt(iterator).\n3. Return IteratorClose(iterator, NormalCompletion(empty)).\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-empty-iter-close-null.js", "description": " IteratorClose throws a TypeError when `return` returns a non-Object value (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nArrayAssignmentPattern : [ ]\n\n1. Let iterator be GetIterator(value).\n2. ReturnIfAbrupt(iterator).\n3. Return IteratorClose(iterator, NormalCompletion(empty)).\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n7. If completion.[[type]] is throw, return Completion(completion).\n8. If innerResult.[[type]] is throw, return Completion(innerResult).\n9. If Type(innerResult.[[value]]) is not Object, throw a TypeError\nexception.\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-empty-iter-close.js", "description": " Iterator is closed without iterating (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nArrayAssignmentPattern : [ ]\n\n1. Let iterator be GetIterator(value).\n2. ReturnIfAbrupt(iterator).\n3. Return IteratorClose(iterator, NormalCompletion(empty)).\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n[...]\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-rest-iter-rtrn-close-err.js", "description": " IteratorClose is called when reference evaluation produces a \"return\" completion (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nArrayAssignmentPattern : [ Elisionopt AssignmentRestElement ]\n\n[...]\n5. Let result be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentRestElement with\niteratorRecord as the argument\n6. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nresult).\n\nAssignmentRestElement[Yield] : ... DestructuringAssignmentTarget\n\n1. If DestructuringAssignmentTarget is neither an ObjectLiteral nor an\nArrayLiteral, then\na. Let lref be the result of evaluating DestructuringAssignmentTarget.\nb. ReturnIfAbrupt(lref).\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n7. If completion.[[type]] is throw, return Completion(completion).\n8. If innerResult.[[type]] is throw, return Completion(innerResult).\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-rest-iter-rtrn-close-null.js", "description": " IteratorClose throws a TypeError when `return` returns a non-Object value (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nArrayAssignmentPattern : [ Elisionopt AssignmentRestElement ]\n\n[...]\n5. Let result be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentRestElement with\niteratorRecord as the argument\n6. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nresult).\n\nAssignmentRestElement[Yield] : ... DestructuringAssignmentTarget\n\n1. If DestructuringAssignmentTarget is neither an ObjectLiteral nor an\nArrayLiteral, then\na. Let lref be the result of evaluating DestructuringAssignmentTarget.\nb. ReturnIfAbrupt(lref).\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n[...]\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n7. If completion.[[type]] is throw, return Completion(completion).\n8. If innerResult.[[type]] is throw, return Completion(innerResult).\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-rest-iter-rtrn-close.js", "description": " IteratorClose is called when reference evaluation produces a \"return\" completion (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nArrayAssignmentPattern : [ Elisionopt AssignmentRestElement ]\n\n[...]\n5. Let result be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentRestElement with\niteratorRecord as the argument\n6. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nresult).\n\nAssignmentRestElement[Yield] : ... DestructuringAssignmentTarget\n\n1. If DestructuringAssignmentTarget is neither an ObjectLiteral nor an\nArrayLiteral, then\na. Let lref be the result of evaluating DestructuringAssignmentTarget.\nb. ReturnIfAbrupt(lref).\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n[...]\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n7. If completion.[[type]] is throw, return Completion(completion).\n8. If innerResult.[[type]] is throw, return Completion(innerResult).\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-rest-iter-thrw-close-err.js", "description": " IteratorClose is called when reference evaluation produces a \"throw\" completion (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nArrayAssignmentPattern : [ Elisionopt AssignmentRestElement ]\n\n[...]\n5. Let result be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentRestElement with\niteratorRecord as the argument\n6. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nresult).\n\nAssignmentRestElement[Yield] : ... DestructuringAssignmentTarget\n\n1. If DestructuringAssignmentTarget is neither an ObjectLiteral nor an\nArrayLiteral, then\na. Let lref be the result of evaluating DestructuringAssignmentTarget.\nb. ReturnIfAbrupt(lref).\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-rest-iter-thrw-close.js", "description": " IteratorClose is called when reference evaluation produces a \"throw\" completion (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nArrayAssignmentPattern : [ Elisionopt AssignmentRestElement ]\n\n[...]\n5. Let result be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentRestElement with\niteratorRecord as the argument\n6. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nresult).\n\nAssignmentRestElement[Yield] : ... DestructuringAssignmentTarget\n\n1. If DestructuringAssignmentTarget is neither an ObjectLiteral nor an\nArrayLiteral, then\na. Let lref be the result of evaluating DestructuringAssignmentTarget.\nb. ReturnIfAbrupt(lref).\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n[...]\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-rest-lref-err.js", "description": " IteratorClose is called when reference evaluation produces an abrupt completion (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nArrayAssignmentPattern : [ Elisionopt AssignmentRestElement ]\n\n[...]\n5. Let result be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentRestElement with\niteratorRecord as the argument\n6. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nresult).\n\nAssignmentRestElement[Yield] : ... DestructuringAssignmentTarget\n\n1. If DestructuringAssignmentTarget is neither an ObjectLiteral nor an\nArrayLiteral, then\na. Let lref be the result of evaluating DestructuringAssignmentTarget.\nb. ReturnIfAbrupt(lref).\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/obj-id-init-fn-name-arrow.js", "description": " Assignment of function `name` attribute (ArrowFunction) (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nAssignmentProperty : IdentifierReference Initializeropt\n[...] 6. If Initializeropt is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v, P).\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/obj-id-init-fn-name-class.js", "description": " Assignment of function `name` attribute (ClassExpression) (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["class", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nAssignmentProperty : IdentifierReference Initializeropt\n[...] 6. If Initializeropt is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v, P).\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/obj-id-init-fn-name-cover.js", "description": " Assignment of function `name` attribute (CoverParenthesizedExpression) (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nAssignmentProperty : IdentifierReference Initializeropt\n[...] 6. If Initializeropt is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v, P).\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/obj-id-init-fn-name-fn.js", "description": " Assignment of function `name` attribute (FunctionExpression) (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nAssignmentProperty : IdentifierReference Initializeropt\n[...] 6. If Initializeropt is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v, P).\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/obj-id-init-fn-name-gen.js", "description": " Assignment of function `name` attribute (GeneratorExpression) (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nAssignmentProperty : IdentifierReference Initializeropt\n[...] 6. If Initializeropt is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v, P).\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/obj-prop-elem-init-fn-name-arrow.js", "description": " Assignment of function `name` attribute (ArrowFunction) (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nAssignmentElement[Yield] : DestructuringAssignmentTarget Initializeropt\n[...] 7. If Initializer is present and v is undefined and\nIsAnonymousFunctionDefinition(Initializer) and IsIdentifierRef of\nDestructuringAssignmentTarget are both true, then\na. Let hasNameProperty be HasOwnProperty(rhsValue, \"name\").\nb. ReturnIfAbrupt(hasNameProperty).\nc. If hasNameProperty is false, perform SetFunctionName(rhsValue,\nGetReferencedName(lref)).\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/obj-prop-elem-init-fn-name-class.js", "description": " Assignment of function `name` attribute (ClassExpression) (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["class", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nAssignmentElement[Yield] : DestructuringAssignmentTarget Initializeropt\n[...] 7. If Initializer is present and v is undefined and\nIsAnonymousFunctionDefinition(Initializer) and IsIdentifierRef of\nDestructuringAssignmentTarget are both true, then\na. Let hasNameProperty be HasOwnProperty(rhsValue, \"name\").\nb. ReturnIfAbrupt(hasNameProperty).\nc. If hasNameProperty is false, perform SetFunctionName(rhsValue,\nGetReferencedName(lref)).\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/obj-prop-elem-init-fn-name-cover.js", "description": " Assignment of function `name` attribute (CoverParenthesizedExpression) (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nAssignmentElement[Yield] : DestructuringAssignmentTarget Initializeropt\n[...] 7. If Initializer is present and v is undefined and\nIsAnonymousFunctionDefinition(Initializer) and IsIdentifierRef of\nDestructuringAssignmentTarget are both true, then\na. Let hasNameProperty be HasOwnProperty(rhsValue, \"name\").\nb. ReturnIfAbrupt(hasNameProperty).\nc. If hasNameProperty is false, perform SetFunctionName(rhsValue,\nGetReferencedName(lref)).\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/obj-prop-elem-init-fn-name-fn.js", "description": " Assignment of function `name` attribute (FunctionExpression) (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nAssignmentElement[Yield] : DestructuringAssignmentTarget Initializeropt\n[...] 7. If Initializer is present and v is undefined and\nIsAnonymousFunctionDefinition(Initializer) and IsIdentifierRef of\nDestructuringAssignmentTarget are both true, then\na. Let hasNameProperty be HasOwnProperty(rhsValue, \"name\").\nb. ReturnIfAbrupt(hasNameProperty).\nc. If hasNameProperty is false, perform SetFunctionName(rhsValue,\nGetReferencedName(lref)).\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/obj-prop-elem-init-fn-name-gen.js", "description": " Assignment of function `name` attribute (GeneratorExpression) (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nAssignmentElement[Yield] : DestructuringAssignmentTarget Initializeropt\n[...] 7. If Initializer is present and v is undefined and\nIsAnonymousFunctionDefinition(Initializer) and IsIdentifierRef of\nDestructuringAssignmentTarget are both true, then\na. Let hasNameProperty be HasOwnProperty(rhsValue, \"name\").\nb. ReturnIfAbrupt(hasNameProperty).\nc. If hasNameProperty is false, perform SetFunctionName(rhsValue,\nGetReferencedName(lref)).\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/obj-rest-computed-property-no-strict.js", "description": " Destructuring field can be a computed property, i.e it can be defined only at runtime. Rest operantion needs to skip these properties as well. (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated", "noStrict"], "includes": ["propertyHelper.js"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/obj-rest-computed-property.js", "description": " Destructuring field can be a computed property, i.e it can be defined only at runtime. Rest operantion needs to skip these properties as well. (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/obj-rest-descriptors.js", "description": " Object created from rest deconstruction doesn't copy source object property descriptors. (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/obj-rest-empty-obj.js", "description": " RestBindingInitialization creates a new object even if lhs is an empty object (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/obj-rest-getter-abrupt-get-error.js", "description": " Rest deconstruction doesn't happen if getter return is abrupt (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/obj-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/obj-rest-non-string-computed-property-1.js", "description": " Destructuring field can be a non-string computed property, i.e it can be defined only at runtime. Rest operation needs to skip these properties as well. (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/obj-rest-non-string-computed-property-1dot.js", "description": " Destructuring field can be a non-string computed property, i.e it can be defined only at runtime. Rest operation needs to skip these properties as well. (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["compareArray.js", "propertyHelper.js"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/obj-rest-non-string-computed-property-1dot0.js", "description": " Destructuring field can be a non-string computed property, i.e it can be defined only at runtime. Rest operation needs to skip these properties as well. (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/obj-rest-non-string-computed-property-1e0.js", "description": " Destructuring field can be a non-string computed property, i.e it can be defined only at runtime. Rest operation needs to skip these properties as well. (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/obj-rest-non-string-computed-property-array-1.js", "description": " Destructuring field can be a non-string computed property, i.e it can be defined only at runtime. Rest operation needs to skip these properties as well. (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["compareArray.js", "propertyHelper.js"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/obj-rest-non-string-computed-property-array-1e0.js", "description": " Destructuring field can be a non-string computed property, i.e it can be defined only at runtime. Rest operation needs to skip these properties as well. (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["compareArray.js", "propertyHelper.js"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/obj-rest-non-string-computed-property-string-1.js", "description": " Destructuring field can be a non-string computed property, i.e it can be defined only at runtime. Rest operation needs to skip these properties as well. (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/obj-rest-number.js", "description": " RestBindingInitialization creates a new object even if lhs is a Number (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/obj-rest-order.js", "description": " Rest operation follows [[OwnPropertyKeys]] order (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol", "object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["compareArray.js"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/obj-rest-put-const.js", "description": " The object rest deconstruction assignment target should obey `const` semantics. (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/obj-rest-same-name.js", "description": " Proper setting in the values for rest name equal to a property name. (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/obj-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/obj-rest-str-val.js", "description": " RestBindingInitialization creats an object with indexes as property name (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/obj-rest-symbol-val.js", "description": " RestBindingInitialization creates a new object if lhs is a Symbol (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol", "object-rest", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/obj-rest-to-property-with-setter.js", "description": " When DestructuringAssignmentTarget is an object property setter, its value should be binded as rest object. (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/obj-rest-to-property.js", "description": " When DestructuringAssignmentTarget is an object property, its value should be binded as rest object. (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/obj-rest-val-null.js", "description": " TypeError is thrown when rhs is null because of 7.1.13 ToObject ( argument ) used by CopyDataProperties (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/obj-rest-val-undefined.js", "description": " TypeError is thrown when rhs is ```undefined``` because of 7.1.13 ToObject ( argument ) used by CopyDataProperties (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/obj-rest-valid-object.js", "description": " Rest object contains just unextracted data (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/fn-name-arrow.js", "version": 6, "esid": " 12.14.4", "description": " Assignment of function `name` attribute (ArrowFunction)", "info": " |AssignmentExpression[In, Yield] :\nLeftHandSideExpression[?Yield] = AssignmentExpression[?In, ?Yield]\n\n1. If LeftHandSideExpression is neither an ObjectLiteral nor an\nArrayLiteral, then\n[...]\ne. If IsAnonymousFunctionDefinition(AssignmentExpression) and\nIsIdentifierRef of LeftHandSideExpression are both true, then\n\ni. Let hasNameProperty be HasOwnProperty(rval, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(rval,\nGetReferencedName(lref)).\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/language/expressions/assignment/fn-name-class.js", "version": 6, "esid": " 12.14.4", "description": " Assignment of function `name` attribute (ClassExpression)", "info": " |AssignmentExpression[In, Yield] :\nLeftHandSideExpression[?Yield] = AssignmentExpression[?In, ?Yield]\n\n1. If LeftHandSideExpression is neither an ObjectLiteral nor an\nArrayLiteral, then\n[...]\ne. If IsAnonymousFunctionDefinition(AssignmentExpression) and\nIsIdentifierRef of LeftHandSideExpression are both true, then\n\ni. Let hasNameProperty be HasOwnProperty(rval, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(rval,\nGetReferencedName(lref)).\n", "includes": ["propertyHelper.js"], "features": ["class"]}, {"path": "./test262-main/test/language/expressions/assignment/fn-name-cover.js", "version": 6, "esid": " 12.14.4", "description": " >Assignment of function `name` attribute (CoverParenthesizedExpression)\n", "info": " |AssignmentExpression[In, Yield] :\nLeftHandSideExpression[?Yield] = AssignmentExpression[?In, ?Yield]\n\n1. If LeftHandSideExpression is neither an ObjectLiteral nor an\nArrayLiteral, then\n[...]\ne. If IsAnonymousFunctionDefinition(AssignmentExpression) and\nIsIdentifierRef of LeftHandSideExpression are both true, then\n\ni. Let hasNameProperty be HasOwnProperty(rval, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(rval,\nGetReferencedName(lref)).\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/language/expressions/assignment/fn-name-fn.js", "version": 6, "esid": " 12.14.4", "description": " Assignment of function `name` attribute (FunctionExpression)", "info": " |AssignmentExpression[In, Yield] :\nLeftHandSideExpression[?Yield] = AssignmentExpression[?In, ?Yield]\n\n1. If LeftHandSideExpression is neither an ObjectLiteral nor an\nArrayLiteral, then\n[...]\ne. If IsAnonymousFunctionDefinition(AssignmentExpression) and\nIsIdentifierRef of LeftHandSideExpression are both true, then\n\ni. Let hasNameProperty be HasOwnProperty(rval, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(rval,\nGetReferencedName(lref)).\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/language/expressions/assignment/fn-name-gen.js", "version": 6, "esid": " 12.14.4", "description": " Assignment of function `name` attribute (GeneratorExpression)", "info": " |AssignmentExpression[In, Yield] :\nLeftHandSideExpression[?Yield] = AssignmentExpression[?In, ?Yield]\n\n1. If LeftHandSideExpression is neither an ObjectLiteral nor an\nArrayLiteral, then\n[...]\ne. If IsAnonymousFunctionDefinition(AssignmentExpression) and\nIsIdentifierRef of LeftHandSideExpression are both true, then\n\ni. Let hasNameProperty be HasOwnProperty(rval, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(rval,\nGetReferencedName(lref)).\n", "includes": ["propertyHelper.js"], "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/async-generator/default-proto.js", "esid": " sec-asyncgenerator-definitions-evaluatebody", "description": " >Default [[Prototype]] value derived from realm of the async generator function.\n", "info": " |Runtime Semantics: EvaluateBody\n\n...\n2. Let generator be ? OrdinaryCreateFromConstructor(functionObject, \"%AsyncGeneratorPrototype%\", \u00ab ... \u00bb).\n3. Perform ! AsyncGeneratorStart(generator, FunctionBody).\n4. Return Completion { [[Type]]: return, [[Value]]: generator, [[Target]]: empty }.\n\nOrdinaryCreateFromConstructor ( constructor, intrinsicDefaultProto [ , internalSlotsList ] )\n\n...\n2. Let proto be ? GetPrototypeFromConstructor(constructor, intrinsicDefaultProto).\n3. Return ObjectCreate(proto, internalSlotsList).\n\nGetPrototypeFromConstructor ( constructor, intrinsicDefaultProto )\n\n...\n3. Let proto be ? Get(constructor, 'prototype').\n4. If Type(proto) is not Object, then\na. Let realm be ? GetFunctionRealm(constructor).\nb. Set proto to realm's intrinsic object named intrinsicDefaultProto.\n5. Return proto.\n", "features": ["async-iteration", "Symbol"]}, {"path": "./test262-main/test/language/expressions/async-generator/dflt-params-abrupt.js", "description": " Abrupt completion returned by evaluation of initializer (async generator function expression)", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["default-parameters", "async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * ( FormalParameters ) {\nAsyncGeneratorBody }\n\n[...]\n3. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n\n14.1.19 Runtime Semantics: IteratorBindingInitialization\n\nFormalsList : FormalsList , FormalParameter\n\n1. Let status be the result of performing IteratorBindingInitialization for\nFormalsList using iteratorRecord and environment as the arguments.\n2. ReturnIfAbrupt(status).\n3. Return the result of performing IteratorBindingInitialization for\nFormalParameter using iteratorRecord and environment as the arguments.\n\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dflt-params-ref-later.js", "description": " Referencing a parameter that occurs later in the ParameterList (async generator function expression)", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["default-parameters", "async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * ( FormalParameters ) {\nAsyncGeneratorBody }\n\n[...]\n3. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n\n14.1.19 Runtime Semantics: IteratorBindingInitialization\n\nFormalsList : FormalsList , FormalParameter\n\n1. Let status be the result of performing IteratorBindingInitialization for\nFormalsList using iteratorRecord and environment as the arguments.\n2. ReturnIfAbrupt(status).\n3. Return the result of performing IteratorBindingInitialization for\nFormalParameter using iteratorRecord and environment as the arguments.\n\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dflt-params-ref-self.js", "description": " Referencing a parameter from within its own initializer (async generator function expression)", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["default-parameters", "async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * ( FormalParameters ) {\nAsyncGeneratorBody }\n\n[...]\n3. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n\n14.1.19 Runtime Semantics: IteratorBindingInitialization\n\nFormalsList : FormalsList , FormalParameter\n\n1. Let status be the result of performing IteratorBindingInitialization for\nFormalsList using iteratorRecord and environment as the arguments.\n2. ReturnIfAbrupt(status).\n3. Return the result of performing IteratorBindingInitialization for\nFormalParameter using iteratorRecord and environment as the arguments.\n\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/ary-init-iter-get-err-array-prototype.js", "description": " Abrupt completion returned by GetIterator (async generator function expression)", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * ( FormalParameters ) {\nAsyncGeneratorBody }\n\n[...]\n3. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\nRuntime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iteratorRecord be ? GetIterator(value).\n\nGetIterator ( obj [ , hint [ , method ] ] )\n\n[...]\n4. Let iterator be ? Call(method, obj).\n\nCall ( F, V [ , argumentsList ] )\n\n[...]\n2. If IsCallable(F) is false, throw a TypeError exception.\n\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/ary-init-iter-get-err.js", "description": " Abrupt completion returned by GetIterator (async generator function expression)", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * ( FormalParameters ) {\nAsyncGeneratorBody }\n\n[...]\n3. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iterator be GetIterator(value).\n2. ReturnIfAbrupt(iterator).\n\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/ary-ptrn-elem-ary-val-null.js", "description": " Nested array destructuring with a null value (async generator function expression)", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * ( FormalParameters ) {\nAsyncGeneratorBody }\n\n[...]\n3. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. If iteratorRecord.[[done]] is false, then\n[...]\ne. Else\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iterator be GetIterator(value).\n2. ReturnIfAbrupt(iterator).\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/ary-ptrn-elem-id-init-throws.js", "description": " Destructuring initializer returns an abrupt completion (async generator function expression)", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * ( FormalParameters ) {\nAsyncGeneratorBody }\n\n[...]\n3. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/ary-ptrn-elem-id-init-unresolvable.js", "description": " Destructuring initializer is an unresolvable reference (async generator function expression)", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * ( FormalParameters ) {\nAsyncGeneratorBody }\n\n[...]\n3. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/ary-ptrn-elem-id-iter-step-err.js", "description": " Error forwarding when IteratorStep returns an abrupt completion (async generator function expression)", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * ( FormalParameters ) {\nAsyncGeneratorBody }\n\n[...]\n3. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/ary-ptrn-elem-id-iter-val-err.js", "description": " Error forwarding when IteratorValue returns an abrupt completion (async generator function expression)", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * ( FormalParameters ) {\nAsyncGeneratorBody }\n\n[...]\n3. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\nd. If next is false, set iteratorRecord.[[done]] to true.\ne. Else,\ni. Let v be IteratorValue(next).\nii. If v is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\niii. ReturnIfAbrupt(v).\n\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/ary-ptrn-elem-obj-val-null.js", "description": " Nested object destructuring with a null value (async generator function expression)", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * ( FormalParameters ) {\nAsyncGeneratorBody }\n\n[...]\n3. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. If iteratorRecord.[[done]] is false, then\n[...]\ne. Else\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ObjectBindingPattern\n\n1. Let valid be RequireObjectCoercible(value).\n2. ReturnIfAbrupt(valid).\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/ary-ptrn-elem-obj-val-undef.js", "description": " Nested object destructuring with a value of `undefined` (async generator function expression)", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * ( FormalParameters ) {\nAsyncGeneratorBody }\n\n[...]\n3. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. If iteratorRecord.[[done]] is false, then\n[...]\ne. Else\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ObjectBindingPattern\n\n1. Let valid be RequireObjectCoercible(value).\n2. ReturnIfAbrupt(valid).\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/ary-ptrn-elision-step-err.js", "description": " Elision advances iterator and forwards abrupt completions (async generator function expression)", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["generators", "async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * ( FormalParameters ) {\nAsyncGeneratorBody }\n\n[...]\n3. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ Elision ]\n\n1. Return the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with iteratorRecord\nas the argument.\n\n12.14.5.3 Runtime Semantics: IteratorDestructuringAssignmentEvaluation\n\nElision : ,\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/ary-ptrn-rest-id-elision-next-err.js", "description": " Rest element following elision elements (async generator function expression)", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["generators", "async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * ( FormalParameters ) {\nAsyncGeneratorBody }\n\n[...]\n3. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nArrayBindingPattern : [ Elisionopt BindingRestElement ]\n1. If Elision is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with\niteratorRecord as the argument.\nb. ReturnIfAbrupt(status).\n2. Return the result of performing IteratorBindingInitialization for\nBindingRestElement with iteratorRecord and environment as arguments.\n\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/ary-ptrn-rest-id-iter-step-err.js", "description": " Error forwarding when IteratorStep returns an abrupt completion (async generator function expression)", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["generators", "async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * ( FormalParameters ) {\nAsyncGeneratorBody }\n\n[...]\n3. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\na. If iteratorRecord.[[done]] is false,\ni. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nii. If next is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\niii. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/ary-ptrn-rest-id-iter-val-err.js", "description": " Error forwarding when IteratorValue returns an abrupt completion (async generator function expression)", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * ( FormalParameters ) {\nAsyncGeneratorBody }\n\n[...]\n3. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\n[...]\nc. Let nextValue be IteratorValue(next).\nd. If nextValue is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\ne. ReturnIfAbrupt(nextValue).\n\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/dflt-ary-init-iter-get-err-array-prototype.js", "description": " Abrupt completion returned by GetIterator (async generator function expression (default parameter))", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * ( FormalParameters ) {\nAsyncGeneratorBody }\n\n[...]\n3. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\nRuntime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iteratorRecord be ? GetIterator(value).\n\nGetIterator ( obj [ , hint [ , method ] ] )\n\n[...]\n4. Let iterator be ? Call(method, obj).\n\nCall ( F, V [ , argumentsList ] )\n\n[...]\n2. If IsCallable(F) is false, throw a TypeError exception.\n\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/dflt-ary-init-iter-get-err.js", "description": " Abrupt completion returned by GetIterator (async generator function expression (default parameter))", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * ( FormalParameters ) {\nAsyncGeneratorBody }\n\n[...]\n3. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iterator be GetIterator(value).\n2. ReturnIfAbrupt(iterator).\n\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/dflt-ary-ptrn-elem-ary-val-null.js", "description": " Nested array destructuring with a null value (async generator function expression (default parameter))", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * ( FormalParameters ) {\nAsyncGeneratorBody }\n\n[...]\n3. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. If iteratorRecord.[[done]] is false, then\n[...]\ne. Else\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iterator be GetIterator(value).\n2. ReturnIfAbrupt(iterator).\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/dflt-ary-ptrn-elem-id-init-throws.js", "description": " Destructuring initializer returns an abrupt completion (async generator function expression (default parameter))", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * ( FormalParameters ) {\nAsyncGeneratorBody }\n\n[...]\n3. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/dflt-ary-ptrn-elem-id-init-unresolvable.js", "description": " Destructuring initializer is an unresolvable reference (async generator function expression (default parameter))", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * ( FormalParameters ) {\nAsyncGeneratorBody }\n\n[...]\n3. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/dflt-ary-ptrn-elem-id-iter-step-err.js", "description": " Error forwarding when IteratorStep returns an abrupt completion (async generator function expression (default parameter))", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * ( FormalParameters ) {\nAsyncGeneratorBody }\n\n[...]\n3. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/dflt-ary-ptrn-elem-id-iter-val-err.js", "description": " Error forwarding when IteratorValue returns an abrupt completion (async generator function expression (default parameter))", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * ( FormalParameters ) {\nAsyncGeneratorBody }\n\n[...]\n3. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\nd. If next is false, set iteratorRecord.[[done]] to true.\ne. Else,\ni. Let v be IteratorValue(next).\nii. If v is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\niii. ReturnIfAbrupt(v).\n\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/dflt-ary-ptrn-elem-obj-val-null.js", "description": " Nested object destructuring with a null value (async generator function expression (default parameter))", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * ( FormalParameters ) {\nAsyncGeneratorBody }\n\n[...]\n3. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. If iteratorRecord.[[done]] is false, then\n[...]\ne. Else\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ObjectBindingPattern\n\n1. Let valid be RequireObjectCoercible(value).\n2. ReturnIfAbrupt(valid).\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/dflt-ary-ptrn-elem-obj-val-undef.js", "description": " Nested object destructuring with a value of `undefined` (async generator function expression (default parameter))", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * ( FormalParameters ) {\nAsyncGeneratorBody }\n\n[...]\n3. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. If iteratorRecord.[[done]] is false, then\n[...]\ne. Else\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ObjectBindingPattern\n\n1. Let valid be RequireObjectCoercible(value).\n2. ReturnIfAbrupt(valid).\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/dflt-ary-ptrn-elision-step-err.js", "description": " Elision advances iterator and forwards abrupt completions (async generator function expression (default parameter))", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["generators", "async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * ( FormalParameters ) {\nAsyncGeneratorBody }\n\n[...]\n3. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ Elision ]\n\n1. Return the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with iteratorRecord\nas the argument.\n\n12.14.5.3 Runtime Semantics: IteratorDestructuringAssignmentEvaluation\n\nElision : ,\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/dflt-ary-ptrn-rest-id-elision-next-err.js", "description": " Rest element following elision elements (async generator function expression (default parameter))", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["generators", "async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * ( FormalParameters ) {\nAsyncGeneratorBody }\n\n[...]\n3. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nArrayBindingPattern : [ Elisionopt BindingRestElement ]\n1. If Elision is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with\niteratorRecord as the argument.\nb. ReturnIfAbrupt(status).\n2. Return the result of performing IteratorBindingInitialization for\nBindingRestElement with iteratorRecord and environment as arguments.\n\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/dflt-ary-ptrn-rest-id-iter-step-err.js", "description": " Error forwarding when IteratorStep returns an abrupt completion (async generator function expression (default parameter))", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["generators", "async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * ( FormalParameters ) {\nAsyncGeneratorBody }\n\n[...]\n3. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\na. If iteratorRecord.[[done]] is false,\ni. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nii. If next is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\niii. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/dflt-ary-ptrn-rest-id-iter-val-err.js", "description": " Error forwarding when IteratorValue returns an abrupt completion (async generator function expression (default parameter))", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * ( FormalParameters ) {\nAsyncGeneratorBody }\n\n[...]\n3. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\n[...]\nc. Let nextValue be IteratorValue(next).\nd. If nextValue is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\ne. ReturnIfAbrupt(nextValue).\n\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/dflt-obj-init-null.js", "description": " Value specifed for object binding pattern must be object coercible (null) (async generator function expression (default parameter))", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * ( FormalParameters ) {\nAsyncGeneratorBody }\n\n[...]\n3. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\nRuntime Semantics: BindingInitialization\n\nObjectBindingPattern : { }\n\n1. Return NormalCompletion(empty).\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/dflt-obj-init-undefined.js", "description": " Value specifed for object binding pattern must be object coercible (undefined) (async generator function expression (default parameter))", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * ( FormalParameters ) {\nAsyncGeneratorBody }\n\n[...]\n3. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\nRuntime Semantics: BindingInitialization\n\nObjectBindingPattern : { }\n\n1. Return NormalCompletion(empty).\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/dflt-obj-ptrn-id-get-value-err.js", "description": " Error thrown when accessing the corresponding property of the value object (async generator function expression (default parameter))", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * ( FormalParameters ) {\nAsyncGeneratorBody }\n\n[...]\n3. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. Let v be GetV(value, propertyName).\n5. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/dflt-obj-ptrn-id-init-throws.js", "description": " Error thrown when evaluating the initializer (async generator function expression (default parameter))", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * ( FormalParameters ) {\nAsyncGeneratorBody }\n\n[...]\n3. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. LetdefaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/dflt-obj-ptrn-id-init-unresolvable.js", "description": " Destructuring initializer is an unresolvable reference (async generator function expression (default parameter))", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * ( FormalParameters ) {\nAsyncGeneratorBody }\n\n[...]\n3. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/dflt-obj-ptrn-list-err.js", "description": " Binding property list evaluation is interrupted by an abrupt completion (async generator function expression (default parameter))", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * ( FormalParameters ) {\nAsyncGeneratorBody }\n\n[...]\n3. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPropertyList : BindingPropertyList , BindingProperty\n\n1. Let status be the result of performing BindingInitialization for\nBindingPropertyList using value and environment as arguments.\n2. ReturnIfAbrupt(status).\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/dflt-obj-ptrn-prop-ary-value-null.js", "description": " Object binding pattern with \"nested\" array binding pattern taking the `null` value (async generator function expression (default parameter))", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * ( FormalParameters ) {\nAsyncGeneratorBody }\n\n[...]\n3. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/dflt-obj-ptrn-prop-eval-err.js", "description": " Evaluation of property name returns an abrupt completion (async generator function expression (default parameter))", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * ( FormalParameters ) {\nAsyncGeneratorBody }\n\n[...]\n3. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingProperty : PropertyName : BindingElement\n\n1. Let P be the result of evaluating PropertyName\n2. ReturnIfAbrupt(P).\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/dflt-obj-ptrn-prop-id-get-value-err.js", "description": " Error thrown when accessing the corresponding property of the value object (async generator function expression (default parameter))", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * ( FormalParameters ) {\nAsyncGeneratorBody }\n\n[...]\n3. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. Let v be GetV(value, propertyName).\n2. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/dflt-obj-ptrn-prop-id-init-throws.js", "description": " Error thrown when evaluating the initializer (async generator function expression (default parameter))", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * ( FormalParameters ) {\nAsyncGeneratorBody }\n\n[...]\n3. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/dflt-obj-ptrn-prop-id-init-unresolvable.js", "description": " Destructuring initializer is an unresolvable reference (async generator function expression (default parameter))", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * ( FormalParameters ) {\nAsyncGeneratorBody }\n\n[...]\n3. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/dflt-obj-ptrn-prop-obj-value-null.js", "description": " Object binding pattern with \"nested\" object binding pattern taking the `null` value (async generator function expression (default parameter))", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * ( FormalParameters ) {\nAsyncGeneratorBody }\n\n[...]\n3. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/dflt-obj-ptrn-prop-obj-value-undef.js", "description": " Object binding pattern with \"nested\" object binding pattern taking the `null` value (async generator function expression (default parameter))", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * ( FormalParameters ) {\nAsyncGeneratorBody }\n\n[...]\n3. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/named-ary-init-iter-get-err-array-prototype.js", "description": " Abrupt completion returned by GetIterator (async generator named function expression)", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n7. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, funcEnv, strict).\n[...]\n\nRuntime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iteratorRecord be ? GetIterator(value).\n\nGetIterator ( obj [ , hint [ , method ] ] )\n\n[...]\n4. Let iterator be ? Call(method, obj).\n\nCall ( F, V [ , argumentsList ] )\n\n[...]\n2. If IsCallable(F) is false, throw a TypeError exception.\n\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/named-ary-init-iter-get-err.js", "description": " Abrupt completion returned by GetIterator (async generator named function expression)", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n7. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, funcEnv, strict).\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iterator be GetIterator(value).\n2. ReturnIfAbrupt(iterator).\n\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/named-ary-ptrn-elem-ary-val-null.js", "description": " Nested array destructuring with a null value (async generator named function expression)", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n7. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, funcEnv, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. If iteratorRecord.[[done]] is false, then\n[...]\ne. Else\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iterator be GetIterator(value).\n2. ReturnIfAbrupt(iterator).\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/named-ary-ptrn-elem-id-init-throws.js", "description": " Destructuring initializer returns an abrupt completion (async generator named function expression)", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n7. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, funcEnv, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/named-ary-ptrn-elem-id-init-unresolvable.js", "description": " Destructuring initializer is an unresolvable reference (async generator named function expression)", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n7. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, funcEnv, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/named-ary-ptrn-elem-id-iter-step-err.js", "description": " Error forwarding when IteratorStep returns an abrupt completion (async generator named function expression)", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n7. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, funcEnv, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/named-ary-ptrn-elem-id-iter-val-err.js", "description": " Error forwarding when IteratorValue returns an abrupt completion (async generator named function expression)", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n7. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, funcEnv, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\nd. If next is false, set iteratorRecord.[[done]] to true.\ne. Else,\ni. Let v be IteratorValue(next).\nii. If v is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\niii. ReturnIfAbrupt(v).\n\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/named-ary-ptrn-elem-obj-val-null.js", "description": " Nested object destructuring with a null value (async generator named function expression)", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n7. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, funcEnv, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. If iteratorRecord.[[done]] is false, then\n[...]\ne. Else\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ObjectBindingPattern\n\n1. Let valid be RequireObjectCoercible(value).\n2. ReturnIfAbrupt(valid).\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/named-ary-ptrn-elem-obj-val-undef.js", "description": " Nested object destructuring with a value of `undefined` (async generator named function expression)", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n7. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, funcEnv, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. If iteratorRecord.[[done]] is false, then\n[...]\ne. Else\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ObjectBindingPattern\n\n1. Let valid be RequireObjectCoercible(value).\n2. ReturnIfAbrupt(valid).\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/named-ary-ptrn-elision-step-err.js", "description": " Elision advances iterator and forwards abrupt completions (async generator named function expression)", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["generators", "async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n7. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, funcEnv, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ Elision ]\n\n1. Return the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with iteratorRecord\nas the argument.\n\n12.14.5.3 Runtime Semantics: IteratorDestructuringAssignmentEvaluation\n\nElision : ,\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/named-ary-ptrn-rest-id-elision-next-err.js", "description": " Rest element following elision elements (async generator named function expression)", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["generators", "async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n7. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, funcEnv, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nArrayBindingPattern : [ Elisionopt BindingRestElement ]\n1. If Elision is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with\niteratorRecord as the argument.\nb. ReturnIfAbrupt(status).\n2. Return the result of performing IteratorBindingInitialization for\nBindingRestElement with iteratorRecord and environment as arguments.\n\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/named-ary-ptrn-rest-id-iter-step-err.js", "description": " Error forwarding when IteratorStep returns an abrupt completion (async generator named function expression)", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["generators", "async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n7. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, funcEnv, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\na. If iteratorRecord.[[done]] is false,\ni. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nii. If next is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\niii. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/named-ary-ptrn-rest-id-iter-val-err.js", "description": " Error forwarding when IteratorValue returns an abrupt completion (async generator named function expression)", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n7. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, funcEnv, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\n[...]\nc. Let nextValue be IteratorValue(next).\nd. If nextValue is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\ne. ReturnIfAbrupt(nextValue).\n\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/named-dflt-ary-init-iter-get-err-array-prototype.js", "description": " Abrupt completion returned by GetIterator (async generator named function expression (default parameter))", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n7. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, funcEnv, strict).\n[...]\n\nRuntime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iteratorRecord be ? GetIterator(value).\n\nGetIterator ( obj [ , hint [ , method ] ] )\n\n[...]\n4. Let iterator be ? Call(method, obj).\n\nCall ( F, V [ , argumentsList ] )\n\n[...]\n2. If IsCallable(F) is false, throw a TypeError exception.\n\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/named-dflt-ary-init-iter-get-err.js", "description": " Abrupt completion returned by GetIterator (async generator named function expression (default parameter))", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n7. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, funcEnv, strict).\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iterator be GetIterator(value).\n2. ReturnIfAbrupt(iterator).\n\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/named-dflt-ary-ptrn-elem-ary-val-null.js", "description": " Nested array destructuring with a null value (async generator named function expression (default parameter))", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n7. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, funcEnv, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. If iteratorRecord.[[done]] is false, then\n[...]\ne. Else\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iterator be GetIterator(value).\n2. ReturnIfAbrupt(iterator).\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/named-dflt-ary-ptrn-elem-id-init-throws.js", "description": " Destructuring initializer returns an abrupt completion (async generator named function expression (default parameter))", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n7. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, funcEnv, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/named-dflt-ary-ptrn-elem-id-init-unresolvable.js", "description": " Destructuring initializer is an unresolvable reference (async generator named function expression (default parameter))", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n7. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, funcEnv, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/named-dflt-ary-ptrn-elem-id-iter-step-err.js", "description": " Error forwarding when IteratorStep returns an abrupt completion (async generator named function expression (default parameter))", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n7. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, funcEnv, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/named-dflt-ary-ptrn-elem-id-iter-val-err.js", "description": " Error forwarding when IteratorValue returns an abrupt completion (async generator named function expression (default parameter))", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n7. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, funcEnv, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\nd. If next is false, set iteratorRecord.[[done]] to true.\ne. Else,\ni. Let v be IteratorValue(next).\nii. If v is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\niii. ReturnIfAbrupt(v).\n\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/named-dflt-ary-ptrn-elem-obj-val-null.js", "description": " Nested object destructuring with a null value (async generator named function expression (default parameter))", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n7. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, funcEnv, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. If iteratorRecord.[[done]] is false, then\n[...]\ne. Else\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ObjectBindingPattern\n\n1. Let valid be RequireObjectCoercible(value).\n2. ReturnIfAbrupt(valid).\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/named-dflt-ary-ptrn-elem-obj-val-undef.js", "description": " Nested object destructuring with a value of `undefined` (async generator named function expression (default parameter))", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n7. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, funcEnv, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. If iteratorRecord.[[done]] is false, then\n[...]\ne. Else\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ObjectBindingPattern\n\n1. Let valid be RequireObjectCoercible(value).\n2. ReturnIfAbrupt(valid).\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/named-dflt-ary-ptrn-elision-step-err.js", "description": " Elision advances iterator and forwards abrupt completions (async generator named function expression (default parameter))", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["generators", "async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n7. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, funcEnv, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ Elision ]\n\n1. Return the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with iteratorRecord\nas the argument.\n\n12.14.5.3 Runtime Semantics: IteratorDestructuringAssignmentEvaluation\n\nElision : ,\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/named-dflt-ary-ptrn-rest-id-elision-next-err.js", "description": " Rest element following elision elements (async generator named function expression (default parameter))", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["generators", "async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n7. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, funcEnv, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nArrayBindingPattern : [ Elisionopt BindingRestElement ]\n1. If Elision is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with\niteratorRecord as the argument.\nb. ReturnIfAbrupt(status).\n2. Return the result of performing IteratorBindingInitialization for\nBindingRestElement with iteratorRecord and environment as arguments.\n\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/named-dflt-ary-ptrn-rest-id-iter-step-err.js", "description": " Error forwarding when IteratorStep returns an abrupt completion (async generator named function expression (default parameter))", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["generators", "async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n7. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, funcEnv, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\na. If iteratorRecord.[[done]] is false,\ni. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nii. If next is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\niii. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/named-dflt-ary-ptrn-rest-id-iter-val-err.js", "description": " Error forwarding when IteratorValue returns an abrupt completion (async generator named function expression (default parameter))", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n7. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, funcEnv, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\n[...]\nc. Let nextValue be IteratorValue(next).\nd. If nextValue is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\ne. ReturnIfAbrupt(nextValue).\n\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/named-dflt-obj-init-null.js", "description": " Value specifed for object binding pattern must be object coercible (null) (async generator named function expression (default parameter))", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n7. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, funcEnv, strict).\n[...]\n\nRuntime Semantics: BindingInitialization\n\nObjectBindingPattern : { }\n\n1. Return NormalCompletion(empty).\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/named-dflt-obj-init-undefined.js", "description": " Value specifed for object binding pattern must be object coercible (undefined) (async generator named function expression (default parameter))", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n7. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, funcEnv, strict).\n[...]\n\nRuntime Semantics: BindingInitialization\n\nObjectBindingPattern : { }\n\n1. Return NormalCompletion(empty).\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/named-dflt-obj-ptrn-id-get-value-err.js", "description": " Error thrown when accessing the corresponding property of the value object (async generator named function expression (default parameter))", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n7. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, funcEnv, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. Let v be GetV(value, propertyName).\n5. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/named-dflt-obj-ptrn-id-init-throws.js", "description": " Error thrown when evaluating the initializer (async generator named function expression (default parameter))", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n7. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, funcEnv, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. LetdefaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/named-dflt-obj-ptrn-id-init-unresolvable.js", "description": " Destructuring initializer is an unresolvable reference (async generator named function expression (default parameter))", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n7. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, funcEnv, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/named-dflt-obj-ptrn-list-err.js", "description": " Binding property list evaluation is interrupted by an abrupt completion (async generator named function expression (default parameter))", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n7. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, funcEnv, strict).\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPropertyList : BindingPropertyList , BindingProperty\n\n1. Let status be the result of performing BindingInitialization for\nBindingPropertyList using value and environment as arguments.\n2. ReturnIfAbrupt(status).\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/named-dflt-obj-ptrn-prop-ary-value-null.js", "description": " Object binding pattern with \"nested\" array binding pattern taking the `null` value (async generator named function expression (default parameter))", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n7. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, funcEnv, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/named-dflt-obj-ptrn-prop-eval-err.js", "description": " Evaluation of property name returns an abrupt completion (async generator named function expression (default parameter))", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n7. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, funcEnv, strict).\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingProperty : PropertyName : BindingElement\n\n1. Let P be the result of evaluating PropertyName\n2. ReturnIfAbrupt(P).\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/named-dflt-obj-ptrn-prop-id-get-value-err.js", "description": " Error thrown when accessing the corresponding property of the value object (async generator named function expression (default parameter))", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n7. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, funcEnv, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. Let v be GetV(value, propertyName).\n2. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/named-dflt-obj-ptrn-prop-id-init-throws.js", "description": " Error thrown when evaluating the initializer (async generator named function expression (default parameter))", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n7. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, funcEnv, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/named-dflt-obj-ptrn-prop-id-init-unresolvable.js", "description": " Destructuring initializer is an unresolvable reference (async generator named function expression (default parameter))", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n7. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, funcEnv, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/named-dflt-obj-ptrn-prop-obj-value-null.js", "description": " Object binding pattern with \"nested\" object binding pattern taking the `null` value (async generator named function expression (default parameter))", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n7. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, funcEnv, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/named-dflt-obj-ptrn-prop-obj-value-undef.js", "description": " Object binding pattern with \"nested\" object binding pattern taking the `null` value (async generator named function expression (default parameter))", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n7. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, funcEnv, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/named-obj-init-null.js", "description": " Value specifed for object binding pattern must be object coercible (null) (async generator named function expression)", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n7. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, funcEnv, strict).\n[...]\n\nRuntime Semantics: BindingInitialization\n\nObjectBindingPattern : { }\n\n1. Return NormalCompletion(empty).\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/named-obj-init-undefined.js", "description": " Value specifed for object binding pattern must be object coercible (undefined) (async generator named function expression)", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n7. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, funcEnv, strict).\n[...]\n\nRuntime Semantics: BindingInitialization\n\nObjectBindingPattern : { }\n\n1. Return NormalCompletion(empty).\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/named-obj-ptrn-id-get-value-err.js", "description": " Error thrown when accessing the corresponding property of the value object (async generator named function expression)", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n7. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, funcEnv, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. Let v be GetV(value, propertyName).\n5. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/named-obj-ptrn-id-init-throws.js", "description": " Error thrown when evaluating the initializer (async generator named function expression)", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n7. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, funcEnv, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. LetdefaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/named-obj-ptrn-id-init-unresolvable.js", "description": " Destructuring initializer is an unresolvable reference (async generator named function expression)", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n7. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, funcEnv, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/named-obj-ptrn-list-err.js", "description": " Binding property list evaluation is interrupted by an abrupt completion (async generator named function expression)", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n7. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, funcEnv, strict).\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPropertyList : BindingPropertyList , BindingProperty\n\n1. Let status be the result of performing BindingInitialization for\nBindingPropertyList using value and environment as arguments.\n2. ReturnIfAbrupt(status).\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/named-obj-ptrn-prop-ary-value-null.js", "description": " Object binding pattern with \"nested\" array binding pattern taking the `null` value (async generator named function expression)", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n7. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, funcEnv, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/named-obj-ptrn-prop-eval-err.js", "description": " Evaluation of property name returns an abrupt completion (async generator named function expression)", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n7. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, funcEnv, strict).\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingProperty : PropertyName : BindingElement\n\n1. Let P be the result of evaluating PropertyName\n2. ReturnIfAbrupt(P).\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/named-obj-ptrn-prop-id-get-value-err.js", "description": " Error thrown when accessing the corresponding property of the value object (async generator named function expression)", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n7. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, funcEnv, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. Let v be GetV(value, propertyName).\n2. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/named-obj-ptrn-prop-id-init-throws.js", "description": " Error thrown when evaluating the initializer (async generator named function expression)", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n7. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, funcEnv, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/named-obj-ptrn-prop-id-init-unresolvable.js", "description": " Destructuring initializer is an unresolvable reference (async generator named function expression)", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n7. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, funcEnv, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/named-obj-ptrn-prop-obj-value-null.js", "description": " Object binding pattern with \"nested\" object binding pattern taking the `null` value (async generator named function expression)", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n7. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, funcEnv, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/named-obj-ptrn-prop-obj-value-undef.js", "description": " Object binding pattern with \"nested\" object binding pattern taking the `null` value (async generator named function expression)", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n7. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, funcEnv, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/obj-init-null.js", "description": " Value specifed for object binding pattern must be object coercible (null) (async generator function expression)", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * ( FormalParameters ) {\nAsyncGeneratorBody }\n\n[...]\n3. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\nRuntime Semantics: BindingInitialization\n\nObjectBindingPattern : { }\n\n1. Return NormalCompletion(empty).\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/obj-init-undefined.js", "description": " Value specifed for object binding pattern must be object coercible (undefined) (async generator function expression)", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * ( FormalParameters ) {\nAsyncGeneratorBody }\n\n[...]\n3. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\nRuntime Semantics: BindingInitialization\n\nObjectBindingPattern : { }\n\n1. Return NormalCompletion(empty).\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/obj-ptrn-id-get-value-err.js", "description": " Error thrown when accessing the corresponding property of the value object (async generator function expression)", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * ( FormalParameters ) {\nAsyncGeneratorBody }\n\n[...]\n3. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. Let v be GetV(value, propertyName).\n5. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/obj-ptrn-id-init-throws.js", "description": " Error thrown when evaluating the initializer (async generator function expression)", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * ( FormalParameters ) {\nAsyncGeneratorBody }\n\n[...]\n3. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. LetdefaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/obj-ptrn-id-init-unresolvable.js", "description": " Destructuring initializer is an unresolvable reference (async generator function expression)", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * ( FormalParameters ) {\nAsyncGeneratorBody }\n\n[...]\n3. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/obj-ptrn-list-err.js", "description": " Binding property list evaluation is interrupted by an abrupt completion (async generator function expression)", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * ( FormalParameters ) {\nAsyncGeneratorBody }\n\n[...]\n3. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPropertyList : BindingPropertyList , BindingProperty\n\n1. Let status be the result of performing BindingInitialization for\nBindingPropertyList using value and environment as arguments.\n2. ReturnIfAbrupt(status).\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/obj-ptrn-prop-ary-value-null.js", "description": " Object binding pattern with \"nested\" array binding pattern taking the `null` value (async generator function expression)", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * ( FormalParameters ) {\nAsyncGeneratorBody }\n\n[...]\n3. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/obj-ptrn-prop-eval-err.js", "description": " Evaluation of property name returns an abrupt completion (async generator function expression)", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * ( FormalParameters ) {\nAsyncGeneratorBody }\n\n[...]\n3. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingProperty : PropertyName : BindingElement\n\n1. Let P be the result of evaluating PropertyName\n2. ReturnIfAbrupt(P).\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/obj-ptrn-prop-id-get-value-err.js", "description": " Error thrown when accessing the corresponding property of the value object (async generator function expression)", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * ( FormalParameters ) {\nAsyncGeneratorBody }\n\n[...]\n3. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. Let v be GetV(value, propertyName).\n2. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/obj-ptrn-prop-id-init-throws.js", "description": " Error thrown when evaluating the initializer (async generator function expression)", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * ( FormalParameters ) {\nAsyncGeneratorBody }\n\n[...]\n3. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/obj-ptrn-prop-id-init-unresolvable.js", "description": " Destructuring initializer is an unresolvable reference (async generator function expression)", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * ( FormalParameters ) {\nAsyncGeneratorBody }\n\n[...]\n3. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/obj-ptrn-prop-obj-value-null.js", "description": " Object binding pattern with \"nested\" object binding pattern taking the `null` value (async generator function expression)", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * ( FormalParameters ) {\nAsyncGeneratorBody }\n\n[...]\n3. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/expressions/async-generator/dstr/obj-ptrn-prop-obj-value-undef.js", "description": " Object binding pattern with \"nested\" object binding pattern taking the `null` value (async generator function expression)", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * ( FormalParameters ) {\nAsyncGeneratorBody }\n\n[...]\n3. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/expressions/async-generator/generator-created-after-decl-inst.js", "esid": " sec-asyncgenerator-definitions-evaluatebody", "description": " >The generator object is created after FunctionDeclarationInstantiation.\n", "info": " |14.5.10 Runtime Semantics: EvaluateBody\n\n1. Perform ? FunctionDeclarationInstantiation(functionObject, argumentsList).\n2. Let generator be ? OrdinaryCreateFromConstructor(functionObject, \"%AsyncGeneratorPrototype%\",\n\u00ab [[AsyncGeneratorState]], [[AsyncGeneratorContext]], [[AsyncGeneratorQueue]] \u00bb).\n3. Perform ! AsyncGeneratorStart(generator, FunctionBody).\n...\n\n", "features": ["async-iteration"]}, {"path": "./test262-main/test/language/expressions/async-generator/name.js", "esid": " sec-asyncgenerator-definitions-evaluation", "description": " Assignment of function `name` attribute", "info": " |AsyncGeneratorExpression : async function * ( FormalParameters ) { AsyncGeneratorBody }\n\n1. Let scope be the LexicalEnvironment of the running execution context.\n2. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, scope, \"\").\n...\n6. Return closure.\n\nAsyncGeneratorExpression : async function * BindingIdentifier ( FormalParameters ) { AsyncGeneratorBody }\n\n1. Let scope be the running execution context's LexicalEnvironment.\n2. Let funcEnv be ! NewDeclarativeEnvironment(scope).\n3. Let envRec be funcEnv's EnvironmentRecord.\n4. Let name be StringValue of BindingIdentifier.\n5. Perform ! envRec.CreateImmutableBinding(name).\n6. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, funcEnv, name).\n...\n11. Return closure.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/language/expressions/async-generator/named-dflt-params-abrupt.js", "description": " Abrupt completion returned by evaluation of initializer (async generator named function expression)", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["default-parameters", "async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n7. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, funcEnv, strict).\n[...]\n\n\n14.1.19 Runtime Semantics: IteratorBindingInitialization\n\nFormalsList : FormalsList , FormalParameter\n\n1. Let status be the result of performing IteratorBindingInitialization for\nFormalsList using iteratorRecord and environment as the arguments.\n2. ReturnIfAbrupt(status).\n3. Return the result of performing IteratorBindingInitialization for\nFormalParameter using iteratorRecord and environment as the arguments.\n\n"}, {"path": "./test262-main/test/language/expressions/async-generator/named-dflt-params-ref-later.js", "description": " Referencing a parameter that occurs later in the ParameterList (async generator named function expression)", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["default-parameters", "async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n7. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, funcEnv, strict).\n[...]\n\n\n14.1.19 Runtime Semantics: IteratorBindingInitialization\n\nFormalsList : FormalsList , FormalParameter\n\n1. Let status be the result of performing IteratorBindingInitialization for\nFormalsList using iteratorRecord and environment as the arguments.\n2. ReturnIfAbrupt(status).\n3. Return the result of performing IteratorBindingInitialization for\nFormalParameter using iteratorRecord and environment as the arguments.\n\n"}, {"path": "./test262-main/test/language/expressions/async-generator/named-dflt-params-ref-self.js", "description": " Referencing a parameter from within its own initializer (async generator named function expression)", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["default-parameters", "async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n7. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, funcEnv, strict).\n[...]\n\n\n14.1.19 Runtime Semantics: IteratorBindingInitialization\n\nFormalsList : FormalsList , FormalParameter\n\n1. Let status be the result of performing IteratorBindingInitialization for\nFormalsList using iteratorRecord and environment as the arguments.\n2. ReturnIfAbrupt(status).\n3. Return the result of performing IteratorBindingInitialization for\nFormalParameter using iteratorRecord and environment as the arguments.\n\n"}, {"path": "./test262-main/test/language/expressions/async-generator/named-yield-promise-reject-next-catch.js", "description": " yield Promise.reject(value) is treated as throw value (Named async generator expression)", "esid": " prod-AsyncGeneratorExpression", "features": ["async-iteration"], "flags": ["generated", "async"], "info": " |Async Generator Function Definitions\n\nAsyncGeneratorExpression :\nasync [no LineTerminator here] function * BindingIdentifier ( FormalParameters ) {\nAsyncGeneratorBody }\n\n"}, {"path": "./test262-main/test/language/expressions/async-generator/yield-promise-reject-next-catch.js", "description": " yield Promise.reject(value) is treated as throw value (Unnamed async generator expression)", "esid": " prod-AsyncGeneratorExpression", "features": ["async-iteration"], "flags": ["generated", "async"], "info": " |Async Generator Function Definitions\n\nAsyncGeneratorExpression :\nasync [no LineTerminator here] function * BindingIdentifier ( FormalParameters ) {\nAsyncGeneratorBody }\n\n"}, {"path": "./test262-main/test/language/expressions/await/for-await-of-interleaved.js", "author": " Maya Lekova <mslekova@chromium.org>", "esid": " await", "description": " >for-await-of iteration and builtin Promises are properly interleaved,\nmeaning await in for-of loop takes only 1 tick on the microtask queue.\n", "flags": ["async"], "features": ["async-functions", "async-iteration", "generators"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/language/expressions/call/spread-err-mult-err-obj-unresolvable.js", "description": " Object Spread operator results in error when using an unresolvable reference (CallExpression)", "esid": " sec-function-calls-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "info": " |CallExpression : MemberExpression Arguments\n\n[...]\n9. Return EvaluateDirectCall(func, thisValue, Arguments, tailCall).\n\n12.3.4.3 Runtime Semantics: EvaluateDirectCall\n\n1. Let argList be ArgumentListEvaluation(arguments).\n[...]\n6. Let result be Call(func, thisValue, argList).\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/call/spread-err-sngl-err-obj-unresolvable.js", "description": " Object Spread operator results in error when using an unresolvable reference (CallExpression)", "esid": " sec-function-calls-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "info": " |CallExpression : MemberExpression Arguments\n\n[...]\n9. Return EvaluateDirectCall(func, thisValue, Arguments, tailCall).\n\n12.3.4.3 Runtime Semantics: EvaluateDirectCall\n\n1. Let argList be ArgumentListEvaluation(arguments).\n[...]\n6. Let result be Call(func, thisValue, argList).\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/call/spread-mult-obj-ident.js", "description": " Object Spread operator following other properties (CallExpression)", "esid": " sec-function-calls-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |CallExpression : MemberExpression Arguments\n\n[...]\n9. Return EvaluateDirectCall(func, thisValue, Arguments, tailCall).\n\n12.3.4.3 Runtime Semantics: EvaluateDirectCall\n\n1. Let argList be ArgumentListEvaluation(arguments).\n[...]\n6. Let result be Call(func, thisValue, argList).\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/call/spread-mult-obj-null.js", "description": " Object Spread operator following other arguments with null value (CallExpression)", "esid": " sec-function-calls-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "info": " |CallExpression : MemberExpression Arguments\n\n[...]\n9. Return EvaluateDirectCall(func, thisValue, Arguments, tailCall).\n\n12.3.4.3 Runtime Semantics: EvaluateDirectCall\n\n1. Let argList be ArgumentListEvaluation(arguments).\n[...]\n6. Let result be Call(func, thisValue, argList).\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/call/spread-mult-obj-undefined.js", "description": " Object Spread operator following other arguments with undefined (CallExpression)", "esid": " sec-function-calls-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "info": " |CallExpression : MemberExpression Arguments\n\n[...]\n9. Return EvaluateDirectCall(func, thisValue, Arguments, tailCall).\n\n12.3.4.3 Runtime Semantics: EvaluateDirectCall\n\n1. Let argList be ArgumentListEvaluation(arguments).\n[...]\n6. Let result be Call(func, thisValue, argList).\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/call/spread-obj-getter-descriptor.js", "description": " Spread operation with getter results in data property descriptor (CallExpression)", "esid": " sec-function-calls-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |CallExpression : MemberExpression Arguments\n\n[...]\n9. Return EvaluateDirectCall(func, thisValue, Arguments, tailCall).\n\n12.3.4.3 Runtime Semantics: EvaluateDirectCall\n\n1. Let argList be ArgumentListEvaluation(arguments).\n[...]\n6. Let result be Call(func, thisValue, argList).\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/call/spread-obj-getter-init.js", "description": " Getter in object literal is not evaluated (CallExpression)", "esid": " sec-function-calls-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "info": " |CallExpression : MemberExpression Arguments\n\n[...]\n9. Return EvaluateDirectCall(func, thisValue, Arguments, tailCall).\n\n12.3.4.3 Runtime Semantics: EvaluateDirectCall\n\n1. Let argList be ArgumentListEvaluation(arguments).\n[...]\n6. Let result be Call(func, thisValue, argList).\n[...]\n"}, {"path": "./test262-main/test/language/expressions/call/spread-obj-manipulate-outter-obj-in-getter.js", "description": " Getter manipulates outter object before it's spread operation (CallExpression)", "esid": " sec-function-calls-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "info": " |CallExpression : MemberExpression Arguments\n\n[...]\n9. Return EvaluateDirectCall(func, thisValue, Arguments, tailCall).\n\n12.3.4.3 Runtime Semantics: EvaluateDirectCall\n\n1. Let argList be ArgumentListEvaluation(arguments).\n[...]\n6. Let result be Call(func, thisValue, argList).\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/call/spread-obj-mult-spread-getter.js", "description": " Multiple Object Spread usage calls getter multiple times (CallExpression)", "esid": " sec-function-calls-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "info": " |CallExpression : MemberExpression Arguments\n\n[...]\n9. Return EvaluateDirectCall(func, thisValue, Arguments, tailCall).\n\n12.3.4.3 Runtime Semantics: EvaluateDirectCall\n\n1. Let argList be ArgumentListEvaluation(arguments).\n[...]\n6. Let result be Call(func, thisValue, argList).\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/call/spread-obj-mult-spread.js", "description": " Multiple Object Spread operation (CallExpression)", "esid": " sec-function-calls-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "info": " |CallExpression : MemberExpression Arguments\n\n[...]\n9. Return EvaluateDirectCall(func, thisValue, Arguments, tailCall).\n\n12.3.4.3 Runtime Semantics: EvaluateDirectCall\n\n1. Let argList be ArgumentListEvaluation(arguments).\n[...]\n6. Let result be Call(func, thisValue, argList).\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/call/spread-obj-null.js", "description": " Null Object Spread is ignored (CallExpression)", "esid": " sec-function-calls-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "info": " |CallExpression : MemberExpression Arguments\n\n[...]\n9. Return EvaluateDirectCall(func, thisValue, Arguments, tailCall).\n\n12.3.4.3 Runtime Semantics: EvaluateDirectCall\n\n1. Let argList be ArgumentListEvaluation(arguments).\n[...]\n6. Let result be Call(func, thisValue, argList).\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/call/spread-obj-override-immutable.js", "description": " Object Spread overriding immutable properties (CallExpression)", "esid": " sec-function-calls-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |CallExpression : MemberExpression Arguments\n\n[...]\n9. Return EvaluateDirectCall(func, thisValue, Arguments, tailCall).\n\n12.3.4.3 Runtime Semantics: EvaluateDirectCall\n\n1. Let argList be ArgumentListEvaluation(arguments).\n[...]\n6. Let result be Call(func, thisValue, argList).\n[...]\n"}, {"path": "./test262-main/test/language/expressions/call/spread-obj-overrides-prev-properties.js", "description": " Object Spread properties overrides previous definitions (CallExpression)", "esid": " sec-function-calls-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "info": " |CallExpression : MemberExpression Arguments\n\n[...]\n9. Return EvaluateDirectCall(func, thisValue, Arguments, tailCall).\n\n12.3.4.3 Runtime Semantics: EvaluateDirectCall\n\n1. Let argList be ArgumentListEvaluation(arguments).\n[...]\n6. Let result be Call(func, thisValue, argList).\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/call/spread-obj-skip-non-enumerable.js", "description": " Object Spread doesn't copy non-enumerable properties (CallExpression)", "esid": " sec-function-calls-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "info": " |CallExpression : MemberExpression Arguments\n\n[...]\n9. Return EvaluateDirectCall(func, thisValue, Arguments, tailCall).\n\n12.3.4.3 Runtime Semantics: EvaluateDirectCall\n\n1. Let argList be ArgumentListEvaluation(arguments).\n[...]\n6. Let result be Call(func, thisValue, argList).\n[...]\n"}, {"path": "./test262-main/test/language/expressions/call/spread-obj-spread-order.js", "description": " Spread operation follows [[OwnPropertyKeys]] order (CallExpression)", "esid": " sec-function-calls-runtime-semantics-evaluation", "features": ["Symbol", "object-spread"], "flags": ["generated"], "includes": ["compareArray.js"], "info": " |CallExpression : MemberExpression Arguments\n\n[...]\n9. Return EvaluateDirectCall(func, thisValue, Arguments, tailCall).\n\n12.3.4.3 Runtime Semantics: EvaluateDirectCall\n\n1. Let argList be ArgumentListEvaluation(arguments).\n[...]\n6. Let result be Call(func, thisValue, argList).\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/call/spread-obj-symbol-property.js", "description": " Spread operation where source object contains Symbol properties (CallExpression)", "esid": " sec-function-calls-runtime-semantics-evaluation", "features": ["Symbol", "object-spread"], "flags": ["generated"], "info": " |CallExpression : MemberExpression Arguments\n\n[...]\n9. Return EvaluateDirectCall(func, thisValue, Arguments, tailCall).\n\n12.3.4.3 Runtime Semantics: EvaluateDirectCall\n\n1. Let argList be ArgumentListEvaluation(arguments).\n[...]\n6. Let result be Call(func, thisValue, argList).\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/call/spread-obj-undefined.js", "description": " Undefined Object Spread is ignored (CallExpression)", "esid": " sec-function-calls-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "info": " |CallExpression : MemberExpression Arguments\n\n[...]\n9. Return EvaluateDirectCall(func, thisValue, Arguments, tailCall).\n\n12.3.4.3 Runtime Semantics: EvaluateDirectCall\n\n1. Let argList be ArgumentListEvaluation(arguments).\n[...]\n6. Let result be Call(func, thisValue, argList).\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/call/spread-obj-with-overrides.js", "description": " Object Spread properties being overriden (CallExpression)", "esid": " sec-function-calls-runtime-semantics-evaluation", "features": ["Symbol", "object-spread"], "flags": ["generated"], "info": " |CallExpression : MemberExpression Arguments\n\n[...]\n9. Return EvaluateDirectCall(func, thisValue, Arguments, tailCall).\n\n12.3.4.3 Runtime Semantics: EvaluateDirectCall\n\n1. Let argList be ArgumentListEvaluation(arguments).\n[...]\n6. Let result be Call(func, thisValue, argList).\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/call/spread-sngl-obj-ident.js", "description": " Object Spread operator without other arguments (CallExpression)", "esid": " sec-function-calls-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |CallExpression : MemberExpression Arguments\n\n[...]\n9. Return EvaluateDirectCall(func, thisValue, Arguments, tailCall).\n\n12.3.4.3 Runtime Semantics: EvaluateDirectCall\n\n1. Let argList be ArgumentListEvaluation(arguments).\n[...]\n6. Let result be Call(func, thisValue, argList).\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/class/async-gen-method/dflt-params-abrupt.js", "description": " Abrupt completion returned by evaluation of initializer (class expression async generator method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["default-parameters", "async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n\n14.1.19 Runtime Semantics: IteratorBindingInitialization\n\nFormalsList : FormalsList , FormalParameter\n\n1. Let status be the result of performing IteratorBindingInitialization for\nFormalsList using iteratorRecord and environment as the arguments.\n2. ReturnIfAbrupt(status).\n3. Return the result of performing IteratorBindingInitialization for\nFormalParameter using iteratorRecord and environment as the arguments.\n\n"}, {"path": "./test262-main/test/language/expressions/class/async-gen-method/dflt-params-ref-later.js", "description": " Referencing a parameter that occurs later in the ParameterList (class expression async generator method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["default-parameters", "async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n\n14.1.19 Runtime Semantics: IteratorBindingInitialization\n\nFormalsList : FormalsList , FormalParameter\n\n1. Let status be the result of performing IteratorBindingInitialization for\nFormalsList using iteratorRecord and environment as the arguments.\n2. ReturnIfAbrupt(status).\n3. Return the result of performing IteratorBindingInitialization for\nFormalParameter using iteratorRecord and environment as the arguments.\n\n"}, {"path": "./test262-main/test/language/expressions/class/async-gen-method/dflt-params-ref-self.js", "description": " Referencing a parameter from within its own initializer (class expression async generator method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["default-parameters", "async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n\n14.1.19 Runtime Semantics: IteratorBindingInitialization\n\nFormalsList : FormalsList , FormalParameter\n\n1. Let status be the result of performing IteratorBindingInitialization for\nFormalsList using iteratorRecord and environment as the arguments.\n2. ReturnIfAbrupt(status).\n3. Return the result of performing IteratorBindingInitialization for\nFormalParameter using iteratorRecord and environment as the arguments.\n\n"}, {"path": "./test262-main/test/language/expressions/class/async-gen-method/yield-promise-reject-next-catch.js", "description": " yield Promise.reject(value) is treated as throw value (Async generator method as a ClassExpression element)", "esid": " prod-AsyncGeneratorMethod", "features": ["async-iteration"], "flags": ["generated", "async"], "info": " |ClassElement :\nMethodDefinition\n\nMethodDefinition :\nAsyncGeneratorMethod\n\nAsync Generator Function Definitions\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters ) { AsyncGeneratorBody }\n\n"}, {"path": "./test262-main/test/language/expressions/class/async-gen-method-static/dflt-params-abrupt.js", "description": " Abrupt completion returned by evaluation of initializer (static class expression async generator method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["default-parameters", "async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n\n14.1.19 Runtime Semantics: IteratorBindingInitialization\n\nFormalsList : FormalsList , FormalParameter\n\n1. Let status be the result of performing IteratorBindingInitialization for\nFormalsList using iteratorRecord and environment as the arguments.\n2. ReturnIfAbrupt(status).\n3. Return the result of performing IteratorBindingInitialization for\nFormalParameter using iteratorRecord and environment as the arguments.\n\n"}, {"path": "./test262-main/test/language/expressions/class/async-gen-method-static/dflt-params-ref-later.js", "description": " Referencing a parameter that occurs later in the ParameterList (static class expression async generator method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["default-parameters", "async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n\n14.1.19 Runtime Semantics: IteratorBindingInitialization\n\nFormalsList : FormalsList , FormalParameter\n\n1. Let status be the result of performing IteratorBindingInitialization for\nFormalsList using iteratorRecord and environment as the arguments.\n2. ReturnIfAbrupt(status).\n3. Return the result of performing IteratorBindingInitialization for\nFormalParameter using iteratorRecord and environment as the arguments.\n\n"}, {"path": "./test262-main/test/language/expressions/class/async-gen-method-static/dflt-params-ref-self.js", "description": " Referencing a parameter from within its own initializer (static class expression async generator method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["default-parameters", "async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n\n14.1.19 Runtime Semantics: IteratorBindingInitialization\n\nFormalsList : FormalsList , FormalParameter\n\n1. Let status be the result of performing IteratorBindingInitialization for\nFormalsList using iteratorRecord and environment as the arguments.\n2. ReturnIfAbrupt(status).\n3. Return the result of performing IteratorBindingInitialization for\nFormalParameter using iteratorRecord and environment as the arguments.\n\n"}, {"path": "./test262-main/test/language/expressions/class/async-gen-method-static/yield-promise-reject-next-catch.js", "description": " yield Promise.reject(value) is treated as throw value (Static async generator method as a ClassExpression element)", "esid": " prod-AsyncGeneratorMethod", "features": ["async-iteration"], "flags": ["generated", "async"], "info": " |ClassElement :\nstatic MethodDefinition\n\nMethodDefinition :\nAsyncGeneratorMethod\n\nAsync Generator Function Definitions\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters ) { AsyncGeneratorBody }\n\n"}, {"path": "./test262-main/test/language/expressions/class/class-name-ident-await-escaped.js", "esid": " sec-class-definitions", "description": " >`await` with escape sequence is a valid class-name identifier.\n", "info": " |12.1.1 Static Semantics: Early Errors\n\nIdentifier : IdentifierName but not ReservedWord\n\nIt is a Syntax Error if the goal symbol of the syntactic grammar is Module\nand the StringValue of IdentifierName is \"await\".\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-ary-init-iter-get-err-array-prototype.js", "description": " Abrupt completion returned by GetIterator (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\nRuntime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iteratorRecord be ? GetIterator(value).\n\nGetIterator ( obj [ , hint [ , method ] ] )\n\n[...]\n4. Let iterator be ? Call(method, obj).\n\nCall ( F, V [ , argumentsList ] )\n\n[...]\n2. If IsCallable(F) is false, throw a TypeError exception.\n\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-ary-init-iter-get-err.js", "description": " Abrupt completion returned by GetIterator (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iterator be GetIterator(value).\n2. ReturnIfAbrupt(iterator).\n\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-ary-ptrn-elem-ary-val-null.js", "description": " Nested array destructuring with a null value (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. If iteratorRecord.[[done]] is false, then\n[...]\ne. Else\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iterator be GetIterator(value).\n2. ReturnIfAbrupt(iterator).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-ary-ptrn-elem-id-init-throws.js", "description": " Destructuring initializer returns an abrupt completion (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-ary-ptrn-elem-id-init-unresolvable.js", "description": " Destructuring initializer is an unresolvable reference (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-ary-ptrn-elem-id-iter-step-err.js", "description": " Error forwarding when IteratorStep returns an abrupt completion (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-ary-ptrn-elem-id-iter-val-err.js", "description": " Error forwarding when IteratorValue returns an abrupt completion (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\nd. If next is false, set iteratorRecord.[[done]] to true.\ne. Else,\ni. Let v be IteratorValue(next).\nii. If v is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\niii. ReturnIfAbrupt(v).\n\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-ary-ptrn-elem-obj-val-null.js", "description": " Nested object destructuring with a null value (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. If iteratorRecord.[[done]] is false, then\n[...]\ne. Else\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ObjectBindingPattern\n\n1. Let valid be RequireObjectCoercible(value).\n2. ReturnIfAbrupt(valid).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-ary-ptrn-elem-obj-val-undef.js", "description": " Nested object destructuring with a value of `undefined` (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. If iteratorRecord.[[done]] is false, then\n[...]\ne. Else\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ObjectBindingPattern\n\n1. Let valid be RequireObjectCoercible(value).\n2. ReturnIfAbrupt(valid).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-ary-ptrn-elision-step-err.js", "description": " Elision advances iterator and forwards abrupt completions (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ Elision ]\n\n1. Return the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with iteratorRecord\nas the argument.\n\n12.14.5.3 Runtime Semantics: IteratorDestructuringAssignmentEvaluation\n\nElision : ,\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-ary-ptrn-rest-id-elision-next-err.js", "description": " Rest element following elision elements (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nArrayBindingPattern : [ Elisionopt BindingRestElement ]\n1. If Elision is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with\niteratorRecord as the argument.\nb. ReturnIfAbrupt(status).\n2. Return the result of performing IteratorBindingInitialization for\nBindingRestElement with iteratorRecord and environment as arguments.\n\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-ary-ptrn-rest-id-iter-step-err.js", "description": " Error forwarding when IteratorStep returns an abrupt completion (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\na. If iteratorRecord.[[done]] is false,\ni. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nii. If next is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\niii. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-ary-ptrn-rest-id-iter-val-err.js", "description": " Error forwarding when IteratorValue returns an abrupt completion (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\n[...]\nc. Let nextValue be IteratorValue(next).\nd. If nextValue is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\ne. ReturnIfAbrupt(nextValue).\n\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-dflt-ary-init-iter-get-err-array-prototype.js", "description": " Abrupt completion returned by GetIterator (class expression async generator method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\nRuntime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iteratorRecord be ? GetIterator(value).\n\nGetIterator ( obj [ , hint [ , method ] ] )\n\n[...]\n4. Let iterator be ? Call(method, obj).\n\nCall ( F, V [ , argumentsList ] )\n\n[...]\n2. If IsCallable(F) is false, throw a TypeError exception.\n\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-dflt-ary-init-iter-get-err.js", "description": " Abrupt completion returned by GetIterator (class expression async generator method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iterator be GetIterator(value).\n2. ReturnIfAbrupt(iterator).\n\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-dflt-ary-ptrn-elem-ary-val-null.js", "description": " Nested array destructuring with a null value (class expression async generator method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. If iteratorRecord.[[done]] is false, then\n[...]\ne. Else\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iterator be GetIterator(value).\n2. ReturnIfAbrupt(iterator).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-dflt-ary-ptrn-elem-id-init-throws.js", "description": " Destructuring initializer returns an abrupt completion (class expression async generator method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-dflt-ary-ptrn-elem-id-init-unresolvable.js", "description": " Destructuring initializer is an unresolvable reference (class expression async generator method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-dflt-ary-ptrn-elem-id-iter-step-err.js", "description": " Error forwarding when IteratorStep returns an abrupt completion (class expression async generator method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-dflt-ary-ptrn-elem-id-iter-val-err.js", "description": " Error forwarding when IteratorValue returns an abrupt completion (class expression async generator method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\nd. If next is false, set iteratorRecord.[[done]] to true.\ne. Else,\ni. Let v be IteratorValue(next).\nii. If v is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\niii. ReturnIfAbrupt(v).\n\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-dflt-ary-ptrn-elem-obj-val-null.js", "description": " Nested object destructuring with a null value (class expression async generator method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. If iteratorRecord.[[done]] is false, then\n[...]\ne. Else\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ObjectBindingPattern\n\n1. Let valid be RequireObjectCoercible(value).\n2. ReturnIfAbrupt(valid).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-dflt-ary-ptrn-elem-obj-val-undef.js", "description": " Nested object destructuring with a value of `undefined` (class expression async generator method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. If iteratorRecord.[[done]] is false, then\n[...]\ne. Else\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ObjectBindingPattern\n\n1. Let valid be RequireObjectCoercible(value).\n2. ReturnIfAbrupt(valid).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-dflt-ary-ptrn-elision-step-err.js", "description": " Elision advances iterator and forwards abrupt completions (class expression async generator method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ Elision ]\n\n1. Return the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with iteratorRecord\nas the argument.\n\n12.14.5.3 Runtime Semantics: IteratorDestructuringAssignmentEvaluation\n\nElision : ,\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-dflt-ary-ptrn-rest-id-elision-next-err.js", "description": " Rest element following elision elements (class expression async generator method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nArrayBindingPattern : [ Elisionopt BindingRestElement ]\n1. If Elision is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with\niteratorRecord as the argument.\nb. ReturnIfAbrupt(status).\n2. Return the result of performing IteratorBindingInitialization for\nBindingRestElement with iteratorRecord and environment as arguments.\n\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-dflt-ary-ptrn-rest-id-iter-step-err.js", "description": " Error forwarding when IteratorStep returns an abrupt completion (class expression async generator method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\na. If iteratorRecord.[[done]] is false,\ni. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nii. If next is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\niii. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-dflt-ary-ptrn-rest-id-iter-val-err.js", "description": " Error forwarding when IteratorValue returns an abrupt completion (class expression async generator method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\n[...]\nc. Let nextValue be IteratorValue(next).\nd. If nextValue is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\ne. ReturnIfAbrupt(nextValue).\n\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-dflt-obj-init-null.js", "description": " Value specifed for object binding pattern must be object coercible (null) (class expression async generator method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\nRuntime Semantics: BindingInitialization\n\nObjectBindingPattern : { }\n\n1. Return NormalCompletion(empty).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-dflt-obj-init-undefined.js", "description": " Value specifed for object binding pattern must be object coercible (undefined) (class expression async generator method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\nRuntime Semantics: BindingInitialization\n\nObjectBindingPattern : { }\n\n1. Return NormalCompletion(empty).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-dflt-obj-ptrn-id-get-value-err.js", "description": " Error thrown when accessing the corresponding property of the value object (class expression async generator method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. Let v be GetV(value, propertyName).\n5. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-dflt-obj-ptrn-id-init-throws.js", "description": " Error thrown when evaluating the initializer (class expression async generator method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. LetdefaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-dflt-obj-ptrn-id-init-unresolvable.js", "description": " Destructuring initializer is an unresolvable reference (class expression async generator method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-dflt-obj-ptrn-list-err.js", "description": " Binding property list evaluation is interrupted by an abrupt completion (class expression async generator method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPropertyList : BindingPropertyList , BindingProperty\n\n1. Let status be the result of performing BindingInitialization for\nBindingPropertyList using value and environment as arguments.\n2. ReturnIfAbrupt(status).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-dflt-obj-ptrn-prop-ary-value-null.js", "description": " Object binding pattern with \"nested\" array binding pattern taking the `null` value (class expression async generator method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-dflt-obj-ptrn-prop-eval-err.js", "description": " Evaluation of property name returns an abrupt completion (class expression async generator method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingProperty : PropertyName : BindingElement\n\n1. Let P be the result of evaluating PropertyName\n2. ReturnIfAbrupt(P).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-dflt-obj-ptrn-prop-id-get-value-err.js", "description": " Error thrown when accessing the corresponding property of the value object (class expression async generator method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. Let v be GetV(value, propertyName).\n2. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-dflt-obj-ptrn-prop-id-init-throws.js", "description": " Error thrown when evaluating the initializer (class expression async generator method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-dflt-obj-ptrn-prop-id-init-unresolvable.js", "description": " Destructuring initializer is an unresolvable reference (class expression async generator method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-dflt-obj-ptrn-prop-obj-value-null.js", "description": " Object binding pattern with \"nested\" object binding pattern taking the `null` value (class expression async generator method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-dflt-obj-ptrn-prop-obj-value-undef.js", "description": " Object binding pattern with \"nested\" object binding pattern taking the `null` value (class expression async generator method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-obj-init-null.js", "description": " Value specifed for object binding pattern must be object coercible (null) (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\nRuntime Semantics: BindingInitialization\n\nObjectBindingPattern : { }\n\n1. Return NormalCompletion(empty).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-obj-init-undefined.js", "description": " Value specifed for object binding pattern must be object coercible (undefined) (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\nRuntime Semantics: BindingInitialization\n\nObjectBindingPattern : { }\n\n1. Return NormalCompletion(empty).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-obj-ptrn-id-get-value-err.js", "description": " Error thrown when accessing the corresponding property of the value object (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. Let v be GetV(value, propertyName).\n5. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-obj-ptrn-id-init-throws.js", "description": " Error thrown when evaluating the initializer (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. LetdefaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-obj-ptrn-id-init-unresolvable.js", "description": " Destructuring initializer is an unresolvable reference (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-obj-ptrn-list-err.js", "description": " Binding property list evaluation is interrupted by an abrupt completion (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPropertyList : BindingPropertyList , BindingProperty\n\n1. Let status be the result of performing BindingInitialization for\nBindingPropertyList using value and environment as arguments.\n2. ReturnIfAbrupt(status).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-obj-ptrn-prop-ary-value-null.js", "description": " Object binding pattern with \"nested\" array binding pattern taking the `null` value (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-obj-ptrn-prop-eval-err.js", "description": " Evaluation of property name returns an abrupt completion (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingProperty : PropertyName : BindingElement\n\n1. Let P be the result of evaluating PropertyName\n2. ReturnIfAbrupt(P).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-obj-ptrn-prop-id-get-value-err.js", "description": " Error thrown when accessing the corresponding property of the value object (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. Let v be GetV(value, propertyName).\n2. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-obj-ptrn-prop-id-init-throws.js", "description": " Error thrown when evaluating the initializer (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-obj-ptrn-prop-id-init-unresolvable.js", "description": " Destructuring initializer is an unresolvable reference (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-obj-ptrn-prop-obj-value-null.js", "description": " Object binding pattern with \"nested\" object binding pattern taking the `null` value (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-obj-ptrn-prop-obj-value-undef.js", "description": " Object binding pattern with \"nested\" object binding pattern taking the `null` value (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-static-ary-init-iter-get-err-array-prototype.js", "description": " Abrupt completion returned by GetIterator (static class expression async generator method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\nRuntime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iteratorRecord be ? GetIterator(value).\n\nGetIterator ( obj [ , hint [ , method ] ] )\n\n[...]\n4. Let iterator be ? Call(method, obj).\n\nCall ( F, V [ , argumentsList ] )\n\n[...]\n2. If IsCallable(F) is false, throw a TypeError exception.\n\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-static-ary-init-iter-get-err.js", "description": " Abrupt completion returned by GetIterator (static class expression async generator method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iterator be GetIterator(value).\n2. ReturnIfAbrupt(iterator).\n\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-static-ary-ptrn-elem-ary-val-null.js", "description": " Nested array destructuring with a null value (static class expression async generator method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. If iteratorRecord.[[done]] is false, then\n[...]\ne. Else\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iterator be GetIterator(value).\n2. ReturnIfAbrupt(iterator).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-static-ary-ptrn-elem-id-init-throws.js", "description": " Destructuring initializer returns an abrupt completion (static class expression async generator method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-static-ary-ptrn-elem-id-init-unresolvable.js", "description": " Destructuring initializer is an unresolvable reference (static class expression async generator method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-static-ary-ptrn-elem-id-iter-step-err.js", "description": " Error forwarding when IteratorStep returns an abrupt completion (static class expression async generator method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-static-ary-ptrn-elem-id-iter-val-err.js", "description": " Error forwarding when IteratorValue returns an abrupt completion (static class expression async generator method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\nd. If next is false, set iteratorRecord.[[done]] to true.\ne. Else,\ni. Let v be IteratorValue(next).\nii. If v is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\niii. ReturnIfAbrupt(v).\n\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-static-ary-ptrn-elem-obj-val-null.js", "description": " Nested object destructuring with a null value (static class expression async generator method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. If iteratorRecord.[[done]] is false, then\n[...]\ne. Else\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ObjectBindingPattern\n\n1. Let valid be RequireObjectCoercible(value).\n2. ReturnIfAbrupt(valid).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-static-ary-ptrn-elem-obj-val-undef.js", "description": " Nested object destructuring with a value of `undefined` (static class expression async generator method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. If iteratorRecord.[[done]] is false, then\n[...]\ne. Else\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ObjectBindingPattern\n\n1. Let valid be RequireObjectCoercible(value).\n2. ReturnIfAbrupt(valid).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-static-ary-ptrn-elision-step-err.js", "description": " Elision advances iterator and forwards abrupt completions (static class expression async generator method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ Elision ]\n\n1. Return the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with iteratorRecord\nas the argument.\n\n12.14.5.3 Runtime Semantics: IteratorDestructuringAssignmentEvaluation\n\nElision : ,\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-static-ary-ptrn-rest-id-elision-next-err.js", "description": " Rest element following elision elements (static class expression async generator method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nArrayBindingPattern : [ Elisionopt BindingRestElement ]\n1. If Elision is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with\niteratorRecord as the argument.\nb. ReturnIfAbrupt(status).\n2. Return the result of performing IteratorBindingInitialization for\nBindingRestElement with iteratorRecord and environment as arguments.\n\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-static-ary-ptrn-rest-id-iter-step-err.js", "description": " Error forwarding when IteratorStep returns an abrupt completion (static class expression async generator method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\na. If iteratorRecord.[[done]] is false,\ni. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nii. If next is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\niii. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-static-ary-ptrn-rest-id-iter-val-err.js", "description": " Error forwarding when IteratorValue returns an abrupt completion (static class expression async generator method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\n[...]\nc. Let nextValue be IteratorValue(next).\nd. If nextValue is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\ne. ReturnIfAbrupt(nextValue).\n\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-static-dflt-ary-init-iter-get-err-array-prototype.js", "description": " Abrupt completion returned by GetIterator (static class expression async generator method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\nRuntime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iteratorRecord be ? GetIterator(value).\n\nGetIterator ( obj [ , hint [ , method ] ] )\n\n[...]\n4. Let iterator be ? Call(method, obj).\n\nCall ( F, V [ , argumentsList ] )\n\n[...]\n2. If IsCallable(F) is false, throw a TypeError exception.\n\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-static-dflt-ary-init-iter-get-err.js", "description": " Abrupt completion returned by GetIterator (static class expression async generator method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iterator be GetIterator(value).\n2. ReturnIfAbrupt(iterator).\n\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-static-dflt-ary-ptrn-elem-ary-val-null.js", "description": " Nested array destructuring with a null value (static class expression async generator method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. If iteratorRecord.[[done]] is false, then\n[...]\ne. Else\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iterator be GetIterator(value).\n2. ReturnIfAbrupt(iterator).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-static-dflt-ary-ptrn-elem-id-init-throws.js", "description": " Destructuring initializer returns an abrupt completion (static class expression async generator method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-static-dflt-ary-ptrn-elem-id-init-unresolvable.js", "description": " Destructuring initializer is an unresolvable reference (static class expression async generator method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-static-dflt-ary-ptrn-elem-id-iter-step-err.js", "description": " Error forwarding when IteratorStep returns an abrupt completion (static class expression async generator method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-static-dflt-ary-ptrn-elem-id-iter-val-err.js", "description": " Error forwarding when IteratorValue returns an abrupt completion (static class expression async generator method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\nd. If next is false, set iteratorRecord.[[done]] to true.\ne. Else,\ni. Let v be IteratorValue(next).\nii. If v is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\niii. ReturnIfAbrupt(v).\n\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-static-dflt-ary-ptrn-elem-obj-val-null.js", "description": " Nested object destructuring with a null value (static class expression async generator method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. If iteratorRecord.[[done]] is false, then\n[...]\ne. Else\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ObjectBindingPattern\n\n1. Let valid be RequireObjectCoercible(value).\n2. ReturnIfAbrupt(valid).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-static-dflt-ary-ptrn-elem-obj-val-undef.js", "description": " Nested object destructuring with a value of `undefined` (static class expression async generator method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. If iteratorRecord.[[done]] is false, then\n[...]\ne. Else\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ObjectBindingPattern\n\n1. Let valid be RequireObjectCoercible(value).\n2. ReturnIfAbrupt(valid).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-static-dflt-ary-ptrn-elision-step-err.js", "description": " Elision advances iterator and forwards abrupt completions (static class expression async generator method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ Elision ]\n\n1. Return the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with iteratorRecord\nas the argument.\n\n12.14.5.3 Runtime Semantics: IteratorDestructuringAssignmentEvaluation\n\nElision : ,\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-static-dflt-ary-ptrn-rest-id-elision-next-err.js", "description": " Rest element following elision elements (static class expression async generator method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nArrayBindingPattern : [ Elisionopt BindingRestElement ]\n1. If Elision is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with\niteratorRecord as the argument.\nb. ReturnIfAbrupt(status).\n2. Return the result of performing IteratorBindingInitialization for\nBindingRestElement with iteratorRecord and environment as arguments.\n\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-static-dflt-ary-ptrn-rest-id-iter-step-err.js", "description": " Error forwarding when IteratorStep returns an abrupt completion (static class expression async generator method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\na. If iteratorRecord.[[done]] is false,\ni. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nii. If next is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\niii. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-static-dflt-ary-ptrn-rest-id-iter-val-err.js", "description": " Error forwarding when IteratorValue returns an abrupt completion (static class expression async generator method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\n[...]\nc. Let nextValue be IteratorValue(next).\nd. If nextValue is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\ne. ReturnIfAbrupt(nextValue).\n\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-static-dflt-obj-init-null.js", "description": " Value specifed for object binding pattern must be object coercible (null) (static class expression async generator method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\nRuntime Semantics: BindingInitialization\n\nObjectBindingPattern : { }\n\n1. Return NormalCompletion(empty).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-static-dflt-obj-init-undefined.js", "description": " Value specifed for object binding pattern must be object coercible (undefined) (static class expression async generator method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\nRuntime Semantics: BindingInitialization\n\nObjectBindingPattern : { }\n\n1. Return NormalCompletion(empty).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-static-dflt-obj-ptrn-id-get-value-err.js", "description": " Error thrown when accessing the corresponding property of the value object (static class expression async generator method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. Let v be GetV(value, propertyName).\n5. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-static-dflt-obj-ptrn-id-init-throws.js", "description": " Error thrown when evaluating the initializer (static class expression async generator method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. LetdefaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-static-dflt-obj-ptrn-id-init-unresolvable.js", "description": " Destructuring initializer is an unresolvable reference (static class expression async generator method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-static-dflt-obj-ptrn-list-err.js", "description": " Binding property list evaluation is interrupted by an abrupt completion (static class expression async generator method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPropertyList : BindingPropertyList , BindingProperty\n\n1. Let status be the result of performing BindingInitialization for\nBindingPropertyList using value and environment as arguments.\n2. ReturnIfAbrupt(status).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-static-dflt-obj-ptrn-prop-ary-value-null.js", "description": " Object binding pattern with \"nested\" array binding pattern taking the `null` value (static class expression async generator method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-static-dflt-obj-ptrn-prop-eval-err.js", "description": " Evaluation of property name returns an abrupt completion (static class expression async generator method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingProperty : PropertyName : BindingElement\n\n1. Let P be the result of evaluating PropertyName\n2. ReturnIfAbrupt(P).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-static-dflt-obj-ptrn-prop-id-get-value-err.js", "description": " Error thrown when accessing the corresponding property of the value object (static class expression async generator method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. Let v be GetV(value, propertyName).\n2. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-static-dflt-obj-ptrn-prop-id-init-throws.js", "description": " Error thrown when evaluating the initializer (static class expression async generator method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-static-dflt-obj-ptrn-prop-id-init-unresolvable.js", "description": " Destructuring initializer is an unresolvable reference (static class expression async generator method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-static-dflt-obj-ptrn-prop-obj-value-null.js", "description": " Object binding pattern with \"nested\" object binding pattern taking the `null` value (static class expression async generator method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-static-dflt-obj-ptrn-prop-obj-value-undef.js", "description": " Object binding pattern with \"nested\" object binding pattern taking the `null` value (static class expression async generator method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-static-obj-init-null.js", "description": " Value specifed for object binding pattern must be object coercible (null) (static class expression async generator method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\nRuntime Semantics: BindingInitialization\n\nObjectBindingPattern : { }\n\n1. Return NormalCompletion(empty).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-static-obj-init-undefined.js", "description": " Value specifed for object binding pattern must be object coercible (undefined) (static class expression async generator method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\nRuntime Semantics: BindingInitialization\n\nObjectBindingPattern : { }\n\n1. Return NormalCompletion(empty).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-static-obj-ptrn-id-get-value-err.js", "description": " Error thrown when accessing the corresponding property of the value object (static class expression async generator method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. Let v be GetV(value, propertyName).\n5. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-static-obj-ptrn-id-init-throws.js", "description": " Error thrown when evaluating the initializer (static class expression async generator method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. LetdefaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-static-obj-ptrn-id-init-unresolvable.js", "description": " Destructuring initializer is an unresolvable reference (static class expression async generator method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-static-obj-ptrn-list-err.js", "description": " Binding property list evaluation is interrupted by an abrupt completion (static class expression async generator method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPropertyList : BindingPropertyList , BindingProperty\n\n1. Let status be the result of performing BindingInitialization for\nBindingPropertyList using value and environment as arguments.\n2. ReturnIfAbrupt(status).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-static-obj-ptrn-prop-ary-value-null.js", "description": " Object binding pattern with \"nested\" array binding pattern taking the `null` value (static class expression async generator method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-static-obj-ptrn-prop-eval-err.js", "description": " Evaluation of property name returns an abrupt completion (static class expression async generator method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingProperty : PropertyName : BindingElement\n\n1. Let P be the result of evaluating PropertyName\n2. ReturnIfAbrupt(P).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-static-obj-ptrn-prop-id-get-value-err.js", "description": " Error thrown when accessing the corresponding property of the value object (static class expression async generator method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. Let v be GetV(value, propertyName).\n2. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-static-obj-ptrn-prop-id-init-throws.js", "description": " Error thrown when evaluating the initializer (static class expression async generator method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-static-obj-ptrn-prop-id-init-unresolvable.js", "description": " Destructuring initializer is an unresolvable reference (static class expression async generator method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-static-obj-ptrn-prop-obj-value-null.js", "description": " Object binding pattern with \"nested\" object binding pattern taking the `null` value (static class expression async generator method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/async-gen-meth-static-obj-ptrn-prop-obj-value-undef.js", "description": " Object binding pattern with \"nested\" object binding pattern taking the `null` value (static class expression async generator method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/gen-meth-ary-init-iter-close.js", "description": " Iterator is closed when not exhausted by pattern evaluation (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n[...]\n4. If iteratorRecord.[[done]] is false, return ? IteratorClose(iterator,\nresult).\n[...]\n\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/gen-meth-ary-ptrn-elem-id-init-fn-name-arrow.js", "description": " SingleNameBinding does assign name to arrow functions (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/gen-meth-ary-ptrn-elem-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/gen-meth-ary-ptrn-elem-id-init-fn-name-cover.js", "description": " SingleNameBinding does assign name to \"anonymous\" functions \"through\" cover grammar (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/gen-meth-ary-ptrn-elem-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/gen-meth-ary-ptrn-elem-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/gen-meth-dflt-ary-init-iter-close.js", "description": " Iterator is closed when not exhausted by pattern evaluation (class expression method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n[...]\n4. If iteratorRecord.[[done]] is false, return ? IteratorClose(iterator,\nresult).\n[...]\n\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/gen-meth-dflt-ary-ptrn-elem-id-init-fn-name-arrow.js", "description": " SingleNameBinding does assign name to arrow functions (class expression method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/gen-meth-dflt-ary-ptrn-elem-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (class expression method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/gen-meth-dflt-ary-ptrn-elem-id-init-fn-name-cover.js", "description": " SingleNameBinding does assign name to \"anonymous\" functions \"through\" cover grammar (class expression method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/gen-meth-dflt-ary-ptrn-elem-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (class expression method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/gen-meth-dflt-ary-ptrn-elem-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (class expression method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/gen-meth-dflt-obj-ptrn-id-init-fn-name-arrow.js", "description": " SingleNameBinding assigns `name` to arrow functions (class expression method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/gen-meth-dflt-obj-ptrn-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (class expression method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/gen-meth-dflt-obj-ptrn-id-init-fn-name-cover.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" functions \"through\" cover grammar (class expression method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/gen-meth-dflt-obj-ptrn-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (class expression method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/gen-meth-dflt-obj-ptrn-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (class expression method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/gen-meth-dflt-obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (class expression method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["object-rest", "generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/gen-meth-dflt-obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (class expression method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["object-rest", "generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/gen-meth-dflt-obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (class expression method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["object-rest", "generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/gen-meth-obj-ptrn-id-init-fn-name-arrow.js", "description": " SingleNameBinding assigns `name` to arrow functions (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/gen-meth-obj-ptrn-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/gen-meth-obj-ptrn-id-init-fn-name-cover.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" functions \"through\" cover grammar (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/gen-meth-obj-ptrn-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/gen-meth-obj-ptrn-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/gen-meth-obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["object-rest", "generators", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/gen-meth-obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["object-rest", "generators", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/gen-meth-obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["object-rest", "generators", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/gen-meth-static-ary-init-iter-close.js", "description": " Iterator is closed when not exhausted by pattern evaluation (static class expression generator method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n[...]\n4. If iteratorRecord.[[done]] is false, return ? IteratorClose(iterator,\nresult).\n[...]\n\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/gen-meth-static-ary-ptrn-elem-id-init-fn-name-arrow.js", "description": " SingleNameBinding does assign name to arrow functions (static class expression generator method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/gen-meth-static-ary-ptrn-elem-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (static class expression generator method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/gen-meth-static-ary-ptrn-elem-id-init-fn-name-cover.js", "description": " SingleNameBinding does assign name to \"anonymous\" functions \"through\" cover grammar (static class expression generator method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/gen-meth-static-ary-ptrn-elem-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (static class expression generator method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/gen-meth-static-ary-ptrn-elem-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (static class expression generator method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/gen-meth-static-dflt-ary-init-iter-close.js", "description": " Iterator is closed when not exhausted by pattern evaluation (static class expression generator method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n[...]\n4. If iteratorRecord.[[done]] is false, return ? IteratorClose(iterator,\nresult).\n[...]\n\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/gen-meth-static-dflt-ary-ptrn-elem-id-init-fn-name-arrow.js", "description": " SingleNameBinding does assign name to arrow functions (static class expression generator method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/gen-meth-static-dflt-ary-ptrn-elem-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (static class expression generator method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/gen-meth-static-dflt-ary-ptrn-elem-id-init-fn-name-cover.js", "description": " SingleNameBinding does assign name to \"anonymous\" functions \"through\" cover grammar (static class expression generator method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/gen-meth-static-dflt-ary-ptrn-elem-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (static class expression generator method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/gen-meth-static-dflt-ary-ptrn-elem-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (static class expression generator method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/gen-meth-static-dflt-obj-ptrn-id-init-fn-name-arrow.js", "description": " SingleNameBinding assigns `name` to arrow functions (static class expression generator method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/gen-meth-static-dflt-obj-ptrn-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (static class expression generator method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/gen-meth-static-dflt-obj-ptrn-id-init-fn-name-cover.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" functions \"through\" cover grammar (static class expression generator method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/gen-meth-static-dflt-obj-ptrn-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (static class expression generator method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/gen-meth-static-dflt-obj-ptrn-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (static class expression generator method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/gen-meth-static-dflt-obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (static class expression generator method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["object-rest", "generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/gen-meth-static-dflt-obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (static class expression generator method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["object-rest", "generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/gen-meth-static-dflt-obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (static class expression generator method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["object-rest", "generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/gen-meth-static-obj-ptrn-id-init-fn-name-arrow.js", "description": " SingleNameBinding assigns `name` to arrow functions (static class expression generator method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/gen-meth-static-obj-ptrn-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (static class expression generator method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/gen-meth-static-obj-ptrn-id-init-fn-name-cover.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" functions \"through\" cover grammar (static class expression generator method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/gen-meth-static-obj-ptrn-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (static class expression generator method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/gen-meth-static-obj-ptrn-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (static class expression generator method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/gen-meth-static-obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (static class expression generator method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["object-rest", "generators", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/gen-meth-static-obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (static class expression generator method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["object-rest", "generators", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/gen-meth-static-obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (static class expression generator method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["object-rest", "generators", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation\nfor m with arguments F and false.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/meth-ary-init-iter-close.js", "description": " Iterator is closed when not exhausted by pattern evaluation (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n[...]\n4. If iteratorRecord.[[done]] is false, return ? IteratorClose(iterator,\nresult).\n[...]\n\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/meth-ary-ptrn-elem-id-init-fn-name-arrow.js", "description": " SingleNameBinding does assign name to arrow functions (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/meth-ary-ptrn-elem-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/meth-ary-ptrn-elem-id-init-fn-name-cover.js", "description": " SingleNameBinding does assign name to \"anonymous\" functions \"through\" cover grammar (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/meth-ary-ptrn-elem-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/meth-ary-ptrn-elem-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/meth-dflt-ary-init-iter-close.js", "description": " Iterator is closed when not exhausted by pattern evaluation (class expression method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n[...]\n4. If iteratorRecord.[[done]] is false, return ? IteratorClose(iterator,\nresult).\n[...]\n\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/meth-dflt-ary-ptrn-elem-id-init-fn-name-arrow.js", "description": " SingleNameBinding does assign name to arrow functions (class expression method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/meth-dflt-ary-ptrn-elem-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (class expression method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/meth-dflt-ary-ptrn-elem-id-init-fn-name-cover.js", "description": " SingleNameBinding does assign name to \"anonymous\" functions \"through\" cover grammar (class expression method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/meth-dflt-ary-ptrn-elem-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (class expression method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/meth-dflt-ary-ptrn-elem-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (class expression method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/meth-dflt-obj-ptrn-id-init-fn-name-arrow.js", "description": " SingleNameBinding assigns `name` to arrow functions (class expression method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/meth-dflt-obj-ptrn-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (class expression method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/meth-dflt-obj-ptrn-id-init-fn-name-cover.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" functions \"through\" cover grammar (class expression method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/meth-dflt-obj-ptrn-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (class expression method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/meth-dflt-obj-ptrn-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (class expression method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/meth-dflt-obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (class expression method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/meth-dflt-obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (class expression method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/meth-dflt-obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (class expression method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/meth-obj-ptrn-id-init-fn-name-arrow.js", "description": " SingleNameBinding assigns `name` to arrow functions (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/meth-obj-ptrn-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/meth-obj-ptrn-id-init-fn-name-cover.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" functions \"through\" cover grammar (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/meth-obj-ptrn-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/meth-obj-ptrn-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/meth-obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/meth-obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/meth-obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/meth-static-ary-init-iter-close.js", "description": " Iterator is closed when not exhausted by pattern evaluation (static class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n[...]\n4. If iteratorRecord.[[done]] is false, return ? IteratorClose(iterator,\nresult).\n[...]\n\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/meth-static-ary-ptrn-elem-id-init-fn-name-arrow.js", "description": " SingleNameBinding does assign name to arrow functions (static class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/meth-static-ary-ptrn-elem-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (static class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/meth-static-ary-ptrn-elem-id-init-fn-name-cover.js", "description": " SingleNameBinding does assign name to \"anonymous\" functions \"through\" cover grammar (static class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/meth-static-ary-ptrn-elem-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (static class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/meth-static-ary-ptrn-elem-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (static class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/meth-static-dflt-ary-init-iter-close.js", "description": " Iterator is closed when not exhausted by pattern evaluation (static class expression method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n[...]\n4. If iteratorRecord.[[done]] is false, return ? IteratorClose(iterator,\nresult).\n[...]\n\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/meth-static-dflt-ary-ptrn-elem-id-init-fn-name-arrow.js", "description": " SingleNameBinding does assign name to arrow functions (static class expression method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/meth-static-dflt-ary-ptrn-elem-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (static class expression method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/meth-static-dflt-ary-ptrn-elem-id-init-fn-name-cover.js", "description": " SingleNameBinding does assign name to \"anonymous\" functions \"through\" cover grammar (static class expression method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/meth-static-dflt-ary-ptrn-elem-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (static class expression method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/meth-static-dflt-ary-ptrn-elem-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (static class expression method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/meth-static-dflt-obj-ptrn-id-init-fn-name-arrow.js", "description": " SingleNameBinding assigns `name` to arrow functions (static class expression method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/meth-static-dflt-obj-ptrn-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (static class expression method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/meth-static-dflt-obj-ptrn-id-init-fn-name-cover.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" functions \"through\" cover grammar (static class expression method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/meth-static-dflt-obj-ptrn-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (static class expression method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/meth-static-dflt-obj-ptrn-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (static class expression method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/meth-static-dflt-obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (static class expression method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/meth-static-dflt-obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (static class expression method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/meth-static-dflt-obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (static class expression method (default parameter))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/meth-static-obj-ptrn-id-init-fn-name-arrow.js", "description": " SingleNameBinding assigns `name` to arrow functions (static class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/meth-static-obj-ptrn-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (static class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/meth-static-obj-ptrn-id-init-fn-name-cover.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" functions \"through\" cover grammar (static class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/meth-static-obj-ptrn-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (static class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/meth-static-obj-ptrn-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (static class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/meth-static-obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (static class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/meth-static-obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (static class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/class/dstr/meth-static-obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (static class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassExpression : class BindingIdentifieropt ClassTail\n\n1. If BindingIdentifieropt is not present, let className be undefined.\n2. Else, let className be StringValue of BindingIdentifier.\n3. Let value be the result of ClassDefinitionEvaluation of ClassTail\nwith argument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/class/elements/syntax/valid/grammar-special-prototype-async-gen-meth-valid.js", "description": " Async Generator Methods can be named \"prototype\" (class expression)", "esid": " prod-ClassElement", "features": ["async-iteration", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |Runtime Semantics: ClassDefinitionEvaluation\n\nClassTail : ClassHeritage_opt { ClassBody_opt }\n\n[...]\n6. Let proto be OrdinaryObjectCreate(protoParent).\n[...]\n14. Perform MakeConstructor(F, false, proto).\n[...]\n20. For each ClassElement m in order from methods, do\na. If IsStatic of m is false, then\ni. Let status be PropertyDefinitionEvaluation of m with arguments proto and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nWith parameters object and enumerable.\n\nAsyncGeneratorMethod : async * PropertyName ( UniqueFormalParameters ) { AsyncGeneratorBody }\n\n[...]\n10. Let desc be PropertyDescriptor { [[Value]]: closure, [[Writable]]: true, [[Enumerable]]: enumerable, [[Configurable]]: true }.\n11. Return ? DefinePropertyOrThrow(object, propKey, desc).\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/syntax/valid/grammar-static-ctor-async-gen-meth-valid.js", "description": " Static Async Generator Methods can be named constructor (class expression)", "esid": " prod-ClassElement", "features": ["async-iteration", "class"], "flags": ["generated"], "info": " |Class Definitions / Static Semantics: Early Errors\n\nClassElement : MethodDefinition\nIt is a Syntax Error if PropName of MethodDefinition is not \"constructor\" and HasDirectSuper of MethodDefinition is true.\nIt is a Syntax Error if PropName of MethodDefinition is \"constructor\" and SpecialMethod of MethodDefinition is true.\nClassElement : static MethodDefinition\nIt is a Syntax Error if HasDirectSuper of MethodDefinition is true.\nIt is a Syntax Error if PropName of MethodDefinition is \"prototype\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/gen-method/yield-spread-obj.js", "description": " Use yield value in a object spread position (Generator method as a ClassExpression element)", "esid": " prod-GeneratorMethod", "features": ["object-spread", "generators"], "flags": ["generated"], "info": " |ClassElement :\nMethodDefinition\n\nMethodDefinition :\nGeneratorMethod\n\n14.4 Generator Function Definitions\n\nGeneratorMethod :\n* PropertyName ( UniqueFormalParameters ) { GeneratorBody }\n\n\nSpread Properties\n\nPropertyDefinition[Yield]:\n(...)\n...AssignmentExpression[In, ?Yield]\n\n"}, {"path": "./test262-main/test/language/expressions/class/gen-method-static/yield-spread-obj.js", "description": " Use yield value in a object spread position (Static generator method as a ClassExpression element)", "esid": " prod-GeneratorMethod", "features": ["object-spread", "generators"], "flags": ["generated"], "info": " |ClassElement :\nstatic MethodDefinition\n\nMethodDefinition :\nGeneratorMethod\n\n14.4 Generator Function Definitions\n\nGeneratorMethod :\n* PropertyName ( UniqueFormalParameters ) { GeneratorBody }\n\n\nSpread Properties\n\nPropertyDefinition[Yield]:\n(...)\n...AssignmentExpression[In, ?Yield]\n\n"}, {"path": "./test262-main/test/language/expressions/class/subclass-builtins/subclass-SharedArrayBuffer.js", "description": " new SubSharedArrayBuffer() instanceof SharedArrayBuffer (Subclass instanceof Heritage)", "features": ["SharedArrayBuffer"], "flags": ["generated"]}, {"path": "./test262-main/test/language/expressions/function/dstr/ary-init-iter-close.js", "description": " Iterator is closed when not exhausted by pattern evaluation (function expression)", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n[...]\n4. If iteratorRecord.[[done]] is false, return ? IteratorClose(iterator,\nresult).\n[...]\n\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/ary-ptrn-elem-id-init-fn-name-arrow.js", "description": " SingleNameBinding does assign name to arrow functions (function expression)", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/ary-ptrn-elem-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (function expression)", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/ary-ptrn-elem-id-init-fn-name-cover.js", "description": " SingleNameBinding does assign name to \"anonymous\" functions \"through\" cover grammar (function expression)", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/ary-ptrn-elem-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (function expression)", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/ary-ptrn-elem-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (function expression)", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/dflt-ary-init-iter-close.js", "description": " Iterator is closed when not exhausted by pattern evaluation (function expression (default parameter))", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n[...]\n4. If iteratorRecord.[[done]] is false, return ? IteratorClose(iterator,\nresult).\n[...]\n\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/dflt-ary-ptrn-elem-id-init-fn-name-arrow.js", "description": " SingleNameBinding does assign name to arrow functions (function expression (default parameter))", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/dflt-ary-ptrn-elem-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (function expression (default parameter))", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/dflt-ary-ptrn-elem-id-init-fn-name-cover.js", "description": " SingleNameBinding does assign name to \"anonymous\" functions \"through\" cover grammar (function expression (default parameter))", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/dflt-ary-ptrn-elem-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (function expression (default parameter))", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/dflt-ary-ptrn-elem-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (function expression (default parameter))", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/dflt-obj-ptrn-id-init-fn-name-arrow.js", "description": " SingleNameBinding assigns `name` to arrow functions (function expression (default parameter))", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/dflt-obj-ptrn-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (function expression (default parameter))", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/dflt-obj-ptrn-id-init-fn-name-cover.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" functions \"through\" cover grammar (function expression (default parameter))", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/dflt-obj-ptrn-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (function expression (default parameter))", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/dflt-obj-ptrn-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (function expression (default parameter))", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/dflt-obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (function expression (default parameter))", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/dflt-obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (function expression (default parameter))", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/dflt-obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (function expression (default parameter))", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/obj-ptrn-id-init-fn-name-arrow.js", "description": " SingleNameBinding assigns `name` to arrow functions (function expression)", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/obj-ptrn-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (function expression)", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/obj-ptrn-id-init-fn-name-cover.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" functions \"through\" cover grammar (function expression)", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/obj-ptrn-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (function expression)", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/obj-ptrn-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (function expression)", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (function expression)", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (function expression)", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (function expression)", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/ary-init-iter-close.js", "description": " Iterator is closed when not exhausted by pattern evaluation (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n[...]\n4. If iteratorRecord.[[done]] is false, return ? IteratorClose(iterator,\nresult).\n[...]\n\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/ary-ptrn-elem-id-init-fn-name-arrow.js", "description": " SingleNameBinding does assign name to arrow functions (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/ary-ptrn-elem-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/ary-ptrn-elem-id-init-fn-name-cover.js", "description": " SingleNameBinding does assign name to \"anonymous\" functions \"through\" cover grammar (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/ary-ptrn-elem-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/ary-ptrn-elem-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/dflt-ary-init-iter-close.js", "description": " Iterator is closed when not exhausted by pattern evaluation (generator function expression (default parameter))", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n[...]\n4. If iteratorRecord.[[done]] is false, return ? IteratorClose(iterator,\nresult).\n[...]\n\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/dflt-ary-ptrn-elem-id-init-fn-name-arrow.js", "description": " SingleNameBinding does assign name to arrow functions (generator function expression (default parameter))", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/dflt-ary-ptrn-elem-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (generator function expression (default parameter))", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/dflt-ary-ptrn-elem-id-init-fn-name-cover.js", "description": " SingleNameBinding does assign name to \"anonymous\" functions \"through\" cover grammar (generator function expression (default parameter))", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/dflt-ary-ptrn-elem-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (generator function expression (default parameter))", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/dflt-ary-ptrn-elem-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (generator function expression (default parameter))", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/dflt-obj-ptrn-id-init-fn-name-arrow.js", "description": " SingleNameBinding assigns `name` to arrow functions (generator function expression (default parameter))", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/dflt-obj-ptrn-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (generator function expression (default parameter))", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/dflt-obj-ptrn-id-init-fn-name-cover.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" functions \"through\" cover grammar (generator function expression (default parameter))", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/dflt-obj-ptrn-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (generator function expression (default parameter))", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/dflt-obj-ptrn-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (generator function expression (default parameter))", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/dflt-obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (generator function expression (default parameter))", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["object-rest", "generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/dflt-obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (generator function expression (default parameter))", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["object-rest", "generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/dflt-obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (generator function expression (default parameter))", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["object-rest", "generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/obj-ptrn-id-init-fn-name-arrow.js", "description": " SingleNameBinding assigns `name` to arrow functions (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/obj-ptrn-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/obj-ptrn-id-init-fn-name-cover.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" functions \"through\" cover grammar (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/obj-ptrn-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/obj-ptrn-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["object-rest", "generators", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["object-rest", "generators", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["object-rest", "generators", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/generators/implicit-name.js", "info": " |Generator can be declared with GeneratorExpression syntax\n", "version": 6, "esid": " 14.4", "author": " Sam Mikes", "description": " can create generator function expressions (no name)", "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/generators/named-yield-identifier-spread-non-strict.js", "description": " Mixed use of object spread and yield as a valid identifier in a function body inside a generator body in non strict mode (Generator named expression - valid for non-strict only cases)", "esid": " prod-GeneratorExpression", "features": ["Symbol", "object-spread", "generators"], "flags": ["generated", "noStrict"], "info": " |14.4 Generator Function Definitions\n\nGeneratorExpression:\nfunction * BindingIdentifier opt ( FormalParameters ) { GeneratorBody }\n\n\nSpread Properties\n\nPropertyDefinition[Yield]:\n(...)\n...AssignmentExpression[In, ?Yield]\n\n"}, {"path": "./test262-main/test/language/expressions/generators/named-yield-spread-obj.js", "description": " Use yield value in a object spread position (Named generator expression)", "esid": " prod-GeneratorExpression", "features": ["object-spread", "generators"], "flags": ["generated"], "info": " |14.4 Generator Function Definitions\n\nGeneratorExpression:\nfunction * BindingIdentifier opt ( FormalParameters ) { GeneratorBody }\n\n\nSpread Properties\n\nPropertyDefinition[Yield]:\n(...)\n...AssignmentExpression[In, ?Yield]\n\n"}, {"path": "./test262-main/test/language/expressions/generators/yield-identifier-spread-non-strict.js", "description": " Mixed use of object spread and yield as a valid identifier in a function body inside a generator body in non strict mode (Generator expression - valid for non-strict only cases)", "esid": " prod-GeneratorExpression", "features": ["Symbol", "object-spread", "generators"], "flags": ["generated", "noStrict"], "info": " |14.4 Generator Function Definitions\n\nGeneratorExpression:\nfunction * BindingIdentifier opt ( FormalParameters ) { GeneratorBody }\n\n\nSpread Properties\n\nPropertyDefinition[Yield]:\n(...)\n...AssignmentExpression[In, ?Yield]\n\n"}, {"path": "./test262-main/test/language/expressions/generators/yield-spread-obj.js", "description": " Use yield value in a object spread position (Unnamed generator expression)", "esid": " prod-GeneratorExpression", "features": ["object-spread", "generators"], "flags": ["generated"], "info": " |14.4 Generator Function Definitions\n\nGeneratorExpression:\nfunction * BindingIdentifier opt ( FormalParameters ) { GeneratorBody }\n\n\nSpread Properties\n\nPropertyDefinition[Yield]:\n(...)\n...AssignmentExpression[In, ?Yield]\n\n"}, {"path": "./test262-main/test/language/expressions/import.meta/syntax/goal-async-generator-params-or-body.js", "esid": " sec-left-hand-side-expressions-static-semantics-early-errors", "description": " >An Syntax Error is thrown when the syntactic goal symbol is AsyncGeneratorBody or FormalParameters.\n", "info": " |It is an early Syntax Error if Module is not the syntactic goal symbol.\n", "features": ["import.meta", "async-iteration"]}, {"path": "./test262-main/test/language/expressions/new/spread-err-mult-err-obj-unresolvable.js", "description": " Object Spread operator results in error when using an unresolvable reference (`new` operator)", "esid": " sec-new-operator-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "info": " |MemberExpression : new MemberExpression Arguments\n\n1. Return EvaluateNew(MemberExpression, Arguments).\n\n12.3.3.1.1 Runtime Semantics: EvaluateNew\n\n6. If arguments is empty, let argList be an empty List.\n7. Else,\na. Let argList be ArgumentListEvaluation of arguments.\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/new/spread-err-sngl-err-obj-unresolvable.js", "description": " Object Spread operator results in error when using an unresolvable reference (`new` operator)", "esid": " sec-new-operator-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "info": " |MemberExpression : new MemberExpression Arguments\n\n1. Return EvaluateNew(MemberExpression, Arguments).\n\n12.3.3.1.1 Runtime Semantics: EvaluateNew\n\n6. If arguments is empty, let argList be an empty List.\n7. Else,\na. Let argList be ArgumentListEvaluation of arguments.\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/new/spread-mult-obj-ident.js", "description": " Object Spread operator following other properties (`new` operator)", "esid": " sec-new-operator-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |MemberExpression : new MemberExpression Arguments\n\n1. Return EvaluateNew(MemberExpression, Arguments).\n\n12.3.3.1.1 Runtime Semantics: EvaluateNew\n\n6. If arguments is empty, let argList be an empty List.\n7. Else,\na. Let argList be ArgumentListEvaluation of arguments.\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/new/spread-mult-obj-null.js", "description": " Object Spread operator following other arguments with null value (`new` operator)", "esid": " sec-new-operator-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "info": " |MemberExpression : new MemberExpression Arguments\n\n1. Return EvaluateNew(MemberExpression, Arguments).\n\n12.3.3.1.1 Runtime Semantics: EvaluateNew\n\n6. If arguments is empty, let argList be an empty List.\n7. Else,\na. Let argList be ArgumentListEvaluation of arguments.\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/new/spread-mult-obj-undefined.js", "description": " Object Spread operator following other arguments with undefined (`new` operator)", "esid": " sec-new-operator-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "info": " |MemberExpression : new MemberExpression Arguments\n\n1. Return EvaluateNew(MemberExpression, Arguments).\n\n12.3.3.1.1 Runtime Semantics: EvaluateNew\n\n6. If arguments is empty, let argList be an empty List.\n7. Else,\na. Let argList be ArgumentListEvaluation of arguments.\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/new/spread-obj-getter-descriptor.js", "description": " Spread operation with getter results in data property descriptor (`new` operator)", "esid": " sec-new-operator-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |MemberExpression : new MemberExpression Arguments\n\n1. Return EvaluateNew(MemberExpression, Arguments).\n\n12.3.3.1.1 Runtime Semantics: EvaluateNew\n\n6. If arguments is empty, let argList be an empty List.\n7. Else,\na. Let argList be ArgumentListEvaluation of arguments.\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/new/spread-obj-getter-init.js", "description": " Getter in object literal is not evaluated (`new` operator)", "esid": " sec-new-operator-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "info": " |MemberExpression : new MemberExpression Arguments\n\n1. Return EvaluateNew(MemberExpression, Arguments).\n\n12.3.3.1.1 Runtime Semantics: EvaluateNew\n\n6. If arguments is empty, let argList be an empty List.\n7. Else,\na. Let argList be ArgumentListEvaluation of arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/new/spread-obj-manipulate-outter-obj-in-getter.js", "description": " Getter manipulates outter object before it's spread operation (`new` operator)", "esid": " sec-new-operator-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "info": " |MemberExpression : new MemberExpression Arguments\n\n1. Return EvaluateNew(MemberExpression, Arguments).\n\n12.3.3.1.1 Runtime Semantics: EvaluateNew\n\n6. If arguments is empty, let argList be an empty List.\n7. Else,\na. Let argList be ArgumentListEvaluation of arguments.\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/new/spread-obj-mult-spread-getter.js", "description": " Multiple Object Spread usage calls getter multiple times (`new` operator)", "esid": " sec-new-operator-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "info": " |MemberExpression : new MemberExpression Arguments\n\n1. Return EvaluateNew(MemberExpression, Arguments).\n\n12.3.3.1.1 Runtime Semantics: EvaluateNew\n\n6. If arguments is empty, let argList be an empty List.\n7. Else,\na. Let argList be ArgumentListEvaluation of arguments.\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/new/spread-obj-mult-spread.js", "description": " Multiple Object Spread operation (`new` operator)", "esid": " sec-new-operator-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "info": " |MemberExpression : new MemberExpression Arguments\n\n1. Return EvaluateNew(MemberExpression, Arguments).\n\n12.3.3.1.1 Runtime Semantics: EvaluateNew\n\n6. If arguments is empty, let argList be an empty List.\n7. Else,\na. Let argList be ArgumentListEvaluation of arguments.\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/new/spread-obj-null.js", "description": " Null Object Spread is ignored (`new` operator)", "esid": " sec-new-operator-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "info": " |MemberExpression : new MemberExpression Arguments\n\n1. Return EvaluateNew(MemberExpression, Arguments).\n\n12.3.3.1.1 Runtime Semantics: EvaluateNew\n\n6. If arguments is empty, let argList be an empty List.\n7. Else,\na. Let argList be ArgumentListEvaluation of arguments.\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/new/spread-obj-override-immutable.js", "description": " Object Spread overriding immutable properties (`new` operator)", "esid": " sec-new-operator-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |MemberExpression : new MemberExpression Arguments\n\n1. Return EvaluateNew(MemberExpression, Arguments).\n\n12.3.3.1.1 Runtime Semantics: EvaluateNew\n\n6. If arguments is empty, let argList be an empty List.\n7. Else,\na. Let argList be ArgumentListEvaluation of arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/new/spread-obj-overrides-prev-properties.js", "description": " Object Spread properties overrides previous definitions (`new` operator)", "esid": " sec-new-operator-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "info": " |MemberExpression : new MemberExpression Arguments\n\n1. Return EvaluateNew(MemberExpression, Arguments).\n\n12.3.3.1.1 Runtime Semantics: EvaluateNew\n\n6. If arguments is empty, let argList be an empty List.\n7. Else,\na. Let argList be ArgumentListEvaluation of arguments.\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/new/spread-obj-skip-non-enumerable.js", "description": " Object Spread doesn't copy non-enumerable properties (`new` operator)", "esid": " sec-new-operator-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "info": " |MemberExpression : new MemberExpression Arguments\n\n1. Return EvaluateNew(MemberExpression, Arguments).\n\n12.3.3.1.1 Runtime Semantics: EvaluateNew\n\n6. If arguments is empty, let argList be an empty List.\n7. Else,\na. Let argList be ArgumentListEvaluation of arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/new/spread-obj-spread-order.js", "description": " Spread operation follows [[OwnPropertyKeys]] order (`new` operator)", "esid": " sec-new-operator-runtime-semantics-evaluation", "features": ["Symbol", "object-spread"], "flags": ["generated"], "includes": ["compareArray.js"], "info": " |MemberExpression : new MemberExpression Arguments\n\n1. Return EvaluateNew(MemberExpression, Arguments).\n\n12.3.3.1.1 Runtime Semantics: EvaluateNew\n\n6. If arguments is empty, let argList be an empty List.\n7. Else,\na. Let argList be ArgumentListEvaluation of arguments.\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/new/spread-obj-symbol-property.js", "description": " Spread operation where source object contains Symbol properties (`new` operator)", "esid": " sec-new-operator-runtime-semantics-evaluation", "features": ["Symbol", "object-spread"], "flags": ["generated"], "info": " |MemberExpression : new MemberExpression Arguments\n\n1. Return EvaluateNew(MemberExpression, Arguments).\n\n12.3.3.1.1 Runtime Semantics: EvaluateNew\n\n6. If arguments is empty, let argList be an empty List.\n7. Else,\na. Let argList be ArgumentListEvaluation of arguments.\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/new/spread-obj-undefined.js", "description": " Undefined Object Spread is ignored (`new` operator)", "esid": " sec-new-operator-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "info": " |MemberExpression : new MemberExpression Arguments\n\n1. Return EvaluateNew(MemberExpression, Arguments).\n\n12.3.3.1.1 Runtime Semantics: EvaluateNew\n\n6. If arguments is empty, let argList be an empty List.\n7. Else,\na. Let argList be ArgumentListEvaluation of arguments.\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/new/spread-obj-with-overrides.js", "description": " Object Spread properties being overriden (`new` operator)", "esid": " sec-new-operator-runtime-semantics-evaluation", "features": ["Symbol", "object-spread"], "flags": ["generated"], "info": " |MemberExpression : new MemberExpression Arguments\n\n1. Return EvaluateNew(MemberExpression, Arguments).\n\n12.3.3.1.1 Runtime Semantics: EvaluateNew\n\n6. If arguments is empty, let argList be an empty List.\n7. Else,\na. Let argList be ArgumentListEvaluation of arguments.\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/new/spread-sngl-obj-ident.js", "description": " Object Spread operator without other arguments (`new` operator)", "esid": " sec-new-operator-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |MemberExpression : new MemberExpression Arguments\n\n1. Return EvaluateNew(MemberExpression, Arguments).\n\n12.3.3.1.1 Runtime Semantics: EvaluateNew\n\n6. If arguments is empty, let argList be an empty List.\n7. Else,\na. Let argList be ArgumentListEvaluation of arguments.\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/object/__proto__-permitted-dup.js", "esid": " sec-object-initializer", "description": " Permitted duplicate `__proto__` property", "info": " |Annex B defines an early error for duplicate PropertyName of `__proto__`,\nbut this does not apply to properties created from other productions.\n\nB.3.1 __proto__ Property Names in Object Initializers\n\nIt is a Syntax Error if PropertyNameList of PropertyDefinitionList contains\nany duplicate entries for \"__proto__\" and at least two of those entries\nwere obtained from productions of the form\nPropertyDefinition : PropertyName : AssignmentExpression .\n", "features": ["generators", "async-functions", "async-iteration", "__proto__"]}, {"path": "./test262-main/test/language/expressions/object/dstr/async-gen-meth-ary-init-iter-get-err-array-prototype.js", "description": " Abrupt completion returned by GetIterator (async generator method)", "esid": " sec-asyncgenerator-definitions-propertydefinitionevaluation", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\nRuntime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iteratorRecord be ? GetIterator(value).\n\nGetIterator ( obj [ , hint [ , method ] ] )\n\n[...]\n4. Let iterator be ? Call(method, obj).\n\nCall ( F, V [ , argumentsList ] )\n\n[...]\n2. If IsCallable(F) is false, throw a TypeError exception.\n\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/async-gen-meth-ary-init-iter-get-err.js", "description": " Abrupt completion returned by GetIterator (async generator method)", "esid": " sec-asyncgenerator-definitions-propertydefinitionevaluation", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iterator be GetIterator(value).\n2. ReturnIfAbrupt(iterator).\n\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/async-gen-meth-ary-ptrn-elem-ary-val-null.js", "description": " Nested array destructuring with a null value (async generator method)", "esid": " sec-asyncgenerator-definitions-propertydefinitionevaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. If iteratorRecord.[[done]] is false, then\n[...]\ne. Else\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iterator be GetIterator(value).\n2. ReturnIfAbrupt(iterator).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/async-gen-meth-ary-ptrn-elem-id-init-throws.js", "description": " Destructuring initializer returns an abrupt completion (async generator method)", "esid": " sec-asyncgenerator-definitions-propertydefinitionevaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/async-gen-meth-ary-ptrn-elem-id-init-unresolvable.js", "description": " Destructuring initializer is an unresolvable reference (async generator method)", "esid": " sec-asyncgenerator-definitions-propertydefinitionevaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/async-gen-meth-ary-ptrn-elem-id-iter-step-err.js", "description": " Error forwarding when IteratorStep returns an abrupt completion (async generator method)", "esid": " sec-asyncgenerator-definitions-propertydefinitionevaluation", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/async-gen-meth-ary-ptrn-elem-id-iter-val-err.js", "description": " Error forwarding when IteratorValue returns an abrupt completion (async generator method)", "esid": " sec-asyncgenerator-definitions-propertydefinitionevaluation", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\nd. If next is false, set iteratorRecord.[[done]] to true.\ne. Else,\ni. Let v be IteratorValue(next).\nii. If v is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\niii. ReturnIfAbrupt(v).\n\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/async-gen-meth-ary-ptrn-elem-obj-val-null.js", "description": " Nested object destructuring with a null value (async generator method)", "esid": " sec-asyncgenerator-definitions-propertydefinitionevaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. If iteratorRecord.[[done]] is false, then\n[...]\ne. Else\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ObjectBindingPattern\n\n1. Let valid be RequireObjectCoercible(value).\n2. ReturnIfAbrupt(valid).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/async-gen-meth-ary-ptrn-elem-obj-val-undef.js", "description": " Nested object destructuring with a value of `undefined` (async generator method)", "esid": " sec-asyncgenerator-definitions-propertydefinitionevaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. If iteratorRecord.[[done]] is false, then\n[...]\ne. Else\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ObjectBindingPattern\n\n1. Let valid be RequireObjectCoercible(value).\n2. ReturnIfAbrupt(valid).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/async-gen-meth-ary-ptrn-elision-step-err.js", "description": " Elision advances iterator and forwards abrupt completions (async generator method)", "esid": " sec-asyncgenerator-definitions-propertydefinitionevaluation", "features": ["generators", "async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ Elision ]\n\n1. Return the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with iteratorRecord\nas the argument.\n\n12.14.5.3 Runtime Semantics: IteratorDestructuringAssignmentEvaluation\n\nElision : ,\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/async-gen-meth-ary-ptrn-rest-id-elision-next-err.js", "description": " Rest element following elision elements (async generator method)", "esid": " sec-asyncgenerator-definitions-propertydefinitionevaluation", "features": ["generators", "async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nArrayBindingPattern : [ Elisionopt BindingRestElement ]\n1. If Elision is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with\niteratorRecord as the argument.\nb. ReturnIfAbrupt(status).\n2. Return the result of performing IteratorBindingInitialization for\nBindingRestElement with iteratorRecord and environment as arguments.\n\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/async-gen-meth-ary-ptrn-rest-id-iter-step-err.js", "description": " Error forwarding when IteratorStep returns an abrupt completion (async generator method)", "esid": " sec-asyncgenerator-definitions-propertydefinitionevaluation", "features": ["generators", "async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\na. If iteratorRecord.[[done]] is false,\ni. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nii. If next is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\niii. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/async-gen-meth-ary-ptrn-rest-id-iter-val-err.js", "description": " Error forwarding when IteratorValue returns an abrupt completion (async generator method)", "esid": " sec-asyncgenerator-definitions-propertydefinitionevaluation", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\n[...]\nc. Let nextValue be IteratorValue(next).\nd. If nextValue is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\ne. ReturnIfAbrupt(nextValue).\n\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/async-gen-meth-dflt-ary-init-iter-get-err-array-prototype.js", "description": " Abrupt completion returned by GetIterator (async generator method (default parameter))", "esid": " sec-asyncgenerator-definitions-propertydefinitionevaluation", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\nRuntime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iteratorRecord be ? GetIterator(value).\n\nGetIterator ( obj [ , hint [ , method ] ] )\n\n[...]\n4. Let iterator be ? Call(method, obj).\n\nCall ( F, V [ , argumentsList ] )\n\n[...]\n2. If IsCallable(F) is false, throw a TypeError exception.\n\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/async-gen-meth-dflt-ary-init-iter-get-err.js", "description": " Abrupt completion returned by GetIterator (async generator method (default parameter))", "esid": " sec-asyncgenerator-definitions-propertydefinitionevaluation", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iterator be GetIterator(value).\n2. ReturnIfAbrupt(iterator).\n\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/async-gen-meth-dflt-ary-ptrn-elem-ary-val-null.js", "description": " Nested array destructuring with a null value (async generator method (default parameter))", "esid": " sec-asyncgenerator-definitions-propertydefinitionevaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. If iteratorRecord.[[done]] is false, then\n[...]\ne. Else\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iterator be GetIterator(value).\n2. ReturnIfAbrupt(iterator).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/async-gen-meth-dflt-ary-ptrn-elem-id-init-throws.js", "description": " Destructuring initializer returns an abrupt completion (async generator method (default parameter))", "esid": " sec-asyncgenerator-definitions-propertydefinitionevaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/async-gen-meth-dflt-ary-ptrn-elem-id-init-unresolvable.js", "description": " Destructuring initializer is an unresolvable reference (async generator method (default parameter))", "esid": " sec-asyncgenerator-definitions-propertydefinitionevaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/async-gen-meth-dflt-ary-ptrn-elem-id-iter-step-err.js", "description": " Error forwarding when IteratorStep returns an abrupt completion (async generator method (default parameter))", "esid": " sec-asyncgenerator-definitions-propertydefinitionevaluation", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/async-gen-meth-dflt-ary-ptrn-elem-id-iter-val-err.js", "description": " Error forwarding when IteratorValue returns an abrupt completion (async generator method (default parameter))", "esid": " sec-asyncgenerator-definitions-propertydefinitionevaluation", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\nd. If next is false, set iteratorRecord.[[done]] to true.\ne. Else,\ni. Let v be IteratorValue(next).\nii. If v is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\niii. ReturnIfAbrupt(v).\n\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/async-gen-meth-dflt-ary-ptrn-elem-obj-val-null.js", "description": " Nested object destructuring with a null value (async generator method (default parameter))", "esid": " sec-asyncgenerator-definitions-propertydefinitionevaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. If iteratorRecord.[[done]] is false, then\n[...]\ne. Else\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ObjectBindingPattern\n\n1. Let valid be RequireObjectCoercible(value).\n2. ReturnIfAbrupt(valid).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/async-gen-meth-dflt-ary-ptrn-elem-obj-val-undef.js", "description": " Nested object destructuring with a value of `undefined` (async generator method (default parameter))", "esid": " sec-asyncgenerator-definitions-propertydefinitionevaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. If iteratorRecord.[[done]] is false, then\n[...]\ne. Else\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ObjectBindingPattern\n\n1. Let valid be RequireObjectCoercible(value).\n2. ReturnIfAbrupt(valid).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/async-gen-meth-dflt-ary-ptrn-elision-step-err.js", "description": " Elision advances iterator and forwards abrupt completions (async generator method (default parameter))", "esid": " sec-asyncgenerator-definitions-propertydefinitionevaluation", "features": ["generators", "async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ Elision ]\n\n1. Return the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with iteratorRecord\nas the argument.\n\n12.14.5.3 Runtime Semantics: IteratorDestructuringAssignmentEvaluation\n\nElision : ,\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/async-gen-meth-dflt-ary-ptrn-rest-id-elision-next-err.js", "description": " Rest element following elision elements (async generator method (default parameter))", "esid": " sec-asyncgenerator-definitions-propertydefinitionevaluation", "features": ["generators", "async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nArrayBindingPattern : [ Elisionopt BindingRestElement ]\n1. If Elision is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with\niteratorRecord as the argument.\nb. ReturnIfAbrupt(status).\n2. Return the result of performing IteratorBindingInitialization for\nBindingRestElement with iteratorRecord and environment as arguments.\n\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/async-gen-meth-dflt-ary-ptrn-rest-id-iter-step-err.js", "description": " Error forwarding when IteratorStep returns an abrupt completion (async generator method (default parameter))", "esid": " sec-asyncgenerator-definitions-propertydefinitionevaluation", "features": ["generators", "async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\na. If iteratorRecord.[[done]] is false,\ni. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nii. If next is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\niii. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/async-gen-meth-dflt-ary-ptrn-rest-id-iter-val-err.js", "description": " Error forwarding when IteratorValue returns an abrupt completion (async generator method (default parameter))", "esid": " sec-asyncgenerator-definitions-propertydefinitionevaluation", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\n[...]\nc. Let nextValue be IteratorValue(next).\nd. If nextValue is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\ne. ReturnIfAbrupt(nextValue).\n\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/async-gen-meth-dflt-obj-init-null.js", "description": " Value specifed for object binding pattern must be object coercible (null) (async generator method (default parameter))", "esid": " sec-asyncgenerator-definitions-propertydefinitionevaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\nRuntime Semantics: BindingInitialization\n\nObjectBindingPattern : { }\n\n1. Return NormalCompletion(empty).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/async-gen-meth-dflt-obj-init-undefined.js", "description": " Value specifed for object binding pattern must be object coercible (undefined) (async generator method (default parameter))", "esid": " sec-asyncgenerator-definitions-propertydefinitionevaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\nRuntime Semantics: BindingInitialization\n\nObjectBindingPattern : { }\n\n1. Return NormalCompletion(empty).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/async-gen-meth-dflt-obj-ptrn-id-get-value-err.js", "description": " Error thrown when accessing the corresponding property of the value object (async generator method (default parameter))", "esid": " sec-asyncgenerator-definitions-propertydefinitionevaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. Let v be GetV(value, propertyName).\n5. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/async-gen-meth-dflt-obj-ptrn-id-init-throws.js", "description": " Error thrown when evaluating the initializer (async generator method (default parameter))", "esid": " sec-asyncgenerator-definitions-propertydefinitionevaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. LetdefaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/async-gen-meth-dflt-obj-ptrn-id-init-unresolvable.js", "description": " Destructuring initializer is an unresolvable reference (async generator method (default parameter))", "esid": " sec-asyncgenerator-definitions-propertydefinitionevaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/async-gen-meth-dflt-obj-ptrn-list-err.js", "description": " Binding property list evaluation is interrupted by an abrupt completion (async generator method (default parameter))", "esid": " sec-asyncgenerator-definitions-propertydefinitionevaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPropertyList : BindingPropertyList , BindingProperty\n\n1. Let status be the result of performing BindingInitialization for\nBindingPropertyList using value and environment as arguments.\n2. ReturnIfAbrupt(status).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/async-gen-meth-dflt-obj-ptrn-prop-ary-value-null.js", "description": " Object binding pattern with \"nested\" array binding pattern taking the `null` value (async generator method (default parameter))", "esid": " sec-asyncgenerator-definitions-propertydefinitionevaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/async-gen-meth-dflt-obj-ptrn-prop-eval-err.js", "description": " Evaluation of property name returns an abrupt completion (async generator method (default parameter))", "esid": " sec-asyncgenerator-definitions-propertydefinitionevaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingProperty : PropertyName : BindingElement\n\n1. Let P be the result of evaluating PropertyName\n2. ReturnIfAbrupt(P).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/async-gen-meth-dflt-obj-ptrn-prop-id-get-value-err.js", "description": " Error thrown when accessing the corresponding property of the value object (async generator method (default parameter))", "esid": " sec-asyncgenerator-definitions-propertydefinitionevaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. Let v be GetV(value, propertyName).\n2. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/async-gen-meth-dflt-obj-ptrn-prop-id-init-throws.js", "description": " Error thrown when evaluating the initializer (async generator method (default parameter))", "esid": " sec-asyncgenerator-definitions-propertydefinitionevaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/async-gen-meth-dflt-obj-ptrn-prop-id-init-unresolvable.js", "description": " Destructuring initializer is an unresolvable reference (async generator method (default parameter))", "esid": " sec-asyncgenerator-definitions-propertydefinitionevaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/async-gen-meth-dflt-obj-ptrn-prop-obj-value-null.js", "description": " Object binding pattern with \"nested\" object binding pattern taking the `null` value (async generator method (default parameter))", "esid": " sec-asyncgenerator-definitions-propertydefinitionevaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/async-gen-meth-dflt-obj-ptrn-prop-obj-value-undef.js", "description": " Object binding pattern with \"nested\" object binding pattern taking the `null` value (async generator method (default parameter))", "esid": " sec-asyncgenerator-definitions-propertydefinitionevaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/async-gen-meth-obj-init-null.js", "description": " Value specifed for object binding pattern must be object coercible (null) (async generator method)", "esid": " sec-asyncgenerator-definitions-propertydefinitionevaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\nRuntime Semantics: BindingInitialization\n\nObjectBindingPattern : { }\n\n1. Return NormalCompletion(empty).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/async-gen-meth-obj-init-undefined.js", "description": " Value specifed for object binding pattern must be object coercible (undefined) (async generator method)", "esid": " sec-asyncgenerator-definitions-propertydefinitionevaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\nRuntime Semantics: BindingInitialization\n\nObjectBindingPattern : { }\n\n1. Return NormalCompletion(empty).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/async-gen-meth-obj-ptrn-id-get-value-err.js", "description": " Error thrown when accessing the corresponding property of the value object (async generator method)", "esid": " sec-asyncgenerator-definitions-propertydefinitionevaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. Let v be GetV(value, propertyName).\n5. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/async-gen-meth-obj-ptrn-id-init-throws.js", "description": " Error thrown when evaluating the initializer (async generator method)", "esid": " sec-asyncgenerator-definitions-propertydefinitionevaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. LetdefaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/async-gen-meth-obj-ptrn-id-init-unresolvable.js", "description": " Destructuring initializer is an unresolvable reference (async generator method)", "esid": " sec-asyncgenerator-definitions-propertydefinitionevaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/async-gen-meth-obj-ptrn-list-err.js", "description": " Binding property list evaluation is interrupted by an abrupt completion (async generator method)", "esid": " sec-asyncgenerator-definitions-propertydefinitionevaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPropertyList : BindingPropertyList , BindingProperty\n\n1. Let status be the result of performing BindingInitialization for\nBindingPropertyList using value and environment as arguments.\n2. ReturnIfAbrupt(status).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/async-gen-meth-obj-ptrn-prop-ary-value-null.js", "description": " Object binding pattern with \"nested\" array binding pattern taking the `null` value (async generator method)", "esid": " sec-asyncgenerator-definitions-propertydefinitionevaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/async-gen-meth-obj-ptrn-prop-eval-err.js", "description": " Evaluation of property name returns an abrupt completion (async generator method)", "esid": " sec-asyncgenerator-definitions-propertydefinitionevaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingProperty : PropertyName : BindingElement\n\n1. Let P be the result of evaluating PropertyName\n2. ReturnIfAbrupt(P).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/async-gen-meth-obj-ptrn-prop-id-get-value-err.js", "description": " Error thrown when accessing the corresponding property of the value object (async generator method)", "esid": " sec-asyncgenerator-definitions-propertydefinitionevaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. Let v be GetV(value, propertyName).\n2. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/async-gen-meth-obj-ptrn-prop-id-init-throws.js", "description": " Error thrown when evaluating the initializer (async generator method)", "esid": " sec-asyncgenerator-definitions-propertydefinitionevaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/async-gen-meth-obj-ptrn-prop-id-init-unresolvable.js", "description": " Destructuring initializer is an unresolvable reference (async generator method)", "esid": " sec-asyncgenerator-definitions-propertydefinitionevaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/async-gen-meth-obj-ptrn-prop-obj-value-null.js", "description": " Object binding pattern with \"nested\" object binding pattern taking the `null` value (async generator method)", "esid": " sec-asyncgenerator-definitions-propertydefinitionevaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/async-gen-meth-obj-ptrn-prop-obj-value-undef.js", "description": " Object binding pattern with \"nested\" object binding pattern taking the `null` value (async generator method)", "esid": " sec-asyncgenerator-definitions-propertydefinitionevaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-ary-init-iter-close.js", "description": " Iterator is closed when not exhausted by pattern evaluation (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n[...]\n4. If iteratorRecord.[[done]] is false, return ? IteratorClose(iterator,\nresult).\n[...]\n\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-ary-ptrn-elem-id-init-fn-name-arrow.js", "description": " SingleNameBinding does assign name to arrow functions (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-ary-ptrn-elem-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-ary-ptrn-elem-id-init-fn-name-cover.js", "description": " SingleNameBinding does assign name to \"anonymous\" functions \"through\" cover grammar (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-ary-ptrn-elem-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-ary-ptrn-elem-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-dflt-ary-init-iter-close.js", "description": " Iterator is closed when not exhausted by pattern evaluation (generator method (default parameter))", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n[...]\n4. If iteratorRecord.[[done]] is false, return ? IteratorClose(iterator,\nresult).\n[...]\n\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-dflt-ary-ptrn-elem-id-init-fn-name-arrow.js", "description": " SingleNameBinding does assign name to arrow functions (generator method (default parameter))", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-dflt-ary-ptrn-elem-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (generator method (default parameter))", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-dflt-ary-ptrn-elem-id-init-fn-name-cover.js", "description": " SingleNameBinding does assign name to \"anonymous\" functions \"through\" cover grammar (generator method (default parameter))", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-dflt-ary-ptrn-elem-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (generator method (default parameter))", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-dflt-ary-ptrn-elem-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (generator method (default parameter))", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-dflt-obj-ptrn-id-init-fn-name-arrow.js", "description": " SingleNameBinding assigns `name` to arrow functions (generator method (default parameter))", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-dflt-obj-ptrn-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (generator method (default parameter))", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-dflt-obj-ptrn-id-init-fn-name-cover.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" functions \"through\" cover grammar (generator method (default parameter))", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-dflt-obj-ptrn-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (generator method (default parameter))", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-dflt-obj-ptrn-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (generator method (default parameter))", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-dflt-obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (generator method (default parameter))", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["object-rest", "generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-dflt-obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (generator method (default parameter))", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["object-rest", "generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-dflt-obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (generator method (default parameter))", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["object-rest", "generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-obj-ptrn-id-init-fn-name-arrow.js", "description": " SingleNameBinding assigns `name` to arrow functions (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-obj-ptrn-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-obj-ptrn-id-init-fn-name-cover.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" functions \"through\" cover grammar (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-obj-ptrn-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-obj-ptrn-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["object-rest", "generators", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["object-rest", "generators", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["object-rest", "generators", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-ary-init-iter-close.js", "description": " Iterator is closed when not exhausted by pattern evaluation (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n[...]\n4. If iteratorRecord.[[done]] is false, return ? IteratorClose(iterator,\nresult).\n[...]\n\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-ary-ptrn-elem-id-init-fn-name-arrow.js", "description": " SingleNameBinding does assign name to arrow functions (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-ary-ptrn-elem-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-ary-ptrn-elem-id-init-fn-name-cover.js", "description": " SingleNameBinding does assign name to \"anonymous\" functions \"through\" cover grammar (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-ary-ptrn-elem-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-ary-ptrn-elem-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-dflt-ary-init-iter-close.js", "description": " Iterator is closed when not exhausted by pattern evaluation (method (default parameter))", "esid": " sec-runtime-semantics-definemethod", "features": ["Symbol.iterator", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n[...]\n4. If iteratorRecord.[[done]] is false, return ? IteratorClose(iterator,\nresult).\n[...]\n\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-dflt-ary-ptrn-elem-id-init-fn-name-arrow.js", "description": " SingleNameBinding does assign name to arrow functions (method (default parameter))", "esid": " sec-runtime-semantics-definemethod", "features": ["destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-dflt-ary-ptrn-elem-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (method (default parameter))", "esid": " sec-runtime-semantics-definemethod", "features": ["destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-dflt-ary-ptrn-elem-id-init-fn-name-cover.js", "description": " SingleNameBinding does assign name to \"anonymous\" functions \"through\" cover grammar (method (default parameter))", "esid": " sec-runtime-semantics-definemethod", "features": ["destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-dflt-ary-ptrn-elem-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (method (default parameter))", "esid": " sec-runtime-semantics-definemethod", "features": ["destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-dflt-ary-ptrn-elem-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (method (default parameter))", "esid": " sec-runtime-semantics-definemethod", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-dflt-obj-ptrn-id-init-fn-name-arrow.js", "description": " SingleNameBinding assigns `name` to arrow functions (method (default parameter))", "esid": " sec-runtime-semantics-definemethod", "features": ["destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-dflt-obj-ptrn-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (method (default parameter))", "esid": " sec-runtime-semantics-definemethod", "features": ["destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-dflt-obj-ptrn-id-init-fn-name-cover.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" functions \"through\" cover grammar (method (default parameter))", "esid": " sec-runtime-semantics-definemethod", "features": ["destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-dflt-obj-ptrn-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (method (default parameter))", "esid": " sec-runtime-semantics-definemethod", "features": ["destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-dflt-obj-ptrn-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (method (default parameter))", "esid": " sec-runtime-semantics-definemethod", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-dflt-obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (method (default parameter))", "esid": " sec-runtime-semantics-definemethod", "features": ["object-rest", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-dflt-obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (method (default parameter))", "esid": " sec-runtime-semantics-definemethod", "features": ["object-rest", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-dflt-obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (method (default parameter))", "esid": " sec-runtime-semantics-definemethod", "features": ["object-rest", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-obj-ptrn-id-init-fn-name-arrow.js", "description": " SingleNameBinding assigns `name` to arrow functions (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-obj-ptrn-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-obj-ptrn-id-init-fn-name-cover.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" functions \"through\" cover grammar (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-obj-ptrn-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-obj-ptrn-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/object-rest-proxy-get-not-called-on-dontenum-keys.js", "esid": " sec-destructuring-binding-patterns-runtime-semantics-restbindinginitialization", "description": " >Proxy's \"get\" trap is not invoked for non-enumerable keys.\n", "info": " |BindingRestProperty : ... BindingIdentifier\n\n[...]\n3. Perform ? CopyDataProperties(restObj, value, excludedNames).\n\nCopyDataProperties ( target, source, excludedItems )\n\n[...]\n5. Let keys be ? from.[[OwnPropertyKeys]]().\n6. For each element nextKey of keys in List order, do\n[...]\nc. If excluded is false, then\ni. Let desc be ? from.[[GetOwnProperty]](nextKey).\nii. If desc is not undefined and desc.[[Enumerable]] is true, then\n1. Let propValue be ? Get(from, nextKey).\n2. Perform ! CreateDataPropertyOrThrow(target, nextKey, propValue).\n\n[[OwnPropertyKeys]] ( )\n\n[...]\n7. Let trapResultArray be ? Call(trap, handler, \u00ab target \u00bb).\n8. Let trapResult be ? CreateListFromArrayLike(trapResultArray, \u00ab String, Symbol \u00bb).\n[...]\n23. Return trapResult.\n", "features": ["object-rest", "destructuring-binding", "Proxy", "Symbol"], "includes": ["compareArray.js", "propertyHelper.js"]}, {"path": "./test262-main/test/language/expressions/object/dstr/object-rest-proxy-gopd-not-called-on-excluded-keys.js", "esid": " sec-destructuring-binding-patterns-runtime-semantics-restbindinginitialization", "description": " >Proxy's \"getOwnPropertyDescriptor\" trap is not invoked for excluded keys.\n", "info": " |BindingRestProperty : ... BindingIdentifier\n\n[...]\n3. Perform ? CopyDataProperties(restObj, value, excludedNames).\n\nCopyDataProperties ( target, source, excludedItems )\n\n[...]\n5. Let keys be ? from.[[OwnPropertyKeys]]().\n6. For each element nextKey of keys in List order, do\nb. For each element e of excludedItems, do\ni. If SameValue(e, nextKey) is true, then\n1. Set excluded to true.\nc. If excluded is false, then\ni. Let desc be ? from.[[GetOwnProperty]](nextKey).\n\n[[OwnPropertyKeys]] ( )\n\n[...]\n7. Let trapResultArray be ? Call(trap, handler, \u00ab target \u00bb).\n8. Let trapResult be ? CreateListFromArrayLike(trapResultArray, \u00ab String, Symbol \u00bb).\n[...]\n23. Return trapResult.\n", "features": ["object-rest", "destructuring-binding", "Proxy", "Symbol"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/language/expressions/object/dstr/object-rest-proxy-ownkeys-returned-keys-order.js", "esid": " sec-destructuring-binding-patterns-runtime-semantics-restbindinginitialization", "description": " >Proxy keys are iterated in order they were provided by \"ownKeys\" trap.\n", "info": " |BindingRestProperty : ... BindingIdentifier\n\n[...]\n3. Perform ? CopyDataProperties(restObj, value, excludedNames).\n\nCopyDataProperties ( target, source, excludedItems )\n\n[...]\n5. Let keys be ? from.[[OwnPropertyKeys]]().\n6. For each element nextKey of keys in List order, do\n[...]\nc. If excluded is false, then\ni. Let desc be ? from.[[GetOwnProperty]](nextKey).\n\n[[OwnPropertyKeys]] ( )\n\n[...]\n7. Let trapResultArray be ? Call(trap, handler, \u00ab target \u00bb).\n8. Let trapResult be ? CreateListFromArrayLike(trapResultArray, \u00ab String, Symbol \u00bb).\n[...]\n23. Return trapResult.\n", "features": ["object-rest", "destructuring-binding", "Proxy", "Symbol"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/language/expressions/object/fn-name-accessor-get.js", "version": 6, "esid": " 14.3.9", "description": " Assignment of function `name` attribute (\"get\" accessor)", "info": " |MethodDefinition : get PropertyName ( ) { FunctionBody }\n\n[...]\n8. Perform SetFunctionName(closure, propKey, \"get\").\n", "includes": ["propertyHelper.js"], "features": ["Symbol"]}, {"path": "./test262-main/test/language/expressions/object/fn-name-accessor-set.js", "version": 6, "esid": " 14.3.9", "description": " Assignment of function `name` attribute (\"set\" accessor)", "info": " |MethodDefinition :\nset PropertyName ( PropertySetParameterList ) { FunctionBody }\n\n[...]\n7. Perform SetFunctionName(closure, propKey, \"set\").\n", "includes": ["propertyHelper.js"], "features": ["Symbol"]}, {"path": "./test262-main/test/language/expressions/object/fn-name-arrow.js", "version": 6, "esid": " 12.2.6.9", "description": " Assignment of function `name` attribute (ArrowFunction)", "info": " |6. If IsAnonymousFunctionDefinition(AssignmentExpression) is true, then\na. Let hasNameProperty be HasOwnProperty(propValue, \"name\").\nb. ReturnIfAbrupt(hasNameProperty).\nc. If hasNameProperty is false, perform SetFunctionName(propValue,\npropKey).\n", "includes": ["propertyHelper.js"], "features": ["Symbol"]}, {"path": "./test262-main/test/language/expressions/object/fn-name-class.js", "version": 6, "esid": " 12.2.6.9", "description": " Assignment of function `name` attribute (ClassExpression)", "info": " |6. If IsAnonymousFunctionDefinition(AssignmentExpression) is true, then\na. Let hasNameProperty be HasOwnProperty(propValue, \"name\").\nb. ReturnIfAbrupt(hasNameProperty).\nc. If hasNameProperty is false, perform SetFunctionName(propValue,\npropKey).\n", "includes": ["propertyHelper.js"], "features": ["class", "Symbol"]}, {"path": "./test262-main/test/language/expressions/object/fn-name-cover.js", "version": 6, "esid": " 12.2.6.9", "description": " >Assignment of function `name` attribute (CoverParenthesizedExpression)\n", "info": " |6. If IsAnonymousFunctionDefinition(AssignmentExpression) is true, then\na. Let hasNameProperty be HasOwnProperty(propValue, \"name\").\nb. ReturnIfAbrupt(hasNameProperty).\nc. If hasNameProperty is false, perform SetFunctionName(propValue,\npropKey).\n", "includes": ["propertyHelper.js"], "features": ["Symbol"]}, {"path": "./test262-main/test/language/expressions/object/fn-name-fn.js", "version": 6, "esid": " 12.2.6.9", "description": " Assignment of function `name` attribute (FunctionExpression)", "info": " |6. If IsAnonymousFunctionDefinition(AssignmentExpression) is true, then\na. Let hasNameProperty be HasOwnProperty(propValue, \"name\").\nb. ReturnIfAbrupt(hasNameProperty).\nc. If hasNameProperty is false, perform SetFunctionName(propValue,\npropKey).\n", "includes": ["propertyHelper.js"], "features": ["Symbol"]}, {"path": "./test262-main/test/language/expressions/object/fn-name-gen.js", "version": 6, "esid": " 12.2.6.9", "description": " >Assignment of function `name` attribute (GeneratorExpression)\n", "info": " |6. If IsAnonymousFunctionDefinition(AssignmentExpression) is true, then\na. Let hasNameProperty be HasOwnProperty(propValue, \"name\").\nb. ReturnIfAbrupt(hasNameProperty).\nc. If hasNameProperty is false, perform SetFunctionName(propValue,\npropKey).\n", "includes": ["propertyHelper.js"], "features": ["generators", "Symbol"]}, {"path": "./test262-main/test/language/expressions/object/method-definition/async-gen-meth-dflt-params-abrupt.js", "description": " Abrupt completion returned by evaluation of initializer (async generator method)", "esid": " sec-asyncgenerator-definitions-propertydefinitionevaluation", "features": ["default-parameters", "async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n\n14.1.19 Runtime Semantics: IteratorBindingInitialization\n\nFormalsList : FormalsList , FormalParameter\n\n1. Let status be the result of performing IteratorBindingInitialization for\nFormalsList using iteratorRecord and environment as the arguments.\n2. ReturnIfAbrupt(status).\n3. Return the result of performing IteratorBindingInitialization for\nFormalParameter using iteratorRecord and environment as the arguments.\n\n"}, {"path": "./test262-main/test/language/expressions/object/method-definition/async-gen-meth-dflt-params-ref-later.js", "description": " Referencing a parameter that occurs later in the ParameterList (async generator method)", "esid": " sec-asyncgenerator-definitions-propertydefinitionevaluation", "features": ["default-parameters", "async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n\n14.1.19 Runtime Semantics: IteratorBindingInitialization\n\nFormalsList : FormalsList , FormalParameter\n\n1. Let status be the result of performing IteratorBindingInitialization for\nFormalsList using iteratorRecord and environment as the arguments.\n2. ReturnIfAbrupt(status).\n3. Return the result of performing IteratorBindingInitialization for\nFormalParameter using iteratorRecord and environment as the arguments.\n\n"}, {"path": "./test262-main/test/language/expressions/object/method-definition/async-gen-meth-dflt-params-ref-self.js", "description": " Referencing a parameter from within its own initializer (async generator method)", "esid": " sec-asyncgenerator-definitions-propertydefinitionevaluation", "features": ["default-parameters", "async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n\n14.1.19 Runtime Semantics: IteratorBindingInitialization\n\nFormalsList : FormalsList , FormalParameter\n\n1. Let status be the result of performing IteratorBindingInitialization for\nFormalsList using iteratorRecord and environment as the arguments.\n2. ReturnIfAbrupt(status).\n3. Return the result of performing IteratorBindingInitialization for\nFormalParameter using iteratorRecord and environment as the arguments.\n\n"}, {"path": "./test262-main/test/language/expressions/object/method-definition/async-gen-yield-promise-reject-next-catch.js", "description": " yield Promise.reject(value) is treated as throw value (Async generator method)", "esid": " prod-AsyncGeneratorMethod", "features": ["async-iteration"], "flags": ["generated", "async"], "info": " |Async Generator Function Definitions\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters ) { AsyncGeneratorBody }\n\n"}, {"path": "./test262-main/test/language/expressions/object/method-definition/fn-name-fn.js", "version": 6, "esid": " 12.2.6.9", "description": " Assignment of function `name` attribute (MethodDefinition)", "info": " |6. If IsAnonymousFunctionDefinition(AssignmentExpression) is true, then\na. Let hasNameProperty be HasOwnProperty(propValue, \"name\").\nb. ReturnIfAbrupt(hasNameProperty).\nc. If hasNameProperty is false, perform SetFunctionName(propValue,\npropKey).\n", "includes": ["propertyHelper.js"], "features": ["Symbol"]}, {"path": "./test262-main/test/language/expressions/object/method-definition/fn-name-gen.js", "version": 6, "esid": " 14.4.13", "description": " >Assignment of function `name` attribute (GeneratorMethod)\n", "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n[...]\n9. Perform SetFunctionName(closure, propKey).\n", "includes": ["propertyHelper.js"], "features": ["generators", "Symbol"]}, {"path": "./test262-main/test/language/expressions/object/method-definition/gen-yield-identifier-spread-non-strict.js", "description": " Mixed use of object spread and yield as a valid identifier in a function body inside a generator body in non strict mode (Generator method - valid for non-strict only cases)", "esid": " prod-GeneratorMethod", "features": ["Symbol", "object-spread", "generators"], "flags": ["generated", "noStrict"], "info": " |14.4 Generator Function Definitions\n\nGeneratorMethod[Yield, Await]:\n* PropertyName ( UniqueFormalParameters ) { GeneratorBody }\n\n\nSpread Properties\n\nPropertyDefinition[Yield]:\n(...)\n...AssignmentExpression[In, ?Yield]\n\n"}, {"path": "./test262-main/test/language/expressions/object/method-definition/gen-yield-spread-obj.js", "description": " Use yield value in a object spread position (Generator method)", "esid": " prod-GeneratorMethod", "features": ["object-spread", "generators"], "flags": ["generated"], "info": " |14.4 Generator Function Definitions\n\nGeneratorMethod[Yield, Await]:\n* PropertyName[?Yield, ?Await] ( UniqueFormalParameters[+Yield, ~Await] ) { GeneratorBody }\n\n\nSpread Properties\n\nPropertyDefinition[Yield]:\n(...)\n...AssignmentExpression[In, ?Yield]\n\n"}, {"path": "./test262-main/test/language/expressions/object/method-definition/generator-name-prop-symbol.js", "description": " >Generator functions declared as methods are assigned a `name` property\naccording to the string value of their property name.\n", "version": 6, "esid": " 14.4.13", "includes": ["propertyHelper.js"], "features": ["Symbol", "generators"]}, {"path": "./test262-main/test/language/expressions/object/method-definition/name-name-prop-symbol.js", "description": " >Functions declared as methods are assigned a `name` property according to\nthe string value of their property name.\n", "version": 6, "esid": " 14.3.8", "includes": ["propertyHelper.js"], "features": ["Symbol"]}, {"path": "./test262-main/test/language/expressions/object/object-spread-proxy-get-not-called-on-dontenum-keys.js", "esid": " sec-object-initializer-runtime-semantics-propertydefinitionevaluation", "description": " >Proxy's \"get\" trap is not invoked for non-enumerable keys.\n", "info": " |PropertyDefinition : ... AssignmentExpression\n\n[...]\n3. Let excludedNames be a new empty List.\n4. Return ? CopyDataProperties(object, fromValue, excludedNames).\n\nCopyDataProperties ( target, source, excludedItems )\n\n[...]\n5. Let keys be ? from.[[OwnPropertyKeys]]().\n6. For each element nextKey of keys in List order, do\n[...]\nc. If excluded is false, then\ni. Let desc be ? from.[[GetOwnProperty]](nextKey).\nii. If desc is not undefined and desc.[[Enumerable]] is true, then\n1. Let propValue be ? Get(from, nextKey).\n2. Perform ! CreateDataPropertyOrThrow(target, nextKey, propValue).\n\n[[OwnPropertyKeys]] ( )\n\n[...]\n7. Let trapResultArray be ? Call(trap, handler, \u00ab target \u00bb).\n8. Let trapResult be ? CreateListFromArrayLike(trapResultArray, \u00ab String, Symbol \u00bb).\n[...]\n23. Return trapResult.\n", "features": ["object-spread", "Proxy", "Symbol"], "includes": ["compareArray.js", "propertyHelper.js"]}, {"path": "./test262-main/test/language/expressions/object/object-spread-proxy-no-excluded-keys.js", "esid": " sec-object-initializer-runtime-semantics-propertydefinitionevaluation", "description": " >Proxy's \"getOwnPropertyDescriptor\" trap is invoked for all keys.\n", "info": " |PropertyDefinition : ... AssignmentExpression\n\n[...]\n3. Let excludedNames be a new empty List.\n4. Return ? CopyDataProperties(object, fromValue, excludedNames).\n\nCopyDataProperties ( target, source, excludedItems )\n\n[...]\n5. Let keys be ? from.[[OwnPropertyKeys]]().\n6. For each element nextKey of keys in List order, do\n[...]\nc. If excluded is false, then\ni. Let desc be ? from.[[GetOwnProperty]](nextKey).\n\n[[OwnPropertyKeys]] ( )\n\n[...]\n7. Let trapResultArray be ? Call(trap, handler, \u00ab target \u00bb).\n8. Let trapResult be ? CreateListFromArrayLike(trapResultArray, \u00ab String, Symbol \u00bb).\n[...]\n23. Return trapResult.\n", "features": ["object-spread", "Proxy", "Symbol"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/language/expressions/object/object-spread-proxy-ownkeys-returned-keys-order.js", "esid": " sec-object-initializer-runtime-semantics-propertydefinitionevaluation", "description": " >Proxy keys are iterated in order they were provided by \"ownKeys\" trap.\n", "info": " |PropertyDefinition : ... AssignmentExpression\n\n[...]\n3. Let excludedNames be a new empty List.\n4. Return ? CopyDataProperties(object, fromValue, excludedNames).\n\nCopyDataProperties ( target, source, excludedItems )\n\n[...]\n5. Let keys be ? from.[[OwnPropertyKeys]]().\n6. For each element nextKey of keys in List order, do\n[...]\nc. If excluded is false, then\ni. Let desc be ? from.[[GetOwnProperty]](nextKey).\n\n[[OwnPropertyKeys]] ( )\n\n[...]\n7. Let trapResultArray be ? Call(trap, handler, \u00ab target \u00bb).\n8. Let trapResult be ? CreateListFromArrayLike(trapResultArray, \u00ab String, Symbol \u00bb).\n[...]\n23. Return trapResult.\n", "features": ["object-spread", "Proxy", "Symbol"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/language/expressions/super/call-spread-err-mult-err-obj-unresolvable.js", "description": " Object Spread operator results in error when using an unresolvable reference (SuperCall)", "esid": " sec-super-keyword-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "info": " |SuperCall : super Arguments\n\n1. Let newTarget be GetNewTarget().\n2. If newTarget is undefined, throw a ReferenceError exception.\n3. Let func be GetSuperConstructor().\n4. ReturnIfAbrupt(func).\n5. Let argList be ArgumentListEvaluation of Arguments.\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/super/call-spread-err-sngl-err-obj-unresolvable.js", "description": " Object Spread operator results in error when using an unresolvable reference (SuperCall)", "esid": " sec-super-keyword-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "info": " |SuperCall : super Arguments\n\n1. Let newTarget be GetNewTarget().\n2. If newTarget is undefined, throw a ReferenceError exception.\n3. Let func be GetSuperConstructor().\n4. ReturnIfAbrupt(func).\n5. Let argList be ArgumentListEvaluation of Arguments.\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/super/call-spread-mult-obj-ident.js", "description": " Object Spread operator following other properties (SuperCall)", "esid": " sec-super-keyword-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |SuperCall : super Arguments\n\n1. Let newTarget be GetNewTarget().\n2. If newTarget is undefined, throw a ReferenceError exception.\n3. Let func be GetSuperConstructor().\n4. ReturnIfAbrupt(func).\n5. Let argList be ArgumentListEvaluation of Arguments.\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/super/call-spread-mult-obj-null.js", "description": " Object Spread operator following other arguments with null value (SuperCall)", "esid": " sec-super-keyword-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "info": " |SuperCall : super Arguments\n\n1. Let newTarget be GetNewTarget().\n2. If newTarget is undefined, throw a ReferenceError exception.\n3. Let func be GetSuperConstructor().\n4. ReturnIfAbrupt(func).\n5. Let argList be ArgumentListEvaluation of Arguments.\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/super/call-spread-mult-obj-undefined.js", "description": " Object Spread operator following other arguments with undefined (SuperCall)", "esid": " sec-super-keyword-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "info": " |SuperCall : super Arguments\n\n1. Let newTarget be GetNewTarget().\n2. If newTarget is undefined, throw a ReferenceError exception.\n3. Let func be GetSuperConstructor().\n4. ReturnIfAbrupt(func).\n5. Let argList be ArgumentListEvaluation of Arguments.\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/super/call-spread-obj-getter-descriptor.js", "description": " Spread operation with getter results in data property descriptor (SuperCall)", "esid": " sec-super-keyword-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |SuperCall : super Arguments\n\n1. Let newTarget be GetNewTarget().\n2. If newTarget is undefined, throw a ReferenceError exception.\n3. Let func be GetSuperConstructor().\n4. ReturnIfAbrupt(func).\n5. Let argList be ArgumentListEvaluation of Arguments.\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/super/call-spread-obj-getter-init.js", "description": " Getter in object literal is not evaluated (SuperCall)", "esid": " sec-super-keyword-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "info": " |SuperCall : super Arguments\n\n1. Let newTarget be GetNewTarget().\n2. If newTarget is undefined, throw a ReferenceError exception.\n3. Let func be GetSuperConstructor().\n4. ReturnIfAbrupt(func).\n5. Let argList be ArgumentListEvaluation of Arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/super/call-spread-obj-manipulate-outter-obj-in-getter.js", "description": " Getter manipulates outter object before it's spread operation (SuperCall)", "esid": " sec-super-keyword-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "info": " |SuperCall : super Arguments\n\n1. Let newTarget be GetNewTarget().\n2. If newTarget is undefined, throw a ReferenceError exception.\n3. Let func be GetSuperConstructor().\n4. ReturnIfAbrupt(func).\n5. Let argList be ArgumentListEvaluation of Arguments.\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/super/call-spread-obj-mult-spread-getter.js", "description": " Multiple Object Spread usage calls getter multiple times (SuperCall)", "esid": " sec-super-keyword-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "info": " |SuperCall : super Arguments\n\n1. Let newTarget be GetNewTarget().\n2. If newTarget is undefined, throw a ReferenceError exception.\n3. Let func be GetSuperConstructor().\n4. ReturnIfAbrupt(func).\n5. Let argList be ArgumentListEvaluation of Arguments.\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/super/call-spread-obj-mult-spread.js", "description": " Multiple Object Spread operation (SuperCall)", "esid": " sec-super-keyword-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "info": " |SuperCall : super Arguments\n\n1. Let newTarget be GetNewTarget().\n2. If newTarget is undefined, throw a ReferenceError exception.\n3. Let func be GetSuperConstructor().\n4. ReturnIfAbrupt(func).\n5. Let argList be ArgumentListEvaluation of Arguments.\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/super/call-spread-obj-null.js", "description": " Null Object Spread is ignored (SuperCall)", "esid": " sec-super-keyword-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "info": " |SuperCall : super Arguments\n\n1. Let newTarget be GetNewTarget().\n2. If newTarget is undefined, throw a ReferenceError exception.\n3. Let func be GetSuperConstructor().\n4. ReturnIfAbrupt(func).\n5. Let argList be ArgumentListEvaluation of Arguments.\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/super/call-spread-obj-override-immutable.js", "description": " Object Spread overriding immutable properties (SuperCall)", "esid": " sec-super-keyword-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |SuperCall : super Arguments\n\n1. Let newTarget be GetNewTarget().\n2. If newTarget is undefined, throw a ReferenceError exception.\n3. Let func be GetSuperConstructor().\n4. ReturnIfAbrupt(func).\n5. Let argList be ArgumentListEvaluation of Arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/super/call-spread-obj-overrides-prev-properties.js", "description": " Object Spread properties overrides previous definitions (SuperCall)", "esid": " sec-super-keyword-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "info": " |SuperCall : super Arguments\n\n1. Let newTarget be GetNewTarget().\n2. If newTarget is undefined, throw a ReferenceError exception.\n3. Let func be GetSuperConstructor().\n4. ReturnIfAbrupt(func).\n5. Let argList be ArgumentListEvaluation of Arguments.\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/super/call-spread-obj-skip-non-enumerable.js", "description": " Object Spread doesn't copy non-enumerable properties (SuperCall)", "esid": " sec-super-keyword-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "info": " |SuperCall : super Arguments\n\n1. Let newTarget be GetNewTarget().\n2. If newTarget is undefined, throw a ReferenceError exception.\n3. Let func be GetSuperConstructor().\n4. ReturnIfAbrupt(func).\n5. Let argList be ArgumentListEvaluation of Arguments.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/super/call-spread-obj-spread-order.js", "description": " Spread operation follows [[OwnPropertyKeys]] order (SuperCall)", "esid": " sec-super-keyword-runtime-semantics-evaluation", "features": ["Symbol", "object-spread"], "flags": ["generated"], "includes": ["compareArray.js"], "info": " |SuperCall : super Arguments\n\n1. Let newTarget be GetNewTarget().\n2. If newTarget is undefined, throw a ReferenceError exception.\n3. Let func be GetSuperConstructor().\n4. ReturnIfAbrupt(func).\n5. Let argList be ArgumentListEvaluation of Arguments.\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/super/call-spread-obj-symbol-property.js", "description": " Spread operation where source object contains Symbol properties (SuperCall)", "esid": " sec-super-keyword-runtime-semantics-evaluation", "features": ["Symbol", "object-spread"], "flags": ["generated"], "info": " |SuperCall : super Arguments\n\n1. Let newTarget be GetNewTarget().\n2. If newTarget is undefined, throw a ReferenceError exception.\n3. Let func be GetSuperConstructor().\n4. ReturnIfAbrupt(func).\n5. Let argList be ArgumentListEvaluation of Arguments.\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/super/call-spread-obj-undefined.js", "description": " Undefined Object Spread is ignored (SuperCall)", "esid": " sec-super-keyword-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "info": " |SuperCall : super Arguments\n\n1. Let newTarget be GetNewTarget().\n2. If newTarget is undefined, throw a ReferenceError exception.\n3. Let func be GetSuperConstructor().\n4. ReturnIfAbrupt(func).\n5. Let argList be ArgumentListEvaluation of Arguments.\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/super/call-spread-obj-with-overrides.js", "description": " Object Spread properties being overriden (SuperCall)", "esid": " sec-super-keyword-runtime-semantics-evaluation", "features": ["Symbol", "object-spread"], "flags": ["generated"], "info": " |SuperCall : super Arguments\n\n1. Let newTarget be GetNewTarget().\n2. If newTarget is undefined, throw a ReferenceError exception.\n3. Let func be GetSuperConstructor().\n4. ReturnIfAbrupt(func).\n5. Let argList be ArgumentListEvaluation of Arguments.\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/super/call-spread-sngl-obj-ident.js", "description": " Object Spread operator without other arguments (SuperCall)", "esid": " sec-super-keyword-runtime-semantics-evaluation", "features": ["object-spread"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |SuperCall : super Arguments\n\n1. Let newTarget be GetNewTarget().\n2. If newTarget is undefined, throw a ReferenceError exception.\n3. Let func be GetSuperConstructor().\n4. ReturnIfAbrupt(func).\n5. Let argList be ArgumentListEvaluation of Arguments.\n[...]\n\nPending Runtime Semantics: PropertyDefinitionEvaluation\n\nPropertyDefinition:...AssignmentExpression\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let fromValue be GetValue(exprValue).\n3. ReturnIfAbrupt(fromValue).\n4. Let excludedNames be a new empty List.\n5. Return CopyDataProperties(object, fromValue, excludedNames).\n\n"}, {"path": "./test262-main/test/language/expressions/yield/star-return-is-null.js", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "description": " >If iterator's \"return\" method is `null`,\nreceived completion is forwarded to the runtime.\n", "info": " |YieldExpression : yield * AssignmentExpression\n\n[...]\n7. Repeat,\n[...]\nc. Else,\ni. Assert: received.[[Type]] is return.\nii. Let return be ? GetMethod(iterator, \"return\").\niii. If return is undefined, then\n[...]\n2. Return Completion(received).\n\nGetMethod ( V, P )\n\n[...]\n2. Let func be ? GetV(V, P).\n3. If func is either undefined or null, return undefined.\n", "features": ["generators", "Symbol.iterator"]}, {"path": "./test262-main/test/language/expressions/yield/star-rhs-iter-rtrn-no-rtrn.js", "esid": " 14.4.14", "version": 6, "description": " >\"Return\" completion returned when `return` method is not defined\n", "info": " |YieldExpression : yield * AssignmentExpression\n\n1. Let exprRef be the result of evaluating AssignmentExpression.\n2. Let value be ? GetValue(exprRef).\n3. Let iterator be ? GetIterator(value).\n4. Let received be NormalCompletion(undefined).\n5. Repeat\na. If received.[[Type]] is normal, then\n[...]\nb. Else if received.[[Type]] is throw, then\n[...]\nc. Else,\ni. Assert: received.[[Type]] is return.\nii. Let return be ? GetMethod(iterator, \"return\").\niii. If return is undefined, return Completion(received).\n", "features": ["generators", "Symbol.iterator"]}, {"path": "./test262-main/test/language/expressions/yield/star-rhs-iter-rtrn-res-done-err.js", "esid": " 14.4.14", "version": 6, "description": " >Abrupt completion returned when accessing `done` property of iteration result\n", "info": " |YieldExpression : yield * AssignmentExpression\n\n1. Let exprRef be the result of evaluating AssignmentExpression.\n2. Let value be ? GetValue(exprRef).\n3. Let iterator be ? GetIterator(value).\n4. Let received be NormalCompletion(undefined).\n5. Repeat\na. If received.[[Type]] is normal, then\n[...]\nb. Else if received.[[Type]] is throw, then\n[...]\nc. Else,\ni. Assert: received.[[Type]] is return.\nii. Let return be ? GetMethod(iterator, \"return\").\niii. If return is undefined, return Completion(received).\niv. Let innerReturnResult be ? Call(return, iterator, \u00ab\nreceived.[[Value]] \u00bb).\nv. If Type(innerReturnResult) is not Object, throw a TypeError\nexception.\nvi. Let done be ? IteratorComplete(innerReturnResult).\n\n7.4.3 IteratorComplete\n\n1. Assert: Type(iterResult) is Object.\n2. Return ToBoolean(? Get(iterResult, \"done\")).\n", "features": ["generators", "Symbol.iterator"]}, {"path": "./test262-main/test/language/expressions/yield/star-rhs-iter-rtrn-res-done-no-value.js", "esid": " 14.4.14", "version": 6, "description": " >`value` property is not accessed when iteration is incomplete\n", "info": " |YieldExpression : yield * AssignmentExpression\n\n1. Let exprRef be the result of evaluating AssignmentExpression.\n2. Let value be ? GetValue(exprRef).\n3. Let iterator be ? GetIterator(value).\n4. Let received be NormalCompletion(undefined).\n5. Repeat\na. If received.[[Type]] is normal, then\n[...]\nb. Else if received.[[Type]] is throw, then\n[...]\nc. Else,\ni. Assert: received.[[Type]] is return.\nii. Let return be ? GetMethod(iterator, \"return\").\niii. If return is undefined, return Completion(received).\niv. Let innerReturnResult be ? Call(return, iterator, \u00ab\nreceived.[[Value]] \u00bb).\nv. If Type(innerReturnResult) is not Object, throw a TypeError\nexception.\nvi. Let done be ? IteratorComplete(innerReturnResult).\nvii. If done is true, then\n1. Let value be ? IteratorValue(innerReturnResult).\n2. Return Completion{[[Type]]: return, [[Value]]: value,\n[[Target]]: empty}.\nviii. Let received be GeneratorYield(innerReturnResult).\n\n7.4.3 IteratorComplete\n\n1. Assert: Type(iterResult) is Object.\n2. Return ToBoolean(? Get(iterResult, \"done\")).\n", "features": ["generators", "Symbol.iterator"]}, {"path": "./test262-main/test/language/expressions/yield/star-rhs-iter-rtrn-res-value-err.js", "esid": " 14.4.14", "version": 6, "description": " >Abrupt completion returned when accessing `value` property of iteration\nresult\n", "info": " |YieldExpression : yield * AssignmentExpression\n\n1. Let exprRef be the result of evaluating AssignmentExpression.\n2. Let value be ? GetValue(exprRef).\n3. Let iterator be ? GetIterator(value).\n4. Let received be NormalCompletion(undefined).\n5. Repeat\na. If received.[[Type]] is normal, then\n[...]\nb. Else if received.[[Type]] is throw, then\n[...]\nc. Else,\ni. Assert: received.[[Type]] is return.\nii. Let return be ? GetMethod(iterator, \"return\").\niii. If return is undefined, return Completion(received).\niv. Let innerReturnResult be ? Call(return, iterator, \u00ab\nreceived.[[Value]] \u00bb).\nv. If Type(innerReturnResult) is not Object, throw a TypeError\nexception.\nvi. Let done be ? IteratorComplete(innerReturnResult).\nvii. If done is true, then\n1. Let value be ? IteratorValue(innerReturnResult).\n\n7.4.4 IteratorValue\n\n1. Assert: Type(iterResult) is Object.\n2. Return ? Get(iterResult, \"value\").\n", "features": ["generators", "Symbol.iterator"]}, {"path": "./test262-main/test/language/expressions/yield/star-rhs-iter-rtrn-res-value-final.js", "esid": " 14.4.14", "version": 6, "description": " Value received from invocation of generator's `return` method", "info": " |YieldExpression : yield * AssignmentExpression\n\n1. Let exprRef be the result of evaluating AssignmentExpression.\n2. Let value be ? GetValue(exprRef).\n3. Let iterator be ? GetIterator(value).\n4. Let received be NormalCompletion(undefined).\n5. Repeat\na. If received.[[Type]] is normal, then\n[...]\nb. Else if received.[[Type]] is throw, then\n[...]\nc. Else,\ni. Assert: received.[[Type]] is return.\nii. Let return be ? GetMethod(iterator, \"return\").\niii. If return is undefined, return Completion(received).\niv. Let innerReturnResult be ? Call(return, iterator, \u00ab\nreceived.[[Value]] \u00bb).\nv. If Type(innerReturnResult) is not Object, throw a TypeError\nexception.\nvi. Let done be ? IteratorComplete(innerReturnResult).\nvii. If done is true, then\n1. Let value be ? IteratorValue(innerReturnResult).\n2. Return Completion{[[Type]]: return, [[Value]]: value,\n[[Target]]: empty}.\nviii. Let received be GeneratorYield(innerReturnResult).\n\n", "features": ["generators", "Symbol.iterator"]}, {"path": "./test262-main/test/language/expressions/yield/star-rhs-iter-rtrn-rtrn-call-err.js", "esid": " 14.4.14", "version": 6, "description": " Abrupt completion returned when invoking iterator `return` method", "info": " |YieldExpression : yield * AssignmentExpression\n\n1. Let exprRef be the result of evaluating AssignmentExpression.\n2. Let value be ? GetValue(exprRef).\n3. Let iterator be ? GetIterator(value).\n4. Let received be NormalCompletion(undefined).\n5. Repeat\na. If received.[[Type]] is normal, then\n[...]\nb. Else if received.[[Type]] is throw, then\n[...]\nc. Else,\ni. Assert: received.[[Type]] is return.\nii. Let return be ? GetMethod(iterator, \"return\").\niii. If return is undefined, return Completion(received).\niv. Let innerReturnResult be ? Call(return, iterator, \u00ab\nreceived.[[Value]] \u00bb).\n", "features": ["generators", "Symbol.iterator"]}, {"path": "./test262-main/test/language/expressions/yield/star-rhs-iter-rtrn-rtrn-call-non-obj.js", "esid": " 14.4.14", "version": 6, "description": " >TypeError thrown when iterator `return` method returns a non-object value\n", "info": " |YieldExpression : yield * AssignmentExpression\n\n1. Let exprRef be the result of evaluating AssignmentExpression.\n2. Let value be ? GetValue(exprRef).\n3. Let iterator be ? GetIterator(value).\n4. Let received be NormalCompletion(undefined).\n5. Repeat\na. If received.[[Type]] is normal, then\n[...]\nb. Else if received.[[Type]] is throw, then\n[...]\nc. Else,\ni. Assert: received.[[Type]] is return.\nii. Let return be ? GetMethod(iterator, \"return\").\niii. If return is undefined, return Completion(received).\niv. Let innerReturnResult be ? Call(return, iterator, \u00ab\nreceived.[[Value]] \u00bb).\nv. If Type(innerReturnResult) is not Object, throw a TypeError\nexception.\n", "features": ["generators", "Symbol.iterator"]}, {"path": "./test262-main/test/language/expressions/yield/star-rhs-iter-rtrn-rtrn-get-err.js", "esid": " 14.4.14", "version": 6, "description": " Abrupt completion returned when accessing iterator `return` method", "info": " |YieldExpression : yield * AssignmentExpression\n\n1. Let exprRef be the result of evaluating AssignmentExpression.\n2. Let value be ? GetValue(exprRef).\n3. Let iterator be ? GetIterator(value).\n4. Let received be NormalCompletion(undefined).\n5. Repeat\na. If received.[[Type]] is normal, then\n[...]\nb. Else if received.[[Type]] is throw, then\n[...]\nc. Else,\ni. Assert: received.[[Type]] is return.\nii. Let return be ? GetMethod(iterator, \"return\").\n", "features": ["generators", "Symbol.iterator"]}, {"path": "./test262-main/test/language/expressions/yield/star-rhs-iter-rtrn-rtrn-invoke.js", "esid": " 14.4.14", "version": 6, "description": " Invocation of iterator `return` method", "info": " |YieldExpression : yield * AssignmentExpression\n\n1. Let exprRef be the result of evaluating AssignmentExpression.\n2. Let value be ? GetValue(exprRef).\n3. Let iterator be ? GetIterator(value).\n4. Let received be NormalCompletion(undefined).\n5. Repeat\na. If received.[[Type]] is normal, then\n[...]\nb. Else if received.[[Type]] is throw, then\n[...]\nc. Else,\ni. Assert: received.[[Type]] is return.\nii. Let return be ? GetMethod(iterator, \"return\").\niii. If return is undefined, return Completion(received).\niv. Let innerReturnResult be ? Call(return, iterator, \u00ab\nreceived.[[Value]] \u00bb).\n[...]\n", "features": ["generators", "Symbol.iterator"]}, {"path": "./test262-main/test/language/expressions/yield/star-rhs-iter-thrw-thrw-call-non-obj.js", "esid": " 14.4.14", "version": 6, "description": " >TypeError thrown when iterator `throw` method returns a non-object value\n", "info": " |YieldExpression : yield * AssignmentExpression\n\n1. Let exprRef be the result of evaluating AssignmentExpression.\n2. Let value be ? GetValue(exprRef).\n3. Let iterator be ? GetIterator(value).\n4. Let received be NormalCompletion(undefined).\n5. Repeat\na. If received.[[Type]] is normal, then\n[...]\nb. Else if received.[[Type]] is throw, then\ni. Let throw be ? GetMethod(iterator, \"throw\").\nii. If throw is not undefined, then\n1. Let innerResult be ? Call(throw, iterator, \u00ab received.[[Value]]\n\u00bb).\n2. NOTE: Exceptions from the inner iterator throw method are\npropagated. Normal completions from an inner throw method are\nprocessed similarly to an inner next.\n3. If Type(innerResult) is not Object, throw a TypeError exception.\n", "features": ["generators", "Symbol.iterator"]}, {"path": "./test262-main/test/language/expressions/yield/star-rhs-iter-thrw-violation-no-rtrn.js", "esid": " 14.4.14", "version": 6, "description": " >Abrupt completion returned after protocol violation (and a `return` method\nis not defined)\n", "info": " |YieldExpression : yield * AssignmentExpression\n\n1. Let exprRef be the result of evaluating AssignmentExpression.\n2. Let value be ? GetValue(exprRef).\n3. Let iterator be ? GetIterator(value).\n4. Let received be NormalCompletion(undefined).\n5. Repeat\na. If received.[[Type]] is normal, then\n[...]\nb. Else if received.[[Type]] is throw, then\ni. Let throw be ? GetMethod(iterator, \"throw\").\nii. If throw is not undefined, then\n[...]\niii. Else,\n1. NOTE: If iterator does not have a throw method, this throw is\ngoing to terminate the yield* loop. But first we need to give\niterator a chance to clean up.\n2. Perform ? IteratorClose(iterator, Completion{[[Type]]: normal,\n[[Value]]: empty, [[Target]]: empty}).\n3. NOTE: The next step throws a TypeError to indicate that there\nwas a yield* protocol violation: iterator does not have a throw\nmethod.\n4. Throw a TypeError exception.\n\n7.4.6 IteratorClose\n\n1. Assert: Type(iterator) is Object.\n2. Assert: completion is a Completion Record.\n3. Let return be ? GetMethod(iterator, \"return\").\n4. If return is undefined, return Completion(completion).\n", "features": ["generators", "Symbol.iterator"]}, {"path": "./test262-main/test/language/expressions/yield/star-rhs-iter-thrw-violation-rtrn-call-err.js", "esid": " 14.4.14", "version": 6, "description": " >Abrupt completion returned when invoking iterator `return` method following\nprotocol violation\n", "info": " |YieldExpression : yield * AssignmentExpression\n\n1. Let exprRef be the result of evaluating AssignmentExpression.\n2. Let value be ? GetValue(exprRef).\n3. Let iterator be ? GetIterator(value).\n4. Let received be NormalCompletion(undefined).\n5. Repeat\na. If received.[[Type]] is normal, then\n[...]\nb. Else if received.[[Type]] is throw, then\ni. Let throw be ? GetMethod(iterator, \"throw\").\nii. If throw is not undefined, then\n[...]\niii. Else,\n1. NOTE: If iterator does not have a throw method, this throw is\ngoing to terminate the yield* loop. But first we need to give\niterator a chance to clean up.\n2. Perform ? IteratorClose(iterator, Completion{[[Type]]: normal,\n[[Value]]: empty, [[Target]]: empty}).\n\n7.4.6 IteratorClose\n\n1. Assert: Type(iterator) is Object.\n2. Assert: completion is a Completion Record.\n3. Let return be ? GetMethod(iterator, \"return\").\n4. If return is undefined, return Completion(completion).\n5. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n6. If completion.[[Type]] is throw, return Completion(completion).\n7. If innerResult.[[Type]] is throw, return Completion(innerResult).\n8. If Type(innerResult.[[Value]]) is not Object, throw a TypeError exception.\n", "features": ["generators", "Symbol.iterator"]}, {"path": "./test262-main/test/language/expressions/yield/star-rhs-iter-thrw-violation-rtrn-call-non-obj.js", "esid": " 14.4.14", "version": 6, "description": " >Non-object value returned by iterator `return` method following protocol\nviolation\n", "info": " |YieldExpression : yield * AssignmentExpression\n\n1. Let exprRef be the result of evaluating AssignmentExpression.\n2. Let value be ? GetValue(exprRef).\n3. Let iterator be ? GetIterator(value).\n4. Let received be NormalCompletion(undefined).\n5. Repeat\na. If received.[[Type]] is normal, then\n[...]\nb. Else if received.[[Type]] is throw, then\ni. Let throw be ? GetMethod(iterator, \"throw\").\nii. If throw is not undefined, then\n[...]\niii. Else,\n1. NOTE: If iterator does not have a throw method, this throw is\ngoing to terminate the yield* loop. But first we need to give\niterator a chance to clean up.\n2. Perform ? IteratorClose(iterator, Completion{[[Type]]: normal,\n[[Value]]: empty, [[Target]]: empty}).\n\n7.4.6 IteratorClose\n\n1. Assert: Type(iterator) is Object.\n2. Assert: completion is a Completion Record.\n3. Let return be ? GetMethod(iterator, \"return\").\n4. If return is undefined, return Completion(completion).\n5. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n6. If completion.[[Type]] is throw, return Completion(completion).\n7. If innerResult.[[Type]] is throw, return Completion(innerResult).\n8. If Type(innerResult.[[Value]]) is not Object, throw a TypeError exception.\n", "features": ["generators", "Symbol.iterator"]}, {"path": "./test262-main/test/language/expressions/yield/star-rhs-iter-thrw-violation-rtrn-get-err.js", "esid": " 14.4.14", "version": 6, "description": " >Abrupt completion returned when accessing iterator `return` property after\nprotocol violation\n", "info": " |YieldExpression : yield * AssignmentExpression\n\n1. Let exprRef be the result of evaluating AssignmentExpression.\n2. Let value be ? GetValue(exprRef).\n3. Let iterator be ? GetIterator(value).\n4. Let received be NormalCompletion(undefined).\n5. Repeat\na. If received.[[Type]] is normal, then\n[...]\nb. Else if received.[[Type]] is throw, then\ni. Let throw be ? GetMethod(iterator, \"throw\").\nii. If throw is not undefined, then\n[...]\niii. Else,\n1. NOTE: If iterator does not have a throw method, this throw is\ngoing to terminate the yield* loop. But first we need to give\niterator a chance to clean up.\n2. Perform ? IteratorClose(iterator, Completion{[[Type]]: normal,\n[[Value]]: empty, [[Target]]: empty}).\n\n7.4.6 IteratorClose\n\n1. Assert: Type(iterator) is Object.\n2. Assert: completion is a Completion Record.\n3. Let return be ? GetMethod(iterator, \"return\").\n", "features": ["generators", "Symbol.iterator"]}, {"path": "./test262-main/test/language/expressions/yield/star-rhs-iter-thrw-violation-rtrn-invoke.js", "esid": " 14.4.14", "version": 6, "description": " >Abrupt completion returned after protocol violation (and a `return` method\nis defined)\n", "info": " |YieldExpression : yield * AssignmentExpression\n\n1. Let exprRef be the result of evaluating AssignmentExpression.\n2. Let value be ? GetValue(exprRef).\n3. Let iterator be ? GetIterator(value).\n4. Let received be NormalCompletion(undefined).\n5. Repeat\na. If received.[[Type]] is normal, then\n[...]\nb. Else if received.[[Type]] is throw, then\ni. Let throw be ? GetMethod(iterator, \"throw\").\nii. If throw is not undefined, then\n[...]\niii. Else,\n1. NOTE: If iterator does not have a throw method, this throw is\ngoing to terminate the yield* loop. But first we need to give\niterator a chance to clean up.\n2. Perform ? IteratorClose(iterator, Completion{[[Type]]: normal,\n[[Value]]: empty, [[Target]]: empty}).\n3. NOTE: The next step throws a TypeError to indicate that there\nwas a yield* protocol violation: iterator does not have a throw\nmethod.\n4. Throw a TypeError exception.\n\n7.4.6 IteratorClose\n\n1. Assert: Type(iterator) is Object.\n2. Assert: completion is a Completion Record.\n3. Let return be ? GetMethod(iterator, \"return\").\n4. If return is undefined, return Completion(completion).\n5. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n6. If completion.[[Type]] is throw, return Completion(completion).\n7. If innerResult.[[Type]] is throw, return Completion(innerResult).\n8. If Type(innerResult.[[Value]]) is not Object, throw a TypeError exception.\n9. Return Completion(completion).\n", "features": ["generators", "Symbol.iterator"]}, {"path": "./test262-main/test/language/expressions/yield/star-throw-is-null.js", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "description": " >If iterator's \"throw\" method is `null`,\nIteratorClose is called before rising TypeError.\n", "info": " |YieldExpression : yield * AssignmentExpression\n\n[...]\n7. Repeat,\n[...]\nb. Else if received.[[Type]] is throw, then\ni. Let throw be ? GetMethod(iterator, \"throw\").\nii. If throw is not undefined, then\n[...]\niii. Else,\n[...]\n4. Else, perform ? IteratorClose(iteratorRecord, closeCompletion).\n[...]\n6. Throw a TypeError exception.\n\nGetMethod ( V, P )\n\n[...]\n2. Let func be ? GetV(V, P).\n3. If func is either undefined or null, return undefined.\n\nIteratorClose ( iteratorRecord, completion )\n\n[...]\n4. Let innerResult be GetMethod(iterator, \"return\").\n5. If innerResult.[[Type]] is normal, then\na. Let return be innerResult.[[Value]].\nb. If return is undefined, return Completion(completion).\n", "features": ["generators", "Symbol.iterator"]}, {"path": "./test262-main/test/language/identifiers/part-unicode-10.0.0-escaped.js", "author": " Mathias Bynens", "esid": " sec-names-and-keywords", "description": " |Test that Unicode v10.0.0 ID_Continue characters are accepted as\nidentifier part characters in escaped form, i.e.\n- \\uXXXX or \\u{XXXX} for BMP symbols\n- \\u{XXXXXX} for astral symbols\n", "info": " |Generated by https://github.com/mathiasbynens/caniunicode\n"}, {"path": "./test262-main/test/language/identifiers/part-unicode-10.0.0.js", "author": " Mathias Bynens", "esid": " sec-names-and-keywords", "description": " |Test that Unicode v10.0.0 ID_Continue characters are accepted as\nidentifier part characters.\n", "info": " |Generated by https://github.com/mathiasbynens/caniunicode\n"}, {"path": "./test262-main/test/language/identifiers/part-unicode-5.2.0-escaped.js", "author": " Mathias Bynens", "esid": " sec-names-and-keywords", "description": " |Test that Unicode v5.2.0 ID_Continue characters are accepted as\nidentifier part characters in escaped form, i.e.\n- \\uXXXX or \\u{XXXX} for BMP symbols\n- \\u{XXXXXX} for astral symbols\n", "info": " |Generated by https://github.com/mathiasbynens/caniunicode\n"}, {"path": "./test262-main/test/language/identifiers/part-unicode-5.2.0.js", "author": " Mathias Bynens", "esid": " sec-names-and-keywords", "description": " |Test that Unicode v5.2.0 ID_Continue characters are accepted as\nidentifier part characters.\n", "info": " |Generated by https://github.com/mathiasbynens/caniunicode\n"}, {"path": "./test262-main/test/language/identifiers/part-unicode-6.0.0-escaped.js", "author": " Mathias Bynens", "esid": " sec-names-and-keywords", "description": " |Test that Unicode v6.0.0 ID_Continue characters are accepted as\nidentifier part characters in escaped form, i.e.\n- \\uXXXX or \\u{XXXX} for BMP symbols\n- \\u{XXXXXX} for astral symbols\n", "info": " |Generated by https://github.com/mathiasbynens/caniunicode\n"}, {"path": "./test262-main/test/language/identifiers/part-unicode-6.0.0.js", "author": " Mathias Bynens", "esid": " sec-names-and-keywords", "description": " |Test that Unicode v6.0.0 ID_Continue characters are accepted as\nidentifier part characters.\n", "info": " |Generated by https://github.com/mathiasbynens/caniunicode\n"}, {"path": "./test262-main/test/language/identifiers/part-unicode-6.1.0-escaped.js", "author": " Mathias Bynens", "esid": " sec-names-and-keywords", "description": " |Test that Unicode v6.1.0 ID_Continue characters are accepted as\nidentifier part characters in escaped form, i.e.\n- \\uXXXX or \\u{XXXX} for BMP symbols\n- \\u{XXXXXX} for astral symbols\n", "info": " |Generated by https://github.com/mathiasbynens/caniunicode\n"}, {"path": "./test262-main/test/language/identifiers/part-unicode-6.1.0.js", "author": " Mathias Bynens", "esid": " sec-names-and-keywords", "description": " |Test that Unicode v6.1.0 ID_Continue characters are accepted as\nidentifier part characters.\n", "info": " |Generated by https://github.com/mathiasbynens/caniunicode\n"}, {"path": "./test262-main/test/language/identifiers/part-unicode-7.0.0-escaped.js", "author": " Mathias Bynens", "esid": " sec-names-and-keywords", "description": " |Test that Unicode v7.0.0 ID_Continue characters are accepted as\nidentifier part characters in escaped form, i.e.\n- \\uXXXX or \\u{XXXX} for BMP symbols\n- \\u{XXXXXX} for astral symbols\n", "info": " |Generated by https://github.com/mathiasbynens/caniunicode\n"}, {"path": "./test262-main/test/language/identifiers/part-unicode-7.0.0.js", "author": " Mathias Bynens", "esid": " sec-names-and-keywords", "description": " |Test that Unicode v7.0.0 ID_Continue characters are accepted as\nidentifier part characters.\n", "info": " |Generated by https://github.com/mathiasbynens/caniunicode\n"}, {"path": "./test262-main/test/language/identifiers/part-unicode-8.0.0-escaped.js", "author": " Mathias Bynens", "esid": " sec-names-and-keywords", "description": " |Test that Unicode v8.0.0 ID_Continue characters are accepted as\nidentifier part characters in escaped form, i.e.\n- \\uXXXX or \\u{XXXX} for BMP symbols\n- \\u{XXXXXX} for astral symbols\n", "info": " |Generated by https://github.com/mathiasbynens/caniunicode\n"}, {"path": "./test262-main/test/language/identifiers/part-unicode-8.0.0.js", "author": " Mathias Bynens", "esid": " sec-names-and-keywords", "description": " |Test that Unicode v8.0.0 ID_Continue characters are accepted as\nidentifier part characters.\n", "info": " |Generated by https://github.com/mathiasbynens/caniunicode\n"}, {"path": "./test262-main/test/language/identifiers/part-unicode-9.0.0-escaped.js", "author": " Mathias Bynens", "esid": " sec-names-and-keywords", "description": " |Test that Unicode v9.0.0 ID_Continue characters are accepted as\nidentifier part characters in escaped form, i.e.\n- \\uXXXX or \\u{XXXX} for BMP symbols\n- \\u{XXXXXX} for astral symbols\n", "info": " |Generated by https://github.com/mathiasbynens/caniunicode\n"}, {"path": "./test262-main/test/language/identifiers/part-unicode-9.0.0.js", "author": " Mathias Bynens", "esid": " sec-names-and-keywords", "description": " |Test that Unicode v9.0.0 ID_Continue characters are accepted as\nidentifier part characters.\n", "info": " |Generated by https://github.com/mathiasbynens/caniunicode\n"}, {"path": "./test262-main/test/language/identifiers/start-unicode-10.0.0-escaped.js", "author": " Mathias Bynens", "esid": " sec-names-and-keywords", "description": " |Test that Unicode v10.0.0 ID_Start characters are accepted as\nidentifier start characters in escaped form, i.e.\n- \\uXXXX or \\u{XXXX} for BMP symbols\n- \\u{XXXXXX} for astral symbols\n", "info": " |Generated by https://github.com/mathiasbynens/caniunicode\n"}, {"path": "./test262-main/test/language/identifiers/start-unicode-10.0.0.js", "author": " Mathias Bynens", "esid": " sec-names-and-keywords", "description": " |Test that Unicode v10.0.0 ID_Start characters are accepted as\nidentifier start characters.\n", "info": " |Generated by https://github.com/mathiasbynens/caniunicode\n"}, {"path": "./test262-main/test/language/identifiers/start-unicode-5.2.0-escaped.js", "author": " Mathias Bynens", "esid": " sec-names-and-keywords", "description": " |Test that Unicode v5.2.0 ID_Start characters are accepted as\nidentifier start characters in escaped form, i.e.\n- \\uXXXX or \\u{XXXX} for BMP symbols\n- \\u{XXXXXX} for astral symbols\n", "info": " |Generated by https://github.com/mathiasbynens/caniunicode\n"}, {"path": "./test262-main/test/language/identifiers/start-unicode-5.2.0.js", "author": " Mathias Bynens", "esid": " sec-names-and-keywords", "description": " |Test that Unicode v5.2.0 ID_Start characters are accepted as\nidentifier start characters.\n", "info": " |Generated by https://github.com/mathiasbynens/caniunicode\n"}, {"path": "./test262-main/test/language/identifiers/start-unicode-6.0.0-escaped.js", "author": " Mathias Bynens", "esid": " sec-names-and-keywords", "description": " |Test that Unicode v6.0.0 ID_Start characters are accepted as\nidentifier start characters in escaped form, i.e.\n- \\uXXXX or \\u{XXXX} for BMP symbols\n- \\u{XXXXXX} for astral symbols\n", "info": " |Generated by https://github.com/mathiasbynens/caniunicode\n"}, {"path": "./test262-main/test/language/identifiers/start-unicode-6.0.0.js", "author": " Mathias Bynens", "esid": " sec-names-and-keywords", "description": " |Test that Unicode v6.0.0 ID_Start characters are accepted as\nidentifier start characters.\n", "info": " |Generated by https://github.com/mathiasbynens/caniunicode\n"}, {"path": "./test262-main/test/language/identifiers/start-unicode-6.1.0-escaped.js", "author": " Mathias Bynens", "esid": " sec-names-and-keywords", "description": " |Test that Unicode v6.1.0 ID_Start characters are accepted as\nidentifier start characters in escaped form, i.e.\n- \\uXXXX or \\u{XXXX} for BMP symbols\n- \\u{XXXXXX} for astral symbols\n", "info": " |Generated by https://github.com/mathiasbynens/caniunicode\n"}, {"path": "./test262-main/test/language/identifiers/start-unicode-6.1.0.js", "author": " Mathias Bynens", "esid": " sec-names-and-keywords", "description": " |Test that Unicode v6.1.0 ID_Start characters are accepted as\nidentifier start characters.\n", "info": " |Generated by https://github.com/mathiasbynens/caniunicode\n"}, {"path": "./test262-main/test/language/identifiers/start-unicode-7.0.0-escaped.js", "author": " Mathias Bynens", "esid": " sec-names-and-keywords", "description": " |Test that Unicode v7.0.0 ID_Start characters are accepted as\nidentifier start characters in escaped form, i.e.\n- \\uXXXX or \\u{XXXX} for BMP symbols\n- \\u{XXXXXX} for astral symbols\n", "info": " |Generated by https://github.com/mathiasbynens/caniunicode\n"}, {"path": "./test262-main/test/language/identifiers/start-unicode-7.0.0.js", "author": " Mathias Bynens", "esid": " sec-names-and-keywords", "description": " |Test that Unicode v7.0.0 ID_Start characters are accepted as\nidentifier start characters.\n", "info": " |Generated by https://github.com/mathiasbynens/caniunicode\n"}, {"path": "./test262-main/test/language/identifiers/start-unicode-8.0.0-escaped.js", "author": " Mathias Bynens", "esid": " sec-names-and-keywords", "description": " |Test that Unicode v8.0.0 ID_Start characters are accepted as\nidentifier start characters in escaped form, i.e.\n- \\uXXXX or \\u{XXXX} for BMP symbols\n- \\u{XXXXXX} for astral symbols\n", "info": " |Generated by https://github.com/mathiasbynens/caniunicode\n"}, {"path": "./test262-main/test/language/identifiers/start-unicode-8.0.0.js", "author": " Mathias Bynens", "esid": " sec-names-and-keywords", "description": " |Test that Unicode v8.0.0 ID_Start characters are accepted as\nidentifier start characters.\n", "info": " |Generated by https://github.com/mathiasbynens/caniunicode\n"}, {"path": "./test262-main/test/language/identifiers/start-unicode-9.0.0-escaped.js", "author": " Mathias Bynens", "esid": " sec-names-and-keywords", "description": " |Test that Unicode v9.0.0 ID_Start characters are accepted as\nidentifier start characters in escaped form, i.e.\n- \\uXXXX or \\u{XXXX} for BMP symbols\n- \\u{XXXXXX} for astral symbols\n", "info": " |Generated by https://github.com/mathiasbynens/caniunicode\n"}, {"path": "./test262-main/test/language/identifiers/start-unicode-9.0.0.js", "author": " Mathias Bynens", "esid": " sec-names-and-keywords", "description": " |Test that Unicode v9.0.0 ID_Start characters are accepted as\nidentifier start characters.\n", "info": " |Generated by https://github.com/mathiasbynens/caniunicode\n"}, {"path": "./test262-main/test/language/statements/async-generator/dflt-params-abrupt.js", "description": " Abrupt completion returned by evaluation of initializer (async generator function declaration)", "esid": " sec-asyncgenerator-definitions-instantiatefunctionobject", "features": ["default-parameters", "async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorDeclaration : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n3. Let F be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters, AsyncGeneratorBody,\nscope, strict).\n[...]\n\n\n14.1.19 Runtime Semantics: IteratorBindingInitialization\n\nFormalsList : FormalsList , FormalParameter\n\n1. Let status be the result of performing IteratorBindingInitialization for\nFormalsList using iteratorRecord and environment as the arguments.\n2. ReturnIfAbrupt(status).\n3. Return the result of performing IteratorBindingInitialization for\nFormalParameter using iteratorRecord and environment as the arguments.\n\n"}, {"path": "./test262-main/test/language/statements/async-generator/dflt-params-ref-later.js", "description": " Referencing a parameter that occurs later in the ParameterList (async generator function declaration)", "esid": " sec-asyncgenerator-definitions-instantiatefunctionobject", "features": ["default-parameters", "async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorDeclaration : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n3. Let F be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters, AsyncGeneratorBody,\nscope, strict).\n[...]\n\n\n14.1.19 Runtime Semantics: IteratorBindingInitialization\n\nFormalsList : FormalsList , FormalParameter\n\n1. Let status be the result of performing IteratorBindingInitialization for\nFormalsList using iteratorRecord and environment as the arguments.\n2. ReturnIfAbrupt(status).\n3. Return the result of performing IteratorBindingInitialization for\nFormalParameter using iteratorRecord and environment as the arguments.\n\n"}, {"path": "./test262-main/test/language/statements/async-generator/dflt-params-ref-self.js", "description": " Referencing a parameter from within its own initializer (async generator function declaration)", "esid": " sec-asyncgenerator-definitions-instantiatefunctionobject", "features": ["default-parameters", "async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorDeclaration : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n3. Let F be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters, AsyncGeneratorBody,\nscope, strict).\n[...]\n\n\n14.1.19 Runtime Semantics: IteratorBindingInitialization\n\nFormalsList : FormalsList , FormalParameter\n\n1. Let status be the result of performing IteratorBindingInitialization for\nFormalsList using iteratorRecord and environment as the arguments.\n2. ReturnIfAbrupt(status).\n3. Return the result of performing IteratorBindingInitialization for\nFormalParameter using iteratorRecord and environment as the arguments.\n\n"}, {"path": "./test262-main/test/language/statements/async-generator/dstr/ary-init-iter-get-err-array-prototype.js", "description": " Abrupt completion returned by GetIterator (async generator function declaration)", "esid": " sec-asyncgenerator-definitions-instantiatefunctionobject", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorDeclaration : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n3. Let F be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters, AsyncGeneratorBody,\nscope, strict).\n[...]\n\nRuntime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iteratorRecord be ? GetIterator(value).\n\nGetIterator ( obj [ , hint [ , method ] ] )\n\n[...]\n4. Let iterator be ? Call(method, obj).\n\nCall ( F, V [ , argumentsList ] )\n\n[...]\n2. If IsCallable(F) is false, throw a TypeError exception.\n\n"}, {"path": "./test262-main/test/language/statements/async-generator/dstr/ary-init-iter-get-err.js", "description": " Abrupt completion returned by GetIterator (async generator function declaration)", "esid": " sec-asyncgenerator-definitions-instantiatefunctionobject", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorDeclaration : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n3. Let F be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters, AsyncGeneratorBody,\nscope, strict).\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iterator be GetIterator(value).\n2. ReturnIfAbrupt(iterator).\n\n"}, {"path": "./test262-main/test/language/statements/async-generator/dstr/ary-ptrn-elem-ary-val-null.js", "description": " Nested array destructuring with a null value (async generator function declaration)", "esid": " sec-asyncgenerator-definitions-instantiatefunctionobject", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorDeclaration : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n3. Let F be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters, AsyncGeneratorBody,\nscope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. If iteratorRecord.[[done]] is false, then\n[...]\ne. Else\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iterator be GetIterator(value).\n2. ReturnIfAbrupt(iterator).\n"}, {"path": "./test262-main/test/language/statements/async-generator/dstr/ary-ptrn-elem-id-init-throws.js", "description": " Destructuring initializer returns an abrupt completion (async generator function declaration)", "esid": " sec-asyncgenerator-definitions-instantiatefunctionobject", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorDeclaration : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n3. Let F be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters, AsyncGeneratorBody,\nscope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/statements/async-generator/dstr/ary-ptrn-elem-id-init-unresolvable.js", "description": " Destructuring initializer is an unresolvable reference (async generator function declaration)", "esid": " sec-asyncgenerator-definitions-instantiatefunctionobject", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorDeclaration : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n3. Let F be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters, AsyncGeneratorBody,\nscope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/statements/async-generator/dstr/ary-ptrn-elem-id-iter-step-err.js", "description": " Error forwarding when IteratorStep returns an abrupt completion (async generator function declaration)", "esid": " sec-asyncgenerator-definitions-instantiatefunctionobject", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorDeclaration : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n3. Let F be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters, AsyncGeneratorBody,\nscope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/statements/async-generator/dstr/ary-ptrn-elem-id-iter-val-err.js", "description": " Error forwarding when IteratorValue returns an abrupt completion (async generator function declaration)", "esid": " sec-asyncgenerator-definitions-instantiatefunctionobject", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorDeclaration : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n3. Let F be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters, AsyncGeneratorBody,\nscope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\nd. If next is false, set iteratorRecord.[[done]] to true.\ne. Else,\ni. Let v be IteratorValue(next).\nii. If v is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\niii. ReturnIfAbrupt(v).\n\n"}, {"path": "./test262-main/test/language/statements/async-generator/dstr/ary-ptrn-elem-obj-val-null.js", "description": " Nested object destructuring with a null value (async generator function declaration)", "esid": " sec-asyncgenerator-definitions-instantiatefunctionobject", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorDeclaration : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n3. Let F be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters, AsyncGeneratorBody,\nscope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. If iteratorRecord.[[done]] is false, then\n[...]\ne. Else\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ObjectBindingPattern\n\n1. Let valid be RequireObjectCoercible(value).\n2. ReturnIfAbrupt(valid).\n"}, {"path": "./test262-main/test/language/statements/async-generator/dstr/ary-ptrn-elem-obj-val-undef.js", "description": " Nested object destructuring with a value of `undefined` (async generator function declaration)", "esid": " sec-asyncgenerator-definitions-instantiatefunctionobject", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorDeclaration : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n3. Let F be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters, AsyncGeneratorBody,\nscope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. If iteratorRecord.[[done]] is false, then\n[...]\ne. Else\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ObjectBindingPattern\n\n1. Let valid be RequireObjectCoercible(value).\n2. ReturnIfAbrupt(valid).\n"}, {"path": "./test262-main/test/language/statements/async-generator/dstr/ary-ptrn-elision-step-err.js", "description": " Elision advances iterator and forwards abrupt completions (async generator function declaration)", "esid": " sec-asyncgenerator-definitions-instantiatefunctionobject", "features": ["generators", "async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorDeclaration : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n3. Let F be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters, AsyncGeneratorBody,\nscope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ Elision ]\n\n1. Return the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with iteratorRecord\nas the argument.\n\n12.14.5.3 Runtime Semantics: IteratorDestructuringAssignmentEvaluation\n\nElision : ,\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/statements/async-generator/dstr/ary-ptrn-rest-id-elision-next-err.js", "description": " Rest element following elision elements (async generator function declaration)", "esid": " sec-asyncgenerator-definitions-instantiatefunctionobject", "features": ["generators", "async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorDeclaration : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n3. Let F be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters, AsyncGeneratorBody,\nscope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nArrayBindingPattern : [ Elisionopt BindingRestElement ]\n1. If Elision is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with\niteratorRecord as the argument.\nb. ReturnIfAbrupt(status).\n2. Return the result of performing IteratorBindingInitialization for\nBindingRestElement with iteratorRecord and environment as arguments.\n\n"}, {"path": "./test262-main/test/language/statements/async-generator/dstr/ary-ptrn-rest-id-iter-step-err.js", "description": " Error forwarding when IteratorStep returns an abrupt completion (async generator function declaration)", "esid": " sec-asyncgenerator-definitions-instantiatefunctionobject", "features": ["generators", "async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorDeclaration : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n3. Let F be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters, AsyncGeneratorBody,\nscope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\na. If iteratorRecord.[[done]] is false,\ni. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nii. If next is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\niii. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/statements/async-generator/dstr/ary-ptrn-rest-id-iter-val-err.js", "description": " Error forwarding when IteratorValue returns an abrupt completion (async generator function declaration)", "esid": " sec-asyncgenerator-definitions-instantiatefunctionobject", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorDeclaration : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n3. Let F be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters, AsyncGeneratorBody,\nscope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\n[...]\nc. Let nextValue be IteratorValue(next).\nd. If nextValue is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\ne. ReturnIfAbrupt(nextValue).\n\n"}, {"path": "./test262-main/test/language/statements/async-generator/dstr/dflt-ary-init-iter-get-err-array-prototype.js", "description": " Abrupt completion returned by GetIterator (async generator function declaration (default parameter))", "esid": " sec-asyncgenerator-definitions-instantiatefunctionobject", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorDeclaration : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n3. Let F be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters, AsyncGeneratorBody,\nscope, strict).\n[...]\n\nRuntime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iteratorRecord be ? GetIterator(value).\n\nGetIterator ( obj [ , hint [ , method ] ] )\n\n[...]\n4. Let iterator be ? Call(method, obj).\n\nCall ( F, V [ , argumentsList ] )\n\n[...]\n2. If IsCallable(F) is false, throw a TypeError exception.\n\n"}, {"path": "./test262-main/test/language/statements/async-generator/dstr/dflt-ary-init-iter-get-err.js", "description": " Abrupt completion returned by GetIterator (async generator function declaration (default parameter))", "esid": " sec-asyncgenerator-definitions-instantiatefunctionobject", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorDeclaration : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n3. Let F be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters, AsyncGeneratorBody,\nscope, strict).\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iterator be GetIterator(value).\n2. ReturnIfAbrupt(iterator).\n\n"}, {"path": "./test262-main/test/language/statements/async-generator/dstr/dflt-ary-ptrn-elem-ary-val-null.js", "description": " Nested array destructuring with a null value (async generator function declaration (default parameter))", "esid": " sec-asyncgenerator-definitions-instantiatefunctionobject", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorDeclaration : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n3. Let F be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters, AsyncGeneratorBody,\nscope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. If iteratorRecord.[[done]] is false, then\n[...]\ne. Else\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iterator be GetIterator(value).\n2. ReturnIfAbrupt(iterator).\n"}, {"path": "./test262-main/test/language/statements/async-generator/dstr/dflt-ary-ptrn-elem-id-init-throws.js", "description": " Destructuring initializer returns an abrupt completion (async generator function declaration (default parameter))", "esid": " sec-asyncgenerator-definitions-instantiatefunctionobject", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorDeclaration : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n3. Let F be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters, AsyncGeneratorBody,\nscope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/statements/async-generator/dstr/dflt-ary-ptrn-elem-id-init-unresolvable.js", "description": " Destructuring initializer is an unresolvable reference (async generator function declaration (default parameter))", "esid": " sec-asyncgenerator-definitions-instantiatefunctionobject", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorDeclaration : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n3. Let F be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters, AsyncGeneratorBody,\nscope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/statements/async-generator/dstr/dflt-ary-ptrn-elem-id-iter-step-err.js", "description": " Error forwarding when IteratorStep returns an abrupt completion (async generator function declaration (default parameter))", "esid": " sec-asyncgenerator-definitions-instantiatefunctionobject", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorDeclaration : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n3. Let F be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters, AsyncGeneratorBody,\nscope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/statements/async-generator/dstr/dflt-ary-ptrn-elem-id-iter-val-err.js", "description": " Error forwarding when IteratorValue returns an abrupt completion (async generator function declaration (default parameter))", "esid": " sec-asyncgenerator-definitions-instantiatefunctionobject", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorDeclaration : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n3. Let F be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters, AsyncGeneratorBody,\nscope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\nd. If next is false, set iteratorRecord.[[done]] to true.\ne. Else,\ni. Let v be IteratorValue(next).\nii. If v is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\niii. ReturnIfAbrupt(v).\n\n"}, {"path": "./test262-main/test/language/statements/async-generator/dstr/dflt-ary-ptrn-elem-obj-val-null.js", "description": " Nested object destructuring with a null value (async generator function declaration (default parameter))", "esid": " sec-asyncgenerator-definitions-instantiatefunctionobject", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorDeclaration : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n3. Let F be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters, AsyncGeneratorBody,\nscope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. If iteratorRecord.[[done]] is false, then\n[...]\ne. Else\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ObjectBindingPattern\n\n1. Let valid be RequireObjectCoercible(value).\n2. ReturnIfAbrupt(valid).\n"}, {"path": "./test262-main/test/language/statements/async-generator/dstr/dflt-ary-ptrn-elem-obj-val-undef.js", "description": " Nested object destructuring with a value of `undefined` (async generator function declaration (default parameter))", "esid": " sec-asyncgenerator-definitions-instantiatefunctionobject", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorDeclaration : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n3. Let F be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters, AsyncGeneratorBody,\nscope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. If iteratorRecord.[[done]] is false, then\n[...]\ne. Else\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ObjectBindingPattern\n\n1. Let valid be RequireObjectCoercible(value).\n2. ReturnIfAbrupt(valid).\n"}, {"path": "./test262-main/test/language/statements/async-generator/dstr/dflt-ary-ptrn-elision-step-err.js", "description": " Elision advances iterator and forwards abrupt completions (async generator function declaration (default parameter))", "esid": " sec-asyncgenerator-definitions-instantiatefunctionobject", "features": ["generators", "async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorDeclaration : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n3. Let F be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters, AsyncGeneratorBody,\nscope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ Elision ]\n\n1. Return the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with iteratorRecord\nas the argument.\n\n12.14.5.3 Runtime Semantics: IteratorDestructuringAssignmentEvaluation\n\nElision : ,\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/statements/async-generator/dstr/dflt-ary-ptrn-rest-id-elision-next-err.js", "description": " Rest element following elision elements (async generator function declaration (default parameter))", "esid": " sec-asyncgenerator-definitions-instantiatefunctionobject", "features": ["generators", "async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorDeclaration : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n3. Let F be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters, AsyncGeneratorBody,\nscope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nArrayBindingPattern : [ Elisionopt BindingRestElement ]\n1. If Elision is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with\niteratorRecord as the argument.\nb. ReturnIfAbrupt(status).\n2. Return the result of performing IteratorBindingInitialization for\nBindingRestElement with iteratorRecord and environment as arguments.\n\n"}, {"path": "./test262-main/test/language/statements/async-generator/dstr/dflt-ary-ptrn-rest-id-iter-step-err.js", "description": " Error forwarding when IteratorStep returns an abrupt completion (async generator function declaration (default parameter))", "esid": " sec-asyncgenerator-definitions-instantiatefunctionobject", "features": ["generators", "async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorDeclaration : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n3. Let F be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters, AsyncGeneratorBody,\nscope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\na. If iteratorRecord.[[done]] is false,\ni. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nii. If next is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\niii. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/statements/async-generator/dstr/dflt-ary-ptrn-rest-id-iter-val-err.js", "description": " Error forwarding when IteratorValue returns an abrupt completion (async generator function declaration (default parameter))", "esid": " sec-asyncgenerator-definitions-instantiatefunctionobject", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorDeclaration : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n3. Let F be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters, AsyncGeneratorBody,\nscope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\n[...]\nc. Let nextValue be IteratorValue(next).\nd. If nextValue is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\ne. ReturnIfAbrupt(nextValue).\n\n"}, {"path": "./test262-main/test/language/statements/async-generator/dstr/dflt-obj-init-null.js", "description": " Value specifed for object binding pattern must be object coercible (null) (async generator function declaration (default parameter))", "esid": " sec-asyncgenerator-definitions-instantiatefunctionobject", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorDeclaration : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n3. Let F be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters, AsyncGeneratorBody,\nscope, strict).\n[...]\n\nRuntime Semantics: BindingInitialization\n\nObjectBindingPattern : { }\n\n1. Return NormalCompletion(empty).\n"}, {"path": "./test262-main/test/language/statements/async-generator/dstr/dflt-obj-init-undefined.js", "description": " Value specifed for object binding pattern must be object coercible (undefined) (async generator function declaration (default parameter))", "esid": " sec-asyncgenerator-definitions-instantiatefunctionobject", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorDeclaration : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n3. Let F be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters, AsyncGeneratorBody,\nscope, strict).\n[...]\n\nRuntime Semantics: BindingInitialization\n\nObjectBindingPattern : { }\n\n1. Return NormalCompletion(empty).\n"}, {"path": "./test262-main/test/language/statements/async-generator/dstr/dflt-obj-ptrn-id-get-value-err.js", "description": " Error thrown when accessing the corresponding property of the value object (async generator function declaration (default parameter))", "esid": " sec-asyncgenerator-definitions-instantiatefunctionobject", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorDeclaration : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n3. Let F be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters, AsyncGeneratorBody,\nscope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. Let v be GetV(value, propertyName).\n5. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/statements/async-generator/dstr/dflt-obj-ptrn-id-init-throws.js", "description": " Error thrown when evaluating the initializer (async generator function declaration (default parameter))", "esid": " sec-asyncgenerator-definitions-instantiatefunctionobject", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorDeclaration : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n3. Let F be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters, AsyncGeneratorBody,\nscope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. LetdefaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/statements/async-generator/dstr/dflt-obj-ptrn-id-init-unresolvable.js", "description": " Destructuring initializer is an unresolvable reference (async generator function declaration (default parameter))", "esid": " sec-asyncgenerator-definitions-instantiatefunctionobject", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorDeclaration : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n3. Let F be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters, AsyncGeneratorBody,\nscope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/statements/async-generator/dstr/dflt-obj-ptrn-list-err.js", "description": " Binding property list evaluation is interrupted by an abrupt completion (async generator function declaration (default parameter))", "esid": " sec-asyncgenerator-definitions-instantiatefunctionobject", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorDeclaration : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n3. Let F be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters, AsyncGeneratorBody,\nscope, strict).\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPropertyList : BindingPropertyList , BindingProperty\n\n1. Let status be the result of performing BindingInitialization for\nBindingPropertyList using value and environment as arguments.\n2. ReturnIfAbrupt(status).\n"}, {"path": "./test262-main/test/language/statements/async-generator/dstr/dflt-obj-ptrn-prop-ary-value-null.js", "description": " Object binding pattern with \"nested\" array binding pattern taking the `null` value (async generator function declaration (default parameter))", "esid": " sec-asyncgenerator-definitions-instantiatefunctionobject", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorDeclaration : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n3. Let F be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters, AsyncGeneratorBody,\nscope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/async-generator/dstr/dflt-obj-ptrn-prop-eval-err.js", "description": " Evaluation of property name returns an abrupt completion (async generator function declaration (default parameter))", "esid": " sec-asyncgenerator-definitions-instantiatefunctionobject", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorDeclaration : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n3. Let F be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters, AsyncGeneratorBody,\nscope, strict).\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingProperty : PropertyName : BindingElement\n\n1. Let P be the result of evaluating PropertyName\n2. ReturnIfAbrupt(P).\n"}, {"path": "./test262-main/test/language/statements/async-generator/dstr/dflt-obj-ptrn-prop-id-get-value-err.js", "description": " Error thrown when accessing the corresponding property of the value object (async generator function declaration (default parameter))", "esid": " sec-asyncgenerator-definitions-instantiatefunctionobject", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorDeclaration : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n3. Let F be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters, AsyncGeneratorBody,\nscope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. Let v be GetV(value, propertyName).\n2. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/statements/async-generator/dstr/dflt-obj-ptrn-prop-id-init-throws.js", "description": " Error thrown when evaluating the initializer (async generator function declaration (default parameter))", "esid": " sec-asyncgenerator-definitions-instantiatefunctionobject", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorDeclaration : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n3. Let F be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters, AsyncGeneratorBody,\nscope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/statements/async-generator/dstr/dflt-obj-ptrn-prop-id-init-unresolvable.js", "description": " Destructuring initializer is an unresolvable reference (async generator function declaration (default parameter))", "esid": " sec-asyncgenerator-definitions-instantiatefunctionobject", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorDeclaration : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n3. Let F be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters, AsyncGeneratorBody,\nscope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/statements/async-generator/dstr/dflt-obj-ptrn-prop-obj-value-null.js", "description": " Object binding pattern with \"nested\" object binding pattern taking the `null` value (async generator function declaration (default parameter))", "esid": " sec-asyncgenerator-definitions-instantiatefunctionobject", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorDeclaration : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n3. Let F be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters, AsyncGeneratorBody,\nscope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/async-generator/dstr/dflt-obj-ptrn-prop-obj-value-undef.js", "description": " Object binding pattern with \"nested\" object binding pattern taking the `null` value (async generator function declaration (default parameter))", "esid": " sec-asyncgenerator-definitions-instantiatefunctionobject", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorDeclaration : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n3. Let F be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters, AsyncGeneratorBody,\nscope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/async-generator/dstr/obj-init-null.js", "description": " Value specifed for object binding pattern must be object coercible (null) (async generator function declaration)", "esid": " sec-asyncgenerator-definitions-instantiatefunctionobject", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorDeclaration : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n3. Let F be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters, AsyncGeneratorBody,\nscope, strict).\n[...]\n\nRuntime Semantics: BindingInitialization\n\nObjectBindingPattern : { }\n\n1. Return NormalCompletion(empty).\n"}, {"path": "./test262-main/test/language/statements/async-generator/dstr/obj-init-undefined.js", "description": " Value specifed for object binding pattern must be object coercible (undefined) (async generator function declaration)", "esid": " sec-asyncgenerator-definitions-instantiatefunctionobject", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorDeclaration : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n3. Let F be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters, AsyncGeneratorBody,\nscope, strict).\n[...]\n\nRuntime Semantics: BindingInitialization\n\nObjectBindingPattern : { }\n\n1. Return NormalCompletion(empty).\n"}, {"path": "./test262-main/test/language/statements/async-generator/dstr/obj-ptrn-id-get-value-err.js", "description": " Error thrown when accessing the corresponding property of the value object (async generator function declaration)", "esid": " sec-asyncgenerator-definitions-instantiatefunctionobject", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorDeclaration : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n3. Let F be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters, AsyncGeneratorBody,\nscope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. Let v be GetV(value, propertyName).\n5. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/statements/async-generator/dstr/obj-ptrn-id-init-throws.js", "description": " Error thrown when evaluating the initializer (async generator function declaration)", "esid": " sec-asyncgenerator-definitions-instantiatefunctionobject", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorDeclaration : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n3. Let F be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters, AsyncGeneratorBody,\nscope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. LetdefaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/statements/async-generator/dstr/obj-ptrn-id-init-unresolvable.js", "description": " Destructuring initializer is an unresolvable reference (async generator function declaration)", "esid": " sec-asyncgenerator-definitions-instantiatefunctionobject", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorDeclaration : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n3. Let F be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters, AsyncGeneratorBody,\nscope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/statements/async-generator/dstr/obj-ptrn-list-err.js", "description": " Binding property list evaluation is interrupted by an abrupt completion (async generator function declaration)", "esid": " sec-asyncgenerator-definitions-instantiatefunctionobject", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorDeclaration : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n3. Let F be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters, AsyncGeneratorBody,\nscope, strict).\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPropertyList : BindingPropertyList , BindingProperty\n\n1. Let status be the result of performing BindingInitialization for\nBindingPropertyList using value and environment as arguments.\n2. ReturnIfAbrupt(status).\n"}, {"path": "./test262-main/test/language/statements/async-generator/dstr/obj-ptrn-prop-ary-value-null.js", "description": " Object binding pattern with \"nested\" array binding pattern taking the `null` value (async generator function declaration)", "esid": " sec-asyncgenerator-definitions-instantiatefunctionobject", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorDeclaration : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n3. Let F be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters, AsyncGeneratorBody,\nscope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/async-generator/dstr/obj-ptrn-prop-eval-err.js", "description": " Evaluation of property name returns an abrupt completion (async generator function declaration)", "esid": " sec-asyncgenerator-definitions-instantiatefunctionobject", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorDeclaration : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n3. Let F be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters, AsyncGeneratorBody,\nscope, strict).\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingProperty : PropertyName : BindingElement\n\n1. Let P be the result of evaluating PropertyName\n2. ReturnIfAbrupt(P).\n"}, {"path": "./test262-main/test/language/statements/async-generator/dstr/obj-ptrn-prop-id-get-value-err.js", "description": " Error thrown when accessing the corresponding property of the value object (async generator function declaration)", "esid": " sec-asyncgenerator-definitions-instantiatefunctionobject", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorDeclaration : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n3. Let F be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters, AsyncGeneratorBody,\nscope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. Let v be GetV(value, propertyName).\n2. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/statements/async-generator/dstr/obj-ptrn-prop-id-init-throws.js", "description": " Error thrown when evaluating the initializer (async generator function declaration)", "esid": " sec-asyncgenerator-definitions-instantiatefunctionobject", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorDeclaration : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n3. Let F be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters, AsyncGeneratorBody,\nscope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/statements/async-generator/dstr/obj-ptrn-prop-id-init-unresolvable.js", "description": " Destructuring initializer is an unresolvable reference (async generator function declaration)", "esid": " sec-asyncgenerator-definitions-instantiatefunctionobject", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorDeclaration : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n3. Let F be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters, AsyncGeneratorBody,\nscope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/statements/async-generator/dstr/obj-ptrn-prop-obj-value-null.js", "description": " Object binding pattern with \"nested\" object binding pattern taking the `null` value (async generator function declaration)", "esid": " sec-asyncgenerator-definitions-instantiatefunctionobject", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorDeclaration : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n3. Let F be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters, AsyncGeneratorBody,\nscope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/async-generator/dstr/obj-ptrn-prop-obj-value-undef.js", "description": " Object binding pattern with \"nested\" object binding pattern taking the `null` value (async generator function declaration)", "esid": " sec-asyncgenerator-definitions-instantiatefunctionobject", "features": ["async-iteration"], "flags": ["generated"], "info": " |AsyncGeneratorDeclaration : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n3. Let F be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters, AsyncGeneratorBody,\nscope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/async-generator/generator-created-after-decl-inst.js", "esid": " sec-asyncgenerator-definitions-evaluatebody", "description": " >The generator object is created after FunctionDeclarationInstantiation.\n", "info": " |14.5.10 Runtime Semantics: EvaluateBody\n\n1. Perform ? FunctionDeclarationInstantiation(functionObject, argumentsList).\n2. Let generator be ? OrdinaryCreateFromConstructor(functionObject, \"%AsyncGeneratorPrototype%\",\n\u00ab [[AsyncGeneratorState]], [[AsyncGeneratorContext]], [[AsyncGeneratorQueue]] \u00bb).\n3. Perform ! AsyncGeneratorStart(generator, FunctionBody).\n...\n\n", "features": ["async-iteration"]}, {"path": "./test262-main/test/language/statements/async-generator/yield-promise-reject-next-catch.js", "description": " yield Promise.reject(value) is treated as throw value (Async generator Function declaration)", "esid": " prod-AsyncGeneratorDeclaration", "features": ["async-iteration"], "flags": ["generated", "async"], "info": " |Async Generator Function Definitions\n\nAsyncGeneratorDeclaration:\nasync [no LineTerminator here] function * BindingIdentifier ( FormalParameters ) {\nAsyncGeneratorBody }\n\n"}, {"path": "./test262-main/test/language/statements/class/async-gen-method/dflt-params-abrupt.js", "description": " Abrupt completion returned by evaluation of initializer (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["default-parameters", "async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n\n14.1.19 Runtime Semantics: IteratorBindingInitialization\n\nFormalsList : FormalsList , FormalParameter\n\n1. Let status be the result of performing IteratorBindingInitialization for\nFormalsList using iteratorRecord and environment as the arguments.\n2. ReturnIfAbrupt(status).\n3. Return the result of performing IteratorBindingInitialization for\nFormalParameter using iteratorRecord and environment as the arguments.\n\n"}, {"path": "./test262-main/test/language/statements/class/async-gen-method/dflt-params-ref-later.js", "description": " Referencing a parameter that occurs later in the ParameterList (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["default-parameters", "async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n\n14.1.19 Runtime Semantics: IteratorBindingInitialization\n\nFormalsList : FormalsList , FormalParameter\n\n1. Let status be the result of performing IteratorBindingInitialization for\nFormalsList using iteratorRecord and environment as the arguments.\n2. ReturnIfAbrupt(status).\n3. Return the result of performing IteratorBindingInitialization for\nFormalParameter using iteratorRecord and environment as the arguments.\n\n"}, {"path": "./test262-main/test/language/statements/class/async-gen-method/dflt-params-ref-self.js", "description": " Referencing a parameter from within its own initializer (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["default-parameters", "async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n\n14.1.19 Runtime Semantics: IteratorBindingInitialization\n\nFormalsList : FormalsList , FormalParameter\n\n1. Let status be the result of performing IteratorBindingInitialization for\nFormalsList using iteratorRecord and environment as the arguments.\n2. ReturnIfAbrupt(status).\n3. Return the result of performing IteratorBindingInitialization for\nFormalParameter using iteratorRecord and environment as the arguments.\n\n"}, {"path": "./test262-main/test/language/statements/class/async-gen-method/yield-promise-reject-next-catch.js", "description": " yield Promise.reject(value) is treated as throw value (Async Generator method as a ClassDeclaration element)", "esid": " prod-AsyncGeneratorMethod", "features": ["async-iteration"], "flags": ["generated", "async"], "info": " |ClassElement :\nMethodDefinition\n\nMethodDefinition :\nAsyncGeneratorMethod\n\nAsync Generator Function Definitions\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters ) { AsyncGeneratorBody }\n\n"}, {"path": "./test262-main/test/language/statements/class/async-gen-method-static/dflt-params-abrupt.js", "description": " Abrupt completion returned by evaluation of initializer (static class expression generator method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["default-parameters", "async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n\n14.1.19 Runtime Semantics: IteratorBindingInitialization\n\nFormalsList : FormalsList , FormalParameter\n\n1. Let status be the result of performing IteratorBindingInitialization for\nFormalsList using iteratorRecord and environment as the arguments.\n2. ReturnIfAbrupt(status).\n3. Return the result of performing IteratorBindingInitialization for\nFormalParameter using iteratorRecord and environment as the arguments.\n\n"}, {"path": "./test262-main/test/language/statements/class/async-gen-method-static/dflt-params-ref-later.js", "description": " Referencing a parameter that occurs later in the ParameterList (static class expression generator method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["default-parameters", "async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n\n14.1.19 Runtime Semantics: IteratorBindingInitialization\n\nFormalsList : FormalsList , FormalParameter\n\n1. Let status be the result of performing IteratorBindingInitialization for\nFormalsList using iteratorRecord and environment as the arguments.\n2. ReturnIfAbrupt(status).\n3. Return the result of performing IteratorBindingInitialization for\nFormalParameter using iteratorRecord and environment as the arguments.\n\n"}, {"path": "./test262-main/test/language/statements/class/async-gen-method-static/dflt-params-ref-self.js", "description": " Referencing a parameter from within its own initializer (static class expression generator method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["default-parameters", "async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n\n14.1.19 Runtime Semantics: IteratorBindingInitialization\n\nFormalsList : FormalsList , FormalParameter\n\n1. Let status be the result of performing IteratorBindingInitialization for\nFormalsList using iteratorRecord and environment as the arguments.\n2. ReturnIfAbrupt(status).\n3. Return the result of performing IteratorBindingInitialization for\nFormalParameter using iteratorRecord and environment as the arguments.\n\n"}, {"path": "./test262-main/test/language/statements/class/async-gen-method-static/yield-promise-reject-next-catch.js", "description": " yield Promise.reject(value) is treated as throw value (Static async generator method as a ClassDeclaration element)", "esid": " prod-AsyncGeneratorMethod", "features": ["async-iteration"], "flags": ["generated", "async"], "info": " |ClassElement :\nstatic MethodDefinition\n\nMethodDefinition :\nAsyncGeneratorMethod\n\nAsync Generator Function Definitions\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters ) { AsyncGeneratorBody }\n\n"}, {"path": "./test262-main/test/language/statements/class/class-name-ident-await-escaped.js", "esid": " sec-class-definitions", "description": " >`await` with escape sequence is a valid class-name identifier.\n", "info": " |12.1.1 Static Semantics: Early Errors\n\nIdentifier : IdentifierName but not ReservedWord\n\nIt is a Syntax Error if the goal symbol of the syntactic grammar is Module\nand the StringValue of IdentifierName is \"await\".\n"}, {"path": "./test262-main/test/language/statements/class/definition/basics.js", "version": 6, "esid": " 14.5", "description": " >class basics\n"}, {"path": "./test262-main/test/language/statements/class/definition/fn-name-accessor-get.js", "version": 6, "esid": " 14.3.9", "description": " Assignment of function `name` attribute (\"get\" accessor)", "info": " |MethodDefinition : get PropertyName ( ) { FunctionBody }\n\n[...]\n8. Perform SetFunctionName(closure, propKey, \"get\").\n", "includes": ["propertyHelper.js"], "features": ["Symbol"]}, {"path": "./test262-main/test/language/statements/class/definition/fn-name-accessor-set.js", "version": 6, "esid": " 14.3.9", "description": " Assignment of function `name` attribute (\"set\" accessor)", "info": " |MethodDefinition :\nset PropertyName ( PropertySetParameterList ) { FunctionBody }\n\n[...]\n7. Perform SetFunctionName(closure, propKey, \"set\").\n", "includes": ["propertyHelper.js"], "features": ["Symbol"]}, {"path": "./test262-main/test/language/statements/class/definition/fn-name-gen-method.js", "version": 6, "esid": " 14.4.13", "description": " >Assignment of function `name` attribute (GeneratorMethod)\n", "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n[...]\n9. Perform SetFunctionName(closure, propKey).\n", "includes": ["propertyHelper.js"], "features": ["generators", "Symbol"]}, {"path": "./test262-main/test/language/statements/class/definition/fn-name-method.js", "version": 6, "esid": " 12.2.6.9", "description": " Assignment of function `name` attribute (MethodDefinition)", "info": " |6. If IsAnonymousFunctionDefinition(AssignmentExpression) is true, then\na. Let hasNameProperty be HasOwnProperty(propValue, \"name\").\nb. ReturnIfAbrupt(hasNameProperty).\nc. If hasNameProperty is false, perform SetFunctionName(propValue,\npropKey).\n", "includes": ["propertyHelper.js"], "features": ["Symbol"]}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-ary-init-iter-get-err-array-prototype.js", "description": " Abrupt completion returned by GetIterator (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\nRuntime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iteratorRecord be ? GetIterator(value).\n\nGetIterator ( obj [ , hint [ , method ] ] )\n\n[...]\n4. Let iterator be ? Call(method, obj).\n\nCall ( F, V [ , argumentsList ] )\n\n[...]\n2. If IsCallable(F) is false, throw a TypeError exception.\n\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-ary-init-iter-get-err.js", "description": " Abrupt completion returned by GetIterator (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iterator be GetIterator(value).\n2. ReturnIfAbrupt(iterator).\n\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-ary-ptrn-elem-ary-val-null.js", "description": " Nested array destructuring with a null value (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. If iteratorRecord.[[done]] is false, then\n[...]\ne. Else\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iterator be GetIterator(value).\n2. ReturnIfAbrupt(iterator).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-ary-ptrn-elem-id-init-throws.js", "description": " Destructuring initializer returns an abrupt completion (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-ary-ptrn-elem-id-init-unresolvable.js", "description": " Destructuring initializer is an unresolvable reference (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-ary-ptrn-elem-id-iter-step-err.js", "description": " Error forwarding when IteratorStep returns an abrupt completion (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-ary-ptrn-elem-id-iter-val-err.js", "description": " Error forwarding when IteratorValue returns an abrupt completion (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\nd. If next is false, set iteratorRecord.[[done]] to true.\ne. Else,\ni. Let v be IteratorValue(next).\nii. If v is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\niii. ReturnIfAbrupt(v).\n\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-ary-ptrn-elem-obj-val-null.js", "description": " Nested object destructuring with a null value (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. If iteratorRecord.[[done]] is false, then\n[...]\ne. Else\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ObjectBindingPattern\n\n1. Let valid be RequireObjectCoercible(value).\n2. ReturnIfAbrupt(valid).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-ary-ptrn-elem-obj-val-undef.js", "description": " Nested object destructuring with a value of `undefined` (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. If iteratorRecord.[[done]] is false, then\n[...]\ne. Else\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ObjectBindingPattern\n\n1. Let valid be RequireObjectCoercible(value).\n2. ReturnIfAbrupt(valid).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-ary-ptrn-elision-step-err.js", "description": " Elision advances iterator and forwards abrupt completions (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ Elision ]\n\n1. Return the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with iteratorRecord\nas the argument.\n\n12.14.5.3 Runtime Semantics: IteratorDestructuringAssignmentEvaluation\n\nElision : ,\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-ary-ptrn-rest-id-elision-next-err.js", "description": " Rest element following elision elements (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nArrayBindingPattern : [ Elisionopt BindingRestElement ]\n1. If Elision is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with\niteratorRecord as the argument.\nb. ReturnIfAbrupt(status).\n2. Return the result of performing IteratorBindingInitialization for\nBindingRestElement with iteratorRecord and environment as arguments.\n\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-ary-ptrn-rest-id-iter-step-err.js", "description": " Error forwarding when IteratorStep returns an abrupt completion (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\na. If iteratorRecord.[[done]] is false,\ni. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nii. If next is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\niii. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-ary-ptrn-rest-id-iter-val-err.js", "description": " Error forwarding when IteratorValue returns an abrupt completion (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\n[...]\nc. Let nextValue be IteratorValue(next).\nd. If nextValue is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\ne. ReturnIfAbrupt(nextValue).\n\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-dflt-ary-init-iter-get-err-array-prototype.js", "description": " Abrupt completion returned by GetIterator (class expression async generator method (default parameters))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\nRuntime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iteratorRecord be ? GetIterator(value).\n\nGetIterator ( obj [ , hint [ , method ] ] )\n\n[...]\n4. Let iterator be ? Call(method, obj).\n\nCall ( F, V [ , argumentsList ] )\n\n[...]\n2. If IsCallable(F) is false, throw a TypeError exception.\n\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-dflt-ary-init-iter-get-err.js", "description": " Abrupt completion returned by GetIterator (class expression async generator method (default parameters))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iterator be GetIterator(value).\n2. ReturnIfAbrupt(iterator).\n\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-dflt-ary-ptrn-elem-ary-val-null.js", "description": " Nested array destructuring with a null value (class expression async generator method (default parameters))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. If iteratorRecord.[[done]] is false, then\n[...]\ne. Else\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iterator be GetIterator(value).\n2. ReturnIfAbrupt(iterator).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-dflt-ary-ptrn-elem-id-init-throws.js", "description": " Destructuring initializer returns an abrupt completion (class expression async generator method (default parameters))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-dflt-ary-ptrn-elem-id-init-unresolvable.js", "description": " Destructuring initializer is an unresolvable reference (class expression async generator method (default parameters))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-dflt-ary-ptrn-elem-id-iter-step-err.js", "description": " Error forwarding when IteratorStep returns an abrupt completion (class expression async generator method (default parameters))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-dflt-ary-ptrn-elem-id-iter-val-err.js", "description": " Error forwarding when IteratorValue returns an abrupt completion (class expression async generator method (default parameters))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\nd. If next is false, set iteratorRecord.[[done]] to true.\ne. Else,\ni. Let v be IteratorValue(next).\nii. If v is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\niii. ReturnIfAbrupt(v).\n\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-dflt-ary-ptrn-elem-obj-val-null.js", "description": " Nested object destructuring with a null value (class expression async generator method (default parameters))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. If iteratorRecord.[[done]] is false, then\n[...]\ne. Else\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ObjectBindingPattern\n\n1. Let valid be RequireObjectCoercible(value).\n2. ReturnIfAbrupt(valid).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-dflt-ary-ptrn-elem-obj-val-undef.js", "description": " Nested object destructuring with a value of `undefined` (class expression async generator method (default parameters))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. If iteratorRecord.[[done]] is false, then\n[...]\ne. Else\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ObjectBindingPattern\n\n1. Let valid be RequireObjectCoercible(value).\n2. ReturnIfAbrupt(valid).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-dflt-ary-ptrn-elision-step-err.js", "description": " Elision advances iterator and forwards abrupt completions (class expression async generator method (default parameters))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ Elision ]\n\n1. Return the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with iteratorRecord\nas the argument.\n\n12.14.5.3 Runtime Semantics: IteratorDestructuringAssignmentEvaluation\n\nElision : ,\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-dflt-ary-ptrn-rest-id-elision-next-err.js", "description": " Rest element following elision elements (class expression async generator method (default parameters))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nArrayBindingPattern : [ Elisionopt BindingRestElement ]\n1. If Elision is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with\niteratorRecord as the argument.\nb. ReturnIfAbrupt(status).\n2. Return the result of performing IteratorBindingInitialization for\nBindingRestElement with iteratorRecord and environment as arguments.\n\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-dflt-ary-ptrn-rest-id-iter-step-err.js", "description": " Error forwarding when IteratorStep returns an abrupt completion (class expression async generator method (default parameters))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\na. If iteratorRecord.[[done]] is false,\ni. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nii. If next is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\niii. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-dflt-ary-ptrn-rest-id-iter-val-err.js", "description": " Error forwarding when IteratorValue returns an abrupt completion (class expression async generator method (default parameters))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\n[...]\nc. Let nextValue be IteratorValue(next).\nd. If nextValue is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\ne. ReturnIfAbrupt(nextValue).\n\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-dflt-obj-init-null.js", "description": " Value specifed for object binding pattern must be object coercible (null) (class expression async generator method (default parameters))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\nRuntime Semantics: BindingInitialization\n\nObjectBindingPattern : { }\n\n1. Return NormalCompletion(empty).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-dflt-obj-init-undefined.js", "description": " Value specifed for object binding pattern must be object coercible (undefined) (class expression async generator method (default parameters))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\nRuntime Semantics: BindingInitialization\n\nObjectBindingPattern : { }\n\n1. Return NormalCompletion(empty).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-dflt-obj-ptrn-id-get-value-err.js", "description": " Error thrown when accessing the corresponding property of the value object (class expression async generator method (default parameters))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. Let v be GetV(value, propertyName).\n5. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-dflt-obj-ptrn-id-init-throws.js", "description": " Error thrown when evaluating the initializer (class expression async generator method (default parameters))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. LetdefaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-dflt-obj-ptrn-id-init-unresolvable.js", "description": " Destructuring initializer is an unresolvable reference (class expression async generator method (default parameters))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-dflt-obj-ptrn-list-err.js", "description": " Binding property list evaluation is interrupted by an abrupt completion (class expression async generator method (default parameters))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPropertyList : BindingPropertyList , BindingProperty\n\n1. Let status be the result of performing BindingInitialization for\nBindingPropertyList using value and environment as arguments.\n2. ReturnIfAbrupt(status).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-dflt-obj-ptrn-prop-ary-value-null.js", "description": " Object binding pattern with \"nested\" array binding pattern taking the `null` value (class expression async generator method (default parameters))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-dflt-obj-ptrn-prop-eval-err.js", "description": " Evaluation of property name returns an abrupt completion (class expression async generator method (default parameters))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingProperty : PropertyName : BindingElement\n\n1. Let P be the result of evaluating PropertyName\n2. ReturnIfAbrupt(P).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-dflt-obj-ptrn-prop-id-get-value-err.js", "description": " Error thrown when accessing the corresponding property of the value object (class expression async generator method (default parameters))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. Let v be GetV(value, propertyName).\n2. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-dflt-obj-ptrn-prop-id-init-throws.js", "description": " Error thrown when evaluating the initializer (class expression async generator method (default parameters))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-dflt-obj-ptrn-prop-id-init-unresolvable.js", "description": " Destructuring initializer is an unresolvable reference (class expression async generator method (default parameters))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-dflt-obj-ptrn-prop-obj-value-null.js", "description": " Object binding pattern with \"nested\" object binding pattern taking the `null` value (class expression async generator method (default parameters))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-dflt-obj-ptrn-prop-obj-value-undef.js", "description": " Object binding pattern with \"nested\" object binding pattern taking the `null` value (class expression async generator method (default parameters))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-obj-init-null.js", "description": " Value specifed for object binding pattern must be object coercible (null) (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\nRuntime Semantics: BindingInitialization\n\nObjectBindingPattern : { }\n\n1. Return NormalCompletion(empty).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-obj-init-undefined.js", "description": " Value specifed for object binding pattern must be object coercible (undefined) (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\nRuntime Semantics: BindingInitialization\n\nObjectBindingPattern : { }\n\n1. Return NormalCompletion(empty).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-obj-ptrn-id-get-value-err.js", "description": " Error thrown when accessing the corresponding property of the value object (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. Let v be GetV(value, propertyName).\n5. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-obj-ptrn-id-init-throws.js", "description": " Error thrown when evaluating the initializer (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. LetdefaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-obj-ptrn-id-init-unresolvable.js", "description": " Destructuring initializer is an unresolvable reference (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-obj-ptrn-list-err.js", "description": " Binding property list evaluation is interrupted by an abrupt completion (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPropertyList : BindingPropertyList , BindingProperty\n\n1. Let status be the result of performing BindingInitialization for\nBindingPropertyList using value and environment as arguments.\n2. ReturnIfAbrupt(status).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-obj-ptrn-prop-ary-value-null.js", "description": " Object binding pattern with \"nested\" array binding pattern taking the `null` value (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-obj-ptrn-prop-eval-err.js", "description": " Evaluation of property name returns an abrupt completion (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingProperty : PropertyName : BindingElement\n\n1. Let P be the result of evaluating PropertyName\n2. ReturnIfAbrupt(P).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-obj-ptrn-prop-id-get-value-err.js", "description": " Error thrown when accessing the corresponding property of the value object (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. Let v be GetV(value, propertyName).\n2. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-obj-ptrn-prop-id-init-throws.js", "description": " Error thrown when evaluating the initializer (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-obj-ptrn-prop-id-init-unresolvable.js", "description": " Destructuring initializer is an unresolvable reference (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-obj-ptrn-prop-obj-value-null.js", "description": " Object binding pattern with \"nested\" object binding pattern taking the `null` value (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-obj-ptrn-prop-obj-value-undef.js", "description": " Object binding pattern with \"nested\" object binding pattern taking the `null` value (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-static-ary-init-iter-get-err-array-prototype.js", "description": " Abrupt completion returned by GetIterator (static class expression async generator method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\nRuntime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iteratorRecord be ? GetIterator(value).\n\nGetIterator ( obj [ , hint [ , method ] ] )\n\n[...]\n4. Let iterator be ? Call(method, obj).\n\nCall ( F, V [ , argumentsList ] )\n\n[...]\n2. If IsCallable(F) is false, throw a TypeError exception.\n\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-static-ary-init-iter-get-err.js", "description": " Abrupt completion returned by GetIterator (static class expression async generator method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iterator be GetIterator(value).\n2. ReturnIfAbrupt(iterator).\n\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-static-ary-ptrn-elem-ary-val-null.js", "description": " Nested array destructuring with a null value (static class expression async generator method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. If iteratorRecord.[[done]] is false, then\n[...]\ne. Else\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iterator be GetIterator(value).\n2. ReturnIfAbrupt(iterator).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-static-ary-ptrn-elem-id-init-throws.js", "description": " Destructuring initializer returns an abrupt completion (static class expression async generator method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-static-ary-ptrn-elem-id-init-unresolvable.js", "description": " Destructuring initializer is an unresolvable reference (static class expression async generator method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-static-ary-ptrn-elem-id-iter-step-err.js", "description": " Error forwarding when IteratorStep returns an abrupt completion (static class expression async generator method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-static-ary-ptrn-elem-id-iter-val-err.js", "description": " Error forwarding when IteratorValue returns an abrupt completion (static class expression async generator method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\nd. If next is false, set iteratorRecord.[[done]] to true.\ne. Else,\ni. Let v be IteratorValue(next).\nii. If v is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\niii. ReturnIfAbrupt(v).\n\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-static-ary-ptrn-elem-obj-val-null.js", "description": " Nested object destructuring with a null value (static class expression async generator method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. If iteratorRecord.[[done]] is false, then\n[...]\ne. Else\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ObjectBindingPattern\n\n1. Let valid be RequireObjectCoercible(value).\n2. ReturnIfAbrupt(valid).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-static-ary-ptrn-elem-obj-val-undef.js", "description": " Nested object destructuring with a value of `undefined` (static class expression async generator method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. If iteratorRecord.[[done]] is false, then\n[...]\ne. Else\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ObjectBindingPattern\n\n1. Let valid be RequireObjectCoercible(value).\n2. ReturnIfAbrupt(valid).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-static-ary-ptrn-elision-step-err.js", "description": " Elision advances iterator and forwards abrupt completions (static class expression async generator method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["generators", "async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ Elision ]\n\n1. Return the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with iteratorRecord\nas the argument.\n\n12.14.5.3 Runtime Semantics: IteratorDestructuringAssignmentEvaluation\n\nElision : ,\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-static-ary-ptrn-rest-id-elision-next-err.js", "description": " Rest element following elision elements (static class expression async generator method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["generators", "async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nArrayBindingPattern : [ Elisionopt BindingRestElement ]\n1. If Elision is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with\niteratorRecord as the argument.\nb. ReturnIfAbrupt(status).\n2. Return the result of performing IteratorBindingInitialization for\nBindingRestElement with iteratorRecord and environment as arguments.\n\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-static-ary-ptrn-rest-id-iter-step-err.js", "description": " Error forwarding when IteratorStep returns an abrupt completion (static class expression async generator method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["generators", "async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\na. If iteratorRecord.[[done]] is false,\ni. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nii. If next is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\niii. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-static-ary-ptrn-rest-id-iter-val-err.js", "description": " Error forwarding when IteratorValue returns an abrupt completion (static class expression async generator method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\n[...]\nc. Let nextValue be IteratorValue(next).\nd. If nextValue is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\ne. ReturnIfAbrupt(nextValue).\n\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-static-dflt-ary-init-iter-get-err-array-prototype.js", "description": " Abrupt completion returned by GetIterator (static class expression async generator method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\nRuntime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iteratorRecord be ? GetIterator(value).\n\nGetIterator ( obj [ , hint [ , method ] ] )\n\n[...]\n4. Let iterator be ? Call(method, obj).\n\nCall ( F, V [ , argumentsList ] )\n\n[...]\n2. If IsCallable(F) is false, throw a TypeError exception.\n\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-static-dflt-ary-init-iter-get-err.js", "description": " Abrupt completion returned by GetIterator (static class expression async generator method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iterator be GetIterator(value).\n2. ReturnIfAbrupt(iterator).\n\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-static-dflt-ary-ptrn-elem-ary-val-null.js", "description": " Nested array destructuring with a null value (static class expression async generator method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. If iteratorRecord.[[done]] is false, then\n[...]\ne. Else\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iterator be GetIterator(value).\n2. ReturnIfAbrupt(iterator).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-static-dflt-ary-ptrn-elem-id-init-throws.js", "description": " Destructuring initializer returns an abrupt completion (static class expression async generator method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-static-dflt-ary-ptrn-elem-id-init-unresolvable.js", "description": " Destructuring initializer is an unresolvable reference (static class expression async generator method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-static-dflt-ary-ptrn-elem-id-iter-step-err.js", "description": " Error forwarding when IteratorStep returns an abrupt completion (static class expression async generator method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-static-dflt-ary-ptrn-elem-id-iter-val-err.js", "description": " Error forwarding when IteratorValue returns an abrupt completion (static class expression async generator method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\nd. If next is false, set iteratorRecord.[[done]] to true.\ne. Else,\ni. Let v be IteratorValue(next).\nii. If v is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\niii. ReturnIfAbrupt(v).\n\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-static-dflt-ary-ptrn-elem-obj-val-null.js", "description": " Nested object destructuring with a null value (static class expression async generator method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. If iteratorRecord.[[done]] is false, then\n[...]\ne. Else\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ObjectBindingPattern\n\n1. Let valid be RequireObjectCoercible(value).\n2. ReturnIfAbrupt(valid).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-static-dflt-ary-ptrn-elem-obj-val-undef.js", "description": " Nested object destructuring with a value of `undefined` (static class expression async generator method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. If iteratorRecord.[[done]] is false, then\n[...]\ne. Else\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ObjectBindingPattern\n\n1. Let valid be RequireObjectCoercible(value).\n2. ReturnIfAbrupt(valid).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-static-dflt-ary-ptrn-elision-step-err.js", "description": " Elision advances iterator and forwards abrupt completions (static class expression async generator method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["generators", "async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ Elision ]\n\n1. Return the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with iteratorRecord\nas the argument.\n\n12.14.5.3 Runtime Semantics: IteratorDestructuringAssignmentEvaluation\n\nElision : ,\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-static-dflt-ary-ptrn-rest-id-elision-next-err.js", "description": " Rest element following elision elements (static class expression async generator method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["generators", "async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nArrayBindingPattern : [ Elisionopt BindingRestElement ]\n1. If Elision is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with\niteratorRecord as the argument.\nb. ReturnIfAbrupt(status).\n2. Return the result of performing IteratorBindingInitialization for\nBindingRestElement with iteratorRecord and environment as arguments.\n\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-static-dflt-ary-ptrn-rest-id-iter-step-err.js", "description": " Error forwarding when IteratorStep returns an abrupt completion (static class expression async generator method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["generators", "async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\na. If iteratorRecord.[[done]] is false,\ni. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nii. If next is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\niii. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-static-dflt-ary-ptrn-rest-id-iter-val-err.js", "description": " Error forwarding when IteratorValue returns an abrupt completion (static class expression async generator method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["Symbol.iterator", "async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\n[...]\nc. Let nextValue be IteratorValue(next).\nd. If nextValue is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\ne. ReturnIfAbrupt(nextValue).\n\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-static-dflt-obj-init-null.js", "description": " Value specifed for object binding pattern must be object coercible (null) (static class expression async generator method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\nRuntime Semantics: BindingInitialization\n\nObjectBindingPattern : { }\n\n1. Return NormalCompletion(empty).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-static-dflt-obj-init-undefined.js", "description": " Value specifed for object binding pattern must be object coercible (undefined) (static class expression async generator method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\nRuntime Semantics: BindingInitialization\n\nObjectBindingPattern : { }\n\n1. Return NormalCompletion(empty).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-static-dflt-obj-ptrn-id-get-value-err.js", "description": " Error thrown when accessing the corresponding property of the value object (static class expression async generator method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. Let v be GetV(value, propertyName).\n5. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-static-dflt-obj-ptrn-id-init-throws.js", "description": " Error thrown when evaluating the initializer (static class expression async generator method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. LetdefaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-static-dflt-obj-ptrn-id-init-unresolvable.js", "description": " Destructuring initializer is an unresolvable reference (static class expression async generator method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-static-dflt-obj-ptrn-list-err.js", "description": " Binding property list evaluation is interrupted by an abrupt completion (static class expression async generator method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPropertyList : BindingPropertyList , BindingProperty\n\n1. Let status be the result of performing BindingInitialization for\nBindingPropertyList using value and environment as arguments.\n2. ReturnIfAbrupt(status).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-static-dflt-obj-ptrn-prop-ary-value-null.js", "description": " Object binding pattern with \"nested\" array binding pattern taking the `null` value (static class expression async generator method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-static-dflt-obj-ptrn-prop-eval-err.js", "description": " Evaluation of property name returns an abrupt completion (static class expression async generator method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingProperty : PropertyName : BindingElement\n\n1. Let P be the result of evaluating PropertyName\n2. ReturnIfAbrupt(P).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-static-dflt-obj-ptrn-prop-id-get-value-err.js", "description": " Error thrown when accessing the corresponding property of the value object (static class expression async generator method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. Let v be GetV(value, propertyName).\n2. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-static-dflt-obj-ptrn-prop-id-init-throws.js", "description": " Error thrown when evaluating the initializer (static class expression async generator method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-static-dflt-obj-ptrn-prop-id-init-unresolvable.js", "description": " Destructuring initializer is an unresolvable reference (static class expression async generator method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-static-dflt-obj-ptrn-prop-obj-value-null.js", "description": " Object binding pattern with \"nested\" object binding pattern taking the `null` value (static class expression async generator method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-static-dflt-obj-ptrn-prop-obj-value-undef.js", "description": " Object binding pattern with \"nested\" object binding pattern taking the `null` value (static class expression async generator method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-static-obj-init-null.js", "description": " Value specifed for object binding pattern must be object coercible (null) (static class expression async generator method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\nRuntime Semantics: BindingInitialization\n\nObjectBindingPattern : { }\n\n1. Return NormalCompletion(empty).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-static-obj-init-undefined.js", "description": " Value specifed for object binding pattern must be object coercible (undefined) (static class expression async generator method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\nRuntime Semantics: BindingInitialization\n\nObjectBindingPattern : { }\n\n1. Return NormalCompletion(empty).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-static-obj-ptrn-id-get-value-err.js", "description": " Error thrown when accessing the corresponding property of the value object (static class expression async generator method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. Let v be GetV(value, propertyName).\n5. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-static-obj-ptrn-id-init-throws.js", "description": " Error thrown when evaluating the initializer (static class expression async generator method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. LetdefaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-static-obj-ptrn-id-init-unresolvable.js", "description": " Destructuring initializer is an unresolvable reference (static class expression async generator method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-static-obj-ptrn-list-err.js", "description": " Binding property list evaluation is interrupted by an abrupt completion (static class expression async generator method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPropertyList : BindingPropertyList , BindingProperty\n\n1. Let status be the result of performing BindingInitialization for\nBindingPropertyList using value and environment as arguments.\n2. ReturnIfAbrupt(status).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-static-obj-ptrn-prop-ary-value-null.js", "description": " Object binding pattern with \"nested\" array binding pattern taking the `null` value (static class expression async generator method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-static-obj-ptrn-prop-eval-err.js", "description": " Evaluation of property name returns an abrupt completion (static class expression async generator method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingProperty : PropertyName : BindingElement\n\n1. Let P be the result of evaluating PropertyName\n2. ReturnIfAbrupt(P).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-static-obj-ptrn-prop-id-get-value-err.js", "description": " Error thrown when accessing the corresponding property of the value object (static class expression async generator method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. Let v be GetV(value, propertyName).\n2. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-static-obj-ptrn-prop-id-init-throws.js", "description": " Error thrown when evaluating the initializer (static class expression async generator method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-static-obj-ptrn-prop-id-init-unresolvable.js", "description": " Destructuring initializer is an unresolvable reference (static class expression async generator method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-static-obj-ptrn-prop-obj-value-null.js", "description": " Object binding pattern with \"nested\" object binding pattern taking the `null` value (static class expression async generator method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/class/dstr/async-gen-meth-static-obj-ptrn-prop-obj-value-undef.js", "description": " Object binding pattern with \"nested\" object binding pattern taking the `null` value (static class expression async generator method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["async-iteration"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nAsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/class/dstr/gen-meth-ary-init-iter-close.js", "description": " Iterator is closed when not exhausted by pattern evaluation (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod : * PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n[...]\n4. If iteratorRecord.[[done]] is false, return ? IteratorClose(iterator,\nresult).\n[...]\n\n"}, {"path": "./test262-main/test/language/statements/class/dstr/gen-meth-ary-ptrn-elem-id-init-fn-name-arrow.js", "description": " SingleNameBinding does assign name to arrow functions (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod : * PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/gen-meth-ary-ptrn-elem-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod : * PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/gen-meth-ary-ptrn-elem-id-init-fn-name-cover.js", "description": " SingleNameBinding does assign name to \"anonymous\" functions \"through\" cover grammar (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod : * PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/gen-meth-ary-ptrn-elem-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod : * PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/gen-meth-ary-ptrn-elem-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod : * PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n\n"}, {"path": "./test262-main/test/language/statements/class/dstr/gen-meth-dflt-ary-init-iter-close.js", "description": " Iterator is closed when not exhausted by pattern evaluation (class expression method (default parameters))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod : * PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n[...]\n4. If iteratorRecord.[[done]] is false, return ? IteratorClose(iterator,\nresult).\n[...]\n\n"}, {"path": "./test262-main/test/language/statements/class/dstr/gen-meth-dflt-ary-ptrn-elem-id-init-fn-name-arrow.js", "description": " SingleNameBinding does assign name to arrow functions (class expression method (default parameters))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod : * PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/gen-meth-dflt-ary-ptrn-elem-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (class expression method (default parameters))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod : * PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/gen-meth-dflt-ary-ptrn-elem-id-init-fn-name-cover.js", "description": " SingleNameBinding does assign name to \"anonymous\" functions \"through\" cover grammar (class expression method (default parameters))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod : * PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/gen-meth-dflt-ary-ptrn-elem-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (class expression method (default parameters))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod : * PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/gen-meth-dflt-ary-ptrn-elem-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (class expression method (default parameters))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod : * PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n\n"}, {"path": "./test262-main/test/language/statements/class/dstr/gen-meth-dflt-obj-ptrn-id-init-fn-name-arrow.js", "description": " SingleNameBinding assigns `name` to arrow functions (class expression method (default parameters))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod : * PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/gen-meth-dflt-obj-ptrn-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (class expression method (default parameters))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod : * PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/gen-meth-dflt-obj-ptrn-id-init-fn-name-cover.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" functions \"through\" cover grammar (class expression method (default parameters))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod : * PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/gen-meth-dflt-obj-ptrn-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (class expression method (default parameters))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod : * PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/gen-meth-dflt-obj-ptrn-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (class expression method (default parameters))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod : * PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n\n"}, {"path": "./test262-main/test/language/statements/class/dstr/gen-meth-dflt-obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (class expression method (default parameters))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["object-rest", "generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod : * PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/class/dstr/gen-meth-dflt-obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (class expression method (default parameters))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["object-rest", "generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod : * PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/class/dstr/gen-meth-dflt-obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (class expression method (default parameters))", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["object-rest", "generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod : * PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/class/dstr/gen-meth-obj-ptrn-id-init-fn-name-arrow.js", "description": " SingleNameBinding assigns `name` to arrow functions (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod : * PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/gen-meth-obj-ptrn-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod : * PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/gen-meth-obj-ptrn-id-init-fn-name-cover.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" functions \"through\" cover grammar (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod : * PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/gen-meth-obj-ptrn-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod : * PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/gen-meth-obj-ptrn-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod : * PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n\n"}, {"path": "./test262-main/test/language/statements/class/dstr/gen-meth-obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["object-rest", "generators", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod : * PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/class/dstr/gen-meth-obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["object-rest", "generators", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod : * PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/class/dstr/gen-meth-obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (class expression method)", "esid": " sec-class-definitions-runtime-semantics-evaluation", "features": ["object-rest", "generators", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod : * PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/class/dstr/gen-meth-static-ary-init-iter-close.js", "description": " Iterator is closed when not exhausted by pattern evaluation (static class expression generator method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod : * PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n[...]\n4. If iteratorRecord.[[done]] is false, return ? IteratorClose(iterator,\nresult).\n[...]\n\n"}, {"path": "./test262-main/test/language/statements/class/dstr/gen-meth-static-ary-ptrn-elem-id-init-fn-name-arrow.js", "description": " SingleNameBinding does assign name to arrow functions (static class expression generator method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod : * PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/gen-meth-static-ary-ptrn-elem-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (static class expression generator method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod : * PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/gen-meth-static-ary-ptrn-elem-id-init-fn-name-cover.js", "description": " SingleNameBinding does assign name to \"anonymous\" functions \"through\" cover grammar (static class expression generator method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod : * PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/gen-meth-static-ary-ptrn-elem-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (static class expression generator method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod : * PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/gen-meth-static-ary-ptrn-elem-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (static class expression generator method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod : * PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n\n"}, {"path": "./test262-main/test/language/statements/class/dstr/gen-meth-static-dflt-ary-init-iter-close.js", "description": " Iterator is closed when not exhausted by pattern evaluation (static class expression generator method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod : * PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n[...]\n4. If iteratorRecord.[[done]] is false, return ? IteratorClose(iterator,\nresult).\n[...]\n\n"}, {"path": "./test262-main/test/language/statements/class/dstr/gen-meth-static-dflt-ary-ptrn-elem-id-init-fn-name-arrow.js", "description": " SingleNameBinding does assign name to arrow functions (static class expression generator method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod : * PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/gen-meth-static-dflt-ary-ptrn-elem-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (static class expression generator method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod : * PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/gen-meth-static-dflt-ary-ptrn-elem-id-init-fn-name-cover.js", "description": " SingleNameBinding does assign name to \"anonymous\" functions \"through\" cover grammar (static class expression generator method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod : * PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/gen-meth-static-dflt-ary-ptrn-elem-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (static class expression generator method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod : * PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/gen-meth-static-dflt-ary-ptrn-elem-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (static class expression generator method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod : * PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n\n"}, {"path": "./test262-main/test/language/statements/class/dstr/gen-meth-static-dflt-obj-ptrn-id-init-fn-name-arrow.js", "description": " SingleNameBinding assigns `name` to arrow functions (static class expression generator method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod : * PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/gen-meth-static-dflt-obj-ptrn-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (static class expression generator method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod : * PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/gen-meth-static-dflt-obj-ptrn-id-init-fn-name-cover.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" functions \"through\" cover grammar (static class expression generator method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod : * PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/gen-meth-static-dflt-obj-ptrn-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (static class expression generator method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod : * PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/gen-meth-static-dflt-obj-ptrn-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (static class expression generator method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod : * PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n\n"}, {"path": "./test262-main/test/language/statements/class/dstr/gen-meth-static-dflt-obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (static class expression generator method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["object-rest", "generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod : * PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/class/dstr/gen-meth-static-dflt-obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (static class expression generator method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["object-rest", "generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod : * PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/class/dstr/gen-meth-static-dflt-obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (static class expression generator method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["object-rest", "generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod : * PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/class/dstr/gen-meth-static-obj-ptrn-id-init-fn-name-arrow.js", "description": " SingleNameBinding assigns `name` to arrow functions (static class expression generator method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod : * PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/gen-meth-static-obj-ptrn-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (static class expression generator method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod : * PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/gen-meth-static-obj-ptrn-id-init-fn-name-cover.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" functions \"through\" cover grammar (static class expression generator method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod : * PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/gen-meth-static-obj-ptrn-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (static class expression generator method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod : * PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/gen-meth-static-obj-ptrn-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (static class expression generator method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod : * PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n\n"}, {"path": "./test262-main/test/language/statements/class/dstr/gen-meth-static-obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (static class expression generator method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["object-rest", "generators", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod : * PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/class/dstr/gen-meth-static-obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (static class expression generator method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["object-rest", "generators", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod : * PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/class/dstr/gen-meth-static-obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (static class expression generator method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["object-rest", "generators", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.4.13 Runtime Semantics: PropertyDefinitionEvaluation\n\nGeneratorMethod : * PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/class/dstr/meth-ary-init-iter-close.js", "description": " Iterator is closed when not exhausted by pattern evaluation (class expression method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n[...]\n4. If iteratorRecord.[[done]] is false, return ? IteratorClose(iterator,\nresult).\n[...]\n\n"}, {"path": "./test262-main/test/language/statements/class/dstr/meth-ary-ptrn-elem-id-init-fn-name-arrow.js", "description": " SingleNameBinding does assign name to arrow functions (class expression method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/meth-ary-ptrn-elem-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (class expression method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/meth-ary-ptrn-elem-id-init-fn-name-cover.js", "description": " SingleNameBinding does assign name to \"anonymous\" functions \"through\" cover grammar (class expression method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/meth-ary-ptrn-elem-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (class expression method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/meth-ary-ptrn-elem-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (class expression method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n\n"}, {"path": "./test262-main/test/language/statements/class/dstr/meth-dflt-ary-init-iter-close.js", "description": " Iterator is closed when not exhausted by pattern evaluation (class expression method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["Symbol.iterator", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n[...]\n4. If iteratorRecord.[[done]] is false, return ? IteratorClose(iterator,\nresult).\n[...]\n\n"}, {"path": "./test262-main/test/language/statements/class/dstr/meth-dflt-ary-ptrn-elem-id-init-fn-name-arrow.js", "description": " SingleNameBinding does assign name to arrow functions (class expression method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/meth-dflt-ary-ptrn-elem-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (class expression method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/meth-dflt-ary-ptrn-elem-id-init-fn-name-cover.js", "description": " SingleNameBinding does assign name to \"anonymous\" functions \"through\" cover grammar (class expression method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/meth-dflt-ary-ptrn-elem-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (class expression method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/meth-dflt-ary-ptrn-elem-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (class expression method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n\n"}, {"path": "./test262-main/test/language/statements/class/dstr/meth-dflt-obj-ptrn-id-init-fn-name-arrow.js", "description": " SingleNameBinding assigns `name` to arrow functions (class expression method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/meth-dflt-obj-ptrn-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (class expression method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/meth-dflt-obj-ptrn-id-init-fn-name-cover.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" functions \"through\" cover grammar (class expression method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/meth-dflt-obj-ptrn-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (class expression method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/meth-dflt-obj-ptrn-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (class expression method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n\n"}, {"path": "./test262-main/test/language/statements/class/dstr/meth-dflt-obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (class expression method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["object-rest", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/class/dstr/meth-dflt-obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (class expression method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["object-rest", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/class/dstr/meth-dflt-obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (class expression method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["object-rest", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/class/dstr/meth-obj-ptrn-id-init-fn-name-arrow.js", "description": " SingleNameBinding assigns `name` to arrow functions (class expression method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/meth-obj-ptrn-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (class expression method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/meth-obj-ptrn-id-init-fn-name-cover.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" functions \"through\" cover grammar (class expression method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/meth-obj-ptrn-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (class expression method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/meth-obj-ptrn-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (class expression method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n\n"}, {"path": "./test262-main/test/language/statements/class/dstr/meth-obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (class expression method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/class/dstr/meth-obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (class expression method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/class/dstr/meth-obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (class expression method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\ni. Let status be the result of performing\nPropertyDefinitionEvaluation for m with arguments proto and\nfalse.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/class/dstr/meth-static-ary-init-iter-close.js", "description": " Iterator is closed when not exhausted by pattern evaluation (static class expression method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n[...]\n4. If iteratorRecord.[[done]] is false, return ? IteratorClose(iterator,\nresult).\n[...]\n\n"}, {"path": "./test262-main/test/language/statements/class/dstr/meth-static-ary-ptrn-elem-id-init-fn-name-arrow.js", "description": " SingleNameBinding does assign name to arrow functions (static class expression method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/meth-static-ary-ptrn-elem-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (static class expression method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/meth-static-ary-ptrn-elem-id-init-fn-name-cover.js", "description": " SingleNameBinding does assign name to \"anonymous\" functions \"through\" cover grammar (static class expression method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/meth-static-ary-ptrn-elem-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (static class expression method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/meth-static-ary-ptrn-elem-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (static class expression method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n\n"}, {"path": "./test262-main/test/language/statements/class/dstr/meth-static-dflt-ary-init-iter-close.js", "description": " Iterator is closed when not exhausted by pattern evaluation (static class expression method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["Symbol.iterator", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n[...]\n4. If iteratorRecord.[[done]] is false, return ? IteratorClose(iterator,\nresult).\n[...]\n\n"}, {"path": "./test262-main/test/language/statements/class/dstr/meth-static-dflt-ary-ptrn-elem-id-init-fn-name-arrow.js", "description": " SingleNameBinding does assign name to arrow functions (static class expression method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/meth-static-dflt-ary-ptrn-elem-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (static class expression method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/meth-static-dflt-ary-ptrn-elem-id-init-fn-name-cover.js", "description": " SingleNameBinding does assign name to \"anonymous\" functions \"through\" cover grammar (static class expression method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/meth-static-dflt-ary-ptrn-elem-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (static class expression method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/meth-static-dflt-ary-ptrn-elem-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (static class expression method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n\n"}, {"path": "./test262-main/test/language/statements/class/dstr/meth-static-dflt-obj-ptrn-id-init-fn-name-arrow.js", "description": " SingleNameBinding assigns `name` to arrow functions (static class expression method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/meth-static-dflt-obj-ptrn-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (static class expression method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/meth-static-dflt-obj-ptrn-id-init-fn-name-cover.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" functions \"through\" cover grammar (static class expression method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/meth-static-dflt-obj-ptrn-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (static class expression method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/meth-static-dflt-obj-ptrn-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (static class expression method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n\n"}, {"path": "./test262-main/test/language/statements/class/dstr/meth-static-dflt-obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (static class expression method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["object-rest", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/class/dstr/meth-static-dflt-obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (static class expression method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["object-rest", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/class/dstr/meth-static-dflt-obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (static class expression method (default parameter))", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["object-rest", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/class/dstr/meth-static-obj-ptrn-id-init-fn-name-arrow.js", "description": " SingleNameBinding assigns `name` to arrow functions (static class expression method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/meth-static-obj-ptrn-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (static class expression method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/meth-static-obj-ptrn-id-init-fn-name-cover.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" functions \"through\" cover grammar (static class expression method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/meth-static-obj-ptrn-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (static class expression method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/class/dstr/meth-static-obj-ptrn-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (static class expression method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n\n"}, {"path": "./test262-main/test/language/statements/class/dstr/meth-static-obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (static class expression method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/class/dstr/meth-static-obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (static class expression method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/class/dstr/meth-static-obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (static class expression method)", "esid": " sec-runtime-semantics-bindingclassdeclarationevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassDeclaration : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be the result of ClassDefinitionEvaluation of ClassTail with\nargument className.\n[...]\n\n14.5.14 Runtime Semantics: ClassDefinitionEvaluation\n\n21. For each ClassElement m in order from methods\na. If IsStatic of m is false, then\nb. Else,\nLet status be the result of performing PropertyDefinitionEvaluation for\nm with arguments F and false.\n[...]\n\n14.3.8 Runtime Semantics: DefineMethod\n\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody,\nscope, strict). If functionPrototype was passed as a parameter then pass its\nvalue as the functionPrototype optional argument of FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/class/elements/syntax/valid/grammar-special-prototype-async-gen-meth-valid.js", "description": " Async Generator Methods can be named \"prototype\" (class declaration)", "esid": " prod-ClassElement", "features": ["async-iteration", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |Runtime Semantics: ClassDefinitionEvaluation\n\nClassTail : ClassHeritage_opt { ClassBody_opt }\n\n[...]\n6. Let proto be OrdinaryObjectCreate(protoParent).\n[...]\n14. Perform MakeConstructor(F, false, proto).\n[...]\n20. For each ClassElement m in order from methods, do\na. If IsStatic of m is false, then\ni. Let status be PropertyDefinitionEvaluation of m with arguments proto and false.\n[...]\n\nRuntime Semantics: PropertyDefinitionEvaluation\n\nWith parameters object and enumerable.\n\nAsyncGeneratorMethod : async * PropertyName ( UniqueFormalParameters ) { AsyncGeneratorBody }\n\n[...]\n10. Let desc be PropertyDescriptor { [[Value]]: closure, [[Writable]]: true, [[Enumerable]]: enumerable, [[Configurable]]: true }.\n11. Return ? DefinePropertyOrThrow(object, propKey, desc).\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/syntax/valid/grammar-static-ctor-async-gen-meth-valid.js", "description": " Static Async Generator Methods can be named constructor (class declaration)", "esid": " prod-ClassElement", "features": ["async-iteration", "class"], "flags": ["generated"], "info": " |Class Definitions / Static Semantics: Early Errors\n\nClassElement : MethodDefinition\nIt is a Syntax Error if PropName of MethodDefinition is not \"constructor\" and HasDirectSuper of MethodDefinition is true.\nIt is a Syntax Error if PropName of MethodDefinition is \"constructor\" and SpecialMethod of MethodDefinition is true.\nClassElement : static MethodDefinition\nIt is a Syntax Error if HasDirectSuper of MethodDefinition is true.\nIt is a Syntax Error if PropName of MethodDefinition is \"prototype\".\n\n"}, {"path": "./test262-main/test/language/statements/class/gen-method/yield-spread-obj.js", "description": " Use yield value in a object spread position (Generator method as a ClassDeclaration element)", "esid": " prod-GeneratorMethod", "features": ["object-spread", "generators"], "flags": ["generated"], "info": " |ClassElement :\nMethodDefinition\n\nMethodDefinition :\nGeneratorMethod\n\n14.4 Generator Function Definitions\n\nGeneratorMethod :\n* PropertyName ( UniqueFormalParameters ) { GeneratorBody }\n\n\nSpread Properties\n\nPropertyDefinition[Yield]:\n(...)\n...AssignmentExpression[In, ?Yield]\n\n"}, {"path": "./test262-main/test/language/statements/class/gen-method-static/yield-spread-obj.js", "description": " Use yield value in a object spread position (Static generator method as a ClassDeclaration element)", "esid": " prod-GeneratorMethod", "features": ["object-spread", "generators"], "flags": ["generated"], "info": " |ClassElement :\nstatic MethodDefinition\n\nMethodDefinition :\nGeneratorMethod\n\n14.4 Generator Function Definitions\n\nGeneratorMethod :\n* PropertyName ( UniqueFormalParameters ) { GeneratorBody }\n\n\nSpread Properties\n\nPropertyDefinition[Yield]:\n(...)\n...AssignmentExpression[In, ?Yield]\n\n"}, {"path": "./test262-main/test/language/statements/class/subclass/superclass-async-generator-function.js", "esid": " sec-runtime-semantics-classdefinitionevaluation", "description": " >IsConstructor check is performed before \"prototype\" lookup.\nAsync generator functions are not constructors (MakeConstructor is not called on them).\n", "info": " |ClassDefinitionEvaluation\n\n[...]\n5. Else,\n[...]\nd. Let superclass be ? GetValue(superclassRef).\ne. If superclass is null, then\n[...]\nf. Else if IsConstructor(superclass) is false, throw a TypeError exception.\n", "features": ["async-iteration", "class", "Proxy"]}, {"path": "./test262-main/test/language/statements/class/subclass-builtins/subclass-SharedArrayBuffer.js", "description": " new SubSharedArrayBuffer() instanceof SharedArrayBuffer (Subclass instanceof Heritage)", "features": ["SharedArrayBuffer"], "flags": ["generated"]}, {"path": "./test262-main/test/language/statements/const/dstr/ary-init-iter-close.js", "description": " Iterator is closed when not exhausted by pattern evaluation (`const` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n[...]\n4. If iteratorRecord.[[done]] is false, return ? IteratorClose(iterator,\nresult).\n[...]\n\n"}, {"path": "./test262-main/test/language/statements/const/dstr/ary-ptrn-elem-id-init-fn-name-arrow.js", "description": " SingleNameBinding does assign name to arrow functions (`const` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/const/dstr/ary-ptrn-elem-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (`const` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/const/dstr/ary-ptrn-elem-id-init-fn-name-cover.js", "description": " SingleNameBinding does assign name to \"anonymous\" functions \"through\" cover grammar (`const` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/const/dstr/ary-ptrn-elem-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (`const` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/const/dstr/ary-ptrn-elem-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (`const` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n\n"}, {"path": "./test262-main/test/language/statements/const/dstr/obj-ptrn-id-init-fn-name-arrow.js", "description": " SingleNameBinding assigns `name` to arrow functions (`const` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/const/dstr/obj-ptrn-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (`const` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/const/dstr/obj-ptrn-id-init-fn-name-cover.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" functions \"through\" cover grammar (`const` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/const/dstr/obj-ptrn-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (`const` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/const/dstr/obj-ptrn-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (`const` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n\n"}, {"path": "./test262-main/test/language/statements/const/dstr/obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (`const` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n"}, {"path": "./test262-main/test/language/statements/const/dstr/obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (`const` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n"}, {"path": "./test262-main/test/language/statements/const/dstr/obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (`const` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n"}, {"path": "./test262-main/test/language/statements/const/fn-name-arrow.js", "version": 6, "esid": " 13.3.1.4", "description": " Assignment of function `name` attribute (ArrowFunction)", "info": " |LexicalBinding : BindingIdentifier Initializer\n\n[...]\n6. If IsAnonymousFunctionDefinition(Initializer) is true, then\na. Let hasNameProperty be HasOwnProperty(value, \"name\").\nb. ReturnIfAbrupt(hasNameProperty).\nc. If hasNameProperty is false, perform SetFunctionName(value,\nbindingId).\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/language/statements/const/fn-name-class.js", "version": 6, "esid": " 13.3.1.4", "description": " Assignment of function `name` attribute (ClassExpression)", "info": " |LexicalBinding : BindingIdentifier Initializer\n\n[...]\n6. If IsAnonymousFunctionDefinition(Initializer) is true, then\na. Let hasNameProperty be HasOwnProperty(value, \"name\").\nb. ReturnIfAbrupt(hasNameProperty).\nc. If hasNameProperty is false, perform SetFunctionName(value,\nbindingId).\n", "includes": ["propertyHelper.js"], "features": ["class"]}, {"path": "./test262-main/test/language/statements/const/fn-name-cover.js", "version": 6, "esid": " 13.3.1.4", "description": " >Assignment of function `name` attribute (CoverParenthesizedExpression)\n", "info": " |LexicalBinding : BindingIdentifier Initializer\n\n[...]\n6. If IsAnonymousFunctionDefinition(Initializer) is true, then\na. Let hasNameProperty be HasOwnProperty(value, \"name\").\nb. ReturnIfAbrupt(hasNameProperty).\nc. If hasNameProperty is false, perform SetFunctionName(value,\nbindingId).\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/language/statements/const/fn-name-fn.js", "version": 6, "esid": " 13.3.1.4", "description": " Assignment of function `name` attribute (FunctionExpression)", "info": " |LexicalBinding : BindingIdentifier Initializer\n\n[...]\n6. If IsAnonymousFunctionDefinition(Initializer) is true, then\na. Let hasNameProperty be HasOwnProperty(value, \"name\").\nb. ReturnIfAbrupt(hasNameProperty).\nc. If hasNameProperty is false, perform SetFunctionName(value,\nbindingId).\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/language/statements/const/fn-name-gen.js", "version": 6, "esid": " 13.3.1.4", "description": " Assignment of function `name` attribute (GeneratorExpression)", "info": " |LexicalBinding : BindingIdentifier Initializer\n\n[...]\n6. If IsAnonymousFunctionDefinition(Initializer) is true, then\na. Let hasNameProperty be HasOwnProperty(value, \"name\").\nb. ReturnIfAbrupt(hasNameProperty).\nc. If hasNameProperty is false, perform SetFunctionName(value,\nbindingId).\n", "includes": ["propertyHelper.js"], "features": ["generators"]}, {"path": "./test262-main/test/language/statements/for/dstr/const-ary-init-iter-close.js", "description": " Iterator is closed when not exhausted by pattern evaluation (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n[...]\n4. If iteratorRecord.[[done]] is false, return ? IteratorClose(iterator,\nresult).\n[...]\n\n"}, {"path": "./test262-main/test/language/statements/for/dstr/const-ary-ptrn-elem-id-init-fn-name-arrow.js", "description": " SingleNameBinding does assign name to arrow functions (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/for/dstr/const-ary-ptrn-elem-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/for/dstr/const-ary-ptrn-elem-id-init-fn-name-cover.js", "description": " SingleNameBinding does assign name to \"anonymous\" functions \"through\" cover grammar (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/for/dstr/const-ary-ptrn-elem-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/for/dstr/const-ary-ptrn-elem-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n\n"}, {"path": "./test262-main/test/language/statements/for/dstr/const-ary-ptrn-elision-iter-close.js", "description": " The iterator is properly consumed by the destructuring pattern (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/const-obj-ptrn-id-init-fn-name-arrow.js", "description": " SingleNameBinding assigns `name` to arrow functions (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/for/dstr/const-obj-ptrn-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/for/dstr/const-obj-ptrn-id-init-fn-name-cover.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" functions \"through\" cover grammar (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/for/dstr/const-obj-ptrn-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/for/dstr/const-obj-ptrn-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n\n"}, {"path": "./test262-main/test/language/statements/for/dstr/const-obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/const-obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/const-obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/let-ary-init-iter-close.js", "description": " Iterator is closed when not exhausted by pattern evaluation (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n[...]\n4. If iteratorRecord.[[done]] is false, return ? IteratorClose(iterator,\nresult).\n[...]\n\n"}, {"path": "./test262-main/test/language/statements/for/dstr/let-ary-ptrn-elem-id-init-fn-name-arrow.js", "description": " SingleNameBinding does assign name to arrow functions (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/for/dstr/let-ary-ptrn-elem-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/for/dstr/let-ary-ptrn-elem-id-init-fn-name-cover.js", "description": " SingleNameBinding does assign name to \"anonymous\" functions \"through\" cover grammar (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/for/dstr/let-ary-ptrn-elem-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/for/dstr/let-ary-ptrn-elem-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n\n"}, {"path": "./test262-main/test/language/statements/for/dstr/let-ary-ptrn-elision-iter-close.js", "description": " The iterator is properly consumed by the destructuring pattern (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/let-obj-ptrn-id-init-fn-name-arrow.js", "description": " SingleNameBinding assigns `name` to arrow functions (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/for/dstr/let-obj-ptrn-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/for/dstr/let-obj-ptrn-id-init-fn-name-cover.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" functions \"through\" cover grammar (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/for/dstr/let-obj-ptrn-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/for/dstr/let-obj-ptrn-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n\n"}, {"path": "./test262-main/test/language/statements/for/dstr/let-obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/let-obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/let-obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/var-ary-init-iter-close.js", "description": " Iterator is closed when not exhausted by pattern evaluation (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var VariableDeclarationList ; Expressionopt ; Expressionopt ) Statement\n\n1. Let varDcl be the result of evaluating VariableDeclarationList.\n[...]\n\n13.3.2.4 Runtime Semantics: Evaluation\n\nVariableDeclarationList : VariableDeclarationList , VariableDeclaration\n\n1. Let next be the result of evaluating VariableDeclarationList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating VariableDeclaration.\n\nVariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing rval and undefined as arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n[...]\n4. If iteratorRecord.[[done]] is false, return ? IteratorClose(iterator,\nresult).\n[...]\n\n"}, {"path": "./test262-main/test/language/statements/for/dstr/var-ary-ptrn-elem-id-init-fn-name-arrow.js", "description": " SingleNameBinding does assign name to arrow functions (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var VariableDeclarationList ; Expressionopt ; Expressionopt ) Statement\n\n1. Let varDcl be the result of evaluating VariableDeclarationList.\n[...]\n\n13.3.2.4 Runtime Semantics: Evaluation\n\nVariableDeclarationList : VariableDeclarationList , VariableDeclaration\n\n1. Let next be the result of evaluating VariableDeclarationList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating VariableDeclaration.\n\nVariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing rval and undefined as arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/for/dstr/var-ary-ptrn-elem-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var VariableDeclarationList ; Expressionopt ; Expressionopt ) Statement\n\n1. Let varDcl be the result of evaluating VariableDeclarationList.\n[...]\n\n13.3.2.4 Runtime Semantics: Evaluation\n\nVariableDeclarationList : VariableDeclarationList , VariableDeclaration\n\n1. Let next be the result of evaluating VariableDeclarationList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating VariableDeclaration.\n\nVariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing rval and undefined as arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/for/dstr/var-ary-ptrn-elem-id-init-fn-name-cover.js", "description": " SingleNameBinding does assign name to \"anonymous\" functions \"through\" cover grammar (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var VariableDeclarationList ; Expressionopt ; Expressionopt ) Statement\n\n1. Let varDcl be the result of evaluating VariableDeclarationList.\n[...]\n\n13.3.2.4 Runtime Semantics: Evaluation\n\nVariableDeclarationList : VariableDeclarationList , VariableDeclaration\n\n1. Let next be the result of evaluating VariableDeclarationList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating VariableDeclaration.\n\nVariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing rval and undefined as arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/for/dstr/var-ary-ptrn-elem-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var VariableDeclarationList ; Expressionopt ; Expressionopt ) Statement\n\n1. Let varDcl be the result of evaluating VariableDeclarationList.\n[...]\n\n13.3.2.4 Runtime Semantics: Evaluation\n\nVariableDeclarationList : VariableDeclarationList , VariableDeclaration\n\n1. Let next be the result of evaluating VariableDeclarationList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating VariableDeclaration.\n\nVariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing rval and undefined as arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/for/dstr/var-ary-ptrn-elem-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var VariableDeclarationList ; Expressionopt ; Expressionopt ) Statement\n\n1. Let varDcl be the result of evaluating VariableDeclarationList.\n[...]\n\n13.3.2.4 Runtime Semantics: Evaluation\n\nVariableDeclarationList : VariableDeclarationList , VariableDeclaration\n\n1. Let next be the result of evaluating VariableDeclarationList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating VariableDeclaration.\n\nVariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing rval and undefined as arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n\n"}, {"path": "./test262-main/test/language/statements/for/dstr/var-ary-ptrn-elision-iter-close.js", "description": " The iterator is properly consumed by the destructuring pattern (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var VariableDeclarationList ; Expressionopt ; Expressionopt ) Statement\n\n1. Let varDcl be the result of evaluating VariableDeclarationList.\n[...]\n\n13.3.2.4 Runtime Semantics: Evaluation\n\nVariableDeclarationList : VariableDeclarationList , VariableDeclaration\n\n1. Let next be the result of evaluating VariableDeclarationList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating VariableDeclaration.\n\nVariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/var-obj-ptrn-id-init-fn-name-arrow.js", "description": " SingleNameBinding assigns `name` to arrow functions (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var VariableDeclarationList ; Expressionopt ; Expressionopt ) Statement\n\n1. Let varDcl be the result of evaluating VariableDeclarationList.\n[...]\n\n13.3.2.4 Runtime Semantics: Evaluation\n\nVariableDeclarationList : VariableDeclarationList , VariableDeclaration\n\n1. Let next be the result of evaluating VariableDeclarationList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating VariableDeclaration.\n\nVariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing rval and undefined as arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/for/dstr/var-obj-ptrn-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var VariableDeclarationList ; Expressionopt ; Expressionopt ) Statement\n\n1. Let varDcl be the result of evaluating VariableDeclarationList.\n[...]\n\n13.3.2.4 Runtime Semantics: Evaluation\n\nVariableDeclarationList : VariableDeclarationList , VariableDeclaration\n\n1. Let next be the result of evaluating VariableDeclarationList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating VariableDeclaration.\n\nVariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing rval and undefined as arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/for/dstr/var-obj-ptrn-id-init-fn-name-cover.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" functions \"through\" cover grammar (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var VariableDeclarationList ; Expressionopt ; Expressionopt ) Statement\n\n1. Let varDcl be the result of evaluating VariableDeclarationList.\n[...]\n\n13.3.2.4 Runtime Semantics: Evaluation\n\nVariableDeclarationList : VariableDeclarationList , VariableDeclaration\n\n1. Let next be the result of evaluating VariableDeclarationList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating VariableDeclaration.\n\nVariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing rval and undefined as arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/for/dstr/var-obj-ptrn-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var VariableDeclarationList ; Expressionopt ; Expressionopt ) Statement\n\n1. Let varDcl be the result of evaluating VariableDeclarationList.\n[...]\n\n13.3.2.4 Runtime Semantics: Evaluation\n\nVariableDeclarationList : VariableDeclarationList , VariableDeclaration\n\n1. Let next be the result of evaluating VariableDeclarationList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating VariableDeclaration.\n\nVariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing rval and undefined as arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/for/dstr/var-obj-ptrn-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var VariableDeclarationList ; Expressionopt ; Expressionopt ) Statement\n\n1. Let varDcl be the result of evaluating VariableDeclarationList.\n[...]\n\n13.3.2.4 Runtime Semantics: Evaluation\n\nVariableDeclarationList : VariableDeclarationList , VariableDeclaration\n\n1. Let next be the result of evaluating VariableDeclarationList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating VariableDeclaration.\n\nVariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing rval and undefined as arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n\n"}, {"path": "./test262-main/test/language/statements/for/dstr/var-obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |IterationStatement :\nfor ( var VariableDeclarationList ; Expressionopt ; Expressionopt ) Statement\n\n1. Let varDcl be the result of evaluating VariableDeclarationList.\n[...]\n\n13.3.2.4 Runtime Semantics: Evaluation\n\nVariableDeclarationList : VariableDeclarationList , VariableDeclaration\n\n1. Let next be the result of evaluating VariableDeclarationList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating VariableDeclaration.\n\nVariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/var-obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |IterationStatement :\nfor ( var VariableDeclarationList ; Expressionopt ; Expressionopt ) Statement\n\n1. Let varDcl be the result of evaluating VariableDeclarationList.\n[...]\n\n13.3.2.4 Runtime Semantics: Evaluation\n\nVariableDeclarationList : VariableDeclarationList , VariableDeclaration\n\n1. Let next be the result of evaluating VariableDeclarationList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating VariableDeclaration.\n\nVariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/var-obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |IterationStatement :\nfor ( var VariableDeclarationList ; Expressionopt ; Expressionopt ) Statement\n\n1. Let varDcl be the result of evaluating VariableDeclarationList.\n[...]\n\n13.3.2.4 Runtime Semantics: Evaluation\n\nVariableDeclarationList : VariableDeclarationList , VariableDeclaration\n\n1. Let next be the result of evaluating VariableDeclarationList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating VariableDeclaration.\n\nVariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/statements/for-await-of/async-gen-decl-dstr-array-elem-target-yield-expr.js", "description": " When a `yield` token appears within the DestructuringAssignmentTarget of an AssignmentElement within a generator function body, it behaves as a YieldExpression. (for-await-of statement in an async generator declaration)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding", "async-iteration"], "flags": ["generated", "async"], "info": " |IterationStatement :\nfor await ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n5. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-await-of/async-gen-decl-dstr-array-rest-nested-array-yield-expr.js", "description": " When a `yield` token appears within the DestructuringAssignmentTarget of a nested destructuring assignment and within a generator function body, it should behave as a YieldExpression. (for-await-of statement in an async generator declaration)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding", "async-iteration"], "flags": ["generated", "async"], "info": " |IterationStatement :\nfor await ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n5. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-await-of/async-gen-decl-dstr-array-rest-nested-obj-yield-expr.js", "description": " When a `yield` token appears within the Initializer of a nested destructuring assignment and within a generator function body, it should behave as a YieldExpression. (for-await-of statement in an async generator declaration)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding", "async-iteration"], "flags": ["generated", "async"], "info": " |IterationStatement :\nfor await ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n5. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-await-of/async-gen-decl-dstr-array-rest-yield-expr.js", "description": " When a `yield` token appears within the DestructuringAssignmentTarget of an AssignmentRestElement and within the body of a generator function, it should behave as a YieldExpression. (for-await-of statement in an async generator declaration)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding", "async-iteration"], "flags": ["generated", "async"], "info": " |IterationStatement :\nfor await ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n5. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-await-of/async-gen-decl-dstr-obj-id-init-yield-expr.js", "description": " When a `yield` token appears within the Initializer of an AssignmentProperty and within a generator function body, it should behave as a YieldExpression. (for-await-of statement in an async generator declaration)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding", "async-iteration"], "flags": ["generated", "async"], "info": " |IterationStatement :\nfor await ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n5. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-await-of/async-gen-decl-dstr-obj-prop-elem-init-yield-expr.js", "description": " When a `yield` token appears within the Initializer of an AssignmentElement and within a generator function body, it should behave as a YieldExpression. (for-await-of statement in an async generator declaration)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding", "async-iteration"], "flags": ["generated", "async"], "info": " |IterationStatement :\nfor await ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n5. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-await-of/async-gen-decl-dstr-obj-prop-elem-target-yield-expr.js", "description": " When a `yield` token appears within the DestructuringAssignmentTarget of an AssignmentElement and within a generator function body, it should behave as a YieldExpression. (for-await-of statement in an async generator declaration)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding", "async-iteration"], "flags": ["generated", "async"], "info": " |IterationStatement :\nfor await ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n5. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-await-of/async-gen-decl-dstr-obj-prop-nested-array-yield-expr.js", "description": " When a `yield` token appears within the Initializer of a nested destructuring assignment and within a generator function body, it should behave as a YieldExpression. (for-await-of statement in an async generator declaration)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding", "async-iteration"], "flags": ["generated", "async"], "info": " |IterationStatement :\nfor await ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n5. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-await-of/async-gen-decl-dstr-obj-prop-nested-obj-yield-expr.js", "description": " When a `yield` token appears within the Initializer of a nested destructuring assignment and within a generator function body, it should behave as a YieldExpression. (for-await-of statement in an async generator declaration)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding", "async-iteration"], "flags": ["generated", "async"], "info": " |IterationStatement :\nfor await ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n5. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-await-of/let-block-with-newline.js", "esid": " sec-for-in-and-for-of-statements", "description": " >ExpressionStatement doesn't have a lookahead restriction for `let {`.\n", "info": " |ExpressionStatement[Yield, Await] :\n[lookahead \u2209 { {, function, async [no LineTerminator here] function, class, let [ }]\nExpression[+In, ?Yield, ?Await] ;\n", "flags": ["noStrict"], "features": ["async-iteration"]}, {"path": "./test262-main/test/language/statements/for-await-of/let-identifier-with-newline.js", "esid": " sec-for-in-and-for-of-statements", "description": " >ExpressionStatement doesn't have a lookahead restriction for `let <binding-identifier>`.\n", "info": " |ExpressionStatement[Yield, Await] :\n[lookahead \u2209 { {, function, async [no LineTerminator here] function, class, let [ }]\nExpression[+In, ?Yield, ?Await] ;\n", "flags": ["noStrict"], "features": ["async-iteration"]}, {"path": "./test262-main/test/language/statements/for-of/body-dstr-assign-error.js", "esid": " sec-runtime-semantics-forin-div-ofheadevaluation-tdznames-expr-iterationkind", "description": " >If the left-hand side requires a DestructuringAssignment operation and that\noperation produces an error, the iterator should be closed and the error\nforwarded to the runtime.\n", "info": " |...\nElse,\nIf lhsKind is assignment, then\nLet status be the result of performing DestructuringAssignmentEvaluation of\nassignmentPattern using nextValue as the argument.\n...\nIf status is an abrupt completion, then\nSet the running execution context's LexicalEnvironment to oldEnv.\nIf iterationKind is enumerate, then\nReturn status.\n\n", "features": ["destructuring-assignment", "for-of", "Symbol.iterator"]}, {"path": "./test262-main/test/language/statements/for-of/body-put-error.js", "esid": " sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset", "description": " >If the left-hand side is not a lexical binding and the assignment produces\nan error, the iterator should be closed and the error forwarded to the\nruntime.\n", "info": " |...\nIf destructuring is false, then\nIf lhsRef is an abrupt completion, then\nLet status be lhsRef.\nElse if lhsKind is lexicalBinding, then\nLet status be InitializeReferencedBinding(lhsRef, nextValue).\nElse,\nLet status be PutValue(lhsRef, nextValue).\n...\n\n", "features": ["for-of", "Symbol.iterator"]}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-elem-init-fn-name-arrow.js", "description": " Assignment of function `name` attribute (ArrowFunction) (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nAssignmentElement[Yield] : DestructuringAssignmentTarget Initializeropt\n[...] 7. If Initializer is present and value is undefined and\nIsAnonymousFunctionDefinition(Initializer) and IsIdentifierRef of\nDestructuringAssignmentTarget are both true, then\na. Let hasNameProperty be HasOwnProperty(v, \"name\").\nb. ReturnIfAbrupt(hasNameProperty).\nc. If hasNameProperty is false, perform SetFunctionName(v,\nGetReferencedName(lref)).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-elem-init-fn-name-class.js", "description": " Assignment of function `name` attribute (ClassExpression) (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["class", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nAssignmentElement[Yield] : DestructuringAssignmentTarget Initializeropt\n[...] 7. If Initializer is present and value is undefined and\nIsAnonymousFunctionDefinition(Initializer) and IsIdentifierRef of\nDestructuringAssignmentTarget are both true, then\na. Let hasNameProperty be HasOwnProperty(v, \"name\").\nb. ReturnIfAbrupt(hasNameProperty).\nc. If hasNameProperty is false, perform SetFunctionName(v,\nGetReferencedName(lref)).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-elem-init-fn-name-cover.js", "description": " Assignment of function `name` attribute (CoverParenthesizedExpression) (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nAssignmentElement[Yield] : DestructuringAssignmentTarget Initializeropt\n[...] 7. If Initializer is present and value is undefined and\nIsAnonymousFunctionDefinition(Initializer) and IsIdentifierRef of\nDestructuringAssignmentTarget are both true, then\na. Let hasNameProperty be HasOwnProperty(v, \"name\").\nb. ReturnIfAbrupt(hasNameProperty).\nc. If hasNameProperty is false, perform SetFunctionName(v,\nGetReferencedName(lref)).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-elem-init-fn-name-fn.js", "description": " Assignment of function `name` attribute (FunctionExpression) (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["class", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nAssignmentElement[Yield] : DestructuringAssignmentTarget Initializeropt\n[...] 7. If Initializer is present and value is undefined and\nIsAnonymousFunctionDefinition(Initializer) and IsIdentifierRef of\nDestructuringAssignmentTarget are both true, then\na. Let hasNameProperty be HasOwnProperty(v, \"name\").\nb. ReturnIfAbrupt(hasNameProperty).\nc. If hasNameProperty is false, perform SetFunctionName(v,\nGetReferencedName(lref)).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-elem-init-fn-name-gen.js", "description": " Assignment of function `name` attribute (GeneratorExpression) (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nAssignmentElement[Yield] : DestructuringAssignmentTarget Initializeropt\n[...] 7. If Initializer is present and value is undefined and\nIsAnonymousFunctionDefinition(Initializer) and IsIdentifierRef of\nDestructuringAssignmentTarget are both true, then\na. Let hasNameProperty be HasOwnProperty(v, \"name\").\nb. ReturnIfAbrupt(hasNameProperty).\nc. If hasNameProperty is false, perform SetFunctionName(v,\nGetReferencedName(lref)).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-elem-iter-nrml-close-err.js", "description": " Abrupt completion returned from IteratorClose (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nArrayAssignmentPattern : [ AssignmentElementList ]\n\n[...]\n5. If iteratorRecord.[[done]] is false, return IteratorClose(iterator, result).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-elem-iter-nrml-close-null.js", "description": " IteratorClose throws a TypeError when `return` returns a non-Object value (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nArrayAssignmentPattern : [ AssignmentElementList ]\n\n[...]\n5. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nresult).\n6. Return result.\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n7. If completion.[[type]] is throw, return Completion(completion).\n8. If innerResult.[[type]] is throw, return Completion(innerResult).\n9. If Type(innerResult.[[value]]) is not Object, throw a TypeError\nexception.\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-elem-iter-nrml-close.js", "description": " IteratorClose is called when assignment evaluation has not exhausted the iterator (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nArrayAssignmentPattern : [ AssignmentElementList ]\n\n[...]\n5. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nresult).\n6. Return result.\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n[...]\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-elem-iter-rtrn-close-err.js", "description": " IteratorClose is called when reference evaluation produces a \"return\" completion (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nArrayAssignmentPattern : [ AssignmentElementList ]\n\n[...]\n5. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nresult).\n6. Return result.\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n7. If completion.[[type]] is throw, return Completion(completion).\n8. If innerResult.[[type]] is throw, return Completion(innerResult).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-elem-iter-rtrn-close-null.js", "description": " IteratorClose throws a TypeError when `return` returns a non-Object value (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nArrayAssignmentPattern : [ AssignmentElementList ]\n\n[...]\n5. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nresult).\n6. Return result.\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n7. If completion.[[type]] is throw, return Completion(completion).\n8. If innerResult.[[type]] is throw, return Completion(innerResult).\n9. If Type(innerResult.[[value]]) is not Object, throw a TypeError\nexception.\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-elem-iter-rtrn-close.js", "description": " IteratorClose is called when reference evaluation produces a \"return\" completion (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nArrayAssignmentPattern : [ AssignmentElementList ]\n\n[...]\n5. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nresult).\n6. Return result.\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n7. If completion.[[type]] is throw, return Completion(completion).\n8. If innerResult.[[type]] is throw, return Completion(innerResult).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-elem-iter-thrw-close-err.js", "description": " IteratorClose is called when reference evaluation produces a \"throw\" completion (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nArrayAssignmentPattern : [ AssignmentElementList ]\n\n[...]\n5. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nresult).\n6. Return result.\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-elem-iter-thrw-close.js", "description": " IteratorClose is called when reference evaluation produces a \"throw\" completion (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nArrayAssignmentPattern : [ AssignmentElementList ]\n\n[...]\n5. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nresult).\n6. Return result.\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n[...]\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-elem-trlg-iter-elision-iter-nrml-close-err.js", "description": " Abrupt completion returned from IteratorClose (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nArrayAssignmentPattern :\n[ AssignmentElementList , Elisionopt AssignmentRestElementopt ]\n\n[...]\n6. If Elision is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with\niteratorRecord as the argument.\nb. If status is an abrupt completion, then\n[...]\n8. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nstatus).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-elem-trlg-iter-elision-iter-nrml-close-null.js", "description": " IteratorClose throws a TypeError when `return` returns a non-Object value (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nArrayAssignmentPattern :\n[ AssignmentElementList , Elisionopt AssignmentRestElementopt ]\n\n[...]\n6. If Elision is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with\niteratorRecord as the argument.\nb. If status is an abrupt completion, then\n[...]\n8. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nstatus).\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n7. If completion.[[type]] is throw, return Completion(completion).\n8. If innerResult.[[type]] is throw, return Completion(innerResult).\n9. If Type(innerResult.[[value]]) is not Object, throw a TypeError\nexception.\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-elem-trlg-iter-elision-iter-nrml-close.js", "description": " IteratorClose invoked when elision does not exhaust the iterator (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nArrayAssignmentPattern :\n[ AssignmentElementList , Elisionopt AssignmentRestElementopt ]\n\n[...]\n6. If Elision is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with\niteratorRecord as the argument.\nb. If status is an abrupt completion, then\n[...]\n8. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nstatus).\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n[...]\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-elem-trlg-iter-list-nrml-close-err.js", "description": " Abrupt completion returned from IteratorClose (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nArrayAssignmentPattern :\n[ AssignmentElementList , Elisionopt AssignmentRestElementopt ]\n\n[...]\n3. Let iteratorRecord be Record {[[iterator]]: iterator, [[done]]: false}.\n4. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentElementList using\niteratorRecord as the argument.\n5. If status is an abrupt completion, then\na. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nstatus).\nb. Return Completion(status).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-elem-trlg-iter-list-nrml-close-null.js", "description": " IteratorClose throws a TypeError when `return` returns a non-Object value (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nArrayAssignmentPattern :\n[ AssignmentElementList , Elisionopt AssignmentRestElementopt ]\n\n[...]\n3. Let iteratorRecord be Record {[[iterator]]: iterator, [[done]]: false}.\n4. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentElementList using\niteratorRecord as the argument.\n5. If status is an abrupt completion, then\na. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nstatus).\nb. Return Completion(status).\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n7. If completion.[[type]] is throw, return Completion(completion).\n8. If innerResult.[[type]] is throw, return Completion(innerResult).\n9. If Type(innerResult.[[value]]) is not Object, throw a TypeError\nexception.\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-elem-trlg-iter-list-nrml-close.js", "description": " IteratorClose is invoked when evaluation of AssignmentElementList completes without exhausting the iterator (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nArrayAssignmentPattern :\n[ AssignmentElementList , Elisionopt AssignmentRestElementopt ]\n\n[...]\n3. Let iteratorRecord be Record {[[iterator]]: iterator, [[done]]: false}.\n4. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentElementList using\niteratorRecord as the argument.\n5. If status is an abrupt completion, then\na. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nstatus).\nb. Return Completion(status).\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n[...]\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-elem-trlg-iter-list-rtrn-close-err.js", "description": " IteratorClose is invoked when evaluation of AssignmentElementList returns a \"return\" completion and the iterator has not been marked as \"done\" (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nArrayAssignmentPattern :\n[ AssignmentElementList , Elisionopt AssignmentRestElementopt ]\n\n[...]\n3. Let iteratorRecord be Record {[[iterator]]: iterator, [[done]]: false}.\n4. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentElementList using\niteratorRecord as the argument.\n5. If status is an abrupt completion, then\na. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nstatus).\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n7. If completion.[[type]] is throw, return Completion(completion).\n8. If innerResult.[[type]] is throw, return Completion(innerResult).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-elem-trlg-iter-list-rtrn-close-null.js", "description": " IteratorClose throws a TypeError when `return` returns a non-Object value (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nArrayAssignmentPattern :\n[ AssignmentElementList , Elisionopt AssignmentRestElementopt ]\n\n[...]\n3. Let iteratorRecord be Record {[[iterator]]: iterator, [[done]]: false}.\n4. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentElementList using\niteratorRecord as the argument.\n5. If status is an abrupt completion, then\na. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nstatus).\nb. Return Completion(status).\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n7. If completion.[[type]] is throw, return Completion(completion).\n8. If innerResult.[[type]] is throw, return Completion(innerResult).\n9. If Type(innerResult.[[value]]) is not Object, throw a TypeError\nexception.\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-elem-trlg-iter-list-rtrn-close.js", "description": " IteratorClose is invoked when evaluation of AssignmentElementList returns a \"return\" completion and the iterator has not been marked as \"done\" (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nArrayAssignmentPattern :\n[ AssignmentElementList , Elisionopt AssignmentRestElementopt ]\n\n[...]\n3. Let iteratorRecord be Record {[[iterator]]: iterator, [[done]]: false}.\n4. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentElementList using\niteratorRecord as the argument.\n5. If status is an abrupt completion, then\na. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nstatus).\nb. Return Completion(status).\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n7. If completion.[[type]] is throw, return Completion(completion).\n8. If innerResult.[[type]] is throw, return Completion(innerResult).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-elem-trlg-iter-list-thrw-close-err.js", "description": " IteratorClose is invoked when evaluation of AssignmentElementList returns a \"throw\" completion and the iterator has not been marked as \"done\" (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nArrayAssignmentPattern :\n[ AssignmentElementList , Elisionopt AssignmentRestElementopt ]\n\n[...]\n3. Let iteratorRecord be Record {[[iterator]]: iterator, [[done]]: false}.\n4. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentElementList using\niteratorRecord as the argument.\n5. If status is an abrupt completion, then\na. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nstatus).\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n7. If completion.[[type]] is throw, return Completion(completion).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-elem-trlg-iter-list-thrw-close.js", "description": " IteratorClose is invoked when evaluation of AssignmentElementList returns a \"throw\" completion and the iterator has not been marked as \"done\" (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nArrayAssignmentPattern :\n[ AssignmentElementList , Elisionopt AssignmentRestElementopt ]\n\n[...]\n3. Let iteratorRecord be Record {[[iterator]]: iterator, [[done]]: false}.\n4. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentElementList using\niteratorRecord as the argument.\n5. If status is an abrupt completion, then\na. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nstatus).\nb. Return Completion(status).\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n[...]\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-elem-trlg-iter-rest-rtrn-close-err.js", "description": " IteratorClose is called when AssignmentRestEvaluation produces a \"return\" completion due to reference evaluation (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nArrayAssignmentPattern :\n[ AssignmentElementList , Elisionopt AssignmentRestElementopt ]\n\n[...]\n7. If AssignmentRestElement is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentRestElement\nwith iteratorRecord as the argument.\n8. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nstatus).\n9. Return Completion(status).\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n7. If completion.[[type]] is throw, return Completion(completion).\n8. If innerResult.[[type]] is throw, return Completion(innerResult).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-elem-trlg-iter-rest-rtrn-close-null.js", "description": " IteratorClose throws a TypeError when `return` returns a non-Object value (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nArrayAssignmentPattern :\n[ AssignmentElementList , Elisionopt AssignmentRestElementopt ]\n\n[...]\n7. If AssignmentRestElement is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentRestElement\nwith iteratorRecord as the argument.\n8. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nstatus).\n9. Return Completion(status).\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n7. If completion.[[type]] is throw, return Completion(completion).\n8. If innerResult.[[type]] is throw, return Completion(innerResult).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-elem-trlg-iter-rest-rtrn-close.js", "description": " IteratorClose is called when AssignmentRestEvaluation produces a \"return\" completion due to reference evaluation (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nArrayAssignmentPattern :\n[ AssignmentElementList , Elisionopt AssignmentRestElementopt ]\n\n[...]\n7. If AssignmentRestElement is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentRestElement\nwith iteratorRecord as the argument.\n8. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nstatus).\n9. Return Completion(status).\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n7. If completion.[[type]] is throw, return Completion(completion).\n8. If innerResult.[[type]] is throw, return Completion(innerResult).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-elem-trlg-iter-rest-thrw-close-err.js", "description": " IteratorClose is called when AssignmentRestEvaluation produces a \"throw\" completion due to reference evaluation (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nArrayAssignmentPattern :\n[ AssignmentElementList , Elisionopt AssignmentRestElementopt ]\n\n[...]\n7. If AssignmentRestElement is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentRestElement\nwith iteratorRecord as the argument.\n8. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nstatus).\n9. Return Completion(status).\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n7. If completion.[[type]] is throw, return Completion(completion)\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-elem-trlg-iter-rest-thrw-close.js", "description": " IteratorClose is called when AssignmentRestEvaluation produces a \"throw\" completion due to reference evaluation (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nArrayAssignmentPattern :\n[ AssignmentElementList , Elisionopt AssignmentRestElementopt ]\n\n[...]\n7. If AssignmentRestElement is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentRestElement\nwith iteratorRecord as the argument.\n8. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nstatus).\n9. Return Completion(status).\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n[...]\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-elision-iter-nrml-close-err.js", "description": " Abrupt completion returned from IteratorClose (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nArrayAssignmentPattern : [ Elision ]\n\n1. Let iterator be GetIterator(value).\n[...]\n5. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nresult).\n6. Return result.\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-elision-iter-nrml-close-null.js", "description": " IteratorClose throws a TypeError when `return` returns a non-Object value (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nArrayAssignmentPattern : [ Elision ]\n\n1. Let iterator be GetIterator(value).\n[...]\n5. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nresult).\n[...]\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n7. If completion.[[type]] is throw, return Completion(completion).\n8. If innerResult.[[type]] is throw, return Completion(innerResult).\n9. If Type(innerResult.[[value]]) is not Object, throw a TypeError\nexception.\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-elision-iter-nrml-close.js", "description": " IteratorClose is called when assignment evaluation has not exhausted the iterator (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nArrayAssignmentPattern : [ Elision ]\n\n1. Let iterator be GetIterator(value).\n[...]\n5. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nresult).\n[...]\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n[...]\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-empty-iter-close-err.js", "description": " Abrupt completion returned from IteratorClose (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nArrayAssignmentPattern : [ ]\n\n1. Let iterator be GetIterator(value).\n2. ReturnIfAbrupt(iterator).\n3. Return IteratorClose(iterator, NormalCompletion(empty)).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-empty-iter-close-null.js", "description": " IteratorClose throws a TypeError when `return` returns a non-Object value (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nArrayAssignmentPattern : [ ]\n\n1. Let iterator be GetIterator(value).\n2. ReturnIfAbrupt(iterator).\n3. Return IteratorClose(iterator, NormalCompletion(empty)).\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n7. If completion.[[type]] is throw, return Completion(completion).\n8. If innerResult.[[type]] is throw, return Completion(innerResult).\n9. If Type(innerResult.[[value]]) is not Object, throw a TypeError\nexception.\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-empty-iter-close.js", "description": " Iterator is closed without iterating (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nArrayAssignmentPattern : [ ]\n\n1. Let iterator be GetIterator(value).\n2. ReturnIfAbrupt(iterator).\n3. Return IteratorClose(iterator, NormalCompletion(empty)).\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n[...]\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-rest-iter-rtrn-close-err.js", "description": " IteratorClose is called when reference evaluation produces a \"return\" completion (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nArrayAssignmentPattern : [ Elisionopt AssignmentRestElement ]\n\n[...]\n5. Let result be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentRestElement with\niteratorRecord as the argument\n6. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nresult).\n\nAssignmentRestElement[Yield] : ... DestructuringAssignmentTarget\n\n1. If DestructuringAssignmentTarget is neither an ObjectLiteral nor an\nArrayLiteral, then\na. Let lref be the result of evaluating DestructuringAssignmentTarget.\nb. ReturnIfAbrupt(lref).\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n7. If completion.[[type]] is throw, return Completion(completion).\n8. If innerResult.[[type]] is throw, return Completion(innerResult).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-rest-iter-rtrn-close-null.js", "description": " IteratorClose throws a TypeError when `return` returns a non-Object value (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nArrayAssignmentPattern : [ Elisionopt AssignmentRestElement ]\n\n[...]\n5. Let result be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentRestElement with\niteratorRecord as the argument\n6. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nresult).\n\nAssignmentRestElement[Yield] : ... DestructuringAssignmentTarget\n\n1. If DestructuringAssignmentTarget is neither an ObjectLiteral nor an\nArrayLiteral, then\na. Let lref be the result of evaluating DestructuringAssignmentTarget.\nb. ReturnIfAbrupt(lref).\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n[...]\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n7. If completion.[[type]] is throw, return Completion(completion).\n8. If innerResult.[[type]] is throw, return Completion(innerResult).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-rest-iter-rtrn-close.js", "description": " IteratorClose is called when reference evaluation produces a \"return\" completion (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nArrayAssignmentPattern : [ Elisionopt AssignmentRestElement ]\n\n[...]\n5. Let result be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentRestElement with\niteratorRecord as the argument\n6. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nresult).\n\nAssignmentRestElement[Yield] : ... DestructuringAssignmentTarget\n\n1. If DestructuringAssignmentTarget is neither an ObjectLiteral nor an\nArrayLiteral, then\na. Let lref be the result of evaluating DestructuringAssignmentTarget.\nb. ReturnIfAbrupt(lref).\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n[...]\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n7. If completion.[[type]] is throw, return Completion(completion).\n8. If innerResult.[[type]] is throw, return Completion(innerResult).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-rest-iter-thrw-close-err.js", "description": " IteratorClose is called when reference evaluation produces a \"throw\" completion (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nArrayAssignmentPattern : [ Elisionopt AssignmentRestElement ]\n\n[...]\n5. Let result be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentRestElement with\niteratorRecord as the argument\n6. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nresult).\n\nAssignmentRestElement[Yield] : ... DestructuringAssignmentTarget\n\n1. If DestructuringAssignmentTarget is neither an ObjectLiteral nor an\nArrayLiteral, then\na. Let lref be the result of evaluating DestructuringAssignmentTarget.\nb. ReturnIfAbrupt(lref).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-rest-iter-thrw-close.js", "description": " IteratorClose is called when reference evaluation produces a \"throw\" completion (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nArrayAssignmentPattern : [ Elisionopt AssignmentRestElement ]\n\n[...]\n5. Let result be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentRestElement with\niteratorRecord as the argument\n6. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nresult).\n\nAssignmentRestElement[Yield] : ... DestructuringAssignmentTarget\n\n1. If DestructuringAssignmentTarget is neither an ObjectLiteral nor an\nArrayLiteral, then\na. Let lref be the result of evaluating DestructuringAssignmentTarget.\nb. ReturnIfAbrupt(lref).\n\n7.4.6 IteratorClose( iterator, completion )\n\n[...]\n6. Let innerResult be Call(return, iterator, \u00ab \u00bb).\n[...]\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-rest-lref-err.js", "description": " IteratorClose is called when reference evaluation produces an abrupt completion (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nArrayAssignmentPattern : [ Elisionopt AssignmentRestElement ]\n\n[...]\n5. Let result be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentRestElement with\niteratorRecord as the argument\n6. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nresult).\n\nAssignmentRestElement[Yield] : ... DestructuringAssignmentTarget\n\n1. If DestructuringAssignmentTarget is neither an ObjectLiteral nor an\nArrayLiteral, then\na. Let lref be the result of evaluating DestructuringAssignmentTarget.\nb. ReturnIfAbrupt(lref).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/const-ary-init-iter-close.js", "description": " Iterator is closed when not exhausted by pattern evaluation (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( ForDeclaration of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForDeclaration, Statement, keyResult,\nlexicalBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n[...]\niii. Else,\n1. Assert: lhsKind is lexicalBinding.\n2. Assert: lhs is a ForDeclaration.\n3. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and iterationEnv as arguments.\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n[...]\n4. If iteratorRecord.[[done]] is false, return ? IteratorClose(iterator,\nresult).\n[...]\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/const-ary-ptrn-elem-id-init-fn-name-arrow.js", "description": " SingleNameBinding does assign name to arrow functions (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( ForDeclaration of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForDeclaration, Statement, keyResult,\nlexicalBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n[...]\niii. Else,\n1. Assert: lhsKind is lexicalBinding.\n2. Assert: lhs is a ForDeclaration.\n3. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and iterationEnv as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/const-ary-ptrn-elem-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( ForDeclaration of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForDeclaration, Statement, keyResult,\nlexicalBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n[...]\niii. Else,\n1. Assert: lhsKind is lexicalBinding.\n2. Assert: lhs is a ForDeclaration.\n3. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and iterationEnv as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/const-ary-ptrn-elem-id-init-fn-name-cover.js", "description": " SingleNameBinding does assign name to \"anonymous\" functions \"through\" cover grammar (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( ForDeclaration of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForDeclaration, Statement, keyResult,\nlexicalBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n[...]\niii. Else,\n1. Assert: lhsKind is lexicalBinding.\n2. Assert: lhs is a ForDeclaration.\n3. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and iterationEnv as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/const-ary-ptrn-elem-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( ForDeclaration of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForDeclaration, Statement, keyResult,\nlexicalBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n[...]\niii. Else,\n1. Assert: lhsKind is lexicalBinding.\n2. Assert: lhs is a ForDeclaration.\n3. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and iterationEnv as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/const-ary-ptrn-elem-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( ForDeclaration of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForDeclaration, Statement, keyResult,\nlexicalBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n[...]\niii. Else,\n1. Assert: lhsKind is lexicalBinding.\n2. Assert: lhs is a ForDeclaration.\n3. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and iterationEnv as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/const-ary-ptrn-elision-iter-close.js", "description": " The iterator is properly consumed by the destructuring pattern (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( ForDeclaration of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForDeclaration, Statement, keyResult,\nlexicalBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n[...]\niii. Else,\n1. Assert: lhsKind is lexicalBinding.\n2. Assert: lhs is a ForDeclaration.\n3. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and iterationEnv as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/const-obj-ptrn-id-init-fn-name-arrow.js", "description": " SingleNameBinding assigns `name` to arrow functions (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( ForDeclaration of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForDeclaration, Statement, keyResult,\nlexicalBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n[...]\niii. Else,\n1. Assert: lhsKind is lexicalBinding.\n2. Assert: lhs is a ForDeclaration.\n3. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and iterationEnv as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/const-obj-ptrn-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( ForDeclaration of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForDeclaration, Statement, keyResult,\nlexicalBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n[...]\niii. Else,\n1. Assert: lhsKind is lexicalBinding.\n2. Assert: lhs is a ForDeclaration.\n3. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and iterationEnv as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/const-obj-ptrn-id-init-fn-name-cover.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" functions \"through\" cover grammar (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( ForDeclaration of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForDeclaration, Statement, keyResult,\nlexicalBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n[...]\niii. Else,\n1. Assert: lhsKind is lexicalBinding.\n2. Assert: lhs is a ForDeclaration.\n3. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and iterationEnv as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/const-obj-ptrn-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( ForDeclaration of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForDeclaration, Statement, keyResult,\nlexicalBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n[...]\niii. Else,\n1. Assert: lhsKind is lexicalBinding.\n2. Assert: lhs is a ForDeclaration.\n3. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and iterationEnv as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/const-obj-ptrn-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( ForDeclaration of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForDeclaration, Statement, keyResult,\nlexicalBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n[...]\niii. Else,\n1. Assert: lhsKind is lexicalBinding.\n2. Assert: lhs is a ForDeclaration.\n3. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and iterationEnv as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/const-obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |IterationStatement :\nfor ( ForDeclaration of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForDeclaration, Statement, keyResult,\nlexicalBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n[...]\niii. Else,\n1. Assert: lhsKind is lexicalBinding.\n2. Assert: lhs is a ForDeclaration.\n3. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and iterationEnv as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/const-obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |IterationStatement :\nfor ( ForDeclaration of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForDeclaration, Statement, keyResult,\nlexicalBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n[...]\niii. Else,\n1. Assert: lhsKind is lexicalBinding.\n2. Assert: lhs is a ForDeclaration.\n3. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and iterationEnv as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/const-obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |IterationStatement :\nfor ( ForDeclaration of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForDeclaration, Statement, keyResult,\nlexicalBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n[...]\niii. Else,\n1. Assert: lhsKind is lexicalBinding.\n2. Assert: lhs is a ForDeclaration.\n3. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and iterationEnv as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/let-ary-init-iter-close.js", "description": " Iterator is closed when not exhausted by pattern evaluation (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( ForDeclaration of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForDeclaration, Statement, keyResult,\nlexicalBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n[...]\niii. Else,\n1. Assert: lhsKind is lexicalBinding.\n2. Assert: lhs is a ForDeclaration.\n3. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and iterationEnv as arguments.\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n[...]\n4. If iteratorRecord.[[done]] is false, return ? IteratorClose(iterator,\nresult).\n[...]\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/let-ary-ptrn-elem-id-init-fn-name-arrow.js", "description": " SingleNameBinding does assign name to arrow functions (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( ForDeclaration of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForDeclaration, Statement, keyResult,\nlexicalBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n[...]\niii. Else,\n1. Assert: lhsKind is lexicalBinding.\n2. Assert: lhs is a ForDeclaration.\n3. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and iterationEnv as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/let-ary-ptrn-elem-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( ForDeclaration of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForDeclaration, Statement, keyResult,\nlexicalBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n[...]\niii. Else,\n1. Assert: lhsKind is lexicalBinding.\n2. Assert: lhs is a ForDeclaration.\n3. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and iterationEnv as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/let-ary-ptrn-elem-id-init-fn-name-cover.js", "description": " SingleNameBinding does assign name to \"anonymous\" functions \"through\" cover grammar (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( ForDeclaration of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForDeclaration, Statement, keyResult,\nlexicalBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n[...]\niii. Else,\n1. Assert: lhsKind is lexicalBinding.\n2. Assert: lhs is a ForDeclaration.\n3. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and iterationEnv as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/let-ary-ptrn-elem-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( ForDeclaration of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForDeclaration, Statement, keyResult,\nlexicalBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n[...]\niii. Else,\n1. Assert: lhsKind is lexicalBinding.\n2. Assert: lhs is a ForDeclaration.\n3. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and iterationEnv as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/let-ary-ptrn-elem-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( ForDeclaration of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForDeclaration, Statement, keyResult,\nlexicalBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n[...]\niii. Else,\n1. Assert: lhsKind is lexicalBinding.\n2. Assert: lhs is a ForDeclaration.\n3. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and iterationEnv as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/let-ary-ptrn-elision-iter-close.js", "description": " The iterator is properly consumed by the destructuring pattern (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( ForDeclaration of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForDeclaration, Statement, keyResult,\nlexicalBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n[...]\niii. Else,\n1. Assert: lhsKind is lexicalBinding.\n2. Assert: lhs is a ForDeclaration.\n3. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and iterationEnv as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/let-obj-ptrn-id-init-fn-name-arrow.js", "description": " SingleNameBinding assigns `name` to arrow functions (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( ForDeclaration of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForDeclaration, Statement, keyResult,\nlexicalBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n[...]\niii. Else,\n1. Assert: lhsKind is lexicalBinding.\n2. Assert: lhs is a ForDeclaration.\n3. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and iterationEnv as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/let-obj-ptrn-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( ForDeclaration of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForDeclaration, Statement, keyResult,\nlexicalBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n[...]\niii. Else,\n1. Assert: lhsKind is lexicalBinding.\n2. Assert: lhs is a ForDeclaration.\n3. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and iterationEnv as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/let-obj-ptrn-id-init-fn-name-cover.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" functions \"through\" cover grammar (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( ForDeclaration of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForDeclaration, Statement, keyResult,\nlexicalBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n[...]\niii. Else,\n1. Assert: lhsKind is lexicalBinding.\n2. Assert: lhs is a ForDeclaration.\n3. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and iterationEnv as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/let-obj-ptrn-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( ForDeclaration of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForDeclaration, Statement, keyResult,\nlexicalBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n[...]\niii. Else,\n1. Assert: lhsKind is lexicalBinding.\n2. Assert: lhs is a ForDeclaration.\n3. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and iterationEnv as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/let-obj-ptrn-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( ForDeclaration of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForDeclaration, Statement, keyResult,\nlexicalBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n[...]\niii. Else,\n1. Assert: lhsKind is lexicalBinding.\n2. Assert: lhs is a ForDeclaration.\n3. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and iterationEnv as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/let-obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |IterationStatement :\nfor ( ForDeclaration of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForDeclaration, Statement, keyResult,\nlexicalBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n[...]\niii. Else,\n1. Assert: lhsKind is lexicalBinding.\n2. Assert: lhs is a ForDeclaration.\n3. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and iterationEnv as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/let-obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |IterationStatement :\nfor ( ForDeclaration of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForDeclaration, Statement, keyResult,\nlexicalBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n[...]\niii. Else,\n1. Assert: lhsKind is lexicalBinding.\n2. Assert: lhs is a ForDeclaration.\n3. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and iterationEnv as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/let-obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |IterationStatement :\nfor ( ForDeclaration of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForDeclaration, Statement, keyResult,\nlexicalBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n[...]\niii. Else,\n1. Assert: lhsKind is lexicalBinding.\n2. Assert: lhs is a ForDeclaration.\n3. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and iterationEnv as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/obj-id-init-fn-name-arrow.js", "description": " Assignment of function `name` attribute (ArrowFunction) (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nAssignmentProperty : IdentifierReference Initializeropt\n[...] 6. If Initializeropt is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v, P).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/obj-id-init-fn-name-class.js", "description": " Assignment of function `name` attribute (ClassExpression) (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["class", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nAssignmentProperty : IdentifierReference Initializeropt\n[...] 6. If Initializeropt is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v, P).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/obj-id-init-fn-name-cover.js", "description": " Assignment of function `name` attribute (CoverParenthesizedExpression) (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nAssignmentProperty : IdentifierReference Initializeropt\n[...] 6. If Initializeropt is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v, P).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/obj-id-init-fn-name-fn.js", "description": " Assignment of function `name` attribute (FunctionExpression) (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nAssignmentProperty : IdentifierReference Initializeropt\n[...] 6. If Initializeropt is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v, P).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/obj-id-init-fn-name-gen.js", "description": " Assignment of function `name` attribute (GeneratorExpression) (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nAssignmentProperty : IdentifierReference Initializeropt\n[...] 6. If Initializeropt is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v, P).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/obj-prop-elem-init-fn-name-arrow.js", "description": " Assignment of function `name` attribute (ArrowFunction) (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nAssignmentElement[Yield] : DestructuringAssignmentTarget Initializeropt\n[...] 7. If Initializer is present and v is undefined and\nIsAnonymousFunctionDefinition(Initializer) and IsIdentifierRef of\nDestructuringAssignmentTarget are both true, then\na. Let hasNameProperty be HasOwnProperty(rhsValue, \"name\").\nb. ReturnIfAbrupt(hasNameProperty).\nc. If hasNameProperty is false, perform SetFunctionName(rhsValue,\nGetReferencedName(lref)).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/obj-prop-elem-init-fn-name-class.js", "description": " Assignment of function `name` attribute (ClassExpression) (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["class", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nAssignmentElement[Yield] : DestructuringAssignmentTarget Initializeropt\n[...] 7. If Initializer is present and v is undefined and\nIsAnonymousFunctionDefinition(Initializer) and IsIdentifierRef of\nDestructuringAssignmentTarget are both true, then\na. Let hasNameProperty be HasOwnProperty(rhsValue, \"name\").\nb. ReturnIfAbrupt(hasNameProperty).\nc. If hasNameProperty is false, perform SetFunctionName(rhsValue,\nGetReferencedName(lref)).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/obj-prop-elem-init-fn-name-cover.js", "description": " Assignment of function `name` attribute (CoverParenthesizedExpression) (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nAssignmentElement[Yield] : DestructuringAssignmentTarget Initializeropt\n[...] 7. If Initializer is present and v is undefined and\nIsAnonymousFunctionDefinition(Initializer) and IsIdentifierRef of\nDestructuringAssignmentTarget are both true, then\na. Let hasNameProperty be HasOwnProperty(rhsValue, \"name\").\nb. ReturnIfAbrupt(hasNameProperty).\nc. If hasNameProperty is false, perform SetFunctionName(rhsValue,\nGetReferencedName(lref)).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/obj-prop-elem-init-fn-name-fn.js", "description": " Assignment of function `name` attribute (FunctionExpression) (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nAssignmentElement[Yield] : DestructuringAssignmentTarget Initializeropt\n[...] 7. If Initializer is present and v is undefined and\nIsAnonymousFunctionDefinition(Initializer) and IsIdentifierRef of\nDestructuringAssignmentTarget are both true, then\na. Let hasNameProperty be HasOwnProperty(rhsValue, \"name\").\nb. ReturnIfAbrupt(hasNameProperty).\nc. If hasNameProperty is false, perform SetFunctionName(rhsValue,\nGetReferencedName(lref)).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/obj-prop-elem-init-fn-name-gen.js", "description": " Assignment of function `name` attribute (GeneratorExpression) (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nAssignmentElement[Yield] : DestructuringAssignmentTarget Initializeropt\n[...] 7. If Initializer is present and v is undefined and\nIsAnonymousFunctionDefinition(Initializer) and IsIdentifierRef of\nDestructuringAssignmentTarget are both true, then\na. Let hasNameProperty be HasOwnProperty(rhsValue, \"name\").\nb. ReturnIfAbrupt(hasNameProperty).\nc. If hasNameProperty is false, perform SetFunctionName(rhsValue,\nGetReferencedName(lref)).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/obj-rest-computed-property-no-strict.js", "description": " Destructuring field can be a computed property, i.e it can be defined only at runtime. Rest operantion needs to skip these properties as well. (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated", "noStrict"], "includes": ["propertyHelper.js"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/obj-rest-computed-property.js", "description": " Destructuring field can be a computed property, i.e it can be defined only at runtime. Rest operantion needs to skip these properties as well. (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/obj-rest-descriptors.js", "description": " Object created from rest deconstruction doesn't copy source object property descriptors. (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/obj-rest-empty-obj.js", "description": " RestBindingInitialization creates a new object even if lhs is an empty object (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/obj-rest-getter-abrupt-get-error.js", "description": " Rest deconstruction doesn't happen if getter return is abrupt (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/obj-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/obj-rest-non-string-computed-property-1.js", "description": " Destructuring field can be a non-string computed property, i.e it can be defined only at runtime. Rest operation needs to skip these properties as well. (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/obj-rest-non-string-computed-property-1dot.js", "description": " Destructuring field can be a non-string computed property, i.e it can be defined only at runtime. Rest operation needs to skip these properties as well. (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["compareArray.js", "propertyHelper.js"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/obj-rest-non-string-computed-property-1dot0.js", "description": " Destructuring field can be a non-string computed property, i.e it can be defined only at runtime. Rest operation needs to skip these properties as well. (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/obj-rest-non-string-computed-property-1e0.js", "description": " Destructuring field can be a non-string computed property, i.e it can be defined only at runtime. Rest operation needs to skip these properties as well. (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/obj-rest-non-string-computed-property-array-1.js", "description": " Destructuring field can be a non-string computed property, i.e it can be defined only at runtime. Rest operation needs to skip these properties as well. (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["compareArray.js", "propertyHelper.js"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/obj-rest-non-string-computed-property-array-1e0.js", "description": " Destructuring field can be a non-string computed property, i.e it can be defined only at runtime. Rest operation needs to skip these properties as well. (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["compareArray.js", "propertyHelper.js"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/obj-rest-non-string-computed-property-string-1.js", "description": " Destructuring field can be a non-string computed property, i.e it can be defined only at runtime. Rest operation needs to skip these properties as well. (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/obj-rest-number.js", "description": " RestBindingInitialization creates a new object even if lhs is a Number (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/obj-rest-order.js", "description": " Rest operation follows [[OwnPropertyKeys]] order (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol", "object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["compareArray.js"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/obj-rest-put-const.js", "description": " The object rest deconstruction assignment target should obey `const` semantics. (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/obj-rest-same-name.js", "description": " Proper setting in the values for rest name equal to a property name. (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/obj-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/obj-rest-str-val.js", "description": " RestBindingInitialization creats an object with indexes as property name (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/obj-rest-symbol-val.js", "description": " RestBindingInitialization creates a new object if lhs is a Symbol (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol", "object-rest", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/obj-rest-to-property-with-setter.js", "description": " When DestructuringAssignmentTarget is an object property setter, its value should be binded as rest object. (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/obj-rest-to-property.js", "description": " When DestructuringAssignmentTarget is an object property, its value should be binded as rest object. (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/obj-rest-val-null.js", "description": " TypeError is thrown when rhs is null because of 7.1.13 ToObject ( argument ) used by CopyDataProperties (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/obj-rest-val-undefined.js", "description": " TypeError is thrown when rhs is ```undefined``` because of 7.1.13 ToObject ( argument ) used by CopyDataProperties (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/obj-rest-valid-object.js", "description": " Rest object contains just unextracted data (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/var-ary-init-iter-close.js", "description": " Iterator is closed when not exhausted by pattern evaluation (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var ForBinding of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForBinding, Statement, keyResult,\nvarBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n1. Assert: lhs is a ForBinding.\n2. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and undefined as the arguments.\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n[...]\n4. If iteratorRecord.[[done]] is false, return ? IteratorClose(iterator,\nresult).\n[...]\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/var-ary-ptrn-elem-id-init-fn-name-arrow.js", "description": " SingleNameBinding does assign name to arrow functions (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var ForBinding of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForBinding, Statement, keyResult,\nvarBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n1. Assert: lhs is a ForBinding.\n2. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and undefined as the arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/var-ary-ptrn-elem-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var ForBinding of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForBinding, Statement, keyResult,\nvarBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n1. Assert: lhs is a ForBinding.\n2. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and undefined as the arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/var-ary-ptrn-elem-id-init-fn-name-cover.js", "description": " SingleNameBinding does assign name to \"anonymous\" functions \"through\" cover grammar (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var ForBinding of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForBinding, Statement, keyResult,\nvarBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n1. Assert: lhs is a ForBinding.\n2. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and undefined as the arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/var-ary-ptrn-elem-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var ForBinding of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForBinding, Statement, keyResult,\nvarBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n1. Assert: lhs is a ForBinding.\n2. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and undefined as the arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/var-ary-ptrn-elem-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var ForBinding of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForBinding, Statement, keyResult,\nvarBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n1. Assert: lhs is a ForBinding.\n2. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and undefined as the arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/var-ary-ptrn-elision-iter-close.js", "description": " The iterator is properly consumed by the destructuring pattern (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var ForBinding of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForBinding, Statement, keyResult,\nvarBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n1. Assert: lhs is a ForBinding.\n2. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and undefined as the arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/var-obj-ptrn-id-init-fn-name-arrow.js", "description": " SingleNameBinding assigns `name` to arrow functions (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var ForBinding of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForBinding, Statement, keyResult,\nvarBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n1. Assert: lhs is a ForBinding.\n2. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and undefined as the arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/var-obj-ptrn-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var ForBinding of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForBinding, Statement, keyResult,\nvarBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n1. Assert: lhs is a ForBinding.\n2. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and undefined as the arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/var-obj-ptrn-id-init-fn-name-cover.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" functions \"through\" cover grammar (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var ForBinding of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForBinding, Statement, keyResult,\nvarBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n1. Assert: lhs is a ForBinding.\n2. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and undefined as the arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/var-obj-ptrn-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var ForBinding of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForBinding, Statement, keyResult,\nvarBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n1. Assert: lhs is a ForBinding.\n2. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and undefined as the arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/var-obj-ptrn-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var ForBinding of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForBinding, Statement, keyResult,\nvarBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n1. Assert: lhs is a ForBinding.\n2. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and undefined as the arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/var-obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |IterationStatement :\nfor ( var ForBinding of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForBinding, Statement, keyResult,\nvarBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n1. Assert: lhs is a ForBinding.\n2. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and undefined as the arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/var-obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |IterationStatement :\nfor ( var ForBinding of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForBinding, Statement, keyResult,\nvarBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n1. Assert: lhs is a ForBinding.\n2. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and undefined as the arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/var-obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |IterationStatement :\nfor ( var ForBinding of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForBinding, Statement, keyResult,\nvarBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n1. Assert: lhs is a ForBinding.\n2. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and undefined as the arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/generator-close-via-break.js", "version": 6, "esid": " 13.6.4.13", "description": " >Generators should be closed via their `return` method when iteration is\ninterrupted via a `break` statement.\n", "features": ["generators"]}, {"path": "./test262-main/test/language/statements/for-of/generator-close-via-continue.js", "esid": " sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset", "description": " >Generators should be closed via their `return` method when iteration is\ninterrupted via a `continue` statement.\n", "info": " |13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation ( lhs, stmt, iteratorRecord, iterationKind, lhsKind, labelSet )\n...\n5. Repeat,\n...\ni. Let result be the result of evaluating stmt.\n...\nk. If LoopContinues(result, labelSet) is false, then\ni. If iterationKind is enumerate, then\n...\nii. Else,\n1. Assert: iterationKind is iterate.\n2. Return ? IteratorClose(iteratorRecord, UpdateEmpty(result, V)).\n...\n\n", "features": ["generators"]}, {"path": "./test262-main/test/language/statements/for-of/generator-close-via-return.js", "version": 6, "esid": " 13.6.4.13", "description": " >Generators should be closed via their `return` method when iteration is\ninterrupted via a `return` statement.\n", "features": ["generators"]}, {"path": "./test262-main/test/language/statements/for-of/generator-close-via-throw.js", "version": 6, "esid": " 13.6.4.13", "description": " >Generators should be closed via their `return` method when iteration is\ninterrupted via a `throw` statement.\n", "features": ["generators"]}, {"path": "./test262-main/test/language/statements/for-of/iterator-close-non-object.js", "version": 6, "esid": " 13.6.4.13", "description": " >If an iterator's `return` method returns a non-Object value, a TypeError\nshould be thrown.\n", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/language/statements/for-of/iterator-close-non-throw-get-method-abrupt.js", "esid": " sec-iteratorclose", "description": " >If retrieving an iterator's `return` method generates an error while\nclosing the iterator with non-throw completion, the error should be\nforwarded to the runtime.\n", "info": " |IteratorClose ( iteratorRecord, completion )\n\n[...]\n4. Let innerResult be GetMethod(iterator, \"return\").\n5. If innerResult.[[Type]] is normal,\n[...]\n6. If completion.[[Type]] is throw, return Completion(completion).\n7. If innerResult.[[Type]] is throw, return Completion(innerResult).\n\nGetMethod ( V, P )\n\n[...]\n2. Let func be ? GetV(V, P).\n", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/language/statements/for-of/iterator-close-non-throw-get-method-is-null.js", "esid": " sec-iteratorclose", "description": " >If iterator's \"return\" method is `null`,\nreceived non-throw completion is forwarded to the runtime.\n", "info": " |IteratorClose ( iteratorRecord, completion )\n\n[...]\n4. Let innerResult be GetMethod(iterator, \"return\").\n5. If innerResult.[[Type]] is normal,\na. Let return be innerResult.[[Value]].\nb. If return is undefined, return Completion(completion).\n\nGetMethod ( V, P )\n\n[...]\n2. Let func be ? GetV(V, P).\n3. If func is either undefined or null, return undefined.\n", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/language/statements/for-of/iterator-close-non-throw-get-method-non-callable.js", "esid": " sec-iteratorclose", "description": " >If retrieving an iterator's `return` method generates an error while\nclosing the iterator with non-throw completion, the error should be\nforwarded to the runtime.\n", "info": " |IteratorClose ( iteratorRecord, completion )\n\n[...]\n4. Let innerResult be GetMethod(iterator, \"return\").\n5. If innerResult.[[Type]] is normal,\n[...]\n6. If completion.[[Type]] is throw, return Completion(completion).\n7. If innerResult.[[Type]] is throw, return Completion(innerResult).\n\nGetMethod ( V, P )\n\n[...]\n2. Let func be ? GetV(V, P).\n3. If func is either undefined or null, return undefined.\n4. If IsCallable(func) is false, throw a TypeError exception.\n", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/language/statements/for-of/iterator-close-via-break.js", "version": 6, "esid": " 13.6.4.13", "description": " >Iterators should be closed via their `return` method when iteration is\ninterrupted via a `break` statement.\n", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/language/statements/for-of/iterator-close-via-continue.js", "esid": " sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset", "description": " >Iterators should be closed via their `return` method when iteration is\ninterrupted via a `continue` statement.\n", "info": " |13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation ( lhs, stmt, iteratorRecord, iterationKind, lhsKind, labelSet )\n...\n5. Repeat,\n...\ni. Let result be the result of evaluating stmt.\n...\nk. If LoopContinues(result, labelSet) is false, then\ni. If iterationKind is enumerate, then\n...\nii. Else,\n1. Assert: iterationKind is iterate.\n2. Return ? IteratorClose(iteratorRecord, UpdateEmpty(result, V)).\n...\n\n", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/language/statements/for-of/iterator-close-via-return.js", "version": 6, "esid": " 13.6.4.13", "description": " >Iterators should be closed via their `return` method when iteration is\ninterrupted via a `return` statement.\n", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/language/statements/for-of/iterator-close-via-throw.js", "version": 6, "esid": " 13.6.4.13", "description": " >Iterators should be closed via their `return` method when iteration is\ninterrupted via a `throw` statement.\n", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/language/statements/for-of/iterator-next-reference.js", "esid": " sec-getiterator", "description": " >The iterator's `next` method should be accessed only once with each\niteration as per the `GetIterator` abstract operation (7.4.1).\n", "features": ["Symbol.iterator", "for-of"]}, {"path": "./test262-main/test/language/statements/function/dstr/ary-init-iter-close.js", "description": " Iterator is closed when not exhausted by pattern evaluation (function declaration)", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n[...]\n4. If iteratorRecord.[[done]] is false, return ? IteratorClose(iterator,\nresult).\n[...]\n\n"}, {"path": "./test262-main/test/language/statements/function/dstr/ary-ptrn-elem-id-init-fn-name-arrow.js", "description": " SingleNameBinding does assign name to arrow functions (function declaration)", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/function/dstr/ary-ptrn-elem-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (function declaration)", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/function/dstr/ary-ptrn-elem-id-init-fn-name-cover.js", "description": " SingleNameBinding does assign name to \"anonymous\" functions \"through\" cover grammar (function declaration)", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/function/dstr/ary-ptrn-elem-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (function declaration)", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/function/dstr/ary-ptrn-elem-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (function declaration)", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n\n"}, {"path": "./test262-main/test/language/statements/function/dstr/dflt-ary-init-iter-close.js", "description": " Iterator is closed when not exhausted by pattern evaluation (function declaration (default parameter))", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["Symbol.iterator", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n[...]\n4. If iteratorRecord.[[done]] is false, return ? IteratorClose(iterator,\nresult).\n[...]\n\n"}, {"path": "./test262-main/test/language/statements/function/dstr/dflt-ary-ptrn-elem-id-init-fn-name-arrow.js", "description": " SingleNameBinding does assign name to arrow functions (function declaration (default parameter))", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/function/dstr/dflt-ary-ptrn-elem-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (function declaration (default parameter))", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/function/dstr/dflt-ary-ptrn-elem-id-init-fn-name-cover.js", "description": " SingleNameBinding does assign name to \"anonymous\" functions \"through\" cover grammar (function declaration (default parameter))", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/function/dstr/dflt-ary-ptrn-elem-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (function declaration (default parameter))", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/function/dstr/dflt-ary-ptrn-elem-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (function declaration (default parameter))", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n\n"}, {"path": "./test262-main/test/language/statements/function/dstr/dflt-obj-ptrn-id-init-fn-name-arrow.js", "description": " SingleNameBinding assigns `name` to arrow functions (function declaration (default parameter))", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/function/dstr/dflt-obj-ptrn-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (function declaration (default parameter))", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/function/dstr/dflt-obj-ptrn-id-init-fn-name-cover.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" functions \"through\" cover grammar (function declaration (default parameter))", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/function/dstr/dflt-obj-ptrn-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (function declaration (default parameter))", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/function/dstr/dflt-obj-ptrn-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (function declaration (default parameter))", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n\n"}, {"path": "./test262-main/test/language/statements/function/dstr/dflt-obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (function declaration (default parameter))", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["object-rest", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/function/dstr/dflt-obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (function declaration (default parameter))", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["object-rest", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/function/dstr/dflt-obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (function declaration (default parameter))", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["object-rest", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/function/dstr/obj-ptrn-id-init-fn-name-arrow.js", "description": " SingleNameBinding assigns `name` to arrow functions (function declaration)", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/function/dstr/obj-ptrn-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (function declaration)", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/function/dstr/obj-ptrn-id-init-fn-name-cover.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" functions \"through\" cover grammar (function declaration)", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/function/dstr/obj-ptrn-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (function declaration)", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/function/dstr/obj-ptrn-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (function declaration)", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n\n"}, {"path": "./test262-main/test/language/statements/function/dstr/obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (function declaration)", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/function/dstr/obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (function declaration)", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/function/dstr/obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (function declaration)", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/ary-init-iter-close.js", "description": " Iterator is closed when not exhausted by pattern evaluation (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n[...]\n4. If iteratorRecord.[[done]] is false, return ? IteratorClose(iterator,\nresult).\n[...]\n\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/ary-ptrn-elem-id-init-fn-name-arrow.js", "description": " SingleNameBinding does assign name to arrow functions (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/ary-ptrn-elem-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/ary-ptrn-elem-id-init-fn-name-cover.js", "description": " SingleNameBinding does assign name to \"anonymous\" functions \"through\" cover grammar (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/ary-ptrn-elem-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/ary-ptrn-elem-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/dflt-ary-init-iter-close.js", "description": " Iterator is closed when not exhausted by pattern evaluation (generator function declaration (default parameter))", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["Symbol.iterator", "generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n[...]\n4. If iteratorRecord.[[done]] is false, return ? IteratorClose(iterator,\nresult).\n[...]\n\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/dflt-ary-ptrn-elem-id-init-fn-name-arrow.js", "description": " SingleNameBinding does assign name to arrow functions (generator function declaration (default parameter))", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/dflt-ary-ptrn-elem-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (generator function declaration (default parameter))", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/dflt-ary-ptrn-elem-id-init-fn-name-cover.js", "description": " SingleNameBinding does assign name to \"anonymous\" functions \"through\" cover grammar (generator function declaration (default parameter))", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/dflt-ary-ptrn-elem-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (generator function declaration (default parameter))", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/dflt-ary-ptrn-elem-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (generator function declaration (default parameter))", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/dflt-obj-ptrn-id-init-fn-name-arrow.js", "description": " SingleNameBinding assigns `name` to arrow functions (generator function declaration (default parameter))", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/dflt-obj-ptrn-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (generator function declaration (default parameter))", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/dflt-obj-ptrn-id-init-fn-name-cover.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" functions \"through\" cover grammar (generator function declaration (default parameter))", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/dflt-obj-ptrn-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (generator function declaration (default parameter))", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/dflt-obj-ptrn-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (generator function declaration (default parameter))", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/dflt-obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (generator function declaration (default parameter))", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["object-rest", "generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/dflt-obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (generator function declaration (default parameter))", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["object-rest", "generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/dflt-obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (generator function declaration (default parameter))", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["object-rest", "generators", "destructuring-binding", "default-parameters"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/obj-ptrn-id-init-fn-name-arrow.js", "description": " SingleNameBinding assigns `name` to arrow functions (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/obj-ptrn-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/obj-ptrn-id-init-fn-name-cover.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" functions \"through\" cover grammar (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/obj-ptrn-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/obj-ptrn-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["object-rest", "generators", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["object-rest", "generators", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["object-rest", "generators", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/generators/restricted-properties.js", "description": " >Functions created using GeneratorFunction syntactic form do not have own\nproperties \"caller\" or \"arguments\", but inherit them from\n%FunctionPrototype%.\n", "features": ["generators"]}, {"path": "./test262-main/test/language/statements/generators/yield-identifier-spread-non-strict.js", "description": " Mixed use of object spread and yield as a valid identifier in a function body inside a generator body in non strict mode (Generator function declaration - valid for non-strict only cases)", "esid": " prod-GeneratorDeclaration", "features": ["Symbol", "object-spread", "generators"], "flags": ["generated", "noStrict"], "info": " |14.4 Generator Function Definitions\n\nGeneratorDeclaration[Yield, Await, Default]:\nfunction * BindingIdentifier[?Yield, ?Await] ( FormalParameters[+Yield, ~Await] ) { GeneratorBody }\n\n\nSpread Properties\n\nPropertyDefinition[Yield]:\n(...)\n...AssignmentExpression[In, ?Yield]\n\n"}, {"path": "./test262-main/test/language/statements/generators/yield-spread-obj.js", "description": " Use yield value in a object spread position (Generator Function declaration)", "esid": " prod-GeneratorDeclaration", "features": ["object-spread", "generators"], "flags": ["generated"], "info": " |14.4 Generator Function Definitions\n\nGeneratorDeclaration :\nfunction * BindingIdentifier ( FormalParameters ) { GeneratorBody }\n\n\nSpread Properties\n\nPropertyDefinition[Yield]:\n(...)\n...AssignmentExpression[In, ?Yield]\n\n"}, {"path": "./test262-main/test/language/statements/let/dstr/ary-init-iter-close.js", "description": " Iterator is closed when not exhausted by pattern evaluation (`let` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n[...]\n4. If iteratorRecord.[[done]] is false, return ? IteratorClose(iterator,\nresult).\n[...]\n\n"}, {"path": "./test262-main/test/language/statements/let/dstr/ary-ptrn-elem-id-init-fn-name-arrow.js", "description": " SingleNameBinding does assign name to arrow functions (`let` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/let/dstr/ary-ptrn-elem-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (`let` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/let/dstr/ary-ptrn-elem-id-init-fn-name-cover.js", "description": " SingleNameBinding does assign name to \"anonymous\" functions \"through\" cover grammar (`let` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/let/dstr/ary-ptrn-elem-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (`let` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/let/dstr/ary-ptrn-elem-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (`let` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n\n"}, {"path": "./test262-main/test/language/statements/let/dstr/obj-ptrn-id-init-fn-name-arrow.js", "description": " SingleNameBinding assigns `name` to arrow functions (`let` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/let/dstr/obj-ptrn-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (`let` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/let/dstr/obj-ptrn-id-init-fn-name-cover.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" functions \"through\" cover grammar (`let` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/let/dstr/obj-ptrn-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (`let` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/let/dstr/obj-ptrn-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (`let` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n\n"}, {"path": "./test262-main/test/language/statements/let/dstr/obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (`let` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n"}, {"path": "./test262-main/test/language/statements/let/dstr/obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (`let` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n"}, {"path": "./test262-main/test/language/statements/let/dstr/obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (`let` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n"}, {"path": "./test262-main/test/language/statements/let/fn-name-arrow.js", "version": 6, "esid": " 13.3.1.4", "description": " Assignment of function `name` attribute (ArrowFunction)", "info": " |LexicalBinding : BindingIdentifier Initializer\n\n[...]\n6. If IsAnonymousFunctionDefinition(Initializer) is true, then\na. Let hasNameProperty be HasOwnProperty(value, \"name\").\nb. ReturnIfAbrupt(hasNameProperty).\nc. If hasNameProperty is false, perform SetFunctionName(value,\nbindingId).\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/language/statements/let/fn-name-class.js", "version": 6, "esid": " 13.3.1.4", "description": " Assignment of function `name` attribute (ClassExpression)", "info": " |LexicalBinding : BindingIdentifier Initializer\n\n[...]\n6. If IsAnonymousFunctionDefinition(Initializer) is true, then\na. Let hasNameProperty be HasOwnProperty(value, \"name\").\nb. ReturnIfAbrupt(hasNameProperty).\nc. If hasNameProperty is false, perform SetFunctionName(value,\nbindingId).\n", "includes": ["propertyHelper.js"], "features": ["class"]}, {"path": "./test262-main/test/language/statements/let/fn-name-cover.js", "version": 6, "esid": " 13.3.1.4", "description": " >Assignment of function `name` attribute (CoverParenthesizedExpression)\n", "info": " |LexicalBinding : BindingIdentifier Initializer\n\n[...]\n6. If IsAnonymousFunctionDefinition(Initializer) is true, then\na. Let hasNameProperty be HasOwnProperty(value, \"name\").\nb. ReturnIfAbrupt(hasNameProperty).\nc. If hasNameProperty is false, perform SetFunctionName(value,\nbindingId).\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/language/statements/let/fn-name-fn.js", "version": 6, "esid": " 13.3.1.4", "description": " Assignment of function `name` attribute (FunctionExpression)", "info": " |LexicalBinding : BindingIdentifier Initializer\n\n[...]\n6. If IsAnonymousFunctionDefinition(Initializer) is true, then\na. Let hasNameProperty be HasOwnProperty(value, \"name\").\nb. ReturnIfAbrupt(hasNameProperty).\nc. If hasNameProperty is false, perform SetFunctionName(value,\nbindingId).\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/language/statements/let/fn-name-gen.js", "version": 6, "esid": " 13.3.1.4", "description": " Assignment of function `name` attribute (GeneratorExpression)", "info": " |LexicalBinding : BindingIdentifier Initializer\n\n[...]\n6. If IsAnonymousFunctionDefinition(Initializer) is true, then\na. Let hasNameProperty be HasOwnProperty(value, \"name\").\nb. ReturnIfAbrupt(hasNameProperty).\nc. If hasNameProperty is false, perform SetFunctionName(value,\nbindingId).\n", "includes": ["propertyHelper.js"], "features": ["generators"]}, {"path": "./test262-main/test/language/statements/switch/scope-lex-async-generator.js", "esid": " sec-switch-statement-runtime-semantics-evaluation", "description": " Creation of new lexical environment (into `default` clause)", "info": " |1. Let exprRef be the result of evaluating Expression.\n2. Let switchValue be ? GetValue(exprRef).\n3. Let oldEnv be the running execution context's LexicalEnvironment.\n4. Let blockEnv be NewDeclarativeEnvironment(oldEnv).\n5. Perform BlockDeclarationInstantiation(CaseBlock, blockEnv).\n6. Set the running execution context's LexicalEnvironment to blockEnv.\n7. Let R be the result of performing CaseBlockEvaluation of CaseBlock with\nargument switchValue.\n[...]\n", "negative": {"phase": "runtime", "type": "ReferenceError"}}, {"path": "./test262-main/test/language/statements/try/dstr/ary-init-iter-close.js", "description": " Iterator is closed when not exhausted by pattern evaluation (try statement)", "esid": " sec-runtime-semantics-catchclauseevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |Catch : catch ( CatchParameter ) Block\n\n[...]\n5. Let status be the result of performing BindingInitialization for\nCatchParameter passing thrownValue and catchEnv as arguments.\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n[...]\n4. If iteratorRecord.[[done]] is false, return ? IteratorClose(iterator,\nresult).\n[...]\n\n"}, {"path": "./test262-main/test/language/statements/try/dstr/ary-ptrn-elem-id-init-fn-name-arrow.js", "description": " SingleNameBinding does assign name to arrow functions (try statement)", "esid": " sec-runtime-semantics-catchclauseevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |Catch : catch ( CatchParameter ) Block\n\n[...]\n5. Let status be the result of performing BindingInitialization for\nCatchParameter passing thrownValue and catchEnv as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/try/dstr/ary-ptrn-elem-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (try statement)", "esid": " sec-runtime-semantics-catchclauseevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |Catch : catch ( CatchParameter ) Block\n\n[...]\n5. Let status be the result of performing BindingInitialization for\nCatchParameter passing thrownValue and catchEnv as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/try/dstr/ary-ptrn-elem-id-init-fn-name-cover.js", "description": " SingleNameBinding does assign name to \"anonymous\" functions \"through\" cover grammar (try statement)", "esid": " sec-runtime-semantics-catchclauseevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |Catch : catch ( CatchParameter ) Block\n\n[...]\n5. Let status be the result of performing BindingInitialization for\nCatchParameter passing thrownValue and catchEnv as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/try/dstr/ary-ptrn-elem-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (try statement)", "esid": " sec-runtime-semantics-catchclauseevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |Catch : catch ( CatchParameter ) Block\n\n[...]\n5. Let status be the result of performing BindingInitialization for\nCatchParameter passing thrownValue and catchEnv as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/try/dstr/ary-ptrn-elem-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (try statement)", "esid": " sec-runtime-semantics-catchclauseevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |Catch : catch ( CatchParameter ) Block\n\n[...]\n5. Let status be the result of performing BindingInitialization for\nCatchParameter passing thrownValue and catchEnv as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n\n"}, {"path": "./test262-main/test/language/statements/try/dstr/obj-ptrn-id-init-fn-name-arrow.js", "description": " SingleNameBinding assigns `name` to arrow functions (try statement)", "esid": " sec-runtime-semantics-catchclauseevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |Catch : catch ( CatchParameter ) Block\n\n[...]\n5. Let status be the result of performing BindingInitialization for\nCatchParameter passing thrownValue and catchEnv as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/try/dstr/obj-ptrn-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (try statement)", "esid": " sec-runtime-semantics-catchclauseevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |Catch : catch ( CatchParameter ) Block\n\n[...]\n5. Let status be the result of performing BindingInitialization for\nCatchParameter passing thrownValue and catchEnv as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/try/dstr/obj-ptrn-id-init-fn-name-cover.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" functions \"through\" cover grammar (try statement)", "esid": " sec-runtime-semantics-catchclauseevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |Catch : catch ( CatchParameter ) Block\n\n[...]\n5. Let status be the result of performing BindingInitialization for\nCatchParameter passing thrownValue and catchEnv as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/try/dstr/obj-ptrn-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (try statement)", "esid": " sec-runtime-semantics-catchclauseevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |Catch : catch ( CatchParameter ) Block\n\n[...]\n5. Let status be the result of performing BindingInitialization for\nCatchParameter passing thrownValue and catchEnv as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/try/dstr/obj-ptrn-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (try statement)", "esid": " sec-runtime-semantics-catchclauseevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |Catch : catch ( CatchParameter ) Block\n\n[...]\n5. Let status be the result of performing BindingInitialization for\nCatchParameter passing thrownValue and catchEnv as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n\n"}, {"path": "./test262-main/test/language/statements/try/dstr/obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (try statement)", "esid": " sec-runtime-semantics-catchclauseevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |Catch : catch ( CatchParameter ) Block\n\n[...]\n5. Let status be the result of performing BindingInitialization for\nCatchParameter passing thrownValue and catchEnv as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/try/dstr/obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (try statement)", "esid": " sec-runtime-semantics-catchclauseevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |Catch : catch ( CatchParameter ) Block\n\n[...]\n5. Let status be the result of performing BindingInitialization for\nCatchParameter passing thrownValue and catchEnv as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/try/dstr/obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (try statement)", "esid": " sec-runtime-semantics-catchclauseevaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |Catch : catch ( CatchParameter ) Block\n\n[...]\n5. Let status be the result of performing BindingInitialization for\nCatchParameter passing thrownValue and catchEnv as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/try/optional-catch-binding-finally.js", "author": " Lucas Azzola", "esid": " pending", "description": " try/catch/finally syntax with omission of the catch binding", "features": ["optional-catch-binding"], "info": " |Optional Catch Binding\n\nCatch[Yield, Await, Return]:\n(...)\ncatch Block[?Yield, ?Await, ?Return]\n"}, {"path": "./test262-main/test/language/statements/try/optional-catch-binding-lexical.js", "author": " Lucas Azzola", "esid": " pending", "description": " lexical environment runtime semantics for optional catch binding", "features": ["optional-catch-binding"], "info": " |Runtime Semantics: CatchClauseEvaluation\n\nCatch : catch Block\nLet oldEnv be the running execution context's LexicalEnvironment.\nLet catchEnv be NewDeclarativeEnvironment(oldEnv).\nSet the running execution context's LexicalEnvironment to catchEnv.\n(...)\nSet the running execution context's LexicalEnvironment to oldEnv.\nReturn Completion(B).\n"}, {"path": "./test262-main/test/language/statements/try/optional-catch-binding-throws.js", "author": " Lucas Azzola", "esid": " pending", "description": " errors can be thrown from catch clause without binding", "features": ["optional-catch-binding"], "info": " |Runtime Semantics: CatchClauseEvaluation\n\nCatch : catch Block\n(...)\nLet B be the result of evaluating Block.\n(...)\nReturn Completion(B).\n"}, {"path": "./test262-main/test/language/statements/try/optional-catch-binding.js", "author": " Lucas Azzola", "esid": " pending", "description": " try/catch syntax with omission of the catch binding", "features": ["optional-catch-binding"], "info": " |Optional Catch Binding\n\nCatch[Yield, Await, Return]:\n(...)\ncatch Block[?Yield, ?Await, ?Return]\n"}, {"path": "./test262-main/test/language/statements/variable/dstr/ary-init-iter-close.js", "description": " Iterator is closed when not exhausted by pattern evaluation (`var` statement)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n[...]\n4. If iteratorRecord.[[done]] is false, return ? IteratorClose(iterator,\nresult).\n[...]\n\n"}, {"path": "./test262-main/test/language/statements/variable/dstr/ary-ptrn-elem-id-init-fn-name-arrow.js", "description": " SingleNameBinding does assign name to arrow functions (`var` statement)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/variable/dstr/ary-ptrn-elem-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (`var` statement)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/variable/dstr/ary-ptrn-elem-id-init-fn-name-cover.js", "description": " SingleNameBinding does assign name to \"anonymous\" functions \"through\" cover grammar (`var` statement)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/variable/dstr/ary-ptrn-elem-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (`var` statement)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/variable/dstr/ary-ptrn-elem-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (`var` statement)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n\n"}, {"path": "./test262-main/test/language/statements/variable/dstr/obj-ptrn-id-init-fn-name-arrow.js", "description": " SingleNameBinding assigns `name` to arrow functions (`var` statement)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/variable/dstr/obj-ptrn-id-init-fn-name-class.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" classes (`var` statement)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/variable/dstr/obj-ptrn-id-init-fn-name-cover.js", "description": " SingleNameBinding assigns `name` to \"anonymous\" functions \"through\" cover grammar (`var` statement)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/variable/dstr/obj-ptrn-id-init-fn-name-fn.js", "description": " SingleNameBinding assigns name to \"anonymous\" functions (`var` statement)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n"}, {"path": "./test262-main/test/language/statements/variable/dstr/obj-ptrn-id-init-fn-name-gen.js", "description": " SingleNameBinding assigns name to \"anonymous\" generator functions (`var` statement)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\nd. If IsAnonymousFunctionDefinition(Initializer) is true, then\ni. Let hasNameProperty be HasOwnProperty(v, \"name\").\nii. ReturnIfAbrupt(hasNameProperty).\niii. If hasNameProperty is false, perform SetFunctionName(v,\nbindingId).\n\n"}, {"path": "./test262-main/test/language/statements/variable/dstr/obj-ptrn-rest-getter.js", "description": " Getter is called when obj is being deconstructed to a rest Object (`var` statement)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/statements/variable/dstr/obj-ptrn-rest-skip-non-enumerable.js", "description": " Rest object doesn't contain non-enumerable properties (`var` statement)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/statements/variable/dstr/obj-ptrn-rest-val-obj.js", "description": " Rest object contains just unextracted data (`var` statement)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["object-rest", "destructuring-binding"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/statements/variable/fn-name-arrow.js", "version": 6, "esid": " 13.3.2.4", "description": " Assignment of function `name` attribute (ArrowFunction)", "info": " |VariableDeclaration : BindingIdentifier Initializer\n\n[...]\n7. If IsAnonymousFunctionDefinition(Initializer) is true, then\na. Let hasNameProperty be HasOwnProperty(value, \"name\").\nb. ReturnIfAbrupt(hasNameProperty).\nc. If hasNameProperty is false, perform SetFunctionName(value,\nbindingId).\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/language/statements/variable/fn-name-class.js", "version": 6, "esid": " 13.3.2.4", "description": " Assignment of function `name` attribute (ClassExpression)", "info": " |VariableDeclaration : BindingIdentifier Initializer\n\n[...]\n7. If IsAnonymousFunctionDefinition(Initializer) is true, then\na. Let hasNameProperty be HasOwnProperty(value, \"name\").\nb. ReturnIfAbrupt(hasNameProperty).\nc. If hasNameProperty is false, perform SetFunctionName(value,\nbindingId).\n", "includes": ["propertyHelper.js"], "features": ["class"]}, {"path": "./test262-main/test/language/statements/variable/fn-name-cover.js", "version": 6, "esid": " 13.3.2.4", "description": " >Assignment of function `name` attribute (CoverParenthesizedExpression)\n", "info": " |VariableDeclaration : BindingIdentifier Initializer\n\n[...]\n7. If IsAnonymousFunctionDefinition(Initializer) is true, then\na. Let hasNameProperty be HasOwnProperty(value, \"name\").\nb. ReturnIfAbrupt(hasNameProperty).\nc. If hasNameProperty is false, perform SetFunctionName(value,\nbindingId).\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/language/statements/variable/fn-name-fn.js", "version": 6, "esid": " 13.3.2.4", "description": " Assignment of function `name` attribute (FunctionExpression)", "info": " |VariableDeclaration : BindingIdentifier Initializer\n\n[...]\n7. If IsAnonymousFunctionDefinition(Initializer) is true, then\na. Let hasNameProperty be HasOwnProperty(value, \"name\").\nb. ReturnIfAbrupt(hasNameProperty).\nc. If hasNameProperty is false, perform SetFunctionName(value,\nbindingId).\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/language/statements/variable/fn-name-gen.js", "version": 6, "esid": " 13.3.2.4", "description": " Assignment of function `name` attribute (GeneratorExpression)", "info": " |VariableDeclaration : BindingIdentifier Initializer\n\n[...]\n7. If IsAnonymousFunctionDefinition(Initializer) is true, then\na. Let hasNameProperty be HasOwnProperty(value, \"name\").\nb. ReturnIfAbrupt(hasNameProperty).\nc. If hasNameProperty is false, perform SetFunctionName(value,\nbindingId).\n", "includes": ["propertyHelper.js"], "features": ["generators"]}, {"path": "./test262-main/test/language/statements/with/unscopables-inc-dec.js", "esid": " sec-object-environment-records-hasbinding-n", "description": " >@@unscopables should be looked up exactly once for inc/dec.\n", "info": " |UpdateExpression : LeftHandSideExpression ++\n1. Let lhs be the result of evaluating LeftHandSideExpression.\n\nGetIdentifierReference ( lex, name, strict )\n[...]\n3. Let exists be ? envRec.HasBinding(name).\n\nHasBinding ( N )\n[...]\n6. Let unscopables be ? Get(bindings, @@unscopables).\n", "flags": ["noStrict"], "features": ["Symbol.unscopables"]}]