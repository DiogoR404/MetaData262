[{"path": "./test262-main/test/built-ins/Atomics/add/validate-arraytype-before-index-coercion.js", "esid": " sec-atomics.add", "description": " >TypedArray type is validated before `index` argument is coerced.\n", "info": " |24.4.2 Atomics.add ( typedArray, index, value )\n1. Return ? AtomicReadModifyWrite(typedArray, index, value, add).\n\n24.4.1.11 AtomicReadModifyWrite ( typedArray, index, value, op )\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray).\n...\n\n24.4.1.1 ValidateSharedIntegerTypedArray ( typedArray [ , onlyInt32 ] )\n...\n4. Let typeName be typedArray.[[TypedArrayName]].\n5. If onlyInt32 is true, then\na. If typeName is not \"Int32Array\", throw a TypeError exception.\n6. Else,\na. If typeName is not \"Int8Array\", \"Uint8Array\", \"Int16Array\", \"Uint16Array\", \"Int32Array\",\nor \"Uint32Array\", throw a TypeError exception.\n...\n", "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/and/validate-arraytype-before-index-coercion.js", "esid": " sec-atomics.add", "description": " >TypedArray type is validated before `index` argument is coerced.\n", "info": " |24.4.3 Atomics.and ( typedArray, index, value )\n1. Return ? AtomicReadModifyWrite(typedArray, index, value, and).\n\n24.4.1.11 AtomicReadModifyWrite ( typedArray, index, value, op )\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray).\n...\n\n24.4.1.1 ValidateSharedIntegerTypedArray ( typedArray [ , onlyInt32 ] )\n...\n4. Let typeName be typedArray.[[TypedArrayName]].\n5. If onlyInt32 is true, then\na. If typeName is not \"Int32Array\", throw a TypeError exception.\n6. Else,\na. If typeName is not \"Int8Array\", \"Uint8Array\", \"Int16Array\", \"Uint16Array\", \"Int32Array\",\nor \"Uint32Array\", throw a TypeError exception.\n...\n", "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/compareExchange/validate-arraytype-before-index-coercion.js", "esid": " sec-atomics.compareExchange", "description": " >TypedArray type is validated before `index` argument is coerced.\n", "info": " |24.4.4 Atomics.compareExchange ( typedArray, index, expectedValue, replacementValue )\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray).\n...\n\n24.4.1.1 ValidateSharedIntegerTypedArray ( typedArray [ , onlyInt32 ] )\n...\n4. Let typeName be typedArray.[[TypedArrayName]].\n5. If onlyInt32 is true, then\na. If typeName is not \"Int32Array\", throw a TypeError exception.\n6. Else,\na. If typeName is not \"Int8Array\", \"Uint8Array\", \"Int16Array\", \"Uint16Array\", \"Int32Array\",\nor \"Uint32Array\", throw a TypeError exception.\n...\n", "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/exchange/validate-arraytype-before-index-coercion.js", "esid": " sec-atomics.exchange", "description": " >TypedArray type is validated before `index` argument is coerced.\n", "info": " |24.4.5 Atomics.exchange ( typedArray, index, value )\n1. Return ? AtomicReadModifyWrite(typedArray, index, value, second).\n\n24.4.1.11 AtomicReadModifyWrite ( typedArray, index, value, op )\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray).\n...\n\n24.4.1.1 ValidateSharedIntegerTypedArray ( typedArray [ , onlyInt32 ] )\n...\n4. Let typeName be typedArray.[[TypedArrayName]].\n5. If onlyInt32 is true, then\na. If typeName is not \"Int32Array\", throw a TypeError exception.\n6. Else,\na. If typeName is not \"Int8Array\", \"Uint8Array\", \"Int16Array\", \"Uint16Array\", \"Int32Array\",\nor \"Uint32Array\", throw a TypeError exception.\n...\n", "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/load/validate-arraytype-before-index-coercion.js", "esid": " sec-atomics.store", "description": " >TypedArray type is validated before `index` argument is coerced.\n", "info": " |24.4.7 Atomics.load ( typedArray, index )\n1. Return ? AtomicLoad(typedArray, index).\n\n24.4.1.12 AtomicLoad ( typedArray, index )\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray).\n...\n\n24.4.1.1 ValidateSharedIntegerTypedArray ( typedArray [ , onlyInt32 ] )\n...\n4. Let typeName be typedArray.[[TypedArrayName]].\n5. If onlyInt32 is true, then\na. If typeName is not \"Int32Array\", throw a TypeError exception.\n6. Else,\na. If typeName is not \"Int8Array\", \"Uint8Array\", \"Int16Array\", \"Uint16Array\", \"Int32Array\",\nor \"Uint32Array\", throw a TypeError exception.\n...\n", "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/or/validate-arraytype-before-index-coercion.js", "esid": " sec-atomics.or", "description": " >TypedArray type is validated before `index` argument is coerced.\n", "info": " |24.4.8 Atomics.or ( typedArray, index, value )\n1. Return ? AtomicReadModifyWrite(typedArray, index, value, or).\n\n24.4.1.11 AtomicReadModifyWrite ( typedArray, index, value, op )\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray).\n...\n\n24.4.1.1 ValidateSharedIntegerTypedArray ( typedArray [ , onlyInt32 ] )\n...\n4. Let typeName be typedArray.[[TypedArrayName]].\n5. If onlyInt32 is true, then\na. If typeName is not \"Int32Array\", throw a TypeError exception.\n6. Else,\na. If typeName is not \"Int8Array\", \"Uint8Array\", \"Int16Array\", \"Uint16Array\", \"Int32Array\",\nor \"Uint32Array\", throw a TypeError exception.\n...\n", "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/store/expected-return-value-negative-zero.js", "esid": " sec-atomics.store", "description": " >Atomics.store calls ToInteger, which normalizes -0 to +0\n", "features": ["Atomics", "SharedArrayBuffer", "TypedArray"]}, {"path": "./test262-main/test/built-ins/Atomics/store/validate-arraytype-before-index-coercion.js", "esid": " sec-atomics.store", "description": " >TypedArray type is validated before `index` argument is coerced.\n", "info": " |24.4.9 Atomics.store ( typedArray, index, value )\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray).\n...\n\n24.4.1.1 ValidateSharedIntegerTypedArray ( typedArray [ , onlyInt32 ] )\n...\n4. Let typeName be typedArray.[[TypedArrayName]].\n5. If onlyInt32 is true, then\na. If typeName is not \"Int32Array\", throw a TypeError exception.\n6. Else,\na. If typeName is not \"Int8Array\", \"Uint8Array\", \"Int16Array\", \"Uint16Array\", \"Int32Array\",\nor \"Uint32Array\", throw a TypeError exception.\n...\n", "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/sub/validate-arraytype-before-index-coercion.js", "esid": " sec-atomics.sub", "description": " >TypedArray type is validated before `index` argument is coerced.\n", "info": " |24.4.10 Atomics.sub ( typedArray, index, value )\n1. Return ? AtomicReadModifyWrite(typedArray, index, value, sub).\n\n24.4.1.11 AtomicReadModifyWrite ( typedArray, index, value, op )\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray).\n...\n\n24.4.1.1 ValidateSharedIntegerTypedArray ( typedArray [ , onlyInt32 ] )\n...\n4. Let typeName be typedArray.[[TypedArrayName]].\n5. If onlyInt32 is true, then\na. If typeName is not \"Int32Array\", throw a TypeError exception.\n6. Else,\na. If typeName is not \"Int8Array\", \"Uint8Array\", \"Int16Array\", \"Uint16Array\", \"Int32Array\",\nor \"Uint32Array\", throw a TypeError exception.\n...\n", "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Atomics/xor/validate-arraytype-before-index-coercion.js", "esid": " sec-atomics.xor", "description": " >TypedArray type is validated before `index` argument is coerced.\n", "info": " |24.4.13 Atomics.xor ( typedArray, index, value )\n1. Return ? AtomicReadModifyWrite(typedArray, index, value, xor).\n\n24.4.1.11 AtomicReadModifyWrite ( typedArray, index, value, op )\n1. Let buffer be ? ValidateSharedIntegerTypedArray(typedArray).\n...\n\n24.4.1.1 ValidateSharedIntegerTypedArray ( typedArray [ , onlyInt32 ] )\n...\n4. Let typeName be typedArray.[[TypedArrayName]].\n5. If onlyInt32 is true, then\na. If typeName is not \"Int32Array\", throw a TypeError exception.\n6. Else,\na. If typeName is not \"Int8Array\", \"Uint8Array\", \"Int16Array\", \"Uint16Array\", \"Int32Array\",\nor \"Uint32Array\", throw a TypeError exception.\n...\n", "features": ["Atomics"]}, {"path": "./test262-main/test/built-ins/Object/prototype/toString/symbol-tag-non-str-builtin.js", "esid": " sec-object.prototype.tostring", "description": " >Non-string values of `Symbol.toStringTag` property are ignored.\n", "info": " |Object.prototype.toString ( )\n\n[...]\n15. Let tag be ? Get(O, @@toStringTag).\n16. If Type(tag) is not String, set tag to builtinTag.\n17. Return the string-concatenation of \"[object \", tag, and \"]\".\n", "features": ["Symbol.toStringTag", "Symbol.iterator", "generators", "WeakMap"]}, {"path": "./test262-main/test/built-ins/Promise/all/invoke-resolve-get-once-no-calls.js", "description": " >Gets constructor's `resolve` method once from zero to many invocations.\n", "esid": " sec-promise.all", "info": " |Runtime Semantics: PerformPromiseAll\n\n1. Let promiseResolve be ? Get(constructor, `\"resolve\"`).\n1. If IsCallable(promiseResolve) is false, throw a TypeError exception.\n...\n1. Repeat,\n...\n1. Let nextPromise be ? Call(promiseResolve, constructor, &laquo; nextValue &raquo;).\n"}, {"path": "./test262-main/test/built-ins/Promise/allSettled/capability-executor-called-twice.js", "esid": " sec-promise.allsettled", "description": " >Throws a TypeError if capabilities executor already called with non-undefined values.\n", "info": " |Promise.allSettled ( iterable )\n\n...\n3. Let promiseCapability be ? NewPromiseCapability(C).\n...\n\nGetCapabilitiesExecutor Functions\n\n...\n4. If promiseCapability.[[Resolve]] is not undefined, throw a TypeError exception.\n5. If promiseCapability.[[Reject]] is not undefined, throw a TypeError exception.\n6. Set promiseCapability.[[Resolve]] to resolve.\n7. Set promiseCapability.[[Reject]] to reject.\n...\n", "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/capability-executor-not-callable.js", "esid": " sec-promise.allsettled", "description": " >Throws a TypeError if either resolve or reject capability is not callable.\n", "info": " |Promise.allSettled ( iterable )\n\n...\n3. Let promiseCapability be ? NewPromiseCapability(C).\n...\n\nNewPromiseCapability ( C )\n\n...\n5. Let executor be CreateBuiltinFunction(steps, \u00ab [[Capability]] \u00bb).\n6. Set executor.[[Capability]] to promiseCapability.\n7. Let promise be ? Construct(C, \u00ab executor \u00bb).\n8. If IsCallable(promiseCapability.[[Resolve]]) is false, throw a TypeError exception.\n9. If IsCallable(promiseCapability.[[Reject]]) is false, throw a TypeError exception.\n...\n", "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/ctx-ctor-throws.js", "description": " >Promise.allSettled invoked on a constructor value that throws an error\n", "esid": " sec-promise.allsettled", "info": " |3. Let promiseCapability be ? NewPromiseCapability(C).\n\nNewPromiseCapability\n\n...\n7. Let promise be ? Construct(C, \u00ab executor \u00bb).\n", "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/ctx-ctor.js", "description": " >Promise.allSettled invoked on a constructor value\n", "esid": " sec-promise.allsettled", "info": " |3. Let promiseCapability be ? NewPromiseCapability(C).\n...\n6. Let result be PerformPromiseAllSettled(iteratorRecord, C, promiseCapability).\n...\n8. Return Completion(result).\n", "features": ["Promise.allSettled", "class"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/invoke-resolve-get-once-multiple-calls.js", "description": " >Gets constructor's `resolve` method once from zero to many invocations.\n", "esid": " sec-promise.allsettled", "info": " |6. Let result be PerformPromiseAllSettled(iteratorRecord, C, promiseCapability).\n\nRuntime Semantics: PerformPromiseAllSettled\n\n6. Let promiseResolve be ? Get(constructor, `\"resolve\"`).\n7. 1. If IsCallable(promiseResolve) is false, throw a TypeError exception.\n8. Repeat\n...\ni. Let nextPromise be ? Call(promiseResolve, constructor, \u00ab nextValue \u00bb).\n", "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/invoke-resolve-get-once-no-calls.js", "description": " >Gets constructor's `resolve` method once from zero to many invocations.\n", "esid": " sec-promise.allsettled", "info": " |6. Let result be PerformPromiseAllSettled(iteratorRecord, C, promiseCapability).\n\nRuntime Semantics: PerformPromiseAllSettled\n\n6. Let promiseResolve be ? Get(constructor, `\"resolve\"`).\n7. 1. If IsCallable(promiseResolve) is false, throw a TypeError exception.\n8. Repeat\n...\ni. Let nextPromise be ? Call(promiseResolve, constructor, \u00ab nextValue \u00bb).\n", "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/invoke-resolve-return.js", "description": " Use of the value returned by the constructor's `resolve` method.", "esid": " sec-promise.allsettled", "info": " |6. Let result be PerformPromiseAllSettled(iteratorRecord, C, promiseCapability).\n\nRuntime Semantics: PerformPromiseAllSettled\n\n6. Repeat\n...\ni. Let nextPromise be ? Invoke(constructor, \"resolve\", \u00ab nextValue \u00bb).\n...\nz. Perform ? Invoke(nextPromise, \"then\", \u00ab resolveElement, rejectElement \u00bb).\n", "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/invoke-resolve.js", "description": " >Invocation of the constructor's `resolve` method\n", "esid": " sec-promise.allsettled", "info": " |6. Let result be PerformPromiseAllSettled(iteratorRecord, C, promiseCapability).\n\nRuntime Semantics: PerformPromiseAllSettled\n\n6. Repeat\n...\ni. Let nextPromise be ? Invoke(constructor, \"resolve\", \u00ab nextValue \u00bb).\n...\nz. Perform ? Invoke(nextPromise, \"then\", \u00ab resolveElement, rejectElement \u00bb).\n", "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/invoke-then.js", "description": " >Invocation of the instance's `then` method\n", "esid": " sec-promise.allsettled", "info": " |6. Let result be PerformPromiseAllSettled(iteratorRecord, C, promiseCapability).\n7. If result is an abrupt completion, then\na. If iteratorRecord.[[Done]] is false, set result to IteratorClose(iteratorRecord, result).\nb. IfAbruptRejectPromise(result, promiseCapability).\n\nRuntime Semantics: PerformPromiseAllSettled\n\nz. Perform ? Invoke(nextPromise, \"then\", \u00ab resolveElement, rejectElement \u00bb).\n", "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/is-function.js", "esid": " sec-promise.allsettled", "description": " Promise.allSettled is callable", "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/length.js", "esid": " sec-promise.allsettled", "description": " Promise.allSettled `length` property", "info": " |ES Section 17:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this value\nis equal to the largest number of named arguments shown in the subclause\nheadings for the function description, including optional parameters.\n\n[...]\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/name.js", "esid": " sec-promise.allsettled", "description": " Promise.allSettled `name` property", "info": " |ES Section 17:\n\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value is a\nString. Unless otherwise specified, this value is the name that is given to\nthe function in this specification.\n\n[...]\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/prop-desc.js", "esid": " sec-promise.allsettled", "description": " Promise.allSettled property descriptor", "info": " |ES Section 17\n\nEvery other data property described in clauses 18 through 26 and in Annex\nB.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false,\n[[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js"], "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/reject-element-function-extensible.js", "esid": " sec-promise.allsettled-reject-element-functions", "description": " The [[Extensible]] slot of Promise.allSettled Reject Element functions", "info": " |17 ECMAScript Standard Built-in Objects:\nUnless specified otherwise, the [[Extensible]] internal slot\nof a built-in object initially has the value true.\n", "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/reject-element-function-length.js", "esid": " sec-promise.allsettled-reject-element-functions", "description": " The `length` property of Promise.allSettled Reject Element functions", "info": " |The length property of a Promise.allSettled Reject Element function is 1.\n\n17 ECMAScript Standard Built-in Objects:\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/reject-element-function-multiple-calls.js", "esid": " sec-performpromiseallsettled", "description": " >Cannot tamper with remainingElementsCount when Promise.allSettled reject element function is called multiple times.\n", "info": " |Runtime Semantics: PerformPromiseAllSettled ( iteratorRecord, constructor, resultCapability, )\n\nIf alreadyCalled.[[Value]] is true, return undefined.\n\n", "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/reject-element-function-name.js", "esid": " sec-promise.allsettled-reject-element-functions", "description": " The `name` property of Promise.allSettled Reject Element functions", "info": " |A promise resolve function is an anonymous built-in function.\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in function object, including constructors, has a `name`\nproperty whose value is a String. Functions that are identified as\nanonymous functions use the empty string as the value of the `name`\nproperty.\nUnless otherwise specified, the `name` property of a built-in function\nobject has the attributes { [[Writable]]: *false*, [[Enumerable]]: *false*,\n[[Configurable]]: *true* }.\n", "includes": ["propertyHelper.js"], "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/reject-element-function-nonconstructor.js", "esid": " sec-promise.allsettled-reject-element-functions", "description": " Promise.allSettled Reject Element functions are not constructors", "info": " |17 ECMAScript Standard Built-in Objects:\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified\nin the description of a particular function.\n", "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/reject-element-function-property-order.js", "esid": " sec-createbuiltinfunction", "description": " Promise.allSettled reject element function property order", "info": " |Set order: \"length\", \"name\"\n", "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/reject-element-function-prototype.js", "esid": " sec-promise.allsettled-reject-element-functions", "description": " The [[Prototype]] of Promise.allSettled Reject Element functions", "info": " |17 ECMAScript Standard Built-in Objects:\nUnless otherwise specified every built-in function and every built-in\nconstructor has the Function prototype object, which is the initial\nvalue of the expression Function.prototype (19.2.3), as the value of\nits [[Prototype]] internal slot.\n", "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/resolve-element-function-extensible.js", "esid": " sec-promise.allsettled-resolve-element-functions", "description": " The [[Extensible]] slot of Promise.allSettled Resolve Element functions", "info": " |17 ECMAScript Standard Built-in Objects:\nUnless specified otherwise, the [[Extensible]] internal slot\nof a built-in object initially has the value true.\n", "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/resolve-element-function-length.js", "esid": " sec-promise.allsettled-resolve-element-functions", "description": " The `length` property of Promise.allSettled Resolve Element functions", "info": " |The length property of a Promise.allSettled resolve element function is 1.\n\n17 ECMAScript Standard Built-in Objects:\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/resolve-element-function-name.js", "esid": " sec-promise.allsettled-resolve-element-functions", "description": " The `name` property of Promise.allSettled Resolve Element functions", "info": " |A promise resolve function is an anonymous built-in function.\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in function object, including constructors, has a `name`\nproperty whose value is a String. Functions that are identified as\nanonymous functions use the empty string as the value of the `name`\nproperty.\nUnless otherwise specified, the `name` property of a built-in function\nobject has the attributes { [[Writable]]: *false*, [[Enumerable]]: *false*,\n[[Configurable]]: *true* }.\n", "includes": ["propertyHelper.js"], "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/resolve-element-function-nonconstructor.js", "esid": " sec-promise.allsettled-resolve-element-functions", "description": " Promise.allSettled Resolve Element functions are not constructors", "info": " |17 ECMAScript Standard Built-in Objects:\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified\nin the description of a particular function.\n", "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/resolve-element-function-property-order.js", "esid": " sec-createbuiltinfunction", "description": " Promise.allSettled resolve element function property order", "info": " |Set order: \"length\", \"name\"\n", "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/resolve-element-function-prototype.js", "esid": " sec-promise.allsettled-resolve-element-functions", "description": " The [[Prototype]] of Promise.allSettled Resolve Element functions", "info": " |17 ECMAScript Standard Built-in Objects:\nUnless otherwise specified every built-in function and every built-in\nconstructor has the Function prototype object, which is the initial\nvalue of the expression Function.prototype (19.2.3), as the value of\nits [[Prototype]] internal slot.\n", "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/returns-promise.js", "esid": " sec-promise.allsettled", "description": " Promise.allSettled returns a Promise", "info": " |Promise.allSettled ( iterable )\n\n3. Let promiseCapability be ? NewPromiseCapability(C).\n4. Let iteratorRecord be GetIterator(iterable).\n5. IfAbruptRejectPromise(iteratorRecord, promiseCapability).\n6. Let result be PerformPromiseAllSettled(iteratorRecord, C, promiseCapability).\n7. If result is an abrupt completion, then\na. If iteratorRecord.[[Done]] is false, set result to IteratorClose(iteratorRecord, result).\nb. IfAbruptRejectPromise(result, promiseCapability).\n8. Return Completion(result).\n", "features": ["Promise.allSettled"]}, {"path": "./test262-main/test/built-ins/Promise/allSettled/species-get-error.js", "description": " >Promise.allSettled() does not retrieve `Symbol.species` property of the `this` value\n", "esid": " sec-promise.allsettled", "info": " |1. Let C be the this value.\n2. If Type(C) is not Object, throw a TypeError exception.\n3. Let promiseCapability be ? NewPromiseCapability(C).\n...\n", "features": ["Promise.allSettled", "Symbol.species"]}, {"path": "./test262-main/test/built-ins/Promise/race/invoke-resolve-get-once-multiple-calls.js", "description": " >Gets constructor's `resolve` method once from zero to many invocations.\n", "esid": " sec-promise.race", "info": " |Runtime Semantics: PerformPromiseRace\n\n1. Let promiseResolve be ? Get(constructor, `\"resolve\"`).\n1. If IsCallable(promiseResolve) is false, throw a TypeError exception.\n...\n1. Repeat,\n...\n1. Let nextPromise be ? Call(promiseResolve, constructor, &laquo; nextValue &raquo;).\n"}, {"path": "./test262-main/test/built-ins/Promise/race/invoke-resolve-get-once-no-calls.js", "description": " >Gets constructor's `resolve` method once from zero to many invocations.\n", "esid": " sec-promise.race", "info": " |Runtime Semantics: PerformPromiseRace\n\n1. Let promiseResolve be ? Get(constructor, `\"resolve\"`).\n1. If IsCallable(promiseResolve) is false, throw a TypeError exception.\n...\n1. Repeat,\n...\n1. Let nextPromise be ? Call(promiseResolve, constructor, &laquo; nextValue &raquo;).\n"}, {"path": "./test262-main/test/built-ins/Proxy/defineProperty/targetdesc-not-configurable-writable-desc-not-writable.js", "esid": " sec-proxy-object-internal-methods-and-internal-slots-defineownproperty-p-desc", "description": " >Throw a TypeError exception if trap result is true, targetDesc is not configurable\nand writable, while Desc is not writable.\n", "info": " |[[DefineOwnProperty]] (P, Desc)\n\n...\n16. Else targetDesc is not undefined,\n...\nc. If IsDataDescriptor(targetDesc) is true, targetDesc.[[Configurable]] is\nfalse, and targetDesc.[[Writable]] is true, then\ni. If Desc has a [[Writable]] field and Desc.[[Writable]] is\nfalse, throw a TypeError exception.\n...\n", "features": ["Proxy", "Reflect", "proxy-missing-checks"]}, {"path": "./test262-main/test/built-ins/Proxy/deleteProperty/targetdesc-is-configurable-target-is-not-extensible.js", "esid": " sec-proxy-object-internal-methods-and-internal-slots-delete-p", "description": " >Throw a TypeError exception if trap result is true, targetDesc is configurable,\nand target is not extensible.\n", "info": " |[[Delete]] (P)\n\n...\n13. Let extensibleTarget be ? IsExtensible(target).\n14. If extensibleTarget is false, throw a TypeError exception.\n...\n", "features": ["Proxy", "Reflect", "proxy-missing-checks"]}, {"path": "./test262-main/test/built-ins/Proxy/getOwnPropertyDescriptor/resultdesc-is-not-configurable-not-writable-targetdesc-is-writable.js", "esid": " sec-proxy-object-internal-methods-and-internal-slots-getownproperty-p", "description": " >Throws a TypeError exception if resultDesc is both non-configurable and\nnon-writable, while targetDesc is writable.\n", "info": " |[[GetOwnProperty]] (P)\n\n...\n17. If resultDesc.[[Configurable]] is false, then\n...\nb. If resultDesc has a [[Writable]] field and resultDesc.[[Writable]] is\nfalse, then\ni. If targetDesc.[[Writable]] is true, throw a TypeError exception.\n...\n", "features": ["Proxy", "proxy-missing-checks"]}, {"path": "./test262-main/test/built-ins/RegExp/dotall/with-dotall-unicode.js", "description": " Test the characters included by . in dotAll and unicode mode", "info": " |21.2.2.8 Atom\nThe production Atom::. evaluates as follows:\n1. If DotAll is true, then\na. Let A be the set of all characters.\n2. Otherwise, let A be the set of all characters except LineTerminator.\n3. Call CharacterSetMatcher(A, false) and return its Matcher result.\n\n", "esid": " sec-atom", "features": ["regexp-dotall", "u180e"]}, {"path": "./test262-main/test/built-ins/RegExp/dotall/with-dotall.js", "description": " Test the characters included by . in dotAll and non-unicode mode", "info": " |21.2.2.8 Atom\nThe production Atom::. evaluates as follows:\n1. If DotAll is true, then\na. Let A be the set of all characters.\n2. Otherwise, let A be the set of all characters except LineTerminator.\n3. Call CharacterSetMatcher(A, false) and return its Matcher result.\n\n", "esid": " sec-atom", "features": ["regexp-dotall", "u180e"]}, {"path": "./test262-main/test/built-ins/RegExp/lookBehind/alternations.js", "esid": " sec-assertion", "description": " Alternations are tried left to right, and we do not backtrack into a lookbehind.", "info": " |The production Assertion :: (?<=Disjunction) evaluates as follows:\n1. Evaluate Disjunction with -1 as its direction argument to obtain a Matcher m.\n2. Return an internal Matcher closure that takes two arguments, a State x and a Continuation\nc, and performs the following steps:\na. Let d be a Continuation that always returns its State argument as a successful MatchResult.\nb. Call m(x, d) and let r be its result.\nc. If r is failure, return failure.\nd. Let y be r's State.\ne. Let cap be y's captures List.\nf. Let xe be x's endIndex.\ng. Let z be the State (xe, cap).\nh. Call c(z) and return its result.\n", "features": ["regexp-lookbehind"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/RegExp/lookBehind/back-references-to-captures.js", "esid": " sec-assertion", "description": " Back references to captures inside the lookbehind.", "info": " |The production Assertion :: (?<=Disjunction) evaluates as follows:\n1. Evaluate Disjunction with -1 as its direction argument to obtain a Matcher m.\n2. Return an internal Matcher closure that takes two arguments, a State x and a Continuation\nc, and performs the following steps:\na. Let d be a Continuation that always returns its State argument as a successful MatchResult.\nb. Call m(x, d) and let r be its result.\nc. If r is failure, return failure.\nd. Let y be r's State.\ne. Let cap be y's captures List.\nf. Let xe be x's endIndex.\ng. Let z be the State (xe, cap).\nh. Call c(z) and return its result.\n", "features": ["regexp-lookbehind"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/RegExp/lookBehind/back-references.js", "esid": " sec-assertion", "description": " Back references", "info": " |The production Assertion :: (?<=Disjunction) evaluates as follows:\n1. Evaluate Disjunction with -1 as its direction argument to obtain a Matcher m.\n2. Return an internal Matcher closure that takes two arguments, a State x and a Continuation\nc, and performs the following steps:\na. Let d be a Continuation that always returns its State argument as a successful MatchResult.\nb. Call m(x, d) and let r be its result.\nc. If r is failure, return failure.\nd. Let y be r's State.\ne. Let cap be y's captures List.\nf. Let xe be x's endIndex.\ng. Let z be the State (xe, cap).\nh. Call c(z) and return its result.\n", "features": ["regexp-lookbehind"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/RegExp/lookBehind/captures-negative.js", "esid": " sec-assertion", "description": " >Captures inside negative lookbehind. (They never capture.)\n", "info": " |The production Assertion :: (?<=Disjunction) evaluates as follows:\n1. Evaluate Disjunction with -1 as its direction argument to obtain a Matcher m.\n2. Return an internal Matcher closure that takes two arguments, a State x and a Continuation\nc, and performs the following steps:\na. Let d be a Continuation that always returns its State argument as a successful MatchResult.\nb. Call m(x, d) and let r be its result.\nc. If r is failure, return failure.\nd. Let y be r's State.\ne. Let cap be y's captures List.\nf. Let xe be x's endIndex.\ng. Let z be the State (xe, cap).\nh. Call c(z) and return its result.\n", "features": ["regexp-lookbehind"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/RegExp/lookBehind/captures.js", "esid": " sec-assertion", "description": " >Capturing matches\n", "info": " |The production Assertion :: (?<=Disjunction) evaluates as follows:\n1. Evaluate Disjunction with -1 as its direction argument to obtain a Matcher m.\n2. Return an internal Matcher closure that takes two arguments, a State x and a Continuation\nc, and performs the following steps:\na. Let d be a Continuation that always returns its State argument as a successful MatchResult.\nb. Call m(x, d) and let r be its result.\nc. If r is failure, return failure.\nd. Let y be r's State.\ne. Let cap be y's captures List.\nf. Let xe be x's endIndex.\ng. Let z be the State (xe, cap).\nh. Call c(z) and return its result.\n", "features": ["regexp-lookbehind"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/RegExp/lookBehind/do-not-backtrack.js", "esid": " sec-assertion", "description": " Do not backtrack into a lookbehind.", "info": " |The production Assertion :: (?<=Disjunction) evaluates as follows:\n1. Evaluate Disjunction with -1 as its direction argument to obtain a Matcher m.\n2. Return an internal Matcher closure that takes two arguments, a State x and a Continuation\nc, and performs the following steps:\na. Let d be a Continuation that always returns its State argument as a successful MatchResult.\nb. Call m(x, d) and let r be its result.\nc. If r is failure, return failure.\nd. Let y be r's State.\ne. Let cap be y's captures List.\nf. Let xe be x's endIndex.\ng. Let z be the State (xe, cap).\nh. Call c(z) and return its result.\n", "features": ["regexp-lookbehind"]}, {"path": "./test262-main/test/built-ins/RegExp/lookBehind/greedy-loop.js", "esid": " sec-assertion", "description": " Greedy loop", "info": " |The production Assertion :: (?<=Disjunction) evaluates as follows:\n1. Evaluate Disjunction with -1 as its direction argument to obtain a Matcher m.\n2. Return an internal Matcher closure that takes two arguments, a State x and a Continuation\nc, and performs the following steps:\na. Let d be a Continuation that always returns its State argument as a successful MatchResult.\nb. Call m(x, d) and let r be its result.\nc. If r is failure, return failure.\nd. Let y be r's State.\ne. Let cap be y's captures List.\nf. Let xe be x's endIndex.\ng. Let z be the State (xe, cap).\nh. Call c(z) and return its result.\n", "features": ["regexp-lookbehind"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/RegExp/lookBehind/misc.js", "esid": " sec-assertion", "description": " Misc RegExp lookbehind tests", "info": " |The production Assertion :: (?<=Disjunction) evaluates as follows:\n1. Evaluate Disjunction with -1 as its direction argument to obtain a Matcher m.\n2. Return an internal Matcher closure that takes two arguments, a State x and a Continuation\nc, and performs the following steps:\na. Let d be a Continuation that always returns its State argument as a successful MatchResult.\nb. Call m(x, d) and let r be its result.\nc. If r is failure, return failure.\nd. Let y be r's State.\ne. Let cap be y's captures List.\nf. Let xe be x's endIndex.\ng. Let z be the State (xe, cap).\nh. Call c(z) and return its result.\n", "features": ["regexp-lookbehind"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/RegExp/lookBehind/mutual-recursive.js", "esid": " sec-assertion", "description": " Mutual recursive capture/back references", "info": " |The production Assertion :: (?<=Disjunction) evaluates as follows:\n1. Evaluate Disjunction with -1 as its direction argument to obtain a Matcher m.\n2. Return an internal Matcher closure that takes two arguments, a State x and a Continuation\nc, and performs the following steps:\na. Let d be a Continuation that always returns its State argument as a successful MatchResult.\nb. Call m(x, d) and let r be its result.\nc. If r is failure, return failure.\nd. Let y be r's State.\ne. Let cap be y's captures List.\nf. Let xe be x's endIndex.\ng. Let z be the State (xe, cap).\nh. Call c(z) and return its result.\n", "features": ["regexp-lookbehind"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/RegExp/lookBehind/negative.js", "esid": " sec-assertion", "description": " RegExp negative lookbehind", "info": " |The production Assertion :: (?<!Disjunction) evaluates as follows:\n1. Evaluate Disjunction with -1 as its direction argument to obtain a Matcher m.\n2. Return an internal Matcher closure that takes two arguments, a State x and a\nContinuation c, and performs the following steps:\na. Let d be a Continuation that always returns its State argument as a successful\nMatchResult.\nb. Call m(x, d) and let r be its result.\nc. If r is not failure, return failure.\nd. Call c(x) and return its result.\n", "features": ["regexp-lookbehind"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/RegExp/lookBehind/nested-lookaround.js", "esid": " sec-assertion", "description": " Nested lookaround", "info": " |The production Assertion :: (?<=Disjunction) evaluates as follows:\n1. Evaluate Disjunction with -1 as its direction argument to obtain a Matcher m.\n2. Return an internal Matcher closure that takes two arguments, a State x and a Continuation\nc, and performs the following steps:\na. Let d be a Continuation that always returns its State argument as a successful MatchResult.\nb. Call m(x, d) and let r be its result.\nc. If r is failure, return failure.\nd. Let y be r's State.\ne. Let cap be y's captures List.\nf. Let xe be x's endIndex.\ng. Let z be the State (xe, cap).\nh. Call c(z) and return its result.\n", "features": ["regexp-lookbehind"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/RegExp/lookBehind/simple-fixed-length.js", "esid": " sec-assertion", "description": " Simple fixed-length matches", "info": " |The production Assertion :: (?<=Disjunction) evaluates as follows:\n1. Evaluate Disjunction with -1 as its direction argument to obtain a Matcher m.\n2. Return an internal Matcher closure that takes two arguments, a State x and a Continuation\nc, and performs the following steps:\na. Let d be a Continuation that always returns its State argument as a successful MatchResult.\nb. Call m(x, d) and let r be its result.\nc. If r is failure, return failure.\nd. Let y be r's State.\ne. Let cap be y's captures List.\nf. Let xe be x's endIndex.\ng. Let z be the State (xe, cap).\nh. Call c(z) and return its result.\n", "features": ["regexp-lookbehind"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/RegExp/lookBehind/sliced-strings.js", "esid": " sec-assertion", "description": " Sliced strings", "info": " |Rationale from https://github.com/tc39/test262/pull/999#discussion_r113807747\n\nSince this test originates from V8, this targets V8's sliced strings, which are used for\nsubstrings above a length of 13 characters. I wrote this test for exactly the reason\n@littledan mentioned. That's why the variable name is called oob_subject. The underlying string\nbacking store extends beyond the actual boundary of the sliced string.\n", "features": ["regexp-lookbehind"]}, {"path": "./test262-main/test/built-ins/RegExp/lookBehind/start-of-line.js", "esid": " sec-assertion", "description": " Start of line matches", "info": " |The production Assertion :: (?<=Disjunction) evaluates as follows:\n1. Evaluate Disjunction with -1 as its direction argument to obtain a Matcher m.\n2. Return an internal Matcher closure that takes two arguments, a State x and a Continuation\nc, and performs the following steps:\na. Let d be a Continuation that always returns its State argument as a successful MatchResult.\nb. Call m(x, d) and let r be its result.\nc. If r is failure, return failure.\nd. Let y be r's State.\ne. Let cap be y's captures List.\nf. Let xe be x's endIndex.\ng. Let z be the State (xe, cap).\nh. Call c(z) and return its result.\n", "features": ["regexp-lookbehind"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/RegExp/lookBehind/sticky.js", "esid": " sec-assertion", "description": " Sticky", "info": " |The production Assertion :: (?<=Disjunction) evaluates as follows:\n1. Evaluate Disjunction with -1 as its direction argument to obtain a Matcher m.\n2. Return an internal Matcher closure that takes two arguments, a State x and a Continuation\nc, and performs the following steps:\na. Let d be a Continuation that always returns its State argument as a successful MatchResult.\nb. Call m(x, d) and let r be its result.\nc. If r is failure, return failure.\nd. Let y be r's State.\ne. Let cap be y's captures List.\nf. Let xe be x's endIndex.\ng. Let z be the State (xe, cap).\nh. Call c(z) and return its result.\n", "features": ["regexp-lookbehind"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/RegExp/lookBehind/variable-length.js", "esid": " sec-assertion", "description": " Variable-length matches", "info": " |The production Assertion :: (?<=Disjunction) evaluates as follows:\n1. Evaluate Disjunction with -1 as its direction argument to obtain a Matcher m.\n2. Return an internal Matcher closure that takes two arguments, a State x and a Continuation\nc, and performs the following steps:\na. Let d be a Continuation that always returns its State argument as a successful MatchResult.\nb. Call m(x, d) and let r be its result.\nc. If r is failure, return failure.\nd. Let y be r's State.\ne. Let cap be y's captures List.\nf. Let xe be x's endIndex.\ng. Let z be the State (xe, cap).\nh. Call c(z) and return its result.\n", "features": ["regexp-lookbehind"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/RegExp/lookBehind/word-boundary.js", "esid": " sec-assertion", "description": " Word boundary", "info": " |The production Assertion :: (?<=Disjunction) evaluates as follows:\n1. Evaluate Disjunction with -1 as its direction argument to obtain a Matcher m.\n2. Return an internal Matcher closure that takes two arguments, a State x and a Continuation\nc, and performs the following steps:\na. Let d be a Continuation that always returns its State argument as a successful MatchResult.\nb. Call m(x, d) and let r be its result.\nc. If r is failure, return failure.\nd. Let y be r's State.\ne. Let cap be y's captures List.\nf. Let xe be x's endIndex.\ng. Let z be the State (xe, cap).\nh. Call c(z) and return its result.\n", "features": ["regexp-lookbehind"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/RegExp/named-groups/functional-replace-global.js", "description": " >Function argument to String.prototype.replace gets groups as the last argument\n", "esid": " sec-regexp.prototype-@@replace", "features": ["regexp-named-groups"], "info": " |RegExp.prototype [ @@replace ] ( string, replaceValue )\n14. Repeat, for each result in results,\nj. Let namedCaptures be ? Get(result, \"groups\").\nk. If functionalReplace is true, then\niv. If namedCaptures is not undefined,\n1. Append namedCaptures as the last element of replacerArgs.\n"}, {"path": "./test262-main/test/built-ins/RegExp/named-groups/functional-replace-non-global.js", "description": " >Function argument to String.prototype.replace gets groups as the last argument\n", "esid": " sec-regexp.prototype-@@replace", "features": ["regexp-named-groups"], "info": " |RegExp.prototype [ @@replace ] ( string, replaceValue )\n14. Repeat, for each result in results,\nj. Let namedCaptures be ? Get(result, \"groups\").\nk. If functionalReplace is true, then\niv. If namedCaptures is not undefined,\n1. Append namedCaptures as the last element of replacerArgs.\n"}, {"path": "./test262-main/test/built-ins/RegExp/named-groups/groups-object-subclass-sans.js", "description": " >Test the groups object on RegExp subclass results that do not have their own.\n", "esid": " sec-regexpbuiltinexec", "features": ["regexp-named-groups"], "info": " |Runtime Semantics: RegExpBuiltinExec ( R, S )\n24. If _R_ contains any |GroupName|, then\na. Let _groups_ be ObjectCreate(*null*).\n25. Else,\na. Let _groups_ be *undefined*.\n26. Perform ! CreateDataProperty(_A_, `\"groups\"`, _groups_).\n"}, {"path": "./test262-main/test/built-ins/RegExp/named-groups/groups-object-subclass.js", "description": " >Test the groups object on RegExp subclass results that have their own.\n", "esid": " sec-regexpbuiltinexec", "features": ["regexp-named-groups"], "info": " |Runtime Semantics: RegExpBuiltinExec ( R, S )\n24. If _R_ contains any |GroupName|, then\na. Let _groups_ be ObjectCreate(*null*).\n25. Else,\na. Let _groups_ be *undefined*.\n26. Perform ! CreateDataProperty(_A_, `\"groups\"`, _groups_).\n"}, {"path": "./test262-main/test/built-ins/RegExp/named-groups/groups-object-undefined.js", "description": " The groups object is created unconditionally.", "includes": ["propertyHelper.js"], "esid": " sec-regexpbuiltinexec", "features": ["regexp-named-groups"], "info": " |Runtime Semantics: RegExpBuiltinExec ( R, S )\n24. If _R_ contains any |GroupName|, then\na. Let _groups_ be ObjectCreate(*null*).\n25. Else,\na. Let _groups_ be *undefined*.\n26. Perform ! CreateDataProperty(_A_, `\"groups\"`, _groups_).\n"}, {"path": "./test262-main/test/built-ins/RegExp/named-groups/groups-object-unmatched.js", "description": " >Test the groups object with matched and unmatched named captures.\n", "esid": " sec-regexpbuiltinexec", "features": ["regexp-named-groups"], "info": " |Runtime Semantics: RegExpBuiltinExec ( R, S )\n24. If _R_ contains any |GroupName|, then\na. Let _groups_ be ObjectCreate(*null*).\n25. Else,\na. Let _groups_ be *undefined*.\n26. Perform ! CreateDataProperty(_A_, `\"groups\"`, _groups_).\n"}, {"path": "./test262-main/test/built-ins/RegExp/named-groups/groups-object.js", "description": " Properties of the groups object are created with CreateDataProperty", "includes": ["propertyHelper.js"], "esid": " sec-regexpbuiltinexec", "features": ["regexp-named-groups"], "info": " |Runtime Semantics: RegExpBuiltinExec ( R, S )\n24. If _R_ contains any |GroupName|, then\na. Let _groups_ be ObjectCreate(*null*).\n25. Else,\na. Let _groups_ be *undefined*.\n26. Perform ! CreateDataProperty(_A_, `\"groups\"`, _groups_).\n"}, {"path": "./test262-main/test/built-ins/RegExp/named-groups/groups-properties.js", "description": " Properties of the groups object are created with CreateDataProperty", "includes": ["compareArray.js", "propertyHelper.js"], "esid": " sec-regexpbuiltinexec", "features": ["regexp-named-groups"], "info": " |Runtime Semantics: RegExpBuiltinExec ( R, S )\n25. For each integer i such that i > 0 and i \u2264 n\nf. If the ith capture of R was defined with a GroupName,\ni. Let s be the StringValue of the corresponding RegExpIdentifierName.\nii. Perform ! CreateDataProperty(groups, s, capturedValue).\n"}, {"path": "./test262-main/test/built-ins/RegExp/named-groups/lookbehind.js", "description": " Named groups can be used in conjunction with lookbehind", "esid": " prod-GroupSpecifier", "features": ["regexp-named-groups", "regexp-lookbehind"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/RegExp/named-groups/non-unicode-match.js", "description": " Basic matching cases with non-Unicode groups", "esid": " prod-GroupSpecifier", "features": ["regexp-named-groups"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/RegExp/named-groups/non-unicode-property-names.js", "description": " Exotic named group names in non-Unicode RegExps", "esid": " prod-GroupSpecifier", "features": ["regexp-named-groups"]}, {"path": "./test262-main/test/built-ins/RegExp/named-groups/non-unicode-references.js", "description": " Named backreferences in non-Unicode RegExps", "esid": " prod-GroupSpecifier", "features": ["regexp-named-groups"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/RegExp/named-groups/string-replace-escaped.js", "description": " Do not replace $<> preceded with $", "esid": " sec-getsubstitution", "features": ["regexp-named-groups"], "info": " |Runtime Semantics: GetSubstitution( matched, str, position, captures, namedCaptures, replacement )\n\n12. These $ replacements are done left-to-right, and, once such a replacement is performed,\nthe new replacement text is not subject to further replacements.\n\nTable: Replacement Text Symbol Substitutions\n\nUnicode Characters: $$\nReplacement text: $\n"}, {"path": "./test262-main/test/built-ins/RegExp/named-groups/string-replace-get.js", "description": " Named substitutions are found by getting the property from the groups object", "esid": " sec-getsubstitution", "features": ["regexp-named-groups"], "info": " |Runtime Semantics: GetSubstitution( matched, str, position, captures, namedCaptures, replacement )\n\nTable: Replacement Text Symbol Substitutions\n\nUnicode Characters: $<\nReplacement text:\n2. Otherwise,\nc. Let capture be ? Get(namedCaptures, groupName).\nd. If capture is undefined, replace the text through > with the empty string.\ne. Otherwise, replace the text through this following > with ? ToString(capture).\n"}, {"path": "./test262-main/test/built-ins/RegExp/named-groups/string-replace-missing.js", "description": " If the group doesn't exist, replace with the empty string", "esid": " sec-getsubstitution", "features": ["regexp-named-groups"]}, {"path": "./test262-main/test/built-ins/RegExp/named-groups/string-replace-numbered.js", "description": " Named groups may be accessed in their replacement string by number", "esid": " sec-getsubstitution", "features": ["regexp-named-groups"], "info": " |Runtime Semantics: GetSubstitution( matched, str, position, captures, namedCaptures, replacement )\n\nTable: Replacement Text Symbol Substitutions\n\nUnicode Characters: $n\nReplacement text:\nThe nth element of captures, where n is a single digit in the range 1 to 9. If\nn\u2264m and the nth element of captures is undefined, use the empty String instead.\nIf n>m, the result is implementation-defined.\n"}, {"path": "./test262-main/test/built-ins/RegExp/named-groups/string-replace-unclosed.js", "description": " >A missing > following $< means that the $< is taken literally\nin a replacement string in the context of named capture substitution.\n", "esid": " sec-getsubstitution", "features": ["regexp-named-groups"]}, {"path": "./test262-main/test/built-ins/RegExp/named-groups/string-replace-undefined.js", "description": " If a named group was not reached, it is replaced by the empty string", "esid": " sec-getsubstitution", "features": ["regexp-named-groups"], "info": " |Runtime Semantics: GetSubstitution( matched, str, position, captures, namedCaptures, replacement )\n\nTable: Replacement Text Symbol Substitutions\n\nUnicode Characters: $<\nReplacement text:\n2. Otherwise,\nc. Let capture be ? Get(namedCaptures, groupName).\nd. If capture is undefined, replace the text through > with the empty string.\n"}, {"path": "./test262-main/test/built-ins/RegExp/named-groups/unicode-match.js", "description": " Basic matching cases with Unicode groups", "esid": " prod-GroupSpecifier", "features": ["regexp-named-groups"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/RegExp/named-groups/unicode-property-names-valid.js", "author": " Michael Saboff", "description": " Exotic named group names in Unicode RegExps", "esid": " prod-GroupSpecifier", "features": ["regexp-named-groups"]}, {"path": "./test262-main/test/built-ins/RegExp/named-groups/unicode-property-names.js", "description": " Exotic named group names in Unicode RegExps", "esid": " prod-GroupSpecifier", "features": ["regexp-named-groups"]}, {"path": "./test262-main/test/built-ins/RegExp/named-groups/unicode-references.js", "description": " Named backreferences in Unicode RegExps", "esid": " sec-atomescape", "info": " |The production AtomEscape :: [+N] k GroupName evaluates as follows:\n\n1. Search the enclosing RegExp for an instance of a GroupSpecifier for an\nRegExpIdentifierName which has a StringValue equal to the StringValue\nof the RegExpIdentifierName contained in GroupName.\n2. Assert: A unique such GroupSpecifier is found.\n3. Let parenIndex be the number of left capturing parentheses in the entire\nregular expression that occur to the left of the located GroupSpecifier.\nThis is the total number of times the Atom::(GroupSpecifierDisjunction)\nproduction is expanded prior to that production's Term plus the total\nnumber of Atom :: (GroupSpecifierDisjunction) productions enclosing this Term.\n4. Call BackreferenceMatcher(parenIndex) and return its Matcher result.\n", "features": ["regexp-named-groups"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/character-class.js", "author": " Mathias Bynens", "description": " >Unicode property escapes must be supported in character classes.\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/ASCII.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `ASCII`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/ASCII_Hex_Digit.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `ASCII_Hex_Digit`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Alphabetic.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Alphabetic`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Any.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Any`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Assigned.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Assigned`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Bidi_Control.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Bidi_Control`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Bidi_Mirrored.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Bidi_Mirrored`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Case_Ignorable.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Case_Ignorable`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Cased.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Cased`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Changes_When_Casefolded.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Changes_When_Casefolded`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Changes_When_Casemapped.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Changes_When_Casemapped`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Changes_When_Lowercased.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Changes_When_Lowercased`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Changes_When_NFKC_Casefolded.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Changes_When_NFKC_Casefolded`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Changes_When_Titlecased.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Changes_When_Titlecased`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Changes_When_Uppercased.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Changes_When_Uppercased`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Dash.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Dash`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Default_Ignorable_Code_Point.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Default_Ignorable_Code_Point`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Deprecated.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Deprecated`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Diacritic.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Diacritic`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Emoji.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Emoji`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Emoji_Component.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Emoji_Component`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Emoji_Modifier.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Emoji_Modifier`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Emoji_Modifier_Base.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Emoji_Modifier_Base`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Emoji_Presentation.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Emoji_Presentation`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Extended_Pictographic.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Extended_Pictographic`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Extender.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Extender`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/General_Category_-_Cased_Letter.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `General_Category=Cased_Letter`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/General_Category_-_Close_Punctuation.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `General_Category=Close_Punctuation`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/General_Category_-_Connector_Punctuation.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `General_Category=Connector_Punctuation`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/General_Category_-_Control.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `General_Category=Control`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/General_Category_-_Currency_Symbol.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `General_Category=Currency_Symbol`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/General_Category_-_Dash_Punctuation.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `General_Category=Dash_Punctuation`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/General_Category_-_Decimal_Number.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `General_Category=Decimal_Number`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/General_Category_-_Enclosing_Mark.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `General_Category=Enclosing_Mark`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/General_Category_-_Final_Punctuation.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `General_Category=Final_Punctuation`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/General_Category_-_Format.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `General_Category=Format`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/General_Category_-_Initial_Punctuation.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `General_Category=Initial_Punctuation`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/General_Category_-_Letter.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `General_Category=Letter`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/General_Category_-_Letter_Number.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `General_Category=Letter_Number`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/General_Category_-_Line_Separator.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `General_Category=Line_Separator`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/General_Category_-_Lowercase_Letter.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `General_Category=Lowercase_Letter`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/General_Category_-_Mark.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `General_Category=Mark`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/General_Category_-_Math_Symbol.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `General_Category=Math_Symbol`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/General_Category_-_Modifier_Letter.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `General_Category=Modifier_Letter`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/General_Category_-_Modifier_Symbol.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `General_Category=Modifier_Symbol`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/General_Category_-_Nonspacing_Mark.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `General_Category=Nonspacing_Mark`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/General_Category_-_Number.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `General_Category=Number`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/General_Category_-_Open_Punctuation.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `General_Category=Open_Punctuation`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/General_Category_-_Other.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `General_Category=Other`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/General_Category_-_Other_Letter.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `General_Category=Other_Letter`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/General_Category_-_Other_Number.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `General_Category=Other_Number`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/General_Category_-_Other_Punctuation.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `General_Category=Other_Punctuation`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/General_Category_-_Other_Symbol.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `General_Category=Other_Symbol`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/General_Category_-_Paragraph_Separator.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `General_Category=Paragraph_Separator`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/General_Category_-_Private_Use.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `General_Category=Private_Use`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/General_Category_-_Punctuation.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `General_Category=Punctuation`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/General_Category_-_Separator.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `General_Category=Separator`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/General_Category_-_Space_Separator.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `General_Category=Space_Separator`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/General_Category_-_Spacing_Mark.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `General_Category=Spacing_Mark`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/General_Category_-_Surrogate.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `General_Category=Surrogate`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/General_Category_-_Symbol.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `General_Category=Symbol`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/General_Category_-_Titlecase_Letter.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `General_Category=Titlecase_Letter`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/General_Category_-_Unassigned.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `General_Category=Unassigned`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/General_Category_-_Uppercase_Letter.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `General_Category=Uppercase_Letter`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Grapheme_Base.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Grapheme_Base`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Grapheme_Extend.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Grapheme_Extend`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Hex_Digit.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Hex_Digit`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/IDS_Binary_Operator.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `IDS_Binary_Operator`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/IDS_Trinary_Operator.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `IDS_Trinary_Operator`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/ID_Continue.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `ID_Continue`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/ID_Start.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `ID_Start`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Ideographic.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Ideographic`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Join_Control.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Join_Control`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Logical_Order_Exception.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Logical_Order_Exception`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Lowercase.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Lowercase`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Math.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Math`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Noncharacter_Code_Point.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Noncharacter_Code_Point`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Pattern_Syntax.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Pattern_Syntax`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Pattern_White_Space.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Pattern_White_Space`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Quotation_Mark.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Quotation_Mark`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Radical.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Radical`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Regional_Indicator.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Regional_Indicator`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Adlam.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Adlam`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Ahom.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Ahom`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Anatolian_Hieroglyphs.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Anatolian_Hieroglyphs`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Arabic.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Arabic`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Armenian.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Armenian`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Avestan.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Avestan`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Balinese.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Balinese`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Bamum.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Bamum`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Bassa_Vah.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Bassa_Vah`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Batak.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Batak`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Bengali.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Bengali`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Bhaiksuki.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Bhaiksuki`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Bopomofo.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Bopomofo`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Brahmi.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Brahmi`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Braille.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Braille`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Buginese.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Buginese`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Buhid.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Buhid`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Canadian_Aboriginal.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Canadian_Aboriginal`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Carian.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Carian`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Caucasian_Albanian.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Caucasian_Albanian`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Chakma.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Chakma`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Cham.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Cham`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Cherokee.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Cherokee`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Chorasmian.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Chorasmian`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Common.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Common`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Coptic.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Coptic`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Cuneiform.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Cuneiform`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Cypriot.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Cypriot`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Cyrillic.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Cyrillic`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Deseret.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Deseret`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Devanagari.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Devanagari`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Dives_Akuru.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Dives_Akuru`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Dogra.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Dogra`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Duployan.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Duployan`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Egyptian_Hieroglyphs.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Egyptian_Hieroglyphs`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Elbasan.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Elbasan`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Elymaic.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Elymaic`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Ethiopic.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Ethiopic`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Georgian.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Georgian`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Glagolitic.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Glagolitic`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Gothic.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Gothic`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Grantha.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Grantha`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Greek.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Greek`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Gujarati.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Gujarati`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Gunjala_Gondi.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Gunjala_Gondi`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Gurmukhi.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Gurmukhi`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Han.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Han`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Hangul.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Hangul`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Hanifi_Rohingya.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Hanifi_Rohingya`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Hanunoo.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Hanunoo`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Hatran.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Hatran`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Hebrew.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Hebrew`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Hiragana.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Hiragana`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Imperial_Aramaic.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Imperial_Aramaic`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Inherited.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Inherited`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Inscriptional_Pahlavi.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Inscriptional_Pahlavi`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Inscriptional_Parthian.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Inscriptional_Parthian`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Javanese.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Javanese`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Kaithi.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Kaithi`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Kannada.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Kannada`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Katakana.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Katakana`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Kayah_Li.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Kayah_Li`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Kharoshthi.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Kharoshthi`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Khitan_Small_Script.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Khitan_Small_Script`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Khmer.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Khmer`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Khojki.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Khojki`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Khudawadi.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Khudawadi`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Lao.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Lao`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Latin.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Latin`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Lepcha.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Lepcha`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Limbu.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Limbu`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Linear_A.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Linear_A`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Linear_B.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Linear_B`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Lisu.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Lisu`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Lycian.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Lycian`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Lydian.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Lydian`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Mahajani.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Mahajani`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Makasar.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Makasar`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Malayalam.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Malayalam`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Mandaic.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Mandaic`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Manichaean.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Manichaean`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Marchen.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Marchen`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Masaram_Gondi.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Masaram_Gondi`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Medefaidrin.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Medefaidrin`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Meetei_Mayek.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Meetei_Mayek`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Mende_Kikakui.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Mende_Kikakui`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Meroitic_Cursive.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Meroitic_Cursive`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Meroitic_Hieroglyphs.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Meroitic_Hieroglyphs`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Miao.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Miao`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Modi.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Modi`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Mongolian.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Mongolian`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Mro.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Mro`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Multani.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Multani`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Myanmar.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Myanmar`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Nabataean.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Nabataean`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Nandinagari.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Nandinagari`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_New_Tai_Lue.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=New_Tai_Lue`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Newa.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Newa`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Nko.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Nko`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Nushu.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Nushu`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Nyiakeng_Puachue_Hmong.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Nyiakeng_Puachue_Hmong`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Ogham.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Ogham`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Ol_Chiki.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Ol_Chiki`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Old_Hungarian.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Old_Hungarian`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Old_Italic.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Old_Italic`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Old_North_Arabian.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Old_North_Arabian`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Old_Permic.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Old_Permic`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Old_Persian.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Old_Persian`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Old_Sogdian.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Old_Sogdian`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Old_South_Arabian.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Old_South_Arabian`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Old_Turkic.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Old_Turkic`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Oriya.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Oriya`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Osage.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Osage`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Osmanya.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Osmanya`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Pahawh_Hmong.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Pahawh_Hmong`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Palmyrene.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Palmyrene`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Pau_Cin_Hau.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Pau_Cin_Hau`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Phags_Pa.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Phags_Pa`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Phoenician.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Phoenician`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Psalter_Pahlavi.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Psalter_Pahlavi`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Rejang.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Rejang`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Runic.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Runic`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Samaritan.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Samaritan`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Saurashtra.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Saurashtra`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Sharada.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Sharada`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Shavian.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Shavian`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Siddham.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Siddham`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_SignWriting.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=SignWriting`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Sinhala.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Sinhala`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Sogdian.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Sogdian`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Sora_Sompeng.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Sora_Sompeng`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Soyombo.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Soyombo`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Sundanese.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Sundanese`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Syloti_Nagri.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Syloti_Nagri`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Syriac.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Syriac`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Tagalog.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Tagalog`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Tagbanwa.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Tagbanwa`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Tai_Le.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Tai_Le`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Tai_Tham.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Tai_Tham`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Tai_Viet.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Tai_Viet`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Takri.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Takri`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Tamil.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Tamil`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Tangut.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Tangut`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Telugu.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Telugu`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Thaana.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Thaana`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Thai.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Thai`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Tibetan.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Tibetan`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Tifinagh.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Tifinagh`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Tirhuta.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Tirhuta`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Ugaritic.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Ugaritic`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Vai.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Vai`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Wancho.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Wancho`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Warang_Citi.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Warang_Citi`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Yezidi.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Yezidi`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Yi.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Yi`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_-_Zanabazar_Square.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script=Zanabazar_Square`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Adlam.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Adlam`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Ahom.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Ahom`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Anatolian_Hieroglyphs.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Anatolian_Hieroglyphs`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Arabic.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Arabic`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Armenian.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Armenian`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Avestan.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Avestan`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Balinese.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Balinese`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Bamum.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Bamum`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Bassa_Vah.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Bassa_Vah`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Batak.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Batak`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Bengali.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Bengali`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Bhaiksuki.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Bhaiksuki`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Bopomofo.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Bopomofo`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Brahmi.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Brahmi`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Braille.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Braille`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Buginese.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Buginese`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Buhid.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Buhid`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Canadian_Aboriginal.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Canadian_Aboriginal`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Carian.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Carian`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Caucasian_Albanian.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Caucasian_Albanian`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Chakma.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Chakma`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Cham.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Cham`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Cherokee.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Cherokee`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Chorasmian.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Chorasmian`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Common.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Common`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Coptic.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Coptic`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Cuneiform.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Cuneiform`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Cypriot.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Cypriot`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Cyrillic.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Cyrillic`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Deseret.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Deseret`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Devanagari.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Devanagari`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Dives_Akuru.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Dives_Akuru`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Dogra.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Dogra`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Duployan.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Duployan`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Egyptian_Hieroglyphs.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Egyptian_Hieroglyphs`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Elbasan.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Elbasan`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Elymaic.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Elymaic`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Ethiopic.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Ethiopic`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Georgian.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Georgian`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Glagolitic.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Glagolitic`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Gothic.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Gothic`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Grantha.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Grantha`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Greek.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Greek`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Gujarati.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Gujarati`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Gunjala_Gondi.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Gunjala_Gondi`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Gurmukhi.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Gurmukhi`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Han.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Han`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Hangul.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Hangul`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Hanifi_Rohingya.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Hanifi_Rohingya`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Hanunoo.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Hanunoo`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Hatran.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Hatran`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Hebrew.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Hebrew`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Hiragana.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Hiragana`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Imperial_Aramaic.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Imperial_Aramaic`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Inherited.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Inherited`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Inscriptional_Pahlavi.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Inscriptional_Pahlavi`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Inscriptional_Parthian.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Inscriptional_Parthian`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Javanese.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Javanese`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Kaithi.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Kaithi`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Kannada.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Kannada`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Katakana.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Katakana`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Kayah_Li.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Kayah_Li`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Kharoshthi.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Kharoshthi`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Khitan_Small_Script.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Khitan_Small_Script`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Khmer.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Khmer`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Khojki.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Khojki`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Khudawadi.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Khudawadi`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Lao.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Lao`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Latin.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Latin`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Lepcha.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Lepcha`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Limbu.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Limbu`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Linear_A.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Linear_A`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Linear_B.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Linear_B`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Lisu.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Lisu`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Lycian.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Lycian`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Lydian.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Lydian`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Mahajani.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Mahajani`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Makasar.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Makasar`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Malayalam.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Malayalam`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Mandaic.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Mandaic`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Manichaean.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Manichaean`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Marchen.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Marchen`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Masaram_Gondi.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Masaram_Gondi`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Medefaidrin.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Medefaidrin`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Meetei_Mayek.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Meetei_Mayek`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Mende_Kikakui.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Mende_Kikakui`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Meroitic_Cursive.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Meroitic_Cursive`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Meroitic_Hieroglyphs.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Meroitic_Hieroglyphs`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Miao.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Miao`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Modi.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Modi`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Mongolian.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Mongolian`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Mro.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Mro`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Multani.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Multani`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Myanmar.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Myanmar`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Nabataean.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Nabataean`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Nandinagari.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Nandinagari`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_New_Tai_Lue.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=New_Tai_Lue`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Newa.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Newa`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Nko.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Nko`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Nushu.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Nushu`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Nyiakeng_Puachue_Hmong.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Nyiakeng_Puachue_Hmong`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Ogham.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Ogham`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Ol_Chiki.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Ol_Chiki`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Old_Hungarian.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Old_Hungarian`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Old_Italic.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Old_Italic`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Old_North_Arabian.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Old_North_Arabian`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Old_Permic.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Old_Permic`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Old_Persian.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Old_Persian`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Old_Sogdian.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Old_Sogdian`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Old_South_Arabian.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Old_South_Arabian`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Old_Turkic.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Old_Turkic`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Oriya.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Oriya`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Osage.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Osage`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Osmanya.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Osmanya`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Pahawh_Hmong.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Pahawh_Hmong`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Palmyrene.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Palmyrene`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Pau_Cin_Hau.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Pau_Cin_Hau`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Phags_Pa.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Phags_Pa`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Phoenician.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Phoenician`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Psalter_Pahlavi.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Psalter_Pahlavi`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Rejang.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Rejang`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Runic.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Runic`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Samaritan.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Samaritan`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Saurashtra.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Saurashtra`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Sharada.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Sharada`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Shavian.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Shavian`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Siddham.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Siddham`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_SignWriting.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=SignWriting`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Sinhala.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Sinhala`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Sogdian.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Sogdian`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Sora_Sompeng.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Sora_Sompeng`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Soyombo.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Soyombo`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Sundanese.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Sundanese`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Syloti_Nagri.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Syloti_Nagri`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Syriac.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Syriac`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Tagalog.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Tagalog`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Tagbanwa.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Tagbanwa`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Tai_Le.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Tai_Le`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Tai_Tham.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Tai_Tham`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Tai_Viet.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Tai_Viet`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Takri.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Takri`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Tamil.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Tamil`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Tangut.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Tangut`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Telugu.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Telugu`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Thaana.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Thaana`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Thai.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Thai`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Tibetan.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Tibetan`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Tifinagh.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Tifinagh`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Tirhuta.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Tirhuta`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Ugaritic.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Ugaritic`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Vai.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Vai`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Wancho.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Wancho`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Warang_Citi.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Warang_Citi`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Yezidi.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Yezidi`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Yi.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Yi`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Script_Extensions_-_Zanabazar_Square.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Script_Extensions=Zanabazar_Square`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Sentence_Terminal.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Sentence_Terminal`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Soft_Dotted.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Soft_Dotted`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Terminal_Punctuation.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Terminal_Punctuation`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Unified_Ideograph.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Unified_Ideograph`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Uppercase.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Uppercase`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/Variation_Selector.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `Variation_Selector`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/White_Space.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `White_Space`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/XID_Continue.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `XID_Continue`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/property-escapes/generated/XID_Start.js", "author": " Mathias Bynens", "description": " >Unicode property escapes for `XID_Start`\n", "info": " |Generated by https://github.com/mathiasbynens/unicode-property-escapes-tests\nUnicode v13.0.0\n", "esid": " sec-static-semantics-unicodematchproperty-p", "features": ["regexp-unicode-property-escapes"], "includes": ["regExpUtils.js"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.replace/named-groups-fn.js", "esid": " sec-regexp.prototype-@@replace", "description": " >\"groups\" value is passed as last argument of replacer unless it is undefined.\n", "info": " |RegExp.prototype [ @@replace ] ( string, replaceValue )\n\n[...]\n14. For each result in results, do\n[...]\nj. Let namedCaptures be ? Get(result, \"groups\").\nk. If functionalReplace is true, then\n[...]\niv. If namedCaptures is not undefined, then\n1. Append namedCaptures as the last element of replacerArgs.\nv. Let replValue be ? Call(replaceValue, undefined, replacerArgs).\n", "features": ["Symbol.replace", "regexp-named-groups"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.replace/named-groups.js", "esid": " sec-getsubstitution", "description": " >RegExp.prototype[Symbol.replace] works with named capture references as expected.\n(string replacement)\n", "info": " |GetSubstitution ( matched, str, position, captures, namedCaptures, replacement )\n\nTable: Replacement Text Symbol Substitutions\n\nUnicode Characters: $<\nReplacement text:\n1. If namedCaptures is undefined, the replacement text is the literal string $<.\n2. Else,\na. Assert: Type(namedCaptures) is Object.\nb. Scan until the next > U+003E (GREATER-THAN SIGN).\nc. If none is found, the replacement text is the String \"$<\".\nd. Else,\ni. Let groupName be the enclosed substring.\nii. Let capture be ? Get(namedCaptures, groupName).\niii. If capture is undefined, replace the text through > with the empty String.\niv. Otherwise, replace the text through > with ? ToString(capture).\n", "features": ["Symbol.replace", "regexp-named-groups"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.replace/poisoned-stdlib.js", "esid": " sec-regexp.prototype-@@replace", "description": " >Both functional and pattern replacement performs as expected with poisoned stdlib.\n", "features": ["Symbol.iterator", "Symbol.replace", "regexp-named-groups"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.replace/result-coerce-groups-prop-err.js", "esid": " sec-regexp.prototype-@@replace", "description": " >Abrupt completion during coercion of value of \"groups\" object.\n", "info": " |RegExp.prototype [ @@replace ] ( string, replaceValue )\n\n[...]\n14. For each result in results, do\n[...]\nj. Let namedCaptures be ? Get(result, \"groups\").\nk. If functionalReplace is true, then\n[...]\nl. Else,\n[...]\nii. Let replacement be ? GetSubstitution(matched, S, position, captures, namedCaptures, replaceValue).\n\nRuntime Semantics: GetSubstitution ( matched, str, position, captures, namedCaptures, replacement )\n\n[...]\n11. Let result be the String value derived from replacement by copying code unit elements\nfrom replacement to result while performing replacements as specified in Table 54.\nThese $ replacements are done left-to-right, and, once such a replacement is performed,\nthe new replacement text is not subject to further replacements.\n12. Return result.\n\nTable 54: Replacement Text Symbol Substitutions\n\n$<\n\n1. If namedCaptures is undefined, the replacement text is the String \"$<\".\n2. Else,\na. Assert: Type(namedCaptures) is Object.\nb. Scan until the next > U+003E (GREATER-THAN SIGN).\nc. If none is found, the replacement text is the String \"$<\".\nd. Else,\ni. Let groupName be the enclosed substring.\nii. Let capture be ? Get(namedCaptures, groupName).\niii. If capture is undefined, replace the text through > with the empty String.\niv. Otherwise, replace the text through > with ? ToString(capture).\n", "features": ["Symbol.replace", "regexp-named-groups"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.replace/result-coerce-groups-prop.js", "esid": " sec-regexp.prototype-@@replace", "description": " >String coercion of \"groups\" object values returned by RegExpExec.\n", "info": " |RegExp.prototype [ @@replace ] ( string, replaceValue )\n\n[...]\n14. For each result in results, do\n[...]\nj. Let namedCaptures be ? Get(result, \"groups\").\nk. If functionalReplace is true, then\n[...]\nl. Else,\n[...]\nii. Let replacement be ? GetSubstitution(matched, S, position, captures, namedCaptures, replaceValue).\n\nRuntime Semantics: GetSubstitution ( matched, str, position, captures, namedCaptures, replacement )\n\n[...]\n11. Let result be the String value derived from replacement by copying code unit elements\nfrom replacement to result while performing replacements as specified in Table 54.\nThese $ replacements are done left-to-right, and, once such a replacement is performed,\nthe new replacement text is not subject to further replacements.\n12. Return result.\n\nTable 54: Replacement Text Symbol Substitutions\n\n$<\n\n1. If namedCaptures is undefined, the replacement text is the String \"$<\".\n2. Else,\na. Assert: Type(namedCaptures) is Object.\nb. Scan until the next > U+003E (GREATER-THAN SIGN).\nc. If none is found, the replacement text is the String \"$<\".\nd. Else,\ni. Let groupName be the enclosed substring.\nii. Let capture be ? Get(namedCaptures, groupName).\niii. If capture is undefined, replace the text through > with the empty String.\niv. Otherwise, replace the text through > with ? ToString(capture).\n", "features": ["Symbol.replace", "regexp-named-groups"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.replace/result-coerce-groups.js", "esid": " sec-regexp.prototype-@@replace", "description": " >String coercion of \"groups\" property of the value returned by RegExpExec.\n", "info": " |RegExp.prototype [ @@replace ] ( string, replaceValue )\n\n[...]\n14. For each result in results, do\n[...]\nj. Let namedCaptures be ? Get(result, \"groups\").\nk. If functionalReplace is true, then\n[...]\nl. Else,\ni. If namedCaptures is not undefined, then\n1. Set namedCaptures to ? ToObject(namedCaptures).\nii. Let replacement be ? GetSubstitution(matched, S, position, captures, namedCaptures, replaceValue).\n", "features": ["Symbol.replace", "regexp-named-groups"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.replace/result-get-groups-err.js", "esid": " sec-regexp.prototype-@@replace", "description": " >Abrupt completion during lookup of \"groups\"\nproperty of the value returned by RegExpExec.\n", "info": " |RegExp.prototype [ @@replace ] ( string, replaceValue )\n\n[...]\n14. For each result in results, do\n[...]\nj. Let namedCaptures be ? Get(result, \"groups\").\n", "features": ["Symbol.replace", "regexp-named-groups"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.replace/result-get-groups-prop-err.js", "esid": " sec-regexp.prototype-@@replace", "description": " >Abrupt completion during lookup of value of \"groups\" object.\n", "info": " |RegExp.prototype [ @@replace ] ( string, replaceValue )\n\n[...]\n14. For each result in results, do\n[...]\nj. Let namedCaptures be ? Get(result, \"groups\").\nk. If functionalReplace is true, then\n[...]\nl. Else,\n[...]\nii. Let replacement be ? GetSubstitution(matched, S, position, captures, namedCaptures, replaceValue).\n\nRuntime Semantics: GetSubstitution ( matched, str, position, captures, namedCaptures, replacement )\n\n[...]\n11. Let result be the String value derived from replacement by copying code unit elements\nfrom replacement to result while performing replacements as specified in Table 54.\nThese $ replacements are done left-to-right, and, once such a replacement is performed,\nthe new replacement text is not subject to further replacements.\n12. Return result.\n\nTable 54: Replacement Text Symbol Substitutions\n\n$<\n\n1. If namedCaptures is undefined, the replacement text is the String \"$<\".\n2. Else,\na. Assert: Type(namedCaptures) is Object.\nb. Scan until the next > U+003E (GREATER-THAN SIGN).\nc. If none is found, the replacement text is the String \"$<\".\nd. Else,\ni. Let groupName be the enclosed substring.\nii. Let capture be ? Get(namedCaptures, groupName).\n", "features": ["Symbol.replace", "regexp-named-groups"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/dotAll/length.js", "esid": " sec-get-regexp.prototype.dotall", "description": " >get RegExp.prototype.dotAll.length is 0.\n", "info": " |get RegExp.prototype.dotAll\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["regexp-dotall"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/dotAll/name.js", "esid": " sec-get-regexp.prototype.dotall", "description": " >RegExp.prototype.dotAll name\n", "info": " |17 ECMAScript Standard Built-in Objects\n\nFunctions that are specified as get or set accessor functions of built-in\nproperties have \"get \" or \"set \" prepended to the property name string.\n", "includes": ["propertyHelper.js"], "features": ["regexp-dotall"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/dotAll/prop-desc.js", "esid": " sec-get-regexp.prototype.dotall", "description": " >`pending` property descriptor\n", "info": " |RegExp.prototype.dotAll is an accessor property whose set accessor\nfunction is undefined.\n\n17 ECMAScript Standard Built-in Objects\n\nEvery accessor property described in clauses 18 through 26 and in Annex B.2 has the attributes\n{ [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified. If only a get\naccessor function is described, the set accessor function is the default value, undefined. If\nonly a set accessor is described the get accessor is the default value, undefined.\n", "includes": ["propertyHelper.js"], "features": ["regexp-dotall"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/dotAll/this-val-invalid-obj.js", "esid": " sec-get-regexp.prototype.dotall", "description": " Invoked on an object without an [[OriginalFlags]] internal slot", "info": " |get RegExp.prototype.dotAll\n\n1. Let R be the this value.\n2. If Type(R) is not Object, throw a TypeError exception.\n3. If R does not have an [[OriginalFlags]] internal slot, then\na. If SameValue(R, %RegExpPrototype%) is true, return undefined.\nb. Otherwise, throw a TypeError exception.\n", "features": ["regexp-dotall"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/dotAll/this-val-non-obj.js", "esid": " sec-get-regexp.prototype.dotall", "description": " >`dotAll` accessor invoked on a non-object value\n", "info": " |get RegExp.prototype.dotAll\n\n1. Let R be the this value.\n2. If Type(R) is not Object, throw a TypeError exception.\n", "features": ["Symbol", "regexp-dotall"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/dotAll/this-val-regexp-prototype.js", "esid": " sec-get-regexp.prototype.dotall", "description": " >Return value of `undefined` when the \"this\" value is the RegExp prototype\nobject\n", "info": " |1. Let R be the this value.\n2. If Type(R) is not Object, throw a TypeError exception.\n3. If R does not have an [[OriginalFlags]] internal slot, then\na. If SameValue(R, %RegExpPrototype%) is true, return undefined.\n", "features": ["regexp-dotall"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/dotAll/this-val-regexp.js", "esid": " sec-get-regexp.prototype.dotall", "description": " >`dotAll` accessor function invoked on a RegExp instance\n", "info": " |21.2.5.12 get RegExp.prototype.dotAll\n\n4. Let flags be the value of R\u2019s [[OriginalFlags]] internal slot.\n5. If flags contains the code unit \"s\", return true.\n6. Return false.\n", "features": ["regexp-dotall"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/flags/coercion-dotall.js", "esid": " sec-get-regexp.prototype.flags", "description": " Boolean coercion of the dotAll property", "info": " |get RegExp.prototype.flags\n\n...\n10. Let dotAll be ToBoolean(? Get(R, \"dotAll\")).\n...\n", "features": ["Symbol", "regexp-dotall"]}, {"path": "./test262-main/test/built-ins/String/prototype/replaceAll/getSubstitution-0x0024-0x0024.js", "esid": " sec-string.prototype.replaceall", "description": " >Replacement Text Symbol Substitutions ($$)\n", "info": " |String.prototype.replaceAll ( searchValue, replaceValue )\n\n10. Let position be ! StringIndexOf(string, searchString, 0).\n11. Repeat, while position is not -1\na. Append position to the end of matchPositions.\nb. Let position be ! StringIndexOf(string, searchString, position + advanceBy). \n...\n14. For each position in matchPositions, do\na. If functionalReplace is true, then\n...\nb. Else,\n...\nii. Let captures be a new empty List.\niii. Let replacement be GetSubstitution(searchString, string, position, captures, undefined, replaceValue).\n\nStringIndexOf ( string, searchValue, fromIndex )\n\n...\n4. Let len be the length of string.\n5. If searchValue is the empty string, and fromIndex <= len, return fromIndex.\n6. Let searchLen be the length of searchValue.\n7. If there exists any integer k such that fromIndex \u2264 k \u2264 len - searchLen and for all nonnegative integers j less than searchLen, the code unit at index k + j within string is the same as the code unit at index j within searchValue, let pos be the smallest (closest to -\u221e) such integer. Otherwise, let pos be -1.\n8. Return pos. \n\nRuntime Semantics: GetSubstitution ( matched, str, position, captures, namedCaptures, replacement )\n\n...\n2. Let matchLength be the number of code units in matched.\n...\n4. Let stringLength be the number of code units in str.\n...\n9. Let tailPos be position + matchLength.\n10. Let m be the number of elements in captures.\n11. Let result be the String value derived from replacement by copying code unit elements from replacement to result while performing replacements as specified in Table 53. These $ replacements are done left-to-right, and, once such a replacement is performed, the new replacement text is not subject to further replacements.\n12 Return result.\n\nTable 53: Replacement Text Symbol Substitutions\n...\n", "features": ["String.prototype.replaceAll"]}, {"path": "./test262-main/test/built-ins/String/prototype/replaceAll/getSubstitution-0x0024-0x0026.js", "esid": " sec-string.prototype.replaceall", "description": " >Replacement Text Symbol Substitutions ($&)\n", "info": " |String.prototype.replaceAll ( searchValue, replaceValue )\n\n10. Let position be ! StringIndexOf(string, searchString, 0).\n11. Repeat, while position is not -1\na. Append position to the end of matchPositions.\nb. Let position be ! StringIndexOf(string, searchString, position + advanceBy). \n...\n14. For each position in matchPositions, do\na. If functionalReplace is true, then\n...\nb. Else,\n...\nii. Let captures be a new empty List.\niii. Let replacement be GetSubstitution(searchString, string, position, captures, undefined, replaceValue).\n\nStringIndexOf ( string, searchValue, fromIndex )\n\n...\n4. Let len be the length of string.\n5. If searchValue is the empty string, and fromIndex <= len, return fromIndex.\n6. Let searchLen be the length of searchValue.\n7. If there exists any integer k such that fromIndex \u2264 k \u2264 len - searchLen and for all nonnegative integers j less than searchLen, the code unit at index k + j within string is the same as the code unit at index j within searchValue, let pos be the smallest (closest to -\u221e) such integer. Otherwise, let pos be -1.\n8. Return pos. \n\nRuntime Semantics: GetSubstitution ( matched, str, position, captures, namedCaptures, replacement )\n\n...\n2. Let matchLength be the number of code units in matched.\n...\n4. Let stringLength be the number of code units in str.\n...\n9. Let tailPos be position + matchLength.\n10. Let m be the number of elements in captures.\n11. Let result be the String value derived from replacement by copying code unit elements from replacement to result while performing replacements as specified in Table 53. These $ replacements are done left-to-right, and, once such a replacement is performed, the new replacement text is not subject to further replacements.\n12 Return result.\n\nTable 53: Replacement Text Symbol Substitutions\n...\n", "features": ["String.prototype.replaceAll"]}, {"path": "./test262-main/test/built-ins/String/prototype/replaceAll/getSubstitution-0x0024-0x0027.js", "esid": " sec-string.prototype.replaceall", "description": " >Replacement Text Symbol Substitutions ($')\n", "info": " |String.prototype.replaceAll ( searchValue, replaceValue )\n\n10. Let position be ! StringIndexOf(string, searchString, 0).\n11. Repeat, while position is not -1\na. Append position to the end of matchPositions.\nb. Let position be ! StringIndexOf(string, searchString, position + advanceBy). \n...\n14. For each position in matchPositions, do\na. If functionalReplace is true, then\n...\nb. Else,\n...\nii. Let captures be a new empty List.\niii. Let replacement be GetSubstitution(searchString, string, position, captures, undefined, replaceValue).\n\nStringIndexOf ( string, searchValue, fromIndex )\n\n...\n4. Let len be the length of string.\n5. If searchValue is the empty string, and fromIndex <= len, return fromIndex.\n6. Let searchLen be the length of searchValue.\n7. If there exists any integer k such that fromIndex \u2264 k \u2264 len - searchLen and for all nonnegative integers j less than searchLen, the code unit at index k + j within string is the same as the code unit at index j within searchValue, let pos be the smallest (closest to -\u221e) such integer. Otherwise, let pos be -1.\n8. Return pos. \n\nRuntime Semantics: GetSubstitution ( matched, str, position, captures, namedCaptures, replacement )\n\n...\n2. Let matchLength be the number of code units in matched.\n...\n4. Let stringLength be the number of code units in str.\n...\n9. Let tailPos be position + matchLength.\n10. Let m be the number of elements in captures.\n11. Let result be the String value derived from replacement by copying code unit elements from replacement to result while performing replacements as specified in Table 53. These $ replacements are done left-to-right, and, once such a replacement is performed, the new replacement text is not subject to further replacements.\n12 Return result.\n\nTable 53: Replacement Text Symbol Substitutions\n...\n", "features": ["String.prototype.replaceAll"]}, {"path": "./test262-main/test/built-ins/String/prototype/replaceAll/getSubstitution-0x0024-0x003C.js", "esid": " sec-string.prototype.replaceall", "description": " >Replacement Text Symbol Substitutions ($<)\n", "info": " |String.prototype.replaceAll ( searchValue, replaceValue )\n\n10. Let position be ! StringIndexOf(string, searchString, 0).\n11. Repeat, while position is not -1\na. Append position to the end of matchPositions.\nb. Let position be ! StringIndexOf(string, searchString, position + advanceBy). \n...\n14. For each position in matchPositions, do\na. If functionalReplace is true, then\n...\nb. Else,\n...\nii. Let captures be a new empty List.\niii. Let replacement be GetSubstitution(searchString, string, position, captures, undefined, replaceValue).\n\nStringIndexOf ( string, searchValue, fromIndex )\n\n...\n4. Let len be the length of string.\n5. If searchValue is the empty string, and fromIndex <= len, return fromIndex.\n6. Let searchLen be the length of searchValue.\n7. If there exists any integer k such that fromIndex \u2264 k \u2264 len - searchLen and for all nonnegative integers j less than searchLen, the code unit at index k + j within string is the same as the code unit at index j within searchValue, let pos be the smallest (closest to -\u221e) such integer. Otherwise, let pos be -1.\n8. Return pos. \n\nRuntime Semantics: GetSubstitution ( matched, str, position, captures, namedCaptures, replacement )\n\n...\n2. Let matchLength be the number of code units in matched.\n...\n4. Let stringLength be the number of code units in str.\n...\n9. Let tailPos be position + matchLength.\n10. Let m be the number of elements in captures.\n11. Let result be the String value derived from replacement by copying code unit elements from replacement to result while performing replacements as specified in Table 53. These $ replacements are done left-to-right, and, once such a replacement is performed, the new replacement text is not subject to further replacements.\n12 Return result.\n\nTable 53: Replacement Text Symbol Substitutions\n...\n\n$<\n1. If namedCaptures is undefined, the replacement text is the String \"$<\".\n...\n", "features": ["String.prototype.replaceAll", "Symbol.replace"]}, {"path": "./test262-main/test/built-ins/String/prototype/replaceAll/getSubstitution-0x0024-0x0060.js", "esid": " sec-string.prototype.replaceall", "description": " >Replacement Text Symbol Substitutions ($`)\n", "info": " |String.prototype.replaceAll ( searchValue, replaceValue )\n\n10. Let position be ! StringIndexOf(string, searchString, 0).\n11. Repeat, while position is not -1\na. Append position to the end of matchPositions.\nb. Let position be ! StringIndexOf(string, searchString, position + advanceBy). \n...\n14. For each position in matchPositions, do\na. If functionalReplace is true, then\n...\nb. Else,\n...\nii. Let captures be a new empty List.\niii. Let replacement be GetSubstitution(searchString, string, position, captures, undefined, replaceValue).\n\nStringIndexOf ( string, searchValue, fromIndex )\n\n...\n4. Let len be the length of string.\n5. If searchValue is the empty string, and fromIndex <= len, return fromIndex.\n6. Let searchLen be the length of searchValue.\n7. If there exists any integer k such that fromIndex \u2264 k \u2264 len - searchLen and for all nonnegative integers j less than searchLen, the code unit at index k + j within string is the same as the code unit at index j within searchValue, let pos be the smallest (closest to -\u221e) such integer. Otherwise, let pos be -1.\n8. Return pos. \n\nRuntime Semantics: GetSubstitution ( matched, str, position, captures, namedCaptures, replacement )\n\n...\n2. Let matchLength be the number of code units in matched.\n...\n4. Let stringLength be the number of code units in str.\n...\n9. Let tailPos be position + matchLength.\n10. Let m be the number of elements in captures.\n11. Let result be the String value derived from replacement by copying code unit elements from replacement to result while performing replacements as specified in Table 53. These $ replacements are done left-to-right, and, once such a replacement is performed, the new replacement text is not subject to further replacements.\n12 Return result.\n\nTable 53: Replacement Text Symbol Substitutions\n...\n", "features": ["String.prototype.replaceAll"]}, {"path": "./test262-main/test/built-ins/String/prototype/replaceAll/getSubstitution-0x0024.js", "esid": " sec-string.prototype.replaceall", "description": " >Replacement Text Symbol Substitutions ($)\n", "info": " |String.prototype.replaceAll ( searchValue, replaceValue )\n\n10. Let position be ! StringIndexOf(string, searchString, 0).\n11. Repeat, while position is not -1\na. Append position to the end of matchPositions.\nb. Let position be ! StringIndexOf(string, searchString, position + advanceBy). \n...\n14. For each position in matchPositions, do\na. If functionalReplace is true, then\n...\nb. Else,\n...\nii. Let captures be a new empty List.\niii. Let replacement be GetSubstitution(searchString, string, position, captures, undefined, replaceValue).\n\nStringIndexOf ( string, searchValue, fromIndex )\n\n...\n4. Let len be the length of string.\n5. If searchValue is the empty string, and fromIndex <= len, return fromIndex.\n6. Let searchLen be the length of searchValue.\n7. If there exists any integer k such that fromIndex \u2264 k \u2264 len - searchLen and for all nonnegative integers j less than searchLen, the code unit at index k + j within string is the same as the code unit at index j within searchValue, let pos be the smallest (closest to -\u221e) such integer. Otherwise, let pos be -1.\n8. Return pos. \n\nRuntime Semantics: GetSubstitution ( matched, str, position, captures, namedCaptures, replacement )\n\n...\n2. Let matchLength be the number of code units in matched.\n...\n4. Let stringLength be the number of code units in str.\n...\n9. Let tailPos be position + matchLength.\n10. Let m be the number of elements in captures.\n11. Let result be the String value derived from replacement by copying code unit elements from replacement to result while performing replacements as specified in Table 53. These $ replacements are done left-to-right, and, once such a replacement is performed, the new replacement text is not subject to further replacements.\n12 Return result.\n\nTable 53: Replacement Text Symbol Substitutions\n...\n", "features": ["String.prototype.replaceAll"]}, {"path": "./test262-main/test/built-ins/String/prototype/replaceAll/getSubstitution-0x0024N.js", "esid": " sec-string.prototype.replaceall", "description": " >Replacement Text Symbol Substitutions ($N)\n", "info": " |String.prototype.replaceAll ( searchValue, replaceValue )\n\n10. Let position be ! StringIndexOf(string, searchString, 0).\n11. Repeat, while position is not -1\na. Append position to the end of matchPositions.\nb. Let position be ! StringIndexOf(string, searchString, position + advanceBy). \n...\n14. For each position in matchPositions, do\na. If functionalReplace is true, then\n...\nb. Else,\n...\nii. Let captures be a new empty List.\niii. Let replacement be GetSubstitution(searchString, string, position, captures, undefined, replaceValue).\n\nStringIndexOf ( string, searchValue, fromIndex )\n\n...\n4. Let len be the length of string.\n5. If searchValue is the empty string, and fromIndex <= len, return fromIndex.\n6. Let searchLen be the length of searchValue.\n7. If there exists any integer k such that fromIndex \u2264 k \u2264 len - searchLen and for all nonnegative integers j less than searchLen, the code unit at index k + j within string is the same as the code unit at index j within searchValue, let pos be the smallest (closest to -\u221e) such integer. Otherwise, let pos be -1.\n8. Return pos. \n\nRuntime Semantics: GetSubstitution ( matched, str, position, captures, namedCaptures, replacement )\n\n...\n2. Let matchLength be the number of code units in matched.\n...\n4. Let stringLength be the number of code units in str.\n...\n9. Let tailPos be position + matchLength.\n10. Let m be the number of elements in captures.\n11. Let result be the String value derived from replacement by copying code unit elements from replacement to result while performing replacements as specified in Table 53. These $ replacements are done left-to-right, and, once such a replacement is performed, the new replacement text is not subject to further replacements.\n12 Return result.\n\nTable 53: Replacement Text Symbol Substitutions\n...\n\nThe nth element of captures, where n is a single digit in the range 1 to 9. If n \u2264 m and the nth element of captures is undefined, use the empty String instead. If n > m, no replacement is done. \n", "features": ["String.prototype.replaceAll", "Symbol.replace"]}, {"path": "./test262-main/test/built-ins/String/prototype/replaceAll/getSubstitution-0x0024NN.js", "esid": " sec-string.prototype.replaceall", "description": " >Replacement Text Symbol Substitutions ($NN)\n", "info": " |String.prototype.replaceAll ( searchValue, replaceValue )\n\n10. Let position be ! StringIndexOf(string, searchString, 0).\n11. Repeat, while position is not -1\na. Append position to the end of matchPositions.\nb. Let position be ! StringIndexOf(string, searchString, position + advanceBy). \n...\n14. For each position in matchPositions, do\na. If functionalReplace is true, then\n...\nb. Else,\n...\nii. Let captures be a new empty List.\niii. Let replacement be GetSubstitution(searchString, string, position, captures, undefined, replaceValue).\n\nStringIndexOf ( string, searchValue, fromIndex )\n\n...\n4. Let len be the length of string.\n5. If searchValue is the empty string, and fromIndex <= len, return fromIndex.\n6. Let searchLen be the length of searchValue.\n7. If there exists any integer k such that fromIndex \u2264 k \u2264 len - searchLen and for all nonnegative integers j less than searchLen, the code unit at index k + j within string is the same as the code unit at index j within searchValue, let pos be the smallest (closest to -\u221e) such integer. Otherwise, let pos be -1.\n8. Return pos. \n\nRuntime Semantics: GetSubstitution ( matched, str, position, captures, namedCaptures, replacement )\n\n...\n2. Let matchLength be the number of code units in matched.\n...\n4. Let stringLength be the number of code units in str.\n...\n9. Let tailPos be position + matchLength.\n10. Let m be the number of elements in captures.\n11. Let result be the String value derived from replacement by copying code unit elements from replacement to result while performing replacements as specified in Table 53. These $ replacements are done left-to-right, and, once such a replacement is performed, the new replacement text is not subject to further replacements.\n12 Return result.\n\nTable 53: Replacement Text Symbol Substitutions\n...\n\nThe nnth element of captures, where nn is a two-digit decimal number in the range 01 to 99. If nn \u2264 m and the nnth element of captures is undefined, use the empty String instead. If nn is 00 or nn > m, no replacement is done.\n", "features": ["String.prototype.replaceAll", "Symbol.replace"]}, {"path": "./test262-main/test/built-ins/String/prototype/replaceAll/length.js", "esid": " sec-string.prototype.replaceall", "description": " >String.prototype.replaceAll.length value and descriptor.\n", "info": " |String.prototype.replaceAll ( searchValue, replaceValue )\n\n17 ECMAScript Standard Built-in Objects\n", "includes": ["propertyHelper.js"], "features": ["String.prototype.replaceAll"]}, {"path": "./test262-main/test/built-ins/String/prototype/replaceAll/name.js", "esid": " sec-string.prototype.replaceall", "description": " >String.prototype.replaceAll.name value and descriptor.\n", "info": " |String.prototype.replaceAll ( searchValue, replaceValue )\n\n17 ECMAScript Standard Built-in Objects\n", "includes": ["propertyHelper.js"], "features": ["String.prototype.replaceAll"]}, {"path": "./test262-main/test/built-ins/String/prototype/replaceAll/replaceAll.js", "esid": " sec-string.prototype.replaceall", "description": " >Property type and descriptor.\n", "info": " |String.prototype.replaceAll ( searchValue, replaceValue )\n\n17 ECMAScript Standard Built-in Objects\n", "includes": ["propertyHelper.js"], "features": ["String.prototype.replaceAll"]}, {"path": "./test262-main/test/built-ins/String/prototype/replaceAll/replaceValue-call-abrupt.js", "esid": " sec-string.prototype.replaceall", "description": " >Return abrupt from Call(replaceValue, ...)\n", "info": " |String.prototype.replaceAll ( searchValue, replaceValue )\n\n...\n5. Let functionalReplace be IsCallable(replaceValue).\n...\n14. For each position in matchPositions, do\na. If functionalReplace is true, then\ni. Let replacement be ? ToString(? Call(replaceValue, undefined, \u00ab searchString, position, string \u00bb).\n", "features": ["String.prototype.replaceAll"]}, {"path": "./test262-main/test/built-ins/String/prototype/replaceAll/replaceValue-call-each-match-position.js", "esid": " sec-string.prototype.replaceall", "description": " >If replaceValue is a function, it's called for each matching position\n", "info": " |String.prototype.replaceAll ( searchValue, replaceValue )\n\n...\n5. Let functionalReplace be IsCallable(replaceValue).\n...\n14. For each position in matchPositions, do\na. If functionalReplace is true, then\ni. Let replacement be ? ToString(? Call(replaceValue, undefined, \u00ab searchString, position, string \u00bb).\n", "features": ["String.prototype.replaceAll"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/String/prototype/replaceAll/replaceValue-call-matching-empty.js", "esid": " sec-string.prototype.replaceall", "description": " >replaceValue can be called for matching position of an empty string\n", "info": " |String.prototype.replaceAll ( searchValue, replaceValue )\n\n...\n5. Let functionalReplace be IsCallable(replaceValue).\n...\n14. For each position in matchPositions, do\na. If functionalReplace is true, then\ni. Let replacement be ? ToString(? Call(replaceValue, undefined, \u00ab searchString, position, string \u00bb).\n", "features": ["String.prototype.replaceAll"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/String/prototype/replaceAll/replaceValue-call-skip-no-match.js", "esid": " sec-string.prototype.replaceall", "description": " >replaceValue is not called if there isn't a match\n", "info": " |String.prototype.replaceAll ( searchValue, replaceValue )\n\n...\n5. Let functionalReplace be IsCallable(replaceValue).\n...\n14. For each position in matchPositions, do\na. If functionalReplace is true, then\ni. Let replacement be ? ToString(? Call(replaceValue, undefined, \u00ab searchString, position, string \u00bb).\n", "features": ["String.prototype.replaceAll"]}, {"path": "./test262-main/test/built-ins/String/prototype/replaceAll/replaceValue-call-tostring-abrupt.js", "esid": " sec-string.prototype.replaceall", "description": " >Return abrupt from ToString(Call(replaceValue, ...))\n", "info": " |String.prototype.replaceAll ( searchValue, replaceValue )\n\n...\n5. Let functionalReplace be IsCallable(replaceValue).\n...\n14. For each position in matchPositions, do\na. If functionalReplace is true, then\ni. Let replacement be ? ToString(? Call(replaceValue, undefined, \u00ab searchString, position, string \u00bb).\n", "features": ["String.prototype.replaceAll", "Symbol"]}, {"path": "./test262-main/test/built-ins/String/prototype/replaceAll/replaceValue-fn-skip-toString.js", "esid": " sec-string.prototype.replaceall", "description": " >Skip ToString(replaceValue) if it's a function\n", "info": " |String.prototype.replaceAll ( searchValue, replaceValue )\n\n1. Let O be RequireObjectCoercible(this value).\n2. If searchValue is neither undefined nor null, then\n...\n3. Let string be ? ToString(O).\n4. Let searchString be ? ToString(searchValue).\n5. Let functionalReplace be IsCallable(replaceValue).\n6. If functionalReplace is false, then\na. Let replaceValue be ? ToString(replaceValue). \n...\n", "features": ["String.prototype.replaceAll"]}, {"path": "./test262-main/test/built-ins/String/prototype/replaceAll/replaceValue-tostring-abrupt.js", "esid": " sec-string.prototype.replaceall", "description": " >Returns abrupt completions from ToString(replaceValue)\n", "info": " |String.prototype.replaceAll ( searchValue, replaceValue )\n\n1. Let O be RequireObjectCoercible(this value).\n2. If searchValue is neither undefined nor null, then\n...\n3. Let string be ? ToString(O).\n4. Let searchString be ? ToString(searchValue).\n5. Let functionalReplace be IsCallable(replaceValue).\n6. If functionalReplace is false, then\na. Let replaceValue be ? ToString(replaceValue). \n...\n", "features": ["String.prototype.replaceAll", "Symbol"]}, {"path": "./test262-main/test/built-ins/String/prototype/replaceAll/replaceValue-value-replaces-string.js", "esid": " sec-string.prototype.replaceall", "description": " >replaceValue is used to replace matching positions in string\n", "info": " |String.prototype.replaceAll ( searchValue, replaceValue )\n\n...\n5. Let functionalReplace be IsCallable(replaceValue).\n6. If functionalReplace is false, then\na. Let replaceValue be ? ToString(replaceValue). \n...\n14. For each position in matchPositions, do\na. If functionalReplace is true, then\n...\nb. Else,\n...\nii. Let captures be a new empty List.\niii. Let replacement be GetSubstitution(searchString, string, position, captures, undefined, replaceValue).\n", "features": ["String.prototype.replaceAll"]}, {"path": "./test262-main/test/built-ins/String/prototype/replaceAll/replaceValue-value-tostring.js", "esid": " sec-string.prototype.replaceall", "description": " >ToString(replaceValue)\n", "info": " |String.prototype.replaceAll ( searchValue, replaceValue )\n\n...\n5. Let functionalReplace be IsCallable(replaceValue).\n6. If functionalReplace is false, then\na. Let replaceValue be ? ToString(replaceValue). \n...\n14. For each position in matchPositions, do\na. If functionalReplace is true, then\n...\nb. Else,\n...\nii. Let captures be a new empty List.\niii. Let replacement be GetSubstitution(searchString, string, position, captures, undefined, replaceValue).\n", "features": ["String.prototype.replaceAll", "Symbol.toPrimitive"]}, {"path": "./test262-main/test/built-ins/String/prototype/replaceAll/searchValue-empty-string-this-empty-string.js", "esid": " sec-string.prototype.replaceall", "description": " >Matching empty string for the this value and the searchValue\n", "info": " |String.prototype.replaceAll ( searchValue, replaceValue )\n\n...\n5. Let functionalReplace be IsCallable(replaceValue).\n6. If functionalReplace is false, then\na. Let replaceValue be ? ToString(replaceValue). \n...\n10. Let position be ! StringIndexOf(string, searchString, 0).\n11. Repeat, while position is not -1\na. Append position to the end of matchPositions.\nb. Let position be ! StringIndexOf(string, searchString, position + advanceBy).\n...\n14. For each position in matchPositions, do\na. If functionalReplace is true, then\n...\nb. Else,\n...\nii. Let captures be a new empty List.\niii. Let replacement be GetSubstitution(searchString, string, position, captures, undefined, replaceValue).\n\nStringIndexOf ( string, searchValue, fromIndex )\n\n...\n4. Let len be the length of string.\n5. If searchValue is the empty string, and fromIndex <= len, return fromIndex.\n6. Let searchLen be the length of searchValue.\n7. If there exists any integer k such that fromIndex \u2264 k \u2264 len - searchLen and for all nonnegative integers j less than searchLen, the code unit at index k + j within string is the same as the code unit at index j within searchValue, let pos be the smallest (closest to -\u221e) such integer. Otherwise, let pos be -1.\n8. Return pos. \n", "features": ["String.prototype.replaceAll"]}, {"path": "./test262-main/test/built-ins/String/prototype/replaceAll/searchValue-empty-string.js", "esid": " sec-string.prototype.replaceall", "description": " >Replacements when the search value is the empty string\n", "info": " |String.prototype.replaceAll ( searchValue, replaceValue )\n\n10. Let position be ! StringIndexOf(string, searchString, 0).\n11. Repeat, while position is not -1\na. Append position to the end of matchPositions.\nb. Let position be ! StringIndexOf(string, searchString, position + advanceBy). \n...\n14. For each position in matchPositions, do\na. If functionalReplace is true, then\n...\nb. Else,\n...\nii. Let captures be a new empty List.\niii. Let replacement be GetSubstitution(searchString, string, position, captures, undefined, replaceValue).\n\nStringIndexOf ( string, searchValue, fromIndex )\n\n...\n4. Let len be the length of string.\n5. If searchValue is the empty string, and fromIndex <= len, return fromIndex.\n6. Let searchLen be the length of searchValue.\n7. If there exists any integer k such that fromIndex \u2264 k \u2264 len - searchLen and for all nonnegative integers j less than searchLen, the code unit at index k + j within string is the same as the code unit at index j within searchValue, let pos be the smallest (closest to -\u221e) such integer. Otherwise, let pos be -1.\n8. Return pos. \n\nRuntime Semantics: GetSubstitution ( matched, str, position, captures, namedCaptures, replacement )\n\n...\n2. Let matchLength be the number of code units in matched.\n...\n4. Let stringLength be the number of code units in str.\n...\n9. Let tailPos be position + matchLength.\n10. Let m be the number of elements in captures.\n11. Let result be the String value derived from replacement by copying code unit elements from replacement to result while performing replacements as specified in Table 53. These $ replacements are done left-to-right, and, once such a replacement is performed, the new replacement text is not subject to further replacements.\n12 Return result.\n", "features": ["String.prototype.replaceAll"]}, {"path": "./test262-main/test/built-ins/String/prototype/replaceAll/searchValue-flags-no-g-throws.js", "esid": " sec-string.prototype.replaceall", "description": " >Throws a TypeError if flags does not contain \"g\"\n", "info": " |String.prototype.replaceAll ( searchValue, replaceValue )\n\n1. Let O be RequireObjectCoercible(this value).\n2. If searchValue is neither undefined nor null, then\na. Let isRegExp be ? IsRegExp(searchString).\nb. If isRegExp is true, then\ni. Let flags be ? Get(searchValue, \"flags\").\nii. Perform ? RequireObjectCoercible(flags).\niii. If ? ToString(flags) does not contain \"g\", throw a TypeError exception.\n...\n", "features": ["String.prototype.replaceAll", "Symbol.match", "Symbol"]}, {"path": "./test262-main/test/built-ins/String/prototype/replaceAll/searchValue-flags-null-undefined-throws.js", "esid": " sec-string.prototype.replaceall", "description": " >Throws a TypeError if flags is not an ObjectCoercible (null or undefined)\n", "info": " |String.prototype.replaceAll ( searchValue, replaceValue )\n\n1. Let O be RequireObjectCoercible(this value).\n2. If searchValue is neither undefined nor null, then\na. Let isRegExp be ? IsRegExp(searchString).\nb. If isRegExp is true, then\ni. Let flags be ? Get(searchValue, \"flags\").\nii. Perform ? RequireObjectCoercible(flags).\niii. If ? ToString(flags) does not contain \"g\", throw a TypeError exception.\n...\n", "features": ["String.prototype.replaceAll", "Symbol.match"]}, {"path": "./test262-main/test/built-ins/String/prototype/replaceAll/searchValue-flags-toString-abrupt.js", "esid": " sec-string.prototype.replaceall", "description": " >Returns abrupt completions from ToString(flags)\n", "info": " |String.prototype.replaceAll ( searchValue, replaceValue )\n\n1. Let O be RequireObjectCoercible(this value).\n2. If searchValue is neither undefined nor null, then\na. Let isRegExp be ? IsRegExp(searchString).\nb. If isRegExp is true, then\ni. Let flags be ? Get(searchValue, \"flags\").\nii. Perform ? RequireObjectCoercible(flags).\niii. If ? ToString(flags) does not contain \"g\", throw a TypeError exception.\n...\n", "features": ["String.prototype.replaceAll", "Symbol.match", "Symbol"]}, {"path": "./test262-main/test/built-ins/String/prototype/replaceAll/searchValue-get-flags-abrupt.js", "esid": " sec-string.prototype.replaceall", "description": " >Return Abrupt completion from Get(searchValue, \"flags\")\n", "info": " |String.prototype.replaceAll ( searchValue, replaceValue )\n\n1. Let O be RequireObjectCoercible(this value).\n2. If searchValue is neither undefined nor null, then\na. Let isRegExp be ? IsRegExp(searchString).\nb. If isRegExp is true, then\ni. Let flags be ? Get(searchValue, \"flags\").\nii. Perform ? RequireObjectCoercible(flags).\niii. If ? ToString(flags) does not contain \"g\", throw a TypeError exception.\n...\n", "features": ["String.prototype.replaceAll", "Symbol.match"]}, {"path": "./test262-main/test/built-ins/String/prototype/replaceAll/searchValue-isRegExp-abrupt.js", "esid": " sec-string.prototype.replaceall", "description": " >Return Abrupt completion from isRegExp\n", "info": " |String.prototype.replaceAll ( searchValue, replaceValue )\n\n1. Let O be RequireObjectCoercible(this value).\n2. If searchValue is neither undefined nor null, then\na. Let isRegExp be ? IsRegExp(searchString).\n...\n\nIsRegExp ( argument )\n\n1. If Type(argument) is not Object, return false.\n2. Let matcher be ? Get(argument, @@match).\n3. If matcher is not undefined, return ! ToBoolean(matcher).\n4. If argument has a [[RegExpMatcher]] internal slot, return true.\n5. Return false. \n", "features": ["String.prototype.replaceAll", "Symbol.match"]}, {"path": "./test262-main/test/built-ins/String/prototype/replaceAll/searchValue-replacer-RegExp-call-fn.js", "esid": " sec-string.prototype.replaceall", "description": " >A RegExp searchValue's Symbol.replace can be called instead of the next steps of replaceAll\n", "info": " |String.prototype.replaceAll ( searchValue, replaceValue )\n\n1. Let O be RequireObjectCoercible(this value).\n2. If searchValue is neither undefined nor null, then\na. Let isRegExp be ? IsRegExp(searchString).\nb. If isRegExp is true, then\ni. Let flags be ? Get(searchValue, \"flags\").\nii. Perform ? RequireObjectCoercible(flags).\niii. If ? ToString(flags) does not contain \"g\", throw a TypeError exception.\nc. Let replacer be ? GetMethod(searchValue, @@replace).\nd. If replacer is not undefined, then\ni. Return ? Call(replacer, searchValue, \u00ab O, replaceValue \u00bb).\n3. Let string be ? ToString(O).\n4. Let searchString be ? ToString(searchValue).\n...\n", "features": ["String.prototype.replaceAll", "Symbol.replace", "class"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/String/prototype/replaceAll/searchValue-replacer-RegExp-call.js", "esid": " sec-string.prototype.replaceall", "description": " >A RegExp searchValue's Symbol.replace can be called instead of the next steps of replaceAll\n", "info": " |String.prototype.replaceAll ( searchValue, replaceValue )\n\n1. Let O be RequireObjectCoercible(this value).\n2. If searchValue is neither undefined nor null, then\na. Let isRegExp be ? IsRegExp(searchString).\nb. If isRegExp is true, then\ni. Let flags be ? Get(searchValue, \"flags\").\nii. Perform ? RequireObjectCoercible(flags).\niii. If ? ToString(flags) does not contain \"g\", throw a TypeError exception.\nc. Let replacer be ? GetMethod(searchValue, @@replace).\nd. If replacer is not undefined, then\ni. Return ? Call(replacer, searchValue, \u00ab O, replaceValue \u00bb).\n3. Let string be ? ToString(O).\n4. Let searchString be ? ToString(searchValue).\n...\n", "features": ["String.prototype.replaceAll", "Symbol.replace", "class"]}, {"path": "./test262-main/test/built-ins/String/prototype/replaceAll/searchValue-replacer-before-tostring.js", "esid": " sec-string.prototype.replaceall", "description": " >The searchValue is observed before ToString(this value) and ToString(replaceValue)\n", "info": " |String.prototype.replaceAll ( searchValue, replaceValue )\n\n1. Let O be RequireObjectCoercible(this value).\n2. If searchValue is neither undefined nor null, then\na. Let isRegExp be ? IsRegExp(searchString).\nb. If isRegExp is true, then\ni. Let flags be ? Get(searchValue, \"flags\").\nii. Perform ? RequireObjectCoercible(flags).\niii. If ? ToString(flags) does not contain \"g\", throw a TypeError exception.\nc. Let replacer be ? GetMethod(searchValue, @@replace).\nd. If replacer is not undefined, then\ni. Return ? Call(replacer, searchValue, \u00ab O, replaceValue \u00bb).\n3. Let string be ? ToString(O).\n4. Let searchString be ? ToString(searchValue).\n...\n", "features": ["String.prototype.replaceAll", "Symbol.replace"]}, {"path": "./test262-main/test/built-ins/String/prototype/replaceAll/searchValue-replacer-call-abrupt.js", "esid": " sec-string.prototype.replaceall", "description": " >Return abrupt completion from Call.call(poison, replacer, poison)\n", "info": " |String.prototype.replaceAll ( searchValue, replaceValue )\n\n1. Let O be RequireObjectCoercible(this value).\n2. If searchValue is neither undefined nor null, then\na. Let isRegExp be ? IsRegExp(searchString).\nb. If isRegExp is true, then\ni. Let flags be ? Get(searchValue, \"flags\").\nii. Perform ? RequireObjectCoercible(flags).\niii. If ? ToString(flags) does not contain \"g\", throw a TypeError exception.\nc. Let replacer be ? GetMethod(searchValue, @@replace).\nd. If replacer is not undefined, then\ni. Return ? Call(replacer, searchValue, \u00ab O, replaceValue \u00bb).\n...\n", "features": ["String.prototype.replaceAll", "Symbol.match", "Symbol.replace"]}, {"path": "./test262-main/test/built-ins/String/prototype/replaceAll/searchValue-replacer-call.js", "esid": " sec-string.prototype.replaceall", "description": " >Return value from Call(replacer, ...)\n", "info": " |String.prototype.replaceAll ( searchValue, replaceValue )\n\n1. Let O be RequireObjectCoercible(this value).\n2. If searchValue is neither undefined nor null, then\na. Let isRegExp be ? IsRegExp(searchString).\nb. If isRegExp is true, then\ni. Let flags be ? Get(searchValue, \"flags\").\nii. Perform ? RequireObjectCoercible(flags).\niii. If ? ToString(flags) does not contain \"g\", throw a TypeError exception.\nc. Let replacer be ? GetMethod(searchValue, @@replace).\nd. If replacer is not undefined, then\ni. Return ? Call(replacer, searchValue, \u00ab O, replaceValue \u00bb).\n3. Let string be ? ToString(O).\n4. Let searchString be ? ToString(searchValue).\n5. Let functionalReplace be IsCallable(replaceValue).\n6. If functionalReplace is false, then\na. Let replaceValue be ? ToString(replaceValue). \n...\n", "features": ["String.prototype.replaceAll", "Symbol.replace"]}, {"path": "./test262-main/test/built-ins/String/prototype/replaceAll/searchValue-replacer-is-null.js", "esid": " sec-string.prototype.replaceall", "description": " >If searchValue's Symbol.replace property is null, no error is thrown.\n", "info": " |String.prototype.replaceAll ( searchValue, replaceValue )\n\n[...]\n2. If searchValue is neither undefined nor null, then\n[...]\nc. Let replacer be ? GetMethod(searchValue, @@replace).\nd. If replacer is not undefined, then\n[...]\n[...]\n16. Return result.\n\nGetMethod ( V, P )\n\n[...]\n2. Let func be ? GetV(V, P).\n3. If func is either undefined or null, return undefined.\n", "features": ["String.prototype.replaceAll", "Symbol.replace"]}, {"path": "./test262-main/test/built-ins/String/prototype/replaceAll/searchValue-replacer-method-abrupt.js", "esid": " sec-string.prototype.replaceall", "description": " >Return abrupt completion from GetMethod(searchValue.@@replace)\n", "info": " |String.prototype.replaceAll ( searchValue, replaceValue )\n\n1. Let O be RequireObjectCoercible(this value).\n2. If searchValue is neither undefined nor null, then\na. Let isRegExp be ? IsRegExp(searchString).\nb. If isRegExp is true, then\ni. Let flags be ? Get(searchValue, \"flags\").\nii. Perform ? RequireObjectCoercible(flags).\niii. If ? ToString(flags) does not contain \"g\", throw a TypeError exception.\nc. Let replacer be ? GetMethod(searchValue, @@replace).\n...\n\nGetMethod ( V, P )\n\n...\n2. Let func be ? GetV(V, P).\n3. If func is either undefined or null, return undefined.\n4. If IsCallable(func) is false, throw a TypeError exception.\n5. Return func. \n", "features": ["String.prototype.replaceAll", "Symbol", "Symbol.match", "Symbol.replace"]}, {"path": "./test262-main/test/built-ins/String/prototype/replaceAll/searchValue-tostring-abrupt.js", "esid": " sec-string.prototype.replaceall", "description": " >Returns abrupt completions from ToString(searchValue)\n", "info": " |String.prototype.replaceAll ( searchValue, replaceValue )\n\n1. Let O be RequireObjectCoercible(this value).\n2. If searchValue is neither undefined nor null, then\n...\n3. Let string be ? ToString(O).\n4. Let searchString be ? ToString(searchValue).\n5. Let functionalReplace be IsCallable(replaceValue).\n6. If functionalReplace is false, then\na. Let replaceValue be ? ToString(replaceValue). \n...\n", "features": ["String.prototype.replaceAll", "Symbol"]}, {"path": "./test262-main/test/built-ins/String/prototype/replaceAll/searchValue-tostring-regexp.js", "esid": " sec-string.prototype.replaceall", "description": " >ToString(searchValue)\n", "info": " |String.prototype.replaceAll ( searchValue, replaceValue )\n\n...\n4. Let searchString be ? ToString(searchValue).\n5. Let functionalReplace be IsCallable(replaceValue).\n6. If functionalReplace is false, then\na. Let replaceValue be ? ToString(replaceValue). \n...\n14. For each position in matchPositions, do\na. If functionalReplace is true, then\n...\nb. Else,\n...\nii. Let captures be a new empty List.\niii. Let replacement be GetSubstitution(searchString, string, position, captures, undefined, replaceValue).\n", "features": ["String.prototype.replaceAll", "Symbol.replace"]}, {"path": "./test262-main/test/built-ins/String/prototype/replaceAll/this-is-null-throws.js", "esid": " sec-string.prototype.replaceall", "description": " >Throws TypeError when `this` is null\n", "info": " |String.prototype.replaceAll ( searchValue, replaceValue )\n\n1. Let O be RequireObjectCoercible(this value).\n...\n\nRequireObjectCoercible ( argument )\n\n- Undefined: Throw a TypeError exception.\n- Null: Throw a TypeError exception.\n", "features": ["String.prototype.replaceAll"]}, {"path": "./test262-main/test/built-ins/String/prototype/replaceAll/this-is-undefined-throws.js", "esid": " sec-string.prototype.replaceall", "description": " >Throws TypeError when `this` is undefined\n", "info": " |String.prototype.replaceAll ( searchValue, replaceValue )\n\n1. Let O be RequireObjectCoercible(this value).\n...\n\nRequireObjectCoercible ( argument )\n\n- Undefined: Throw a TypeError exception.\n- Null: Throw a TypeError exception.\n", "features": ["String.prototype.replaceAll"]}, {"path": "./test262-main/test/built-ins/String/prototype/replaceAll/this-tostring-abrupt.js", "esid": " sec-string.prototype.replaceall", "description": " >Returns abrupt completions from ToString(this value)\n", "info": " |String.prototype.replaceAll ( searchValue, replaceValue )\n\n1. Let O be RequireObjectCoercible(this value).\n2. If searchValue is neither undefined nor null, then\n...\n3. Let string be ? ToString(O).\n...\n", "features": ["String.prototype.replaceAll", "Symbol"]}, {"path": "./test262-main/test/built-ins/String/prototype/replaceAll/this-tostring.js", "esid": " sec-string.prototype.replaceall", "description": " >ToString(this value)\n", "info": " |String.prototype.replaceAll ( searchValue, replaceValue )\n\n...\n3. Let string be ? ToString(O).\n4. Let searchString be ? ToString(searchValue).\n5. Let functionalReplace be IsCallable(replaceValue).\n6. If functionalReplace is false, then\na. Let replaceValue be ? ToString(replaceValue). \n...\n14. For each position in matchPositions, do\na. If functionalReplace is true, then\n...\nb. Else,\n...\nii. Let captures be a new empty List.\niii. Let replacement be GetSubstitution(searchString, string, position, captures, undefined, replaceValue).\n", "features": ["String.prototype.replaceAll", "Symbol.toPrimitive"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/DefineOwnProperty/BigInt/key-is-not-canonical-index.js", "esid": " sec-integer-indexed-exotic-objects-defineownproperty-p-desc", "description": " >Sets an ordinary property value if numeric key is not a CanonicalNumericIndex\n", "info": " |9.4.5.3 [[DefineOwnProperty]] ( P, Desc)\n...\n3. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\n...\n4. Return OrdinaryDefineOwnProperty(O, P, Desc).\n...\n", "includes": ["testBigIntTypedArray.js", "propertyHelper.js"], "features": ["BigInt", "Reflect", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/DefineOwnProperty/BigInt/key-is-not-integer.js", "esid": " sec-integer-indexed-exotic-objects-defineownproperty-p-desc", "description": " >Returns false if numericIndex is not an integer\n", "info": " |9.4.5.3 [[DefineOwnProperty]] ( P, Desc)\n...\n3. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\ni. If IsInteger(numericIndex) is false, return false.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Reflect", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/DefineOwnProperty/key-is-not-canonical-index.js", "esid": " sec-integer-indexed-exotic-objects-defineownproperty-p-desc", "description": " >Sets an ordinary property value if numeric key is not a CanonicalNumericIndex\n", "info": " |9.4.5.3 [[DefineOwnProperty]] ( P, Desc)\n...\n3. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\n...\n4. Return OrdinaryDefineOwnProperty(O, P, Desc).\n...\n", "includes": ["testTypedArray.js", "propertyHelper.js"], "features": ["Reflect", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/DefineOwnProperty/key-is-not-integer.js", "esid": " sec-integer-indexed-exotic-objects-defineownproperty-p-desc", "description": " >Returns false if numericIndex is not an integer\n", "info": " |9.4.5.3 [[DefineOwnProperty]] ( P, Desc)\n...\n3. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\ni. If IsInteger(numericIndex) is false, return false.\n...\n", "includes": ["testTypedArray.js"], "features": ["Reflect", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/Delete/BigInt/key-is-not-canonical-index-non-strict.js", "esid": " sec-integer-indexed-exotic-objects-delete-p", "description": " >Return true if key is not a CanonicalNumericIndex.\n", "info": " |[[Delete]] (P)\n\n...\nAssert: IsPropertyKey(P) is true.\nAssert: O is an Integer-Indexed exotic object.\nIf Type(P) is String, then\nLet numericIndex be ! CanonicalNumericIndexString(P).\nIf numericIndex is not undefined, then\nIf IsDetachedBuffer(O.[[ViewedArrayBuffer]]) is true, return true.\nIf ! IsValidIntegerIndex(O, numericIndex) is false, return true.\nReturn false.\n...\nReturn ? OrdinaryDelete(O, P).\n", "flags": ["noStrict"], "includes": ["testBigIntTypedArray.js"], "features": ["align-detached-buffer-semantics-with-web-reality", "BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/Delete/BigInt/key-is-not-canonical-index-strict.js", "esid": " sec-integer-indexed-exotic-objects-delete-p", "description": " >Return true if key is not a CanonicalNumericIndex.\n", "info": " |[[Delete]] (P)\n\n...\nAssert: IsPropertyKey(P) is true.\nAssert: O is an Integer-Indexed exotic object.\nIf Type(P) is String, then\nLet numericIndex be ! CanonicalNumericIndexString(P).\nIf numericIndex is not undefined, then\nIf IsDetachedBuffer(O.[[ViewedArrayBuffer]]) is true, return true.\nIf ! IsValidIntegerIndex(O, numericIndex) is false, return true.\nReturn false.\n...\nReturn ? OrdinaryDelete(O, P).\n", "flags": ["onlyStrict"], "includes": ["testBigIntTypedArray.js"], "features": ["align-detached-buffer-semantics-with-web-reality", "BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/Delete/key-is-not-canonical-index-non-strict.js", "esid": " sec-integer-indexed-exotic-objects-delete-p", "description": " >Return true if key is not a CanonicalNumericIndex.\n", "info": " |[[Delete]] (P)\n\n...\nAssert: IsPropertyKey(P) is true.\nAssert: O is an Integer-Indexed exotic object.\nIf Type(P) is String, then\nLet numericIndex be ! CanonicalNumericIndexString(P).\nIf numericIndex is not undefined, then\nIf IsDetachedBuffer(O.[[ViewedArrayBuffer]]) is true, return true.\nIf ! IsValidIntegerIndex(O, numericIndex) is false, return true.\nReturn false.\n...\nReturn ? OrdinaryDelete(O, P).\n", "flags": ["noStrict"], "includes": ["testTypedArray.js"], "features": ["align-detached-buffer-semantics-with-web-reality", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/Delete/key-is-not-canonical-index-strict.js", "esid": " sec-integer-indexed-exotic-objects-delete-p", "description": " >Return true if key is not a CanonicalNumericIndex.\n", "info": " |[[Delete]] (P)\n\n...\nAssert: IsPropertyKey(P) is true.\nAssert: O is an Integer-Indexed exotic object.\nIf Type(P) is String, then\nLet numericIndex be ! CanonicalNumericIndexString(P).\nIf numericIndex is not undefined, then\nIf IsDetachedBuffer(O.[[ViewedArrayBuffer]]) is true, return true.\nIf ! IsValidIntegerIndex(O, numericIndex) is false, return true.\nReturn false.\n...\nReturn ? OrdinaryDelete(O, P).\n", "flags": ["onlyStrict"], "includes": ["testTypedArray.js"], "features": ["align-detached-buffer-semantics-with-web-reality", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/Get/BigInt/key-is-not-canonical-index.js", "esid": " sec-integer-indexed-exotic-objects-get-p-receiver", "description": " >Use OrdinaryGet if numeric key is not a CanonicalNumericIndex\n", "info": " |9.4.5.4 [[Get]] (P, Receiver)\n\n...\n2. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\n...\n3. Return ? OrdinaryGet(O, P, Receiver).\n", "includes": ["testBigIntTypedArray.js"], "features": ["align-detached-buffer-semantics-with-web-reality", "BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/Get/BigInt/key-is-not-integer.js", "esid": " sec-integer-indexed-exotic-objects-get-p-receiver", "description": " >Return undefined if key is numeric index is not an integer.\n", "info": " |9.4.5.4 [[Get]] (P, Receiver)\n\n...\n2. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\ni. Return ? IntegerIndexedElementGet(O, numericIndex).\n...\n\n9.4.5.8 IntegerIndexedElementGet ( O, index )\n\n...\n5. If IsInteger(index) is false, return undefined.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/Get/key-is-not-canonical-index.js", "esid": " sec-integer-indexed-exotic-objects-get-p-receiver", "description": " >Use OrdinaryGet if numeric key is not a CanonicalNumericIndex\n", "info": " |9.4.5.4 [[Get]] (P, Receiver)\n\n...\n2. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\n...\n3. Return ? OrdinaryGet(O, P, Receiver).\n", "includes": ["testTypedArray.js"], "features": ["align-detached-buffer-semantics-with-web-reality", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/Get/key-is-not-integer.js", "esid": " sec-integer-indexed-exotic-objects-get-p-receiver", "description": " >Return undefined if key is numeric index is not an integer.\n", "info": " |9.4.5.4 [[Get]] (P, Receiver)\n\n...\n2. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\ni. Return ? IntegerIndexedElementGet(O, numericIndex).\n...\n\n9.4.5.8 IntegerIndexedElementGet ( O, index )\n\n...\n5. If IsInteger(index) is false, return undefined.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/GetOwnProperty/BigInt/key-is-not-canonical-index.js", "esid": " sec-integer-indexed-exotic-objects-getownproperty-p", "description": " >Returns an ordinary property value if numeric key is not a\nCanonicalNumericIndex\n", "info": " |9.4.5.1 [[GetOwnProperty]] ( P )\n\n...\n3. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\n...\n4. Return OrdinaryGetOwnProperty(O, P).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/GetOwnProperty/key-is-not-canonical-index.js", "esid": " sec-integer-indexed-exotic-objects-getownproperty-p", "description": " >Returns an ordinary property value if numeric key is not a\nCanonicalNumericIndex\n", "info": " |9.4.5.1 [[GetOwnProperty]] ( P )\n\n...\n3. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\n...\n4. Return OrdinaryGetOwnProperty(O, P).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/HasProperty/BigInt/key-is-not-canonical-index.js", "esid": " sec-integer-indexed-exotic-objects-hasproperty-p", "description": " >Return boolean from numeric keys that are not a CanonicalNumericIndexString\n", "info": " |9.4.5.2 [[HasProperty]](P)\n\n...\n3. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\n...\n4. Return ? OrdinaryHasProperty(O, P).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Reflect", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/HasProperty/BigInt/key-is-not-integer.js", "esid": " sec-integer-indexed-exotic-objects-hasproperty-p", "description": " Return false if P's value is not an integer", "info": " |9.4.5.2 [[HasProperty]](P)\n\n...\n3. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\n...\niii. If IsInteger(numericIndex) is false, return false.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Reflect", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/HasProperty/key-is-not-canonical-index.js", "esid": " sec-integer-indexed-exotic-objects-hasproperty-p", "description": " >Return boolean from numeric keys that are not a CanonicalNumericIndexString\n", "info": " |9.4.5.2 [[HasProperty]](P)\n\n...\n3. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\n...\n4. Return ? OrdinaryHasProperty(O, P).\n...\n", "includes": ["testTypedArray.js"], "features": ["Reflect", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/HasProperty/key-is-not-integer.js", "esid": " sec-integer-indexed-exotic-objects-hasproperty-p", "description": " Return false if P's value is not an integer", "info": " |9.4.5.2 [[HasProperty]](P)\n\n...\n3. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\n...\niii. If IsInteger(numericIndex) is false, return false.\n...\n", "includes": ["testTypedArray.js"], "features": ["Reflect", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/Set/BigInt/key-is-not-canonical-index.js", "esid": " sec-integer-indexed-exotic-objects-set-p-v-receiver", "description": " >Use OrdinarySet if numeric key is not a CanonicalNumericIndex\n", "info": " |9.4.5.5 [[Set]] ( P, V, Receiver)\n\n...\n2. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\n...\n3. Return ? OrdinarySet(O, P, V, Receiver).\n", "includes": ["testBigIntTypedArray.js"], "features": ["align-detached-buffer-semantics-with-web-reality", "BigInt", "Reflect", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/Set/BigInt/tonumber-value-throws.js", "esid": " sec-integer-indexed-exotic-objects-set-p-v-receiver", "description": " >Returns abrupt from ToNumber(value)\n", "info": " |9.4.5.5 [[Set]] ( P, V, Receiver)\n\n...\n2. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\ni. Perform ? IntegerIndexedElementSet(O, numericIndex, V).\nii. Return true.\n...\n\nIntegerIndexedElementSet ( O, index, value )\n\nAssert: O is an Integer-Indexed exotic object.\nAssert: Type(index) is Number.\nIf O.[[ContentType]] is BigInt, let numValue be ? ToBigInt(value).\nOtherwise, let numValue be ? ToNumber(value).\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["align-detached-buffer-semantics-with-web-reality", "BigInt", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/Set/key-is-not-canonical-index.js", "esid": " sec-integer-indexed-exotic-objects-set-p-v-receiver", "description": " >Use OrdinarySet if numeric key is not a CanonicalNumericIndex\n", "info": " |9.4.5.5 [[Set]] ( P, V, Receiver)\n\n...\n2. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\n...\n3. Return ? OrdinarySet(O, P, V, Receiver).\n", "includes": ["testTypedArray.js"], "features": ["align-detached-buffer-semantics-with-web-reality", "Reflect", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/Set/tonumber-value-throws.js", "esid": " sec-integer-indexed-exotic-objects-set-p-v-receiver", "description": " >Returns abrupt from ToNumber(value)\n", "info": " |9.4.5.5 [[Set]] ( P, V, Receiver)\n\n...\n2. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\ni. Perform ? IntegerIndexedElementSet(O, numericIndex, V).\nii. Return true.\n...\n\nIntegerIndexedElementSet ( O, index, value )\n\nAssert: O is an Integer-Indexed exotic object.\nAssert: Type(index) is Number.\nIf O.[[ContentType]] is BigInt, let numValue be ? ToBigInt(value).\nOtherwise, let numValue be ? ToNumber(value).\n...\n", "includes": ["testTypedArray.js"], "features": ["align-detached-buffer-semantics-with-web-reality", "TypedArray"]}, {"path": "./test262-main/test/intl402/BigInt/prototype/toLocaleString/de-DE.js", "esid": " sec-bigint.prototype.tolocalestring", "description": " Checks basic behavior for BigInt.prototype.toLocaleString.", "features": ["BigInt"]}, {"path": "./test262-main/test/intl402/BigInt/prototype/toLocaleString/default-options-object-prototype.js", "esid": " sec-initializenumberformat", "description": " >Monkey-patching Object.prototype does not change the default\noptions for NumberFormat as a null prototype is used.\n", "info": " |InitializeNumberFormat ( numberFormat, locales, options )\n\n1. If _options_ is *undefined*, then\n1. Let _options_ be ObjectCreate(*null*).\n", "features": ["BigInt"]}, {"path": "./test262-main/test/intl402/BigInt/prototype/toLocaleString/en-US.js", "esid": " sec-bigint.prototype.tolocalestring", "description": " Checks basic behavior for BigInt.prototype.toLocaleString.", "features": ["BigInt"]}, {"path": "./test262-main/test/intl402/BigInt/prototype/toLocaleString/returns-same-results-as-NumberFormat.js", "esid": " sec-bigint.prototype.tolocalestring", "description": " >Tests that BigInt.prototype.toLocaleString produces the same\nresults as Intl.BigIntFormat.\n", "features": ["BigInt"]}, {"path": "./test262-main/test/intl402/BigInt/prototype/toLocaleString/throws-same-exceptions-as-NumberFormat.js", "esid": " sec-bigint.prototype.tolocalestring", "description": " >Tests that BigInt.prototype.toLocaleString throws the same\nexceptions as Intl.NumberFormat.\n", "features": ["BigInt"]}, {"path": "./test262-main/test/intl402/Collator/prototype/compare/compare-function-name.js", "esid": " sec-Intl.Collator.prototype.compare", "description": " >The bound Collator compare function is an anonymous function.\n", "info": " |10.3.3 get Intl.Collator.prototype.compare\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in function object, including constructors, has a `name`\nproperty whose value is a String. Functions that are identified as\nanonymous functions use the empty string as the value of the `name`\nproperty.\nUnless otherwise specified, the `name` property of a built-in function\nobject has the attributes { [[Writable]]: *false*, [[Enumerable]]: *false*,\n[[Configurable]]: *true* }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/constructor-calendar-numberingSystem-order.js", "esid": " sec-initializedatetimeformat", "description": " >Checks the order of getting \"calendar\" and \"numberingSystem\" options in the\nDateTimeFormat is between \"localeMatcher\" and \"hour12\" options.\n", "info": " |4. Let _matcher_ be ? GetOption(_options_, `\"localeMatcher\"`, `\"string\"`, &laquo; `\"lookup\"`, `\"best fit\"` &raquo;, `\"best fit\"`).\n...\n6. Let _calendar_ be ? GetOption(_options_, `\"calendar\"`, `\"string\"`, *undefined*, *undefined*).\n...\n9. Let _numberingSystem_ be ? GetOption(_options_, `\"numberingSystem\"`, `\"string\"`, *undefined*, *undefined*).\n...\n12. Let _hour12_ be ? GetOption(_options_, `\"hour12\"`, `\"boolean\"`, *undefined*, *undefined*).\n", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/constructor-options-calendar-invalid.js", "esid": " sec-initializedatetimeformat", "description": " >Checks error cases for the options argument to the DateTimeFormat constructor.\n", "info": " |InitializeDateTimeFormat ( dateTimeFormat, locales, options )\n\n...\n7. If calendar is not undefined, then\na. If calendar does not match the Unicode Locale Identifier type nonterminal, throw a RangeError exception.\n"}, {"path": "./test262-main/test/intl402/DateTimeFormat/constructor-options-numberingSystem-invalid.js", "esid": " sec-initializedatetimeformat", "description": " >Checks error cases for the options argument to the DateTimeFormat constructor.\n", "info": " |InitializeDateTimeFormat ( dateTimeFormat, locales, options )\n\n...\n10. If numberingSystem is not undefined, then\na. If numberingSystem does not match the Unicode Locale Identifier type nonterminal, throw a RangeError exception.\n"}, {"path": "./test262-main/test/intl402/DateTimeFormat/numbering-system-calendar-options.js", "esid": " sec-initializedatetimeformat", "description": " >Tests that the options numberingSystem and calendar can beset through\neither the locale or the options.\n", "author": " Norbert Lindenberg, Daniel Ehrenberg"}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/format/format-function-name.js", "esid": " sec-Intl.DateTimeFormat.prototype.format", "description": " >The bound DateTimeFormat format function is an anonymous function.\n", "info": " |12.4.3 get Intl.DateTimeFormat.prototype.compare\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in function object, including constructors, has a `name`\nproperty whose value is a String. Functions that are identified as\nanonymous functions use the empty string as the value of the `name`\nproperty.\nUnless otherwise specified, the `name` property of a built-in function\nobject has the attributes { [[Writable]]: *false*, [[Enumerable]]: *false*,\n[[Configurable]]: *true* }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/format/related-year-zh.js", "esid": " sec-partitiondatetimepattern", "description": " >Checks the output of 'relatedYear' and 'yearName' type, and\nthe choice of pattern based on calendar.\n"}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/formatToParts/pattern-on-calendar.js", "esid": " sec-initializedatetimeformat", "description": " >Checks the DateTimeFormat choose different patterns based\non calendar.\n"}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/formatToParts/related-year-zh.js", "esid": " sec-partitiondatetimepattern", "description": " >Checks the output of 'relatedYear' and 'yearName' type, and\nthe choice of pattern based on calendar.\n"}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/formatToParts/related-year.js", "esid": " sec-partitiondatetimepattern", "description": " >Checks the output of 'relatedYear' and 'yearName' type, and\nthe choose of pattern base on calendar.\n"}, {"path": "./test262-main/test/intl402/Intl/getCanonicalLocales/Locale-object.js", "esid": " sec-intl.getcanonicallocales", "description": " Tests for Locale objects in the argument to getCanonicalLocales", "info": " |CanonicalizeLocaleList ( locales )\n7. c. iii. If Type(kValue) is Object and kValue has an [[InitializedLocale]] internal slot, then\n1. Let tag be kValue.[[Locale]].\n", "includes": ["compareArray.js"], "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Intl/getCanonicalLocales/complex-language-subtag-replacement.js", "esid": " sec-intl.getcanonicallocales", "description": " >Assert non-simple language subtag replacements work as expected.\n", "info": " |8.2.1 Intl.getCanonicalLocales (locales)\n1. Let ll be ? CanonicalizeLocaleList(locales).\n2. Return CreateArrayFromList(ll).\n\n9.2.1 CanonicalizeLocaleList (locales)\n...\n7. Repeat, while k < len\n...\nc. If kPresent is true, then\n...\nvi. Let canonicalizedTag be CanonicalizeUnicodeLocaleId(tag).\n...\n\nUTS 35, \u00a73.2.1 Canonical Unicode Locale Identifiers\n\n- Replace aliases in the unicode_language_id and tlang (if any) using the following process:\n- If the language subtag matches the type attribute of a languageAlias element in\nSupplemental Data, replace the language subtag with the replacement value.\n1. If there are additional subtags in the replacement value, add them to the result,\nbut only if there is no corresponding subtag already in the tag.\n\n", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/Intl/getCanonicalLocales/complex-region-subtag-replacement.js", "esid": " sec-intl.getcanonicallocales", "description": " >Assert non-simple region subtag replacements work as expected.\n", "info": " |8.2.1 Intl.getCanonicalLocales (locales)\n1. Let ll be ? CanonicalizeLocaleList(locales).\n2. Return CreateArrayFromList(ll).\n\n9.2.1 CanonicalizeLocaleList (locales)\n...\n7. Repeat, while k < len\n...\nc. If kPresent is true, then\n...\nvi. Let canonicalizedTag be CanonicalizeUnicodeLocaleId(tag).\n...\n\nUTS 35, \u00a73.2.1 Canonical Unicode Locale Identifiers\n\n- Replace aliases in the unicode_language_id and tlang (if any) using the following process:\n- If the region subtag matches the type attribute of a territoryAlias element in\nSupplemental Data, replace the language subtag with the replacement value, as follows:\n1. If there is a single territory in the replacement, use it.\n2. If there are multiple territories:\n1. Look up the most likely territory for the base language code (and script, if there is one).\n2. If that likely territory is in the list, use it.\n3. Otherwise, use the first territory in the list.\n\n", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/Intl/getCanonicalLocales/grandfathered.js", "esid": " sec-intl.getcanonicallocales", "description": " >Verifies canonicalization of specific tags.\n"}, {"path": "./test262-main/test/intl402/Intl/getCanonicalLocales/non-iana-canon.js", "esid": " sec-intl.getcanonicallocales", "description": " >Verifies canonicalization, of specific tags.\n", "info": " |ApplyOptionsToTag( tag, options )\n10. Return CanonicalizeLanguageTag(tag).\n"}, {"path": "./test262-main/test/intl402/Intl/getCanonicalLocales/transformed-ext-canonical.js", "esid": " sec-intl.getcanonicallocales", "description": " >Test canonicalisation within transformed extension subtags.\n", "info": " |8.2.1 Intl.getCanonicalLocales (locales)\n1. Let ll be ? CanonicalizeLocaleList(locales).\n2. Return CreateArrayFromList(ll).\n\n9.2.1 CanonicalizeLocaleList (locales)\n...\n7. Repeat, while k < len\n...\nc. If kPresent is true, then\n...\nv. If IsStructurallyValidLanguageTag(tag) is false, throw a RangeError exception.\nvi. Let canonicalizedTag be CanonicalizeUnicodeLocaleId(tag).\n...\n\n", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/Intl/getCanonicalLocales/unicode-ext-canonicalize-calendar.js", "esid": " sec-intl.getcanonicallocales", "description": " >Test Unicode extension subtag canonicalisation for the \"ca\" extension key.\n", "info": " |8.2.1 Intl.getCanonicalLocales (locales)\n1. Let ll be ? CanonicalizeLocaleList(locales).\n2. Return CreateArrayFromList(ll).\n\n9.2.1 CanonicalizeLocaleList (locales)\n...\n7. Repeat, while k < len\n...\nc. If kPresent is true, then\n...\nv. If IsStructurallyValidLanguageTag(tag) is false, throw a RangeError exception.\nvi. Let canonicalizedTag be CanonicalizeUnicodeLocaleId(tag).\n...\n\nUTS 35, \u00a73.2.1 Canonical Unicode Locale Identifiers\nUse the bcp47 data to replace keys, types, tfields, and tvalues by their canonical forms.\nSee Section 3.6.4 U Extension Data Files) and Section 3.7.1 T Extension Data Files. The\naliases are in the alias attribute value, while the canonical is in the name attribute value.\n", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/Intl/getCanonicalLocales/unicode-ext-canonicalize-col-strength.js", "esid": " sec-intl.getcanonicallocales", "description": " >Test Unicode extension subtag canonicalisation for the \"ks\" extension key.\n", "info": " |8.2.1 Intl.getCanonicalLocales (locales)\n1. Let ll be ? CanonicalizeLocaleList(locales).\n2. Return CreateArrayFromList(ll).\n\n9.2.1 CanonicalizeLocaleList (locales)\n...\n7. Repeat, while k < len\n...\nc. If kPresent is true, then\n...\nv. If IsStructurallyValidLanguageTag(tag) is false, throw a RangeError exception.\nvi. Let canonicalizedTag be CanonicalizeUnicodeLocaleId(tag).\n...\n\nUTS 35, \u00a73.2.1 Canonical Unicode Locale Identifiers\nUse the bcp47 data to replace keys, types, tfields, and tvalues by their canonical forms.\nSee Section 3.6.4 U Extension Data Files) and Section 3.7.1 T Extension Data Files. The\naliases are in the alias attribute value, while the canonical is in the name attribute value.\n", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/Intl/getCanonicalLocales/unicode-ext-canonicalize-measurement-system.js", "esid": " sec-intl.getcanonicallocales", "description": " >Test Unicode extension subtag canonicalisation for the \"ms\" extension key.\n", "info": " |8.2.1 Intl.getCanonicalLocales (locales)\n1. Let ll be ? CanonicalizeLocaleList(locales).\n2. Return CreateArrayFromList(ll).\n\n9.2.1 CanonicalizeLocaleList (locales)\n...\n7. Repeat, while k < len\n...\nc. If kPresent is true, then\n...\nv. If IsStructurallyValidLanguageTag(tag) is false, throw a RangeError exception.\nvi. Let canonicalizedTag be CanonicalizeUnicodeLocaleId(tag).\n...\n\nUTS 35, \u00a73.2.1 Canonical Unicode Locale Identifiers\nUse the bcp47 data to replace keys, types, tfields, and tvalues by their canonical forms.\nSee Section 3.6.4 U Extension Data Files) and Section 3.7.1 T Extension Data Files. The\naliases are in the alias attribute value, while the canonical is in the name attribute value.\n", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/Intl/getCanonicalLocales/unicode-ext-canonicalize-region.js", "esid": " sec-intl.getcanonicallocales", "description": " >Test Unicode extension subtag canonicalisation for the \"rg\" extension key.\n", "info": " |8.2.1 Intl.getCanonicalLocales (locales)\n1. Let ll be ? CanonicalizeLocaleList(locales).\n2. Return CreateArrayFromList(ll).\n\n9.2.1 CanonicalizeLocaleList (locales)\n...\n7. Repeat, while k < len\n...\nc. If kPresent is true, then\n...\nv. If IsStructurallyValidLanguageTag(tag) is false, throw a RangeError exception.\nvi. Let canonicalizedTag be CanonicalizeUnicodeLocaleId(tag).\n...\n\nUTS 35, \u00a73.2.1 Canonical Unicode Locale Identifiers\nUse the bcp47 data to replace keys, types, tfields, and tvalues by their canonical forms.\nSee Section 3.6.4 U Extension Data Files) and Section 3.7.1 T Extension Data Files. The\naliases are in the alias attribute value, while the canonical is in the name attribute value.\n\nReplace aliases in special key values:\nIf there is an 'sd' or 'rg' key, replace any subdivision alias in its value in the same way,\nusing subdivisionAlias data.\n", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/Intl/getCanonicalLocales/unicode-ext-canonicalize-subdivision.js", "esid": " sec-intl.getcanonicallocales", "description": " >Test Unicode extension subtag canonicalisation for the \"sd\" extension key.\n", "info": " |8.2.1 Intl.getCanonicalLocales (locales)\n1. Let ll be ? CanonicalizeLocaleList(locales).\n2. Return CreateArrayFromList(ll).\n\n9.2.1 CanonicalizeLocaleList (locales)\n...\n7. Repeat, while k < len\n...\nc. If kPresent is true, then\n...\nv. If IsStructurallyValidLanguageTag(tag) is false, throw a RangeError exception.\nvi. Let canonicalizedTag be CanonicalizeUnicodeLocaleId(tag).\n...\n\nUTS 35, \u00a73.2.1 Canonical Unicode Locale Identifiers\nUse the bcp47 data to replace keys, types, tfields, and tvalues by their canonical forms.\nSee Section 3.6.4 U Extension Data Files) and Section 3.7.1 T Extension Data Files. The\naliases are in the alias attribute value, while the canonical is in the name attribute value.\n\nReplace aliases in special key values:\nIf there is an 'sd' or 'rg' key, replace any subdivision alias in its value in the same way,\nusing subdivisionAlias data.\n", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/Intl/getCanonicalLocales/unicode-ext-canonicalize-timezone.js", "esid": " sec-intl.getcanonicallocales", "description": " >Test Unicode extension subtag canonicalisation for the \"tz\" extension key.\n", "info": " |8.2.1 Intl.getCanonicalLocales (locales)\n1. Let ll be ? CanonicalizeLocaleList(locales).\n2. Return CreateArrayFromList(ll).\n\n9.2.1 CanonicalizeLocaleList (locales)\n...\n7. Repeat, while k < len\n...\nc. If kPresent is true, then\n...\nv. If IsStructurallyValidLanguageTag(tag) is false, throw a RangeError exception.\nvi. Let canonicalizedTag be CanonicalizeUnicodeLocaleId(tag).\n...\n\nUTS 35, \u00a73.2.1 Canonical Unicode Locale Identifiers\nUse the bcp47 data to replace keys, types, tfields, and tvalues by their canonical forms.\nSee Section 3.6.4 U Extension Data Files) and Section 3.7.1 T Extension Data Files. The\naliases are in the alias attribute value, while the canonical is in the name attribute value.\n", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/Intl/getCanonicalLocales/unicode-ext-canonicalize-yes-to-true.js", "esid": " sec-intl.getcanonicallocales", "description": " >\"kb\", \"kc\", \"kh\", \"kk\", and \"kn\" Unicode extension keys canonicalise \"yes\" to \"true\".\n", "info": " |8.2.1 Intl.getCanonicalLocales (locales)\n1. Let ll be ? CanonicalizeLocaleList(locales).\n2. Return CreateArrayFromList(ll).\n\n9.2.1 CanonicalizeLocaleList (locales)\n...\n7. Repeat, while k < len\n...\nc. If kPresent is true, then\n...\nv. If IsStructurallyValidLanguageTag(tag) is false, throw a RangeError exception.\nvi. Let canonicalizedTag be CanonicalizeUnicodeLocaleId(tag).\n...\n\nUTS 35, \u00a73.2.1 Canonical Unicode Locale Identifiers\nUse the bcp47 data to replace keys, types, tfields, and tvalues by their canonical forms.\nSee Section 3.6.4 U Extension Data Files) and Section 3.7.1 T Extension Data Files. The\naliases are in the alias attribute value, while the canonical is in the name attribute value.\n\nUTS 35, \u00a73.2.1 Canonical Unicode Locale Identifiers\nAny type or tfield value \"true\" is removed.\n", "includes": ["testIntl.js"]}, {"path": "./test262-main/test/intl402/ListFormat/constructor/constructor/locales-invalid.js", "esid": " sec-Intl.ListFormat", "description": " Checks error cases for the locales argument to the ListFormat constructor.", "info": " |InitializeListFormat (listFormat, locales, options)\n1. Let _requestedLocales_ be ? CanonicalizeLocaleList(_locales_).\n", "includes": ["testIntl.js"], "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/constructor/constructor/locales-valid.js", "esid": " sec-Intl.ListFormat", "description": " Checks various cases for the locales argument to the ListFormat constructor.", "info": " |InitializeListFormat (listFormat, locales, options)\n1. Let _requestedLocales_ be ? CanonicalizeLocaleList(_locales_).\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/constructor/constructor/newtarget-undefined.js", "esid": " sec-intl.ListFormat", "description": " >Verifies the NewTarget check for Intl.ListFormat.\n", "info": " |Intl.ListFormat ([ locales [ , options ]])\n\n1. If NewTarget is undefined, throw a TypeError exception.\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/constructor/constructor/options-invalid.js", "esid": " sec-Intl.ListFormat", "description": " Checks handling of a null options argument to the ListFormat constructor.", "info": " |InitializeListFormat (listFormat, locales, options)\n3. Else\na. Let options be ? ToObject(options).\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/constructor/constructor/options-localeMatcher-invalid.js", "esid": " sec-Intl.ListFormat", "description": " Checks handling of invalid value for the localeMatcher option to the ListFormat constructor.", "info": " |Intl.ListFormat ( [ locales [ , options ] ] )\n12. Let matcher be ? GetOption(options, \"localeMatcher\", \"string\", \u00ab \"lookup\", \"best fit\" \u00bb, \"best fit\").\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/constructor/constructor/options-order.js", "esid": " sec-Intl.ListFormat", "description": " Checks the order of operations on the options argument to the ListFormat constructor.", "info": " |Intl.ListFormat ( [ locales [ , options ] ] )\n7. Let type be GetOption(options, \"type\", \"string\", \u00ab \"conjunction\", \"disjunction\", \"unit\" \u00bb, \"conjunction\").\n9. Let style be GetOption(options, \"style\", \"string\", \u00ab \"long\", \"short\", \"narrow\" \u00bb, \"long\").\n12. Let matcher be ? GetOption(options, \"localeMatcher\", \"string\", \u00ab \"lookup\", \"best fit\" \u00bb, \"best fit\").\n", "includes": ["compareArray.js"], "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/constructor/constructor/options-style-invalid.js", "esid": " sec-Intl.ListFormat", "description": " Checks handling of invalid value for the style option to the ListFormat constructor.", "info": " |InitializeListFormat (listFormat, locales, options)\n9. Let s be ? GetOption(options, \"style\", \"string\", \u00ab\"long\", \"short\", \"narrow\"\u00bb, \"long\").\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/constructor/constructor/options-style-valid.js", "esid": " sec-Intl.ListFormat", "description": " Checks handling of valid values for the style option to the ListFormat constructor.", "info": " |InitializeListFormat (listFormat, locales, options)\nInitializeListFormat (listFormat, locales, options)\n12. Let type be ? GetOption(options, \"type\", \"string\", \u00ab \"conjunction\",\n\"disjunction\", \"unit\" \u00bb, \"conjunction\").\n13. Set listFormat.[[Type]] to type.\n14. Let style be ? GetOption(options, \"style\", \"string\", \u00ab \"long\", \"short\",\n\"narrow\" \u00bb, \"long\").\n15. Set listFormat.[[Style]] to style.\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/constructor/constructor/options-throwing-getters.js", "esid": " sec-Intl.ListFormat", "description": " Checks the propagation of exceptions from the options for the ListFormat constructor.", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/constructor/constructor/options-toobject-prototype.js", "esid": " sec-Intl.ListFormat", "description": " Checks handling of non-object option arguments to the ListFormat constructor.", "info": " |InitializeListFormat (listFormat, locales, options)\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/constructor/constructor/options-toobject.js", "esid": " sec-Intl.ListFormat", "description": " Checks handling of non-object option arguments to the ListFormat constructor.", "info": " |InitializeListFormat (listFormat, locales, options)\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/constructor/constructor/options-type-invalid.js", "esid": " sec-Intl.ListFormat", "description": " Checks handling of invalid value for the type option to the ListFormat constructor.", "info": " |InitializeListFormat (listFormat, locales, options)\n7. Let type be GetOption(options, \"type\", \"string\", \u00ab \"conjunction\", \"disjunction\", \"unit\" \u00bb, \"conjunction\").\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/constructor/constructor/options-type-valid.js", "esid": " sec-Intl.ListFormat", "description": " Checks handling of valid values for the style option to the ListFormat constructor.", "info": " |InitializeListFormat (listFormat, locales, options)\n7. Let type be GetOption(options, \"type\", \"string\", \u00ab \"conjunction\", \"disjunction\", \"unit\" \u00bb, \"conjunction\").\n8. Set listFormat.[[Type]] to type.\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/constructor/constructor/options-undefined.js", "esid": " sec-Intl.ListFormat", "description": " Checks handling of non-object option arguments to the ListFormat constructor.", "info": " |InitializeListFormat (listFormat, locales, options)\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/constructor/constructor/subclassing.js", "esid": " sec-Intl.ListFormat", "description": " Checks that ListFormat can be subclassed.", "info": " |Intl.ListFormat ( [ locales [ , options ] ] )\n\n2. Let listFormat be ? OrdinaryCreateFromConstructor(NewTarget, \"%ListFormatPrototype%\", \u00ab [[InitializedListFormat]], [[Locale]], [[Type]], [[Style]] \u00bb).\n\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/constructor/length.js", "esid": " sec-Intl.ListFormat", "description": " >Checks the \"length\" property of the ListFormat constructor.\n", "info": " |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nThe ListFormat constructor is a standard built-in property of the Intl object.\nEvery built-in function object, including constructors, has a length property whose value is an integer. Unless otherwise specified, this value is equal to the largest number of named arguments shown in the subclause headings for the function description. Optional parameters (which are indicated with brackets: [ ]) or rest parameters (which are shown using the form \u00ab...name\u00bb) are not included in the default argument count.\nUnless otherwise specified, the length property of a built-in function object has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/constructor/name.js", "esid": " sec-Intl.ListFormat", "description": " >Checks the \"name\" property of the ListFormat constructor.\n", "info": " |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, that is not identified as an anonymous function has a name property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification.\nUnless otherwise specified, the name property of a built-in function object, if it exists, has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/constructor/prop-desc.js", "esid": " sec-Intl.ListFormat", "description": " >\"ListFormat\" property of Intl.\n", "info": " |Intl.ListFormat (...)\n\n7 Requirements for Standard Built-in ECMAScript Objects\n\nUnless specified otherwise in this document, the objects, functions, and constructors\ndescribed in this standard are subject to the generic requirements and restrictions\nspecified for standard built-in ECMAScript objects in the ECMAScript 2018 Language\nSpecification, 9th edition, clause 17, or successor.\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the\nattributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true }\nunless otherwise specified.\n\n", "includes": ["propertyHelper.js"], "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/constructor/prototype.js", "esid": " sec-Intl.ListFormat", "description": " The prototype of the Intl.ListFormat constructor is %FunctionPrototype%.", "info": " |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nUnless otherwise specified every built-in function object has the %FunctionPrototype% object as the initial value of its [[Prototype]] internal slot.\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/constructor/supportedLocalesOf/basic.js", "esid": " sec-Intl.ListFormat.supportedLocalesOf", "description": " >Tests that Intl.ListFormat has a supportedLocalesOf property,\nand it works as planned.\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/constructor/supportedLocalesOf/branding.js", "esid": " sec-Intl.ListFormat.supportedLocalesOf", "description": " >Verifies there's no branding check for Intl.ListFormat.supportedLocalesOf().\n", "info": " |Intl.ListFormat.supportedLocalesOf ( locales [, options ])\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/constructor/supportedLocalesOf/length.js", "esid": " sec-Intl.ListFormat.supportedLocalesOf", "description": " >Checks the \"length\" property of Intl.ListFormat.supportedLocalesOf().\n", "info": " |The value of the length property of the supportedLocalesOf method is 1.\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, has a length property whose value is an integer.\nUnless otherwise specified, the length property of a built-in function object has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/constructor/supportedLocalesOf/locales-invalid.js", "esid": " sec-Intl.ListFormat.supportedLocalesOf", "description": " Checks error cases for the locales argument to the supportedLocalesOf function.", "info": " |Intl.ListFormat.supportedLocalesOf ( locales [, options ])\n\n2. Let requestedLocales be CanonicalizeLocaleList(locales).\n", "includes": ["testIntl.js"], "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/constructor/supportedLocalesOf/name.js", "esid": " sec-Intl.ListFormat.supportedLocalesOf", "description": " >Checks the \"name\" property of Intl.ListFormat.supportedLocalesOf().\n", "info": " |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, that is not identified as an anonymous function has a name property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification.\nUnless otherwise specified, the name property of a built-in function object, if it exists, has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/constructor/supportedLocalesOf/options-localeMatcher-invalid.js", "esid": " sec-Intl.ListFormat.supportedLocalesOf", "description": " Checks handling of invalid values for the localeMatcher option to the supportedLocalesOf function.", "info": " |SupportedLocales ( availableLocales, requestedLocales, options )\n\n1. If options is not undefined, then\nb. Let matcher be ? GetOption(options, \"localeMatcher\", \"string\", \u00ab\"lookup\", \"best fit\"\u00bb, \"best fit\").\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/constructor/supportedLocalesOf/options-null.js", "esid": " sec-Intl.ListFormat.supportedLocalesOf", "description": " Checks handling of a null options argument to the supportedLocalesOf function.", "info": " |SupportedLocales ( availableLocales, requestedLocales, options )\n\n1. If options is not undefined, then\na. Let options be ? ToObject(options).\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/constructor/supportedLocalesOf/options-toobject.js", "esid": " sec-Intl.ListFormat.supportedLocalesOf", "description": " Checks handling of non-object options arguments to the supportedLocalesOf function.", "info": " |SupportedLocales ( availableLocales, requestedLocales, options )\n\n1. If options is not undefined, then\na. Let options be ? ToObject(options).\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/constructor/supportedLocalesOf/options-undefined.js", "esid": " sec-Intl.ListFormat.supportedLocalesOf", "description": " Checks handling of an undefined options argument to the supportedLocalesOf function.", "info": " |SupportedLocales ( availableLocales, requestedLocales, options )\n\n1. If options is not undefined, then\nb. Let matcher be ? GetOption(options, \"localeMatcher\", \"string\", \u00ab\"lookup\", \"best fit\"\u00bb, \"best fit\").\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/constructor/supportedLocalesOf/prop-desc.js", "esid": " sec-Intl.ListFormat.supportedLocalesOf", "description": " >Checks the \"supportedLocalesOf\" property of the ListFormat prototype object.\n", "info": " |Intl.ListFormat.supportedLocalesOf ( locales [, options ])\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js"], "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/constructor/supportedLocalesOf/result-type.js", "esid": " sec-Intl.ListFormat.supportedLocalesOf", "description": " Verifies the type of the return value of Intl.ListFormat.supportedLocalesOf().", "info": " |Intl.ListFormat.supportedLocalesOf ( locales [, options ])\n", "includes": ["propertyHelper.js"], "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/instance/extensibility.js", "esid": " sec-Intl.ListFormat", "description": " Intl.ListFormat instance object extensibility", "info": " |17 ECMAScript Standard Built-in Objects:\n\nUnless specified otherwise, the [[Extensible]] internal slot\nof a built-in object initially has the value true.\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/instance/prototype.js", "esid": " sec-Intl.ListFormat", "description": " Intl.ListFormat instance object is created from %ListFormatPrototype%.", "info": " |Intl.ListFormat ([ locales [ , options ]])\n\n2. Let listFormat be ? OrdinaryCreateFromConstructor(NewTarget, \"%ListFormatPrototype%\", \u00ab [[InitializedListFormat]], [[Locale]], [[Type]], [[Style]] \u00bb).\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/constructor/prop-desc.js", "esid": " sec-Intl.ListFormat.prototype.constructor", "description": " Checks the \"constructor\" property of the ListFormat prototype object.", "info": " |Intl.ListFormat.prototype.constructor\n\nThe initial value of Intl.ListFormat.prototype.constructor is %ListFormat%.\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js"], "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/format/branding.js", "esid": " sec-Intl.ListFormat.prototype.format", "description": " >Verifies the branding check for the \"format\" function of the ListFormat prototype object.\n", "info": " |Intl.ListFormat.prototype.format ([ list ])\n\n2. If Type(lf) is not Object, throw a TypeError exception.\n3. If lf does not have an [[InitializedListFormat]] internal slot, throw a TypeError exception.\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/format/en-us-default.js", "esid": " sec-Intl.ListFormat.prototype.format", "description": " >Checks the behavior of Intl.ListFormat.prototype.format() in English.\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/format/en-us-disjunction.js", "esid": " sec-Intl.ListFormat.prototype.format", "description": " >Checks the behavior of Intl.ListFormat.prototype.format() in English.\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/format/en-us-narrow.js", "esid": " sec-Intl.ListFormat.prototype.format", "description": " >Checks the behavior of Intl.ListFormat.prototype.format() in English.\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/format/en-us-short.js", "esid": " sec-Intl.ListFormat.prototype.format", "description": " >Checks the behavior of Intl.ListFormat.prototype.format() in English.\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/format/en-us-unit.js", "esid": " sec-Intl.ListFormat.prototype.format", "description": " >Checks the behavior of Intl.ListFormat.prototype.format() in English.\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/format/es-es-long.js", "esid": " sec-Intl.ListFormat.prototype.format", "description": " >Checks the behavior of Intl.ListFormat.prototype.format() in English.\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/format/es-es-narrow.js", "esid": " sec-Intl.ListFormat.prototype.format", "description": " >Checks the behavior of Intl.ListFormat.prototype.format() in English.\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/format/es-es-short.js", "esid": " sec-Intl.ListFormat.prototype.format", "description": " >Checks the behavior of Intl.ListFormat.prototype.format() in English.\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/format/iterable-getiterator-throw.js", "esid": " sec-Intl.ListFormat.prototype.format", "description": " >Checks the behavior of Abstract Operation StringListFromIterablecalled by Intl.ListFormat.prototype.format() while the GetIterator\nthrows error.\n", "info": " |StringListFromIterable\n1. If iterable is undefined, then\na. Return a new empty List.\n2. Let iteratorRecord be ? GetIterator(iterable).\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/format/iterable-invalid.js", "esid": " sec-Intl.ListFormat.prototype.format", "description": " >Checks the behavior of Abstract Operation StringListFromIterable\ncalled by Intl.ListFormat.prototype.format().\n", "info": " |StringListFromIterable\n1. If iterable is undefined, then\na. Return a new empty List.\n2. Let iteratorRecord be ? GetIterator(iterable).\n3. Let list be a new empty List.\n4. Let next be true.\n5. Repeat, while next is not false\na. Set next to ? IteratorStep(iteratorRecord).\nb. If next is not false, then\ni. Let nextValue be ? IteratorValue(next).\nii. If Type(nextValue) is not String, then\n1. Let error be ThrowCompletion(a newly created TypeError object).\n2. Return ? IteratorClose(iteratorRecord, error).\niii. Append nextValue to the end of the List list.\n6. Return list.\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/format/iterable-iteratorclose.js", "esid": " sec-Intl.ListFormat.prototype.format", "description": " >Checks the behavior of Abstract Operation StringListFromIterable\ncalled by Intl.ListFormat.prototype.format() and check the IteratorClose\ncalls return.\n", "info": " |StringListFromIterable\n1. If iterable is undefined, then\na. Return a new empty List.\n2. Let iteratorRecord be ? GetIterator(iterable).\n3. Let list be a new empty List.\n4. Let next be true.\n5. Repeat, while next is not false\na. Set next to ? IteratorStep(iteratorRecord).\nb. If next is not false, then\ni. Let nextValue be ? IteratorValue(next).\nii. If Type(nextValue) is not String, then\n1. Let error be ThrowCompletion(a newly created TypeError object).\n2. Return ? IteratorClose(iteratorRecord, error).\niii. Append nextValue to the end of the List list.\n6. Return list.\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/format/iterable-iteratorstep-throw.js", "esid": " sec-Intl.ListFormat.prototype.format", "description": " >Checks the behavior of Abstract Operation StringListFromIterable\ncalled by Intl.ListFormat.prototype.format() while iteratorStep throws error.\n", "info": " |StringListFromIterable\n1. If iterable is undefined, then\na. Return a new empty List.\n2. Let iteratorRecord be ? GetIterator(iterable).\n3. Let list be a new empty List.\n4. Let next be true.\n5. Repeat, while next is not false\na. Set next to ? IteratorStep(iteratorRecord).\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/format/iterable-iteratorvalue-throw.js", "esid": " sec-Intl.ListFormat.prototype.format", "description": " >Checks the behavior of Abstract Operation StringListFromIterable\ncalled by Intl.ListFormat.prototype.format() while iteratorValue throws error.\n", "info": " |StringListFromIterable\n1. If iterable is undefined, then\na. Return a new empty List.\n2. Let iteratorRecord be ? GetIterator(iterable).\n3. Let list be a new empty List.\n4. Let next be true.\n5. Repeat, while next is not false\na. Set next to ? IteratorStep(iteratorRecord).\nb. If next is not false, then\ni. Let nextValue be ? IteratorValue(next).\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/format/iterable-undefined.js", "esid": " sec-Intl.ListFormat.prototype.format", "description": " >Checks the behavior of Abstract Operation StringListFromIterable\ncalled by Intl.ListFormat.prototype.format(undefined).\n", "info": " |StringListFromIterable\n1. If iterable is undefined, then\na. Return a new empty List.\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/format/iterable.js", "esid": " sec-Intl.ListFormat.prototype.format", "description": " >Checks the behavior of Abstract Operation StringListFromIterable\ncalled by Intl.ListFormat.prototype.format().\n", "info": " |StringListFromIterable\n1. If iterable is undefined, then\na. Return a new empty List.\n2. Let iteratorRecord be ? GetIterator(iterable).\n3. Let list be a new empty List.\n4. Let next be true.\n5. Repeat, while next is not false\na. Set next to ? IteratorStep(iteratorRecord).\nb. If next is not false, then\ni. Let nextValue be ? IteratorValue(next).\nii. If Type(nextValue) is not String, then\n1. Let error be ThrowCompletion(a newly created TypeError object).\n2. Return ? IteratorClose(iteratorRecord, error).\niii. Append nextValue to the end of the List list.\n6. Return list.\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/format/length.js", "esid": " sec-Intl.ListFormat.prototype.format", "description": " >Checks the \"length\" property of Intl.ListFormat.prototype.format().\n", "info": " |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nThe ListFormat constructor is a standard built-in property of the Intl object.\nEvery built-in function object, including constructors, has a length property whose value is an integer. Unless otherwise specified, this value is equal to the largest number of named arguments shown in the subclause headings for the function description. Optional parameters (which are indicated with brackets: [ ]) or rest parameters (which are shown using the form \u00ab...name\u00bb) are not included in the default argument count.\nUnless otherwise specified, the length property of a built-in function object has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/format/name.js", "esid": " sec-Intl.ListFormat.prototype.format", "description": " >Checks the \"name\" property of Intl.ListFormat.prototype.format().\n", "info": " |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, that is not identified as an anonymous function has a name property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification.\nUnless otherwise specified, the name property of a built-in function object, if it exists, has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/format/prop-desc.js", "esid": " sec-Intl.ListFormat.prototype.format", "description": " >Checks the \"format\" property of the ListFormat prototype object.\n", "info": " |Intl.ListFormat.prototype.format ([ list ])\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js"], "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/formatToParts/branding.js", "esid": " sec-Intl.ListFormat.prototype.formatToParts", "description": " >Verifies the branding check for the \"formatToParts\" function of the ListFormat prototype object.\n", "info": " |Intl.ListFormat.prototype.formatToParts([ list ])\n\n2. If Type(lf) is not Object, throw a TypeError exception.\n3. If lf does not have an [[InitializedListFormat]] internal slot, throw a TypeError exception.\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/formatToParts/en-us-default.js", "esid": " sec-Intl.ListFormat.prototype.formatToParts", "description": " >Checks the behavior of Intl.ListFormat.prototype.formatToParts() in English.\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/formatToParts/en-us-disjunction.js", "esid": " sec-Intl.ListFormat.prototype.formatToParts", "description": " >Checks the behavior of Intl.ListFormat.prototype.formatToParts() in English.\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/formatToParts/en-us-narrow.js", "esid": " sec-Intl.ListFormat.prototype.formatToParts", "description": " >Checks the behavior of Intl.ListFormat.prototype.formatToParts() in English.\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/formatToParts/en-us-short.js", "esid": " sec-Intl.ListFormat.prototype.formatToParts", "description": " >Checks the behavior of Intl.ListFormat.prototype.formatToParts() in English.\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/formatToParts/en-us-unit.js", "esid": " sec-Intl.ListFormat.prototype.formatToParts", "description": " >Checks the behavior of Intl.ListFormat.prototype.formatToParts() in English.\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/formatToParts/es-es-long.js", "esid": " sec-Intl.ListFormat.prototype.formatToParts", "description": " >Checks the behavior of Intl.ListFormat.prototype.formatToParts() in English.\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/formatToParts/es-es-narrow.js", "esid": " sec-Intl.ListFormat.prototype.formatToParts", "description": " >Checks the behavior of Intl.ListFormat.prototype.formatToParts() in English.\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/formatToParts/es-es-short.js", "esid": " sec-Intl.ListFormat.prototype.formatToParts", "description": " >Checks the behavior of Intl.ListFormat.prototype.formatToParts() in English.\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/formatToParts/iterable-getiterator-throw.js", "esid": " sec-Intl.ListFormat.prototype.format", "description": " >Checks the behavior of Abstract Operation StringListFromIterable\ncalled by Intl.ListFormat.prototype.formatToParts() while the GetIterator\nthrows error.\n", "info": " |StringListFromIterable\n1. If iterable is undefined, then\na. Return a new empty List.\n2. Let iteratorRecord be ? GetIterator(iterable).\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/formatToParts/iterable-invalid.js", "esid": " sec-Intl.ListFormat.prototype.formatToParts", "description": " >Checks the behavior of Abstract Operation StringListFromIterable\ncalled by Intl.ListFormat.prototype.formatToParts().\n", "info": " |StringListFromIterable\n1. If iterable is undefined, then\na. Return a new empty List.\n2. Let iteratorRecord be ? GetIterator(iterable).\n3. Let list be a new empty List.\n4. Let next be true.\n5. Repeat, while next is not false\na. Set next to ? IteratorStep(iteratorRecord).\nb. If next is not false, then\ni. Let nextValue be ? IteratorValue(next).\nii. If Type(nextValue) is not String, then\n1. Let error be ThrowCompletion(a newly created TypeError object).\n2. Return ? IteratorClose(iteratorRecord, error).\niii. Append nextValue to the end of the List list.\n6. Return list.\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/formatToParts/iterable-iteratorclose.js", "esid": " sec-Intl.ListFormat.prototype.format", "description": " >Checks the behavior of Abstract Operation StringListFromIterable\ncalled by Intl.ListFormat.prototype.formatToParts() and check the IteratorClose\ncalls return.\n", "info": " |StringListFromIterable\n1. If iterable is undefined, then\na. Return a new empty List.\n2. Let iteratorRecord be ? GetIterator(iterable).\n3. Let list be a new empty List.\n4. Let next be true.\n5. Repeat, while next is not false\na. Set next to ? IteratorStep(iteratorRecord).\nb. If next is not false, then\ni. Let nextValue be ? IteratorValue(next).\nii. If Type(nextValue) is not String, then\n1. Let error be ThrowCompletion(a newly created TypeError object).\n2. Return ? IteratorClose(iteratorRecord, error).\niii. Append nextValue to the end of the List list.\n6. Return list.\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/formatToParts/iterable-iteratorstep-throw.js", "esid": " sec-Intl.ListFormat.prototype.format", "description": " >Checks the behavior of Abstract Operation StringListFromIterable\ncalled by Intl.ListFormat.prototype.formatToParts() while iteratorStep throws error.\n", "info": " |StringListFromIterable\n1. If iterable is undefined, then\na. Return a new empty List.\n2. Let iteratorRecord be ? GetIterator(iterable).\n3. Let list be a new empty List.\n4. Let next be true.\n5. Repeat, while next is not false\na. Set next to ? IteratorStep(iteratorRecord).\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/formatToParts/iterable-iteratorvalue-throw.js", "esid": " sec-Intl.ListFormat.prototype.format", "description": " >Checks the behavior of Abstract Operation StringListFromIterable\ncalled by Intl.ListFormat.prototype.formatToParts() while iteratorValue throws error.\n", "info": " |StringListFromIterable\n1. If iterable is undefined, then\na. Return a new empty List.\n2. Let iteratorRecord be ? GetIterator(iterable).\n3. Let list be a new empty List.\n4. Let next be true.\n5. Repeat, while next is not false\na. Set next to ? IteratorStep(iteratorRecord).\nb. If next is not false, then\ni. Let nextValue be ? IteratorValue(next).\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/formatToParts/iterable-undefined.js", "esid": " sec-Intl.ListFormat.prototype.format", "description": " >Checks the behavior of Abstract Operation StringListFromIterable\ncalled by Intl.ListFormat.prototype.formatToParts(undefined).\n", "info": " |StringListFromIterable\n1. If iterable is undefined, then\na. Return a new empty List.\n", "features": ["Intl.ListFormat"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/formatToParts/iterable.js", "esid": " sec-Intl.ListFormat.prototype.formatToParts", "description": " >Checks the behavior of Abstract Operation StringListFromIterable\ncalled by Intl.ListFormat.prototype.formatToParts().\n", "info": " |StringListFromIterable\n1. If iterable is undefined, then\na. Return a new empty List.\n2. Let iteratorRecord be ? GetIterator(iterable).\n3. Let list be a new empty List.\n4. Let next be true.\n5. Repeat, while next is not false\na. Set next to ? IteratorStep(iteratorRecord).\nb. If next is not false, then\ni. Let nextValue be ? IteratorValue(next).\nii. If Type(nextValue) is not String, then\n1. Let error be ThrowCompletion(a newly created TypeError object).\n2. Return ? IteratorClose(iteratorRecord, error).\niii. Append nextValue to the end of the List list.\n6. Return list.\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/formatToParts/length.js", "esid": " sec-Intl.ListFormat.prototype.formatToParts", "description": " >Checks the \"length\" property of Intl.ListFormat.prototype.formatToParts().\n", "info": " |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nThe ListFormat constructor is a standard built-in property of the Intl object.\nEvery built-in function object, including constructors, has a length property whose value is an integer. Unless otherwise specified, this value is equal to the largest number of named arguments shown in the subclause headings for the function description. Optional parameters (which are indicated with brackets: [ ]) or rest parameters (which are shown using the form \u00ab...name\u00bb) are not included in the default argument count.\nUnless otherwise specified, the length property of a built-in function object has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/formatToParts/name.js", "esid": " sec-Intl.ListFormat.prototype.formatToParts", "description": " >Checks the \"name\" property of Intl.ListFormat.prototype.formatToParts().\n", "info": " |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, that is not identified as an anonymous function has a name property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification.\nUnless otherwise specified, the name property of a built-in function object, if it exists, has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/formatToParts/prop-desc.js", "esid": " sec-Intl.ListFormat.prototype.formatToParts", "description": " >Checks the \"formatToParts\" property of the ListFormat prototype object.\n", "info": " |Intl.ListFormat.prototype.formatToParts ()\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js"], "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/prop-desc.js", "esid": " sec-Intl.ListFormat.prototype", "description": " >Checks the \"prototype\" property of the ListFormat constructor.\n", "info": " |Intl.ListFormat.prototype\n\nThe value of Intl.ListFormat.prototype is %ListFormatPrototype%.\n\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/resolvedOptions/branding.js", "esid": " sec-Intl.ListFormat.prototype.resolvedOptions", "description": " Verifies the branding check for the \"resolvedOptions\" function of the ListFormat prototype object.", "info": " |Intl.ListFormat.prototype.resolvedOptions()\n\n2. If Type(pr) is not Object, throw a TypeError exception.\n3. If pr does not have an [[InitializedListFormat]] internal slot, throw a TypeError exception.\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/resolvedOptions/caching.js", "esid": " sec-Intl.ListFormat.prototype.resolvedOptions", "description": " Verifies that the return value of Intl.ListFormat.prototype.resolvedOptions() is not cached.", "info": " |Intl.ListFormat.prototype.resolvedOptions ()\n\n4. Let options be ! ObjectCreate(%ObjectPrototype%).\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/resolvedOptions/length.js", "esid": " sec-Intl.ListFormat.prototype.resolvedOptions", "description": " Checks the \"length\" property of Intl.ListFormat.prototype.resolvedOptions().", "info": " |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nThe ListFormat constructor is a standard built-in property of the Intl object.\nEvery built-in function object, including constructors, has a length property whose value is an integer. Unless otherwise specified, this value is equal to the largest number of named arguments shown in the subclause headings for the function description. Optional parameters (which are indicated with brackets: [ ]) or rest parameters (which are shown using the form \u00ab...name\u00bb) are not included in the default argument count.\nUnless otherwise specified, the length property of a built-in function object has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/resolvedOptions/name.js", "esid": " sec-Intl.ListFormat.prototype.resolvedOptions", "description": " Checks the \"name\" property of Intl.ListFormat.prototype.resolvedOptions().", "info": " |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, that is not identified as an anonymous function has a name property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification.\nUnless otherwise specified, the name property of a built-in function object, if it exists, has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/resolvedOptions/order.js", "esid": " sec-Intl.ListFormat.prototype.resolvedOptions", "description": " Verifies the property order for the object returned by resolvedOptions().", "includes": ["compareArray.js"], "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/resolvedOptions/prop-desc.js", "esid": " sec-Intl.ListFormat.prototype.resolvedOptions", "description": " Checks the \"resolvedOptions\" property of the ListFormat prototype object.", "info": " |Intl.ListFormat.prototype.resolvedOptions ()\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js"], "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/resolvedOptions/type.js", "esid": " sec-Intl.ListFormat.prototype.resolvedOptions", "description": " Checks the properties of the result of Intl.ListFormat.prototype.resolvedOptions().", "info": " |Intl.ListFormat.prototype.resolvedOptions ()\n\n4. Let options be ! ObjectCreate(%ObjectPrototype%).\n5. For each row of Table 1, except the header row, do\nd. Perform ! CreateDataPropertyOrThrow(options, p, v).\n", "includes": ["propertyHelper.js"], "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/toStringTag/toString.js", "esid": " sec-intl.ListFormat.prototype-@@tostringtag", "description": " >Checks Object.prototype.toString with Intl.ListFormat objects.\n", "info": " |Intl.ListFormat.prototype[ @@toStringTag ]\n\nThe initial value of the @@toStringTag property is the string value \"Intl.ListFormat\".\n", "features": ["Intl.ListFormat"]}, {"path": "./test262-main/test/intl402/ListFormat/prototype/toStringTag/toStringTag.js", "esid": " sec-intl.ListFormat.prototype-@@tostringtag", "description": " >Checks the @@toStringTag property of the ListFormat prototype object.\n", "info": " |Intl.ListFormat.prototype[ @@toStringTag ]\n\nThe initial value of the @@toStringTag property is the string value \"Intl.ListFormat\".\n\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.ListFormat", "Symbol.toStringTag"]}, {"path": "./test262-main/test/intl402/Locale/canonicalize-locale-list-take-locale.js", "esid": " sec-intl.locale", "description": " >Verifies CanonicalizeLocaleList will take Intl.Locale as locales.\n", "info": " |CanonicalizeLocaleList ( locales )\n3. If Type(locales) is String or locales has an [[InitializedLocale]] internal slot, then\na. Let O be CreateArrayFromList(\u00ab locales \u00bb).\n\nc. iii. If Type(kValue) is Object and kValue has an [[InitializedLocale]] internal slot, then\n1. Let tag be kValue.[[Locale]].\niv. Else,\n1. Let tag be ? ToString(kValue).\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/constructor-apply-options-canonicalizes-twice.js", "esid": " sec-apply-options-to-tag", "description": " >ApplyOptionsToTag canonicalises the language tag two times.\n", "info": " |10.1.1 ApplyOptionsToTag( tag, options )\n\n...\n9. Set tag to CanonicalizeUnicodeLocaleId(tag).\n10. If language is not undefined,\n...\nb. Set tag to tag with the substring corresponding to the unicode_language_subtag\nproduction of the unicode_language_id replaced by the string language.\n...\n13. Return CanonicalizeUnicodeLocaleId(tag).\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/constructor-getter-order.js", "esid": " sec-intl.locale", "description": " >Checks the order of evaluations of arguments and options for the Locale\nconstructor.\n", "features": ["Intl.Locale"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/intl402/Locale/constructor-locale-object.js", "esid": " sec-intl.locale", "description": " >Verifies canonicalization of specific tags.\n", "info": " |ApplyOptionsToTag( tag, options )\n10. Return CanonicalizeLanguageTag(tag).\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/constructor-newtarget-undefined.js", "esid": " sec-intl.locale", "description": " >Verifies the NewTarget check for Intl.Locale.\n", "info": " |Intl.Locale( tag [, options] )\n\n1. If NewTarget is undefined, throw a TypeError exception.\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/constructor-non-iana-canon.js", "esid": " sec-intl.locale", "description": " >Verifies canonicalization, minimization and maximization of specific tags.\n", "info": " |ApplyOptionsToTag( tag, options )\n10. Return CanonicalizeLanguageTag(tag).\n\nIntl.Locale.prototype.maximize ()\n3. Let maximal be the result of the Add Likely Subtags algorithm applied to loc.[[Locale]].\n\nIntl.Locale.prototype.minimize ()\n3. Let minimal be the result of the Remove Likely Subtags algorithm applied to loc.[[Locale]].\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/constructor-options-calendar-invalid.js", "esid": " sec-intl.locale", "description": " >Checks error cases for the options argument to the Locale\nconstructor.\n", "info": " |Intl.Locale( tag [, options] )\n\n...\n15. If calendar is not undefined, then\na. If calendar does not match the [(3*8alphanum) *(\"-\" (3*8alphanum))] sequence, throw a RangeError exception.\n16. Set opt.[[ca]] to calendar.\n\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/constructor-options-calendar-valid.js", "esid": " sec-intl.locale", "description": " >Checks error cases for the options argument to the Locale\nconstructor.\n", "info": " |Intl.Locale( tag [, options] )\n\n...\n14. Let calendar be ? GetOption(options, \"calendar\", \"string\", undefined, undefined).\n...\n\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/constructor-options-canonicalized.js", "esid": " sec-resolvelocale", "description": " >Values provided as properties of the options-argument to the Locale\nconstructor are converted to canonical form.\n", "info": " |ResolveLocale ( availableLocales, requestedLocales, options, relevantExtensionKeys, localeData )\n\n...\n9.i.iii.1. Let optionsValue be the string optionsValue after performing the algorithm steps to transform Unicode extension values to canonical syntax per Unicode Technical Standard #35 LDML \u00a7 3.2.1 Canonical Unicode Locale Identifiers, treating key as ukey and optionsValue as uvalue productions.\n9.i.iii.2. Let optionsValue be the string optionsValue after performing the algorithm steps to replace Unicode extension values with their canonical form per Unicode Technical Standard #35 LDML \u00a7 3.2.1 Canonical Unicode Locale Identifiers, treating key as ukey and optionsValue as uvalue productions.\n...\n\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/constructor-options-casefirst-invalid.js", "esid": " sec-intl.locale", "description": " >Checks error cases for the options argument to the Locale constructor.\n", "info": " |Intl.Locale( tag [, options] )\n\n...\n22. Let kf be ? GetOption(options, \"caseFirst\", \"string\", \u00ab \"upper\", \"lower\", \"false\" \u00bb, undefined).\n...\n\nGetOption ( options, property, type, values, fallback )\n...\n2.d. If values is not undefined, then\ni. If values does not contain an element equal to value, throw a RangeError exception.\n...\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/constructor-options-casefirst-valid.js", "esid": " sec-intl.locale", "description": " >Checks valid cases for the options argument to the Locale constructor.\n", "info": " |Intl.Locale( tag [, options] )\n\n...\n22. Let kf be ? GetOption(options, \"caseFirst\", \"string\", \u00ab \"upper\", \"lower\", \"false\" \u00bb, undefined).\n23. Set opt.[[kf]] to kf.\n...\n30. Let r be ! ApplyUnicodeExtensionToTag(tag, opt, relevantExtensionKeys).\n...\n\nApplyUnicodeExtensionToTag( tag, options, relevantExtensionKeys )\n\n...\n8. Let locale be the String value that is tag with all Unicode locale extension sequences removed.\n9. Let newExtension be ! CanonicalizeUnicodeExtension(attributes, keywords).\n10. If newExtension is not the empty String, then\na. Let locale be ! InsertUnicodeExtension(locale, newExtension).\n...\n\nCanonicalizeUnicodeExtension( attributes, keywords )\n...\n4. Repeat for each element entry of keywords in List order,\na. Let keyword be entry.[[Key]].\nb. If entry.[[Value]] is not the empty String, then\ni. Let keyword be the string-concatenation of keyword, \"-\", and entry.[[Value]].\nc. Append keyword to fullKeywords.\n...\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/constructor-options-collation-invalid.js", "esid": " sec-intl.locale", "description": " >Checks error cases for the options argument to the Locale constructor.\n", "info": " |Intl.Locale( tag [, options] )\n\n...\n18. If collation is not undefined, then\na. If collation does not match the [(3*8alphanum) *(\"-\" (3*8alphanum))] sequence, throw a RangeError exception.\n\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/constructor-options-collation-valid.js", "esid": " sec-intl.locale", "description": " >Checks valid cases for the options argument to the Locale constructor.\n", "info": " |Intl.Locale( tag [, options] )\n\n...\n17. Let collation be ? GetOption(options, \"collation\", \"string\", undefined, undefined).\n...\n19. Set opt.[[co]] to collation.\n...\n30. Let r be ! ApplyUnicodeExtensionToTag(tag, opt, relevantExtensionKeys).\n...\n\nApplyUnicodeExtensionToTag( tag, options, relevantExtensionKeys )\n\n...\n8. Let locale be the String value that is tag with all Unicode locale extension sequences removed.\n9. Let newExtension be ! CanonicalizeUnicodeExtension(attributes, keywords).\n10. If newExtension is not the empty String, then\na. Let locale be ! InsertUnicodeExtension(locale, newExtension).\n...\n\nCanonicalizeUnicodeExtension( attributes, keywords )\n...\n4. Repeat for each element entry of keywords in List order,\na. Let keyword be entry.[[Key]].\nb. If entry.[[Value]] is not the empty String, then\ni. Let keyword be the string-concatenation of keyword, \"-\", and entry.[[Value]].\nc. Append keyword to fullKeywords.\n...\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/constructor-options-hourcycle-invalid.js", "esid": " sec-intl.locale", "description": " >Checks error cases for the options argument to the Locale constructor.\n", "info": " |Intl.Locale( tag [, options] )\n\n...\n20. Let hc be ? GetOption(options, \"hourCycle\", \"string\", \u00ab \"h11\", \"h12\", \"h23\", \"h24\" \u00bb, undefined).\n...\n\nGetOption ( options, property, type, values, fallback )\n...\n2.d. If values is not undefined, then\ni. If values does not contain an element equal to value, throw a RangeError exception.\n...\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/constructor-options-hourcycle-valid.js", "esid": " sec-intl.locale", "description": " >Checks valid cases for the options argument to the Locale constructor.\n", "info": " |Intl.Locale( tag [, options] )\n\n...\n20. Let hc be ? GetOption(options, \"hourCycle\", \"string\", \u00ab \"h11\", \"h12\", \"h23\", \"h24\" \u00bb, undefined).\n21. Set opt.[[hc]] to hc.\n...\n30. Let r be ! ApplyUnicodeExtensionToTag(tag, opt, relevantExtensionKeys).\n...\n\nApplyUnicodeExtensionToTag( tag, options, relevantExtensionKeys )\n\n...\n8. Let locale be the String value that is tag with all Unicode locale extension sequences removed.\n9. Let newExtension be ! CanonicalizeUnicodeExtension(attributes, keywords).\n10. If newExtension is not the empty String, then\na. Let locale be ! InsertUnicodeExtension(locale, newExtension).\n...\n\nCanonicalizeUnicodeExtension( attributes, keywords )\n...\n4. Repeat for each element entry of keywords in List order,\na. Let keyword be entry.[[Key]].\nb. If entry.[[Value]] is not the empty String, then\ni. Let keyword be the string-concatenation of keyword, \"-\", and entry.[[Value]].\nc. Append keyword to fullKeywords.\n...\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/constructor-options-language-grandfathered.js", "esid": " sec-intl.locale", "description": " >Checks error cases for the options argument to the Locale\nconstructor.\n", "info": " |ApplyOptionsToTag( tag, options )\n...\n3. Let language be ? GetOption(options, \"language\", \"string\", undefined, undefined).\n4. If language is not undefined, then\na. If language does not match the language production, throw a RangeError exception.\nb. If language matches the grandfathered production, throw a RangeError exception.\n...\n\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/constructor-options-language-invalid.js", "esid": " sec-intl.locale", "description": " >Checks error cases for the options argument to the Locale\nconstructor.\n", "info": " |Intl.Locale( tag [, options] )\n10. If options is undefined, then\n11. Else\na. Let options be ? ToObject(options).\n12. Set tag to ? ApplyOptionsToTag(tag, options).\n\nApplyOptionsToTag( tag, options )\n...\n4. If language is not undefined, then\na. If language does not match the language production, throw a RangeError exception.\n...\n\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/constructor-options-language-valid-undefined.js", "esid": " sec-intl.locale", "description": " >Verify valid language option values (undefined)\n", "info": " |Intl.Locale( tag [, options] )\n10. If options is undefined, then\n11. Else\na. Let options be ? ToObject(options).\n12. Set tag to ? ApplyOptionsToTag(tag, options).\n\nApplyOptionsToTag( tag, options )\n\n2. If IsStructurallyValidLanguageTag(tag) is false, throw a RangeError exception.\n...\n\nIsStructurallyValidLanguageTag ( locale )\n\nThe IsStructurallyValidLanguageTag abstract operation verifies that the\nlocale argument (which must be a String value)\n\nrepresents a well-formed Unicode BCP 47 Locale Identifier\" as specified in\nUnicode Technical Standard 35 section 3.2, or successor,\n\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/constructor-options-language-valid.js", "esid": " sec-intl.locale", "description": " >Verify valid language option values (various)\n", "info": " |Intl.Locale( tag [, options] )\n10. If options is undefined, then\n11. Else\na. Let options be ? ToObject(options).\n12. Set tag to ? ApplyOptionsToTag(tag, options).\n\nApplyOptionsToTag( tag, options )\n...\n2. If IsStructurallyValidLanguageTag(tag) is false, throw a RangeError exception.\n3. Let language be ? GetOption(options, \"language\", \"string\", undefined, undefined).\n4. If language is not undefined, then\na. If language does not match the unicode_language_subtag production, throw a RangeError exception.\n\nIsStructurallyValidLanguageTag ( locale )\n\nThe IsStructurallyValidLanguageTag abstract operation verifies that the\nlocale argument (which must be a String value)\n\nrepresents a well-formed Unicode BCP 47 Locale Identifier\" as specified in\nUnicode Technical Standard 35 section 3.2, or successor,\n\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/constructor-options-numberingsystem-invalid.js", "esid": " sec-intl.locale", "description": " >Checks error cases for the options argument to the Locale constructor.\n", "info": " |Intl.Locale( tag [, options] )\n\n...\n28. If numberingSystem is not undefined, then\na. If numberingSystem does not match the [(3*8alphanum) *(\"-\" (3*8alphanum))] sequence, throw a RangeError exception.\n\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/constructor-options-numberingsystem-valid.js", "esid": " sec-intl.locale", "description": " >Checks valid cases for the options argument to the Locale constructor.\n", "info": " |Intl.Locale( tag [, options] )\n\n...\n27. Let numberingSystem be ? GetOption(options, \"numberingSystem\", \"string\", undefined, undefined).\n...\n29. Set opt.[[nu]] to numberingSystem.\n...\n30. Let r be ! ApplyUnicodeExtensionToTag(tag, opt, relevantExtensionKeys).\n...\n\nApplyUnicodeExtensionToTag( tag, options, relevantExtensionKeys )\n\n...\n8. Let locale be the String value that is tag with all Unicode locale extension sequences removed.\n9. Let newExtension be ! CanonicalizeUnicodeExtension(attributes, keywords).\n10. If newExtension is not the empty String, then\na. Let locale be ! InsertUnicodeExtension(locale, newExtension).\n...\n\nCanonicalizeUnicodeExtension( attributes, keywords )\n...\n4. Repeat for each element entry of keywords in List order,\na. Let keyword be entry.[[Key]].\nb. If entry.[[Value]] is not the empty String, then\ni. Let keyword be the string-concatenation of keyword, \"-\", and entry.[[Value]].\nc. Append keyword to fullKeywords.\n...\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/constructor-options-numeric-undefined.js", "esid": " sec-intl.locale", "description": " Verifies the behavior of an undefined numeric option to the Locale constructor.", "info": " |Intl.Locale( tag [, options] )\n\n...\n24. Let kn be ? GetOption(options, \"numeric\", \"boolean\", undefined, undefined).\n25. If kn is not undefined, set kn to ! ToString(kn).\n...\n30. Let r be ! ApplyUnicodeExtensionToTag(tag, opt, relevantExtensionKeys).\n...\n\nApplyUnicodeExtensionToTag( tag, options, relevantExtensionKeys )\n\n...\n8. Let locale be the String value that is tag with all Unicode locale extension sequences removed.\n9. Let newExtension be ! CanonicalizeUnicodeExtension(attributes, keywords).\n10. If newExtension is not the empty String, then\na. Let locale be ! InsertUnicodeExtension(locale, newExtension).\n...\n\nCanonicalizeUnicodeExtension( attributes, keywords )\n...\n4. Repeat for each element entry of keywords in List order,\na. Let keyword be entry.[[Key]].\nb. If entry.[[Value]] is not the empty String, then\ni. Let keyword be the string-concatenation of keyword, \"-\", and entry.[[Value]].\nc. Append keyword to fullKeywords.\n...\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/constructor-options-numeric-valid.js", "esid": " sec-intl.locale", "description": " >Checks valid cases for the options argument to the Locale constructor.\n", "info": " |Intl.Locale( tag [, options] )\n\n...\n24. Let kn be ? GetOption(options, \"numeric\", \"boolean\", undefined, undefined).\n25. If kn is not undefined, set kn to ! ToString(kn).\n...\n30. Let r be ! ApplyUnicodeExtensionToTag(tag, opt, relevantExtensionKeys).\n...\n\nApplyUnicodeExtensionToTag( tag, options, relevantExtensionKeys )\n\n...\n8. Let locale be the String value that is tag with all Unicode locale extension sequences removed.\n9. Let newExtension be ! CanonicalizeUnicodeExtension(attributes, keywords).\n10. If newExtension is not the empty String, then\na. Let locale be ! InsertUnicodeExtension(locale, newExtension).\n...\n\nCanonicalizeUnicodeExtension( attributes, keywords )\n...\n4. Repeat for each element entry of keywords in List order,\na. Let keyword be entry.[[Key]].\nb. If entry.[[Value]] is not the empty String, then\ni. Let keyword be the string-concatenation of keyword, \"-\", and entry.[[Value]].\nc. Append keyword to fullKeywords.\n...\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/constructor-options-region-invalid.js", "esid": " sec-intl.locale", "description": " >Checks error cases for the options argument to the Locale\nconstructor.\n", "info": " |Intl.Locale( tag [, options] )\n10. If options is undefined, then\n11. Else\na. Let options be ? ToObject(options).\n12. Set tag to ? ApplyOptionsToTag(tag, options).\n\nApplyOptionsToTag( tag, options )\n...\n8. If region is not undefined, then\na. If region does not match the region production, throw a RangeError exception.\n...\n\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/constructor-options-region-valid.js", "esid": " sec-intl.locale", "description": " >Checks error cases for the options argument to the Locale\nconstructor.\n", "info": " |Intl.Locale( tag [, options] )\n10. If options is undefined, then\n11. Else\na. Let options be ? ToObject(options).\n12. Set tag to ? ApplyOptionsToTag(tag, options).\n\nApplyOptionsToTag( tag, options )\n...\n7. Let region be ? GetOption(options, \"region\", \"string\", undefined, undefined).\n...\n9. If tag matches neither the privateuse nor the grandfathered production, then\n...\nd. If region is not undefined, then\ni. If tag does not contain a region production, then\n1. Set tag to the concatenation of the language production of tag, the substring corresponding to the \"-\" script production if present, \"-\", region, and the rest of tag.\nii. Else,\n1. Set tag to tag with the substring corresponding to the region production replaced by the string region.\n\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/constructor-options-script-invalid.js", "esid": " sec-intl.locale", "description": " >Checks error cases for the options argument to the Locale\nconstructor.\n", "info": " |Intl.Locale( tag [, options] )\n10. If options is undefined, then\n11. Else\na. Let options be ? ToObject(options).\n12. Set tag to ? ApplyOptionsToTag(tag, options).\n\nApplyOptionsToTag( tag, options )\n...\n6. If script is not undefined, then\na. If script does not match the script production, throw a RangeError exception.\n...\n\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/constructor-options-script-valid-undefined.js", "esid": " sec-intl.locale", "description": " >Verify valid script option values (undefined)\n", "info": " |Intl.Locale( tag [, options] )\n10. If options is undefined, then\n11. Else\na. Let options be ? ToObject(options).\n12. Set tag to ? ApplyOptionsToTag(tag, options).\n\nApplyOptionsToTag( tag, options )\n...\n5. Let script be ? GetOption(options, \"script\", \"string\", undefined, undefined).\n...\n9. If tag matches neither the privateuse nor the grandfathered production, then\n...\nc. If script is not undefined, then\ni. If tag does not contain a script production, then\n1. Set tag to the concatenation of the language production of tag, \"-\", script, and the rest of tag.\nii. Else,\n1. Set tag to tag with the substring corresponding to the script production replaced by the string script.\n\n\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/constructor-options-script-valid.js", "esid": " sec-intl.locale", "description": " >Verify valid language option values (various)\n", "info": " |Intl.Locale( tag [, options] )\n9. Else,\na. Let tag be ? ToString(tag).\n10. If options is undefined, then\n11. Else\na. Let options be ? ToObject(options).\n12. Set tag to ? ApplyOptionsToTag(tag, options).\n\nApplyOptionsToTag( tag, options )\n...\n5. Let script be ? GetOption(options, \"script\", \"string\", undefined, undefined).\n...\n9. If tag matches neither the privateuse nor the grandfathered production, then\n...\nc. If script is not undefined, then\ni. If tag does not contain a script production, then\n1. Set tag to the concatenation of the language production of tag, \"-\", script, and the rest of tag.\nii. Else,\n1. Set tag to tag with the substring corresponding to the script production replaced by the string script.\n\n\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/constructor-options-throwing-getters.js", "esid": " sec-Intl.Locale", "description": " Checks the propagation of exceptions from the options for the Locale constructor.", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/constructor-parse-twice.js", "esid": " sec-intl.locale", "description": " >Verifies the handling of options with grandfathered tags.\n", "info": " |Intl.Locale( tag [, options] )\n12. Set tag to ? ApplyOptionsToTag(tag, options).\n14. Let calendar be ? GetOption(options, \"calendar\", \"string\", undefined, undefined).\n16. Set opt.[[ca]] to calendar.\n30. Let r be ! ApplyUnicodeExtensionToTag(tag, opt, relevantExtensionKeys).\n\nApplyOptionsToTag( tag, options )\n...\n2. If IsStructurallyValidLanguageTag(tag) is false, throw a RangeError exception.\n\nIsStructurallyValidLanguageTag ( locale )\n\nThe IsStructurallyValidLanguageTag abstract operation verifies that the\nlocale argument (which must be a String value)\n\nrepresents a well-formed Unicode BCP 47 Locale Identifier\" as specified in\nUnicode Technical Standard 35 section 3.2, or successor,\n\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/constructor-tag-tostring.js", "esid": " sec-intl.locale", "description": " >Checks error cases for the string conversion of the locale argument to the\nLocale constructor.\n", "info": " |Intl.Locale( tag [, options] )\n\n...\n8. If Type(tag) is Object and tag has an [[InitializedLocale]] internal slot, then\n9. Else,\na. Let tag be ? ToString(tag).\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/constructor-tag.js", "esid": " sec-intl.locale", "description": " >Verifies canonicalization of specific tags.\n", "info": " |ApplyOptionsToTag( tag, options )\n2. If IsStructurallyValidLanguageTag(tag) is false, throw a RangeError exception.\n...\n13. Return CanonicalizeLanguageTag(tag).\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/constructor-unicode-ext-invalid.js", "esid": " sec-intl.locale", "description": " >Verifies treatment of specific structurally invalid tags.\n", "info": " |ApplyOptionsToTag( tag, options )\n2. If IsStructurallyValidLanguageTag(tag) is false, throw a RangeError exception.\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/constructor-unicode-ext-valid.js", "esid": " sec-intl.locale", "description": " >Verifies canonicalization of specific tags.\n", "info": " |ApplyOptionsToTag( tag, options )\n10. Return CanonicalizeLanguageTag(tag).\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/extensions-private.js", "esid": " sec-intl.locale", "description": " >Verifies handling of options with privateuse tags.\n", "info": " |ApplyOptionsToTag( tag, options )\n\n\n...\n9. If tag matches neither the privateuse nor the grandfathered production, then\n...\n\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/function-prototype.js", "esid": " sec-intl.locale", "description": " >The value of the [[Prototype]] internal slot of the Intl.Locale constructor is the\nintrinsic object %FunctionPrototype%.\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/getters-grandfathered.js", "esid": " sec-intl.locale", "description": " >Verifies getters with grandfathered tags.\n", "info": " |get Intl.Locale.prototype.baseName\n5. Return the substring of locale corresponding to the\nlanguage [\"-\" script] [\"-\" region] *(\"-\" variant)\nsubsequence of theunicode_language_id grammar.\n\nget Intl.Locale.prototype.language\n5. Return the substring of locale corresponding to the\nunicode_language_subtag production.\n\nget Intl.Locale.prototype.script\n6. Return the substring of locale corresponding to the\nunicode_script_subtag production.\n\nget Intl.Locale.prototype.region\n6. Return the substring of locale corresponding to the unicode_region_subtag\nproduction.\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/getters-missing.js", "esid": " sec-intl.locale", "description": " >Verifies getters with missing tags.\n", "info": " |get Intl.Locale.prototype.baseName\n5. Return the substring of locale corresponding to the\nlanguage [\"-\" script] [\"-\" region] *(\"-\" variant)\nsubsequence of the langtag grammar.\n\nget Intl.Locale.prototype.language\n4. Return the substring of locale corresponding to the language production.\n\nget Intl.Locale.prototype.script\n6. If locale does not contain the [\"-\" script] sequence, return undefined.\n7. Return the substring of locale corresponding to the script production.\n\nget Intl.Locale.prototype.region\n6. If locale does not contain the [\"-\" region] sequence, return undefined.\n7. Return the substring of locale corresponding to the region production.\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/getters.js", "esid": " sec-intl.locale", "description": " >Verifies getters with normal tags.\n", "info": " |Intl.Locale.prototype.toString ()\n3. Return loc.[[Locale]].\n\nget Intl.Locale.prototype.baseName\n5. Return the substring of locale corresponding to the\nlanguage [\"-\" script] [\"-\" region] *(\"-\" variant)\nsubsequence of the langtag grammar.\n\nget Intl.Locale.prototype.language\n4. Return the substring of locale corresponding to the language production.\n\nget Intl.Locale.prototype.script\n7. Return the substring of locale corresponding to the script production.\n\nget Intl.Locale.prototype.region\n7. Return the substring of locale corresponding to the region production.\n\nget Intl.Locale.prototype.calendar\n3. Return loc.[[Calendar]].\n\nget Intl.Locale.prototype.collation\n3. Return loc.[[Collation]].\n\nget Intl.Locale.prototype.hourCycle\n3. Return loc.[[HourCycle]].\n\nget Intl.Locale.prototype.caseFirst\nThis property only exists if %Locale%.[[RelevantExtensionKeys]] contains \"kf\".\n3. Return loc.[[CaseFirst]].\n\nget Intl.Locale.prototype.numeric\nThis property only exists if %Locale%.[[RelevantExtensionKeys]] contains \"kn\".\n3. Return loc.[[Numeric]].\n\nget Intl.Locale.prototype.numberingSystem\n3. Return loc.[[NumberingSystem]].\n\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/instance-extensibility.js", "esid": " sec-intl.locale", "description": " >Intl.Locale instance object extensibility\n", "info": " |17 ECMAScript Standard Built-in Objects:\n\nUnless specified otherwise, the [[Extensible]] internal slot\nof a built-in object initially has the value true.\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/instance.js", "esid": " sec-intl.locale", "description": " >Intl.Locale instance object created from %LocalePrototype%.\n", "info": " |Intl.Locale( tag [, options] )\n\n6. Let locale be ?\nOrdinaryCreateFromConstructor(NewTarget, %LocalePrototype%,\ninternalSlotsList).\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/invalid-tag-throws-boolean.js", "esid": " sec-intl.locale", "description": " >Verifies the type check on the tag argument to Intl.Locale.\n", "info": " |Intl.Locale( tag [, options] )\n\n7. If Type(tag) is not String or Object, throw a TypeError exception.\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/invalid-tag-throws-null.js", "esid": " sec-intl.locale", "description": " >Verifies the type check on the tag argument to Intl.Locale.\n", "info": " |Intl.Locale( tag [, options] )\n\n7. If Type(tag) is not String or Object, throw a TypeError exception.\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/invalid-tag-throws-number.js", "esid": " sec-intl.locale", "description": " >Verifies the type check on the tag argument to Intl.Locale.\n", "info": " |Intl.Locale( tag [, options] )\n\n7. If Type(tag) is not String or Object, throw a TypeError exception.\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/invalid-tag-throws-symbol.js", "esid": " sec-intl.locale", "description": " >Verifies the type check on the tag argument to Intl.Locale.\n", "info": " |Intl.Locale( tag [, options] )\n\n7. If Type(tag) is not String or Object, throw a TypeError exception.\n", "features": ["Intl.Locale", "Symbol"]}, {"path": "./test262-main/test/intl402/Locale/invalid-tag-throws-undefined.js", "esid": " sec-intl.locale", "description": " >Verifies the type check on the tag argument to Intl.Locale.\n", "info": " |Intl.Locale( tag [, options] )\n\n7. If Type(tag) is not String or Object, throw a TypeError exception.\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/invalid-tag-throws.js", "esid": " sec-intl.locale", "description": " >Checks error cases for the options argument to the Locale\nconstructor.\n", "info": " |Intl.Locale( tag [, options] )\n\n...\n11. Else\na. Let options be ? ToObject(options).\n12. Set tag to ? ApplyOptionsToTag(tag, options).\n...\n\nApplyOptionsToTag( tag, options )\n\n...\n2. If IsStructurallyValidLanguageTag(tag) is false, throw a RangeError exception.\n...\n", "includes": ["testIntl.js"], "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/length.js", "esid": " sec-intl.locale", "description": " >Checks the \"length\" property of the Locale constructor.\n", "info": " |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nThe Locale constructor is a standard built-in property of the Intl object.\nEvery built-in function object, including constructors, has a length property whose value is an integer. Unless otherwise specified, this value is equal to the largest number of named arguments shown in the subclause headings for the function description. Optional parameters (which are indicated with brackets: [ ]) or rest parameters (which are shown using the form \u00ab...name\u00bb) are not included in the default argument count.\nUnless otherwise specified, the length property of a built-in function object has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/likely-subtags.js", "esid": " sec-intl.locale", "description": " >Verifies canonicalization, minimization and maximization of specific tags.\n", "info": " |Intl.Locale.prototype.maximize ()\n3. Let maximal be the result of the Add Likely Subtags algorithm applied to loc.[[Locale]].\n\nIntl.Locale.prototype.minimize ()\n3. Let minimal be the result of the Remove Likely Subtags algorithm applied to loc.[[Locale]].\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/name.js", "esid": " sec-intl.locale", "description": " >Checks the \"name\" property of the Locale constructor.\n", "info": " |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, that is not identified as an anonymous function has a name property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification.\nUnless otherwise specified, the name property of a built-in function object, if it exists, has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prop-desc.js", "esid": " sec-intl.locale", "description": " >\"Locale\" property of Intl.\n", "info": " |Intl.Locale (...)\n\n7 Requirements for Standard Built-in ECMAScript Objects\n\nUnless specified otherwise in this document, the objects, functions, and constructors\ndescribed in this standard are subject to the generic requirements and restrictions\nspecified for standard built-in ECMAScript objects in the ECMAScript 2018 Language\nSpecification, 9th edition, clause 17, or successor.\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the\nattributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true }\nunless otherwise specified.\n\n", "includes": ["propertyHelper.js"], "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/baseName/branding.js", "esid": " sec-Intl.Locale.prototype.baseName", "description": " >Verifies the branding check for the \"baseName\" property of the Locale prototype object.\n", "info": " |Intl.Locale.prototype.baseName\n\n2. If Type(loc) is not Object or loc does not have an [[InitializedLocale]] internal slot, then\na. Throw a TypeError exception.\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/baseName/name.js", "esid": " sec-intl.locale.prototype.baseName", "description": " >Checks the \"name\" property of Intl.Locale.prototype.baseName.\n", "info": " |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, that is not identified as an anonymous function has a name property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification. Functions that are specified as get or set accessor functions of built-in properties have \"get \" or \"set \" prepended to the property name string.\nUnless otherwise specified, the name property of a built-in function object, if it exists, has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/baseName/prop-desc.js", "esid": " sec-intl.locale", "description": " >Checks the \"baseName\" property of the Locale prototype object.\n", "info": " |Intl.Locale.prototype.baseName\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\n\nEvery accessor property described in clauses 18 through 26 and in Annex B.2 has the attributes { [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified. If only a get accessor function is described, the set accessor function is the default value, undefined.\n", "includes": ["propertyHelper.js"], "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/calendar/branding.js", "esid": " sec-Intl.Locale.prototype.calendar", "description": " >Verifies the branding check for the \"calendar\" property of the Locale prototype object.\n", "info": " |Intl.Locale.prototype.calendar\n\n2. If Type(loc) is not Object or loc does not have an [[InitializedLocale]] internal slot, then\na. Throw a TypeError exception.\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/calendar/name.js", "esid": " sec-intl.locale.prototype.calendar", "description": " >Checks the \"name\" property of Intl.Locale.prototype.calendar.\n", "info": " |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, that is not identified as an anonymous function has a name property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification. Functions that are specified as get or set accessor functions of built-in properties have \"get \" or \"set \" prepended to the property name string.\nUnless otherwise specified, the name property of a built-in function object, if it exists, has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/calendar/prop-desc.js", "esid": " sec-intl.locale", "description": " >Checks the \"calendar\" property of the Locale prototype object.\n", "info": " |Intl.Locale.prototype.calendar\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\n\nEvery accessor property described in clauses 18 through 26 and in Annex B.2 has the attributes { [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified. If only a get accessor function is described, the set accessor function is the default value, undefined.\n", "includes": ["propertyHelper.js"], "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/caseFirst/branding.js", "esid": " sec-Intl.Locale.prototype.caseFirst", "description": " >Verifies the branding check for the \"caseFirst\" property of the Locale prototype object.\n", "info": " |Intl.Locale.prototype.caseFirst\n\n2. If Type(loc) is not Object or loc does not have an [[InitializedLocale]] internal slot, then\na. Throw a TypeError exception.\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/caseFirst/name.js", "esid": " sec-intl.locale.prototype.caseFirst", "description": " >Checks the \"name\" property of Intl.Locale.prototype.caseFirst.\n", "info": " |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, that is not identified as an anonymous function has a name property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification. Functions that are specified as get or set accessor functions of built-in properties have \"get \" or \"set \" prepended to the property name string.\nUnless otherwise specified, the name property of a built-in function object, if it exists, has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/caseFirst/prop-desc.js", "esid": " sec-intl.locale", "description": " >Checks the \"caseFirst\" property of the Locale prototype object.\n", "info": " |Intl.Locale.prototype.caseFirst\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\n\nEvery accessor property described in clauses 18 through 26 and in Annex B.2 has the attributes { [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified. If only a get accessor function is described, the set accessor function is the default value, undefined.\n", "includes": ["propertyHelper.js"], "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/collation/branding.js", "esid": " sec-Intl.Locale.prototype.collation", "description": " >Verifies the branding check for the \"collation\" property of the Locale prototype object.\n", "info": " |Intl.Locale.prototype.collation\n\n2. If Type(loc) is not Object or loc does not have an [[InitializedLocale]] internal slot, then\na. Throw a TypeError exception.\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/collation/name.js", "esid": " sec-intl.locale.prototype.collation", "description": " >Checks the \"name\" property of Intl.Locale.prototype.collation.\n", "info": " |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, that is not identified as an anonymous function has a name property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification. Functions that are specified as get or set accessor functions of built-in properties have \"get \" or \"set \" prepended to the property name string.\nUnless otherwise specified, the name property of a built-in function object, if it exists, has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/collation/prop-desc.js", "esid": " sec-intl.locale", "description": " >Checks the \"collation\" property of the Locale prototype object.\n", "info": " |Intl.Locale.prototype.collation\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\n\nEvery accessor property described in clauses 18 through 26 and in Annex B.2 has the attributes { [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified. If only a get accessor function is described, the set accessor function is the default value, undefined.\n", "includes": ["propertyHelper.js"], "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/constructor/prop-desc.js", "esid": " sec-intl.locale.prototype.constructor", "description": " >Checks the \"constructor\" property of the Locale prototype object.\n", "info": " |Intl.Locale.prototype.constructor\n\nThe initial value of Intl.Locale.prototype.constructor is %Locale%.\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js"], "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/hourCycle/branding.js", "esid": " sec-Intl.Locale.prototype.hourCycle", "description": " >Verifies the branding check for the \"hourCycle\" property of the Locale prototype object.\n", "info": " |Intl.Locale.prototype.hourCycle\n\n2. If Type(loc) is not Object or loc does not have an [[InitializedLocale]] internal slot, then\na. Throw a TypeError exception.\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/hourCycle/name.js", "esid": " sec-intl.locale.prototype.hourCycle", "description": " >Checks the \"name\" property of Intl.Locale.prototype.hourCycle.\n", "info": " |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, that is not identified as an anonymous function has a name property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification. Functions that are specified as get or set accessor functions of built-in properties have \"get \" or \"set \" prepended to the property name string.\nUnless otherwise specified, the name property of a built-in function object, if it exists, has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/hourCycle/prop-desc.js", "esid": " sec-intl.locale", "description": " >Checks the \"hourCycle\" property of the Locale prototype object.\n", "info": " |Intl.Locale.prototype.hourCycle\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\n\nEvery accessor property described in clauses 18 through 26 and in Annex B.2 has the attributes { [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified. If only a get accessor function is described, the set accessor function is the default value, undefined.\n", "includes": ["propertyHelper.js"], "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/language/branding.js", "esid": " sec-Intl.Locale.prototype.language", "description": " >Verifies the branding check for the \"language\" property of the Locale prototype object.\n", "info": " |Intl.Locale.prototype.language\n\n2. If Type(loc) is not Object or loc does not have an [[InitializedLocale]] internal slot, then\na. Throw a TypeError exception.\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/language/name.js", "esid": " sec-intl.locale.prototype.language", "description": " >Checks the \"name\" property of Intl.Locale.prototype.language.\n", "info": " |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, that is not identified as an anonymous function has a name property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification. Functions that are specified as get or set accessor functions of built-in properties have \"get \" or \"set \" prepended to the property name string.\nUnless otherwise specified, the name property of a built-in function object, if it exists, has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/language/prop-desc.js", "esid": " sec-intl.locale", "description": " >Checks the \"language\" property of the Locale prototype object.\n", "info": " |Intl.Locale.prototype.language\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\n\nEvery accessor property described in clauses 18 through 26 and in Annex B.2 has the attributes { [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified. If only a get accessor function is described, the set accessor function is the default value, undefined.\n", "includes": ["propertyHelper.js"], "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/maximize/branding.js", "esid": " sec-Intl.Locale.prototype.maximize", "description": " >Verifies the branding check for the \"maximize\" function of the Locale prototype object.\n", "info": " |Intl.Locale.prototype.maximize\n\n2. If Type(loc) is not Object or loc does not have an [[InitializedLocale]] internal slot, then\na. Throw a TypeError exception.\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/maximize/length.js", "esid": " sec-intl.locale.prototype.maximize", "description": " >Checks the \"length\" property of Intl.Locale.prototype.maximize().\n", "info": " |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nThe Locale constructor is a standard built-in property of the Intl object.\nEvery built-in function object, including constructors, has a length property whose value is an integer. Unless otherwise specified, this value is equal to the largest number of named arguments shown in the subclause headings for the function description. Optional parameters (which are indicated with brackets: [ ]) or rest parameters (which are shown using the form \u00ab...name\u00bb) are not included in the default argument count.\nUnless otherwise specified, the length property of a built-in function object has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/maximize/name.js", "esid": " sec-intl.locale.prototype.maximize", "description": " >Checks the \"name\" property of Intl.Locale.prototype.maximize().\n", "info": " |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, that is not identified as an anonymous function has a name property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification.\nUnless otherwise specified, the name property of a built-in function object, if it exists, has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/maximize/prop-desc.js", "esid": " sec-intl.locale.prototype.maximize", "description": " >Checks the \"maximize\" property of the Locale prototype object.\n", "info": " |Intl.Locale.prototype.maximize ()\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js"], "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/minimize/branding.js", "esid": " sec-Intl.Locale.prototype.minimize", "description": " >Verifies the branding check for the \"minimize\" function of the Locale prototype object.\n", "info": " |Intl.Locale.prototype.minimize\n\n2. If Type(loc) is not Object or loc does not have an [[InitializedLocale]] internal slot, then\na. Throw a TypeError exception.\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/minimize/length.js", "esid": " sec-intl.locale.prototype.minimize", "description": " >Checks the \"length\" property of Intl.Locale.prototype.minimize().\n", "info": " |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nThe Locale constructor is a standard built-in property of the Intl object.\nEvery built-in function object, including constructors, has a length property whose value is an integer. Unless otherwise specified, this value is equal to the largest number of named arguments shown in the subclause headings for the function description. Optional parameters (which are indicated with brackets: [ ]) or rest parameters (which are shown using the form \u00ab...name\u00bb) are not included in the default argument count.\nUnless otherwise specified, the length property of a built-in function object has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/minimize/name.js", "esid": " sec-intl.locale.prototype.minimize", "description": " >Checks the \"name\" property of Intl.Locale.prototype.minimize().\n", "info": " |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, that is not identified as an anonymous function has a name property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification.\nUnless otherwise specified, the name property of a built-in function object, if it exists, has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/minimize/prop-desc.js", "esid": " sec-intl.locale", "description": " >Checks the \"minimize\" property of the Locale prototype object.\n", "info": " |Intl.Locale.prototype.minimize ()\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js"], "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/minimize/removing-likely-subtags-first-adds-likely-subtags.js", "esid": " sec-Intl.Locale.prototype.minimize", "description": " >The \"Remove Likely Subtags\" algorithm adds likely subtags before processing the locale.\n", "info": " |Intl.Locale.prototype.minimize ()\n3. Let minimal be the result of the Remove Likely Subtags algorithm applied to loc.[[Locale]].\nIf an error is signaled, set minimal to loc.[[Locale]].\n\nUTS 35, \u00a74.3 Likely Subtags\nRemove Likely Subtags\n\n1. First get max = AddLikelySubtags(inputLocale). If an error is signaled, return it.\n2. ...\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/numberingSystem/branding.js", "esid": " sec-Intl.Locale.prototype.numberingSystem", "description": " >Verifies the branding check for the \"numberingSystem\" property of the Locale prototype object.\n", "info": " |Intl.Locale.prototype.numberingSystem\n\n2. If Type(loc) is not Object or loc does not have an [[InitializedLocale]] internal slot, then\na. Throw a TypeError exception.\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/numberingSystem/name.js", "esid": " sec-intl.locale.prototype.numberingSystem", "description": " >Checks the \"name\" property of Intl.Locale.prototype.numberingSystem.\n", "info": " |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, that is not identified as an anonymous function has a name property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification. Functions that are specified as get or set accessor functions of built-in properties have \"get \" or \"set \" prepended to the property name string.\nUnless otherwise specified, the name property of a built-in function object, if it exists, has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/numberingSystem/prop-desc.js", "esid": " sec-intl.locale", "description": " >Checks the \"numberingSystem\" property of the Locale prototype object.\n", "info": " |Intl.Locale.prototype.numberingSystem\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\n\nEvery accessor property described in clauses 18 through 26 and in Annex B.2 has the attributes { [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified. If only a get accessor function is described, the set accessor function is the default value, undefined.\n", "includes": ["propertyHelper.js"], "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/numeric/branding.js", "esid": " sec-Intl.Locale.prototype.numeric", "description": " >Verifies the branding check for the \"numeric\" property of the Locale prototype object.\n", "info": " |Intl.Locale.prototype.numeric\n\n2. If Type(loc) is not Object or loc does not have an [[InitializedLocale]] internal slot, then\na. Throw a TypeError exception.\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/numeric/name.js", "esid": " sec-intl.locale.prototype.numeric", "description": " >Checks the \"name\" property of Intl.Locale.prototype.numeric.\n", "info": " |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, that is not identified as an anonymous function has a name property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification. Functions that are specified as get or set accessor functions of built-in properties have \"get \" or \"set \" prepended to the property name string.\nUnless otherwise specified, the name property of a built-in function object, if it exists, has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/numeric/prop-desc.js", "esid": " sec-intl.locale", "description": " >Checks the \"numeric\" property of the Locale prototype object.\n", "info": " |Intl.Locale.prototype.numeric\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\n\nEvery accessor property described in clauses 18 through 26 and in Annex B.2 has the attributes { [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified. If only a get accessor function is described, the set accessor function is the default value, undefined.\n", "includes": ["propertyHelper.js"], "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/prop-desc.js", "esid": " sec-intl.locale.prototype", "description": " >Checks the \"prototype\" property of the Locale constructor.\n", "info": " |Intl.Locale.prototype\n\nThe value of Intl.Locale.prototype is %LocalePrototype%.\n\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/region/branding.js", "esid": " sec-Intl.Locale.prototype.region", "description": " >Verifies the branding check for the \"region\" property of the Locale prototype object.\n", "info": " |Intl.Locale.prototype.region\n\n2. If Type(loc) is not Object or loc does not have an [[InitializedLocale]] internal slot, then\na. Throw a TypeError exception.\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/region/name.js", "esid": " sec-intl.locale.prototype.region", "description": " >Checks the \"name\" property of Intl.Locale.prototype.region.\n", "info": " |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, that is not identified as an anonymous function has a name property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification. Functions that are specified as get or set accessor functions of built-in properties have \"get \" or \"set \" prepended to the property name string.\nUnless otherwise specified, the name property of a built-in function object, if it exists, has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/region/prop-desc.js", "esid": " sec-intl.locale", "description": " >Checks the \"region\" property of the Locale prototype object.\n", "info": " |Intl.Locale.prototype.region\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAregion objects in the ECMAregion 2019 region Specification, 10th edition, clause 17, or successor.\n\nEvery accessor property described in clauses 18 through 26 and in Annex B.2 has the attributes { [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified. If only a get accessor function is described, the set accessor function is the default value, undefined.\n", "includes": ["propertyHelper.js"], "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/script/branding.js", "esid": " sec-Intl.Locale.prototype.script", "description": " >Verifies the branding check for the \"script\" property of the Locale prototype object.\n", "info": " |Intl.Locale.prototype.script\n\n2. If Type(loc) is not Object or loc does not have an [[InitializedLocale]] internal slot, then\na. Throw a TypeError exception.\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/script/name.js", "esid": " sec-intl.locale.prototype.script", "description": " >Checks the \"name\" property of Intl.Locale.prototype.script.\n", "info": " |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, that is not identified as an anonymous function has a name property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification. Functions that are specified as get or set accessor functions of built-in properties have \"get \" or \"set \" prepended to the property name string.\nUnless otherwise specified, the name property of a built-in function object, if it exists, has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/script/prop-desc.js", "esid": " sec-intl.locale", "description": " >Checks the \"script\" property of the Locale prototype object.\n", "info": " |Intl.Locale.prototype.script\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 script Specification, 10th edition, clause 17, or successor.\n\nEvery accessor property described in clauses 18 through 26 and in Annex B.2 has the attributes { [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified. If only a get accessor function is described, the set accessor function is the default value, undefined.\n", "includes": ["propertyHelper.js"], "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/toString/branding.js", "esid": " sec-Intl.Locale.prototype.toString", "description": " >Verifies the branding check for the \"toString\" function of the Locale prototype object.\n", "info": " |Intl.Locale.prototype.toString\n\n2. If Type(loc) is not Object or loc does not have an [[InitializedLocale]] internal slot, then\na. Throw a TypeError exception.\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/toString/prop-desc.js", "esid": " sec-intl.locale", "description": " >Checks the \"toString\" property of the Locale prototype object.\n", "info": " |Intl.Locale.prototype.toString ()\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js"], "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/prototype/toStringTag/toString-removed-tag.js", "esid": " sec-intl.locale.prototype-@@tostringtag", "description": " >Checks Object.prototype.toString with Intl.Locale objects.\n", "info": " |Intl.Locale.prototype[ @@toStringTag ]\n\nThe initial value of the @@toStringTag property is the string value \"Intl.Locale\".\n", "features": ["Intl.Locale", "Symbol.toStringTag"]}, {"path": "./test262-main/test/intl402/Locale/prototype/toStringTag/toString.js", "esid": " sec-intl.locale.prototype-@@tostringtag", "description": " >Checks Object.prototype.toString with Intl.Locale objects.\n", "info": " |Intl.Locale.prototype[ @@toStringTag ]\n\nThe initial value of the @@toStringTag property is the string value \"Intl.Locale\".\n", "features": ["Intl.Locale", "Symbol.toStringTag"]}, {"path": "./test262-main/test/intl402/Locale/prototype/toStringTag/toStringTag.js", "esid": " sec-intl.locale.prototype-@@tostringtag", "description": " >Checks the @@toStringTag property of the Locale prototype object.\n", "info": " |Intl.Locale.prototype[ @@toStringTag ]\n\nThe initial value of the @@toStringTag property is the string value \"Intl.Locale\".\n\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.Locale", "Symbol.toStringTag"]}, {"path": "./test262-main/test/intl402/Locale/reject-duplicate-variants.js", "esid": " sec-isstructurallyvalidlanguagetag", "description": " >Verifies that duplicate variants in a tag (\"en-emodeng-emodeng\") make the tag\nstructurally invalid.\n", "info": " |the `unicode_language_id` within _locale_ contains no duplicate\n`unicode_variant_subtag` subtags\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/Locale/subclassing.js", "esid": " sec-Intl.Locale", "description": " Checks that Locale can be subclassed.", "info": " |Intl.Locale( tag [, options] )\n\n6. Let locale be ? OrdinaryCreateFromConstructor(NewTarget, %LocalePrototype%, internalSlotsList).\n\n", "features": ["Intl.Locale"]}, {"path": "./test262-main/test/intl402/NumberFormat/constructor-compactDisplay-compact.js", "esid": " sec-initializenumberformat", "description": " Checks handling of the compactDisplay option to the NumberFormat constructor.", "info": " |InitializeNumberFormat ( numberFormat, locales, options )\n\n19. Let compactDisplay be ? GetOption(options, \"compactDisplay\", \"string\", \u00ab \"short\", \"long\" \u00bb, \"short\").\n20. If notation is \"compact\", then\na. Set numberFormat.[[CompactDisplay]] to compactDisplay.\n\n", "includes": ["compareArray.js"], "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/constructor-compactDisplay-no-compact.js", "esid": " sec-initializenumberformat", "description": " Checks handling of the compactDisplay option to the NumberFormat constructor.", "info": " |InitializeNumberFormat ( numberFormat, locales, options )\n\n19. Let compactDisplay be ? GetOption(options, \"compactDisplay\", \"string\", \u00ab \"short\", \"long\" \u00bb, \"short\").\n20. If notation is \"compact\", then\na. Set numberFormat.[[CompactDisplay]] to compactDisplay.\n\n", "includes": ["compareArray.js"], "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/constructor-notation.js", "esid": " sec-initializenumberformat", "description": " Checks handling of the notation option to the NumberFormat constructor.", "info": " |InitializeNumberFormat ( numberFormat, locales, options )\n\n16. Let notation be ? GetOption(options, \"notation\", \"string\", \u00ab \"standard\", \"scientific\", \"engineering\", \"compact\" \u00bb, \"standard\").\n17. Set numberFormat.[[Notation]] to notation.\n\n", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/constructor-numberingSystem-order.js", "esid": " sec-initializenumberformat", "description": " >Checks the order of getting \"numberingSystem\" option in the\nNumberFormat is between \"localeMatcher\" and \"style\" options.\n", "info": " |InitializeNumberFormat ( _numberFormat_, _locales_, _options_ )\n\n5. Let _matcher_ be ? GetOption(_options_, `\"localeMatcher\"`, `\"string\"`, &laquo; `\"lookup\"`, `\"best fit\"` &raquo;, `\"best fit\"`).\n...\n7. Let _numberingSystem_ be ? GetOption(_options_, `\"numberingSystem\"`, `\"string\"`, *undefined*, *undefined*).\n...\n17. Let _style_ be ? GetOption(_options_, `\"style\"`, `\"string\"`, &laquo; `\"decimal\"`, `\"percent\"`, `\"currency\"` &raquo;, `\"decimal\"`).\n", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/intl402/NumberFormat/constructor-options-numberingSystem-invalid.js", "esid": " sec-initializenumberformat", "description": " >Checks error cases for the options argument to the NumberFormat constructor.\n", "info": " |InitializeNumberFormat ( numberFormat, locales, options )\n\n...\n8. If numberingSystem is not undefined, then\na. If numberingSystem does not match the Unicode Locale Identifier type nonterminal, throw a RangeError exception.\n"}, {"path": "./test262-main/test/intl402/NumberFormat/constructor-options-throwing-getters.js", "esid": " sec-initializenumberformat", "description": " Checks the propagation of exceptions from the options for the NumberFormat constructor."}, {"path": "./test262-main/test/intl402/NumberFormat/constructor-signDisplay.js", "esid": " sec-initializenumberformat", "description": " Checks handling of the compactDisplay option to the NumberFormat constructor.", "info": " |InitializeNumberFormat ( numberFormat, locales, options )\n\n23. Let signDisplay be ? GetOption(options, \"signDisplay\", \"string\", \u00ab \"auto\", \"never\", \"always\", \"exceptZero\" \u00bb, \"auto\").\n24. Set numberFormat.[[SignDisplay]] to signDisplay.\n\n", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/constructor-unit.js", "esid": " sec-initializenumberformat", "description": " Checks handling of the unit style.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/constructor-unitDisplay.js", "esid": " sec-initializenumberformat", "description": " Checks handling of the compactDisplay option to the NumberFormat constructor.", "info": " |InitializeNumberFormat ( numberFormat, locales, options )\n\n23. Let signDisplay be ? GetOption(options, \"signDisplay\", \"string\", \u00ab \"auto\", \"never\", \"always\", \"exceptZero\" \u00bb, \"auto\").\n24. Set numberFormat.[[SignDisplay]] to signDisplay.\n\n", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/currencyDisplay-unit.js", "esid": " sec-setnumberformatunitoptions", "description": " Checks handling of valid values for the numeric option to the NumberFormat constructor.", "info": " |SetNumberFormatUnitOptions ( intlObj, options )\n\n6. Let currencyDisplay be ? GetOption(options, \"currencyDisplay\", \"string\", \u00ab \"code\", \"symbol\", \"narrowSymbol\", \"name\" \u00bb, \"symbol\").\n11. If style is \"currency\", then\nf. Set intlObj.[[CurrencyDisplay]] to currencyDisplay.\n\n", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/numbering-system-options.js", "esid": " sec-initializenumberformat", "description": " >Tests that the options numberingSystem and calendar can beset through\neither the locale or the options.\n", "author": " Norbert Lindenberg, Daniel Ehrenberg"}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/engineering-scientific-de-DE.js", "esid": " sec-intl.numberformat.prototype.format", "description": " Checks handling of the engineering and scientific notations.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/engineering-scientific-en-US.js", "esid": " sec-intl.numberformat.prototype.format", "description": " Checks handling of the engineering and scientific notations.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/engineering-scientific-ja-JP.js", "esid": " sec-intl.numberformat.prototype.format", "description": " Checks handling of the engineering and scientific notations.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/engineering-scientific-ko-KR.js", "esid": " sec-intl.numberformat.prototype.format", "description": " Checks handling of the engineering and scientific notations.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/engineering-scientific-zh-TW.js", "esid": " sec-intl.numberformat.prototype.format", "description": " Checks handling of the engineering and scientific notations.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/format-function-name.js", "esid": " sec-Intl.NumberFormat.prototype.format", "description": " >The bound NumberFormat format function is an anonymous function.\n", "info": " |11.4.3 get Intl.NumberFormat.prototype.compare\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in function object, including constructors, has a `name`\nproperty whose value is a String. Functions that are identified as\nanonymous functions use the empty string as the value of the `name`\nproperty.\nUnless otherwise specified, the `name` property of a built-in function\nobject has the attributes { [[Writable]]: *false*, [[Enumerable]]: *false*,\n[[Configurable]]: *true* }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/notation-compact-de-DE.js", "esid": " sec-intl.numberformat.prototype.format", "description": " Checks handling of the compactDisplay option to the NumberFormat constructor.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/notation-compact-en-US.js", "esid": " sec-intl.numberformat.prototype.format", "description": " Checks handling of the compactDisplay option to the NumberFormat constructor.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/notation-compact-ja-JP.js", "esid": " sec-intl.numberformat.prototype.format", "description": " Checks handling of the compactDisplay option to the NumberFormat constructor.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/notation-compact-ko-KR.js", "esid": " sec-intl.numberformat.prototype.format", "description": " Checks handling of the compactDisplay option to the NumberFormat constructor.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/notation-compact-zh-TW.js", "esid": " sec-intl.numberformat.prototype.format", "description": " Checks handling of the compactDisplay option to the NumberFormat constructor.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/signDisplay-currency-de-DE.js", "esid": " sec-intl.numberformat.prototype.format", "description": " Checks handling of the compactDisplay option to the NumberFormat constructor.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/signDisplay-currency-en-US.js", "esid": " sec-intl.numberformat.prototype.format", "description": " Checks handling of the compactDisplay option to the NumberFormat constructor.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/signDisplay-currency-ja-JP.js", "esid": " sec-intl.numberformat.prototype.format", "description": " Checks handling of the compactDisplay option to the NumberFormat constructor.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/signDisplay-currency-ko-KR.js", "esid": " sec-intl.numberformat.prototype.format", "description": " Checks handling of the compactDisplay option to the NumberFormat constructor.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/signDisplay-currency-zh-TW.js", "esid": " sec-intl.numberformat.prototype.format", "description": " Checks handling of the compactDisplay option to the NumberFormat constructor.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/signDisplay-de-DE.js", "esid": " sec-intl.numberformat.prototype.format", "description": " Checks handling of the signDisplay option to the NumberFormat constructor.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/signDisplay-en-US.js", "esid": " sec-intl.numberformat.prototype.format", "description": " Checks handling of the signDisplay option to the NumberFormat constructor.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/signDisplay-ja-JP.js", "esid": " sec-intl.numberformat.prototype.format", "description": " Checks handling of the signDisplay option to the NumberFormat constructor.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/signDisplay-ko-KR.js", "esid": " sec-intl.numberformat.prototype.format", "description": " Checks handling of the signDisplay option to the NumberFormat constructor.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/signDisplay-rounding.js", "esid": " sec-intl.numberformat.prototype.format", "description": " Checks handling of the signDisplay option to the NumberFormat constructor.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/signDisplay-zh-TW.js", "esid": " sec-intl.numberformat.prototype.format", "description": " Checks handling of the signDisplay option to the NumberFormat constructor.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/unit-de-DE.js", "esid": " sec-intl.numberformat.prototype.format", "description": " Checks handling of the unit style.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/unit-en-US.js", "esid": " sec-intl.numberformat.prototype.format", "description": " Checks handling of the unit style.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/unit-ja-JP.js", "esid": " sec-intl.numberformat.prototype.format", "description": " Checks handling of the unit style.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/unit-ko-KR.js", "esid": " sec-intl.numberformat.prototype.format", "description": " Checks handling of the unit style.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/unit-zh-TW.js", "esid": " sec-intl.numberformat.prototype.format", "description": " Checks handling of the unit style.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/units.js", "esid": " sec-intl.numberformat.prototype.format", "description": " Checks handling of units.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/formatToParts/engineering-scientific-de-DE.js", "esid": " sec-intl.numberformat.prototype.formattoparts", "description": " Checks handling of the engineering and scientific notations.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/formatToParts/engineering-scientific-en-US.js", "esid": " sec-intl.numberformat.prototype.formattoparts", "description": " Checks handling of the engineering and scientific notations.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/formatToParts/engineering-scientific-ja-JP.js", "esid": " sec-intl.numberformat.prototype.formattoparts", "description": " Checks handling of the engineering and scientific notations.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/formatToParts/engineering-scientific-ko-KR.js", "esid": " sec-intl.numberformat.prototype.formattoparts", "description": " Checks handling of the engineering and scientific notations.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/formatToParts/engineering-scientific-zh-TW.js", "esid": " sec-intl.numberformat.prototype.formattoparts", "description": " Checks handling of the engineering and scientific notations.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/formatToParts/notation-compact-de-DE.js", "esid": " sec-intl.numberformat.prototype.formattoparts", "description": " Checks handling of the compactDisplay option to the NumberFormat constructor.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/formatToParts/notation-compact-en-US.js", "esid": " sec-intl.numberformat.prototype.formattoparts", "description": " Checks handling of the compactDisplay option to the NumberFormat constructor.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/formatToParts/notation-compact-ja-JP.js", "esid": " sec-intl.numberformat.prototype.formattoparts", "description": " Checks handling of the compactDisplay option to the NumberFormat constructor.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/formatToParts/notation-compact-ko-KR.js", "esid": " sec-intl.numberformat.prototype.formattoparts", "description": " Checks handling of the compactDisplay option to the NumberFormat constructor.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/formatToParts/notation-compact-zh-TW.js", "esid": " sec-intl.numberformat.prototype.formattoparts", "description": " Checks handling of the compactDisplay option to the NumberFormat constructor.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/formatToParts/percent-en-US.js", "esid": " sec-intl.numberformat.prototype.formattoparts", "description": " Checks handling of the percent style and unit.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/formatToParts/signDisplay-currency-de-DE.js", "esid": " sec-intl.numberformat.prototype.formattoparts", "description": " Checks handling of the compactDisplay option to the NumberFormat constructor.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/formatToParts/signDisplay-currency-en-US.js", "esid": " sec-intl.numberformat.prototype.formattoparts", "description": " Checks handling of the compactDisplay option to the NumberFormat constructor.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/formatToParts/signDisplay-currency-ja-JP.js", "esid": " sec-intl.numberformat.prototype.formattoparts", "description": " Checks handling of the compactDisplay option to the NumberFormat constructor.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/formatToParts/signDisplay-currency-ko-KR.js", "esid": " sec-intl.numberformat.prototype.formattoparts", "description": " Checks handling of the compactDisplay option to the NumberFormat constructor.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/formatToParts/signDisplay-currency-zh-TW.js", "esid": " sec-intl.numberformat.prototype.formattoparts", "description": " Checks handling of the compactDisplay option to the NumberFormat constructor.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/formatToParts/signDisplay-de-DE.js", "esid": " sec-intl.numberformat.prototype.formattoparts", "description": " Checks handling of the signDisplay option to the NumberFormat constructor.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/formatToParts/signDisplay-en-US.js", "esid": " sec-intl.numberformat.prototype.formattoparts", "description": " Checks handling of the signDisplay option to the NumberFormat constructor.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/formatToParts/signDisplay-ja-JP.js", "esid": " sec-intl.numberformat.prototype.formattoparts", "description": " Checks handling of the signDisplay option to the NumberFormat constructor.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/formatToParts/signDisplay-ko-KR.js", "esid": " sec-intl.numberformat.prototype.formattoparts", "description": " Checks handling of the signDisplay option to the NumberFormat constructor.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/formatToParts/signDisplay-zh-TW.js", "esid": " sec-intl.numberformat.prototype.formattoparts", "description": " Checks handling of the signDisplay option to the NumberFormat constructor.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/formatToParts/unit-de-DE.js", "esid": " sec-intl.numberformat.prototype.formattoparts", "description": " Checks handling of the unit style.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/formatToParts/unit-en-US.js", "esid": " sec-intl.numberformat.prototype.formattoparts", "description": " Checks handling of the unit style.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/formatToParts/unit-ja-JP.js", "esid": " sec-intl.numberformat.prototype.formattoparts", "description": " Checks handling of the unit style.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/formatToParts/unit-ko-KR.js", "esid": " sec-intl.numberformat.prototype.formattoparts", "description": " Checks handling of the unit style.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/formatToParts/unit-zh-TW.js", "esid": " sec-intl.numberformat.prototype.formattoparts", "description": " Checks handling of the unit style.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/formatToParts/unit.js", "esid": " sec-intl.numberformat.prototype.formattoparts", "description": " Checks handling of the unit style.", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/resolvedOptions/compactDisplay.js", "esid": " sec-intl.numberformat.prototype.resolvedoptions", "description": " Verifies the existence of the compactDisplay property for the object returned by resolvedOptions().", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/resolvedOptions/order.js", "esid": " sec-intl.numberformat.prototype.resolvedoptions", "description": " Verifies the property order for the object returned by resolvedOptions().", "includes": ["compareArray.js"], "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/style-unit.js", "esid": " sec-setnumberformatunitoptions", "description": " Checks handling of valid values for the numeric option to the RelativeTimeFormat constructor.", "info": " |SetNumberFormatUnitOptions ( intlObj, options )\n\n3. Let style be ? GetOption(options, \"style\", \"string\", \u00ab \"decimal\", \"percent\", \"currency\", \"unit\" \u00bb, \"decimal\").\n4. Set intlObj.[[Style]] to style.\n\n", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/PluralRules/prototype/resolvedOptions/order.js", "esid": " sec-intl.numberformat.prototype.resolvedoptions", "description": " Verifies the property order for the object returned by resolvedOptions().", "includes": ["compareArray.js"], "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/constructor/constructor/options-numberingSystem-invalid.js", "esid": " sec-Intl.RelativeTimeFormat", "description": " >Checks error cases for the options argument to the RelativeTimeFormat constructor.\n", "info": " |InitializeRelativeTimeFormat (relativeTimeFormat, locales, options)\n\n...\n8. If numberingSystem is not undefined, then\na. If numberingSystem does not match the type sequence (from UTS 35 Unicode Locale Identifier, section 3.2), throw a RangeError exception.\n\n", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/constructor/constructor/options-numberingSystem-valid.js", "esid": " sec-Intl.RelativeTimeFormat", "description": " Checks valid cases for the options argument to the RelativeTimeFormat constructor.", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/constructor/constructor/options-order.js", "esid": " sec-Intl.RelativeTimeFormat", "description": " Checks the order of operations on the options argument to the RelativeTimeFormat constructor.", "info": " |InitializeRelativeTimeFormat (relativeTimeFormat, locales, options)\n7. Let matcher be ? GetOption(options, \"localeMatcher\", \"string\", \u00ab\"lookup\", \"best fit\"\u00bb, \"best fit\").\n14. Let s be ? GetOption(options, \"style\", \"string\", \u00ab\"long\", \"short\", \"narrow\"\u00bb, \"long\").\n16. Let numeric be ? GetOption(options, \"numeric\", \"string\", \u00ab\"always\", \"auto\"\u00bb, \"always\").\n", "includes": ["compareArray.js"], "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/constructor/constructor/options-throwing-getters.js", "esid": " sec-InitializeRelativeTimeFormat", "description": " Checks the propagation of exceptions from the options for the RelativeTimeFormat constructor.", "info": " |InitializeRelativeTimeFormat\n\n5. Let matcher be ? GetOption(options, \"localeMatcher\", \"string\", \u00ab\"lookup\", \"best fit\"\u00bb, \"best fit\").\n...\n7. Let numberingSystem be ? GetOption(options, \"numberingSystem\", \"string\", undefined, undefined).\n...\n16. Let s be ? GetOption(options, \"style\", \"string\", \u00ab\"long\", \"short\", \"narrow\"\u00bb, \"long\").\n...\n18. Let numeric be ? GetOption(options, \"numeric\", \"string\", \u00ab\"always\", \"auto\"\u00bb, \"always\").\n\nGetOption ( options, property, type, values, fallback )\n\n1. Let value be ? Get(options, property).\n2. If value is not undefined, then\na. Assert: type is \"boolean\" or \"string\".\nb. If type is \"boolean\", then\ni. Let value be ToBoolean(value).\nc. If type is \"string\", then\ni. Let value be ? ToString(value).\nd. If values is not undefined, then\ni. If values does not contain an element equal to value, throw a RangeError exception.\ne. Return value.\n3. Else, return fallback.\n", "features": ["Intl.RelativeTimeFormat"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/prototype/formatToParts/branding.js", "esid": " sec-Intl.RelativeTimeFormat.prototype.formatToParts", "description": " Verifies the branding check for the \"formatToParts\" function of the RelativeTimeFormat prototype object.", "info": " |Intl.RelativeTimeFormat.prototype.formatToParts( value, unit )\n\n2. If Type(relativeTimeFormat) is not Object or relativeTimeFormat does not have an [[InitializedRelativeTimeFormat]] internal slot whose value is true, throw a TypeError exception.\n", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/prototype/formatToParts/en-us-numeric-always.js", "esid": " sec-Intl.RelativeTimeFormat.prototype.formatToParts", "description": " Checks the behavior of Intl.RelativeTimeFormat.prototype.formatToParts() in English.", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/prototype/formatToParts/en-us-numeric-auto.js", "esid": " sec-Intl.RelativeTimeFormat.prototype.formatToParts", "description": " Checks the behavior of Intl.RelativeTimeFormat.prototype.formatToParts() in English.", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/prototype/formatToParts/en-us-style-short.js", "esid": " sec-Intl.RelativeTimeFormat.prototype.formatToParts", "description": " Checks the behavior of Intl.RelativeTimeFormat.prototype.formatToParts() in English.", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/prototype/formatToParts/length.js", "esid": " sec-Intl.RelativeTimeFormat.prototype.formatToParts", "description": " Checks the \"length\" property of Intl.RelativeTimeFormat.prototype.formatToParts().", "info": " |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nThe RelativeTimeFormat constructor is a standard built-in property of the Intl object.\nEvery built-in function object, including constructors, has a length property whose value is an integer. Unless otherwise specified, this value is equal to the largest number of named arguments shown in the subclause headings for the function description. Optional parameters (which are indicated with brackets: [ ]) or rest parameters (which are shown using the form \u00ab...name\u00bb) are not included in the default argument count.\nUnless otherwise specified, the length property of a built-in function object has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/prototype/formatToParts/name.js", "esid": " sec-Intl.RelativeTimeFormat.prototype.formatToParts", "description": " Checks the \"name\" property of Intl.RelativeTimeFormat.prototype.formatToParts().", "info": " |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, that is not identified as an anonymous function has a name property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification.\nUnless otherwise specified, the name property of a built-in function object, if it exists, has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/prototype/formatToParts/prop-desc.js", "esid": " sec-Intl.RelativeTimeFormat.prototype.formatToParts", "description": " Checks the \"formatToParts\" property of the RelativeTimeFormat prototype object.", "info": " |Intl.RelativeTimeFormat.prototype.formatToParts ()\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js"], "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/prototype/formatToParts/result-type.js", "esid": " sec-Intl.RelativeTimeFormat.prototype.formatToParts", "description": " Checks the handling of plural unit arguments to Intl.RelativeTimeFormat.prototype.formatToParts().", "info": " |FormatRelativeTimeToParts ( relativeTimeFormat, value, unit )\n\n3. Let n be 0.\n4. For each part in parts, do:\na. Let O be ObjectCreate(%ObjectPrototype%).\nb. Perform ! CreateDataPropertyOrThrow(O, \"type\", part.[[Type]]).\nc. Perform ! CreateDataPropertyOrThrow(O, \"value\", part.[[Value]]).\nd. If part has a [[Unit]] field,\ni. Perform ! CreateDataPropertyOrThrow(O, \"unit\", part.[[Unit]]).\ne. Perform ! CreateDataPropertyOrThrow(result, ! ToString(n), O).\nf. Increment n by 1.\n\n", "features": ["Intl.RelativeTimeFormat"], "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/prototype/formatToParts/unit-invalid.js", "esid": " sec-Intl.RelativeTimeFormat.prototype.formatToParts", "description": " Checks the handling of invalid unit arguments to Intl.RelativeTimeFormat.prototype.formatToParts().", "info": " |SingularRelativeTimeUnit ( unit )\n\n10. If unit is not one of \"second\", \"minute\", \"hour\", \"day\", \"week\", \"month\", \"quarter\", \"year\", throw a RangeError exception.\n\n", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/prototype/formatToParts/unit-plural.js", "esid": " sec-Intl.RelativeTimeFormat.prototype.formatToParts", "description": " Checks the handling of plural unit arguments to Intl.RelativeTimeFormat.prototype.formatToParts().", "info": " |SingularRelativeTimeUnit ( unit )\n\n2. If unit is \"seconds\", return \"second\".\n3. If unit is \"minutes\", return \"minute\".\n4. If unit is \"hours\", return \"hour\".\n5. If unit is \"days\", return \"day\".\n6. If unit is \"weeks\", return \"week\".\n7. If unit is \"months\", return \"month\".\n8. If unit is \"quarters\", return \"quarter\".\n9. If unit is \"years\", return \"year\".\n\n", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/prototype/formatToParts/value-non-finite.js", "esid": " sec-Intl.RelativeTimeFormat.prototype.formatToParts", "description": " Checks the handling of invalid value arguments to Intl.RelativeTimeFormat.prototype.formatToParts().", "info": " |Intl.RelativeTimeFormat.prototype.formatToParts( value, unit )\n\n3. Let value be ? ToNumber(value).\n\nPartitionRelativeTimePattern ( relativeTimeFormat, value, unit )\n\n4. If isFinite(value) is false, then throw a RangeError exception.\n\n", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/prototype/formatToParts/value-symbol.js", "esid": " sec-Intl.RelativeTimeFormat.prototype.formatToParts", "description": " Checks the handling of invalid value arguments to Intl.RelativeTimeFormat.prototype.formatToParts().", "info": " |Intl.RelativeTimeFormat.prototype.formatToParts( value, unit )\n\n3. Let value be ? ToNumber(value).\n\n", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/prototype/formatToParts/value-tonumber.js", "esid": " sec-Intl.RelativeTimeFormat.prototype.format", "description": " Checks the handling of non-number value arguments to Intl.RelativeTimeFormat.prototype.format().", "info": " |Intl.RelativeTimeFormat.prototype.format( value, unit )\n\n3. Let value be ? ToNumber(value).\n\n", "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/intl402/RelativeTimeFormat/prototype/resolvedOptions/order.js", "esid": " sec-intl.relativetimeformat.prototype.resolvedoptions", "description": " Verifies the property order for the object returned by resolvedOptions().", "includes": ["compareArray.js"], "features": ["Intl.RelativeTimeFormat"]}, {"path": "./test262-main/test/language/eval-code/direct/arrow-fn-a-following-parameter-is-named-arguments-arrow-func-declare-arguments-assign-incl-def-param-arrow-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a following parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/arrow-fn-a-following-parameter-is-named-arguments-arrow-func-declare-arguments-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a following parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/arrow-fn-a-preceding-parameter-is-named-arguments-arrow-func-declare-arguments-assign-incl-def-param-arrow-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a preceding parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/arrow-fn-a-preceding-parameter-is-named-arguments-arrow-func-declare-arguments-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a preceding parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/arrow-fn-body-cntns-arguments-func-decl-arrow-func-declare-arguments-assign-incl-def-param-arrow-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| function declaration.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/arrow-fn-body-cntns-arguments-lex-bind-arrow-func-declare-arguments-assign-incl-def-param-arrow-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| lexical binding.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/arrow-fn-body-cntns-arguments-var-bind-arrow-func-declare-arguments-assign-incl-def-param-arrow-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| var-binding.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/arrow-fn-no-pre-existing-arguments-bindings-are-present-arrow-func-declare-arguments-assign-incl-def-param-arrow-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when no pre-existing |arguments| bindings are present.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/arrow-fn-no-pre-existing-arguments-bindings-are-present-arrow-func-declare-arguments-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when no pre-existing |arguments| bindings are present.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-gen-func-decl-a-following-parameter-is-named-arguments-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a following parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-gen-func-decl-a-following-parameter-is-named-arguments-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a following parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-gen-func-decl-a-preceding-parameter-is-named-arguments-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a preceding parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-gen-func-decl-a-preceding-parameter-is-named-arguments-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a preceding parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-gen-func-decl-fn-body-cntns-arguments-func-decl-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| function declaration.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-gen-func-decl-fn-body-cntns-arguments-func-decl-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| function declaration.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-gen-func-decl-fn-body-cntns-arguments-lex-bind-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| lexical binding.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-gen-func-decl-fn-body-cntns-arguments-lex-bind-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| lexical binding.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-gen-func-decl-fn-body-cntns-arguments-var-bind-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| var-binding.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-gen-func-decl-fn-body-cntns-arguments-var-bind-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| var-binding.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-gen-func-decl-no-pre-existing-arguments-bindings-are-present-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when no pre-existing |arguments| bindings are present.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-gen-func-decl-no-pre-existing-arguments-bindings-are-present-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when no pre-existing |arguments| bindings are present.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-gen-func-expr-a-following-parameter-is-named-arguments-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a following parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-gen-func-expr-a-following-parameter-is-named-arguments-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a following parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-gen-func-expr-a-preceding-parameter-is-named-arguments-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a preceding parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-gen-func-expr-a-preceding-parameter-is-named-arguments-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a preceding parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-gen-func-expr-fn-body-cntns-arguments-func-decl-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| function declaration.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-gen-func-expr-fn-body-cntns-arguments-func-decl-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| function declaration.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-gen-func-expr-fn-body-cntns-arguments-lex-bind-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| lexical binding.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-gen-func-expr-fn-body-cntns-arguments-lex-bind-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| lexical binding.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-gen-func-expr-fn-body-cntns-arguments-var-bind-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| var-binding.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-gen-func-expr-fn-body-cntns-arguments-var-bind-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| var-binding.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-gen-func-expr-no-pre-existing-arguments-bindings-are-present-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when no pre-existing |arguments| bindings are present.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-gen-func-expr-no-pre-existing-arguments-bindings-are-present-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when no pre-existing |arguments| bindings are present.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-gen-meth-a-following-parameter-is-named-arguments-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a following parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-gen-meth-a-following-parameter-is-named-arguments-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a following parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-gen-meth-a-preceding-parameter-is-named-arguments-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a preceding parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-gen-meth-a-preceding-parameter-is-named-arguments-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a preceding parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-gen-meth-fn-body-cntns-arguments-func-decl-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| function declaration.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-gen-meth-fn-body-cntns-arguments-func-decl-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| function declaration.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-gen-meth-fn-body-cntns-arguments-lex-bind-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| lexical binding.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-gen-meth-fn-body-cntns-arguments-lex-bind-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| lexical binding.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-gen-meth-fn-body-cntns-arguments-var-bind-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| var-binding.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-gen-meth-fn-body-cntns-arguments-var-bind-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| var-binding.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-gen-meth-no-pre-existing-arguments-bindings-are-present-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when no pre-existing |arguments| bindings are present.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-gen-meth-no-pre-existing-arguments-bindings-are-present-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when no pre-existing |arguments| bindings are present.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-gen-named-func-expr-a-following-parameter-is-named-arguments-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a following parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-gen-named-func-expr-a-following-parameter-is-named-arguments-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a following parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-gen-named-func-expr-a-preceding-parameter-is-named-arguments-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a preceding parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-gen-named-func-expr-a-preceding-parameter-is-named-arguments-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a preceding parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-gen-named-func-expr-fn-body-cntns-arguments-func-decl-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| function declaration.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-gen-named-func-expr-fn-body-cntns-arguments-func-decl-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| function declaration.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-gen-named-func-expr-fn-body-cntns-arguments-lex-bind-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| lexical binding.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-gen-named-func-expr-fn-body-cntns-arguments-lex-bind-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| lexical binding.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-gen-named-func-expr-fn-body-cntns-arguments-var-bind-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| var-binding.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-gen-named-func-expr-fn-body-cntns-arguments-var-bind-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| var-binding.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-gen-named-func-expr-no-pre-existing-arguments-bindings-are-present-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when no pre-existing |arguments| bindings are present.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/async-gen-named-func-expr-no-pre-existing-arguments-bindings-are-present-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when no pre-existing |arguments| bindings are present.)", "esid": " sec-evaldeclarationinstantiation", "features": ["globalThis"], "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/func-decl-a-following-parameter-is-named-arguments-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a following parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/func-decl-a-following-parameter-is-named-arguments-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a following parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/func-decl-a-preceding-parameter-is-named-arguments-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a preceding parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/func-decl-a-preceding-parameter-is-named-arguments-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a preceding parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/func-decl-fn-body-cntns-arguments-func-decl-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| function declaration.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/func-decl-fn-body-cntns-arguments-func-decl-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| function declaration.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/func-decl-fn-body-cntns-arguments-lex-bind-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| lexical binding.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/func-decl-fn-body-cntns-arguments-lex-bind-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| lexical binding.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/func-decl-fn-body-cntns-arguments-var-bind-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| var-binding.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/func-decl-fn-body-cntns-arguments-var-bind-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| var-binding.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/func-decl-no-pre-existing-arguments-bindings-are-present-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when no pre-existing |arguments| bindings are present.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/func-decl-no-pre-existing-arguments-bindings-are-present-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when no pre-existing |arguments| bindings are present.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/func-expr-a-following-parameter-is-named-arguments-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a following parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/func-expr-a-following-parameter-is-named-arguments-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a following parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/func-expr-a-preceding-parameter-is-named-arguments-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a preceding parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/func-expr-a-preceding-parameter-is-named-arguments-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a preceding parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/func-expr-fn-body-cntns-arguments-func-decl-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| function declaration.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/func-expr-fn-body-cntns-arguments-func-decl-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| function declaration.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/func-expr-fn-body-cntns-arguments-lex-bind-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| lexical binding.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/func-expr-fn-body-cntns-arguments-lex-bind-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| lexical binding.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/func-expr-fn-body-cntns-arguments-var-bind-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| var-binding.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/func-expr-fn-body-cntns-arguments-var-bind-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| var-binding.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/func-expr-no-pre-existing-arguments-bindings-are-present-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when no pre-existing |arguments| bindings are present.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/func-expr-no-pre-existing-arguments-bindings-are-present-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when no pre-existing |arguments| bindings are present.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/gen-func-decl-a-following-parameter-is-named-arguments-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a following parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/gen-func-decl-a-following-parameter-is-named-arguments-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a following parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/gen-func-decl-a-preceding-parameter-is-named-arguments-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a preceding parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/gen-func-decl-a-preceding-parameter-is-named-arguments-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a preceding parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/gen-func-decl-fn-body-cntns-arguments-func-decl-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| function declaration.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/gen-func-decl-fn-body-cntns-arguments-func-decl-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| function declaration.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/gen-func-decl-fn-body-cntns-arguments-lex-bind-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| lexical binding.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/gen-func-decl-fn-body-cntns-arguments-lex-bind-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| lexical binding.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/gen-func-decl-fn-body-cntns-arguments-var-bind-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| var-binding.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/gen-func-decl-fn-body-cntns-arguments-var-bind-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| var-binding.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/gen-func-decl-no-pre-existing-arguments-bindings-are-present-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when no pre-existing |arguments| bindings are present.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/gen-func-decl-no-pre-existing-arguments-bindings-are-present-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when no pre-existing |arguments| bindings are present.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/gen-func-expr-named-a-following-parameter-is-named-arguments-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a following parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/gen-func-expr-named-a-following-parameter-is-named-arguments-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a following parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/gen-func-expr-named-a-preceding-parameter-is-named-arguments-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a preceding parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/gen-func-expr-named-a-preceding-parameter-is-named-arguments-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a preceding parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/gen-func-expr-named-fn-body-cntns-arguments-func-decl-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| function declaration.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/gen-func-expr-named-fn-body-cntns-arguments-func-decl-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| function declaration.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/gen-func-expr-named-fn-body-cntns-arguments-lex-bind-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| lexical binding.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/gen-func-expr-named-fn-body-cntns-arguments-lex-bind-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| lexical binding.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/gen-func-expr-named-fn-body-cntns-arguments-var-bind-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| var-binding.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/gen-func-expr-named-fn-body-cntns-arguments-var-bind-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| var-binding.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/gen-func-expr-named-no-pre-existing-arguments-bindings-are-present-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when no pre-existing |arguments| bindings are present.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/gen-func-expr-named-no-pre-existing-arguments-bindings-are-present-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when no pre-existing |arguments| bindings are present.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/gen-func-expr-nameless-a-following-parameter-is-named-arguments-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a following parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/gen-func-expr-nameless-a-following-parameter-is-named-arguments-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a following parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/gen-func-expr-nameless-a-preceding-parameter-is-named-arguments-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a preceding parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/gen-func-expr-nameless-a-preceding-parameter-is-named-arguments-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a preceding parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/gen-func-expr-nameless-fn-body-cntns-arguments-func-decl-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| function declaration.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/gen-func-expr-nameless-fn-body-cntns-arguments-func-decl-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| function declaration.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/gen-func-expr-nameless-fn-body-cntns-arguments-lex-bind-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| lexical binding.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/gen-func-expr-nameless-fn-body-cntns-arguments-lex-bind-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| lexical binding.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/gen-func-expr-nameless-fn-body-cntns-arguments-var-bind-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| var-binding.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/gen-func-expr-nameless-fn-body-cntns-arguments-var-bind-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| var-binding.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/gen-func-expr-nameless-no-pre-existing-arguments-bindings-are-present-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when no pre-existing |arguments| bindings are present.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/gen-func-expr-nameless-no-pre-existing-arguments-bindings-are-present-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when no pre-existing |arguments| bindings are present.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/gen-meth-a-following-parameter-is-named-arguments-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a following parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/gen-meth-a-following-parameter-is-named-arguments-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a following parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/gen-meth-a-preceding-parameter-is-named-arguments-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a preceding parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/gen-meth-a-preceding-parameter-is-named-arguments-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a preceding parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/gen-meth-fn-body-cntns-arguments-func-decl-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| function declaration.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/gen-meth-fn-body-cntns-arguments-func-decl-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| function declaration.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/gen-meth-fn-body-cntns-arguments-lex-bind-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| lexical binding.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/gen-meth-fn-body-cntns-arguments-lex-bind-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| lexical binding.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/gen-meth-fn-body-cntns-arguments-var-bind-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| var-binding.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/gen-meth-fn-body-cntns-arguments-var-bind-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| var-binding.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/gen-meth-no-pre-existing-arguments-bindings-are-present-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when no pre-existing |arguments| bindings are present.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/gen-meth-no-pre-existing-arguments-bindings-are-present-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when no pre-existing |arguments| bindings are present.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/meth-a-following-parameter-is-named-arguments-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a following parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/meth-a-following-parameter-is-named-arguments-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a following parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/meth-a-preceding-parameter-is-named-arguments-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a preceding parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/meth-a-preceding-parameter-is-named-arguments-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when a preceding parameter is named |arguments|.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/meth-fn-body-cntns-arguments-func-decl-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| function declaration.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/meth-fn-body-cntns-arguments-func-decl-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| function declaration.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/meth-fn-body-cntns-arguments-lex-bind-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| lexical binding.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/meth-fn-body-cntns-arguments-lex-bind-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| lexical binding.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/meth-fn-body-cntns-arguments-var-bind-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| var-binding.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/meth-fn-body-cntns-arguments-var-bind-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when the function body contains an |arguments| var-binding.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/meth-no-pre-existing-arguments-bindings-are-present-declare-arguments-and-assign.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when no pre-existing |arguments| bindings are present.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/eval-code/direct/meth-no-pre-existing-arguments-bindings-are-present-declare-arguments.js", "description": " Declare \"arguments\" and assign to it in direct eval code (Declare |arguments| when no pre-existing |arguments| bindings are present.)", "esid": " sec-evaldeclarationinstantiation", "flags": ["generated", "noStrict"]}, {"path": "./test262-main/test/language/expressions/arrow-function/eval-var-scope-syntax-err.js", "description": " sloppy direct eval in params introduces var (arrow function expression in sloppy code)", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["default-parameters"], "flags": ["generated", "noStrict"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n\nRuntime Semantics: IteratorBindingInitialization\nFormalParameter : BindingElement\n\n1. Return the result of performing IteratorBindingInitialization for BindingElement with arguments iteratorRecord and environment.\n\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/scope-param-rest-elem-var-close.js", "esid": " sec-functiondeclarationinstantiation", "description": " >sloppy direct evals in params introduce vars\n", "info": " |[...]\n20. Else,\na. NOTE: A separate Environment Record is needed to ensure that bindings created by direct eval calls in the formal parameter list are outside the environment where parameters are declared.\nb. Let calleeEnv be the LexicalEnvironment of calleeContext.\nc. Let env be NewDeclarativeEnvironment(calleeEnv).\nd. Let envRec be env's EnvironmentRecord.\n[...]\n", "flags": ["noStrict"]}, {"path": "./test262-main/test/language/expressions/arrow-function/scope-param-rest-elem-var-open.js", "esid": " sec-functiondeclarationinstantiation", "description": " >sloppy direct evals in params introduce vars\n", "info": " |[...]\n20. Else,\na. NOTE: A separate Environment Record is needed to ensure that bindings created by direct eval calls in the formal parameter list are outside the environment where parameters are declared.\nb. Let calleeEnv be the LexicalEnvironment of calleeContext.\nc. Let env be NewDeclarativeEnvironment(calleeEnv).\nd. Let envRec be env's EnvironmentRecord.\n[...]\n", "flags": ["noStrict"]}, {"path": "./test262-main/test/language/expressions/async-generator/eval-var-scope-syntax-err.js", "description": " sloppy direct eval in params introduces var (async generator function expression in sloppy code)", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["default-parameters", "async-iteration"], "flags": ["generated", "noStrict"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * ( FormalParameters ) {\nAsyncGeneratorBody }\n\n[...]\n3. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n\n\nRuntime Semantics: IteratorBindingInitialization\nFormalParameter : BindingElement\n\n1. Return the result of performing IteratorBindingInitialization for BindingElement with arguments iteratorRecord and environment.\n\n"}, {"path": "./test262-main/test/language/expressions/async-generator/named-eval-var-scope-syntax-err.js", "description": " sloppy direct eval in params introduces var (async generator named function expression in sloppy code)", "esid": " sec-asyncgenerator-definitions-evaluation", "features": ["default-parameters", "async-iteration"], "flags": ["generated", "noStrict"], "info": " |AsyncGeneratorExpression : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n7. Let closure be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters,\nAsyncGeneratorBody, funcEnv, strict).\n[...]\n\n\n\nRuntime Semantics: IteratorBindingInitialization\nFormalParameter : BindingElement\n\n1. Return the result of performing IteratorBindingInitialization for BindingElement with arguments iteratorRecord and environment.\n\n"}, {"path": "./test262-main/test/language/expressions/class/constructor-this-tdz-during-initializers.js", "esid": " sec-super-keyword-runtime-semantics-evaluation", "description": " >`this` is bound in the constructor of derived classes immediately before running initializers\n", "info": " |[...]\n6. Let result be ? Construct(func, argList, newTarget).\n[...]\n10. Perform ? thisER.BindThisValue(result).\n11. Perform ? InitializeInstanceFields(result, F).\n[...]\n", "features": ["class-fields-public"]}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-accessors-computed-property-name-from-expression-coalesce.js", "description": " Computed property name from coalesce (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-accessors-computed-property-name-from-integer-separators.js", "description": " Computed property name from integer with separators (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-computed-property-name-from-expression-coalesce.js", "description": " Computed property name from coalesce (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-computed-property-name-from-integer-separators.js", "description": " Computed property name from integer with separators (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-computed-property-name-from-additive-expression-add.js", "description": " Computed property name from additive expression \"add\" (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-computed-property-name-from-additive-expression-subtract.js", "description": " Computed property name from additive expression \"subtract\" (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-computed-property-name-from-arrow-function-expression.js", "description": " Computed property name from arrow function (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-computed-property-name-from-assignment-expression-assignment.js", "description": " Computed property name from assignment expression (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-computed-property-name-from-assignment-expression-bitwise-or.js", "description": " Computed property name from assignment expression bitwise or (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-computed-property-name-from-async-arrow-function-expression.js", "description": " Computed property name from function expression (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-computed-property-name-from-condition-expression-false.js", "description": " Computed property name from condition expression (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-computed-property-name-from-condition-expression-true.js", "description": " Computed property name from condition expression (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-computed-property-name-from-decimal-e-notational-literal.js", "description": " Computed property name from decimal e notational literal (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-computed-property-name-from-decimal-literal.js", "description": " Computed property name from decimal literal (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-computed-property-name-from-exponetiation-expression.js", "description": " Computed property name from exponentiation expression (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-computed-property-name-from-expression-coalesce.js", "description": " Computed property name from coalesce (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-computed-property-name-from-expression-logical-and.js", "description": " Computed property name from logical and (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-computed-property-name-from-expression-logical-or.js", "description": " Computed property name from logical or (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-computed-property-name-from-function-declaration.js", "description": " Computed property name from function (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-computed-property-name-from-function-expression.js", "description": " Computed property name from function expression (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-computed-property-name-from-generator-function-declaration.js", "description": " Computed property name from generator function (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-computed-property-name-from-identifier.js", "description": " Computed property name from string literal (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-computed-property-name-from-integer-e-notational-literal.js", "description": " Computed property name from numeric literal (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-computed-property-name-from-integer-separators.js", "description": " Computed property name from integer with separators (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-computed-property-name-from-math.js", "description": " Computed property name from math (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-computed-property-name-from-multiplicative-expression-div.js", "description": " Computed property name from multiplicative expression \"divide\" (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-computed-property-name-from-multiplicative-expression-mult.js", "description": " Computed property name from multiplicative expression \"multiply\" (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-computed-property-name-from-null.js", "description": " Computed property name from condition expression (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-computed-property-name-from-numeric-literal.js", "description": " Computed property name from numeric literal (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-computed-property-name-from-string-literal.js", "description": " Computed property name from string literal (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-computed-property-name-from-yield-expression.js", "description": " Computed property name from yield expression (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-methods-computed-property-name-from-additive-expression-add.js", "description": " Computed property name from additive expression \"add\" (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-methods-computed-property-name-from-additive-expression-subtract.js", "description": " Computed property name from additive expression \"subtract\" (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-methods-computed-property-name-from-arrow-function-expression.js", "description": " Computed property name from arrow function (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-methods-computed-property-name-from-assignment-expression-assignment.js", "description": " Computed property name from assignment expression (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-methods-computed-property-name-from-assignment-expression-bitwise-or.js", "description": " Computed property name from assignment expression bitwise or (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-methods-computed-property-name-from-async-arrow-function-expression.js", "description": " Computed property name from function expression (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-methods-computed-property-name-from-condition-expression-false.js", "description": " Computed property name from condition expression (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-methods-computed-property-name-from-condition-expression-true.js", "description": " Computed property name from condition expression (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-methods-computed-property-name-from-decimal-e-notational-literal.js", "description": " Computed property name from decimal e notational literal (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-methods-computed-property-name-from-decimal-literal.js", "description": " Computed property name from decimal literal (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-methods-computed-property-name-from-exponetiation-expression.js", "description": " Computed property name from exponentiation expression (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-methods-computed-property-name-from-expression-coalesce.js", "description": " Computed property name from coalesce (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-methods-computed-property-name-from-expression-logical-and.js", "description": " Computed property name from logical and (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-methods-computed-property-name-from-expression-logical-or.js", "description": " Computed property name from logical or (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-methods-computed-property-name-from-function-declaration.js", "description": " Computed property name from function (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-methods-computed-property-name-from-function-expression.js", "description": " Computed property name from function expression (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-methods-computed-property-name-from-generator-function-declaration.js", "description": " Computed property name from generator function (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-methods-computed-property-name-from-identifier.js", "description": " Computed property name from string literal (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-methods-computed-property-name-from-integer-e-notational-literal.js", "description": " Computed property name from numeric literal (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-methods-computed-property-name-from-integer-separators.js", "description": " Computed property name from integer with separators (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-methods-computed-property-name-from-math.js", "description": " Computed property name from math (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-methods-computed-property-name-from-multiplicative-expression-div.js", "description": " Computed property name from multiplicative expression \"divide\" (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-methods-computed-property-name-from-multiplicative-expression-mult.js", "description": " Computed property name from multiplicative expression \"multiply\" (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-methods-computed-property-name-from-null.js", "description": " Computed property name from condition expression (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-methods-computed-property-name-from-numeric-literal.js", "description": " Computed property name from numeric literal (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-methods-computed-property-name-from-string-literal.js", "description": " Computed property name from string literal (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/cpn-class-expr-fields-methods-computed-property-name-from-yield-expression.js", "description": " Computed property name from yield expression (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-gen-computed-names.js", "description": " Computed property names (field definitions after a generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "generators", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-gen-computed-symbol-names.js", "description": " Computed property symbol names (field definitions after a generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "Symbol", "computed-property-names", "generators", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-gen-literal-names-asi.js", "description": " Literal property names with ASI (field definitions after a generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "generators", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-gen-literal-names.js", "description": " Literal property names (field definitions after a generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "generators", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-gen-rs-field-identifier-initializer.js", "description": " Valid FieldDefinition (field definitions after a generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "generators", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-gen-rs-field-identifier.js", "description": " Valid FieldDefinition (field definitions after a generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "generators", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-gen-string-literal-names.js", "description": " String literal names (field definitions after a generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "generators", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-method-computed-names.js", "description": " Computed property names (field definitions after a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-method-computed-symbol-names.js", "description": " Computed property symbol names (field definitions after a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "Symbol", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-method-literal-names-asi.js", "description": " Literal property names with ASI (field definitions after a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-method-literal-names.js", "description": " Literal property names (field definitions after a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-method-rs-field-identifier-initializer.js", "description": " Valid FieldDefinition (field definitions after a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-method-rs-field-identifier.js", "description": " Valid FieldDefinition (field definitions after a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-method-string-literal-names.js", "description": " String literal names (field definitions after a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-gen-computed-names.js", "description": " Computed property names (field definitions after a static generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "generators", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-gen-computed-symbol-names.js", "description": " Computed property symbol names (field definitions after a static generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "Symbol", "computed-property-names", "generators", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-gen-literal-names-asi.js", "description": " Literal property names with ASI (field definitions after a static generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "generators", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-gen-literal-names.js", "description": " Literal property names (field definitions after a static generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "generators", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-gen-rs-field-identifier-initializer.js", "description": " Valid FieldDefinition (field definitions after a static generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "generators", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-gen-rs-field-identifier.js", "description": " Valid FieldDefinition (field definitions after a static generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "generators", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-gen-string-literal-names.js", "description": " String literal names (field definitions after a static generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "generators", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-method-computed-names.js", "description": " Computed property names (field definitions after a static method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-method-computed-symbol-names.js", "description": " Computed property symbol names (field definitions after a static method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "Symbol", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-method-literal-names-asi.js", "description": " Literal property names with ASI (field definitions after a static method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-method-literal-names.js", "description": " Literal property names (field definitions after a static method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-method-rs-field-identifier-initializer.js", "description": " Valid FieldDefinition (field definitions after a static method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-method-rs-field-identifier.js", "description": " Valid FieldDefinition (field definitions after a static method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/after-same-line-static-method-string-literal-names.js", "description": " String literal names (field definitions after a static method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/arrow-body-derived-cls-direct-eval-contains-superproperty-1.js", "description": " super.x in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of a MethodDefinition.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperProperty.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/arrow-body-derived-cls-direct-eval-contains-superproperty-2.js", "description": " super['x'] in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |The remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Methods\n\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of a MethodDefinition.\n\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperProperty.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/arrow-body-derived-cls-direct-eval-err-contains-supercall-1.js", "description": " error if `super()['x']` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/arrow-body-derived-cls-direct-eval-err-contains-supercall-2.js", "description": " error if `super().x` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/arrow-body-derived-cls-direct-eval-err-contains-supercall.js", "description": " error if `super()` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/arrow-body-derived-cls-indirect-eval-contains-superproperty-1.js", "description": " super.x in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of a MethodDefinition.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperProperty.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/arrow-body-derived-cls-indirect-eval-contains-superproperty-2.js", "description": " super['x'] in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |The remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Methods\n\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of a MethodDefinition.\n\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperProperty.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/arrow-body-derived-cls-indirect-eval-err-contains-supercall-1.js", "description": " error if `super()['x']` in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/arrow-body-derived-cls-indirect-eval-err-contains-supercall-2.js", "description": " error if `super().x` in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/arrow-body-derived-cls-indirect-eval-err-contains-supercall.js", "description": " error if `super()` in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/arrow-body-direct-eval-err-contains-arguments.js", "description": " error if `arguments` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\nIt is a Syntax Error if ContainsArguments of StatementList is true.\n...\n\nStatic Semantics: ContainsArguments\nIdentifierReference : Identifier\n\n1. If the StringValue of Identifier is \"arguments\", return true.\n...\nFor all other grammatical productions, recurse on all nonterminals. If any piece returns true, then return true. Otherwise return false.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/arrow-body-direct-eval-err-contains-newtarget.js", "description": " error if `new.target` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "new.target", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Functions\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of any function.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains NewTarget.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/arrow-body-indirect-eval-err-contains-newtarget.js", "description": " error if `new.target` in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "new.target", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Functions\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of any function.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains NewTarget.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/class-name-static-initializer-anonymous.js", "esid": " sec-runtime-semantics-classdefinitionevaluation", "description": " >The inferred class-name is present when executing static field initializers of anonymous class expressions.\n", "info": " |14.6.13 Runtime Semantics: ClassDefinitionEvaluation\n\n[...]\n17. Perform MakeClassConstructor(F).\n18. If className is not undefined, then\na. Perform SetFunctionName(F, className).\n[...]\n\n", "features": ["class-static-fields-public"]}, {"path": "./test262-main/test/language/expressions/class/elements/class-name-static-initializer-decl.js", "esid": " sec-runtime-semantics-classdefinitionevaluation", "description": " >The class-name is present when executing static field initializers of class declarations.\n", "info": " |14.6.13 Runtime Semantics: ClassDefinitionEvaluation\n\n[...]\n17. Perform MakeClassConstructor(F).\n18. If className is not undefined, then\na. Perform SetFunctionName(F, className).\n[...]\n\n", "features": ["class-static-fields-public"]}, {"path": "./test262-main/test/language/expressions/class/elements/class-name-static-initializer-expr.js", "esid": " sec-runtime-semantics-classdefinitionevaluation", "description": " >The class-name is present when executing static field initializers of named class expressions.\n", "info": " |14.6.13 Runtime Semantics: ClassDefinitionEvaluation\n\n[...]\n17. Perform MakeClassConstructor(F).\n18. If className is not undefined, then\na. Perform SetFunctionName(F, className).\n[...]\n\n", "features": ["class-static-fields-public"]}, {"path": "./test262-main/test/language/expressions/class/elements/computed-name-toprimitive-symbol.js", "description": " ToPrimitive evaluation in the ComputedPropertyName (field definitions in a class expression)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "Symbol.toPrimitive", "Symbol", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |Runtime Semantics: ClassDefinitionEvaluation\n\n...\n27. For each ClassElement e in order from elements\na. If IsStatic of me is false, then\ni. Let fields be the result of performing ClassElementEvaluation for e with arguments proto and false.\nb. Else,\ni. Let fields be the result of performing ClassElementEvaluation for e with arguments F and false.\nc. If fields is an abrupt completion, then\ni. Set the running execution context's LexicalEnvironment to lex.\nii. Set the running execution context's PrivateNameEnvironment to outerPrivateEnvironment.\niii. Return Completion(status).\n...\n\nRuntime Semantics: ClassElementEvaluation\n\nClassElement: FieldDefinition;\nReturn ClassFieldDefinitionEvaluation of FieldDefinition with parameter false and object.\n\nRuntime Semantics: ClassFieldDefinitionEvaluation\nWith parameters isStatic and homeObject.\n\n1. Let fieldName be the result of evaluating ClassElementName.\n2. ReturnIfAbrupt(fieldName).\n...\n\nRuntime Semantics: Evaluation\nComputedPropertyName: [ AssignmentExpression ]\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let propName be ? GetValue(exprValue).\n3. Return ? ToPropertyKey(propName).\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/computed-name-toprimitive.js", "description": " ToPrimitive evaluation in the ComputedPropertyName (field definitions in a class expression)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "Symbol.toPrimitive", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |Runtime Semantics: ClassDefinitionEvaluation\n\n...\n27. For each ClassElement e in order from elements\na. If IsStatic of me is false, then\ni. Let fields be the result of performing ClassElementEvaluation for e with arguments proto and false.\nb. Else,\ni. Let fields be the result of performing ClassElementEvaluation for e with arguments F and false.\nc. If fields is an abrupt completion, then\ni. Set the running execution context's LexicalEnvironment to lex.\nii. Set the running execution context's PrivateNameEnvironment to outerPrivateEnvironment.\niii. Return Completion(status).\n...\n\nRuntime Semantics: ClassElementEvaluation\n\nClassElement: FieldDefinition;\nReturn ClassFieldDefinitionEvaluation of FieldDefinition with parameter false and object.\n\nRuntime Semantics: ClassFieldDefinitionEvaluation\nWith parameters isStatic and homeObject.\n\n1. Let fieldName be the result of evaluating ClassElementName.\n2. ReturnIfAbrupt(fieldName).\n...\n\nRuntime Semantics: Evaluation\nComputedPropertyName: [ AssignmentExpression ]\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let propName be ? GetValue(exprValue).\n3. Return ? ToPropertyKey(propName).\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/ctor-called-after-fields-init.js", "description": " The constructor method is called after the fields are initalized (field definitions in a class expression)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "info": " |[[Construct]] ( argumentsList, newTarget)\n\n8. If kind is \"base\", then\na. Perform OrdinaryCallBindThis(F, calleeContext, thisArgument).\nb. Let result be InitializeInstanceFields(thisArgument, F).\n...\n...\n11. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n...\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/derived-cls-direct-eval-contains-superproperty-1.js", "description": " super.x in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of a MethodDefinition.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperProperty.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/derived-cls-direct-eval-contains-superproperty-2.js", "description": " super['x'] in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |The remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Methods\n\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of a MethodDefinition.\n\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperProperty.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/derived-cls-direct-eval-err-contains-supercall-1.js", "description": " error if `super()['x']` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/derived-cls-direct-eval-err-contains-supercall-2.js", "description": " error if `super().x` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/derived-cls-direct-eval-err-contains-supercall.js", "description": " error if `super()` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/derived-cls-indirect-eval-contains-superproperty-1.js", "description": " super.x in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of a MethodDefinition.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperProperty.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/derived-cls-indirect-eval-contains-superproperty-2.js", "description": " super['x'] in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |The remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Methods\n\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of a MethodDefinition.\n\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperProperty.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/derived-cls-indirect-eval-err-contains-supercall-1.js", "description": " error if `super()['x']` in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/derived-cls-indirect-eval-err-contains-supercall-2.js", "description": " error if `super().x` in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/derived-cls-indirect-eval-err-contains-supercall.js", "description": " error if `super()` in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/direct-eval-err-contains-arguments.js", "description": " error if `arguments` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\nIt is a Syntax Error if ContainsArguments of StatementList is true.\n...\n\nStatic Semantics: ContainsArguments\nIdentifierReference : Identifier\n\n1. If the StringValue of Identifier is \"arguments\", return true.\n...\nFor all other grammatical productions, recurse on all nonterminals. If any piece returns true, then return true. Otherwise return false.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/direct-eval-err-contains-newtarget.js", "description": " error if `new.target` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "new.target", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Functions\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of any function.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains NewTarget.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/evaluation-error/computed-name-referenceerror.js", "description": " ReferenceError evaluating a computed property name (field definitions in a class expression)", "esid": " sec-runtime-semantics-classdefinitionevaluation", "features": ["class-fields-public", "computed-property-names", "class"], "flags": ["generated"], "info": " |Runtime Semantics: ClassDefinitionEvaluation\n\n...\n27. For each ClassElement e in order from elements\na. If IsStatic of me is false, then\ni. Let fields be the result of performing ClassElementEvaluation for e with arguments proto and false.\nb. Else,\ni. Let fields be the result of performing ClassElementEvaluation for e with arguments F and false.\nc. If fields is an abrupt completion, then\ni. Set the running execution context's LexicalEnvironment to lex.\nii. Set the running execution context's PrivateNameEnvironment to outerPrivateEnvironment.\niii. Return Completion(status).\n...\n\nRuntime Semantics: ClassElementEvaluation\n\nClassElement: FieldDefinition;\nReturn ClassFieldDefinitionEvaluation of FieldDefinition with parameter false and object.\n\nRuntime Semantics: ClassFieldDefinitionEvaluation\nWith parameters isStatic and homeObject.\n\n1. Let fieldName be the result of evaluating ClassElementName.\n2. ReturnIfAbrupt(fieldName).\n...\n\nRuntime Semantics: Evaluation\nComputedPropertyName: [ AssignmentExpression ]\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let propName be ? GetValue(exprValue).\n3. Return ? ToPropertyKey(propName).\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/evaluation-error/computed-name-toprimitive-err.js", "description": " Custom error evaluating a computed property name (field definitions in a class expression)", "esid": " sec-runtime-semantics-classdefinitionevaluation", "features": ["class-fields-public", "computed-property-names", "Symbol.toPrimitive", "class"], "flags": ["generated"], "info": " |Runtime Semantics: ClassDefinitionEvaluation\n\n...\n27. For each ClassElement e in order from elements\na. If IsStatic of me is false, then\ni. Let fields be the result of performing ClassElementEvaluation for e with arguments proto and false.\nb. Else,\ni. Let fields be the result of performing ClassElementEvaluation for e with arguments F and false.\nc. If fields is an abrupt completion, then\ni. Set the running execution context's LexicalEnvironment to lex.\nii. Set the running execution context's PrivateNameEnvironment to outerPrivateEnvironment.\niii. Return Completion(status).\n...\n\nRuntime Semantics: ClassElementEvaluation\n\nClassElement: FieldDefinition;\nReturn ClassFieldDefinitionEvaluation of FieldDefinition with parameter false and object.\n\nRuntime Semantics: ClassFieldDefinitionEvaluation\nWith parameters isStatic and homeObject.\n\n1. Let fieldName be the result of evaluating ClassElementName.\n2. ReturnIfAbrupt(fieldName).\n...\n\nRuntime Semantics: Evaluation\nComputedPropertyName: [ AssignmentExpression ]\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let propName be ? GetValue(exprValue).\n3. Return ? ToPropertyKey(propName).\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/evaluation-error/computed-name-toprimitive-returns-noncallable.js", "description": " Custom error evaluating a computed property name (field definitions in a class expression)", "esid": " sec-runtime-semantics-classdefinitionevaluation", "features": ["class-fields-public", "computed-property-names", "Symbol.toPrimitive", "class"], "flags": ["generated"], "info": " |Runtime Semantics: ClassDefinitionEvaluation\n\n...\n27. For each ClassElement e in order from elements\na. If IsStatic of me is false, then\ni. Let fields be the result of performing ClassElementEvaluation for e with arguments proto and false.\nb. Else,\ni. Let fields be the result of performing ClassElementEvaluation for e with arguments F and false.\nc. If fields is an abrupt completion, then\ni. Set the running execution context's LexicalEnvironment to lex.\nii. Set the running execution context's PrivateNameEnvironment to outerPrivateEnvironment.\niii. Return Completion(status).\n...\n\nRuntime Semantics: ClassElementEvaluation\n\nClassElement: FieldDefinition;\nReturn ClassFieldDefinitionEvaluation of FieldDefinition with parameter false and object.\n\nRuntime Semantics: ClassFieldDefinitionEvaluation\nWith parameters isStatic and homeObject.\n\n1. Let fieldName be the result of evaluating ClassElementName.\n2. ReturnIfAbrupt(fieldName).\n...\n\nRuntime Semantics: Evaluation\nComputedPropertyName: [ AssignmentExpression ]\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let propName be ? GetValue(exprValue).\n3. Return ? ToPropertyKey(propName).\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/evaluation-error/computed-name-toprimitive-returns-nonobject.js", "description": " Custom error evaluating a computed property name (field definitions in a class expression)", "esid": " sec-runtime-semantics-classdefinitionevaluation", "features": ["class-fields-public", "computed-property-names", "Symbol.toPrimitive", "class"], "flags": ["generated"], "info": " |Runtime Semantics: ClassDefinitionEvaluation\n\n...\n27. For each ClassElement e in order from elements\na. If IsStatic of me is false, then\ni. Let fields be the result of performing ClassElementEvaluation for e with arguments proto and false.\nb. Else,\ni. Let fields be the result of performing ClassElementEvaluation for e with arguments F and false.\nc. If fields is an abrupt completion, then\ni. Set the running execution context's LexicalEnvironment to lex.\nii. Set the running execution context's PrivateNameEnvironment to outerPrivateEnvironment.\niii. Return Completion(status).\n...\n\nRuntime Semantics: ClassElementEvaluation\n\nClassElement: FieldDefinition;\nReturn ClassFieldDefinitionEvaluation of FieldDefinition with parameter false and object.\n\nRuntime Semantics: ClassFieldDefinitionEvaluation\nWith parameters isStatic and homeObject.\n\n1. Let fieldName be the result of evaluating ClassElementName.\n2. ReturnIfAbrupt(fieldName).\n...\n\nRuntime Semantics: Evaluation\nComputedPropertyName: [ AssignmentExpression ]\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let propName be ? GetValue(exprValue).\n3. Return ? ToPropertyKey(propName).\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/evaluation-error/computed-name-tostring-err.js", "description": " Custom error evaluating a computed property name (field definitions in a class expression)", "esid": " sec-runtime-semantics-classdefinitionevaluation", "features": ["class-fields-public", "computed-property-names", "class"], "flags": ["generated"], "info": " |Runtime Semantics: ClassDefinitionEvaluation\n\n...\n27. For each ClassElement e in order from elements\na. If IsStatic of me is false, then\ni. Let fields be the result of performing ClassElementEvaluation for e with arguments proto and false.\nb. Else,\ni. Let fields be the result of performing ClassElementEvaluation for e with arguments F and false.\nc. If fields is an abrupt completion, then\ni. Set the running execution context's LexicalEnvironment to lex.\nii. Set the running execution context's PrivateNameEnvironment to outerPrivateEnvironment.\niii. Return Completion(status).\n...\n\nRuntime Semantics: ClassElementEvaluation\n\nClassElement: FieldDefinition;\nReturn ClassFieldDefinitionEvaluation of FieldDefinition with parameter false and object.\n\nRuntime Semantics: ClassFieldDefinitionEvaluation\nWith parameters isStatic and homeObject.\n\n1. Let fieldName be the result of evaluating ClassElementName.\n2. ReturnIfAbrupt(fieldName).\n...\n\nRuntime Semantics: Evaluation\nComputedPropertyName: [ AssignmentExpression ]\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let propName be ? GetValue(exprValue).\n3. Return ? ToPropertyKey(propName).\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/evaluation-error/computed-name-valueof-err.js", "description": " Custom error evaluating a computed property name (field definitions in a class expression)", "esid": " sec-runtime-semantics-classdefinitionevaluation", "features": ["class-fields-public", "computed-property-names", "class"], "flags": ["generated"], "info": " |Runtime Semantics: ClassDefinitionEvaluation\n\n...\n27. For each ClassElement e in order from elements\na. If IsStatic of me is false, then\ni. Let fields be the result of performing ClassElementEvaluation for e with arguments proto and false.\nb. Else,\ni. Let fields be the result of performing ClassElementEvaluation for e with arguments F and false.\nc. If fields is an abrupt completion, then\ni. Set the running execution context's LexicalEnvironment to lex.\nii. Set the running execution context's PrivateNameEnvironment to outerPrivateEnvironment.\niii. Return Completion(status).\n...\n\nRuntime Semantics: ClassElementEvaluation\n\nClassElement: FieldDefinition;\nReturn ClassFieldDefinitionEvaluation of FieldDefinition with parameter false and object.\n\nRuntime Semantics: ClassFieldDefinitionEvaluation\nWith parameters isStatic and homeObject.\n\n1. Let fieldName be the result of evaluating ClassElementName.\n2. ReturnIfAbrupt(fieldName).\n...\n\nRuntime Semantics: Evaluation\nComputedPropertyName: [ AssignmentExpression ]\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let propName be ? GetValue(exprValue).\n3. Return ? ToPropertyKey(propName).\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/field-declaration.js", "description": " Fields are defined (field definitions in a class expression)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |Updated Productions\n\nClassElement :\n...\nFieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\nStringLiteral\nNumericLiteral\n\nClassDefinitionEvaluation:\n...\n\n26. Let instanceFields be a new empty List.\n28. For each ClassElement e in order from elements,\na. If IsStatic of e is false, then\ni. Let field be the result of performing ClassElementEvaluation for e with arguments proto and false.\nb. ...\nc. ...\nd. If field is not empty, append field to instanceFields.\n\n...\n\n30. Set F.[[Fields]] to instanceFields.\n...\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/fields-asi-1.js", "description": " ASI test in field declarations -- computed name interpreted as property", "esid": " sec-automatic-semicolon-insertion", "features": ["class", "class-fields-public"]}, {"path": "./test262-main/test/language/expressions/class/elements/fields-asi-2.js", "description": " ASI test in field declarations -- computed name interpreted as string index", "esid": " sec-automatic-semicolon-insertion", "features": ["class", "class-fields-public"]}, {"path": "./test262-main/test/language/expressions/class/elements/fields-asi-5.js", "description": " ASI test in field declarations -- field with PropertyName \"in\" interpreted as index", "esid": " sec-automatic-semicolon-insertion", "features": ["class", "class-fields-public"]}, {"path": "./test262-main/test/language/expressions/class/elements/fields-computed-name-static-propname-prototype.js", "description": " static class fields forbid PropName 'prototype' (no early error -- PropName of ComputedPropertyName)", "esid": " sec-class-definitions-static-semantics-early-errors", "features": ["class", "class-static-fields-public"], "info": " |14.6.13 Runtime Semantics: ClassDefinitionEvaluation\n\n...\n16. Perform MakeConstructor(F, false, proto).\n...\n\n9.2.10 MakeConstructor ( F [ , writablePrototype [ , prototype ] ] )\n\n6. Perform ! DefinePropertyOrThrow(F, \"prototype\", PropertyDescriptor { [[Value]]: prototype,\n[[Writable]]: writablePrototype, [[Enumerable]]: false, [[Configurable]]: false }).\n"}, {"path": "./test262-main/test/language/expressions/class/elements/fields-run-once-on-double-super.js", "esid": " sec-super-keyword-runtime-semantics-evaluation", "description": " >when calling `super()` for a second time in a derived class, the super constructor is run twice but the field initializers are only run once\n", "info": " |[...]\n6. Let result be ? Construct(func, argList, newTarget).\n[...]\n10. Perform ? thisER.BindThisValue(result).\n11. Perform ? InitializeInstanceFields(result, F).\n[...]\n", "features": ["class-fields-public"]}, {"path": "./test262-main/test/language/expressions/class/elements/indirect-eval-contains-arguments.js", "description": " No error if `arguments` in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated", "noStrict"], "info": " |For indirect eval, the \"Additional Early Error Rules for Eval Inside Initializer\"\n(in #sec-performeval-rules-in-initializer) are NOT applicable.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/indirect-eval-err-contains-newtarget.js", "description": " error if `new.target` in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "new.target", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Functions\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of any function.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains NewTarget.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/init-err-evaluation.js", "description": " Return abrupt completion evaluating the field initializer (field definitions in a class expression)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "info": " |[[Construct]] ( argumentsList, newTarget)\n\n8. If kind is \"base\", then\na. Perform OrdinaryCallBindThis(F, calleeContext, thisArgument).\nb. Let result be InitializeInstanceFields(thisArgument, F).\n...\n...\n11. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n...\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/init-value-defined-after-class.js", "description": " The initializer value is defined after the class evaluation (field definitions in a class expression)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |[[Construct]] ( argumentsList, newTarget)\n\n8. If kind is \"base\", then\na. Perform OrdinaryCallBindThis(F, calleeContext, thisArgument).\nb. Let result be InitializeInstanceFields(thisArgument, F).\n...\n...\n11. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n...\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/init-value-incremental.js", "description": " The initializer value is defined during the class instatiation (field definitions in a class expression)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |Runtime Semantics: ClassDefinitionEvaluation\n\n27. For each ClassElement e in order from elements\n...\nd. Append to fieldRecords the elements of fields.\n...\n33. Let result be InitializeStaticFields(F).\n...\n\n[[Construct]] ( argumentsList, newTarget)\n\n8. If kind is \"base\", then\na. Perform OrdinaryCallBindThis(F, calleeContext, thisArgument).\nb. Let result be InitializeInstanceFields(thisArgument, F).\n...\n...\n11. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n...\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/intercalated-static-non-static-computed-fields.js", "description": " Computed class fields are executed in the order they are delcared, regardless it is static or instance field (field definitions in a class expression)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-public", "class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassTail : ClassHeritage { ClassBody }\n...\n28. For each ClassElement e in order from elements,\na. If IsStatic of e is false, then\ni. Let field be the result of performing ClassElementEvaluation for e with arguments proto and false.\nb. Else,\ni. Let field be the result of performing PropertyDefinitionEvaluation for mClassElementEvaluation for e with arguments F and false.\nc. If field is an abrupt completion, then\n...\nd. If field is not empty,\ni. If IsStatic of e is false, append field to instanceFields.\nii. Otherwise, append field to staticFields.\n...\n34. For each item fieldRecord in order from staticFields,\na. Perform ? DefineField(F, field).\n...\n\n[[Construct]] (argumentsList, newTarget)\n...\n8. If kind is \"base\", then\na. Perform OrdinaryCallBindThis(F, calleeContext, thisArgument).\nb. Let result be InitializeInstanceFields(thisArgument, F).\nc. If result is an abrupt completion, then\ni. Remove calleeContext from execution context stack and restore callerContext as the running execution context.\nii. Return Completion(result).\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/multiple-definitions-computed-names.js", "description": " Computed property names (multiple fields definitions)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/multiple-definitions-computed-symbol-names.js", "description": " Computed property symbol names (multiple fields definitions)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "Symbol", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/multiple-definitions-literal-names-asi.js", "description": " Literal property names with ASI (multiple fields definitions)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/multiple-definitions-literal-names.js", "description": " Literal property names (multiple fields definitions)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/multiple-definitions-rs-field-identifier-initializer.js", "description": " Valid FieldDefinition (multiple fields definitions)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/multiple-definitions-rs-field-identifier.js", "description": " Valid FieldDefinition (multiple fields definitions)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/multiple-definitions-string-literal-names.js", "description": " String literal names (multiple fields definitions)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/multiple-stacked-definitions-computed-names.js", "description": " Computed property names (multiple stacked fields definitions through ASI)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/multiple-stacked-definitions-computed-symbol-names.js", "description": " Computed property symbol names (multiple stacked fields definitions through ASI)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "Symbol", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/multiple-stacked-definitions-literal-names-asi.js", "description": " Literal property names with ASI (multiple stacked fields definitions through ASI)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/multiple-stacked-definitions-literal-names.js", "description": " Literal property names (multiple stacked fields definitions through ASI)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/multiple-stacked-definitions-rs-field-identifier-initializer.js", "description": " Valid FieldDefinition (multiple stacked fields definitions through ASI)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/multiple-stacked-definitions-rs-field-identifier.js", "description": " Valid FieldDefinition (multiple stacked fields definitions through ASI)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/multiple-stacked-definitions-string-literal-names.js", "description": " String literal names (multiple stacked fields definitions through ASI)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/nested-derived-cls-direct-eval-contains-superproperty-1.js", "description": " super.x in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of a MethodDefinition.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperProperty.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/nested-derived-cls-direct-eval-contains-superproperty-2.js", "description": " super['x'] in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |The remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Methods\n\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of a MethodDefinition.\n\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperProperty.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/nested-derived-cls-direct-eval-err-contains-supercall-1.js", "description": " error if `super()['x']` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/nested-derived-cls-direct-eval-err-contains-supercall-2.js", "description": " error if `super().x` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/nested-derived-cls-direct-eval-err-contains-supercall.js", "description": " error if `super()` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/nested-derived-cls-indirect-eval-contains-superproperty-1.js", "description": " super.x in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of a MethodDefinition.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperProperty.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/nested-derived-cls-indirect-eval-contains-superproperty-2.js", "description": " super['x'] in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |The remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Methods\n\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of a MethodDefinition.\n\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperProperty.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/nested-derived-cls-indirect-eval-err-contains-supercall-1.js", "description": " error if `super()['x']` in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/nested-derived-cls-indirect-eval-err-contains-supercall-2.js", "description": " error if `super().x` in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/nested-derived-cls-indirect-eval-err-contains-supercall.js", "description": " error if `super()` in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/nested-direct-eval-err-contains-arguments.js", "description": " error if `arguments` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\nIt is a Syntax Error if ContainsArguments of StatementList is true.\n...\n\nStatic Semantics: ContainsArguments\nIdentifierReference : Identifier\n\n1. If the StringValue of Identifier is \"arguments\", return true.\n...\nFor all other grammatical productions, recurse on all nonterminals. If any piece returns true, then return true. Otherwise return false.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/nested-direct-eval-err-contains-newtarget.js", "description": " error if `new.target` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "new.target", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Functions\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of any function.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains NewTarget.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/nested-indirect-eval-contains-arguments.js", "description": " No error if `arguments` in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated", "noStrict"], "info": " |For indirect eval, the \"Additional Early Error Rules for Eval Inside Initializer\"\n(in #sec-performeval-rules-in-initializer) are NOT applicable.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/nested-indirect-eval-err-contains-newtarget.js", "description": " error if `new.target` in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "new.target", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Functions\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of any function.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains NewTarget.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-no-sc-line-method-computed-names.js", "description": " Computed property names (field definitions followed by a method in a new line without a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-no-sc-line-method-computed-symbol-names.js", "description": " Computed property symbol names (field definitions followed by a method in a new line without a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "Symbol", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-no-sc-line-method-literal-names-asi.js", "description": " Literal property names with ASI (field definitions followed by a method in a new line without a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-no-sc-line-method-literal-names.js", "description": " Literal property names (field definitions followed by a method in a new line without a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-no-sc-line-method-rs-field-identifier-initializer.js", "description": " Valid FieldDefinition (field definitions followed by a method in a new line without a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-no-sc-line-method-rs-field-identifier.js", "description": " Valid FieldDefinition (field definitions followed by a method in a new line without a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-no-sc-line-method-string-literal-names.js", "description": " String literal names (field definitions followed by a method in a new line without a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-sc-line-gen-computed-names.js", "description": " Computed property names (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "class", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-sc-line-gen-computed-symbol-names.js", "description": " Computed property symbol names (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "Symbol", "computed-property-names", "class", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-sc-line-gen-literal-names-asi.js", "description": " Literal property names with ASI (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-sc-line-gen-literal-names.js", "description": " Literal property names (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-sc-line-gen-rs-field-identifier-initializer.js", "description": " Valid FieldDefinition (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-sc-line-gen-rs-field-identifier.js", "description": " Valid FieldDefinition (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-sc-line-gen-string-literal-names.js", "description": " String literal names (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-sc-line-method-computed-names.js", "description": " Computed property names (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-sc-line-method-computed-symbol-names.js", "description": " Computed property symbol names (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "Symbol", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-sc-line-method-literal-names-asi.js", "description": " Literal property names with ASI (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-sc-line-method-literal-names.js", "description": " Literal property names (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-sc-line-method-rs-field-identifier-initializer.js", "description": " Valid FieldDefinition (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-sc-line-method-rs-field-identifier.js", "description": " Valid FieldDefinition (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/new-sc-line-method-string-literal-names.js", "description": " String literal names (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/redeclaration-symbol.js", "description": " Redeclaration of public fields with the same name (field definitions in a class expression)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js", "compareArray.js"], "info": " |2.13.2 Runtime Semantics: ClassDefinitionEvaluation\n\n...\n30. Set the value of F's [[Fields]] internal slot to fieldRecords.\n...\n\n2.14 [[Construct]] ( argumentsList, newTarget)\n\n...\n8. If kind is \"base\", then\n...\nb. Let result be InitializeInstanceFields(thisArgument, F).\n...\n\n2.9 InitializeInstanceFields ( O, constructor )\n\n3. Let fieldRecords be the value of constructor's [[Fields]] internal slot.\n4. For each item fieldRecord in order from fieldRecords,\na. If fieldRecord.[[static]] is false, then\ni. Perform ? DefineField(O, fieldRecord).\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/redeclaration.js", "description": " Redeclaration of public fields with the same name (field definitions in a class expression)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js", "compareArray.js"], "info": " |2.13.2 Runtime Semantics: ClassDefinitionEvaluation\n\n...\n30. Set the value of F's [[Fields]] internal slot to fieldRecords.\n...\n\n2.14 [[Construct]] ( argumentsList, newTarget)\n\n...\n8. If kind is \"base\", then\n...\nb. Let result be InitializeInstanceFields(thisArgument, F).\n...\n\n2.9 InitializeInstanceFields ( O, constructor )\n\n3. Let fieldRecords be the value of constructor's [[Fields]] internal slot.\n4. For each item fieldRecord in order from fieldRecords,\na. If fieldRecord.[[static]] is false, then\ni. Perform ? DefineField(O, fieldRecord).\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/regular-definitions-computed-names.js", "description": " Computed property names (regular fields defintion)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/regular-definitions-computed-symbol-names.js", "description": " Computed property symbol names (regular fields defintion)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "Symbol", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/regular-definitions-literal-names-asi.js", "description": " Literal property names with ASI (regular fields defintion)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/regular-definitions-literal-names.js", "description": " Literal property names (regular fields defintion)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/regular-definitions-rs-field-identifier-initializer.js", "description": " Valid FieldDefinition (regular fields defintion)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/regular-definitions-rs-field-identifier.js", "description": " Valid FieldDefinition (regular fields defintion)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/regular-definitions-string-literal-names.js", "description": " String literal names (regular fields defintion)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-gen-computed-names.js", "description": " Computed property names (field definitions followed by a generator method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "class", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-gen-computed-symbol-names.js", "description": " Computed property symbol names (field definitions followed by a generator method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "Symbol", "computed-property-names", "class", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-gen-literal-names-asi.js", "description": " Literal property names with ASI (field definitions followed by a generator method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-gen-literal-names.js", "description": " Literal property names (field definitions followed by a generator method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-gen-rs-field-identifier-initializer.js", "description": " Valid FieldDefinition (field definitions followed by a generator method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-gen-rs-field-identifier.js", "description": " Valid FieldDefinition (field definitions followed by a generator method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-gen-string-literal-names.js", "description": " String literal names (field definitions followed by a generator method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-method-computed-names.js", "description": " Computed property names (field definitions followed by a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-method-computed-symbol-names.js", "description": " Computed property symbol names (field definitions followed by a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "Symbol", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-method-literal-names-asi.js", "description": " Literal property names with ASI (field definitions followed by a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-method-literal-names.js", "description": " Literal property names (field definitions followed by a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-method-rs-field-identifier-initializer.js", "description": " Valid FieldDefinition (field definitions followed by a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-method-rs-field-identifier.js", "description": " Valid FieldDefinition (field definitions followed by a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/same-line-method-string-literal-names.js", "description": " String literal names (field definitions followed by a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/static-as-valid-instance-field-assigned.js", "description": " static is a valid name of an instance field (field definitions in a class expression)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/static-as-valid-instance-field.js", "description": " static is a valid name of an instance field (field definitions in a class expression)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/static-as-valid-static-field-assigned.js", "description": " static is a valid name of a static field (field definitions in a class expression)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nstatic FieldDefinition ;\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/static-as-valid-static-field.js", "description": " static is a valid name of a static field (field definitions in a class expression)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nstatic FieldDefinition ;\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/static-field-declaration.js", "description": " Static fields are defined using DefineField (field definitions in a class expression)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |Updated Productions\n\nClassElement :\n...\nstatic FieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\nStringLiteral\nNumericLiteral\n\nClassDefinitionEvaluation:\n...\n\n27. Let staticFields be a new empty List.\n28. For each ClassElement e in order from elements,\na. If IsStatic of e is false, then\n...\nb. Else,\ni. Let field be the result of performing PropertyDefinitionEvaluation for mClassElementEvaluation for e with arguments F and false.\nc. If field is an abrupt completion, then\n...\nd. If field is not empty,\ni. If IsStatic of e is false, append field to instanceFields.\nii. Otherwise, append field to staticFields.\n\n34. For each item fieldRecord in order from staticFields,\na. Perform ? DefineField(F, field).\n...\n\nDefineField(receiver, fieldRecord)\n1. Assert: Type(receiver) is Object.\n2. Assert: fieldRecord is a Record as created by ClassFieldDefinitionEvaluation.\n3. Let name be fieldRecord.[[Name]].\n4. Let initializer be fieldRecord.[[Initializer]].\n5. If initializer is not empty, then\na. Let initValue be ? Call(initializer, receiver).\n6. Else, let initValue be undefined.\n7. If fieldRecord.[[IsAnonymousFunctionDefinition]] is true, then\na. Let hasNameProperty be ? HasOwnProperty(initValue, \"name\").\nb. If hasNameProperty is false, perform SetFunctionName(initValue, fieldName).\n8. If fieldName is a Private Name,\na. Perform ? PrivateFieldAdd(fieldName, receiver, initValue).\n9. Else,\na. Assert: IsPropertyKey(fieldName) is true.\nb. Perform ? CreateDataPropertyOrThrow(receiver, fieldName, initValue).\n10. Return.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/static-field-init-this-inside-arrow-function.js", "description": " this in static field initializers refers to class constructor (field definitions in a class expression)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-public", "class"], "flags": ["generated"], "info": " |Updated Productions\n\nClassElement :\n...\nstatic FieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassDefinitionEvaluation:\n...\n\n27. Let staticFields be a new empty List.\n28. For each ClassElement e in order from elements,\na. If IsStatic of e is false, then\n...\nb. Else,\ni. Let field be the result of performing PropertyDefinitionEvaluation for m ClassElementEvaluation for e with arguments F and false.\nc. If field is an abrupt completion, then\n...\nd. If field is not empty,\ni. If IsStatic of e is false, append field to instanceFields.\nii. Otherwise, append field to staticFields.\n\n34. For each item fieldRecord in order from staticFields,\na. Perform ? DefineField(F, field).\n...\n\nDefineField(receiver, fieldRecord)\n1. Assert: Type(receiver) is Object.\n2. Assert: fieldRecord is a Record as created by ClassFieldDefinitionEvaluation.\n3. Let name be fieldRecord.[[Name]].\n4. Let initializer be fieldRecord.[[Initializer]].\n5. If initializer is not empty, then\na. Let initValue be ? Call(initializer, receiver).\n6. Else, let initValue be undefined.\n7. If fieldRecord.[[IsAnonymousFunctionDefinition]] is true, then\na. Let hasNameProperty be ? HasOwnProperty(initValue, \"name\").\nb. If hasNameProperty is false, perform SetFunctionName(initValue, fieldName).\n8. If fieldName is a Private Name,\na. Perform ? PrivateFieldAdd(fieldName, receiver, initValue).\n9. Else,\na. Assert: IsPropertyKey(fieldName) is true.\nb. Perform ? CreateDataPropertyOrThrow(receiver, fieldName, initValue).\n10. Return.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/static-field-init-with-this.js", "description": " Static fields initializer has `this` biding (field definitions in a class expression)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-public", "class"], "flags": ["generated"], "info": " |Updated Productions\n\nClassElement :\n...\nstatic FieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassDefinitionEvaluation:\n...\n\n27. Let staticFields be a new empty List.\n28. For each ClassElement e in order from elements,\na. If IsStatic of e is false, then\n...\nb. Else,\ni. Let field be the result of performing PropertyDefinitionEvaluation for m ClassElementEvaluation for e with arguments F and false.\nc. If field is an abrupt completion, then\n...\nd. If field is not empty,\ni. If IsStatic of e is false, append field to instanceFields.\nii. Otherwise, append field to staticFields.\n\n34. For each item fieldRecord in order from staticFields,\na. Perform ? DefineField(F, field).\n...\n\nDefineField(receiver, fieldRecord)\n1. Assert: Type(receiver) is Object.\n2. Assert: fieldRecord is a Record as created by ClassFieldDefinitionEvaluation.\n3. Let name be fieldRecord.[[Name]].\n4. Let initializer be fieldRecord.[[Initializer]].\n5. If initializer is not empty, then\na. Let initValue be ? Call(initializer, receiver).\n6. Else, let initValue be undefined.\n7. If fieldRecord.[[IsAnonymousFunctionDefinition]] is true, then\na. Let hasNameProperty be ? HasOwnProperty(initValue, \"name\").\nb. If hasNameProperty is false, perform SetFunctionName(initValue, fieldName).\n8. If fieldName is a Private Name,\na. Perform ? PrivateFieldAdd(fieldName, receiver, initValue).\n9. Else,\na. Assert: IsPropertyKey(fieldName) is true.\nb. Perform ? CreateDataPropertyOrThrow(receiver, fieldName, initValue).\n10. Return.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/static-field-redeclaration.js", "description": " Static fields can be redeclared (field definitions in a class expression)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-public", "class"], "flags": ["generated"], "info": " |Updated Productions\n\nClassElement :\n...\nstatic FieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassDefinitionEvaluation:\n...\n\n27. Let staticFields be a new empty List.\n28. For each ClassElement e in order from elements,\na. If IsStatic of e is false, then\n...\nb. Else,\ni. Let field be the result of performing PropertyDefinitionEvaluation for m ClassElementEvaluation for e with arguments F and false.\nc. If field is an abrupt completion, then\n...\nd. If field is not empty,\ni. If IsStatic of e is false, append field to instanceFields.\nii. Otherwise, append field to staticFields.\n\n34. For each item fieldRecord in order from staticFields,\na. Perform ? DefineField(F, field).\n...\n\nDefineField(receiver, fieldRecord)\n1. Assert: Type(receiver) is Object.\n2. Assert: fieldRecord is a Record as created by ClassFieldDefinitionEvaluation.\n3. Let name be fieldRecord.[[Name]].\n4. Let initializer be fieldRecord.[[Initializer]].\n5. If initializer is not empty, then\na. Let initValue be ? Call(initializer, receiver).\n6. Else, let initValue be undefined.\n7. If fieldRecord.[[IsAnonymousFunctionDefinition]] is true, then\na. Let hasNameProperty be ? HasOwnProperty(initValue, \"name\").\nb. If hasNameProperty is false, perform SetFunctionName(initValue, fieldName).\n8. If fieldName is a Private Name,\na. Perform ? PrivateFieldAdd(fieldName, receiver, initValue).\n9. Else,\na. Assert: IsPropertyKey(fieldName) is true.\nb. Perform ? CreateDataPropertyOrThrow(receiver, fieldName, initValue).\n10. Return.\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/super-access-from-arrow-func-on-field.js", "description": " super inside arrow functions on field initializer resolves to class' super (field definitions in a class expression)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class-static-fields-public", "class"], "flags": ["generated"], "info": " |ClassElementName :\nPropertyName\nPrivateName\n\nSuperProperty:\nsuper[Expression]\nsuper.IdentifierName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/syntax/valid/grammar-field-classelementname-initializer-alt.js", "description": " FieldDefinition, ClassElementName, PropertyName = Initializer Syntax (class expression)", "esid": " prod-ClassElement", "features": ["class-fields-public", "class"], "flags": ["generated"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nInitializer :\n= AssignmentExpression\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart ::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart ::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue ::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/syntax/valid/grammar-field-classelementname-initializer.js", "description": " FieldDefinition, ClassElementName, PropertyName = Initializer Syntax (class expression)", "esid": " prod-ClassElement", "features": ["class-fields-public", "class"], "flags": ["generated"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nInitializer :\n= AssignmentExpression\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart ::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart ::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue ::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/syntax/valid/grammar-field-identifier-alt.js", "description": " Valid FieldDefinition, ClassElementName, PropertyName Syntax (class expression)", "esid": " prod-ClassElement", "features": ["class-fields-public", "class"], "flags": ["generated"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\nStringLiteral\nNumericLiteral\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart ::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart ::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue ::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/syntax/valid/grammar-field-identifier.js", "description": " Valid FieldDefinition, ClassElementName, PropertyName Syntax (class expression)", "esid": " prod-ClassElement", "features": ["class-fields-public", "class"], "flags": ["generated"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\nStringLiteral\nNumericLiteral\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart ::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart ::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue ::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/syntax/valid/grammar-fields-multi-line.js", "description": " Valid multi-line, multi-field (class expression)", "esid": " prod-ClassElement", "features": ["class-fields-public", "class"], "flags": ["generated"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/wrapped-in-sc-computed-names.js", "description": " Computed property names (fields definition wrapped in semicolons)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/wrapped-in-sc-computed-symbol-names.js", "description": " Computed property symbol names (fields definition wrapped in semicolons)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "Symbol", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/wrapped-in-sc-literal-names-asi.js", "description": " Literal property names with ASI (fields definition wrapped in semicolons)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/wrapped-in-sc-literal-names.js", "description": " Literal property names (fields definition wrapped in semicolons)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/wrapped-in-sc-rs-field-identifier-initializer.js", "description": " Valid FieldDefinition (fields definition wrapped in semicolons)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/wrapped-in-sc-rs-field-identifier.js", "description": " Valid FieldDefinition (fields definition wrapped in semicolons)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/expressions/class/elements/wrapped-in-sc-string-literal-names.js", "description": " String literal names (fields definition wrapped in semicolons)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/expressions/class/name.js", "esid": " sec-class-definitions-runtime-semantics-evaluation", "description": " Assignment of function `name` attribute", "info": " |ClassExpression : class ClassTail\n\n1. Let value be ? ClassDefinitionEvaluation of ClassTail with arguments\nundefined and \"\".\n...\n4. Return value.\n\nClassExpression : class BindingIdentifier ClassTail\n\n1. Let className be StringValue of BindingIdentifier.\n2. Let value be ? ClassDefinitionEvaluation of ClassTail with arguments\nclassName and className.\n...\n4. Return value.\n\n14.6.13 Runtime Semantics: ClassDefinitionEvaluation\n\n...\n12. Let constructorInfo be DefineMethod of constructor with arguments proto,\nclassName as the optional name argument, and constructorParent.\n...\n\n14.3.7 Runtime Semantics: DefineMethod\n\n...\n7. Let closure be FunctionCreate(kind, UniqueFormalParameters, FunctionBody,\nscope, name, prototype).\n...\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/language/expressions/coalesce/abrupt-is-a-short-circuit.js", "description": " >Abrupt completions are also a Short circuit and prevent evaluation of the right-side expressions\n", "esid": " sec-conditional-operator", "info": " |ConditionalExpression :\nShortCircuitExpression\nShortCircuitExpression ? AssignmentExpression : AssignmentExpression\n\nShortCircuitExpression :\nLogicalORExpression\nCoalesceExpression\n\nCoalesceExpression :\nCoalesceExpressionHead ?? BitwiseORExpression\n\nCoalesceExpressionHead :\nCoalesceExpression\nBitwiseORExpression\n\nRuntime Semantics: Evaluation\n\nCoalesceExpression:CoalesceExpressionHead??BitwiseORExpression\n\n1. Let lref be the result of evaluating CoalesceExpressionHead.\n2. Let lval be ? GetValue(lref).\n3. If lval is undefined or null,\na. Let rref be the result of evaluating BitwiseORExpression.\nb. Return ? GetValue(rref).\n4. Otherwise, return lval.\n", "features": ["coalesce-expression"]}, {"path": "./test262-main/test/language/expressions/coalesce/chainable-if-parenthesis-covered-logical-and.js", "description": " >CoalesceExpression is chainable with the LogicalANDExpression is any is covered.\n", "esid": " sec-conditional-operator", "info": " |ConditionalExpression :\nShortCircuitExpression\nShortCircuitExpression ? AssignmentExpression : AssignmentExpression\n\nShortCircuitExpression :\nLogicalORExpression\nCoalesceExpression\n\nCoalesceExpression :\nCoalesceExpressionHead ?? BitwiseORExpression\n\nCoalesceExpressionHead :\nCoalesceExpression\nBitwiseORExpression\n\nRuntime Semantics: Evaluation\n\nCoalesceExpression:CoalesceExpressionHead??BitwiseORExpression\n\n1. Let lref be the result of evaluating CoalesceExpressionHead.\n2. Let lval be ? GetValue(lref).\n3. If lval is undefined or null,\na. Let rref be the result of evaluating BitwiseORExpression.\nb. Return ? GetValue(rref).\n4. Otherwise, return lval.\n", "features": ["coalesce-expression"]}, {"path": "./test262-main/test/language/expressions/coalesce/chainable-if-parenthesis-covered-logical-or.js", "description": " >CoalesceExpression is chainable with the LogicalORExpression is any is covered.\n", "esid": " sec-conditional-operator", "info": " |ConditionalExpression :\nShortCircuitExpression\nShortCircuitExpression ? AssignmentExpression : AssignmentExpression\n\nShortCircuitExpression :\nLogicalORExpression\nCoalesceExpression\n\nCoalesceExpression :\nCoalesceExpressionHead ?? BitwiseORExpression\n\nCoalesceExpressionHead :\nCoalesceExpression\nBitwiseORExpression\n\nRuntime Semantics: Evaluation\n\nCoalesceExpression:CoalesceExpressionHead??BitwiseORExpression\n\n1. Let lref be the result of evaluating CoalesceExpressionHead.\n2. Let lval be ? GetValue(lref).\n3. If lval is undefined or null,\na. Let rref be the result of evaluating BitwiseORExpression.\nb. Return ? GetValue(rref).\n4. Otherwise, return lval.\n", "features": ["coalesce-expression"]}, {"path": "./test262-main/test/language/expressions/coalesce/chainable-with-bitwise-and.js", "description": " >CoalesceExpression is chainable with the BitwiseANDExpression\n", "esid": " sec-conditional-operator", "info": " |ConditionalExpression :\nShortCircuitExpression\nShortCircuitExpression ? AssignmentExpression : AssignmentExpression\n\nShortCircuitExpression :\nLogicalORExpression\nCoalesceExpression\n\nCoalesceExpression :\nCoalesceExpressionHead ?? BitwiseORExpression\n\nCoalesceExpressionHead :\nCoalesceExpression\nBitwiseORExpression\n\nRuntime Semantics: Evaluation\n\nCoalesceExpression:CoalesceExpressionHead??BitwiseORExpression\n\n1. Let lref be the result of evaluating CoalesceExpressionHead.\n2. Let lval be ? GetValue(lref).\n3. If lval is undefined or null,\na. Let rref be the result of evaluating BitwiseORExpression.\nb. Return ? GetValue(rref).\n4. Otherwise, return lval.\n", "features": ["coalesce-expression"]}, {"path": "./test262-main/test/language/expressions/coalesce/chainable-with-bitwise-or.js", "description": " >CoalesceExpression is chainable with the BitwiseORExpression\n", "esid": " sec-conditional-operator", "info": " |ConditionalExpression :\nShortCircuitExpression\nShortCircuitExpression ? AssignmentExpression : AssignmentExpression\n\nShortCircuitExpression :\nLogicalORExpression\nCoalesceExpression\n\nCoalesceExpression :\nCoalesceExpressionHead ?? BitwiseORExpression\n\nCoalesceExpressionHead :\nCoalesceExpression\nBitwiseORExpression\n\nRuntime Semantics: Evaluation\n\nCoalesceExpression:CoalesceExpressionHead??BitwiseORExpression\n\n1. Let lref be the result of evaluating CoalesceExpressionHead.\n2. Let lval be ? GetValue(lref).\n3. If lval is undefined or null,\na. Let rref be the result of evaluating BitwiseORExpression.\nb. Return ? GetValue(rref).\n4. Otherwise, return lval.\n", "features": ["coalesce-expression"]}, {"path": "./test262-main/test/language/expressions/coalesce/chainable-with-bitwise-xor.js", "description": " >CoalesceExpression is chainable with the BitwiseXORExpression\n", "esid": " sec-conditional-operator", "info": " |ConditionalExpression :\nShortCircuitExpression\nShortCircuitExpression ? AssignmentExpression : AssignmentExpression\n\nShortCircuitExpression :\nLogicalORExpression\nCoalesceExpression\n\nCoalesceExpression :\nCoalesceExpressionHead ?? BitwiseORExpression\n\nCoalesceExpressionHead :\nCoalesceExpression\nBitwiseORExpression\n\nRuntime Semantics: Evaluation\n\nCoalesceExpression:CoalesceExpressionHead??BitwiseORExpression\n\n1. Let lref be the result of evaluating CoalesceExpressionHead.\n2. Let lval be ? GetValue(lref).\n3. If lval is undefined or null,\na. Let rref be the result of evaluating BitwiseORExpression.\nb. Return ? GetValue(rref).\n4. Otherwise, return lval.\n", "features": ["coalesce-expression"]}, {"path": "./test262-main/test/language/expressions/coalesce/chainable.js", "description": " >If the CoalesceExpressionHead is undefined or null, follow return the right-side value.\nOtherwise, return the left-side value.\n", "esid": " sec-conditional-operator", "info": " |ConditionalExpression :\nShortCircuitExpression\nShortCircuitExpression ? AssignmentExpression : AssignmentExpression\n\nShortCircuitExpression :\nLogicalORExpression\nCoalesceExpression\n\nCoalesceExpression :\nCoalesceExpressionHead ?? BitwiseORExpression\n\nCoalesceExpressionHead :\nCoalesceExpression\nBitwiseORExpression\n\nRuntime Semantics: Evaluation\n\nCoalesceExpression:CoalesceExpressionHead??BitwiseORExpression\n\n1. Let lref be the result of evaluating CoalesceExpressionHead.\n2. Let lval be ? GetValue(lref).\n3. If lval is undefined or null,\na. Let rref be the result of evaluating BitwiseORExpression.\nb. Return ? GetValue(rref).\n4. Otherwise, return lval.\n", "features": ["coalesce-expression"]}, {"path": "./test262-main/test/language/expressions/coalesce/follows-null.js", "description": " >If the CoalesceExpressionHead is null, follow return the right-side eval.\n", "esid": " sec-conditional-operator", "info": " |ConditionalExpression :\nShortCircuitExpression\nShortCircuitExpression ? AssignmentExpression : AssignmentExpression\n\nShortCircuitExpression :\nLogicalORExpression\nCoalesceExpression\n\nCoalesceExpression :\nCoalesceExpressionHead ?? BitwiseORExpression\n\nCoalesceExpressionHead :\nCoalesceExpression\nBitwiseORExpression\n\nRuntime Semantics: Evaluation\n\nCoalesceExpression:CoalesceExpressionHead??BitwiseORExpression\n\n1. Let lref be the result of evaluating CoalesceExpressionHead.\n2. Let lval be ? GetValue(lref).\n3. If lval is undefined or null,\na. Let rref be the result of evaluating BitwiseORExpression.\nb. Return ? GetValue(rref).\n4. Otherwise, return lval.\n", "features": ["coalesce-expression"]}, {"path": "./test262-main/test/language/expressions/coalesce/follows-undefined.js", "description": " >If the CoalesceExpressionHead is undefined, follow return the right-side eval.\n", "esid": " sec-conditional-operator", "info": " |ConditionalExpression :\nShortCircuitExpression\nShortCircuitExpression ? AssignmentExpression : AssignmentExpression\n\nShortCircuitExpression :\nLogicalORExpression\nCoalesceExpression\n\nCoalesceExpression :\nCoalesceExpressionHead ?? BitwiseORExpression\n\nCoalesceExpressionHead :\nCoalesceExpression\nBitwiseORExpression\n\nRuntime Semantics: Evaluation\n\nCoalesceExpression:CoalesceExpressionHead??BitwiseORExpression\n\n1. Let lref be the result of evaluating CoalesceExpressionHead.\n2. Let lval be ? GetValue(lref).\n3. If lval is undefined or null,\na. Let rref be the result of evaluating BitwiseORExpression.\nb. Return ? GetValue(rref).\n4. Otherwise, return lval.\n", "features": ["coalesce-expression"]}, {"path": "./test262-main/test/language/expressions/coalesce/short-circuit-number-0.js", "description": " >Short circuit if the CoalesceExpressionHead is not undefined or null (0)\n", "esid": " sec-conditional-operator", "info": " |ConditionalExpression :\nShortCircuitExpression\nShortCircuitExpression ? AssignmentExpression : AssignmentExpression\n\nShortCircuitExpression :\nLogicalORExpression\nCoalesceExpression\n\nCoalesceExpression :\nCoalesceExpressionHead ?? BitwiseORExpression\n\nCoalesceExpressionHead :\nCoalesceExpression\nBitwiseORExpression\n\nRuntime Semantics: Evaluation\n\nCoalesceExpression:CoalesceExpressionHead??BitwiseORExpression\n\n1. Let lref be the result of evaluating CoalesceExpressionHead.\n2. Let lval be ? GetValue(lref).\n3. If lval is undefined or null,\na. Let rref be the result of evaluating BitwiseORExpression.\nb. Return ? GetValue(rref).\n4. Otherwise, return lval.\n", "features": ["coalesce-expression"]}, {"path": "./test262-main/test/language/expressions/coalesce/short-circuit-number-42.js", "description": " >Short circuit if the CoalesceExpressionHead is not undefined or null (42)\n", "esid": " sec-conditional-operator", "info": " |ConditionalExpression :\nShortCircuitExpression\nShortCircuitExpression ? AssignmentExpression : AssignmentExpression\n\nShortCircuitExpression :\nLogicalORExpression\nCoalesceExpression\n\nCoalesceExpression :\nCoalesceExpressionHead ?? BitwiseORExpression\n\nCoalesceExpressionHead :\nCoalesceExpression\nBitwiseORExpression\n\nRuntime Semantics: Evaluation\n\nCoalesceExpression:CoalesceExpressionHead??BitwiseORExpression\n\n1. Let lref be the result of evaluating CoalesceExpressionHead.\n2. Let lval be ? GetValue(lref).\n3. If lval is undefined or null,\na. Let rref be the result of evaluating BitwiseORExpression.\nb. Return ? GetValue(rref).\n4. Otherwise, return lval.\n", "features": ["coalesce-expression"]}, {"path": "./test262-main/test/language/expressions/coalesce/short-circuit-number-empty-string.js", "description": " >Short circuit if the CoalesceExpressionHead is not undefined or null (the empty string)\n", "esid": " sec-conditional-operator", "info": " |ConditionalExpression :\nShortCircuitExpression\nShortCircuitExpression ? AssignmentExpression : AssignmentExpression\n\nShortCircuitExpression :\nLogicalORExpression\nCoalesceExpression\n\nCoalesceExpression :\nCoalesceExpressionHead ?? BitwiseORExpression\n\nCoalesceExpressionHead :\nCoalesceExpression\nBitwiseORExpression\n\nRuntime Semantics: Evaluation\n\nCoalesceExpression:CoalesceExpressionHead??BitwiseORExpression\n\n1. Let lref be the result of evaluating CoalesceExpressionHead.\n2. Let lval be ? GetValue(lref).\n3. If lval is undefined or null,\na. Let rref be the result of evaluating BitwiseORExpression.\nb. Return ? GetValue(rref).\n4. Otherwise, return lval.\n", "features": ["coalesce-expression"]}, {"path": "./test262-main/test/language/expressions/coalesce/short-circuit-number-false.js", "description": " >Short circuit if the CoalesceExpressionHead is not undefined or null (false)\n", "esid": " sec-conditional-operator", "info": " |ConditionalExpression :\nShortCircuitExpression\nShortCircuitExpression ? AssignmentExpression : AssignmentExpression\n\nShortCircuitExpression :\nLogicalORExpression\nCoalesceExpression\n\nCoalesceExpression :\nCoalesceExpressionHead ?? BitwiseORExpression\n\nCoalesceExpressionHead :\nCoalesceExpression\nBitwiseORExpression\n\nRuntime Semantics: Evaluation\n\nCoalesceExpression:CoalesceExpressionHead??BitwiseORExpression\n\n1. Let lref be the result of evaluating CoalesceExpressionHead.\n2. Let lval be ? GetValue(lref).\n3. If lval is undefined or null,\na. Let rref be the result of evaluating BitwiseORExpression.\nb. Return ? GetValue(rref).\n4. Otherwise, return lval.\n", "features": ["coalesce-expression"]}, {"path": "./test262-main/test/language/expressions/coalesce/short-circuit-number-object.js", "description": " >Short circuit if the CoalesceExpressionHead is not undefined or null (object)\n", "esid": " sec-conditional-operator", "info": " |ConditionalExpression :\nShortCircuitExpression\nShortCircuitExpression ? AssignmentExpression : AssignmentExpression\n\nShortCircuitExpression :\nLogicalORExpression\nCoalesceExpression\n\nCoalesceExpression :\nCoalesceExpressionHead ?? BitwiseORExpression\n\nCoalesceExpressionHead :\nCoalesceExpression\nBitwiseORExpression\n\nRuntime Semantics: Evaluation\n\nCoalesceExpression:CoalesceExpressionHead??BitwiseORExpression\n\n1. Let lref be the result of evaluating CoalesceExpressionHead.\n2. Let lval be ? GetValue(lref).\n3. If lval is undefined or null,\na. Let rref be the result of evaluating BitwiseORExpression.\nb. Return ? GetValue(rref).\n4. Otherwise, return lval.\n", "features": ["coalesce-expression"]}, {"path": "./test262-main/test/language/expressions/coalesce/short-circuit-number-string.js", "description": " >Short circuit if the CoalesceExpressionHead is not undefined or null (string)\n", "esid": " sec-conditional-operator", "info": " |ConditionalExpression :\nShortCircuitExpression\nShortCircuitExpression ? AssignmentExpression : AssignmentExpression\n\nShortCircuitExpression :\nLogicalORExpression\nCoalesceExpression\n\nCoalesceExpression :\nCoalesceExpressionHead ?? BitwiseORExpression\n\nCoalesceExpressionHead :\nCoalesceExpression\nBitwiseORExpression\n\nRuntime Semantics: Evaluation\n\nCoalesceExpression:CoalesceExpressionHead??BitwiseORExpression\n\n1. Let lref be the result of evaluating CoalesceExpressionHead.\n2. Let lval be ? GetValue(lref).\n3. If lval is undefined or null,\na. Let rref be the result of evaluating BitwiseORExpression.\nb. Return ? GetValue(rref).\n4. Otherwise, return lval.\n", "features": ["coalesce-expression"]}, {"path": "./test262-main/test/language/expressions/coalesce/short-circuit-number-symbol.js", "description": " >Short circuit if the CoalesceExpressionHead is not undefined or null (Symbol)\n", "esid": " sec-conditional-operator", "info": " |ConditionalExpression :\nShortCircuitExpression\nShortCircuitExpression ? AssignmentExpression : AssignmentExpression\n\nShortCircuitExpression :\nLogicalORExpression\nCoalesceExpression\n\nCoalesceExpression :\nCoalesceExpressionHead ?? BitwiseORExpression\n\nCoalesceExpressionHead :\nCoalesceExpression\nBitwiseORExpression\n\nRuntime Semantics: Evaluation\n\nCoalesceExpression:CoalesceExpressionHead??BitwiseORExpression\n\n1. Let lref be the result of evaluating CoalesceExpressionHead.\n2. Let lval be ? GetValue(lref).\n3. If lval is undefined or null,\na. Let rref be the result of evaluating BitwiseORExpression.\nb. Return ? GetValue(rref).\n4. Otherwise, return lval.\n", "features": ["coalesce-expression"]}, {"path": "./test262-main/test/language/expressions/coalesce/short-circuit-number-true.js", "description": " >Short circuit if the CoalesceExpressionHead is not undefined or null (true)\n", "esid": " sec-conditional-operator", "info": " |ConditionalExpression :\nShortCircuitExpression\nShortCircuitExpression ? AssignmentExpression : AssignmentExpression\n\nShortCircuitExpression :\nLogicalORExpression\nCoalesceExpression\n\nCoalesceExpression :\nCoalesceExpressionHead ?? BitwiseORExpression\n\nCoalesceExpressionHead :\nCoalesceExpression\nBitwiseORExpression\n\nRuntime Semantics: Evaluation\n\nCoalesceExpression:CoalesceExpressionHead??BitwiseORExpression\n\n1. Let lref be the result of evaluating CoalesceExpressionHead.\n2. Let lval be ? GetValue(lref).\n3. If lval is undefined or null,\na. Let rref be the result of evaluating BitwiseORExpression.\nb. Return ? GetValue(rref).\n4. Otherwise, return lval.\n", "features": ["coalesce-expression"]}, {"path": "./test262-main/test/language/expressions/coalesce/short-circuit-prevents-evaluation.js", "description": " >Short circuit can prevent evaluation of the right-side expressions\n", "esid": " sec-conditional-operator", "info": " |ConditionalExpression :\nShortCircuitExpression\nShortCircuitExpression ? AssignmentExpression : AssignmentExpression\n\nShortCircuitExpression :\nLogicalORExpression\nCoalesceExpression\n\nCoalesceExpression :\nCoalesceExpressionHead ?? BitwiseORExpression\n\nCoalesceExpressionHead :\nCoalesceExpression\nBitwiseORExpression\n\nRuntime Semantics: Evaluation\n\nCoalesceExpression:CoalesceExpressionHead??BitwiseORExpression\n\n1. Let lref be the result of evaluating CoalesceExpressionHead.\n2. Let lval be ? GetValue(lref).\n3. If lval is undefined or null,\na. Let rref be the result of evaluating BitwiseORExpression.\nb. Return ? GetValue(rref).\n4. Otherwise, return lval.\n", "features": ["coalesce-expression"]}, {"path": "./test262-main/test/language/expressions/conditional/coalesce-expr-ternary.js", "description": " >ShortCircuitExpression in the Conditional Expression (? :)\n", "esid": " sec-conditional-operator", "info": " |ShortCircuitExpression :\nLogicalORExpression\nCoalesceExpression\n\nCoalesceExpression :\nCoalesceExpressionHead ?? BitwiseORExpression\n\nCoalesceExpressionHead :\nCoalesceExpression\nBitwiseORExpression\n\nConditionalExpression :\nShortCircuitExpression\nShortCircuitExpression ? AssignmentExpression : AssignmentExpression\n", "features": ["coalesce-expression"]}, {"path": "./test262-main/test/language/expressions/function/eval-var-scope-syntax-err.js", "description": " sloppy direct eval in params introduces var (function expression in sloppy code)", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["default-parameters"], "flags": ["generated", "noStrict"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n\nRuntime Semantics: IteratorBindingInitialization\nFormalParameter : BindingElement\n\n1. Return the result of performing IteratorBindingInitialization for BindingElement with arguments iteratorRecord and environment.\n\n"}, {"path": "./test262-main/test/language/expressions/function/scope-param-rest-elem-var-close.js", "esid": " sec-functiondeclarationinstantiation", "description": " >sloppy direct evals in params introduce vars\n", "info": " |[...]\n20. Else,\na. NOTE: A separate Environment Record is needed to ensure that bindings created by direct eval calls in the formal parameter list are outside the environment where parameters are declared.\nb. Let calleeEnv be the LexicalEnvironment of calleeContext.\nc. Let env be NewDeclarativeEnvironment(calleeEnv).\nd. Let envRec be env's EnvironmentRecord.\n[...]\n", "flags": ["noStrict"]}, {"path": "./test262-main/test/language/expressions/function/scope-param-rest-elem-var-open.js", "esid": " sec-functiondeclarationinstantiation", "description": " >sloppy direct evals in params introduce vars\n", "info": " |[...]\n20. Else,\na. NOTE: A separate Environment Record is needed to ensure that bindings created by direct eval calls in the formal parameter list are outside the environment where parameters are declared.\nb. Let calleeEnv be the LexicalEnvironment of calleeContext.\nc. Let env be NewDeclarativeEnvironment(calleeEnv).\nd. Let envRec be env's EnvironmentRecord.\n[...]\n", "flags": ["noStrict"]}, {"path": "./test262-main/test/language/expressions/generators/eval-var-scope-syntax-err.js", "description": " sloppy direct eval in params introduces var (generator function expression in sloppy code)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["default-parameters", "generators"], "flags": ["generated", "noStrict"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n\n\nRuntime Semantics: IteratorBindingInitialization\nFormalParameter : BindingElement\n\n1. Return the result of performing IteratorBindingInitialization for BindingElement with arguments iteratorRecord and environment.\n\n"}, {"path": "./test262-main/test/language/expressions/generators/scope-param-rest-elem-var-close.js", "esid": " sec-functiondeclarationinstantiation", "description": " >sloppy direct evals in params introduce vars\n", "info": " |[...]\n20. Else,\na. NOTE: A separate Environment Record is needed to ensure that bindings created by direct eval calls in the formal parameter list are outside the environment where parameters are declared.\nb. Let calleeEnv be the LexicalEnvironment of calleeContext.\nc. Let env be NewDeclarativeEnvironment(calleeEnv).\nd. Let envRec be env's EnvironmentRecord.\n[...]\n", "flags": ["noStrict"], "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/generators/scope-param-rest-elem-var-open.js", "esid": " sec-functiondeclarationinstantiation", "description": " >sloppy direct evals in params introduce vars\n", "info": " |[...]\n20. Else,\na. NOTE: A separate Environment Record is needed to ensure that bindings created by direct eval calls in the formal parameter list are outside the environment where parameters are declared.\nb. Let calleeEnv be the LexicalEnvironment of calleeContext.\nc. Let env be NewDeclarativeEnvironment(calleeEnv).\nd. Let envRec be env's EnvironmentRecord.\n[...]\n", "flags": ["noStrict"], "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/object/cpn-obj-lit-computed-property-name-from-expression-coalesce.js", "description": " Computed property name from coalesce (ComputedPropertyName in ObjectLiteral)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names"], "flags": ["generated"], "info": " |ObjectLiteral:\n{ PropertyDefinitionList }\n\nPropertyDefinitionList:\nPropertyDefinition\n\nPropertyDefinition:\nPropertyName: AssignmentExpression\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/object/cpn-obj-lit-computed-property-name-from-integer-separators.js", "description": " Computed property name from integer with separators (ComputedPropertyName in ObjectLiteral)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names"], "flags": ["generated"], "info": " |ObjectLiteral:\n{ PropertyDefinitionList }\n\nPropertyDefinitionList:\nPropertyDefinition\n\nPropertyDefinition:\nPropertyName: AssignmentExpression\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/object/literal-property-name-bigint.js", "description": " >BigInt in LiteralPropertyName must be valid and the property name must be\nthe string representation of the numeric value.\n", "esid": " prod-PropertyName", "info": " |PropertyName[Yield, Await]:\nLiteralPropertyName\nComputedPropertyName[?Yield, ?Await]\n\nLiteralPropertyName:\nIdentifierName\nStringLiteral\nNumericLiteral\n\nNumericLiteral:\nDecimalLiteral\nDecimalBigIntegerLiteral\n\nLiteralPropertyName: NumericLiteral\n1. Let _nbr_ be the NumericValue of |NumericLiteral|.\n1. Return ! ToString(_nbr_).\n", "features": ["BigInt", "class", "destructuring-binding", "let"]}, {"path": "./test262-main/test/language/expressions/object/method-definition/async-gen-meth-eval-var-scope-syntax-err.js", "description": " sloppy direct eval in params introduces var (async generator method in sloppy code)", "esid": " sec-asyncgenerator-definitions-propertydefinitionevaluation", "features": ["default-parameters", "async-iteration"], "flags": ["generated", "noStrict"], "info": " |AsyncGeneratorMethod :\nasync [no LineTerminator here] * PropertyName ( UniqueFormalParameters )\n{ AsyncGeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this AsyncGeneratorMethod is strict mode code, let strict be true.\nOtherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be ! AsyncGeneratorFunctionCreate(Method, UniqueFormalParameters,\nAsyncGeneratorBody, scope, strict).\n[...]\n\n\n\nRuntime Semantics: IteratorBindingInitialization\nFormalParameter : BindingElement\n\n1. Return the result of performing IteratorBindingInitialization for BindingElement with arguments iteratorRecord and environment.\n\n"}, {"path": "./test262-main/test/language/expressions/object/method-definition/gen-meth-eval-var-scope-syntax-err.js", "description": " sloppy direct eval in params introduces var (generator method in sloppy code)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["default-parameters", "generators"], "flags": ["generated", "noStrict"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n\n\nRuntime Semantics: IteratorBindingInitialization\nFormalParameter : BindingElement\n\n1. Return the result of performing IteratorBindingInitialization for BindingElement with arguments iteratorRecord and environment.\n\n"}, {"path": "./test262-main/test/language/expressions/object/method-definition/meth-eval-var-scope-syntax-err.js", "description": " sloppy direct eval in params introduces var (method in sloppy code)", "esid": " sec-runtime-semantics-definemethod", "features": ["default-parameters"], "flags": ["generated", "noStrict"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n\nRuntime Semantics: IteratorBindingInitialization\nFormalParameter : BindingElement\n\n1. Return the result of performing IteratorBindingInitialization for BindingElement with arguments iteratorRecord and environment.\n\n"}, {"path": "./test262-main/test/language/expressions/object/scope-gen-meth-param-rest-elem-var-close.js", "esid": " sec-functiondeclarationinstantiation", "description": " >sloppy direct evals in params introduce vars\n", "info": " |[...]\n20. Else,\na. NOTE: A separate Environment Record is needed to ensure that bindings created by direct eval calls in the formal parameter list are outside the environment where parameters are declared.\nb. Let calleeEnv be the LexicalEnvironment of calleeContext.\nc. Let env be NewDeclarativeEnvironment(calleeEnv).\nd. Let envRec be env's EnvironmentRecord.\n[...]\n", "flags": ["noStrict"], "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/object/scope-gen-meth-param-rest-elem-var-open.js", "esid": " sec-functiondeclarationinstantiation", "description": " >sloppy direct evals in params introduce vars\n", "info": " |[...]\n20. Else,\na. NOTE: A separate Environment Record is needed to ensure that bindings created by direct eval calls in the formal parameter list are outside the environment where parameters are declared.\nb. Let calleeEnv be the LexicalEnvironment of calleeContext.\nc. Let env be NewDeclarativeEnvironment(calleeEnv).\nd. Let envRec be env's EnvironmentRecord.\n[...]\n", "flags": ["noStrict"], "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/object/scope-meth-param-rest-elem-var-close.js", "esid": " sec-functiondeclarationinstantiation", "description": " >sloppy direct evals in params introduce vars\n", "info": " |[...]\n20. Else,\na. NOTE: A separate Environment Record is needed to ensure that bindings created by direct eval calls in the formal parameter list are outside the environment where parameters are declared.\nb. Let calleeEnv be the LexicalEnvironment of calleeContext.\nc. Let env be NewDeclarativeEnvironment(calleeEnv).\nd. Let envRec be env's EnvironmentRecord.\n[...]\n", "flags": ["noStrict"]}, {"path": "./test262-main/test/language/expressions/object/scope-meth-param-rest-elem-var-open.js", "esid": " sec-functiondeclarationinstantiation", "description": " >sloppy direct evals in params introduce vars\n", "info": " |[...]\n20. Else,\na. NOTE: A separate Environment Record is needed to ensure that bindings created by direct eval calls in the formal parameter list are outside the environment where parameters are declared.\nb. Let calleeEnv be the LexicalEnvironment of calleeContext.\nc. Let env be NewDeclarativeEnvironment(calleeEnv).\nd. Let envRec be env's EnvironmentRecord.\n[...]\n", "flags": ["noStrict"]}, {"path": "./test262-main/test/language/expressions/optional-chaining/call-expression.js", "esid": " prod-OptionalExpression", "description": " >optional chain on call expression\n", "info": " |Left-Hand-Side Expressions\nOptionalExpression:\nCallExpression OptionalChain\n", "features": ["optional-chaining"]}, {"path": "./test262-main/test/language/expressions/optional-chaining/iteration-statement-do.js", "esid": " prod-OptionalExpression", "description": " >optional chain in test portion of do while statement\n", "info": " |IterationStatement\ndo Statement while (OptionalExpression)\n", "features": ["optional-chaining"]}, {"path": "./test262-main/test/language/expressions/optional-chaining/iteration-statement-for-in.js", "esid": " prod-OptionalExpression", "description": " >optional chain in test portion of do while statement\n", "info": " |IterationStatement\nfor (LeftHandSideExpression in Expression) Statement\n", "features": ["optional-chaining"]}, {"path": "./test262-main/test/language/expressions/optional-chaining/iteration-statement-for-of-type-error.js", "esid": " prod-OptionalExpression", "description": " >optional chain returning undefined in RHS of for of statement\n", "info": " |IterationStatement\nfor (LeftHandSideExpression of Expression) Statement\n", "features": ["optional-chaining"]}, {"path": "./test262-main/test/language/expressions/optional-chaining/iteration-statement-for.js", "esid": " prod-OptionalExpression", "description": " >optional chain in init/test/update of for statement\n", "info": " |IterationStatement\nfor (Expression; Expression; Expression) Statement\n", "features": ["optional-chaining"]}, {"path": "./test262-main/test/language/expressions/optional-chaining/iteration-statement-while.js", "esid": " prod-OptionalExpression", "description": " >optional chain in test portion of while statement\n", "info": " |IterationStatement\nwhile (Expression) Statement\n", "features": ["optional-chaining"]}, {"path": "./test262-main/test/language/expressions/optional-chaining/member-expression.js", "esid": " prod-OptionalExpression", "description": " >optional chain on member expression\n", "info": " |Left-Hand-Side Expressions\nOptionalExpression:\nMemberExpression OptionalChain\n", "features": ["optional-chaining"]}, {"path": "./test262-main/test/language/expressions/optional-chaining/new-target-optional-call.js", "esid": " prod-OptionalExpression", "description": " >optional call invoked on new.target should be equivalent to call\n", "info": " |OptionalExpression\nMemberExpression OptionalChain\nNewTarget OptionalChain\n", "features": ["optional-chaining"]}, {"path": "./test262-main/test/language/expressions/optional-chaining/optional-call-preserves-this.js", "esid": " sec-optional-chaining-chain-evaluation", "description": " >optional call must preserve this context, as with a non-optional call\n", "info": " |OptionalChain : ?. Arguments\n1. Let thisChain be this OptionalChain.\n2. Let tailCall be IsInTailPosition(thisChain).\n3. Return ? EvaluateCall(baseValue, baseReference, Arguments, tailCall).\n", "features": ["optional-chaining"]}, {"path": "./test262-main/test/language/expressions/optional-chaining/optional-chain-expression-optional-expression.js", "esid": " prod-OptionalExpression", "description": " >optional chain bracket notation containing optional expresion\n", "info": " |OptionalChain:\n?. [OptionalExpression]\n", "features": ["optional-chaining"]}, {"path": "./test262-main/test/language/expressions/optional-chaining/optional-chain-prod-arguments.js", "esid": " prod-OptionalExpression", "description": " >Productions for ?. Arguments\n", "info": " |OptionalChain[Yield, Await]:\n?. Arguments\n", "features": ["optional-chaining"]}, {"path": "./test262-main/test/language/expressions/optional-chaining/optional-chain-prod-expression.js", "esid": " prod-OptionalExpression", "description": " >Productions for ?. [Expression]\n", "info": " |OptionalChain:\n?.[ Expression ]\n", "features": ["optional-chaining"]}, {"path": "./test262-main/test/language/expressions/optional-chaining/optional-chain-prod-identifiername.js", "esid": " prod-OptionalExpression", "description": " >Productions for ?. IdentifierName\n", "info": " |OptionalChain[Yield, Await]:\n?. IdentifierName\n", "features": ["optional-chaining"]}, {"path": "./test262-main/test/language/expressions/optional-chaining/optional-chain.js", "esid": " prod-OptionalExpression", "description": " >various optional chain expansions\n", "info": " |OptionalChain[Yield, Await]:\n?.[Expression]\n?.IdentifierName\n?.Arguments\n?.TemplateLiteral\nOptionalChain [Expression]\nOptionalChain .IdentifierName\nOptionalChain Arguments[?Yield, ?Await]\nOptionalChain TemplateLiteral\n", "features": ["optional-chaining"]}, {"path": "./test262-main/test/language/expressions/optional-chaining/optional-expression.js", "esid": " prod-OptionalExpression", "description": " >optional chain on recursive optional expression\n", "info": " |Left-Hand-Side Expressions\nOptionalExpression:\nOptionalExpression OptionalChain\n", "features": ["optional-chaining"]}, {"path": "./test262-main/test/language/expressions/optional-chaining/runtime-semantics-evaluation.js", "esid": " prod-OptionalExpression", "description": " >accessing optional value on undefined or null returns undefined.\n", "info": " |If baseValue is undefined or null, then\nReturn undefined.\n", "features": ["optional-chaining"]}, {"path": "./test262-main/test/language/expressions/optional-chaining/short-circuiting.js", "esid": " prod-OptionalExpression", "description": " >demonstrate syntax-based short-circuiting.\n", "info": " |If the expression on the LHS of ?. evaluates to null/undefined, the RHS is\nnot evaluated\n", "features": ["optional-chaining"]}, {"path": "./test262-main/test/language/expressions/optional-chaining/super-property-optional-call.js", "esid": " prod-OptionalExpression", "description": " >optional call invoked on super method should be equivalent to call\n", "info": " |OptionalExpression\nMemberExpression OptionalChain\nSuperProperty OptionalChain\n", "features": ["optional-chaining"]}, {"path": "./test262-main/test/language/expressions/super/call-proto-not-ctor.js", "esid": " sec-super-keyword", "description": " SuperCall should evaluate Arguments prior to checking IsConstructor", "info": " |SuperCall : `super` Arguments\n\n[...]\n3. Let _func_ be ! GetSuperConstructor().\n4. Let _argList_ be ? ArgumentListEvaluation of |Arguments|.\n5. If IsConstructor(_func_) is *false*, throw a *TypeError* exception.\n[...]\n", "features": ["class"]}, {"path": "./test262-main/test/language/identifiers/part-unicode-13.0.0-escaped.js", "author": " Mathias Bynens", "esid": " sec-names-and-keywords", "description": " |Test that Unicode v13.0.0 ID_Continue characters are accepted as\nidentifier part characters in escaped form, i.e.\n- \\uXXXX or \\u{XXXX} for BMP symbols\n- \\u{XXXXXX} for astral symbols\n", "info": " |Generated by https://github.com/mathiasbynens/caniunicode\n"}, {"path": "./test262-main/test/language/identifiers/part-unicode-13.0.0.js", "author": " Mathias Bynens", "esid": " sec-names-and-keywords", "description": " |Test that Unicode v13.0.0 ID_Continue characters are accepted as\nidentifier part characters.\n", "info": " |Generated by https://github.com/mathiasbynens/caniunicode\n"}, {"path": "./test262-main/test/language/identifiers/start-unicode-13.0.0-escaped.js", "author": " Mathias Bynens", "esid": " sec-names-and-keywords", "description": " |Test that Unicode v13.0.0 ID_Start characters are accepted as\nidentifier start characters in escaped form, i.e.\n- \\uXXXX or \\u{XXXX} for BMP symbols\n- \\u{XXXXXX} for astral symbols\n", "info": " |Generated by https://github.com/mathiasbynens/caniunicode\n"}, {"path": "./test262-main/test/language/identifiers/start-unicode-13.0.0.js", "author": " Mathias Bynens", "esid": " sec-names-and-keywords", "description": " |Test that Unicode v13.0.0 ID_Start characters are accepted as\nidentifier start characters.\n", "info": " |Generated by https://github.com/mathiasbynens/caniunicode\n"}, {"path": "./test262-main/test/language/literals/bigint/numeric-separators/numeric-separator-literal-bil-bd-nsl-bd.js", "esid": " prod-NumericLiteralSeparator", "description": " >`0b` | `0B` BinaryDigit NumericLiteralSeparator BinaryDigit\n", "info": " |NumericLiteral ::\nDecimalIntegerLiteral BigIntLiteralSuffix\nNumericLiteralBase BigIntLiteralSuffix\n\nNumericLiteralBase ::\nBinaryIntegerLiteral\nOctalIntegerLiteral\nHexIntegerLiteral\n\nBigIntLiteralSuffix :: n\n\nNumericLiteralSeparator ::\n_\n\nBinaryIntegerLiteral ::\n0b BinaryDigits\n0B BinaryDigits\n\nBinaryDigits ::\nBinaryDigit\nBinaryDigits BinaryDigit\nBinaryDigits NumericLiteralSeparator BinaryDigit\n\nBinaryDigit :: one of\n0 1\n\n", "features": ["BigInt", "numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/bigint/numeric-separators/numeric-separator-literal-bil-bd-nsl-bds.js", "esid": " prod-NumericLiteralSeparator", "description": " >`0b` | `0B` BinaryDigit NumericLiteralSeparator BinaryDigit\n", "info": " |NumericLiteral ::\nDecimalIntegerLiteral BigIntLiteralSuffix\nNumericLiteralBase BigIntLiteralSuffix\n\nNumericLiteralBase ::\nBinaryIntegerLiteral\nOctalIntegerLiteral\nHexIntegerLiteral\n\nBigIntLiteralSuffix :: n\n\nNumericLiteralSeparator ::\n_\n\nBinaryIntegerLiteral ::\n0b BinaryDigits\n0B BinaryDigits\n\nBinaryDigits ::\nBinaryDigit\nBinaryDigits BinaryDigit\nBinaryDigits NumericLiteralSeparator BinaryDigit\n\nBinaryDigit :: one of\n0 1\n\n", "features": ["BigInt", "numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/bigint/numeric-separators/numeric-separator-literal-bil-bds-nsl-bd.js", "esid": " prod-NumericLiteralSeparator", "description": " >`0b` | `0B` BinaryDigits NumericLiteralSeparator BinaryDigit\n", "info": " |NumericLiteral ::\nDecimalIntegerLiteral BigIntLiteralSuffix\nNumericLiteralBase BigIntLiteralSuffix\n\nNumericLiteralBase ::\nBinaryIntegerLiteral\nOctalIntegerLiteral\nHexIntegerLiteral\n\nBigIntLiteralSuffix :: n\n\nNumericLiteralSeparator ::\n_\n\nBinaryIntegerLiteral ::\n0b BinaryDigits\n0B BinaryDigits\n\nBinaryDigits ::\nBinaryDigit\nBinaryDigits BinaryDigit\nBinaryDigits NumericLiteralSeparator BinaryDigit\n\nBinaryDigit :: one of\n0 1\n\n", "features": ["BigInt", "numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/bigint/numeric-separators/numeric-separator-literal-bil-bds-nsl-bds.js", "esid": " prod-NumericLiteralSeparator", "description": " >`0b` | `0B` BinaryDigits NumericLiteralSeparator BinaryDigit\n", "info": " |NumericLiteral ::\nDecimalIntegerLiteral BigIntLiteralSuffix\nNumericLiteralBase BigIntLiteralSuffix\n\nNumericLiteralBase ::\nBinaryIntegerLiteral\nOctalIntegerLiteral\nHexIntegerLiteral\n\nBigIntLiteralSuffix :: n\n\nNumericLiteralSeparator ::\n_\n\nBinaryIntegerLiteral ::\n0b BinaryDigits\n0B BinaryDigits\n\nBinaryDigits ::\nBinaryDigit\nBinaryDigits BinaryDigit\nBinaryDigits NumericLiteralSeparator BinaryDigit\n\nBinaryDigit :: one of\n0 1\n\n", "features": ["BigInt", "numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/bigint/numeric-separators/numeric-separator-literal-dd-nsl-dd-one-of.js", "esid": " prod-NumericLiteralSeparator", "description": " NonZeroDigit NumericLiteralSeparator DecimalDigit", "info": " |NumericLiteral ::\nDecimalIntegerLiteral BigIntLiteralSuffix\nNumericLiteralBase BigIntLiteralSuffix\n\nNumericLiteralBase ::\nBinaryIntegerLiteral\nOctalIntegerLiteral\nHexIntegerLiteral\n\nBigIntLiteralSuffix :: n\n\nNumericLiteralSeparator ::\n_\n\nDecimalIntegerLiteral ::\n...\nNonZeroDigit NumericLiteralSeparator_opt DecimalDigits\n\n\nDecimalDigits ::\nDecimalDigit\n...\n\nDecimalDigit :: one of\n0 1 2 3 4 5 6 7 8 9\n\n", "features": ["BigInt", "numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/bigint/numeric-separators/numeric-separator-literal-dds-nsl-dd.js", "esid": " prod-NumericLiteralSeparator", "description": " DecimalDigits NumericLiteralSeparator DecimalDigit", "info": " |NumericLiteral ::\nDecimalIntegerLiteral BigIntLiteralSuffix\nNumericLiteralBase BigIntLiteralSuffix\n\nNumericLiteralBase ::\nBinaryIntegerLiteral\nOctalIntegerLiteral\nHexIntegerLiteral\n\nBigIntLiteralSuffix :: n\n\nNumericLiteralSeparator ::\n_\n\nDecimalDigits ::\n...\nDecimalDigits NumericLiteralSeparator DecimalDigit\n\n", "features": ["BigInt", "numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/bigint/numeric-separators/numeric-separator-literal-hil-hd-nsl-hd.js", "esid": " prod-NumericLiteralSeparator", "description": " >`0x` | `0X` HexDigit NumericLiteralSeparator HexDigit\n", "info": " |NumericLiteral ::\nDecimalIntegerLiteral BigIntLiteralSuffix\nNumericLiteralBase BigIntLiteralSuffix\n\nNumericLiteralBase ::\nBinaryIntegerLiteral\nOctalIntegerLiteral\nHexIntegerLiteral\n\nBigIntLiteralSuffix :: n\n\nNumericLiteralSeparator ::\n_\n\nHexIntegerLiteral ::\n0x HexDigits\n0X HexDigits\n\nHexDigits ::\nHexDigit\nHexDigits HexDigit\nHexDigits NumericLiteralSeparator HexDigit\n\nHexDigit::one of\n0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F\n\n", "features": ["BigInt", "numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/bigint/numeric-separators/numeric-separator-literal-hil-hd-nsl-hds.js", "esid": " prod-NumericLiteralSeparator", "description": " >`0x` | `0X` HexDigit NumericLiteralSeparator HexDigit\n", "info": " |NumericLiteral ::\nDecimalIntegerLiteral BigIntLiteralSuffix\nNumericLiteralBase BigIntLiteralSuffix\n\nNumericLiteralBase ::\nBinaryIntegerLiteral\nOctalIntegerLiteral\nHexIntegerLiteral\n\nBigIntLiteralSuffix :: n\n\nNumericLiteralSeparator ::\n_\n\nHexIntegerLiteral ::\n0x HexDigits\n0X HexDigits\n\nHexDigits ::\nHexDigit\nHexDigits HexDigit\nHexDigits NumericLiteralSeparator HexDigit\n\nHexDigit::one of\n0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F\n\n", "features": ["BigInt", "numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/bigint/numeric-separators/numeric-separator-literal-hil-hds-nsl-hd.js", "esid": " prod-NumericLiteralSeparator", "description": " >`0x` | `0X` HexDigits NumericLiteralSeparator HexDigit\n", "info": " |NumericLiteral ::\nDecimalIntegerLiteral BigIntLiteralSuffix\nNumericLiteralBase BigIntLiteralSuffix\n\nNumericLiteralBase ::\nBinaryIntegerLiteral\nOctalIntegerLiteral\nHexIntegerLiteral\n\nBigIntLiteralSuffix :: n\n\nNumericLiteralSeparator ::\n_\n\nHexIntegerLiteral ::\n0x HexDigits\n0X HexDigits\n\nHexDigits ::\nHexDigit\nHexDigits HexDigit\nHexDigits NumericLiteralSeparator HexDigit\n\nHexDigit::one of\n0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F\n\n", "features": ["BigInt", "numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/bigint/numeric-separators/numeric-separator-literal-hil-hds-nsl-hds.js", "esid": " prod-NumericLiteralSeparator", "description": " >`0x` | `0X` HexDigits NumericLiteralSeparator HexDigit\n", "info": " |NumericLiteral ::\nDecimalIntegerLiteral BigIntLiteralSuffix\nNumericLiteralBase BigIntLiteralSuffix\n\nNumericLiteralBase ::\nBinaryIntegerLiteral\nOctalIntegerLiteral\nHexIntegerLiteral\n\nBigIntLiteralSuffix :: n\n\nNumericLiteralSeparator ::\n_\n\nHexIntegerLiteral ::\n0x HexDigits\n0X HexDigits\n\nHexDigits ::\nHexDigit\nHexDigits HexDigit\nHexDigits NumericLiteralSeparator HexDigit\n\nHexDigit::one of\n0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F\n\n", "features": ["BigInt", "numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/bigint/numeric-separators/numeric-separator-literal-hil-od-nsl-od-one-of.js", "esid": " prod-NumericLiteralSeparator", "description": " >`0x` | `0X` HexDigit NumericLiteralSeparator HexDigit\n", "info": " |NumericLiteral ::\nDecimalIntegerLiteral BigIntLiteralSuffix\nNumericLiteralBase BigIntLiteralSuffix\n\nNumericLiteralBase ::\nBinaryIntegerLiteral\nOctalIntegerLiteral\nHexIntegerLiteral\n\nBigIntLiteralSuffix :: n\n\nNumericLiteralSeparator ::\n_\n\nHexIntegerLiteral ::\n0x HexDigits\n0X HexDigits\n\nHexDigits ::\nHexDigit\nHexDigits HexDigit\nHexDigits NumericLiteralSeparator HexDigit\n\nHexDigit::one of\n0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F\n\n", "features": ["BigInt", "numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/bigint/numeric-separators/numeric-separator-literal-nzd-nsl-dd-one-of.js", "esid": " prod-NumericLiteralSeparator", "description": " NonZeroDigit NumericLiteralSeparator DecimalDigit", "info": " |NumericLiteral ::\nDecimalIntegerLiteral BigIntLiteralSuffix\nNumericLiteralBase BigIntLiteralSuffix\n\nNumericLiteralBase ::\nBinaryIntegerLiteral\nOctalIntegerLiteral\nHexIntegerLiteral\n\nBigIntLiteralSuffix :: n\n\nNumericLiteralSeparator ::\n_\n\nDecimalIntegerLiteral ::\n...\nNonZeroDigit NumericLiteralSeparator_opt DecimalDigits\n\nNonZeroDigit :: one of\n1 2 3 4 5 6 7 8 9\n\nDecimalDigits ::\nDecimalDigit\n...\n\nDecimalDigit :: one of\n0 1 2 3 4 5 6 7 8 9\n\n", "features": ["BigInt", "numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/bigint/numeric-separators/numeric-separator-literal-nzd-nsl-dd.js", "esid": " prod-NumericLiteralSeparator", "description": " NonZeroDigit NumericLiteralSeparator DecimalDigit", "info": " |NumericLiteral ::\nDecimalIntegerLiteral BigIntLiteralSuffix\nNumericLiteralBase BigIntLiteralSuffix\n\nNumericLiteralBase ::\nBinaryIntegerLiteral\nOctalIntegerLiteral\nHexIntegerLiteral\n\nBigIntLiteralSuffix :: n\n\nNumericLiteralSeparator ::\n_\n\nDecimalIntegerLiteral ::\n...\nNonZeroDigit NumericLiteralSeparator_opt DecimalDigits\n\nNonZeroDigit :: one of\n1 2 3 4 5 6 7 8 9\n\nDecimalDigits ::\n...\nDecimalDigits DecimalDigit\n...\n\n", "features": ["BigInt", "numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/bigint/numeric-separators/numeric-separator-literal-nzd-nsl-dds.js", "esid": " prod-NumericLiteralSeparator", "description": " NonZeroDigit NumericLiteralSeparator DecimalDigits", "info": " |NumericLiteral ::\nDecimalIntegerLiteral BigIntLiteralSuffix\nNumericLiteralBase BigIntLiteralSuffix\n\nNumericLiteralBase ::\nBinaryIntegerLiteral\nOctalIntegerLiteral\nHexIntegerLiteral\n\nBigIntLiteralSuffix :: n\n\nNumericLiteralSeparator ::\n_\n\nDecimalIntegerLiteral ::\n...\nNonZeroDigit NumericLiteralSeparator_opt DecimalDigits\n\nNonZeroDigit :: one of\n1 2 3 4 5 6 7 8 9\n\nDecimalDigits ::\n...\nDecimalDigits DecimalDigit\n...\n\n", "features": ["BigInt", "numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/bigint/numeric-separators/numeric-separator-literal-oil-od-nsl-od-one-of.js", "esid": " prod-NumericLiteralSeparator", "description": " >`0o` | `0O` OctalDigit NumericLiteralSeparator OctalDigit\n", "info": " |NumericLiteral ::\nDecimalIntegerLiteral BigIntLiteralSuffix\nNumericLiteralBase BigIntLiteralSuffix\n\nNumericLiteralBase ::\nBinaryIntegerLiteral\nOctalIntegerLiteral\nHexIntegerLiteral\n\nBigIntLiteralSuffix :: n\n\nNumericLiteralSeparator ::\n_\n\nOctalIntegerLiteral ::\n0o OctalDigits\n0O OctalDigits\n\nOctalDigits ::\nOctalDigit\nOctalDigits OctalDigit\nOctalDigits NumericLiteralSeparator OctalDigit\n\nOctalDigit :: one of\n0 1 2 3 4 5 6 7\n\n", "features": ["BigInt", "numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/bigint/numeric-separators/numeric-separator-literal-oil-od-nsl-od.js", "esid": " prod-NumericLiteralSeparator", "description": " >`0o` | `0O` OctalDigit NumericLiteralSeparator OctalDigit\n", "info": " |NumericLiteral ::\nDecimalIntegerLiteral BigIntLiteralSuffix\nNumericLiteralBase BigIntLiteralSuffix\n\nNumericLiteralBase ::\nBinaryIntegerLiteral\nOctalIntegerLiteral\nHexIntegerLiteral\n\nBigIntLiteralSuffix :: n\n\nNumericLiteralSeparator ::\n_\n\nOctalIntegerLiteral ::\n0o OctalDigits\n0O OctalDigits\n\nOctalDigits ::\nOctalDigit\nOctalDigits OctalDigit\nOctalDigits NumericLiteralSeparator OctalDigit\n\nOctalDigit :: one of\n0 1 2 3 4 5 6 7\n\n", "features": ["BigInt", "numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/bigint/numeric-separators/numeric-separator-literal-oil-od-nsl-ods.js", "esid": " prod-NumericLiteralSeparator", "description": " >`0o` | `0O` OctalDigit NumericLiteralSeparator OctalDigit\n", "info": " |NumericLiteral ::\nDecimalIntegerLiteral BigIntLiteralSuffix\nNumericLiteralBase BigIntLiteralSuffix\n\nNumericLiteralBase ::\nBinaryIntegerLiteral\nOctalIntegerLiteral\nHexIntegerLiteral\n\nBigIntLiteralSuffix :: n\n\nNumericLiteralSeparator ::\n_\n\nOctalIntegerLiteral ::\n0o OctalDigits\n0O OctalDigits\n\nOctalDigits ::\nOctalDigit\nOctalDigits OctalDigit\nOctalDigits NumericLiteralSeparator OctalDigit\n\nOctalDigit :: one of\n0 1 2 3 4 5 6 7\n\n", "features": ["BigInt", "numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/bigint/numeric-separators/numeric-separator-literal-oil-ods-nsl-od.js", "esid": " prod-NumericLiteralSeparator", "description": " >`0o` | `0O` OctalDigits NumericLiteralSeparator OctalDigit\n", "info": " |NumericLiteral ::\nDecimalIntegerLiteral BigIntLiteralSuffix\nNumericLiteralBase BigIntLiteralSuffix\n\nNumericLiteralBase ::\nBinaryIntegerLiteral\nOctalIntegerLiteral\nHexIntegerLiteral\n\nBigIntLiteralSuffix :: n\n\nNumericLiteralSeparator ::\n_\n\nOctalIntegerLiteral ::\n0o OctalDigits\n0O OctalDigits\n\nOctalDigits ::\nOctalDigit\nOctalDigits OctalDigit\nOctalDigits NumericLiteralSeparator OctalDigit\n\nOctalDigit :: one of\n0 1 2 3 4 5 6 7\n\n", "features": ["BigInt", "numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/bigint/numeric-separators/numeric-separator-literal-oil-ods-nsl-ods.js", "esid": " prod-NumericLiteralSeparator", "description": " >`0o` | `0O` OctalDigits NumericLiteralSeparator OctalDigit\n", "info": " |NumericLiteral ::\nDecimalIntegerLiteral BigIntLiteralSuffix\nNumericLiteralBase BigIntLiteralSuffix\n\nNumericLiteralBase ::\nBinaryIntegerLiteral\nOctalIntegerLiteral\nHexIntegerLiteral\n\nBigIntLiteralSuffix :: n\n\nNumericLiteralSeparator ::\n_\n\nOctalIntegerLiteral ::\n0o OctalDigits\n0O OctalDigits\n\nOctalDigits ::\nOctalDigit\nOctalDigits OctalDigit\nOctalDigits NumericLiteralSeparator OctalDigit\n\nOctalDigit :: one of\n0 1 2 3 4 5 6 7\n\n", "features": ["BigInt", "numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/bigint/numeric-separators/numeric-separator-literal-sign-minus-dds-nsl-dd.js", "esid": " prod-NumericLiteralSeparator", "description": " DecimalDigits NumericLiteralSeparator DecimalDigit", "info": " |NumericLiteral ::\nDecimalIntegerLiteral BigIntLiteralSuffix\nNumericLiteralBase BigIntLiteralSuffix\n\nNumericLiteralBase ::\nBinaryIntegerLiteral\nOctalIntegerLiteral\nHexIntegerLiteral\n\nBigIntLiteralSuffix :: n\n\nNumericLiteralSeparator ::\n_\n\nSignedInteger ::\n...\n- DecimalDigits\n\n", "features": ["BigInt", "numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/numeric/numeric-separators/numeric-separator-literal-bil-bd-nsl-bd.js", "esid": " prod-NumericLiteralSeparator", "description": " >`0b` | `0B` BinaryDigit NumericLiteralSeparator BinaryDigit\n", "info": " |NumericLiteralSeparator ::\n_\n\nBinaryIntegerLiteral ::\n0b BinaryDigits\n0B BinaryDigits\n\nBinaryDigits ::\nBinaryDigit\nBinaryDigits BinaryDigit\nBinaryDigits NumericLiteralSeparator BinaryDigit\n\nBinaryDigit :: one of\n0 1\n\n", "features": ["numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/numeric/numeric-separators/numeric-separator-literal-bil-bd-nsl-bds.js", "esid": " prod-NumericLiteralSeparator", "description": " >`0b` | `0B` BinaryDigit NumericLiteralSeparator BinaryDigit\n", "info": " |NumericLiteralSeparator ::\n_\n\nBinaryIntegerLiteral ::\n0b BinaryDigits\n0B BinaryDigits\n\nBinaryDigits ::\nBinaryDigit\nBinaryDigits BinaryDigit\nBinaryDigits NumericLiteralSeparator BinaryDigit\n\nBinaryDigit :: one of\n0 1\n\n", "features": ["numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/numeric/numeric-separators/numeric-separator-literal-bil-bds-nsl-bd.js", "esid": " prod-NumericLiteralSeparator", "description": " >`0b` | `0B` BinaryDigits NumericLiteralSeparator BinaryDigit\n", "info": " |NumericLiteralSeparator ::\n_\n\nBinaryIntegerLiteral ::\n0b BinaryDigits\n0B BinaryDigits\n\nBinaryDigits ::\nBinaryDigit\nBinaryDigits BinaryDigit\nBinaryDigits NumericLiteralSeparator BinaryDigit\n\nBinaryDigit :: one of\n0 1\n\n", "features": ["numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/numeric/numeric-separators/numeric-separator-literal-bil-bds-nsl-bds.js", "esid": " prod-NumericLiteralSeparator", "description": " >`0b` | `0B` BinaryDigits NumericLiteralSeparator BinaryDigit\n", "info": " |NumericLiteralSeparator ::\n_\n\nBinaryIntegerLiteral ::\n0b BinaryDigits\n0B BinaryDigits\n\nBinaryDigits ::\nBinaryDigit\nBinaryDigits BinaryDigit\nBinaryDigits NumericLiteralSeparator BinaryDigit\n\nBinaryDigit :: one of\n0 1\n\n", "features": ["numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/numeric/numeric-separators/numeric-separator-literal-dd-dot-dd-ep-sign-minus-dd-nsl-dd.js", "esid": " prod-NumericLiteralSeparator", "description": " >DecimalDigits `.` DecimalDigits ExponentPart_opt `-` DecimalDigits\n", "info": " |NumericLiteralSeparator ::\n_\n\nDecimalLiteral ::\nDecimalIntegerLiteral . DecimalDigits_opt ExponentPart_opt\n\nDecimalDigits ::\n...\nDecimalDigits NumericLiteralSeparator DecimalDigit\n\nSignedInteger ::\n...\n- DecimalDigits\n...\n\n", "features": ["numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/numeric/numeric-separators/numeric-separator-literal-dd-dot-dd-ep-sign-minus-dds-nsl-dd.js", "esid": " prod-NumericLiteralSeparator", "description": " >DecimalDigits `.` DecimalDigits ExponentPart_opt `-` DecimalDigits\n", "info": " |NumericLiteralSeparator ::\n_\n\nDecimalLiteral ::\nDecimalIntegerLiteral . DecimalDigits_opt ExponentPart_opt\n\nDecimalDigits ::\n...\nDecimalDigits NumericLiteralSeparator DecimalDigit\n\nSignedInteger ::\n...\n- DecimalDigits\n...\n\n", "features": ["numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/numeric/numeric-separators/numeric-separator-literal-dd-dot-dd-ep-sign-plus-dd-nsl-dd.js", "esid": " prod-NumericLiteralSeparator", "description": " >DecimalDigits `.` DecimalDigits ExponentPart_opt `+` DecimalDigits\n", "info": " |NumericLiteralSeparator ::\n_\n\nDecimalLiteral ::\nDecimalIntegerLiteral . DecimalDigits_opt ExponentPart_opt\n\nDecimalDigits ::\n...\nDecimalDigits NumericLiteralSeparator DecimalDigit\n\nSignedInteger ::\n...\n+ DecimalDigits\n...\n\n", "features": ["numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/numeric/numeric-separators/numeric-separator-literal-dd-dot-dd-ep-sign-plus-dds-nsl-dd.js", "esid": " prod-NumericLiteralSeparator", "description": " >DecimalDigits `.` DecimalDigits ExponentPart_opt `+` DecimalDigits\n", "info": " |NumericLiteralSeparator ::\n_\n\nDecimalLiteral ::\nDecimalIntegerLiteral . DecimalDigits_opt ExponentPart_opt\n\nDecimalDigits ::\n...\nDecimalDigits NumericLiteralSeparator DecimalDigit\n\nSignedInteger ::\n...\n+ DecimalDigits\n...\n\n", "features": ["numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/numeric/numeric-separators/numeric-separator-literal-dd-nsl-dd-one-of.js", "esid": " prod-NumericLiteralSeparator", "description": " NonZeroDigit NumericLiteralSeparator DecimalDigit", "info": " |NumericLiteralSeparator ::\n_\n\nDecimalIntegerLiteral ::\n...\nNonZeroDigit NumericLiteralSeparator_opt DecimalDigits\n\n\nDecimalDigits ::\nDecimalDigit\n...\n\nDecimalDigit :: one of\n0 1 2 3 4 5 6 7 8 9\n\n", "features": ["numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/numeric/numeric-separators/numeric-separator-literal-dds-dot-dd-nsl-dd-ep-dd.js", "esid": " prod-NumericLiteralSeparator", "description": " >DecimalDigits `.` DecimalDigits NumericLiteralSeparator DecimalDigits\nExponentPart SignedInteger\n", "info": " |NumericLiteralSeparator ::\n_\n\nDecimalLiteral ::\n. DecimalDigits ExponentPart_opt\n\nDecimalDigits ::\n...\nDecimalDigits NumericLiteralSeparator DecimalDigit\n\nExponentIndicator :: one of\ne E\n\n", "features": ["numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/numeric/numeric-separators/numeric-separator-literal-dds-nsl-dd.js", "esid": " prod-NumericLiteralSeparator", "description": " DecimalDigits NumericLiteralSeparator DecimalDigit", "info": " |NumericLiteralSeparator ::\n_\n\nDecimalDigits ::\n...\nDecimalDigits NumericLiteralSeparator DecimalDigit\n\n", "features": ["numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/numeric/numeric-separators/numeric-separator-literal-dot-dd-nsl-dd-ep.js", "esid": " prod-NumericLiteralSeparator", "description": " >`.` DecimalDigit NumericLiteralSeparator DecimalDigit ExponentPart\n", "info": " |NumericLiteralSeparator ::\n_\n\nDecimalLiteral ::\n. DecimalDigits ExponentPart_opt\n\nDecimalDigits ::\nDecimalDigit\n...\nDecimalDigits NumericLiteralSeparator DecimalDigit\n\nExponentIndicator :: one of\ne E\n\n", "features": ["numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/numeric/numeric-separators/numeric-separator-literal-dot-dd-nsl-dds-ep.js", "esid": " prod-NumericLiteralSeparator", "description": " >`.` DecimalDigit NumericLiteralSeparator DecimalDigits ExponentPart\n", "info": " |NumericLiteralSeparator ::\n_\n\nDecimalLiteral ::\n. DecimalDigits ExponentPart_opt\n\nDecimalDigits ::\nDecimalDigit\n...\nDecimalDigits NumericLiteralSeparator DecimalDigit\n\nExponentIndicator :: one of\ne E\n\n", "features": ["numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/numeric/numeric-separators/numeric-separator-literal-dot-dds-nsl-dd-ep.js", "esid": " prod-NumericLiteralSeparator", "description": " >`.` DecimalDigits NumericLiteralSeparator DecimalDigit ExponentPart\n", "info": " |NumericLiteralSeparator ::\n_\n\nDecimalLiteral ::\n. DecimalDigits ExponentPart_opt\n\nDecimalDigits ::\nDecimalDigit\n...\nDecimalDigits NumericLiteralSeparator DecimalDigit\n\nExponentIndicator :: one of\ne E\n\n", "features": ["numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/numeric/numeric-separators/numeric-separator-literal-dot-dds-nsl-dds-ep.js", "esid": " prod-NumericLiteralSeparator", "description": " >`.` DecimalDigits NumericLiteralSeparator DecimalDigits ExponentPart\n", "info": " |NumericLiteralSeparator ::\n_\n\nDecimalLiteral ::\n. DecimalDigits ExponentPart_opt\n\nDecimalDigits ::\nDecimalDigit\n...\nDecimalDigits NumericLiteralSeparator DecimalDigit\n\nExponentIndicator :: one of\ne E\n\n", "features": ["numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/numeric/numeric-separators/numeric-separator-literal-hil-hd-nsl-hd.js", "esid": " prod-NumericLiteralSeparator", "description": " >`0x` | `0X` HexDigit NumericLiteralSeparator HexDigit\n", "info": " |NumericLiteralSeparator ::\n_\n\nHexIntegerLiteral ::\n0x HexDigits\n0X HexDigits\n\nHexDigits ::\nHexDigit\nHexDigits HexDigit\nHexDigits NumericLiteralSeparator HexDigit\n\nHexDigit::one of\n0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F\n\n", "features": ["numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/numeric/numeric-separators/numeric-separator-literal-hil-hd-nsl-hds.js", "esid": " prod-NumericLiteralSeparator", "description": " >`0x` | `0X` HexDigit NumericLiteralSeparator HexDigit\n", "info": " |NumericLiteralSeparator ::\n_\n\nHexIntegerLiteral ::\n0x HexDigits\n0X HexDigits\n\nHexDigits ::\nHexDigit\nHexDigits HexDigit\nHexDigits NumericLiteralSeparator HexDigit\n\nHexDigit::one of\n0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F\n\n", "features": ["numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/numeric/numeric-separators/numeric-separator-literal-hil-hds-nsl-hd.js", "esid": " prod-NumericLiteralSeparator", "description": " >`0x` | `0X` HexDigits NumericLiteralSeparator HexDigit\n", "info": " |NumericLiteralSeparator ::\n_\n\nHexIntegerLiteral ::\n0x HexDigits\n0X HexDigits\n\nHexDigits ::\nHexDigit\nHexDigits HexDigit\nHexDigits NumericLiteralSeparator HexDigit\n\nHexDigit::one of\n0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F\n\n", "features": ["numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/numeric/numeric-separators/numeric-separator-literal-hil-hds-nsl-hds.js", "esid": " prod-NumericLiteralSeparator", "description": " >`0x` | `0X` HexDigits NumericLiteralSeparator HexDigit\n", "info": " |NumericLiteralSeparator ::\n_\n\nHexIntegerLiteral ::\n0x HexDigits\n0X HexDigits\n\nHexDigits ::\nHexDigit\nHexDigits HexDigit\nHexDigits NumericLiteralSeparator HexDigit\n\nHexDigit::one of\n0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F\n\n", "features": ["numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/numeric/numeric-separators/numeric-separator-literal-hil-od-nsl-od-one-of.js", "esid": " prod-NumericLiteralSeparator", "description": " >`0x` | `0X` HexDigit NumericLiteralSeparator HexDigit\n", "info": " |NumericLiteralSeparator ::\n_\n\nHexIntegerLiteral ::\n0x HexDigits\n0X HexDigits\n\nHexDigits ::\nHexDigit\nHexDigits HexDigit\nHexDigits NumericLiteralSeparator HexDigit\n\nHexDigit::one of\n0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F\n\n", "features": ["numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/numeric/numeric-separators/numeric-separator-literal-nzd-nsl-dd-one-of.js", "esid": " prod-NumericLiteralSeparator", "description": " NonZeroDigit NumericLiteralSeparator DecimalDigit", "info": " |NumericLiteralSeparator ::\n_\n\nDecimalIntegerLiteral ::\n...\nNonZeroDigit NumericLiteralSeparator_opt DecimalDigits\n\nNonZeroDigit :: one of\n1 2 3 4 5 6 7 8 9\n\nDecimalDigits ::\nDecimalDigit\n...\n\nDecimalDigit :: one of\n0 1 2 3 4 5 6 7 8 9\n\n", "features": ["numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/numeric/numeric-separators/numeric-separator-literal-nzd-nsl-dd.js", "esid": " prod-NumericLiteralSeparator", "description": " NonZeroDigit NumericLiteralSeparator DecimalDigit", "info": " |NumericLiteralSeparator ::\n_\n\nDecimalIntegerLiteral ::\n...\nNonZeroDigit NumericLiteralSeparator_opt DecimalDigits\n\nNonZeroDigit :: one of\n1 2 3 4 5 6 7 8 9\n\nDecimalDigits ::\n...\nDecimalDigits DecimalDigit\n...\n\n", "features": ["numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/numeric/numeric-separators/numeric-separator-literal-nzd-nsl-dds.js", "esid": " prod-NumericLiteralSeparator", "description": " NonZeroDigit NumericLiteralSeparator DecimalDigits", "info": " |NumericLiteralSeparator ::\n_\n\nDecimalIntegerLiteral ::\n...\nNonZeroDigit NumericLiteralSeparator_opt DecimalDigits\n\nNonZeroDigit :: one of\n1 2 3 4 5 6 7 8 9\n\nDecimalDigits ::\n...\nDecimalDigits DecimalDigit\n...\n\n", "features": ["numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/numeric/numeric-separators/numeric-separator-literal-oil-od-nsl-od-one-of.js", "esid": " prod-NumericLiteralSeparator", "description": " >`0o` | `0O` OctalDigit NumericLiteralSeparator OctalDigit\n", "info": " |NumericLiteralSeparator ::\n_\n\nOctalIntegerLiteral ::\n0o OctalDigits\n0O OctalDigits\n\nOctalDigits ::\nOctalDigit\nOctalDigits OctalDigit\nOctalDigits NumericLiteralSeparator OctalDigit\n\nOctalDigit :: one of\n0 1 2 3 4 5 6 7\n\n", "features": ["numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/numeric/numeric-separators/numeric-separator-literal-oil-od-nsl-od.js", "esid": " prod-NumericLiteralSeparator", "description": " >`0o` | `0O` OctalDigit NumericLiteralSeparator OctalDigit\n", "info": " |NumericLiteralSeparator ::\n_\n\nOctalIntegerLiteral ::\n0o OctalDigits\n0O OctalDigits\n\nOctalDigits ::\nOctalDigit\nOctalDigits OctalDigit\nOctalDigits NumericLiteralSeparator OctalDigit\n\nOctalDigit :: one of\n0 1 2 3 4 5 6 7\n\n", "features": ["numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/numeric/numeric-separators/numeric-separator-literal-oil-od-nsl-ods.js", "esid": " prod-NumericLiteralSeparator", "description": " >`0o` | `0O` OctalDigit NumericLiteralSeparator OctalDigit\n", "info": " |NumericLiteralSeparator ::\n_\n\nOctalIntegerLiteral ::\n0o OctalDigits\n0O OctalDigits\n\nOctalDigits ::\nOctalDigit\nOctalDigits OctalDigit\nOctalDigits NumericLiteralSeparator OctalDigit\n\nOctalDigit :: one of\n0 1 2 3 4 5 6 7\n\n", "features": ["numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/numeric/numeric-separators/numeric-separator-literal-oil-ods-nsl-od.js", "esid": " prod-NumericLiteralSeparator", "description": " >`0o` | `0O` OctalDigits NumericLiteralSeparator OctalDigit\n", "info": " |NumericLiteralSeparator ::\n_\n\nOctalIntegerLiteral ::\n0o OctalDigits\n0O OctalDigits\n\nOctalDigits ::\nOctalDigit\nOctalDigits OctalDigit\nOctalDigits NumericLiteralSeparator OctalDigit\n\nOctalDigit :: one of\n0 1 2 3 4 5 6 7\n\n", "features": ["numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/numeric/numeric-separators/numeric-separator-literal-oil-ods-nsl-ods.js", "esid": " prod-NumericLiteralSeparator", "description": " >`0o` | `0O` OctalDigits NumericLiteralSeparator OctalDigit\n", "info": " |NumericLiteralSeparator ::\n_\n\nOctalIntegerLiteral ::\n0o OctalDigits\n0O OctalDigits\n\nOctalDigits ::\nOctalDigit\nOctalDigits OctalDigit\nOctalDigits NumericLiteralSeparator OctalDigit\n\nOctalDigit :: one of\n0 1 2 3 4 5 6 7\n\n", "features": ["numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/numeric/numeric-separators/numeric-separator-literal-sign-minus-dds-nsl-dd.js", "esid": " prod-NumericLiteralSeparator", "description": " DecimalDigits NumericLiteralSeparator DecimalDigit", "info": " |NumericLiteralSeparator ::\n_\n\nSignedInteger ::\n...\n- DecimalDigits\n\n", "features": ["numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/numeric/numeric-separators/numeric-separator-literal-sign-plus-dds-nsl-dd.js", "esid": " prod-NumericLiteralSeparator", "description": " DecimalDigits NumericLiteralSeparator DecimalDigit", "info": " |NumericLiteralSeparator ::\n_\n\nSignedInteger ::\n...\n+ DecimalDigits\n...\n\n", "features": ["numeric-separator-literal"]}, {"path": "./test262-main/test/language/literals/regexp/named-groups/forward-reference.js", "description": " Named groups can be forward references.", "esid": " sec-atomescape", "features": ["regexp-named-groups"]}, {"path": "./test262-main/test/language/statements/async-generator/eval-var-scope-syntax-err.js", "description": " sloppy direct eval in params introduces var (async generator function declaration in sloppy code)", "esid": " sec-asyncgenerator-definitions-instantiatefunctionobject", "features": ["default-parameters", "async-iteration"], "flags": ["generated", "noStrict"], "info": " |AsyncGeneratorDeclaration : async [no LineTerminator here] function * BindingIdentifier\n( FormalParameters ) { AsyncGeneratorBody }\n\n[...]\n3. Let F be ! AsyncGeneratorFunctionCreate(Normal, FormalParameters, AsyncGeneratorBody,\nscope, strict).\n[...]\n\n\n\nRuntime Semantics: IteratorBindingInitialization\nFormalParameter : BindingElement\n\n1. Return the result of performing IteratorBindingInitialization for BindingElement with arguments iteratorRecord and environment.\n\n"}, {"path": "./test262-main/test/language/statements/class/classelementname-abrupt-completion.js", "description": " Class definition should error if evaluation of ClassElementName errors", "esid": " sec-runtime-semantics-classdefinitionevaluation", "info": " |Runtime Semantics: ClassDefinitionEvaluation\n...\n27. For each ClassElement e in order from elements\na. If IsStatic of e is false, then\ni. Let fields be the result of performing ClassElementEvaluation for e with arguments proto and false.\nb. Else,\ni. Let fields be the result of performing ClassElementEvaluation for e with arguments F and false.\nc. If fields is an abrupt completion, then\ni. Set the running execution context's LexicalEnvironment to lex.\nii. Set the running execution context's PrivateNameEnvironment to outerPrivateEnvironment.\niii. Return Completion(status).\n\nRuntime Semantics: ClassElementEvaluation\n...\nClassElement : FieldDefinition ;\n1. Return ClassFieldDefinitionEvaluation of FieldDefinition with parameter false and object.\n\nRuntime Semantics: ClassFieldDefinitionEvaluation\nWith parameters isStatic and homeObject.\nFieldDefinition : ClassElementNameInitializer\n1. Let fieldName be the result of evaluating ClassElementName.\n2. ReturnIfAbrupt(fieldName).\n\n", "features": ["class", "class-fields-public"]}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-accessors-computed-property-name-from-expression-coalesce.js", "description": " Computed property name from coalesce (ComputedPropertyName in ClassDeclaration)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-accessors-computed-property-name-from-integer-separators.js", "description": " Computed property name from integer with separators (ComputedPropertyName in ClassDeclaration)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-computed-property-name-from-expression-coalesce.js", "description": " Computed property name from coalesce (ComputedPropertyName in ClassDeclaration)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-computed-property-name-from-integer-separators.js", "description": " Computed property name from integer with separators (ComputedPropertyName in ClassDeclaration)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-computed-property-name-from-additive-expression-add.js", "description": " Computed property name from additive expression \"add\" (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-computed-property-name-from-additive-expression-subtract.js", "description": " Computed property name from additive expression \"subtract\" (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-computed-property-name-from-arrow-function-expression.js", "description": " Computed property name from arrow function (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-computed-property-name-from-assignment-expression-assignment.js", "description": " Computed property name from assignment expression (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-computed-property-name-from-assignment-expression-bitwise-or.js", "description": " Computed property name from assignment expression bitwise or (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-computed-property-name-from-async-arrow-function-expression.js", "description": " Computed property name from function expression (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-computed-property-name-from-condition-expression-false.js", "description": " Computed property name from condition expression (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-computed-property-name-from-condition-expression-true.js", "description": " Computed property name from condition expression (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-computed-property-name-from-decimal-e-notational-literal.js", "description": " Computed property name from decimal e notational literal (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-computed-property-name-from-decimal-literal.js", "description": " Computed property name from decimal literal (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-computed-property-name-from-exponetiation-expression.js", "description": " Computed property name from exponentiation expression (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-computed-property-name-from-expression-coalesce.js", "description": " Computed property name from coalesce (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-computed-property-name-from-expression-logical-and.js", "description": " Computed property name from logical and (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-computed-property-name-from-expression-logical-or.js", "description": " Computed property name from logical or (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-computed-property-name-from-function-declaration.js", "description": " Computed property name from function (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-computed-property-name-from-function-expression.js", "description": " Computed property name from function expression (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-computed-property-name-from-generator-function-declaration.js", "description": " Computed property name from generator function (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-computed-property-name-from-identifier.js", "description": " Computed property name from string literal (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-computed-property-name-from-integer-e-notational-literal.js", "description": " Computed property name from numeric literal (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-computed-property-name-from-integer-separators.js", "description": " Computed property name from integer with separators (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-computed-property-name-from-math.js", "description": " Computed property name from math (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-computed-property-name-from-multiplicative-expression-div.js", "description": " Computed property name from multiplicative expression \"divide\" (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-computed-property-name-from-multiplicative-expression-mult.js", "description": " Computed property name from multiplicative expression \"multiply\" (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-computed-property-name-from-null.js", "description": " Computed property name from condition expression (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-computed-property-name-from-numeric-literal.js", "description": " Computed property name from numeric literal (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-computed-property-name-from-string-literal.js", "description": " Computed property name from string literal (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-computed-property-name-from-yield-expression.js", "description": " Computed property name from yield expression (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-methods-computed-property-name-from-additive-expression-add.js", "description": " Computed property name from additive expression \"add\" (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-methods-computed-property-name-from-additive-expression-subtract.js", "description": " Computed property name from additive expression \"subtract\" (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-methods-computed-property-name-from-arrow-function-expression.js", "description": " Computed property name from arrow function (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-methods-computed-property-name-from-assignment-expression-assignment.js", "description": " Computed property name from assignment expression (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-methods-computed-property-name-from-assignment-expression-bitwise-or.js", "description": " Computed property name from assignment expression bitwise or (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-methods-computed-property-name-from-async-arrow-function-expression.js", "description": " Computed property name from function expression (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-methods-computed-property-name-from-condition-expression-false.js", "description": " Computed property name from condition expression (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-methods-computed-property-name-from-condition-expression-true.js", "description": " Computed property name from condition expression (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-methods-computed-property-name-from-decimal-e-notational-literal.js", "description": " Computed property name from decimal e notational literal (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-methods-computed-property-name-from-decimal-literal.js", "description": " Computed property name from decimal literal (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-methods-computed-property-name-from-exponetiation-expression.js", "description": " Computed property name from exponentiation expression (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-methods-computed-property-name-from-expression-coalesce.js", "description": " Computed property name from coalesce (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-methods-computed-property-name-from-expression-logical-and.js", "description": " Computed property name from logical and (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-methods-computed-property-name-from-expression-logical-or.js", "description": " Computed property name from logical or (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-methods-computed-property-name-from-function-declaration.js", "description": " Computed property name from function (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-methods-computed-property-name-from-function-expression.js", "description": " Computed property name from function expression (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-methods-computed-property-name-from-generator-function-declaration.js", "description": " Computed property name from generator function (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-methods-computed-property-name-from-identifier.js", "description": " Computed property name from string literal (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-methods-computed-property-name-from-integer-e-notational-literal.js", "description": " Computed property name from numeric literal (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-methods-computed-property-name-from-integer-separators.js", "description": " Computed property name from integer with separators (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-methods-computed-property-name-from-math.js", "description": " Computed property name from math (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-methods-computed-property-name-from-multiplicative-expression-div.js", "description": " Computed property name from multiplicative expression \"divide\" (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-methods-computed-property-name-from-multiplicative-expression-mult.js", "description": " Computed property name from multiplicative expression \"multiply\" (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-methods-computed-property-name-from-null.js", "description": " Computed property name from condition expression (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-methods-computed-property-name-from-numeric-literal.js", "description": " Computed property name from numeric literal (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-methods-computed-property-name-from-string-literal.js", "description": " Computed property name from string literal (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/cpn-class-decl-fields-methods-computed-property-name-from-yield-expression.js", "description": " Computed property name from yield expression (ComputedPropertyName in ClassExpression)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names", "class-fields-public", "class-static-fields-public"], "flags": ["generated"], "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/statements/class/elements/abrupt-completition-on-field-initializer.js", "description": " If an initializer returns an abrupt completion, other initializers should not execute", "esid": " sec-ecmascript-function-objects-construct-argumentslist-newtarget", "info": " |[[Construct]] ( argumentsList, newTarget)\n...\n8. If kind is \"base\", then\na. Perform OrdinaryCallBindThis(F, calleeContext, thisArgument).\nb. Let result be InitializeInstanceFields(thisArgument, F).\nc. If result is an abrupt completion, then\ni. Remove calleeContext from execution context stack and restore callerContext as the running execution context.\nii. Return Completion(result).\n...\n\nClassTail : ClassHeritage { ClassBody }\n...\n34. For each item fieldRecord in order from staticFields,\na. Perform ? DefineField(F, field).\n...\n\n", "features": ["class-fields-public", "class-static-fields-public", "class"]}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-gen-computed-names.js", "description": " Computed property names (field definitions after a generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "generators", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-gen-computed-symbol-names.js", "description": " Computed property symbol names (field definitions after a generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "Symbol", "computed-property-names", "generators", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-gen-literal-names-asi.js", "description": " Literal property names with ASI (field definitions after a generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "generators", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-gen-literal-names.js", "description": " Literal property names (field definitions after a generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "generators", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-gen-rs-field-identifier-initializer.js", "description": " Valid FieldDefinition (field definitions after a generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "generators", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-gen-rs-field-identifier.js", "description": " Valid FieldDefinition (field definitions after a generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "generators", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-gen-string-literal-names.js", "description": " String literal names (field definitions after a generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "generators", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-method-computed-names.js", "description": " Computed property names (field definitions after a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-method-computed-symbol-names.js", "description": " Computed property symbol names (field definitions after a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "Symbol", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-method-literal-names-asi.js", "description": " Literal property names with ASI (field definitions after a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-method-literal-names.js", "description": " Literal property names (field definitions after a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-method-rs-field-identifier-initializer.js", "description": " Valid FieldDefinition (field definitions after a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-method-rs-field-identifier.js", "description": " Valid FieldDefinition (field definitions after a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-method-string-literal-names.js", "description": " String literal names (field definitions after a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-gen-computed-names.js", "description": " Computed property names (field definitions after a static generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "generators", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-gen-computed-symbol-names.js", "description": " Computed property symbol names (field definitions after a static generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "Symbol", "computed-property-names", "generators", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-gen-literal-names-asi.js", "description": " Literal property names with ASI (field definitions after a static generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "generators", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-gen-literal-names.js", "description": " Literal property names (field definitions after a static generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "generators", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-gen-rs-field-identifier-initializer.js", "description": " Valid FieldDefinition (field definitions after a static generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "generators", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-gen-rs-field-identifier.js", "description": " Valid FieldDefinition (field definitions after a static generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "generators", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-gen-string-literal-names.js", "description": " String literal names (field definitions after a static generator in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "generators", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-method-computed-names.js", "description": " Computed property names (field definitions after a static method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-method-computed-symbol-names.js", "description": " Computed property symbol names (field definitions after a static method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "Symbol", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-method-literal-names-asi.js", "description": " Literal property names with ASI (field definitions after a static method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-method-literal-names.js", "description": " Literal property names (field definitions after a static method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-method-rs-field-identifier-initializer.js", "description": " Valid FieldDefinition (field definitions after a static method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-method-rs-field-identifier.js", "description": " Valid FieldDefinition (field definitions after a static method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/after-same-line-static-method-string-literal-names.js", "description": " String literal names (field definitions after a static method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/arrow-body-derived-cls-direct-eval-contains-superproperty-1.js", "description": " super.x in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of a MethodDefinition.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperProperty.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/arrow-body-derived-cls-direct-eval-contains-superproperty-2.js", "description": " super['x'] in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |The remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Methods\n\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of a MethodDefinition.\n\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperProperty.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/arrow-body-derived-cls-direct-eval-err-contains-supercall-1.js", "description": " error if `super()['x']` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/arrow-body-derived-cls-direct-eval-err-contains-supercall-2.js", "description": " error if `super().x` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/arrow-body-derived-cls-direct-eval-err-contains-supercall.js", "description": " error if `super()` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/arrow-body-derived-cls-indirect-eval-contains-superproperty-1.js", "description": " super.x in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of a MethodDefinition.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperProperty.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/arrow-body-derived-cls-indirect-eval-contains-superproperty-2.js", "description": " super['x'] in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |The remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Methods\n\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of a MethodDefinition.\n\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperProperty.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/arrow-body-derived-cls-indirect-eval-err-contains-supercall-1.js", "description": " error if `super()['x']` in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/arrow-body-derived-cls-indirect-eval-err-contains-supercall-2.js", "description": " error if `super().x` in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/arrow-body-derived-cls-indirect-eval-err-contains-supercall.js", "description": " error if `super()` in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/arrow-body-direct-eval-err-contains-arguments.js", "description": " error if `arguments` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\nIt is a Syntax Error if ContainsArguments of StatementList is true.\n...\n\nStatic Semantics: ContainsArguments\nIdentifierReference : Identifier\n\n1. If the StringValue of Identifier is \"arguments\", return true.\n...\nFor all other grammatical productions, recurse on all nonterminals. If any piece returns true, then return true. Otherwise return false.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/arrow-body-direct-eval-err-contains-newtarget.js", "description": " error if `new.target` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "new.target", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Functions\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of any function.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains NewTarget.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/arrow-body-indirect-eval-err-contains-newtarget.js", "description": " error if `new.target` in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "new.target", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Functions\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of any function.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains NewTarget.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/class-field-is-observable-by-proxy.js", "description": " Public class fields initialization calls [[DefineOwnProperty]]", "esid": " sec-define-field", "info": " |DefineField(receiver, fieldRecord)\n...\n8. If fieldName is a Private Name,\na. Perform ? PrivateFieldAdd(fieldName, receiver, initValue).\n9. Else,\na. Assert: IsPropertyKey(fieldName) is true.\nb. Perform ? CreateDataPropertyOrThrow(receiver, fieldName, initValue).\n10. Return.\n", "includes": ["compareArray.js"], "features": ["class", "class-fields-public", "Proxy"]}, {"path": "./test262-main/test/language/statements/class/elements/class-field-on-frozen-objects.js", "description": " Public class field initialization fails on frozen object", "esid": " sec-define-field", "info": " |DefineField(receiver, fieldRecord)\n...\n8. If fieldName is a Private Name,\na. Perform ? PrivateFieldAdd(fieldName, receiver, initValue).\n9. Else,\na. Assert: IsPropertyKey(fieldName) is true.\nb. Perform ? CreateDataPropertyOrThrow(receiver, fieldName, initValue).\n10. Return.\n", "features": ["class", "class-fields-public"], "flags": ["onlyStrict"]}, {"path": "./test262-main/test/language/statements/class/elements/computed-name-toprimitive-symbol.js", "description": " ToPrimitive evaluation in the ComputedPropertyName (field definitions in a class declaration)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "Symbol.toPrimitive", "Symbol", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |Runtime Semantics: ClassDefinitionEvaluation\n\n...\n27. For each ClassElement e in order from elements\na. If IsStatic of me is false, then\ni. Let fields be the result of performing ClassElementEvaluation for e with arguments proto and false.\nb. Else,\ni. Let fields be the result of performing ClassElementEvaluation for e with arguments F and false.\nc. If fields is an abrupt completion, then\ni. Set the running execution context's LexicalEnvironment to lex.\nii. Set the running execution context's PrivateNameEnvironment to outerPrivateEnvironment.\niii. Return Completion(status).\n...\n\nRuntime Semantics: ClassElementEvaluation\n\nClassElement: FieldDefinition;\nReturn ClassFieldDefinitionEvaluation of FieldDefinition with parameter false and object.\n\nRuntime Semantics: ClassFieldDefinitionEvaluation\nWith parameters isStatic and homeObject.\n\n1. Let fieldName be the result of evaluating ClassElementName.\n2. ReturnIfAbrupt(fieldName).\n...\n\nRuntime Semantics: Evaluation\nComputedPropertyName: [ AssignmentExpression ]\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let propName be ? GetValue(exprValue).\n3. Return ? ToPropertyKey(propName).\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/computed-name-toprimitive.js", "description": " ToPrimitive evaluation in the ComputedPropertyName (field definitions in a class declaration)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "Symbol.toPrimitive", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |Runtime Semantics: ClassDefinitionEvaluation\n\n...\n27. For each ClassElement e in order from elements\na. If IsStatic of me is false, then\ni. Let fields be the result of performing ClassElementEvaluation for e with arguments proto and false.\nb. Else,\ni. Let fields be the result of performing ClassElementEvaluation for e with arguments F and false.\nc. If fields is an abrupt completion, then\ni. Set the running execution context's LexicalEnvironment to lex.\nii. Set the running execution context's PrivateNameEnvironment to outerPrivateEnvironment.\niii. Return Completion(status).\n...\n\nRuntime Semantics: ClassElementEvaluation\n\nClassElement: FieldDefinition;\nReturn ClassFieldDefinitionEvaluation of FieldDefinition with parameter false and object.\n\nRuntime Semantics: ClassFieldDefinitionEvaluation\nWith parameters isStatic and homeObject.\n\n1. Let fieldName be the result of evaluating ClassElementName.\n2. ReturnIfAbrupt(fieldName).\n...\n\nRuntime Semantics: Evaluation\nComputedPropertyName: [ AssignmentExpression ]\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let propName be ? GetValue(exprValue).\n3. Return ? ToPropertyKey(propName).\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/computed-property-abrupt-completition.js", "description": " PrivateFieldGet should return with abrupt completion", "esid": " runtime-semantics-class-definition-evaluation", "info": " |ClassTail : ClassHeritage { ClassBody }\n...\n28. For each ClassElement e in order from elements,\na. If IsStatic of e is false, then\ni. Let field be the result of performing ClassElementEvaluation for e with arguments proto and false.\nb. Else,\ni. Let field be the result of performing PropertyDefinitionEvaluation for mClassElementEvaluation for e with arguments F and false.\nc. If field is an abrupt completion, then\ni. Set the running execution context's LexicalEnvironment to lex.\nii. Set the running execution context's PrivateEnvironment to outerPrivateEnvironment.\niii. Return Completion(field).\n...\n", "features": ["class-fields-public", "class-static-fields-public", "class"]}, {"path": "./test262-main/test/language/statements/class/elements/ctor-called-after-fields-init.js", "description": " The constructor method is called after the fields are initalized (field definitions in a class declaration)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "info": " |[[Construct]] ( argumentsList, newTarget)\n\n8. If kind is \"base\", then\na. Perform OrdinaryCallBindThis(F, calleeContext, thisArgument).\nb. Let result be InitializeInstanceFields(thisArgument, F).\n...\n...\n11. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n...\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/derived-cls-direct-eval-contains-superproperty-1.js", "description": " super.x in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of a MethodDefinition.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperProperty.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/derived-cls-direct-eval-contains-superproperty-2.js", "description": " super['x'] in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |The remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Methods\n\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of a MethodDefinition.\n\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperProperty.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/derived-cls-direct-eval-err-contains-supercall-1.js", "description": " error if `super()['x']` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/derived-cls-direct-eval-err-contains-supercall-2.js", "description": " error if `super().x` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/derived-cls-direct-eval-err-contains-supercall.js", "description": " error if `super()` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/derived-cls-indirect-eval-contains-superproperty-1.js", "description": " super.x in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of a MethodDefinition.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperProperty.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/derived-cls-indirect-eval-contains-superproperty-2.js", "description": " super['x'] in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |The remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Methods\n\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of a MethodDefinition.\n\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperProperty.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/derived-cls-indirect-eval-err-contains-supercall-1.js", "description": " error if `super()['x']` in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/derived-cls-indirect-eval-err-contains-supercall-2.js", "description": " error if `super().x` in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/derived-cls-indirect-eval-err-contains-supercall.js", "description": " error if `super()` in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/direct-eval-err-contains-arguments.js", "description": " error if `arguments` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\nIt is a Syntax Error if ContainsArguments of StatementList is true.\n...\n\nStatic Semantics: ContainsArguments\nIdentifierReference : Identifier\n\n1. If the StringValue of Identifier is \"arguments\", return true.\n...\nFor all other grammatical productions, recurse on all nonterminals. If any piece returns true, then return true. Otherwise return false.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/direct-eval-err-contains-newtarget.js", "description": " error if `new.target` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "new.target", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Functions\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of any function.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains NewTarget.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/evaluation-error/computed-name-referenceerror.js", "description": " ReferenceError evaluating a computed property name (field definitions in a class declaration)", "esid": " sec-runtime-semantics-classdefinitionevaluation", "features": ["class-fields-public", "computed-property-names", "class"], "flags": ["generated"], "info": " |Runtime Semantics: ClassDefinitionEvaluation\n\n...\n27. For each ClassElement e in order from elements\na. If IsStatic of me is false, then\ni. Let fields be the result of performing ClassElementEvaluation for e with arguments proto and false.\nb. Else,\ni. Let fields be the result of performing ClassElementEvaluation for e with arguments F and false.\nc. If fields is an abrupt completion, then\ni. Set the running execution context's LexicalEnvironment to lex.\nii. Set the running execution context's PrivateNameEnvironment to outerPrivateEnvironment.\niii. Return Completion(status).\n...\n\nRuntime Semantics: ClassElementEvaluation\n\nClassElement: FieldDefinition;\nReturn ClassFieldDefinitionEvaluation of FieldDefinition with parameter false and object.\n\nRuntime Semantics: ClassFieldDefinitionEvaluation\nWith parameters isStatic and homeObject.\n\n1. Let fieldName be the result of evaluating ClassElementName.\n2. ReturnIfAbrupt(fieldName).\n...\n\nRuntime Semantics: Evaluation\nComputedPropertyName: [ AssignmentExpression ]\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let propName be ? GetValue(exprValue).\n3. Return ? ToPropertyKey(propName).\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/evaluation-error/computed-name-toprimitive-err.js", "description": " Custom error evaluating a computed property name (field definitions in a class declaration)", "esid": " sec-runtime-semantics-classdefinitionevaluation", "features": ["class-fields-public", "computed-property-names", "Symbol.toPrimitive", "class"], "flags": ["generated"], "info": " |Runtime Semantics: ClassDefinitionEvaluation\n\n...\n27. For each ClassElement e in order from elements\na. If IsStatic of me is false, then\ni. Let fields be the result of performing ClassElementEvaluation for e with arguments proto and false.\nb. Else,\ni. Let fields be the result of performing ClassElementEvaluation for e with arguments F and false.\nc. If fields is an abrupt completion, then\ni. Set the running execution context's LexicalEnvironment to lex.\nii. Set the running execution context's PrivateNameEnvironment to outerPrivateEnvironment.\niii. Return Completion(status).\n...\n\nRuntime Semantics: ClassElementEvaluation\n\nClassElement: FieldDefinition;\nReturn ClassFieldDefinitionEvaluation of FieldDefinition with parameter false and object.\n\nRuntime Semantics: ClassFieldDefinitionEvaluation\nWith parameters isStatic and homeObject.\n\n1. Let fieldName be the result of evaluating ClassElementName.\n2. ReturnIfAbrupt(fieldName).\n...\n\nRuntime Semantics: Evaluation\nComputedPropertyName: [ AssignmentExpression ]\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let propName be ? GetValue(exprValue).\n3. Return ? ToPropertyKey(propName).\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/evaluation-error/computed-name-toprimitive-returns-noncallable.js", "description": " Custom error evaluating a computed property name (field definitions in a class declaration)", "esid": " sec-runtime-semantics-classdefinitionevaluation", "features": ["class-fields-public", "computed-property-names", "Symbol.toPrimitive", "class"], "flags": ["generated"], "info": " |Runtime Semantics: ClassDefinitionEvaluation\n\n...\n27. For each ClassElement e in order from elements\na. If IsStatic of me is false, then\ni. Let fields be the result of performing ClassElementEvaluation for e with arguments proto and false.\nb. Else,\ni. Let fields be the result of performing ClassElementEvaluation for e with arguments F and false.\nc. If fields is an abrupt completion, then\ni. Set the running execution context's LexicalEnvironment to lex.\nii. Set the running execution context's PrivateNameEnvironment to outerPrivateEnvironment.\niii. Return Completion(status).\n...\n\nRuntime Semantics: ClassElementEvaluation\n\nClassElement: FieldDefinition;\nReturn ClassFieldDefinitionEvaluation of FieldDefinition with parameter false and object.\n\nRuntime Semantics: ClassFieldDefinitionEvaluation\nWith parameters isStatic and homeObject.\n\n1. Let fieldName be the result of evaluating ClassElementName.\n2. ReturnIfAbrupt(fieldName).\n...\n\nRuntime Semantics: Evaluation\nComputedPropertyName: [ AssignmentExpression ]\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let propName be ? GetValue(exprValue).\n3. Return ? ToPropertyKey(propName).\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/evaluation-error/computed-name-toprimitive-returns-nonobject.js", "description": " Custom error evaluating a computed property name (field definitions in a class declaration)", "esid": " sec-runtime-semantics-classdefinitionevaluation", "features": ["class-fields-public", "computed-property-names", "Symbol.toPrimitive", "class"], "flags": ["generated"], "info": " |Runtime Semantics: ClassDefinitionEvaluation\n\n...\n27. For each ClassElement e in order from elements\na. If IsStatic of me is false, then\ni. Let fields be the result of performing ClassElementEvaluation for e with arguments proto and false.\nb. Else,\ni. Let fields be the result of performing ClassElementEvaluation for e with arguments F and false.\nc. If fields is an abrupt completion, then\ni. Set the running execution context's LexicalEnvironment to lex.\nii. Set the running execution context's PrivateNameEnvironment to outerPrivateEnvironment.\niii. Return Completion(status).\n...\n\nRuntime Semantics: ClassElementEvaluation\n\nClassElement: FieldDefinition;\nReturn ClassFieldDefinitionEvaluation of FieldDefinition with parameter false and object.\n\nRuntime Semantics: ClassFieldDefinitionEvaluation\nWith parameters isStatic and homeObject.\n\n1. Let fieldName be the result of evaluating ClassElementName.\n2. ReturnIfAbrupt(fieldName).\n...\n\nRuntime Semantics: Evaluation\nComputedPropertyName: [ AssignmentExpression ]\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let propName be ? GetValue(exprValue).\n3. Return ? ToPropertyKey(propName).\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/evaluation-error/computed-name-tostring-err.js", "description": " Custom error evaluating a computed property name (field definitions in a class declaration)", "esid": " sec-runtime-semantics-classdefinitionevaluation", "features": ["class-fields-public", "computed-property-names", "class"], "flags": ["generated"], "info": " |Runtime Semantics: ClassDefinitionEvaluation\n\n...\n27. For each ClassElement e in order from elements\na. If IsStatic of me is false, then\ni. Let fields be the result of performing ClassElementEvaluation for e with arguments proto and false.\nb. Else,\ni. Let fields be the result of performing ClassElementEvaluation for e with arguments F and false.\nc. If fields is an abrupt completion, then\ni. Set the running execution context's LexicalEnvironment to lex.\nii. Set the running execution context's PrivateNameEnvironment to outerPrivateEnvironment.\niii. Return Completion(status).\n...\n\nRuntime Semantics: ClassElementEvaluation\n\nClassElement: FieldDefinition;\nReturn ClassFieldDefinitionEvaluation of FieldDefinition with parameter false and object.\n\nRuntime Semantics: ClassFieldDefinitionEvaluation\nWith parameters isStatic and homeObject.\n\n1. Let fieldName be the result of evaluating ClassElementName.\n2. ReturnIfAbrupt(fieldName).\n...\n\nRuntime Semantics: Evaluation\nComputedPropertyName: [ AssignmentExpression ]\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let propName be ? GetValue(exprValue).\n3. Return ? ToPropertyKey(propName).\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/evaluation-error/computed-name-valueof-err.js", "description": " Custom error evaluating a computed property name (field definitions in a class declaration)", "esid": " sec-runtime-semantics-classdefinitionevaluation", "features": ["class-fields-public", "computed-property-names", "class"], "flags": ["generated"], "info": " |Runtime Semantics: ClassDefinitionEvaluation\n\n...\n27. For each ClassElement e in order from elements\na. If IsStatic of me is false, then\ni. Let fields be the result of performing ClassElementEvaluation for e with arguments proto and false.\nb. Else,\ni. Let fields be the result of performing ClassElementEvaluation for e with arguments F and false.\nc. If fields is an abrupt completion, then\ni. Set the running execution context's LexicalEnvironment to lex.\nii. Set the running execution context's PrivateNameEnvironment to outerPrivateEnvironment.\niii. Return Completion(status).\n...\n\nRuntime Semantics: ClassElementEvaluation\n\nClassElement: FieldDefinition;\nReturn ClassFieldDefinitionEvaluation of FieldDefinition with parameter false and object.\n\nRuntime Semantics: ClassFieldDefinitionEvaluation\nWith parameters isStatic and homeObject.\n\n1. Let fieldName be the result of evaluating ClassElementName.\n2. ReturnIfAbrupt(fieldName).\n...\n\nRuntime Semantics: Evaluation\nComputedPropertyName: [ AssignmentExpression ]\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let propName be ? GetValue(exprValue).\n3. Return ? ToPropertyKey(propName).\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/field-declaration.js", "description": " Fields are defined (field definitions in a class declaration)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |Updated Productions\n\nClassElement :\n...\nFieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\nStringLiteral\nNumericLiteral\n\nClassDefinitionEvaluation:\n...\n\n26. Let instanceFields be a new empty List.\n28. For each ClassElement e in order from elements,\na. If IsStatic of e is false, then\ni. Let field be the result of performing ClassElementEvaluation for e with arguments proto and false.\nb. ...\nc. ...\nd. If field is not empty, append field to instanceFields.\n\n...\n\n30. Set F.[[Fields]] to instanceFields.\n...\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/fielddefinition-initializer-abrupt-completion.js", "description": " Class construction should error if evaluation of field initializer errors", "esid": " sec-ecmascript-function-objects-construct-argumentslist-newtarget", "info": " |[[Construct]] ( argumentsList, newTarget)\n...\n8. If kind is \"base\", then\na. Perform OrdinaryCallBindThis(F, calleeContext, thisArgument).\nb. Let result be InitializeInstanceFields(thisArgument, F).\nc. If result is an abrupt completion, then\ni. Remove calleeContext from execution context stack and restore callerContext as the running execution context.\nii. Return Completion(result).\n\nInitializeInstanceFields ( O, constructor )\n1. Assert: Type ( O ) is Object.\n2. Assert: Assert constructor is an ECMAScript function object.\n3. Let fieldRecords be the value of constructor's [[Fields]] internal slot.\n4. For each item fieldRecord in order from fieldRecords,\na. If fieldRecord.[[static]] is false, then\ni. Perform ? DefineField(O, fieldRecord).\n\nDefineField(receiver, fieldRecord)\n1. Assert: Type(receiver) is Object.\n2. Assert: fieldRecord is a Record as created by ClassFieldDefinitionEvaluation.\n3. Let fieldName be fieldRecord.[[Name]].\n4. Let initializer be fieldRecord.[[Initializer]].\n5. If initializer is not empty, then\na.Let initValue be ? Call(initializer, receiver).\n\n", "features": ["class", "class-fields-public"]}, {"path": "./test262-main/test/language/statements/class/elements/fields-asi-1.js", "description": " ASI test in field declarations -- computed name interpreted as property", "esid": " sec-automatic-semicolon-insertion", "features": ["class", "class-fields-public"]}, {"path": "./test262-main/test/language/statements/class/elements/fields-asi-2.js", "description": " ASI test in field declarations -- computed name interpreted as string index", "esid": " sec-automatic-semicolon-insertion", "features": ["class", "class-fields-public"]}, {"path": "./test262-main/test/language/statements/class/elements/fields-asi-5.js", "description": " ASI test in field declarations -- field with PropertyName \"in\" interpreted as index", "esid": " sec-automatic-semicolon-insertion", "features": ["class", "class-fields-public"]}, {"path": "./test262-main/test/language/statements/class/elements/fields-computed-name-propname-constructor.js", "description": " class fields forbid PropName 'constructor' (no early error -- PropName of ComputedPropertyName not forbidden value)", "esid": " sec-class-definitions-static-semantics-early-errors", "features": ["class", "class-fields-public"], "info": " |Static Semantics: PropName\n...\nComputedPropertyName : [ AssignmentExpression ]\nReturn empty.\n\n\n// This test file tests the following early error:\nStatic Semantics: Early Errors\n\nClassElement : FieldDefinition;\nIt is a Syntax Error if PropName of FieldDefinition is \"constructor\".\n\nDefineField(receiver, fieldRecord)\n\n...\n8. If fieldName is a Private Name,\n...\n9. Else,\na. ...\nb. Perform ? CreateDataPropertyOrThrow(receiver, fieldName, initValue).\n\nCreateDataPropertyOrThrow ( O, P, V )\n\n...\n3. Let success be ? CreateDataProperty(O, P, V).\n4. If success is false, throw a TypeError exception.\n...\n\nCreateDataProperty ( O, P, V )\n\n...\n3. Let newDesc be the PropertyDescriptor { [[Value]]: V, [[Writable]]: true, [[Enumerable]]: true,\n[[Configurable]]: true }.\n4. Return ? O.[[DefineOwnProperty]](P, newDesc).\n"}, {"path": "./test262-main/test/language/statements/class/elements/fields-computed-name-static-computed-var-propname-constructor.js", "description": " static class fields forbid PropName 'constructor' (no early error -- PropName of ComputedPropertyName not forbidden value)", "esid": " sec-class-definitions-static-semantics-early-errors", "features": ["class", "class-static-fields-public"], "info": " |Static Semantics: PropName\n...\nComputedPropertyName : [ AssignmentExpression ]\nReturn empty.\n\nThis test file tests the following early error is only valid for a matching PropName:\n\nStatic Semantics: Early Errors\n\nClassElement : static FieldDefinition;\nIt is a Syntax Error if PropName of FieldDefinition is \"prototype\" or \"constructor\".\n\n-- IDK what is calling InitializeClassElements but I guess it's supposed to be called to\n-- set the fields\n\nInitializeClassElements(F, proto)\n\n...\n6. For each item element in order from elements,\na. If element.[[Kind]] is \"field\" and element.[[Placement]] is \"static\" or \"prototype\",\n...\nii. Let receiver be F if element.[[Placement]] is \"static\", else let receiver be proto.\niii. Perform ? DefineClassElement(receiver, element).\n\n-- DefineClassElement is probably DefineField in the class fields proposal\n\nDefineField(receiver, fieldRecord)\n\n...\n8. If fieldName is a Private Name,\n...\n9. Else,\na. ...\nb. Perform ? CreateDataPropertyOrThrow(receiver, fieldName, initValue).\n\nCreateDataPropertyOrThrow ( O, P, V )\n\n...\n3. Let success be ? CreateDataProperty(O, P, V).\n4. If success is false, throw a TypeError exception.\n...\n\nCreateDataProperty ( O, P, V )\n\n...\n3. Let newDesc be the PropertyDescriptor { [[Value]]: V, [[Writable]]: true, [[Enumerable]]: true,\n[[Configurable]]: true }.\n4. Return ? O.[[DefineOwnProperty]](P, newDesc).\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/language/statements/class/elements/fields-computed-name-static-computed-var-propname-prototype.js", "description": " static class fields forbid PropName 'prototype' (no early error -- PropName of ComputedPropertyName)", "esid": " sec-class-definitions-static-semantics-early-errors", "features": ["class", "class-static-fields-public"], "info": " |14.6.13 Runtime Semantics: ClassDefinitionEvaluation\n\n...\n16. Perform MakeConstructor(F, false, proto).\n...\n\n9.2.10 MakeConstructor ( F [ , writablePrototype [ , prototype ] ] )\n\n6. Perform ! DefinePropertyOrThrow(F, \"prototype\", PropertyDescriptor { [[Value]]: prototype,\n[[Writable]]: writablePrototype, [[Enumerable]]: false, [[Configurable]]: false }).\n"}, {"path": "./test262-main/test/language/statements/class/elements/fields-computed-name-static-propname-constructor.js", "description": " static class fields forbid PropName 'constructor' (no early error -- PropName of ComputedPropertyName not forbidden value)", "esid": " sec-class-definitions-static-semantics-early-errors", "features": ["class", "class-static-fields-public"], "info": " |Static Semantics: PropName\n...\nComputedPropertyName : [ AssignmentExpression ]\nReturn empty.\n\nThis test file tests the following early error is only valid for a matching PropName:\n\nStatic Semantics: Early Errors\n\nClassElement : static FieldDefinition;\nIt is a Syntax Error if PropName of FieldDefinition is \"prototype\" or \"constructor\".\n\n-- IDK what is calling InitializeClassElements but I guess it's supposed to be called to\n-- set the fields\n\nInitializeClassElements(F, proto)\n\n...\n6. For each item element in order from elements,\na. If element.[[Kind]] is \"field\" and element.[[Placement]] is \"static\" or \"prototype\",\n...\nii. Let receiver be F if element.[[Placement]] is \"static\", else let receiver be proto.\niii. Perform ? DefineClassElement(receiver, element).\n\n-- DefineClassElement is probably DefineField in the class fields proposal\n\nDefineField(receiver, fieldRecord)\n\n...\n8. If fieldName is a Private Name,\n...\n9. Else,\na. ...\nb. Perform ? CreateDataPropertyOrThrow(receiver, fieldName, initValue).\n\nCreateDataPropertyOrThrow ( O, P, V )\n\n...\n3. Let success be ? CreateDataProperty(O, P, V).\n4. If success is false, throw a TypeError exception.\n...\n\nCreateDataProperty ( O, P, V )\n\n...\n3. Let newDesc be the PropertyDescriptor { [[Value]]: V, [[Writable]]: true, [[Enumerable]]: true,\n[[Configurable]]: true }.\n4. Return ? O.[[DefineOwnProperty]](P, newDesc).\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/language/statements/class/elements/fields-computed-name-static-propname-prototype.js", "description": " static class fields forbid PropName 'prototype' (no early error -- PropName of ComputedPropertyName)", "esid": " sec-class-definitions-static-semantics-early-errors", "features": ["class", "class-static-fields-public"], "info": " |14.6.13 Runtime Semantics: ClassDefinitionEvaluation\n\n...\n16. Perform MakeConstructor(F, false, proto).\n...\n\n9.2.10 MakeConstructor ( F [ , writablePrototype [ , prototype ] ] )\n\n6. Perform ! DefinePropertyOrThrow(F, \"prototype\", PropertyDescriptor { [[Value]]: prototype,\n[[Writable]]: writablePrototype, [[Enumerable]]: false, [[Configurable]]: false }).\n"}, {"path": "./test262-main/test/language/statements/class/elements/fields-hash-constructor-is-a-valid-name.js", "description": " \"#constructor is a valid property name for a public field\"", "esid": " sec-class-definitions-static-semantics-early-errors", "features": ["class", "class-fields-public"], "info": " |ClassElementName : PrivateName;\n\nIt is a SyntaxError if StringValue of PrivateName is \"#constructor\".\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/language/statements/class/elements/indirect-eval-contains-arguments.js", "description": " No error if `arguments` in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated", "noStrict"], "info": " |For indirect eval, the \"Additional Early Error Rules for Eval Inside Initializer\"\n(in #sec-performeval-rules-in-initializer) are NOT applicable.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/indirect-eval-err-contains-newtarget.js", "description": " error if `new.target` in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "new.target", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Functions\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of any function.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains NewTarget.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/init-err-evaluation.js", "description": " Return abrupt completion evaluating the field initializer (field definitions in a class declaration)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "info": " |[[Construct]] ( argumentsList, newTarget)\n\n8. If kind is \"base\", then\na. Perform OrdinaryCallBindThis(F, calleeContext, thisArgument).\nb. Let result be InitializeInstanceFields(thisArgument, F).\n...\n...\n11. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n...\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/init-value-defined-after-class.js", "description": " The initializer value is defined after the class evaluation (field definitions in a class declaration)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |[[Construct]] ( argumentsList, newTarget)\n\n8. If kind is \"base\", then\na. Perform OrdinaryCallBindThis(F, calleeContext, thisArgument).\nb. Let result be InitializeInstanceFields(thisArgument, F).\n...\n...\n11. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n...\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/init-value-incremental.js", "description": " The initializer value is defined during the class instatiation (field definitions in a class declaration)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |Runtime Semantics: ClassDefinitionEvaluation\n\n27. For each ClassElement e in order from elements\n...\nd. Append to fieldRecords the elements of fields.\n...\n33. Let result be InitializeStaticFields(F).\n...\n\n[[Construct]] ( argumentsList, newTarget)\n\n8. If kind is \"base\", then\na. Perform OrdinaryCallBindThis(F, calleeContext, thisArgument).\nb. Let result be InitializeInstanceFields(thisArgument, F).\n...\n...\n11. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n...\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/intercalated-static-non-static-computed-fields.js", "description": " Computed class fields are executed in the order they are delcared, regardless it is static or instance field (field definitions in a class declaration)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-public", "class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassTail : ClassHeritage { ClassBody }\n...\n28. For each ClassElement e in order from elements,\na. If IsStatic of e is false, then\ni. Let field be the result of performing ClassElementEvaluation for e with arguments proto and false.\nb. Else,\ni. Let field be the result of performing PropertyDefinitionEvaluation for mClassElementEvaluation for e with arguments F and false.\nc. If field is an abrupt completion, then\n...\nd. If field is not empty,\ni. If IsStatic of e is false, append field to instanceFields.\nii. Otherwise, append field to staticFields.\n...\n34. For each item fieldRecord in order from staticFields,\na. Perform ? DefineField(F, field).\n...\n\n[[Construct]] (argumentsList, newTarget)\n...\n8. If kind is \"base\", then\na. Perform OrdinaryCallBindThis(F, calleeContext, thisArgument).\nb. Let result be InitializeInstanceFields(thisArgument, F).\nc. If result is an abrupt completion, then\ni. Remove calleeContext from execution context stack and restore callerContext as the running execution context.\nii. Return Completion(result).\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/multiple-definitions-computed-names.js", "description": " Computed property names (multiple fields definitions)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/multiple-definitions-computed-symbol-names.js", "description": " Computed property symbol names (multiple fields definitions)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "Symbol", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/multiple-definitions-literal-names-asi.js", "description": " Literal property names with ASI (multiple fields definitions)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/multiple-definitions-literal-names.js", "description": " Literal property names (multiple fields definitions)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/multiple-definitions-rs-field-identifier-initializer.js", "description": " Valid FieldDefinition (multiple fields definitions)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/multiple-definitions-rs-field-identifier.js", "description": " Valid FieldDefinition (multiple fields definitions)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/multiple-definitions-string-literal-names.js", "description": " String literal names (multiple fields definitions)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/multiple-stacked-definitions-computed-names.js", "description": " Computed property names (multiple stacked fields definitions through ASI)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/multiple-stacked-definitions-computed-symbol-names.js", "description": " Computed property symbol names (multiple stacked fields definitions through ASI)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "Symbol", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/multiple-stacked-definitions-literal-names-asi.js", "description": " Literal property names with ASI (multiple stacked fields definitions through ASI)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/multiple-stacked-definitions-literal-names.js", "description": " Literal property names (multiple stacked fields definitions through ASI)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/multiple-stacked-definitions-rs-field-identifier-initializer.js", "description": " Valid FieldDefinition (multiple stacked fields definitions through ASI)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/multiple-stacked-definitions-rs-field-identifier.js", "description": " Valid FieldDefinition (multiple stacked fields definitions through ASI)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/multiple-stacked-definitions-string-literal-names.js", "description": " String literal names (multiple stacked fields definitions through ASI)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/nested-derived-cls-direct-eval-contains-superproperty-1.js", "description": " super.x in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of a MethodDefinition.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperProperty.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/nested-derived-cls-direct-eval-contains-superproperty-2.js", "description": " super['x'] in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |The remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Methods\n\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of a MethodDefinition.\n\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperProperty.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/nested-derived-cls-direct-eval-err-contains-supercall-1.js", "description": " error if `super()['x']` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/nested-derived-cls-direct-eval-err-contains-supercall-2.js", "description": " error if `super().x` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/nested-derived-cls-direct-eval-err-contains-supercall.js", "description": " error if `super()` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/nested-derived-cls-indirect-eval-contains-superproperty-1.js", "description": " super.x in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of a MethodDefinition.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperProperty.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/nested-derived-cls-indirect-eval-contains-superproperty-2.js", "description": " super['x'] in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |The remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Methods\n\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of a MethodDefinition.\n\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperProperty.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/nested-derived-cls-indirect-eval-err-contains-supercall-1.js", "description": " error if `super()['x']` in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/nested-derived-cls-indirect-eval-err-contains-supercall-2.js", "description": " error if `super().x` in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/nested-derived-cls-indirect-eval-err-contains-supercall.js", "description": " error if `super()` in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Constructor Methods\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of the constructor method of a ClassDeclaration or ClassExpression.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains SuperCall.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/nested-direct-eval-err-contains-arguments.js", "description": " error if `arguments` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\nIt is a Syntax Error if ContainsArguments of StatementList is true.\n...\n\nStatic Semantics: ContainsArguments\nIdentifierReference : Identifier\n\n1. If the StringValue of Identifier is \"arguments\", return true.\n...\nFor all other grammatical productions, recurse on all nonterminals. If any piece returns true, then return true. Otherwise return false.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/nested-direct-eval-err-contains-newtarget.js", "description": " error if `new.target` in StatementList of eval (direct eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "new.target", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Functions\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of any function.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains NewTarget.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/nested-indirect-eval-contains-arguments.js", "description": " No error if `arguments` in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "class-fields-public"], "flags": ["generated", "noStrict"], "info": " |For indirect eval, the \"Additional Early Error Rules for Eval Inside Initializer\"\n(in #sec-performeval-rules-in-initializer) are NOT applicable.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/nested-indirect-eval-err-contains-newtarget.js", "description": " error if `new.target` in StatementList of eval (indirect eval)", "esid": " sec-performeval-rules-in-initializer", "features": ["class", "new.target", "class-fields-public"], "flags": ["generated"], "info": " |Additional Early Error Rules for Eval Inside Initializer\nThese static semantics are applied by PerformEval when a direct eval call occurs inside a class field initializer.\nScriptBody : StatementList\n\n...\nThe remaining eval rules apply as outside a constructor, inside a method, and inside a function.\n\nAdditional Early Error Rules for Eval Outside Functions\nThese static semantics are applied by PerformEval when a direct eval call occurs outside of any function.\nScriptBody : StatementList\n\nIt is a Syntax Error if StatementList Contains NewTarget.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-no-sc-line-method-computed-names.js", "description": " Computed property names (field definitions followed by a method in a new line without a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-no-sc-line-method-computed-symbol-names.js", "description": " Computed property symbol names (field definitions followed by a method in a new line without a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "Symbol", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-no-sc-line-method-literal-names-asi.js", "description": " Literal property names with ASI (field definitions followed by a method in a new line without a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-no-sc-line-method-literal-names.js", "description": " Literal property names (field definitions followed by a method in a new line without a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-no-sc-line-method-rs-field-identifier-initializer.js", "description": " Valid FieldDefinition (field definitions followed by a method in a new line without a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-no-sc-line-method-rs-field-identifier.js", "description": " Valid FieldDefinition (field definitions followed by a method in a new line without a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-no-sc-line-method-string-literal-names.js", "description": " String literal names (field definitions followed by a method in a new line without a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-sc-line-gen-computed-names.js", "description": " Computed property names (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "class", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-sc-line-gen-computed-symbol-names.js", "description": " Computed property symbol names (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "Symbol", "computed-property-names", "class", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-sc-line-gen-literal-names-asi.js", "description": " Literal property names with ASI (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-sc-line-gen-literal-names.js", "description": " Literal property names (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-sc-line-gen-rs-field-identifier-initializer.js", "description": " Valid FieldDefinition (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-sc-line-gen-rs-field-identifier.js", "description": " Valid FieldDefinition (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-sc-line-gen-string-literal-names.js", "description": " String literal names (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-sc-line-method-computed-names.js", "description": " Computed property names (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-sc-line-method-computed-symbol-names.js", "description": " Computed property symbol names (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "Symbol", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-sc-line-method-literal-names-asi.js", "description": " Literal property names with ASI (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-sc-line-method-literal-names.js", "description": " Literal property names (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-sc-line-method-rs-field-identifier-initializer.js", "description": " Valid FieldDefinition (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-sc-line-method-rs-field-identifier.js", "description": " Valid FieldDefinition (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/new-sc-line-method-string-literal-names.js", "description": " String literal names (field definitions followed by a method in a new line with a semicolon)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/privatename-not-valid-eval-earlyerr-3.js", "esid": " sec-scripts-static-semantics-early-errors", "description": " Early error when referencing privatename that has not been declared in class.", "info": " |Static Semantics: Early Errors\nScriptBody : StatementList\n\nIt is a Syntax Error if AllPrivateNamesValid of StatementList with an empty List as an argument is false unless the source code is eval code that is being processed by a direct eval.\n\n", "features": ["class", "class-fields-private", "class-fields-public"]}, {"path": "./test262-main/test/language/statements/class/elements/public-class-field-initialization-is-visible-to-proxy.js", "description": " Public class field initialization calls [[DefineOwnProperty]] and can be observed by Proxies", "esid": " sec-define-field", "info": " |DefineField(receiver, fieldRecord)\n...\n8. If fieldName is a Private Name,\na. Perform ? PrivateFieldAdd(fieldName, receiver, initValue).\n9. Else,\na. Assert: IsPropertyKey(fieldName) is true.\nb. Perform ? CreateDataPropertyOrThrow(receiver, fieldName, initValue).\n10. Return.\n", "features": ["class", "class-fields-public"]}, {"path": "./test262-main/test/language/statements/class/elements/public-class-field-initialization-on-super-class-with-setter.js", "description": " Public class field initialization calls [[DefineOwnProperty]] and don't execute super's getter", "esid": " sec-define-field", "info": " |DefineField(receiver, fieldRecord)\n...\n8. If fieldName is a Private Name,\na. Perform ? PrivateFieldAdd(fieldName, receiver, initValue).\n9. Else,\na. Assert: IsPropertyKey(fieldName) is true.\nb. Perform ? CreateDataPropertyOrThrow(receiver, fieldName, initValue).\n10. Return.\n", "includes": ["propertyHelper.js"], "features": ["class", "class-fields-public"]}, {"path": "./test262-main/test/language/statements/class/elements/redeclaration-symbol.js", "description": " Redeclaration of public fields with the same name (field definitions in a class declaration)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js", "compareArray.js"], "info": " |2.13.2 Runtime Semantics: ClassDefinitionEvaluation\n\n...\n30. Set the value of F's [[Fields]] internal slot to fieldRecords.\n...\n\n2.14 [[Construct]] ( argumentsList, newTarget)\n\n...\n8. If kind is \"base\", then\n...\nb. Let result be InitializeInstanceFields(thisArgument, F).\n...\n\n2.9 InitializeInstanceFields ( O, constructor )\n\n3. Let fieldRecords be the value of constructor's [[Fields]] internal slot.\n4. For each item fieldRecord in order from fieldRecords,\na. If fieldRecord.[[static]] is false, then\ni. Perform ? DefineField(O, fieldRecord).\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/redeclaration.js", "description": " Redeclaration of public fields with the same name (field definitions in a class declaration)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js", "compareArray.js"], "info": " |2.13.2 Runtime Semantics: ClassDefinitionEvaluation\n\n...\n30. Set the value of F's [[Fields]] internal slot to fieldRecords.\n...\n\n2.14 [[Construct]] ( argumentsList, newTarget)\n\n...\n8. If kind is \"base\", then\n...\nb. Let result be InitializeInstanceFields(thisArgument, F).\n...\n\n2.9 InitializeInstanceFields ( O, constructor )\n\n3. Let fieldRecords be the value of constructor's [[Fields]] internal slot.\n4. For each item fieldRecord in order from fieldRecords,\na. If fieldRecord.[[static]] is false, then\ni. Perform ? DefineField(O, fieldRecord).\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/regular-definitions-computed-names.js", "description": " Computed property names (regular fields defintion)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/regular-definitions-computed-symbol-names.js", "description": " Computed property symbol names (regular fields defintion)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "Symbol", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/regular-definitions-literal-names-asi.js", "description": " Literal property names with ASI (regular fields defintion)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/regular-definitions-literal-names.js", "description": " Literal property names (regular fields defintion)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/regular-definitions-rs-field-identifier-initializer.js", "description": " Valid FieldDefinition (regular fields defintion)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/regular-definitions-rs-field-identifier.js", "description": " Valid FieldDefinition (regular fields defintion)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/regular-definitions-string-literal-names.js", "description": " String literal names (regular fields defintion)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-gen-computed-names.js", "description": " Computed property names (field definitions followed by a generator method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "class", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-gen-computed-symbol-names.js", "description": " Computed property symbol names (field definitions followed by a generator method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "Symbol", "computed-property-names", "class", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-gen-literal-names-asi.js", "description": " Literal property names with ASI (field definitions followed by a generator method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-gen-literal-names.js", "description": " Literal property names (field definitions followed by a generator method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-gen-rs-field-identifier-initializer.js", "description": " Valid FieldDefinition (field definitions followed by a generator method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-gen-rs-field-identifier.js", "description": " Valid FieldDefinition (field definitions followed by a generator method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-gen-string-literal-names.js", "description": " String literal names (field definitions followed by a generator method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class", "generators"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-method-computed-names.js", "description": " Computed property names (field definitions followed by a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-method-computed-symbol-names.js", "description": " Computed property symbol names (field definitions followed by a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "Symbol", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-method-literal-names-asi.js", "description": " Literal property names with ASI (field definitions followed by a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-method-literal-names.js", "description": " Literal property names (field definitions followed by a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-method-rs-field-identifier-initializer.js", "description": " Valid FieldDefinition (field definitions followed by a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-method-rs-field-identifier.js", "description": " Valid FieldDefinition (field definitions followed by a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/same-line-method-string-literal-names.js", "description": " String literal names (field definitions followed by a method in the same line)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/static-as-valid-instance-field-assigned.js", "description": " static is a valid name of an instance field (field definitions in a class declaration)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/static-as-valid-instance-field.js", "description": " static is a valid name of an instance field (field definitions in a class declaration)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/static-as-valid-static-field-assigned.js", "description": " static is a valid name of a static field (field definitions in a class declaration)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nstatic FieldDefinition ;\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/static-as-valid-static-field.js", "description": " static is a valid name of a static field (field definitions in a class declaration)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nstatic FieldDefinition ;\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/static-field-declaration.js", "description": " Static fields are defined using DefineField (field definitions in a class declaration)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |Updated Productions\n\nClassElement :\n...\nstatic FieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\nStringLiteral\nNumericLiteral\n\nClassDefinitionEvaluation:\n...\n\n27. Let staticFields be a new empty List.\n28. For each ClassElement e in order from elements,\na. If IsStatic of e is false, then\n...\nb. Else,\ni. Let field be the result of performing PropertyDefinitionEvaluation for mClassElementEvaluation for e with arguments F and false.\nc. If field is an abrupt completion, then\n...\nd. If field is not empty,\ni. If IsStatic of e is false, append field to instanceFields.\nii. Otherwise, append field to staticFields.\n\n34. For each item fieldRecord in order from staticFields,\na. Perform ? DefineField(F, field).\n...\n\nDefineField(receiver, fieldRecord)\n1. Assert: Type(receiver) is Object.\n2. Assert: fieldRecord is a Record as created by ClassFieldDefinitionEvaluation.\n3. Let name be fieldRecord.[[Name]].\n4. Let initializer be fieldRecord.[[Initializer]].\n5. If initializer is not empty, then\na. Let initValue be ? Call(initializer, receiver).\n6. Else, let initValue be undefined.\n7. If fieldRecord.[[IsAnonymousFunctionDefinition]] is true, then\na. Let hasNameProperty be ? HasOwnProperty(initValue, \"name\").\nb. If hasNameProperty is false, perform SetFunctionName(initValue, fieldName).\n8. If fieldName is a Private Name,\na. Perform ? PrivateFieldAdd(fieldName, receiver, initValue).\n9. Else,\na. Assert: IsPropertyKey(fieldName) is true.\nb. Perform ? CreateDataPropertyOrThrow(receiver, fieldName, initValue).\n10. Return.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/static-field-init-this-inside-arrow-function.js", "description": " this in static field initializers refers to class constructor (field definitions in a class declaration)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-public", "class"], "flags": ["generated"], "info": " |Updated Productions\n\nClassElement :\n...\nstatic FieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassDefinitionEvaluation:\n...\n\n27. Let staticFields be a new empty List.\n28. For each ClassElement e in order from elements,\na. If IsStatic of e is false, then\n...\nb. Else,\ni. Let field be the result of performing PropertyDefinitionEvaluation for m ClassElementEvaluation for e with arguments F and false.\nc. If field is an abrupt completion, then\n...\nd. If field is not empty,\ni. If IsStatic of e is false, append field to instanceFields.\nii. Otherwise, append field to staticFields.\n\n34. For each item fieldRecord in order from staticFields,\na. Perform ? DefineField(F, field).\n...\n\nDefineField(receiver, fieldRecord)\n1. Assert: Type(receiver) is Object.\n2. Assert: fieldRecord is a Record as created by ClassFieldDefinitionEvaluation.\n3. Let name be fieldRecord.[[Name]].\n4. Let initializer be fieldRecord.[[Initializer]].\n5. If initializer is not empty, then\na. Let initValue be ? Call(initializer, receiver).\n6. Else, let initValue be undefined.\n7. If fieldRecord.[[IsAnonymousFunctionDefinition]] is true, then\na. Let hasNameProperty be ? HasOwnProperty(initValue, \"name\").\nb. If hasNameProperty is false, perform SetFunctionName(initValue, fieldName).\n8. If fieldName is a Private Name,\na. Perform ? PrivateFieldAdd(fieldName, receiver, initValue).\n9. Else,\na. Assert: IsPropertyKey(fieldName) is true.\nb. Perform ? CreateDataPropertyOrThrow(receiver, fieldName, initValue).\n10. Return.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/static-field-init-with-this.js", "description": " Static fields initializer has `this` biding (field definitions in a class declaration)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-public", "class"], "flags": ["generated"], "info": " |Updated Productions\n\nClassElement :\n...\nstatic FieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassDefinitionEvaluation:\n...\n\n27. Let staticFields be a new empty List.\n28. For each ClassElement e in order from elements,\na. If IsStatic of e is false, then\n...\nb. Else,\ni. Let field be the result of performing PropertyDefinitionEvaluation for m ClassElementEvaluation for e with arguments F and false.\nc. If field is an abrupt completion, then\n...\nd. If field is not empty,\ni. If IsStatic of e is false, append field to instanceFields.\nii. Otherwise, append field to staticFields.\n\n34. For each item fieldRecord in order from staticFields,\na. Perform ? DefineField(F, field).\n...\n\nDefineField(receiver, fieldRecord)\n1. Assert: Type(receiver) is Object.\n2. Assert: fieldRecord is a Record as created by ClassFieldDefinitionEvaluation.\n3. Let name be fieldRecord.[[Name]].\n4. Let initializer be fieldRecord.[[Initializer]].\n5. If initializer is not empty, then\na. Let initValue be ? Call(initializer, receiver).\n6. Else, let initValue be undefined.\n7. If fieldRecord.[[IsAnonymousFunctionDefinition]] is true, then\na. Let hasNameProperty be ? HasOwnProperty(initValue, \"name\").\nb. If hasNameProperty is false, perform SetFunctionName(initValue, fieldName).\n8. If fieldName is a Private Name,\na. Perform ? PrivateFieldAdd(fieldName, receiver, initValue).\n9. Else,\na. Assert: IsPropertyKey(fieldName) is true.\nb. Perform ? CreateDataPropertyOrThrow(receiver, fieldName, initValue).\n10. Return.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/static-field-initializer-error.js", "description": " Class evaluation is incomplete when initializer resutls in an abrupt completition", "esid": " sec-define-field", "info": " |ClassDefinitionEvaluation:\n...\n\n27. Let staticFields be a new empty List.\n28. For each ClassElement e in order from elements,\na. If IsStatic of e is false, then\n...\nb. Else,\ni. Let field be the result of performing PropertyDefinitionEvaluation for m ClassElementEvaluation for e with arguments F and false.\nc. If field is an abrupt completion, then\n...\nd. If field is not empty,\ni. If IsStatic of e is false, append field to instanceFields.\nii. Otherwise, append field to staticFields.\n\n34. For each item fieldRecord in order from staticFields,\na. Perform ? DefineField(F, field).\n...\n\nDefineField(receiver, fieldRecord)\n1. Assert: Type(receiver) is Object.\n2. Assert: fieldRecord is a Record as created by ClassFieldDefinitionEvaluation.\n3. Let name be fieldRecord.[[Name]].\n4. Let initializer be fieldRecord.[[Initializer]].\n5. If initializer is not empty, then\na. Let initValue be ? Call(initializer, receiver).\n6. Else, let initValue be undefined.\n7. If fieldRecord.[[IsAnonymousFunctionDefinition]] is true, then\na. Let hasNameProperty be ? HasOwnProperty(initValue, \"name\").\nb. If hasNameProperty is false, perform SetFunctionName(initValue, fieldName).\n8. If fieldName is a Private Name,\na. Perform ? PrivateFieldAdd(fieldName, receiver, initValue).\n9. Else,\na. Assert: IsPropertyKey(fieldName) is true.\nb. Perform ? CreateDataPropertyOrThrow(receiver, fieldName, initValue).\n10. Return.\n", "features": ["class-static-fields-public", "class"]}, {"path": "./test262-main/test/language/statements/class/elements/static-field-redeclaration.js", "description": " Static fields can be redeclared (field definitions in a class declaration)", "esid": " prod-FieldDefinition", "features": ["class-static-fields-public", "class"], "flags": ["generated"], "info": " |Updated Productions\n\nClassElement :\n...\nstatic FieldDefinition ;\n\nFieldDefinition :\nClassElementName Initializer_opt\n\nClassDefinitionEvaluation:\n...\n\n27. Let staticFields be a new empty List.\n28. For each ClassElement e in order from elements,\na. If IsStatic of e is false, then\n...\nb. Else,\ni. Let field be the result of performing PropertyDefinitionEvaluation for m ClassElementEvaluation for e with arguments F and false.\nc. If field is an abrupt completion, then\n...\nd. If field is not empty,\ni. If IsStatic of e is false, append field to instanceFields.\nii. Otherwise, append field to staticFields.\n\n34. For each item fieldRecord in order from staticFields,\na. Perform ? DefineField(F, field).\n...\n\nDefineField(receiver, fieldRecord)\n1. Assert: Type(receiver) is Object.\n2. Assert: fieldRecord is a Record as created by ClassFieldDefinitionEvaluation.\n3. Let name be fieldRecord.[[Name]].\n4. Let initializer be fieldRecord.[[Initializer]].\n5. If initializer is not empty, then\na. Let initValue be ? Call(initializer, receiver).\n6. Else, let initValue be undefined.\n7. If fieldRecord.[[IsAnonymousFunctionDefinition]] is true, then\na. Let hasNameProperty be ? HasOwnProperty(initValue, \"name\").\nb. If hasNameProperty is false, perform SetFunctionName(initValue, fieldName).\n8. If fieldName is a Private Name,\na. Perform ? PrivateFieldAdd(fieldName, receiver, initValue).\n9. Else,\na. Assert: IsPropertyKey(fieldName) is true.\nb. Perform ? CreateDataPropertyOrThrow(receiver, fieldName, initValue).\n10. Return.\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/static-fielddefinition-initializer-abrupt-completion.js", "description": " Class construction should error if evaluation of static field initializer errors", "esid": " runtime-semantics-class-definition-evaluation", "info": " |Runtime Semantics: ClassDefinitionEvaluation\n...\n27. For each ClassElement e in order from elements\na. If IsStatic of e is false, then\ni. Let fields be the result of performing ClassElementEvaluation\nfor e with arguments proto and false.\nb. Else,\ni. Let fields be the result of performing ClassElementEvaluation\nfor e with arguments F and false.\nc. If fields is an abrupt completion, then\ni. Set the running execution context's LexicalEnvironment to lex.\nii. Set the running execution context's PrivateNameEnvironment to outerPrivateEnvironment.\niii. Return Completion(status).\n\n", "features": ["class-static-fields-public"]}, {"path": "./test262-main/test/language/statements/class/elements/super-access-from-arrow-func-on-field.js", "description": " super inside arrow functions on field initializer resolves to class' super (field definitions in a class declaration)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class-static-fields-public", "class"], "flags": ["generated"], "info": " |ClassElementName :\nPropertyName\nPrivateName\n\nSuperProperty:\nsuper[Expression]\nsuper.IdentifierName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/super-fielddefinition-initializer-abrupt-completion.js", "description": " Class construction should error if evaluation of field initializer in super errors", "esid": " sec-super-keyword-runtime-semantics-evaluation", "info": " |Runtime Semantics: Evaluation\nSuperCall : superArguments\n1. Let newTarget be GetNewTarget().\n2. If newTarget is undefined, throw a ReferenceError exception.\n3. Let func be ? GetSuperConstructor().\n4. Let argList be ArgumentListEvaluation of Arguments.\n5. ReturnIfAbrupt(argList).\n6. Let result be ? Construct(func, argList, newTarget).\n7. Let thisER be GetThisEnvironment( ).\n8. Let F be thisER.[[FunctionObject]].\n9. Assert: F is an ECMAScript function object.\n10. Perform ? InitializeInstanceFields(result, F).\n\nInitializeInstanceFields ( O, constructor )\n1. Assert: Type ( O ) is Object.\n2. Assert: Assert constructor is an ECMAScript function object.\n3. Let fieldRecords be the value of constructor's [[Fields]] internal slot.\n4. For each item fieldRecord in order from fieldRecords,\na. If fieldRecord.[[static]] is false, then\ni. Perform ? DefineField(O, fieldRecord).\n\nDefineField(receiver, fieldRecord)\n1. Assert: Type(receiver) is Object.\n2. Assert: fieldRecord is a Record as created by ClassFieldDefinitionEvaluation.\n3. Let fieldName be fieldRecord.[[Name]].\n4. Let initializer be fieldRecord.[[Initializer]].\n5. If initializer is not empty, then\na.Let initValue be ? Call(initializer, receiver).\n\n", "features": ["class", "class-fields-public"]}, {"path": "./test262-main/test/language/statements/class/elements/syntax/valid/grammar-field-classelementname-initializer-alt.js", "description": " FieldDefinition, ClassElementName, PropertyName = Initializer Syntax (class declaration)", "esid": " prod-ClassElement", "features": ["class-fields-public", "class"], "flags": ["generated"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nInitializer :\n= AssignmentExpression\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart ::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart ::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue ::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/syntax/valid/grammar-field-classelementname-initializer.js", "description": " FieldDefinition, ClassElementName, PropertyName = Initializer Syntax (class declaration)", "esid": " prod-ClassElement", "features": ["class-fields-public", "class"], "flags": ["generated"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nInitializer :\n= AssignmentExpression\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart ::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart ::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue ::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/syntax/valid/grammar-field-identifier-alt.js", "description": " Valid FieldDefinition, ClassElementName, PropertyName Syntax (class declaration)", "esid": " prod-ClassElement", "features": ["class-fields-public", "class"], "flags": ["generated"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\nStringLiteral\nNumericLiteral\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart ::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart ::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue ::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/syntax/valid/grammar-field-identifier.js", "description": " Valid FieldDefinition, ClassElementName, PropertyName Syntax (class declaration)", "esid": " prod-ClassElement", "features": ["class-fields-public", "class"], "flags": ["generated"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\nStringLiteral\nNumericLiteral\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart ::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart ::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue ::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/syntax/valid/grammar-fields-multi-line.js", "description": " Valid multi-line, multi-field (class declaration)", "esid": " prod-ClassElement", "features": ["class-fields-public", "class"], "flags": ["generated"], "info": " |ClassElement :\nMethodDefinition\nstatic MethodDefinition\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\nPrivateName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/wrapped-in-sc-computed-names.js", "description": " Computed property names (fields definition wrapped in semicolons)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/wrapped-in-sc-computed-symbol-names.js", "description": " Computed property symbol names (fields definition wrapped in semicolons)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "Symbol", "computed-property-names", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/wrapped-in-sc-literal-names-asi.js", "description": " Literal property names with ASI (fields definition wrapped in semicolons)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/wrapped-in-sc-literal-names.js", "description": " Literal property names (fields definition wrapped in semicolons)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/wrapped-in-sc-rs-field-identifier-initializer.js", "description": " Valid FieldDefinition (fields definition wrapped in semicolons)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/wrapped-in-sc-rs-field-identifier.js", "description": " Valid FieldDefinition (fields definition wrapped in semicolons)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "info": " |ClassElement :\n...\nFieldDefinition ;\n;\n\nFieldDefinition :\nClassElementName Initializer _opt\n\nClassElementName :\nPropertyName\n\nPropertyName :\nLiteralPropertyName\nComputedPropertyName\n\nLiteralPropertyName :\nIdentifierName\n\nIdentifierName ::\nIdentifierStart\nIdentifierName IdentifierPart\n\nIdentifierStart ::\nUnicodeIDStart\n$\n_\n\\ UnicodeEscapeSequence\n\nIdentifierPart::\nUnicodeIDContinue\n$\n\\ UnicodeEscapeSequence\n<ZWNJ> <ZWJ>\n\nUnicodeIDStart::\nany Unicode code point with the Unicode property \"ID_Start\"\n\nUnicodeIDContinue::\nany Unicode code point with the Unicode property \"ID_Continue\"\n\n\nNOTE 3\nThe sets of code points with Unicode properties \"ID_Start\" and\n\"ID_Continue\" include, respectively, the code points with Unicode\nproperties \"Other_ID_Start\" and \"Other_ID_Continue\".\n\n"}, {"path": "./test262-main/test/language/statements/class/elements/wrapped-in-sc-string-literal-names.js", "description": " String literal names (fields definition wrapped in semicolons)", "esid": " prod-FieldDefinition", "features": ["class-fields-public", "class"], "flags": ["generated"], "includes": ["propertyHelper.js"], "info": " |ClassElement:\n...\nFieldDefinition ;\n\nFieldDefinition:\nClassElementName Initializer_opt\n\nClassElementName:\nPropertyName\n\n"}, {"path": "./test262-main/test/language/statements/class/static-classelementname-abrupt-completion.js", "description": " Class definition should error if evaluation of static ClassElementName errors", "esid": " runtime-semantics-class-definition-evaluation", "info": " |Runtime Semantics: ClassDefinitionEvaluation\n...\n27. For each ClassElement e in order from elements\na. If IsStatic of e is false, then\ni. Let fields be the result of performing ClassElementEvaluation\nfor e with arguments proto and false.\nb. Else,\ni. Let fields be the result of performing ClassElementEvaluation\nfor e with arguments F and false.\nc. If fields is an abrupt completion, then\ni. Set the running execution context's LexicalEnvironment to lex.\nii. Set the running execution context's PrivateNameEnvironment to outerPrivateEnvironment.\niii. Return Completion(status).\n\n", "features": ["class-static-fields-public"]}, {"path": "./test262-main/test/language/statements/function/eval-var-scope-syntax-err.js", "description": " sloppy direct eval in params introduces var (function declaration in sloppy code)", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["default-parameters"], "flags": ["generated", "noStrict"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n\nRuntime Semantics: IteratorBindingInitialization\nFormalParameter : BindingElement\n\n1. Return the result of performing IteratorBindingInitialization for BindingElement with arguments iteratorRecord and environment.\n\n"}, {"path": "./test262-main/test/language/statements/function/scope-param-rest-elem-var-close.js", "esid": " sec-functiondeclarationinstantiation", "description": " >sloppy direct evals in params introduce vars\n", "info": " |[...]\n20. Else,\na. NOTE: A separate Environment Record is needed to ensure that bindings created by direct eval calls in the formal parameter list are outside the environment where parameters are declared.\nb. Let calleeEnv be the LexicalEnvironment of calleeContext.\nc. Let env be NewDeclarativeEnvironment(calleeEnv).\nd. Let envRec be env's EnvironmentRecord.\n[...]\n", "flags": ["noStrict"]}, {"path": "./test262-main/test/language/statements/function/scope-param-rest-elem-var-open.js", "esid": " sec-functiondeclarationinstantiation", "description": " >sloppy direct evals in params introduce vars\n", "info": " |[...]\n20. Else,\na. NOTE: A separate Environment Record is needed to ensure that bindings created by direct eval calls in the formal parameter list are outside the environment where parameters are declared.\nb. Let calleeEnv be the LexicalEnvironment of calleeContext.\nc. Let env be NewDeclarativeEnvironment(calleeEnv).\nd. Let envRec be env's EnvironmentRecord.\n[...]\n", "flags": ["noStrict"]}, {"path": "./test262-main/test/language/statements/generators/eval-var-scope-syntax-err.js", "description": " sloppy direct eval in params introduces var (generator function declaration in sloppy code)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["default-parameters", "generators"], "flags": ["generated", "noStrict"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n\n\nRuntime Semantics: IteratorBindingInitialization\nFormalParameter : BindingElement\n\n1. Return the result of performing IteratorBindingInitialization for BindingElement with arguments iteratorRecord and environment.\n\n"}, {"path": "./test262-main/test/language/statements/generators/scope-param-rest-elem-var-close.js", "esid": " sec-functiondeclarationinstantiation", "description": " >sloppy direct evals in params introduce vars\n", "info": " |[...]\n20. Else,\na. NOTE: A separate Environment Record is needed to ensure that bindings created by direct eval calls in the formal parameter list are outside the environment where parameters are declared.\nb. Let calleeEnv be the LexicalEnvironment of calleeContext.\nc. Let env be NewDeclarativeEnvironment(calleeEnv).\nd. Let envRec be env's EnvironmentRecord.\n[...]\n", "flags": ["noStrict"], "features": ["generators"]}, {"path": "./test262-main/test/language/statements/generators/scope-param-rest-elem-var-open.js", "esid": " sec-functiondeclarationinstantiation", "description": " >sloppy direct evals in params introduce vars\n", "info": " |[...]\n20. Else,\na. NOTE: A separate Environment Record is needed to ensure that bindings created by direct eval calls in the formal parameter list are outside the environment where parameters are declared.\nb. Let calleeEnv be the LexicalEnvironment of calleeContext.\nc. Let env be NewDeclarativeEnvironment(calleeEnv).\nd. Let envRec be env's EnvironmentRecord.\n[...]\n", "flags": ["noStrict"], "features": ["generators"]}]