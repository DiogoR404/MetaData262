[{"path": "./test262-main/test/built-ins/Array/from/Array.from-descriptor.js", "description": " Testing descriptor property of Array.from", "includes": [""], "esid": " sec-array.from"}, {"path": "./test262-main/test/built-ins/Array/from/Array.from-name.js", "esid": " sec-array.from", "description": " '`name` property'", "info": " |ES6 Section 17:\n\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value is a\nString. Unless otherwise specified, this value is the name that is given to\nthe function in this specification.\n\n[...]\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/from/Array.from_arity.js", "esid": " sec-array.from", "description": " >The length property of the Array.from method is 1.\n", "info": " |22.1.2.1 Array.from ( items [ , mapfn [ , thisArg ] ] )\n\n...\n\nThe length property of the from method is 1.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/from/Array.from_forwards-length-for-array-likes.js", "esid": " sec-array.from", "description": " >If this is a constructor, and items doesn't have an @@iterator,\nreturns a new instance of this\n", "info": " |22.1.2.1 Array.from ( items [ , mapfn [ , thisArg ] ] )\n\n4. Let usingIterator be GetMethod(items, @@iterator).\n...\n6. If usingIterator is not undefined, then\n...\n12. If IsConstructor(C) is true, then\na. Let A be Construct(C, \u00ablen\u00bb).\n13. Else,\na. Let A be ArrayCreate(len).\n...\n19. Return A.\n"}, {"path": "./test262-main/test/built-ins/Array/from/calling-from-valid-1-noStrict.js", "esid": " sec-array.from", "description": " Map function without thisArg on non strict mode", "info": " |22.1.2.1 Array.from ( items [ , mapfn [ , thisArg ] ] )\n\n...\n10. Let len be ToLength(Get(arrayLike, \"length\")).\n11. ReturnIfAbrupt(len).\n12. If IsConstructor(C) is true, then\na. Let A be Construct(C, \u00ablen\u00bb).\n13. Else,\nb. Let A be ArrayCreate(len).\n14. ReturnIfAbrupt(A).\n15. Let k be 0.\n16. Repeat, while k < len\na. Let Pk be ToString(k).\nb. Let kValue be Get(arrayLike, Pk).\nc. ReturnIfAbrupt(kValue).\nd. If mapping is true, then\ni. Let mappedValue be Call(mapfn, T, \u00abkValue, k\u00bb).\n...\n", "flags": ["noStrict"]}, {"path": "./test262-main/test/built-ins/Array/from/calling-from-valid-1-onlyStrict.js", "esid": " sec-array.from", "description": " Map function without thisArg on strict mode", "info": " |22.1.2.1 Array.from ( items [ , mapfn [ , thisArg ] ] )\n\n...\n10. Let len be ToLength(Get(arrayLike, \"length\")).\n11. ReturnIfAbrupt(len).\n12. If IsConstructor(C) is true, then\na. Let A be Construct(C, \u00ablen\u00bb).\n13. Else,\nb. Let A be ArrayCreate(len).\n14. ReturnIfAbrupt(A).\n15. Let k be 0.\n16. Repeat, while k < len\na. Let Pk be ToString(k).\nb. Let kValue be Get(arrayLike, Pk).\nc. ReturnIfAbrupt(kValue).\nd. If mapping is true, then\ni. Let mappedValue be Call(mapfn, T, \u00abkValue, k\u00bb).\n...\n", "flags": ["onlyStrict"]}, {"path": "./test262-main/test/built-ins/Array/from/calling-from-valid-2.js", "esid": " sec-array.from", "description": " Calling from with a valid map function with thisArg", "info": " |22.1.2.1 Array.from ( items [ , mapfn [ , thisArg ] ] )\n\n...\n10. Let len be ToLength(Get(arrayLike, \"length\")).\n11. ReturnIfAbrupt(len).\n12. If IsConstructor(C) is true, then\na. Let A be Construct(C, \u00ablen\u00bb).\n13. Else,\nb. Let A be ArrayCreate(len).\n14. ReturnIfAbrupt(A).\n15. Let k be 0.\n16. Repeat, while k < len\na. Let Pk be ToString(k).\nb. Let kValue be Get(arrayLike, Pk).\nc. ReturnIfAbrupt(kValue).\nd. If mapping is true, then\ni. Let mappedValue be Call(mapfn, T, \u00abkValue, k\u00bb).\n...\n"}, {"path": "./test262-main/test/built-ins/Array/from/elements-added-after.js", "description": " Elements added after the call to from", "esid": " sec-array.from"}, {"path": "./test262-main/test/built-ins/Array/from/elements-deleted-after.js", "description": " >Elements deleted after the call started and before visited are not\nvisited\n", "esid": " sec-array.from"}, {"path": "./test262-main/test/built-ins/Array/from/elements-updated-after.js", "description": " Elements are updated after the call to from", "esid": " sec-array.from"}, {"path": "./test262-main/test/built-ins/Array/from/from-array.js", "description": " Passing a valid array", "esid": " sec-array.from"}, {"path": "./test262-main/test/built-ins/Array/from/from-string.js", "esid": " sec-array.from", "description": " Testing Array.from when passed a String", "author": " Hank Yates (hankyates@gmail.com)"}, {"path": "./test262-main/test/built-ins/Array/from/get-iter-method-err.js", "esid": " sec-array.from", "description": " Error accessing items' `Symbol.iterator` attribute", "info": " |[...]\n4. Let usingIterator be GetMethod(items, @@iterator).\n5. ReturnIfAbrupt(usingIterator).\n", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/built-ins/Array/from/items-is-arraybuffer.js", "esid": " sec-array.from", "description": " Return empty array if items argument is an ArrayBuffer", "info": " |22.1.2.1 Array.from ( items [ , mapfn [ , thisArg ] ] )\n\n...\n4. Let usingIterator be GetMethod(items, @@iterator).\n5. ReturnIfAbrupt(usingIterator).\n...\n"}, {"path": "./test262-main/test/built-ins/Array/from/iter-adv-err.js", "esid": " sec-array.from", "description": " Error advancing iterator", "info": " |[...]\n6. If usingIterator is not undefined, then\n[...]\ng. Repeat\ni. Let Pk be ToString(k).\nii. Let next be IteratorStep(iterator).\niii. ReturnIfAbrupt(next).\n", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/built-ins/Array/from/iter-cstm-ctor-err.js", "esid": " sec-array.from", "description": " >Error creating object with custom constructor (traversed via iterator)\n", "info": " |[...]\n6. If usingIterator is not undefined, then\na. If IsConstructor(C) is true, then\ni. Let A be Construct(C).\nb. Else,\ni. Let A be ArrayCreate(0).\nc. ReturnIfAbrupt(A).\n", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/built-ins/Array/from/iter-cstm-ctor.js", "esid": " sec-array.from", "description": " Creating object with custom constructor (traversed via iterator)", "info": " |[...]\n6. If usingIterator is not undefined, then\na. If IsConstructor(C) is true, then\ni. Let A be Construct(C).\nb. Else,\ni. Let A be ArrayCreate(0).\nc. ReturnIfAbrupt(A).\n", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/built-ins/Array/from/iter-get-iter-err.js", "esid": " sec-array.from", "description": " Error creating iterator object", "info": " |[...]\n6. If usingIterator is not undefined, then\n[...]\nd. Let iterator be GetIterator(items, usingIterator).\ne. ReturnIfAbrupt(iterator).\n", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/built-ins/Array/from/iter-get-iter-val-err.js", "esid": " sec-array.from", "description": " Error retrieving value of iterator result", "info": " |[...]\n6. If usingIterator is not undefined, then\n[...]\ng. Repeat\n[...]\nv. Let nextValue be IteratorValue(next).\nvi. ReturnIfAbrupt(nextValue).\n", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/built-ins/Array/from/iter-map-fn-args.js", "esid": " sec-array.from", "description": " >Arguments of mapping function (traversed via iterator)\n", "info": " |[...]\n2. If mapfn is undefined, let mapping be false.\n3. else\na. If IsCallable(mapfn) is false, throw a TypeError exception.\nb. If thisArg was supplied, let T be thisArg; else let T be undefined.\nc. Let mapping be true\n[...]\n6. If usingIterator is not undefined, then\n[...]\ng. Repeat\n[...]\nvii. If mapping is true, then\n1. Let mappedValue be Call(mapfn, T, \u00abnextValue, k\u00bb).\n2. If mappedValue is an abrupt completion, return\nIteratorClose(iterator, mappedValue).\n3. Let mappedValue be mappedValue.[[value]].\n", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/built-ins/Array/from/iter-map-fn-return.js", "esid": " sec-array.from", "description": " Value returned by mapping function (traversed via iterator)", "info": " |[...]\n2. If mapfn is undefined, let mapping be false.\n3. else\na. If IsCallable(mapfn) is false, throw a TypeError exception.\nb. If thisArg was supplied, let T be thisArg; else let T be undefined.\nc. Let mapping be true\n[...]\n6. If usingIterator is not undefined, then\n[...]\ng. Repeat\n[...]\nvii. If mapping is true, then\n1. Let mappedValue be Call(mapfn, T, \u00abnextValue, k\u00bb).\n2. If mappedValue is an abrupt completion, return\nIteratorClose(iterator, mappedValue).\n3. Let mappedValue be mappedValue.[[value]].\n", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/built-ins/Array/from/iter-map-fn-this-arg.js", "esid": " sec-array.from", "description": " >`this` value of mapping function with custom `this` argument (traversed via iterator)\n", "info": " |[...]\n2. If mapfn is undefined, let mapping be false.\n3. else\na. If IsCallable(mapfn) is false, throw a TypeError exception.\nb. If thisArg was supplied, let T be thisArg; else let T be undefined.\nc. Let mapping be true\n[...]\n6. If usingIterator is not undefined, then\n[...]\ng. Repeat\n[...]\nvii. If mapping is true, then\n1. Let mappedValue be Call(mapfn, T, \u00abnextValue, k\u00bb).\n", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/built-ins/Array/from/iter-map-fn-this-non-strict.js", "esid": " sec-array.from", "description": " >`this` value of mapping function in non-strict mode (traversed via iterator)\n", "info": " |[...]\n2. If mapfn is undefined, let mapping be false.\n3. else\na. If IsCallable(mapfn) is false, throw a TypeError exception.\nb. If thisArg was supplied, let T be thisArg; else let T be undefined.\nc. Let mapping be true\n[...]\n6. If usingIterator is not undefined, then\n[...]\ng. Repeat\n[...]\nvii. If mapping is true, then\n1. Let mappedValue be Call(mapfn, T, \u00abnextValue, k\u00bb).\n", "features": ["Symbol.iterator"], "flags": ["noStrict"]}, {"path": "./test262-main/test/built-ins/Array/from/iter-map-fn-this-strict.js", "esid": " sec-array.from", "description": " >`this` value of mapping function in strict mode (traversed via iterator)\n", "info": " |[...]\n2. If mapfn is undefined, let mapping be false.\n3. else\na. If IsCallable(mapfn) is false, throw a TypeError exception.\nb. If thisArg was supplied, let T be thisArg; else let T be undefined.\nc. Let mapping be true\n[...]\n6. If usingIterator is not undefined, then\n[...]\ng. Repeat\n[...]\nvii. If mapping is true, then\n1. Let mappedValue be Call(mapfn, T, \u00abnextValue, k\u00bb).\n", "features": ["Symbol.iterator"], "flags": ["onlyStrict"]}, {"path": "./test262-main/test/built-ins/Array/from/iter-set-elem-prop-non-writable.js", "esid": " sec-array.from", "description": " >Non-writable properties are overwritten by CreateDataProperty.\n(result object's \"0\" is non-writable, items is iterable)\n", "info": " |Array.from ( items [ , mapfn [ , thisArg ] ] )\n\n[...]\n5. If usingIterator is not undefined, then\n[...]\ne. Repeat,\n[...]\nviii. Let defineStatus be CreateDataPropertyOrThrow(A, Pk, mappedValue).\n[...]\n", "features": ["generators"], "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/from/iter-set-elem-prop.js", "esid": " sec-array.from", "description": " Setting property on result value (traversed via iterator)", "info": " |[...]\n6. If usingIterator is not undefined, then\n[...]\ng. Repeat\n[...]\nix. Let defineStatus be CreateDataPropertyOrThrow(A, Pk,\nmappedValue).\n", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/built-ins/Array/from/iter-set-length-err.js", "esid": " sec-array.from", "description": " Error setting length of object (traversed via iterator)", "info": " |[...]\n6. If usingIterator is not undefined, then\n[...]\ng. Repeat\n[...]\niv. If next is false, then\n1. Let setStatus be Set(A, \"length\", k, true).\n2. ReturnIfAbrupt(setStatus).\n", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/built-ins/Array/from/iter-set-length.js", "esid": " sec-array.from", "description": " Setting length of object (traversed via iterator)", "info": " |[...]\n6. If usingIterator is not undefined, then\n[...]\ng. Repeat\n[...]\niv. If next is false, then\n1. Let setStatus be Set(A, \"length\", k, true).\n2. ReturnIfAbrupt(setStatus).\n3. Return A.\n", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/built-ins/Array/from/mapfn-is-symbol-throws.js", "esid": " sec-array.from", "description": " Throws a TypeError if mapFn is not callable (Symbol)", "info": " |22.1.2.1 Array.from ( items [ , mapfn [ , thisArg ] ] )\n\n...\n2. If mapfn is undefined, let mapping be false.\n3. else\na. If IsCallable(mapfn) is false, throw a TypeError exception.\n...\n", "features": [""]}, {"path": "./test262-main/test/built-ins/Array/from/mapfn-throws-exception.js", "description": " mapFn throws an exception", "esid": " 22.1.2.1", "version": 6}, {"path": "./test262-main/test/built-ins/Array/from/source-array-boundary.js", "description": " Source array with boundary values", "esid": " 22.1.2.1", "version": 6}, {"path": "./test262-main/test/built-ins/Array/from/source-object-constructor.js", "description": " >Array.from uses a constructor other than Array.\n", "esid": " 22.1.2.1", "version": 6}, {"path": "./test262-main/test/built-ins/Array/from/source-object-iterator-1.js", "description": " Source object has iterator which throws", "esid": " 22.1.2.1", "version": 6, "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/built-ins/Array/from/source-object-iterator-2.js", "description": " Source object has iterator", "esid": " 22.1.2.1", "version": 6, "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/built-ins/Array/from/source-object-length-set-elem-prop-non-writable.js", "esid": " sec-array.from", "description": " >Non-writable properties are overwritten by CreateDataProperty.\n(result object's \"0\" is non-writable, items is not iterable)\n", "info": " |Array.from ( items [ , mapfn [ , thisArg ] ] )\n\n[...]\n4. Let usingIterator be ? GetMethod(items, @@iterator).\n5. If usingIterator is not undefined, then\n[...]\n6. NOTE: items is not an Iterable so assume it is an array-like object.\n[...]\n12. Repeat, while k < len\n[...]\ne. Perform ? CreateDataPropertyOrThrow(A, Pk, mappedValue).\n[...]\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/from/source-object-length.js", "description": " >Source is an object with length property and one item is deleted\nfrom the source\n", "esid": " 22.1.2.1", "version": 6}, {"path": "./test262-main/test/built-ins/Array/from/source-object-missing.js", "description": " Source is an object with missing values", "esid": " 22.1.2.1", "version": 6}, {"path": "./test262-main/test/built-ins/Array/from/source-object-without.js", "description": " Source is an object without length property", "esid": " 22.1.2.1", "version": 6}, {"path": "./test262-main/test/built-ins/Array/from/this-null.js", "esid": " 22.1.2.1", "version": 6, "description": " Does not throw if this is null"}, {"path": "./test262-main/test/built-ins/Array/isArray/name.js", "esid": " 22.1.2.2", "version": 6, "description": " >Array.isArray.name is \"isArray\".\n", "info": " |Array.isArray ( arg )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/length.js", "esid": " sec-array-constructor", "description": " >Array has a \"length\" property whose value is 1.\n", "info": " |22.1.1 The Array Constructor\n\nThe length property of the Array constructor function is 1.\n...\n\nES7 section 17: Unless otherwise specified, the length property of a built-in\nFunction object has the attributes { [[Writable]]: false, [[Enumerable]]:\nfalse, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/name.js", "esid": " sec-array-constructor", "description": " >The \"name\" property of Array\n", "info": " |17 ECMAScript Standard Built-in Objects\n\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value is a\nString. Unless otherwise specified, this value is the name that is given to\nthe function in this specification.\n\n[...]\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/of/construct-this-with-the-number-of-arguments.js", "esid": " 22.1.2.3", "version": 6, "description": " Passes the number of arguments to the constructor it calls.", "info": " |Array.of ( ...items )\n\n1. Let len be the actual number of arguments passed to this function.\n2. Let items be the List of arguments passed to this function.\n3. Let C be the this value.\n4. If IsConstructor(C) is true, then\na. Let A be Construct(C, \u00ablen\u00bb).\n...\n"}, {"path": "./test262-main/test/built-ins/Array/of/creates-a-new-array-from-arguments.js", "esid": " 22.1.2.3", "version": 6, "description": " >Array.of method creates a new Array with a variable number of arguments.\n", "info": " |22.1.2.3 Array.of ( ...items )\n\n...\n7. Let k be 0.\n8. Repeat, while k < len\na. Let kValue be items[k].\nb. Let Pk be ToString(k).\nc. Let defineStatus be CreateDataPropertyOrThrow(A,Pk, kValue).\nd. ReturnIfAbrupt(defineStatus).\ne. Increase k by 1.\n9. Let setStatus be Set(A, \"length\", len, true).\n10. ReturnIfAbrupt(setStatus).\n11. Return A.\n"}, {"path": "./test262-main/test/built-ins/Array/of/does-not-use-prototype-properties.js", "esid": " 22.1.2.3", "version": 6, "description": " Array.of does not use prototype properties for arguments.", "info": " |It defines elements rather than assigning to them.\n"}, {"path": "./test262-main/test/built-ins/Array/of/does-not-use-set-for-indices.js", "esid": " sec-array.of", "description": " >Non-writable properties are overwritten by CreateDataProperty.\n(result object's \"0\" is non-writable)\n", "info": " |Array.of ( ...items )\n\n[...]\n7. Repeat, while k < len\n[...]\nc. Perform ? CreateDataPropertyOrThrow(A, Pk, kValue).\n[...]\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/of/length.js", "esid": " sec-array.of", "description": " >Array.of.length value and property descriptor\n", "info": " |Array.of ( ...items )\n\nThe length property of the of function is 0.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/of/name.js", "esid": " sec-array.of", "description": " >Array.of.name value and property descriptor\n", "info": " |Array.of ( ...items )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/of/of.js", "esid": " sec-array.of", "description": " >Array.of property descriptor\n", "info": " |Array.of ( ...items )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/of/return-a-custom-instance.js", "esid": " sec-array.of", "description": " >Returns an instance from a custom constructor.\n", "info": " |Array.of ( ...items )\n\n...\n4. If IsConstructor(C) is true, then\na. Let A be Construct(C, \u00ablen\u00bb).\n...\n11. Return A.\n"}, {"path": "./test262-main/test/built-ins/Array/of/return-a-new-array-object.js", "esid": " sec-array.of", "description": " >Returns a new Array.\n", "info": " |Array.of ( ...items )\n\n1. Let len be the actual number of arguments passed to this function.\n2. Let items be the List of arguments passed to this function.\n3. Let C be the this value.\n4. If IsConstructor(C) is true, then\na. Let A be Construct(C, \u00ablen\u00bb).\n5. Else,\nb. Let A be ArrayCreate(len).\n...\n11. Return A.\n"}, {"path": "./test262-main/test/built-ins/Array/of/return-abrupt-from-contructor.js", "esid": " sec-array.of", "description": " >Return abrupt from this' constructor\n", "info": " |Array.of ( ...items )\n\n1. Let len be the actual number of arguments passed to this function.\n2. Let items be the List of arguments passed to this function.\n3. Let C be the this value.\n4. If IsConstructor(C) is true, then\na. Let A be Construct(C, \u00ablen\u00bb).\n5. Else,\nb. Let A be ArrayCreate(len).\n6. ReturnIfAbrupt(A).\n...\n"}, {"path": "./test262-main/test/built-ins/Array/of/return-abrupt-from-data-property-using-proxy.js", "esid": " sec-array.of", "description": " >Return abrupt from Data Property creation\n", "info": " |Array.of ( ...items )\n\n...\n7. Let k be 0.\n8. Repeat, while k < len\na. Let kValue be items[k].\nb. Let Pk be ToString(k).\nc. Let defineStatus be CreateDataPropertyOrThrow(A,Pk, kValue).\nd. ReturnIfAbrupt(defineStatus).\n...\n\n7.3.6 CreateDataPropertyOrThrow (O, P, V)\n\n...\n3. Let success be CreateDataProperty(O, P, V).\n4. ReturnIfAbrupt(success).\n...\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Array/of/return-abrupt-from-setting-length.js", "esid": " sec-array.of", "description": " >Return abrupt from setting the length property.\n", "info": " |Array.of ( ...items )\n\n...\n9. Let setStatus be Set(A, \"length\", len, true).\n10. ReturnIfAbrupt(setStatus).\n...\n"}, {"path": "./test262-main/test/built-ins/Array/of/sets-length.js", "esid": " sec-array.of", "description": " >Calls the length setter if available\n", "info": " |Array.of ( ...items )\n\n...\n9. Let setStatus be Set(A, \"length\", len, true).\n...\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/Symbol.iterator/not-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >Array.prototype[Symbol.iterator] does not implement [[Construct]], is not new-able\n", "info": " |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n", "includes": ["isConstructor.js"], "features": ["Reflect.construct", "Symbol", "Symbol.iterator", "arrow-function"]}, {"path": "./test262-main/test/built-ins/Array/prototype/concat/create-species-null.js", "esid": " sec-array.prototype.concat", "description": " >A null value for the @@species constructor is interpreted as `undefined`\n", "info": " |1. Let O be ? ToObject(this value).\n2. Let A be ? ArraySpeciesCreate(O, 0).\n\n9.4.2.3 ArraySpeciesCreate\n\n[...]\n5. Let C be ? Get(originalArray, \"constructor\").\n[...]\n7. If Type(C) is Object, then\na. Let C be ? Get(C, @@species).\nb. If C is null, let C be undefined.\n8. If C is undefined, return ? ArrayCreate(length).\n", "features": ["Symbol.species"]}, {"path": "./test262-main/test/built-ins/Array/prototype/concat/create-species-undef.js", "esid": " sec-array.prototype.concat", "description": " >An undefined value for the @@species constructor triggers the creationof\nan Array exotic object\n", "info": " |[...]\n9. Let A be ? ArraySpeciesCreate(O, actualDeleteCount).\n[...]\n\n9.4.2.3 ArraySpeciesCreate\n\n[...]\n5. Let C be ? Get(originalArray, \"constructor\").\n[...]\n7. If Type(C) is Object, then\na. Let C be ? Get(C, @@species).\nb. If C is null, let C be undefined.\n8. If C is undefined, return ? ArrayCreate(length).\n", "features": ["Symbol.species"]}, {"path": "./test262-main/test/built-ins/Array/prototype/concat/create-species-with-non-writable-property-spreadable.js", "esid": " sec-array.prototype.concat", "description": " >Non-writable properties are overwritten by CreateDataProperty.\n(result object's \"0\" is non-writable, argument is spreadable)\n", "info": " |Array.prototype.concat ( ...arguments )\n\n[...]\n5. Repeat, while items is not empty\n[...]\nc. If spreadable is true, then\n[...]\niv. Repeat, while k < len\n[...]\n3. If exists is true, then\n[...]\nb. Perform ? CreateDataPropertyOrThrow(A, ! ToString(n), subElement).\n[...]\n", "features": ["Symbol.species"], "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/concat/create-species-with-non-writable-property.js", "esid": " sec-array.prototype.concat", "description": " >Non-writable properties are overwritten by CreateDataProperty.\n(result object's \"0\" is non-writable, argument is not spreadable)\n", "info": " |Array.prototype.concat ( ...arguments )\n\n[...]\n5. Repeat, while items is not empty\n[...]\nc. If spreadable is true, then\n[...]\niv. Repeat, while k < len\n[...]\n3. If exists is true, then\n[...]\nb. Perform ? CreateDataPropertyOrThrow(A, ! ToString(n), subElement).\n[...]\n", "features": ["Symbol.species"], "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/concat/is-concat-spreadable-val-undefined.js", "esid": " sec-array.prototype.concat", "description": " >The `Symbol.isConcatSpreadable` property is defined as the value `undefined`\n", "info": " |1. Let O be ToObject(this value).\n2. ReturnIfAbrupt(O).\n3. Let A be ArraySpeciesCreate(O, 0).\n4. ReturnIfAbrupt(A).\n5. Let n be 0.\n6. Let items be a List whose first element is O and whose subsequent\nelements are, in left to right order, the arguments that were passed to\nthis function invocation.\n7. Repeat, while items is not empty\na. Remove the first element from items and let E be the value of the element.\nb. Let spreadable be IsConcatSpreadable(E).\nc. ReturnIfAbrupt(spreadable).\nd. If spreadable is true, then\n[...]\ne. Else E is added as a single item rather than spread,\n[...]\n\nES6 22.1.3.1.1: Runtime Semantics: IsConcatSpreadable ( O )\n\n1. If Type(O) is not Object, return false.\n2. Let spreadable be Get(O, @@isConcatSpreadable).\n3. ReturnIfAbrupt(spreadable).\n4. If spreadable is not undefined, return ToBoolean(spreadable).\n5. Return IsArray(O).\n", "features": ["Symbol.isConcatSpreadable"]}, {"path": "./test262-main/test/built-ins/Array/prototype/concat/length.js", "esid": " sec-array.prototype.concat", "description": " >The \"length\" property of Array.prototype.concat\n", "info": " |22.1.3.1 Array.prototype.concat ( ...arguments )\n\nThe length property of the concat method is 1.\n\n17 ECMAScript Standard Built-in Objects\n\nEvery built-in function object, including constructors, has a length property\nwhose value is an integer. Unless otherwise specified, this value is equal to\nthe largest number of named arguments shown in the subclause headings for the\nfunction description. Optional parameters (which are indicated with brackets:\n[ ]) or rest parameters (which are shown using the form \u00ab...name\u00bb) are not\nincluded in the default argument count.\n\nUnless otherwise specified, the length property of a built-in function object\nhas the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/concat/name.js", "esid": " sec-array.prototype.concat", "description": " >Array.prototype.concat.name is \"concat\".\n", "info": " |Array.prototype.concat ( ...arguments )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/copyWithin/call-with-boolean.js", "esid": " sec-array.prototype.copyWithin", "description": " Array.prototype.copyWithin applied to boolean primitive"}, {"path": "./test262-main/test/built-ins/Array/prototype/copyWithin/coerced-values-end.js", "esid": " sec-array.prototype.copywithin", "description": " >end argument is coerced to an integer values.\n", "info": " |22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )\n\n...\n11. If end is undefined, let relativeEnd be len; else let relativeEnd be\nToInteger(end).\n...\n", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/copyWithin/coerced-values-start-change-start.js", "esid": " sec-array.prototype.copywithin", "description": " >SECURITY: start argument is coerced to an integer value\nand side effects change the length of the array so that\nthe start is out of bounds\n", "info": " |22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )\n\n...\n8. Let relativeStart be ToInteger(start).\n...\n", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/copyWithin/coerced-values-start-change-target.js", "esid": " sec-array.prototype.copywithin", "description": " >SECURITY: start argument is coerced to an integer value\nand side effects change the length of the array so that\nthe target is out of bounds\n", "info": " |22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )\n\n...\n8. Let relativeStart be ToInteger(start).\n...\n", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/copyWithin/coerced-values-start.js", "esid": " sec-array.prototype.copywithin", "description": " >start argument is coerced to an integer value.\n", "info": " |22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )\n\n...\n8. Let relativeStart be ToInteger(start).\n...\n", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/copyWithin/coerced-values-target.js", "esid": " sec-array.prototype.copywithin", "description": " >target argument is coerced to an integer value.\n", "info": " |22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )\n\n...\n5. Let relativeTarget be ToInteger(target).\n...\n", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/copyWithin/fill-holes.js", "esid": " sec-array.prototype.copywithin", "description": " >Loop from each property, even empty holes.\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/copyWithin/length-near-integer-limit.js", "esid": " sec-array.prototype.copywithin", "description": " >Elements are copied and deleted in an array-like object\nwhose \"length\" property is near the integer limit.\n", "info": " |Array.prototype.copyWithin ( target, start [ , end ] )\n\n1. Let O be ? ToObject(this value).\n2. Let len be ? LengthOfArrayLike(O).\n[...]\n9. Let count be min(final - from, len - to).\n[...]\n12. Repeat, while count > 0\n[...]\nd. If fromPresent is true, then\ni. Let fromVal be ? Get(O, fromKey).\nii. Perform ? Set(O, toKey, fromVal, true).\ne. Else,\ni. Assert: fromPresent is false.\nii. Perform ? DeletePropertyOrThrow(O, toKey).\n[...]\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/copyWithin/length.js", "esid": " sec-array.prototype.copywithin", "description": " Array.prototype.copyWithin.length value and descriptor.", "info": " |22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )\n\nThe length property of the copyWithin method is 2.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/copyWithin/name.js", "esid": " sec-array.prototype.copywithin", "description": " >Array.prototype.copyWithin.name value and descriptor.\n", "info": " |22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/copyWithin/negative-end.js", "esid": " sec-array.prototype.copywithin", "description": " >Set values with negative end argument.\n", "info": " |22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )\n\n...\n11. If end is undefined, let relativeEnd be len; else let relativeEnd be\nToInteger(end).\n12. ReturnIfAbrupt(relativeEnd).\n13. If relativeEnd < 0, let final be max((len + relativeEnd),0); else let\nfinal be min(relativeEnd, len).\n...\n", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/copyWithin/negative-out-of-bounds-end.js", "esid": " sec-array.prototype.copywithin", "description": " >Set values with negative out of bounds end argument.\n", "info": " |22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )\n\n...\n11. If end is undefined, let relativeEnd be len; else let relativeEnd be\nToInteger(end).\n12. ReturnIfAbrupt(relativeEnd).\n13. If relativeEnd < 0, let final be max((len + relativeEnd),0); else let\nfinal be min(relativeEnd, len).\n...\n", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/copyWithin/negative-out-of-bounds-start.js", "esid": " sec-array.prototype.copywithin", "description": " >Set values with out of bounds negative start argument.\n", "info": " |22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )\n\n...\n10. If relativeStart < 0, let from be max((len + relativeStart),0); else let\nfrom be min(relativeStart, len).\n...\n", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/copyWithin/negative-out-of-bounds-target.js", "esid": " sec-array.prototype.copywithin", "description": " >Set values with out of bounds negative target argument.\n", "info": " |22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )\n\n...\n7. If relativeTarget < 0, let to be max((len + relativeTarget),0); else let to\nbe min(relativeTarget, len).\n...\n", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/copyWithin/negative-start.js", "esid": " sec-array.prototype.copywithin", "description": " >Set values with negative start argument.\n", "info": " |22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )\n\n...\n10. If relativeStart < 0, let from be max((len + relativeStart),0); else let\nfrom be min(relativeStart, len).\n...\n", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/copyWithin/negative-target.js", "esid": " sec-array.prototype.copywithin", "description": " >Set values with negative target argument.\n", "info": " |22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )\n\n...\n7. If relativeTarget < 0, let to be max((len + relativeTarget),0); else let to\nbe min(relativeTarget, len).\n...\n", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/copyWithin/non-negative-out-of-bounds-end.js", "esid": " sec-array.prototype.copywithin", "description": " >Max value of end position is the this.length.\n", "info": " |22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )\n\n...\n7. If relativeTarget < 0, let to be max((len + relativeTarget),0); else let to\nbe min(relativeTarget, len).\n...\n10. If relativeStart < 0, let from be max((len + relativeStart),0); else let\nfrom be min(relativeStart, len).\n11. If end is undefined, let relativeEnd be len; else let relativeEnd be\nToInteger(end).\n...\n14. Let count be min(final-from, len-to).\n15. If from<to and to<from+count\na. Let direction be -1.\nb. Let from be from + count -1.\nc. Let to be to + count -1.\n16. Else,\na. Let direction = 1.\n17. Repeat, while count > 0\n...\na. If fromPresent is true, then\ni. Let fromVal be Get(O, fromKey).\n...\niii. Let setStatus be Set(O, toKey, fromVal, true).\n...\n", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/copyWithin/non-negative-out-of-bounds-target-and-start.js", "esid": " sec-array.prototype.copywithin", "description": " >Max values of target and start positions are this.length.\n", "info": " |22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )\n\n...\n7. If relativeTarget < 0, let to be max((len + relativeTarget),0); else let to\nbe min(relativeTarget, len).\n...\n10. If relativeStart < 0, let from be max((len + relativeStart),0); else let\nfrom be min(relativeStart, len).\n11. If end is undefined, let relativeEnd be len; else let relativeEnd be\nToInteger(end).\n...\n14. Let count be min(final-from, len-to).\n15. If from<to and to<from+count\n...\n16. Else,\na. Let direction = 1.\n17. Repeat, while count > 0\n...\n...\n", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/copyWithin/non-negative-target-and-start.js", "esid": " sec-array.prototype.copywithin", "description": " >Copy values with non-negative target and start positions.\n", "info": " |22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )\n\n...\n7. If relativeTarget < 0, let to be max((len + relativeTarget),0); else let to\nbe min(relativeTarget, len).\n...\n10. If relativeStart < 0, let from be max((len + relativeStart),0); else let\nfrom be min(relativeStart, len).\n11. If end is undefined, let relativeEnd be len; else let relativeEnd be\nToInteger(end).\n...\n14. Let count be min(final-from, len-to).\n15. If from<to and to<from+count\n...\n16. Else,\na. Let direction = 1.\n17. Repeat, while count > 0\n...\na. If fromPresent is true, then\ni. Let fromVal be Get(O, fromKey).\n...\niii. Let setStatus be Set(O, toKey, fromVal, true).\n...\n", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/copyWithin/non-negative-target-start-and-end.js", "esid": " sec-array.prototype.copywithin", "description": " >Copy values with non-negative target, start and end positions.\n", "info": " |22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )\n\n...\n7. If relativeTarget < 0, let to be max((len + relativeTarget),0); else let to\nbe min(relativeTarget, len).\n...\n10. If relativeStart < 0, let from be max((len + relativeStart),0); else let\nfrom be min(relativeStart, len).\n11. If end is undefined, let relativeEnd be len; else let relativeEnd be\nToInteger(end).\n...\n14. Let count be min(final-from, len-to).\n15. If from<to and to<from+count\na. Let direction be -1.\nb. Let from be from + count -1.\nc. Let to be to + count -1.\n16. Else,\na. Let direction = 1.\n17. Repeat, while count > 0\n...\na. If fromPresent is true, then\ni. Let fromVal be Get(O, fromKey).\n...\niii. Let setStatus be Set(O, toKey, fromVal, true).\n...\n", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/copyWithin/prop-desc.js", "esid": " sec-array.prototype.copywithin", "description": " Property type and descriptor.", "info": " |22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )\n\n17 ECMAScript Standard Built-in Objects\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/copyWithin/return-abrupt-from-delete-proxy-target.js", "esid": " sec-array.prototype.copywithin", "description": " >Return abrupt from deleting property value - using Proxy\n", "info": " |22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )\n\n...\n17. Repeat, while count > 0\na. Let fromKey be ToString(from).\nb. Let toKey be ToString(to).\nc. Let fromPresent be HasProperty(O, fromKey).\n...\nf. Else fromPresent is false,\ni. Let deleteStatus be DeletePropertyOrThrow(O, toKey).\nii. ReturnIfAbrupt(deleteStatus).\n...\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Array/prototype/copyWithin/return-abrupt-from-end-as-symbol.js", "esid": " sec-array.prototype.copywithin", "description": " >Return abrupt from end as a Symbol.\n", "info": " |22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )\n\n...\n11. If end is undefined, let relativeEnd be len; else let relativeEnd be\nToInteger(end).\n12. ReturnIfAbrupt(relativeEnd).\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Array/prototype/copyWithin/return-abrupt-from-end.js", "esid": " sec-array.prototype.copywithin", "description": " >Return abrupt from ToInteger(end).\n", "info": " |22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )\n\n...\n11. If end is undefined, let relativeEnd be len; else let relativeEnd be\nToInteger(end).\n12. ReturnIfAbrupt(relativeEnd).\n...\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/copyWithin/return-abrupt-from-get-start-value.js", "esid": " sec-array.prototype.copywithin", "description": " >Return abrupt from getting property value - Get(O, fromKey).\n", "info": " |22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )\n\n...\n8. Let relativeStart be ToInteger(start).\n9. ReturnIfAbrupt(relativeStart).\n10. If relativeStart < 0, let from be max((len + relativeStart),0); else let\nfrom be min(relativeStart, len).\n...\n17. Repeat, while count > 0\na. Let fromKey be ToString(from).\nb. Let toKey be ToString(to).\nc. Let fromPresent be HasProperty(O, fromKey).\nd. ReturnIfAbrupt(fromPresent).\ne. If fromPresent is true, then\ni. Let fromVal be Get(O, fromKey).\nii. ReturnIfAbrupt(fromVal).\n...\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/copyWithin/return-abrupt-from-has-start.js", "esid": " sec-array.prototype.copywithin", "description": " >Return abrupt from HasProperty(O, fromKey).\n", "info": " |22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )\n\n...\n8. Let relativeStart be ToInteger(start).\n9. ReturnIfAbrupt(relativeStart).\n10. If relativeStart < 0, let from be max((len + relativeStart),0); else let\nfrom be min(relativeStart, len).\n...\n17. Repeat, while count > 0\na. Let fromKey be ToString(from).\nb. Let toKey be ToString(to).\nc. Let fromPresent be HasProperty(O, fromKey).\nd. ReturnIfAbrupt(fromPresent).\n...\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Array/prototype/copyWithin/return-abrupt-from-set-target-value.js", "esid": " sec-array.prototype.copywithin", "description": " >Return abrupt from setting property value - Set(O, toKey, fromVal, true).\n", "info": " |22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )\n\n...\n5. Let relativeTarget be ToInteger(target).\n6. ReturnIfAbrupt(relativeTarget).\n7. If relativeTarget < 0, let to be max((len + relativeTarget),0); else let to\nbe min(relativeTarget, len).\n...\n17. Repeat, while count > 0\na. Let fromKey be ToString(from).\nb. Let toKey be ToString(to).\n...\ne. If fromPresent is true, then\n...\niii. Let setStatus be Set(O, toKey, fromVal, true).\niv. ReturnIfAbrupt(setStatus).\n...\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/copyWithin/return-abrupt-from-start-as-symbol.js", "esid": " sec-array.prototype.copywithin", "description": " >Return abrupt from start as a Symbol.\n", "info": " |22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )\n\n...\n8. Let relativeStart be ToInteger(start).\n9. ReturnIfAbrupt(relativeStart).\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Array/prototype/copyWithin/return-abrupt-from-start.js", "esid": " sec-array.prototype.copywithin", "description": " >Return abrupt from ToInteger(start).\n", "info": " |22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )\n\n...\n8. Let relativeStart be ToInteger(start).\n9. ReturnIfAbrupt(relativeStart).\n...\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/copyWithin/return-abrupt-from-target-as-symbol.js", "esid": " sec-array.prototype.copywithin", "description": " >Return abrupt from target as a Symbol.\n", "info": " |22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )\n\n...\n5. Let relativeTarget be ToInteger(target).\n6. ReturnIfAbrupt(relativeTarget).\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Array/prototype/copyWithin/return-abrupt-from-target.js", "esid": " sec-array.prototype.copywithin", "description": " >Return abrupt from ToInteger(target).\n", "info": " |22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )\n\n...\n5. Let relativeTarget be ToInteger(target).\n6. ReturnIfAbrupt(relativeTarget).\n...\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/copyWithin/return-abrupt-from-this-length-as-symbol.js", "esid": " sec-array.prototype.copywithin", "description": " >Return abrupt from ToLength(Get(O, \"length\")) where length is a Symbol.\n", "info": " |22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )\n\n1. Let O be ToObject(this value).\n2. ReturnIfAbrupt(O).\n3. Let len be ToLength(Get(O, \"length\")).\n4. ReturnIfAbrupt(len).\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Array/prototype/copyWithin/return-abrupt-from-this-length.js", "esid": " sec-array.prototype.copywithin", "description": " >Return abrupt from ToLength(Get(O, \"length\")).\n", "info": " |22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )\n\n1. Let O be ToObject(this value).\n2. ReturnIfAbrupt(O).\n3. Let len be ToLength(Get(O, \"length\")).\n4. ReturnIfAbrupt(len).\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/copyWithin/return-this.js", "esid": " sec-array.prototype.copywithin", "description": " >Returns `this`.\n", "info": " |22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )\n\n18. Return O.\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/copyWithin/undefined-end.js", "esid": " sec-array.prototype.copywithin", "description": " >If `end` is undefined, set final position to `this.length`.\n", "info": " |22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )\n\n...\n11. If end is undefined, let relativeEnd be len; else let relativeEnd be\nToInteger(end).\n...\n", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/entries/iteration-mutable.js", "esid": " sec-array.prototype.entries", "description": " >New items in the array are accessible via iteration until iterator is \"done\".\n", "info": " |The method should return a valid iterator with the context as the\nIteratedObject. When an item is added to the array after the iterator is\ncreated but before the iterator is \"done\" (as defined by 22.1.5.2.1) the\nnew item should be accessible via iteration.\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/entries/iteration.js", "esid": " sec-array.prototype.entries", "description": " >The return is a valid iterator with the array's numeric properties.\n", "info": " |22.1.3.4 Array.prototype.entries ( )\n\n1. Let O be ToObject(this value).\n2. ReturnIfAbrupt(O).\n3. Return CreateArrayIterator(O, \"key+value\").\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/entries/length.js", "esid": " sec-array.prototype.entries", "description": " >Array.prototype.entries.length value and descriptor.\n", "info": " |22.1.3.4 Array.prototype.entries ( )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/entries/name.js", "esid": " sec-array.prototype.entries", "description": " >Array.prototype.entries.name value and descriptor.\n", "info": " |22.1.3.4 Array.prototype.entries ( )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/entries/prop-desc.js", "esid": " sec-array.prototype.entries", "description": " >Property type and descriptor.\n", "info": " |22.1.3.4 Array.prototype.entries ( )\n\n17 ECMAScript Standard Built-in Objects\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/entries/returns-iterator-from-object.js", "esid": " sec-array.prototype.entries", "description": " >Creates an iterator from a custom object.\n", "info": " |22.1.3.4 Array.prototype.entries ( )\n\n1. Let O be ToObject(this value).\n2. ReturnIfAbrupt(O).\n3. Return CreateArrayIterator(O, \"key+value\").\n", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/built-ins/Array/prototype/entries/returns-iterator.js", "esid": " sec-array.prototype.entries", "description": " >The method should return an Iterator instance.\n", "info": " |22.1.3.4 Array.prototype.entries ( )\n\n1. Let O be ToObject(this value).\n2. ReturnIfAbrupt(O).\n3. Return CreateArrayIterator(O, \"key+value\").\n\n22.1.5.1 CreateArrayIterator Abstract Operation\n\n...\n2. Let iterator be ObjectCreate(%ArrayIteratorPrototype%, \u00ab\u200d[[IteratedObject]],\n[[ArrayIteratorNextIndex]], [[ArrayIterationKind]]\u00bb).\n...\n6. Return iterator.\n", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/built-ins/Array/prototype/every/length.js", "esid": " sec-array.prototype.every", "description": " >Array.prototype.every.length value and property descriptor\n", "info": " |Array.prototype.every ( callbackfn [ , thisArg] )\nThe length property of the of function is 1.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/every/name.js", "esid": " sec-array.prototype.every", "description": " >Array.prototype.every.name is \"every\".\n", "info": " |Array.prototype.every ( callbackfn [ , thisArg] )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/fill/call-with-boolean.js", "esid": " sec-array.prototype.fill", "description": " Array.prototype.fill applied to boolean primitive"}, {"path": "./test262-main/test/built-ins/Array/prototype/fill/coerced-indexes.js", "esid": " sec-array.prototype.fill", "description": " >Fills elements from coerced to Integer `start` and `end` values\n", "info": " |22.1.3.6 Array.prototype.fill (value [ , start [ , end ] ] )\n\n...\n7. Let relativeStart be ToInteger(start).\n8. ReturnIfAbrupt(relativeStart).\n9. If relativeStart < 0, let k be max((len + relativeStart),0); else let k be\nmin(relativeStart, len).\n10. If end is undefined, let relativeEnd be len; else let relativeEnd be\nToInteger(end).\n...\n", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/fill/fill-values-custom-start-and-end.js", "esid": " sec-array.prototype.fill", "description": " >Fills all the elements from a with a custom start and end indexes.\n", "info": " |22.1.3.6 Array.prototype.fill (value [ , start [ , end ] ] )\n\n...\n7. If relativeStart < 0, let k be max((len + relativeStart),0); else let k be\nmin(relativeStart, len).\n8. If end is undefined, let relativeEnd be len; else let relativeEnd be\nToInteger(end).\n9. ReturnIfAbrupt(relativeEnd).\n10. If relativeEnd < 0, let final be max((len + relativeEnd),0); else let\nfinal be min(relativeEnd, len).\n...\n", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/fill/fill-values-relative-end.js", "esid": " sec-array.prototype.fill", "description": " >Fills all the elements from a with a custom start index.\n", "info": " |22.1.3.6 Array.prototype.fill (value [ , start [ , end ] ] )\n\n...\n8. If end is undefined, let relativeEnd be len; else let relativeEnd be\nToInteger(end).\n9. ReturnIfAbrupt(relativeEnd).\n10. If relativeEnd < 0, let final be max((len + relativeEnd),0); else let\nfinal be min(relativeEnd, len).\n...\n", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/fill/fill-values-relative-start.js", "esid": " sec-array.prototype.fill", "description": " >Fills all the elements from a with a custom start index.\n", "info": " |22.1.3.6 Array.prototype.fill (value [ , start [ , end ] ] )\n\n...\n7. If relativeStart < 0, let k be max((len + relativeStart),0); else let k be\nmin(relativeStart, len).\n...\n", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/fill/fill-values.js", "esid": " sec-array.prototype.fill", "description": " >Fills all the elements with `value` from a defaul start and index.\n", "info": " |22.1.3.6 Array.prototype.fill (value [ , start [ , end ] ] )\n\n...\n7. If relativeStart < 0, let k be max((len + relativeStart),0); else let k be\nmin(relativeStart, len).\n8. If end is undefined, let relativeEnd be len; else let relativeEnd be\nToInteger(end).\n9. ReturnIfAbrupt(relativeEnd).\n10. If relativeEnd < 0, let final be max((len + relativeEnd),0); else let\nfinal be min(relativeEnd, len).\n11. Repeat, while k < final\na. Let Pk be ToString(k).\nb. Let setStatus be Set(O, Pk, value, true).\nc. ReturnIfAbrupt(setStatus).\nd. Increase k by 1.\n12. Return O.\n", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/fill/length-near-integer-limit.js", "esid": " sec-array.prototype.fill", "description": " >Elements are filled in an array-like object\nwhose \"length\" property is near the integer limit.\n", "info": " |Array.prototype.fill ( value [ , start [ , end ] ] )\n\n1. Let O be ? ToObject(this value).\n2. Let len be ? LengthOfArrayLike(O).\n[...]\n7. Repeat, while k < final\na. Let Pk be ! ToString(k).\nb. Perform ? Set(O, Pk, value, true).\n[...]\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/fill/length.js", "esid": " sec-array.prototype.fill", "description": " Array.prototype.fill.length value and descriptor.", "info": " |17 ECMAScript Standard Built-in Objects\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/fill/name.js", "esid": " sec-array.prototype.fill", "description": " >Array.prototype.fill.name value and descriptor.\n", "info": " |22.1.3.6 Array.prototype.fill (value [ , start [ , end ] ] )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/fill/prop-desc.js", "esid": " sec-array.prototype.fill", "description": " Property type and descriptor.", "info": " |17 ECMAScript Standard Built-in Objects\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/fill/return-abrupt-from-end-as-symbol.js", "esid": " sec-array.prototype.fill", "description": " >Return abrupt from ToInteger(end) as a Symbol.\n", "info": " |22.1.3.6 Array.prototype.fill (value [ , start [ , end ] ] )\n\n...\n8. If end is undefined, let relativeEnd be len; else let relativeEnd be\nToInteger(end).\n9. ReturnIfAbrupt(relativeEnd).\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Array/prototype/fill/return-abrupt-from-end.js", "esid": " sec-array.prototype.fill", "description": " >Return abrupt from ToInteger(end).\n", "info": " |22.1.3.6 Array.prototype.fill (value [ , start [ , end ] ] )\n\n...\n8. If end is undefined, let relativeEnd be len; else let relativeEnd be\nToInteger(end).\n9. ReturnIfAbrupt(relativeEnd).\n...\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/fill/return-abrupt-from-setting-property-value.js", "esid": " sec-array.prototype.fill", "description": " >Return abrupt from setting a property value.\n", "info": " |22.1.3.6 Array.prototype.fill (value [ , start [ , end ] ] )\n\n...\n11. Repeat, while k < final\na. Let Pk be ToString(k).\nb. Let setStatus be Set(O, Pk, value, true).\nc. ReturnIfAbrupt(setStatus).\n...\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/fill/return-abrupt-from-start-as-symbol.js", "esid": " sec-array.prototype.fill", "description": " >Return abrupt from ToInteger(start) as a Symbol.\n", "info": " |22.1.3.6 Array.prototype.fill (value [ , start [ , end ] ] )\n\n...\n5. Let relativeStart be ToInteger(start).\n6. ReturnIfAbrupt(relativeStart).\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Array/prototype/fill/return-abrupt-from-start.js", "esid": " sec-array.prototype.fill", "description": " >Return abrupt from ToInteger(start).\n", "info": " |22.1.3.6 Array.prototype.fill (value [ , start [ , end ] ] )\n\n...\n5. Let relativeStart be ToInteger(start).\n6. ReturnIfAbrupt(relativeStart).\n...\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/fill/return-abrupt-from-this-length-as-symbol.js", "esid": " sec-array.prototype.fill", "description": " >Return abrupt from ToLength(Get(O, \"length\")) where length is a Symbol.\n", "info": " |22.1.3.6 Array.prototype.fill (value [ , start [ , end ] ] )\n\n1. Let O be ToObject(this value).\n2. ReturnIfAbrupt(O).\n3. Let len be ToLength(Get(O, \"length\")).\n4. ReturnIfAbrupt(len).\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Array/prototype/fill/return-abrupt-from-this-length.js", "esid": " sec-array.prototype.fill", "description": " >Return abrupt from ToLength(Get(O, \"length\")).\n", "info": " |22.1.3.6 Array.prototype.fill (value [ , start [ , end ] ] )\n\n1. Let O be ToObject(this value).\n2. ReturnIfAbrupt(O).\n3. Let len be ToLength(Get(O, \"length\")).\n4. ReturnIfAbrupt(len).\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/fill/return-this.js", "esid": " sec-array.prototype.fill", "description": " >Returns `this`.\n", "info": " |12. Return O.\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/filter/call-with-boolean.js", "esid": " sec-array.prototype.filter", "description": " Array.prototype.filter applied to boolean primitive", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/filter/create-revoked-proxy.js", "esid": " sec-array.prototype.filter", "description": " Abrupt completion from constructor that is a revoked Proxy object", "info": " |[...]\n5. Let A be ? ArraySpeciesCreate(O, 0).\n[...]\n\n9.4.2.3 ArraySpeciesCreate\n\n[...]\n3. Let isArray be ? IsArray(originalArray).\n\n7.2.2 IsArray\n\n[...]\n3. If argument is a Proxy exotic object, then\na. If the value of the [[ProxyHandler]] internal slot of argument is\nnull, throw a TypeError exception.\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Array/prototype/filter/create-species-null.js", "esid": " sec-array.prototype.filter", "description": " >A null value for the @@species constructor is interpreted as `undefined`\n", "info": " |[...]\n5. Let A be ? ArraySpeciesCreate(O, 0).\n[...]\n\n9.4.2.3 ArraySpeciesCreate\n\n[...]\n5. Let C be ? Get(originalArray, \"constructor\").\n[...]\n7. If Type(C) is Object, then\na. Let C be ? Get(C, @@species).\nb. If C is null, let C be undefined.\n8. If C is undefined, return ? ArrayCreate(length).\n", "features": ["Symbol.species"]}, {"path": "./test262-main/test/built-ins/Array/prototype/filter/create-species-undef.js", "esid": " sec-array.prototype.filter", "description": " >An undefined value for the @@species constructor triggers the creationof\nan Array exotic object\n", "info": " |[...]\n5. Let A be ? ArraySpeciesCreate(O, 0).\n[...]\n\n9.4.2.3 ArraySpeciesCreate\n\n[...]\n5. Let C be ? Get(originalArray, \"constructor\").\n[...]\n7. If Type(C) is Object, then\na. Let C be ? Get(C, @@species).\nb. If C is null, let C be undefined.\n8. If C is undefined, return ? ArrayCreate(length).\n", "features": ["Symbol.species"]}, {"path": "./test262-main/test/built-ins/Array/prototype/filter/length.js", "esid": " sec-array.prototype.filter", "description": " >The \"length\" property of Array.prototype.filter\n", "info": " |22.1.3.7 Array.prototype.filter ( callbackfn [ , thisArg ] )\n\n17 ECMAScript Standard Built-in Objects\n\nEvery built-in function object, including constructors, has a length property\nwhose value is an integer. Unless otherwise specified, this value is equal to\nthe largest number of named arguments shown in the subclause headings for the\nfunction description. Optional parameters (which are indicated with brackets:\n[ ]) or rest parameters (which are shown using the form \u00ab...name\u00bb) are not\nincluded in the default argument count.\n\nUnless otherwise specified, the length property of a built-in function object\nhas the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/filter/name.js", "esid": " sec-array.prototype.filter", "description": " >Array.prototype.filter.name is \"filter\".\n", "info": " |Array.prototype.filter ( callbackfn [ , thisArg ] )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/filter/target-array-with-non-writable-property.js", "esid": " sec-array.prototype.filter", "description": " >Non-writable properties are overwritten by CreateDataPropertyOrThrow.\n", "info": " |22.1.3.7 Array.prototype.filter ( callbackfn [ , thisArg ] )\n\n...\n8. Repeat, while k < len\n...\nc. If kPresent is true, then\n...\niii. If selected is true, then\n1. Perform ? CreateDataPropertyOrThrow(A, ! ToString(to), kValue).\n...\n", "features": ["Symbol.species"], "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/find/array-altered-during-loop.js", "esid": " sec-array.prototype.find", "description": " >The range of elements processed is set before the first call to `predicate`.\n", "info": " |22.1.3.8 Array.prototype.find ( predicate[ , thisArg ] )\n\n...\n6. If thisArg was supplied, let T be thisArg; else let T be undefined.\n7. Let k be 0.\n8. Repeat, while k < len\n...\nd. Let testResult be ToBoolean(Call(predicate, T, \u00abkValue, k, O\u00bb)).\n...\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/find/call-with-boolean.js", "esid": " sec-array.prototype.find", "description": " Array.prototype.find applied to boolean primitive"}, {"path": "./test262-main/test/built-ins/Array/prototype/find/length.js", "esid": " sec-array.prototype.find", "description": " Array.prototype.find.length value and descriptor.", "info": " |17 ECMAScript Standard Built-in Objects\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/find/name.js", "esid": " sec-array.prototype.find", "description": " >Array.prototype.find.name value and descriptor.\n", "info": " |22.1.3.8 Array.prototype.find ( predicate [ , thisArg ] )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/find/predicate-call-parameters.js", "esid": " sec-array.prototype.find", "description": " >Predicate called as F.call( thisArg, kValue, k, O ) for each array entry.\n", "info": " |22.1.3.8 Array.prototype.find ( predicate[ , thisArg ] )\n\n...\n6. If thisArg was supplied, let T be thisArg; else let T be undefined.\n7. Let k be 0.\n8. Repeat, while k < len\n...\nd. Let testResult be ToBoolean(Call(predicate, T, \u00abkValue, k, O\u00bb)).\ne. ReturnIfAbrupt(testResult).\n...\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/find/predicate-call-this-non-strict.js", "esid": " sec-array.prototype.find", "description": " >Predicate thisArg as F.call( thisArg, kValue, k, O ) for each array entry.\n", "info": " |22.1.3.8 Array.prototype.find ( predicate[ , thisArg ] )\n\n...\n8. Repeat, while k < len\n...\nd. Let testResult be ToBoolean(Call(predicate, T, \u00abkValue, k, O\u00bb)).\ne. ReturnIfAbrupt(testResult).\n...\n", "flags": ["noStrict"]}, {"path": "./test262-main/test/built-ins/Array/prototype/find/predicate-call-this-strict.js", "esid": " sec-array.prototype.find", "description": " >Predicate thisArg as F.call( thisArg, kValue, k, O ) for each array entry.\n", "info": " |22.1.3.8 Array.prototype.find ( predicate[ , thisArg ] )\n\n...\n8. Repeat, while k < len\n...\nd. Let testResult be ToBoolean(Call(predicate, T, \u00abkValue, k, O\u00bb)).\ne. ReturnIfAbrupt(testResult).\n...\n", "flags": ["onlyStrict"]}, {"path": "./test262-main/test/built-ins/Array/prototype/find/predicate-called-for-each-array-property.js", "esid": " sec-array.prototype.find", "description": " >Predicate is called for each array property.\n", "info": " |22.1.3.8 Array.prototype.find ( predicate[ , thisArg ] )\n\n...\n6. If thisArg was supplied, let T be thisArg; else let T be undefined.\n7. Let k be 0.\n8. Repeat, while k < len\n...\nd. Let testResult be ToBoolean(Call(predicate, T, \u00abkValue, k, O\u00bb)).\n...\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/find/predicate-not-called-on-empty-array.js", "esid": " sec-array.prototype.find", "description": " >Predicate is only called if this.length is > 0.\n", "info": " |22.1.3.8 Array.prototype.find ( predicate[ , thisArg ] )\n\n...\n7. Let k be 0.\n8. Repeat, while k < len\n...\nd. Let testResult be ToBoolean(Call(predicate, T, \u00abkValue, k, O\u00bb)).\n...\n9. Return undefined.\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/find/prop-desc.js", "esid": " sec-array.prototype.find", "description": " Property type and descriptor.", "info": " |17 ECMAScript Standard Built-in Objects\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/find/return-abrupt-from-predicate-call.js", "esid": " sec-array.prototype.find", "description": " >Return abrupt from predicate call.\n", "info": " |22.1.3.8 Array.prototype.find ( predicate[ , thisArg ] )\n\n...\n7. Let k be 0.\n8. Repeat, while k < len\n...\nd. Let testResult be ToBoolean(Call(predicate, T, \u00abkValue, k, O\u00bb)).\ne. ReturnIfAbrupt(testResult).\n...\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/find/return-abrupt-from-property.js", "esid": " sec-array.prototype.find", "description": " >Returns abrupt from getting property value from `this`.\n", "info": " |22.1.3.8 Array.prototype.find ( predicate[ , thisArg ] )\n\n...\n7. Let k be 0.\n8. Repeat, while k < len\na. Let Pk be ToString(k).\nb. Let kValue be Get(O, Pk).\nc. ReturnIfAbrupt(kValue).\n...\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/find/return-abrupt-from-this-length-as-symbol.js", "esid": " sec-array.prototype.find", "description": " >Return abrupt from ToLength(Get(O, \"length\")) where length is a Symbol.\n", "info": " |22.1.3.8 Array.prototype.find ( predicate[ , thisArg ] )\n\n1. Let O be ToObject(this value).\n2. ReturnIfAbrupt(O).\n3. Let len be ToLength(Get(O, \"length\")).\n4. ReturnIfAbrupt(len).\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Array/prototype/find/return-abrupt-from-this-length.js", "esid": " sec-array.prototype.find", "description": " >Return abrupt from ToLength(Get(O, \"length\")).\n", "info": " |22.1.3.8 Array.prototype.find ( predicate[ , thisArg ] )\n\n1. Let O be ToObject(this value).\n2. ReturnIfAbrupt(O).\n3. Let len be ToLength(Get(O, \"length\")).\n4. ReturnIfAbrupt(len).\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/find/return-found-value-predicate-result-is-true.js", "esid": " sec-array.prototype.find", "description": " >Return found value if predicate return a boolean true value.\n", "info": " |22.1.3.8 Array.prototype.find ( predicate[ , thisArg ] )\n\n...\n8. Repeat, while k < len\n...\nd. Let testResult be ToBoolean(Call(predicate, T, \u00abkValue, k, O\u00bb)).\ne. ReturnIfAbrupt(testResult).\nf. If testResult is true, return kValue.\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Array/prototype/find/return-undefined-if-predicate-returns-false-value.js", "esid": " sec-array.prototype.find", "description": " >Return undefined if predicate always returns a boolean false value.\n", "info": " |22.1.3.8 Array.prototype.find ( predicate[ , thisArg ] )\n\n...\n8. Repeat, while k < len\n...\nd. Let testResult be ToBoolean(Call(predicate, T, \u00abkValue, k, O\u00bb)).\n...\n9. Return undefined.\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Array/prototype/findIndex/array-altered-during-loop.js", "esid": " sec-array.prototype.findindex", "description": " >The range of elements processed is set before the first call to `predicate`.\n", "info": " |22.1.3.9 Array.prototype.findIndex ( predicate[ , thisArg ] )\n\n...\n6. If thisArg was supplied, let T be thisArg; else let T be undefined.\n7. Let k be 0.\n8. Repeat, while k < len\n...\nd. Let testResult be ToBoolean(Call(predicate, T, \u00abkValue, k, O\u00bb)).\n...\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/findIndex/call-with-boolean.js", "esid": " sec-array.prototype.findIndex", "description": " Array.prototype.findIndex applied to boolean primitive"}, {"path": "./test262-main/test/built-ins/Array/prototype/findIndex/length.js", "esid": " sec-array.prototype.findindex", "description": " Array.prototype.findIndex.length value and descriptor.", "info": " |17 ECMAScript Standard Built-in Objects\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/findIndex/name.js", "esid": " sec-array.prototype.findindex", "description": " >Array.prototype.findIndex.name value and descriptor.\n", "info": " |22.1.3.9 Array.prototype.findIndex ( predicate [ , thisArg ] )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/findIndex/predicate-call-parameters.js", "esid": " sec-array.prototype.findindex", "description": " >Predicate called as F.call( thisArg, kValue, k, O ) for each array entry.\n", "info": " |22.1.3.9 Array.prototype.findIndex ( predicate[ , thisArg ] )\n\n...\n6. If thisArg was supplied, let T be thisArg; else let T be undefined.\n7. Let k be 0.\n8. Repeat, while k < len\n...\nd. Let testResult be ToBoolean(Call(predicate, T, \u00abkValue, k, O\u00bb)).\n...\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/findIndex/predicate-call-this-non-strict.js", "esid": " sec-array.prototype.findindex", "description": " >Predicate thisArg as F.call( thisArg, kValue, k, O ) for each array entry.\n", "info": " |22.1.3.9 Array.prototype.findIndex ( predicate[ , thisArg ] )\n\n...\n8. Repeat, while k < len\n...\nd. Let testResult be ToBoolean(Call(predicate, T, \u00abkValue, k, O\u00bb)).\ne. ReturnIfAbrupt(testResult).\n...\n", "flags": ["noStrict"]}, {"path": "./test262-main/test/built-ins/Array/prototype/findIndex/predicate-call-this-strict.js", "esid": " sec-array.prototype.findindex", "description": " >Predicate thisArg as F.call( thisArg, kValue, k, O ) for each array entry.\n", "info": " |22.1.3.9 Array.prototype.findIndex ( predicate[ , thisArg ] )\n\n...\n8. Repeat, while k < len\n...\nd. Let testResult be ToBoolean(Call(predicate, T, \u00abkValue, k, O\u00bb)).\ne. ReturnIfAbrupt(testResult).\n...\n", "flags": ["onlyStrict"]}, {"path": "./test262-main/test/built-ins/Array/prototype/findIndex/predicate-called-for-each-array-property.js", "esid": " sec-array.prototype.findindex", "description": " >Predicate is called for each array property.\n", "info": " |22.1.3.9 Array.prototype.findIndex ( predicate[ , thisArg ] )\n\n...\n6. If thisArg was supplied, let T be thisArg; else let T be undefined.\n7. Let k be 0.\n8. Repeat, while k < len\n...\nd. Let testResult be ToBoolean(Call(predicate, T, \u00abkValue, k, O\u00bb)).\n...\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/findIndex/predicate-not-called-on-empty-array.js", "esid": " sec-array.prototype.findindex", "description": " >Predicate is only called if this.length is > 0.\n", "info": " |22.1.3.9 Array.prototype.findIndex ( predicate[ , thisArg ] )\n\n...\n7. Let k be 0.\n8. Repeat, while k < len\n...\nd. Let testResult be ToBoolean(Call(predicate, T, \u00abkValue, k, O\u00bb)).\n...\n9. Return -1.\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/findIndex/prop-desc.js", "esid": " sec-array.prototype.findindex", "description": " Property type and descriptor.", "info": " |17 ECMAScript Standard Built-in Objects\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/findIndex/return-abrupt-from-predicate-call.js", "esid": " sec-array.prototype.findindex", "description": " >Return abrupt from predicate call.\n", "info": " |22.1.3.9 Array.prototype.findIndex ( predicate[ , thisArg ] )\n\n...\n7. Let k be 0.\n8. Repeat, while k < len\n...\nd. Let testResult be ToBoolean(Call(predicate, T, \u00abkValue, k, O\u00bb)).\ne. ReturnIfAbrupt(testResult).\n...\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/findIndex/return-abrupt-from-property.js", "esid": " sec-array.prototype.findindex", "description": " >Returns abrupt from getting property value from `this`.\n", "info": " |22.1.3.9 Array.prototype.findIndex ( predicate[ , thisArg ] )\n\n...\n7. Let k be 0.\n8. Repeat, while k < len\na. Let Pk be ToString(k).\nb. Let kValue be Get(O, Pk).\nc. ReturnIfAbrupt(kValue).\n...\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/findIndex/return-abrupt-from-this-length-as-symbol.js", "esid": " sec-array.prototype.findindex", "description": " >Return abrupt from ToLength(Get(O, \"length\")) where length is a Symbol.\n", "info": " |22.1.3.9 Array.prototype.findIndex ( predicate[ , thisArg ] )\n\n1. Let O be ToObject(this value).\n2. ReturnIfAbrupt(O).\n3. Let len be ToLength(Get(O, \"length\")).\n4. ReturnIfAbrupt(len).\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Array/prototype/findIndex/return-abrupt-from-this-length.js", "esid": " sec-array.prototype.findindex", "description": " >Return abrupt from ToLength(Get(O, \"length\")).\n", "info": " |22.1.3.9 Array.prototype.findIndex ( predicate[ , thisArg ] )\n\n1. Let O be ToObject(this value).\n2. ReturnIfAbrupt(O).\n3. Let len be ToLength(Get(O, \"length\")).\n4. ReturnIfAbrupt(len).\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/findIndex/return-index-predicate-result-is-true.js", "esid": " sec-array.prototype.findindex", "description": " >Return index if predicate return a boolean true value.\n", "info": " |22.1.3.9 Array.prototype.findIndex ( predicate[ , thisArg ] )\n\n...\n8. Repeat, while k < len\n...\nd. Let testResult be ToBoolean(Call(predicate, T, \u00abkValue, k, O\u00bb)).\ne. ReturnIfAbrupt(testResult).\nf. If testResult is true, return k.\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Array/prototype/findIndex/return-negative-one-if-predicate-returns-false-value.js", "esid": " sec-array.prototype.findindex", "description": " >Return -1 if predicate always returns a boolean false value.\n", "info": " |22.1.3.9 Array.prototype.findIndex ( predicate[ , thisArg ] )\n\n...\n8. Repeat, while k < len\n...\nd. Let testResult be ToBoolean(Call(predicate, T, \u00abkValue, k, O\u00bb)).\n...\n9. Return -1.\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Array/prototype/flat/target-array-non-extensible.js", "esid": " sec-array.prototype.flat", "description": " >TypeError is thrown if CreateDataProperty fails.\n(result object is non-extensible, source array is not flattened)\n", "info": " |Array.prototype.flat ( [ depth ] )\n\n[...]\n6. Perform ? FlattenIntoArray(A, O, sourceLen, 0, depthNum).\n\nFlattenIntoArray ( target, source, sourceLen, start, depth [ , mapperFunction, thisArg ] )\n\n[...]\n9. Repeat, while sourceIndex < sourceLen\n[...]\nc. If exists is true, then\n[...]\nv. If shouldFlatten is true, then\n[...]\nvi. Else,\n[...]\n2. Perform ? CreateDataPropertyOrThrow(target, ! ToString(targetIndex), element).\n[...]\n\nCreateDataPropertyOrThrow ( O, P, V )\n\n[...]\n3. Let success be ? CreateDataProperty(O, P, V).\n4. If success is false, throw a TypeError exception.\n", "features": ["Symbol.species"]}, {"path": "./test262-main/test/built-ins/Array/prototype/flat/target-array-with-non-configurable-property.js", "esid": " sec-array.prototype.flat", "description": " >TypeError is thrown if CreateDataProperty fails.\n(result object's \"0\" is non-configurable, source array gets flattened)\n", "info": " |Array.prototype.flat ( [ depth ] )\n\n[...]\n6. Perform ? FlattenIntoArray(A, O, sourceLen, 0, depthNum).\n\nFlattenIntoArray ( target, source, sourceLen, start, depth [ , mapperFunction, thisArg ] )\n\n[...]\n9. Repeat, while sourceIndex < sourceLen\n[...]\nc. If exists is true, then\n[...]\nv. If shouldFlatten is true, then\n[...]\n2. Set targetIndex to ? FlattenIntoArray(target, element, elementLen, targetIndex, depth - 1).\n[...]\n\nCreateDataPropertyOrThrow ( O, P, V )\n\n[...]\n3. Let success be ? CreateDataProperty(O, P, V).\n4. If success is false, throw a TypeError exception.\n", "features": ["Symbol.species"]}, {"path": "./test262-main/test/built-ins/Array/prototype/flatMap/target-array-non-extensible.js", "esid": " sec-array.prototype.flatmap", "description": " >TypeError is thrown if CreateDataProperty fails.\n(result object is non-extensible, source array gets flattened)\n", "info": " |Array.prototype.flatMap ( mapperFunction [ , thisArg ] )\n\n[...]\n6. Perform ? FlattenIntoArray(A, O, sourceLen, 0, depthNum).\n\nFlattenIntoArray ( target, source, sourceLen, start, depth [ , mapperFunction, thisArg ] )\n\n[...]\n9. Repeat, while sourceIndex < sourceLen\n[...]\nc. If exists is true, then\n[...]\nv. If shouldFlatten is true, then\n[...]\n2. Set targetIndex to ? FlattenIntoArray(target, element, elementLen, targetIndex, depth - 1).\n[...]\n\nCreateDataPropertyOrThrow ( O, P, V )\n\n[...]\n3. Let success be ? CreateDataProperty(O, P, V).\n4. If success is false, throw a TypeError exception.\n", "features": ["Symbol.species"]}, {"path": "./test262-main/test/built-ins/Array/prototype/flatMap/target-array-with-non-configurable-property.js", "esid": " sec-array.prototype.flatmap", "description": " >TypeError is thrown if CreateDataProperty fails.\n(result object's \"0\" is non-configurable, source array is not flattened)\n", "info": " |Array.prototype.flatMap ( mapperFunction [ , thisArg ] )\n\n[...]\n6. Perform ? FlattenIntoArray(A, O, sourceLen, 0, depthNum).\n\nFlattenIntoArray ( target, source, sourceLen, start, depth [ , mapperFunction, thisArg ] )\n\n[...]\n9. Repeat, while sourceIndex < sourceLen\n[...]\nc. If exists is true, then\n[...]\nv. If shouldFlatten is true, then\n[...]\nvi. Else,\n[...]\n2. Perform ? CreateDataPropertyOrThrow(target, ! ToString(targetIndex), element).\n[...]\n\nCreateDataPropertyOrThrow ( O, P, V )\n\n[...]\n3. Let success be ? CreateDataProperty(O, P, V).\n4. If success is false, throw a TypeError exception.\n", "features": ["Symbol.species"]}, {"path": "./test262-main/test/built-ins/Array/prototype/forEach/length.js", "esid": " sec-array.prototype.forEach", "description": " >The \"length\" property of Array.prototype.forEach\n", "info": " |22.1.3.10 Array.prototype.forEach ( callbackfn [ , thisArg ] )\n\n17 ECMAScript Standard Built-in Objects\n\nEvery built-in function object, including constructors, has a length property\nwhose value is an integer. Unless otherwise specified, this value is equal to\nthe largest number of named arguments shown in the subclause headings for the\nfunction description. Optional parameters (which are indicated with brackets:\n[ ]) or rest parameters (which are shown using the form \u00ab...name\u00bb) are not\nincluded in the default argument count.\n\nUnless otherwise specified, the length property of a built-in function object\nhas the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/forEach/name.js", "esid": " sec-array.prototype.foreach", "description": " >Array.prototype.forEach.name is \"forEach\".\n", "info": " |Array.prototype.forEach ( callbackfn [ , thisArg ] )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/includes/return-abrupt-tointeger-fromindex-symbol.js", "esid": " sec-array.prototype.includes", "description": " Return abrupt from ToInteger(fromIndex) - using symbol", "info": " |22.1.3.11 Array.prototype.includes ( searchElement [ , fromIndex ] )\n\n...\n4. Let n be ? ToInteger(fromIndex). (If fromIndex is undefined, this step\nproduces the value 0.)\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Array/prototype/includes/return-abrupt-tonumber-length-symbol.js", "esid": " sec-array.prototype.includes", "description": " Return abrupt from ToNumber(symbol \"length\")", "info": " |22.1.3.11 Array.prototype.includes ( searchElement [ , fromIndex ] )\n\n...\n2. Let len be ? ToLength(? Get(O, \"length\")).\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Array/prototype/indexOf/calls-only-has-on-prototype-after-length-zeroed.js", "esid": " sec-array.prototype.indexof", "description": " >Calls [[HasProperty]] on the prototype to check for existing elements.\n", "info": " |22.1.3.12 Array.prototype.indexOf ( searchElement [ , fromIndex ] )\n\n...\n2. Let len be ? ToLength(? Get(O, \"length\")).\n...\n4. Let n be ? ToInteger(fromIndex). (If fromIndex is undefined, this step produces the value 0.)\n...\n8. Repeat, while k < len\na. Let kPresent be ? HasProperty(O, ! ToString(k)).\nb. If kPresent is true, then\ni. Let elementK be ? Get(O, ! ToString(k)).\n...\n", "includes": ["proxyTrapsHelper.js"], "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Array/prototype/indexOf/length.js", "esid": " sec-array.prototype.indexof", "description": " >The \"length\" property of Array.prototype.indexOf\n", "info": " |17 ECMAScript Standard Built-in Objects\n\nEvery built-in function object, including constructors, has a length property\nwhose value is an integer. Unless otherwise specified, this value is equal to\nthe largest number of named arguments shown in the subclause headings for the\nfunction description. Optional parameters (which are indicated with brackets:\n[ ]) or rest parameters (which are shown using the form \u00ab...name\u00bb) are not\nincluded in the default argument count.\n\nUnless otherwise specified, the length property of a built-in function object\nhas the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/indexOf/name.js", "esid": " sec-array.prototype.indexof", "description": " >Array.prototype.indexOf.name is \"indexOf\".\n", "info": " |Array.prototype.indexOf ( searchElement [ , fromIndex ] )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/join/length.js", "esid": " sec-array.prototype.join", "description": " >The \"length\" property of Array.prototype.join\n", "info": " |17 ECMAScript Standard Built-in Objects\n\nEvery built-in function object, including constructors, has a length property\nwhose value is an integer. Unless otherwise specified, this value is equal to\nthe largest number of named arguments shown in the subclause headings for the\nfunction description. Optional parameters (which are indicated with brackets:\n[ ]) or rest parameters (which are shown using the form \u00ab...name\u00bb) are not\nincluded in the default argument count.\n\nUnless otherwise specified, the length property of a built-in function object\nhas the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/join/name.js", "esid": " sec-array.prototype.join", "description": " >Array.prototype.join.name is \"join\".\n", "info": " |Array.prototype.join (separator)\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/keys/iteration-mutable.js", "esid": " sec-array.prototype.keys", "description": " >New items in the array are accessible via iteration until iterator is \"done\".\n", "info": " |When an item is added to the array after the iterator is created but\nbefore the iterator is \"done\" (as defined by 22.1.5.2.1), the new item's\nkey should be accessible via iteration. When an item is added to the\narray after the iterator is \"done\", the new item's key should not be\naccessible via iteration.\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/keys/iteration.js", "esid": " sec-array.prototype.keys", "description": " >The return is a valid iterator with the array's numeric properties.\n", "info": " |22.1.3.13 Array.prototype.keys ( )\n\n1. Let O be ToObject(this value).\n2. ReturnIfAbrupt(O).\n3. Return CreateArrayIterator(O, \"key\").\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/keys/length.js", "esid": " sec-array.prototype.keys", "description": " >Array.prototype.keys.length value and descriptor.\n", "info": " |22.1.3.13 Array.prototype.keys ( )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/keys/name.js", "esid": " sec-array.prototype.keys", "description": " >Array.prototype.keys.name value and descriptor.\n", "info": " |22.1.3.13 Array.prototype.keys ( )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/keys/prop-desc.js", "esid": " sec-array.prototype.keys", "description": " >Property type and descriptor.\n", "info": " |22.1.3.13 Array.prototype.keys ( )\n\n17 ECMAScript Standard Built-in Objects\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/keys/returns-iterator-from-object.js", "esid": " sec-array.prototype.keys", "description": " >Creates an iterator from a custom object.\n", "info": " |22.1.3.13 Array.prototype.keys ( )\n\n1. Let O be ToObject(this value).\n2. ReturnIfAbrupt(O).\n3. Return CreateArrayIterator(O, \"key\").\n", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/built-ins/Array/prototype/keys/returns-iterator.js", "esid": " sec-array.prototype.keys", "description": " >The method should return an Iterator instance.\n", "info": " |22.1.3.13 Array.prototype.keys ( )\n\n1. Let O be ToObject(this value).\n2. ReturnIfAbrupt(O).\n3. Return CreateArrayIterator(O, \"key\").\n\n22.1.5.1 CreateArrayIterator Abstract Operation\n\n...\n2. Let iterator be ObjectCreate(%ArrayIteratorPrototype%, \u00ab\u200d[[IteratedObject]],\n[[ArrayIteratorNextIndex]], [[ArrayIterationKind]]\u00bb).\n...\n6. Return iterator.\n", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/built-ins/Array/prototype/lastIndexOf/calls-only-has-on-prototype-after-length-zeroed.js", "esid": " sec-array.prototype.lastindexof", "description": " >Calls [[HasProperty]] on the prototype to check for existing elements.\n", "info": " |22.1.3.15 Array.prototype.lastIndexOf ( searchElement [ , fromIndex ] )\n\n...\n2. Let len be ? ToLength(? Get(O, \"length\")).\n...\n4. If fromIndex is present, let n be ? ToInteger(fromIndex); else let n be len-1.\n...\n7. Repeat, while k \u2265 0\na. Let kPresent be ? HasProperty(O, ! ToString(k)).\nb. If kPresent is true, then\ni. Let elementK be ? Get(O, ! ToString(k)).\n...\n", "includes": ["proxyTrapsHelper.js"], "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Array/prototype/lastIndexOf/length.js", "esid": " sec-array.prototype.lastindexof", "description": " >The \"length\" property of Array.prototype.lastIndexOf\n", "info": " |17 ECMAScript Standard Built-in Objects\n\nEvery built-in function object, including constructors, has a length property\nwhose value is an integer. Unless otherwise specified, this value is equal to\nthe largest number of named arguments shown in the subclause headings for the\nfunction description. Optional parameters (which are indicated with brackets:\n[ ]) or rest parameters (which are shown using the form \u00ab...name\u00bb) are not\nincluded in the default argument count.\n\nUnless otherwise specified, the length property of a built-in function object\nhas the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/lastIndexOf/name.js", "esid": " sec-array.prototype.lastindexof", "description": " >Array.prototype.lastIndexOf.name is \"lastIndexOf\".\n", "info": " |Array.prototype.lastIndexOf ( searchElement [ , fromIndex ] )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/map/call-with-boolean.js", "esid": " sec-array.prototype.map", "description": " Array.prototype.map applied to boolean primitive", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/map/create-revoked-proxy.js", "esid": " sec-array.prototype.map", "description": " Abrupt completion from constructor that is a revoked Proxy object", "info": " |[...]\n5. Let A be ? ArraySpeciesCreate(O, len).\n[...]\n\n9.4.2.3 ArraySpeciesCreate\n\n[...]\n3. Let isArray be ? IsArray(originalArray).\n\n7.2.2 IsArray\n\n[...]\n3. If argument is a Proxy exotic object, then\na. If the value of the [[ProxyHandler]] internal slot of argument is\nnull, throw a TypeError exception.\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Array/prototype/map/create-species-null.js", "esid": " sec-array.prototype.map", "description": " >A null value for the @@species constructor is interpreted as `undefined`\n", "info": " |[...]\n5. Let A be ? ArraySpeciesCreate(O, len).\n[...]\n\n9.4.2.3 ArraySpeciesCreate\n\n[...]\n5. Let C be ? Get(originalArray, \"constructor\").\n[...]\n7. If Type(C) is Object, then\na. Let C be ? Get(C, @@species).\nb. If C is null, let C be undefined.\n8. If C is undefined, return ? ArrayCreate(length).\n", "features": ["Symbol.species"]}, {"path": "./test262-main/test/built-ins/Array/prototype/map/create-species-undef.js", "esid": " sec-array.prototype.map", "description": " >An undefined value for the @@species constructor triggers the creationof\nan Array exotic object\n", "info": " |[...]\n5. Let A be ? ArraySpeciesCreate(O, len).\n[...]\n\n9.4.2.3 ArraySpeciesCreate\n\n[...]\n5. Let C be ? Get(originalArray, \"constructor\").\n[...]\n7. If Type(C) is Object, then\na. Let C be ? Get(C, @@species).\nb. If C is null, let C be undefined.\n8. If C is undefined, return ? ArrayCreate(length).\n", "features": ["Symbol.species"]}, {"path": "./test262-main/test/built-ins/Array/prototype/map/length.js", "esid": " sec-array.prototype.map", "description": " >The \"length\" property of Array.prototype.map\n", "info": " |17 ECMAScript Standard Built-in Objects\n\nEvery built-in function object, including constructors, has a length property\nwhose value is an integer. Unless otherwise specified, this value is equal to\nthe largest number of named arguments shown in the subclause headings for the\nfunction description. Optional parameters (which are indicated with brackets:\n[ ]) or rest parameters (which are shown using the form \u00ab...name\u00bb) are not\nincluded in the default argument count.\n\nUnless otherwise specified, the length property of a built-in function object\nhas the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/map/name.js", "esid": " sec-array.prototype.map", "description": " >Array.prototype.map.name is \"map\".\n", "info": " |Array.prototype.map ( callbackfn [ , thisArg ] )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/map/target-array-with-non-writable-property.js", "esid": " sec-array.prototype.map", "description": " >Non-writable properties are overwritten by CreateDataPropertyOrThrow.\n", "info": " |22.1.3.16 Array.prototype.map ( callbackfn [ , thisArg ] )\n\n...\n7. Repeat, while k < len\n...\nc. If kPresent is true, then\n...\niii. Perform ? CreateDataPropertyOrThrow(A, Pk, mappedValue).\n...\n", "features": ["Symbol.species"], "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/pop/length.js", "esid": " sec-array.prototype.pop", "description": " >The \"length\" property of Array.prototype.pop\n", "info": " |17 ECMAScript Standard Built-in Objects\n\nEvery built-in function object, including constructors, has a length property\nwhose value is an integer. Unless otherwise specified, this value is equal to\nthe largest number of named arguments shown in the subclause headings for the\nfunction description. Optional parameters (which are indicated with brackets:\n[ ]) or rest parameters (which are shown using the form \u00ab...name\u00bb) are not\nincluded in the default argument count.\n\nUnless otherwise specified, the length property of a built-in function object\nhas the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/pop/name.js", "esid": " sec-array.prototype.pop", "description": " >Array.prototype.pop.name is \"pop\".\n", "info": " |Array.prototype.pop ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/push/length.js", "esid": " sec-array.prototype.push", "description": " >The \"length\" property of Array.prototype.push\n", "info": " |22.1.3.18 Array.prototype.push ( ...items )\n\nThe length property of the push method is 1.\n\n17 ECMAScript Standard Built-in Objects\n\nEvery built-in function object, including constructors, has a length property\nwhose value is an integer. Unless otherwise specified, this value is equal to\nthe largest number of named arguments shown in the subclause headings for the\nfunction description. Optional parameters (which are indicated with brackets:\n[ ]) or rest parameters (which are shown using the form \u00ab...name\u00bb) are not\nincluded in the default argument count.\n\nUnless otherwise specified, the length property of a built-in function object\nhas the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/push/name.js", "esid": " sec-array.prototype.push", "description": " >Array.prototype.push.name is \"push\".\n", "info": " |Array.prototype.push ( ...items )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/reduce/length.js", "esid": " sec-array.prototype.reduce", "description": " >The \"length\" property of Array.prototype.reduce\n", "info": " |17 ECMAScript Standard Built-in Objects\n\nEvery built-in function object, including constructors, has a length property\nwhose value is an integer. Unless otherwise specified, this value is equal to\nthe largest number of named arguments shown in the subclause headings for the\nfunction description. Optional parameters (which are indicated with brackets:\n[ ]) or rest parameters (which are shown using the form \u00ab...name\u00bb) are not\nincluded in the default argument count.\n\nUnless otherwise specified, the length property of a built-in function object\nhas the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/reduce/name.js", "esid": " sec-array.prototype.reduce", "description": " >Array.prototype.reduce.name is \"reduce\".\n", "info": " |Array.prototype.reduce ( callbackfn [ , initialValue ] )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/reduceRight/length.js", "esid": " sec-array.prototype.reduceright", "description": " >The \"length\" property of Array.prototype.reduceRight\n", "info": " |17 ECMAScript Standard Built-in Objects\n\nEvery built-in function object, including constructors, has a length property\nwhose value is an integer. Unless otherwise specified, this value is equal to\nthe largest number of named arguments shown in the subclause headings for the\nfunction description. Optional parameters (which are indicated with brackets:\n[ ]) or rest parameters (which are shown using the form \u00ab...name\u00bb) are not\nincluded in the default argument count.\n\nUnless otherwise specified, the length property of a built-in function object\nhas the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/reduceRight/name.js", "esid": " sec-array.prototype.reduceright", "description": " >Array.prototype.reduceRight.name is \"reduceRight\".\n", "info": " |Array.prototype.reduceRight ( callbackfn [ , initialValue ] )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/reverse/length.js", "esid": " sec-array.prototype.reverse", "description": " >The \"length\" property of Array.prototype.reverse\n", "info": " |17 ECMAScript Standard Built-in Objects\n\nEvery built-in function object, including constructors, has a length property\nwhose value is an integer. Unless otherwise specified, this value is equal to\nthe largest number of named arguments shown in the subclause headings for the\nfunction description. Optional parameters (which are indicated with brackets:\n[ ]) or rest parameters (which are shown using the form \u00ab...name\u00bb) are not\nincluded in the default argument count.\n\nUnless otherwise specified, the length property of a built-in function object\nhas the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/reverse/name.js", "esid": " sec-array.prototype.reverse", "description": " >Array.prototype.reverse.name is \"reverse\".\n", "info": " |Array.prototype.reverse ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/shift/length.js", "esid": " sec-array.prototype.shift", "description": " >The \"length\" property of Array.prototype.shift\n", "info": " |17 ECMAScript Standard Built-in Objects\n\nEvery built-in function object, including constructors, has a length property\nwhose value is an integer. Unless otherwise specified, this value is equal to\nthe largest number of named arguments shown in the subclause headings for the\nfunction description. Optional parameters (which are indicated with brackets:\n[ ]) or rest parameters (which are shown using the form \u00ab...name\u00bb) are not\nincluded in the default argument count.\n\nUnless otherwise specified, the length property of a built-in function object\nhas the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/shift/name.js", "esid": " sec-array.prototype.shift", "description": " >Array.prototype.shift.name is \"shift\".\n", "info": " |Array.prototype.shift ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/slice/call-with-boolean.js", "esid": " sec-array.prototype.slice", "description": " Array.prototype.slice applied to boolean primitive", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/slice/create-revoked-proxy.js", "esid": " sec-array.prototype.slice", "description": " Abrupt completion from constructor that is a revoked Proxy object", "info": " |[...]\n8. Let A be ? ArraySpeciesCreate(O, count).\n[...]\n\n9.4.2.3 ArraySpeciesCreate\n\n[...]\n3. Let isArray be ? IsArray(originalArray).\n\n7.2.2 IsArray\n\n[...]\n3. If argument is a Proxy exotic object, then\na. If the value of the [[ProxyHandler]] internal slot of argument is\nnull, throw a TypeError exception.\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Array/prototype/slice/create-species-null.js", "esid": " sec-array.prototype.slice", "description": " >A null value for the @@species constructor is interpreted as `undefined`\n", "info": " |[...]\n8. Let A be ? ArraySpeciesCreate(O, count).\n[...]\n\n9.4.2.3 ArraySpeciesCreate\n\n[...]\n5. Let C be ? Get(originalArray, \"constructor\").\n[...]\n7. If Type(C) is Object, then\na. Let C be ? Get(C, @@species).\nb. If C is null, let C be undefined.\n8. If C is undefined, return ? ArrayCreate(length).\n", "features": ["Symbol.species"]}, {"path": "./test262-main/test/built-ins/Array/prototype/slice/create-species-undef.js", "esid": " sec-array.prototype.slice", "description": " >An undefined value for the @@species constructor triggers the creationof\nan Array exotic object\n", "info": " |[...]\n8. Let A be ? ArraySpeciesCreate(O, count).\n[...]\n\n9.4.2.3 ArraySpeciesCreate\n\n[...]\n5. Let C be ? Get(originalArray, \"constructor\").\n[...]\n7. If Type(C) is Object, then\na. Let C be ? Get(C, @@species).\nb. If C is null, let C be undefined.\n8. If C is undefined, return ? ArrayCreate(length).\n", "features": ["Symbol.species"]}, {"path": "./test262-main/test/built-ins/Array/prototype/slice/length.js", "esid": " sec-array.prototype.slice", "description": " >The \"length\" property of Array.prototype.slice\n", "info": " |17 ECMAScript Standard Built-in Objects\n\nEvery built-in function object, including constructors, has a length property\nwhose value is an integer. Unless otherwise specified, this value is equal to\nthe largest number of named arguments shown in the subclause headings for the\nfunction description. Optional parameters (which are indicated with brackets:\n[ ]) or rest parameters (which are shown using the form \u00ab...name\u00bb) are not\nincluded in the default argument count.\n\nUnless otherwise specified, the length property of a built-in function object\nhas the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/slice/name.js", "esid": " sec-array.prototype.slice", "description": " >Array.prototype.slice.name is \"slice\".\n", "info": " |Array.prototype.slice (start, end)\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/slice/target-array-with-non-writable-property.js", "esid": " sec-array.prototype.slice", "description": " >Non-writable properties are overwritten by CreateDataPropertyOrThrow.\n", "info": " |22.1.3.23 Array.prototype.slice ( start, end )\n\n...\n10. Repeat, while k < final\n...\nc. If kPresent is true, then\n...\nii. Perform ? CreateDataPropertyOrThrow(A, ! ToString(n), kValue).\n...\n", "features": ["Symbol.species"], "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/some/length.js", "esid": " sec-array.prototype.some", "description": " >The \"length\" property of Array.prototype.some\n", "info": " |17 ECMAScript Standard Built-in Objects\n\nEvery built-in function object, including constructors, has a length property\nwhose value is an integer. Unless otherwise specified, this value is equal to\nthe largest number of named arguments shown in the subclause headings for the\nfunction description. Optional parameters (which are indicated with brackets:\n[ ]) or rest parameters (which are shown using the form \u00ab...name\u00bb) are not\nincluded in the default argument count.\n\nUnless otherwise specified, the length property of a built-in function object\nhas the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/some/name.js", "esid": " sec-array.prototype.some", "description": " >Array.prototype.some.name is \"some\".\n", "info": " |Array.prototype.some ( callbackfn [ , thisArg ] )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/sort/length.js", "esid": " sec-array.prototype.sort", "description": " >The \"length\" property of Array.prototype.sort\n", "info": " |17 ECMAScript Standard Built-in Objects\n\nEvery built-in function object, including constructors, has a length property\nwhose value is an integer. Unless otherwise specified, this value is equal to\nthe largest number of named arguments shown in the subclause headings for the\nfunction description. Optional parameters (which are indicated with brackets:\n[ ]) or rest parameters (which are shown using the form \u00ab...name\u00bb) are not\nincluded in the default argument count.\n\nUnless otherwise specified, the length property of a built-in function object\nhas the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/sort/name.js", "esid": " sec-array.prototype.sort", "description": " >Array.prototype.sort.name is \"sort\".\n", "info": " |Array.prototype.sort (comparefn)\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/sort/precise-comparefn-throws.js", "esid": " sec-array.prototype.sort", "description": " >Previously implementation-defined aspects of Array.prototype.sort.\n", "info": " |Historically, many aspects of Array.prototype.sort remained\nimplementation-defined. https://github.com/tc39/ecma262/pull/1585\ndescribed some behaviors more precisely, reducing the amount of cases\nthat result in an implementation-defined sort order.\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/sort/precise-getter-appends-elements.js", "esid": " sec-array.prototype.sort", "description": " >Previously implementation-defined aspects of Array.prototype.sort.\n", "info": " |Historically, many aspects of Array.prototype.sort remained\nimplementation-defined. https://github.com/tc39/ecma262/pull/1585\ndescribed some behaviors more precisely, reducing the amount of cases\nthat result in an implementation-defined sort order.\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/sort/precise-getter-decreases-length.js", "esid": " sec-array.prototype.sort", "description": " >Previously implementation-defined aspects of Array.prototype.sort.\n", "info": " |Historically, many aspects of Array.prototype.sort remained\nimplementation-defined. https://github.com/tc39/ecma262/pull/1585\ndescribed some behaviors more precisely, reducing the amount of cases\nthat result in an implementation-defined sort order.\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/sort/precise-getter-deletes-predecessor.js", "esid": " sec-array.prototype.sort", "description": " >Previously implementation-defined aspects of Array.prototype.sort.\n", "info": " |Historically, many aspects of Array.prototype.sort remained\nimplementation-defined. https://github.com/tc39/ecma262/pull/1585\ndescribed some behaviors more precisely, reducing the amount of cases\nthat result in an implementation-defined sort order.\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/sort/precise-getter-deletes-successor.js", "esid": " sec-array.prototype.sort", "description": " >Previously implementation-defined aspects of Array.prototype.sort.\n", "info": " |Historically, many aspects of Array.prototype.sort remained\nimplementation-defined. https://github.com/tc39/ecma262/pull/1585\ndescribed some behaviors more precisely, reducing the amount of cases\nthat result in an implementation-defined sort order.\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/sort/precise-getter-increases-length.js", "esid": " sec-array.prototype.sort", "description": " >Previously implementation-defined aspects of Array.prototype.sort.\n", "info": " |Historically, many aspects of Array.prototype.sort remained\nimplementation-defined. https://github.com/tc39/ecma262/pull/1585\ndescribed some behaviors more precisely, reducing the amount of cases\nthat result in an implementation-defined sort order.\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/sort/precise-getter-pops-elements.js", "esid": " sec-array.prototype.sort", "description": " >Previously implementation-defined aspects of Array.prototype.sort.\n", "info": " |Historically, many aspects of Array.prototype.sort remained\nimplementation-defined. https://github.com/tc39/ecma262/pull/1585\ndescribed some behaviors more precisely, reducing the amount of cases\nthat result in an implementation-defined sort order.\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/sort/precise-getter-sets-predecessor.js", "esid": " sec-array.prototype.sort", "description": " >Previously implementation-defined aspects of Array.prototype.sort.\n", "info": " |Historically, many aspects of Array.prototype.sort remained\nimplementation-defined. https://github.com/tc39/ecma262/pull/1585\ndescribed some behaviors more precisely, reducing the amount of cases\nthat result in an implementation-defined sort order.\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/sort/precise-getter-sets-successor.js", "esid": " sec-array.prototype.sort", "description": " >Previously implementation-defined aspects of Array.prototype.sort.\n", "info": " |Historically, many aspects of Array.prototype.sort remained\nimplementation-defined. https://github.com/tc39/ecma262/pull/1585\ndescribed some behaviors more precisely, reducing the amount of cases\nthat result in an implementation-defined sort order.\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/sort/precise-setter-appends-elements.js", "esid": " sec-array.prototype.sort", "description": " >Previously implementation-defined aspects of Array.prototype.sort.\n", "info": " |Historically, many aspects of Array.prototype.sort remained\nimplementation-defined. https://github.com/tc39/ecma262/pull/1585\ndescribed some behaviors more precisely, reducing the amount of cases\nthat result in an implementation-defined sort order.\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/sort/precise-setter-decreases-length.js", "esid": " sec-array.prototype.sort", "description": " >Previously implementation-defined aspects of Array.prototype.sort.\n", "info": " |Historically, many aspects of Array.prototype.sort remained\nimplementation-defined. https://github.com/tc39/ecma262/pull/1585\ndescribed some behaviors more precisely, reducing the amount of cases\nthat result in an implementation-defined sort order.\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/sort/precise-setter-deletes-predecessor.js", "esid": " sec-array.prototype.sort", "description": " >Previously implementation-defined aspects of Array.prototype.sort.\n", "info": " |Historically, many aspects of Array.prototype.sort remained\nimplementation-defined. https://github.com/tc39/ecma262/pull/1585\ndescribed some behaviors more precisely, reducing the amount of cases\nthat result in an implementation-defined sort order.\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/sort/precise-setter-deletes-successor.js", "esid": " sec-array.prototype.sort", "description": " >Previously implementation-defined aspects of Array.prototype.sort.\n", "info": " |Historically, many aspects of Array.prototype.sort remained\nimplementation-defined. https://github.com/tc39/ecma262/pull/1585\ndescribed some behaviors more precisely, reducing the amount of cases\nthat result in an implementation-defined sort order.\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/sort/precise-setter-increases-length.js", "esid": " sec-array.prototype.sort", "description": " >Previously implementation-defined aspects of Array.prototype.sort.\n", "info": " |Historically, many aspects of Array.prototype.sort remained\nimplementation-defined. https://github.com/tc39/ecma262/pull/1585\ndescribed some behaviors more precisely, reducing the amount of cases\nthat result in an implementation-defined sort order.\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/sort/precise-setter-pops-elements.js", "esid": " sec-array.prototype.sort", "description": " >Previously implementation-defined aspects of Array.prototype.sort.\n", "info": " |Historically, many aspects of Array.prototype.sort remained\nimplementation-defined. https://github.com/tc39/ecma262/pull/1585\ndescribed some behaviors more precisely, reducing the amount of cases\nthat result in an implementation-defined sort order.\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/sort/precise-setter-sets-predecessor.js", "esid": " sec-array.prototype.sort", "description": " >Previously implementation-defined aspects of Array.prototype.sort.\n", "info": " |Historically, many aspects of Array.prototype.sort remained\nimplementation-defined. https://github.com/tc39/ecma262/pull/1585\ndescribed some behaviors more precisely, reducing the amount of cases\nthat result in an implementation-defined sort order.\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/sort/precise-setter-sets-successor.js", "esid": " sec-array.prototype.sort", "description": " >Previously implementation-defined aspects of Array.prototype.sort.\n", "info": " |Historically, many aspects of Array.prototype.sort remained\nimplementation-defined. https://github.com/tc39/ecma262/pull/1585\ndescribed some behaviors more precisely, reducing the amount of cases\nthat result in an implementation-defined sort order.\n"}, {"path": "./test262-main/test/built-ins/Array/prototype/splice/S15.4.4.12_A6.1_T3.js", "info": " Array.prototype.splice sets `length` on `this`", "esid": " sec-array.prototype.splice", "description": " Array.prototype.splice throws if `length` is read-only"}, {"path": "./test262-main/test/built-ins/Array/prototype/splice/call-with-boolean.js", "esid": " sec-array.prototype.splice", "description": " Array.prototype.splice applied to boolean primitive", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/splice/create-revoked-proxy.js", "esid": " sec-array.prototype.splice", "description": " Abrupt completion from constructor that is a revoked Proxy object", "info": " |[...]\n9. Let A be ? ArraySpeciesCreate(O, actualDeleteCount).\n[...]\n\n9.4.2.3 ArraySpeciesCreate\n\n[...]\n3. Let isArray be ? IsArray(originalArray).\n\n7.2.2 IsArray\n\n[...]\n3. If argument is a Proxy exotic object, then\na. If the value of the [[ProxyHandler]] internal slot of argument is\nnull, throw a TypeError exception.\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Array/prototype/splice/create-species-null.js", "esid": " sec-array.prototype.splice", "description": " >A null value for the @@species constructor is interpreted as `undefined`\n", "info": " |[...]\n9. Let A be ? ArraySpeciesCreate(O, actualDeleteCount).\n[...]\n\n9.4.2.3 ArraySpeciesCreate\n\n[...]\n5. Let C be ? Get(originalArray, \"constructor\").\n[...]\n7. If Type(C) is Object, then\na. Let C be ? Get(C, @@species).\nb. If C is null, let C be undefined.\n8. If C is undefined, return ? ArrayCreate(length).\n", "features": ["Symbol.species"]}, {"path": "./test262-main/test/built-ins/Array/prototype/splice/create-species-undef.js", "esid": " sec-array.prototype.splice", "description": " >An undefined value for the @@species constructor triggers the creationof\nan Array exotic object\n", "info": " |[...]\n9. Let A be ? ArraySpeciesCreate(O, actualDeleteCount).\n[...]\n\n9.4.2.3 ArraySpeciesCreate\n\n[...]\n5. Let C be ? Get(originalArray, \"constructor\").\n[...]\n7. If Type(C) is Object, then\na. Let C be ? Get(C, @@species).\nb. If C is null, let C be undefined.\n8. If C is undefined, return ? ArrayCreate(length).\n", "features": ["Symbol.species"]}, {"path": "./test262-main/test/built-ins/Array/prototype/splice/length.js", "esid": " sec-array.prototype.splice", "description": " >The \"length\" property of Array.prototype.splice\n", "info": " |17 ECMAScript Standard Built-in Objects\n\nEvery built-in function object, including constructors, has a length property\nwhose value is an integer. Unless otherwise specified, this value is equal to\nthe largest number of named arguments shown in the subclause headings for the\nfunction description. Optional parameters (which are indicated with brackets:\n[ ]) or rest parameters (which are shown using the form \u00ab...name\u00bb) are not\nincluded in the default argument count.\n\nUnless otherwise specified, the length property of a built-in function object\nhas the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/splice/name.js", "esid": " sec-array.prototype.splice", "description": " >Array.prototype.splice.name is \"splice\".\n", "info": " |Array.prototype.splice (start, deleteCount , ...items )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/splice/target-array-with-non-writable-property.js", "esid": " sec-array.prototype.splice", "description": " >Non-writable properties are overwritten by CreateDataPropertyOrThrow.\n", "info": " |22.1.3.26 Array.prototype.splice ( start, deleteCount, ...items )\n\n...\n11. Repeat, while k < actualDeleteCount\n...\nc. If fromPresent is true, then\n...\nii. Perform ? CreateDataPropertyOrThrow(A, ! ToString(k), fromValue).\n...\n", "features": ["Symbol.species"], "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/toLocaleString/length.js", "esid": " sec-array.prototype.tolocalestring", "description": " >The \"length\" property of Array.prototype.toLocaleString\n", "info": " |17 ECMAScript Standard Built-in Objects\n\nEvery built-in function object, including constructors, has a length property\nwhose value is an integer. Unless otherwise specified, this value is equal to\nthe largest number of named arguments shown in the subclause headings for the\nfunction description. Optional parameters (which are indicated with brackets:\n[ ]) or rest parameters (which are shown using the form \u00ab...name\u00bb) are not\nincluded in the default argument count.\n\nUnless otherwise specified, the length property of a built-in function object\nhas the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/toLocaleString/name.js", "esid": " sec-array.prototype.tolocalestring", "description": " >Array.prototype.toLocaleString.name is \"toLocaleString\".\n", "info": " |Array.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/toString/length.js", "esid": " sec-array.prototype.tostring", "description": " >Array.prototype.toString.length is 0.\n", "info": " |Array.prototype.toString ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/toString/name.js", "esid": " sec-array.prototype.tostring", "description": " >Array.prototype.toString.name is \"toString\".\n", "info": " |Array.prototype.toString ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/unshift/length.js", "esid": " sec-array.prototype.unshift", "description": " >The \"length\" property of Array.prototype.unshift\n", "info": " |22.1.3.29 Array.prototype.unshift ( ...items )\n\nThe length property of the unshift method is 1.\n\n17 ECMAScript Standard Built-in Objects\n\nEvery built-in function object, including constructors, has a length property\nwhose value is an integer. Unless otherwise specified, this value is equal to\nthe largest number of named arguments shown in the subclause headings for the\nfunction description. Optional parameters (which are indicated with brackets:\n[ ]) or rest parameters (which are shown using the form \u00ab...name\u00bb) are not\nincluded in the default argument count.\n\nUnless otherwise specified, the length property of a built-in function object\nhas the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Array/prototype/unshift/name.js", "esid": " sec-array.prototype.unshift", "description": " >Array.prototype.unshift.name is \"unshift\".\n", "info": " |Array.prototype.unshift ( ...items )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/ArrayBuffer/isView/arg-has-no-viewedarraybuffer.js", "esid": " sec-arraybuffer.isview", "description": " >Return false if arg has no [[ViewedArrayBuffer]] internal slot.\n", "info": " |24.1.3.1 ArrayBuffer.isView ( arg )\n\n1. If Type(arg) is not Object, return false.\n2. If arg has a [[ViewedArrayBuffer]] internal slot, return true.\n3. Return false.\n"}, {"path": "./test262-main/test/built-ins/ArrayBuffer/isView/arg-is-arraybuffer.js", "esid": " sec-arraybuffer.isview", "description": " >Return false from an instance of ArrayBuffer\n", "info": " |24.1.3.1 ArrayBuffer.isView ( arg )\n\n1. If Type(arg) is not Object, return false.\n2. If arg has a [[ViewedArrayBuffer]] internal slot, return true.\n3. Return false.\n"}, {"path": "./test262-main/test/built-ins/ArrayBuffer/isView/arg-is-dataview-buffer.js", "esid": " sec-arraybuffer.isview", "description": " >Return false from DataView's instance `.buffer`\n", "info": " |24.1.3.1 ArrayBuffer.isView ( arg )\n\n1. If Type(arg) is not Object, return false.\n2. If arg has a [[ViewedArrayBuffer]] internal slot, return true.\n3. Return false.\n", "features": ["DataView"]}, {"path": "./test262-main/test/built-ins/ArrayBuffer/isView/arg-is-dataview-constructor.js", "esid": " sec-arraybuffer.isview", "description": " >Return false if arg is the DataView constructor\n", "info": " |24.1.3.1 ArrayBuffer.isView ( arg )\n\n1. If Type(arg) is not Object, return false.\n2. If arg has a [[ViewedArrayBuffer]] internal slot, return true.\n3. Return false.\n", "features": ["DataView"]}, {"path": "./test262-main/test/built-ins/ArrayBuffer/isView/arg-is-dataview.js", "esid": " sec-arraybuffer.isview", "description": " >Return true if is an instance of DataView\n", "info": " |24.1.3.1 ArrayBuffer.isView ( arg )\n\n1. If Type(arg) is not Object, return false.\n2. If arg has a [[ViewedArrayBuffer]] internal slot, return true.\n3. Return false.\n", "features": ["DataView"]}, {"path": "./test262-main/test/built-ins/ArrayBuffer/isView/arg-is-not-object.js", "esid": " sec-arraybuffer.isview", "description": " >Return false if arg is not Object\n", "info": " |24.1.3.1 ArrayBuffer.isView ( arg )\n\n1. If Type(arg) is not Object, return false.\n...\n"}, {"path": "./test262-main/test/built-ins/ArrayBuffer/isView/arg-is-typedarray-buffer.js", "esid": " sec-arraybuffer.isview", "description": " >Return false from TypedArray's instance `.buffer`\n", "info": " |24.1.3.1 ArrayBuffer.isView ( arg )\n\n1. If Type(arg) is not Object, return false.\n2. If arg has a [[ViewedArrayBuffer]] internal slot, return true.\n3. Return false.\n", "features": ["TypedArray"], "includes": ["testTypedArray.js"]}, {"path": "./test262-main/test/built-ins/ArrayBuffer/isView/arg-is-typedarray-constructor.js", "esid": " sec-arraybuffer.isview", "description": " >Return false if arg is a TypedArray constructor\n", "info": " |24.1.3.1 ArrayBuffer.isView ( arg )\n\n1. If Type(arg) is not Object, return false.\n2. If arg has a [[ViewedArrayBuffer]] internal slot, return true.\n3. Return false.\n", "features": ["TypedArray"], "includes": ["testTypedArray.js"]}, {"path": "./test262-main/test/built-ins/ArrayBuffer/isView/arg-is-typedarray.js", "esid": " sec-arraybuffer.isview", "description": " >Return true if arg is an instance of TypedArray\n", "info": " |24.1.3.1 ArrayBuffer.isView ( arg )\n\n1. If Type(arg) is not Object, return false.\n2. If arg has a [[ViewedArrayBuffer]] internal slot, return true.\n3. Return false.\n", "features": ["TypedArray"], "includes": ["testTypedArray.js"]}, {"path": "./test262-main/test/built-ins/ArrayBuffer/isView/invoked-as-a-fn.js", "esid": " sec-arraybuffer.isview", "description": " >`isView` can be invoked as a function\n", "info": " |24.1.3.1 ArrayBuffer.isView ( arg )\n\n1. If Type(arg) is not Object, return false.\n2. If arg has a [[ViewedArrayBuffer]] internal slot, return true.\n3. Return false.\n", "features": ["TypedArray", "DataView"], "includes": ["testTypedArray.js"]}, {"path": "./test262-main/test/built-ins/ArrayBuffer/isView/length.js", "esid": " sec-arraybuffer.isview", "description": " >ArrayBuffer.isView.length is 1.\n", "info": " |ArrayBuffer.isView ( arg )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/ArrayBuffer/isView/name.js", "esid": " sec-arraybuffer.isview", "description": " >ArrayBuffer.isView.name is \"isView\".\n", "info": " |ArrayBuffer.isView ( arg )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/ArrayBuffer/isView/no-arg.js", "esid": " sec-arraybuffer.isview", "description": " >Return false if isView is called with no arg\n", "info": " |24.1.3.1 ArrayBuffer.isView ( arg )\n\n1. If Type(arg) is not Object, return false.\n...\n"}, {"path": "./test262-main/test/built-ins/ArrayBuffer/isView/prop-desc.js", "esid": " sec-arraybuffer.isview", "description": " >\"isView\" property of ArrayBuffer\n", "info": " |ES6 section 17: Every other data property described in clauses 18 through 26\nand in Annex B.2 has the attributes { [[Writable]]: true,\n[[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/ArrayBuffer/length.js", "esid": " sec-arraybuffer-constructor", "description": " >ArrayBuffer.length is 1.\n", "info": " |ArrayBuffer ( length )\n\nECMAScript Standard Built-in Objects:\n\nEvery built-in function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description. Optional parameters\n(which are indicated with brackets: [ ]) or rest parameters (which\nare shown using the form \u00ab...name\u00bb) are not included in the default\nargument count.\n\nUnless otherwise specified, the length property of a built-in function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["ArrayBuffer"]}, {"path": "./test262-main/test/built-ins/ArrayBuffer/name.js", "esid": " sec-arraybuffer-constructor", "description": " >ArrayBuffer.name is \"ArrayBuffer\".\n", "info": " |17 ECMAScript Standard Built-in Objects:\n\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value is a\nString.\n\nUnless otherwise specified, the name property of a built-in Function object,\nif it exists, has the attributes { [[Writable]]: false, [[Enumerable]]:\nfalse, [[Configurable]]: true }.\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/ArrayBuffer/prototype/byteLength/length.js", "esid": " sec-get-arraybuffer.prototype.bytelength", "description": " >get ArrayBuffer.prototype.byteLength.length is 0.\n", "info": " |get ArrayBuffer.prototype.byteLength\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/ArrayBuffer/prototype/byteLength/prop-desc.js", "esid": " sec-get-arraybuffer.prototype.bytelength", "description": " >\"byteLength\" property of ArrayBuffer.prototype\n", "info": " |ArrayBuffer.prototype.byteLength is an accessor property whose set accessor\nfunction is undefined.\n\nSection 17: Every accessor property described in clauses 18 through 26 and in\nAnnex B.2 has the attributes {[[Enumerable]]: false, [[Configurable]]: true }\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/ArrayBuffer/prototype/byteLength/this-is-not-object.js", "esid": " sec-get-arraybuffer.prototype.bytelength", "description": " Throws a TypeError exception when `this` is not Object", "info": " |24.1.4.1 get ArrayBuffer.prototype.byteLength\n\n1. Let O be the this value.\n2. If Type(O) is not Object, throw a TypeError exception.\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/ArrayBuffer/prototype/slice/context-is-not-object.js", "esid": " sec-arraybuffer.prototype.slice", "description": " >Throws a TypeError if `this` is not an Object.\n", "info": " |ArrayBuffer.prototype.slice ( start, end )\n\n1. Let O be the this value.\n2. If Type(O) is not Object, throw a TypeError exception.\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/ArrayBuffer/prototype/slice/length.js", "esid": " sec-arraybuffer.prototype.slice", "description": " >ArrayBuffer.prototype.slice.length is 2.\n", "info": " |ArrayBuffer.prototype.slice ( start, end )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/ArrayBuffer/prototype/slice/name.js", "esid": " sec-arraybuffer.prototype.slice", "description": " >ArrayBuffer.prototype.slice.name is \"slice\".\n", "info": " |ArrayBuffer.prototype.slice ( start, end )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/ArrayBuffer/prototype/slice/species-is-null.js", "esid": " sec-arraybuffer.prototype.slice", "description": " >Uses default constructor is species constructor is null.\n", "info": " |ArrayBuffer.prototype.slice ( start, end )\n\n...\n13. Let ctor be SpeciesConstructor(O, %ArrayBuffer%).\n14. ReturnIfAbrupt(ctor).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n...\n6. Let S be Get(C, @@species).\n7. ReturnIfAbrupt(S).\n8. If S is either undefined or null, return defaultConstructor.\n...\n", "features": ["Symbol.species"]}, {"path": "./test262-main/test/built-ins/ArrayBuffer/prototype/slice/species-is-undefined.js", "esid": " sec-arraybuffer.prototype.slice", "description": " >Uses default constructor is species constructor is undefined.\n", "info": " |ArrayBuffer.prototype.slice ( start, end )\n\n...\n13. Let ctor be SpeciesConstructor(O, %ArrayBuffer%).\n14. ReturnIfAbrupt(ctor).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n...\n6. Let S be Get(C, @@species).\n7. ReturnIfAbrupt(S).\n8. If S is either undefined or null, return defaultConstructor.\n...\n", "features": ["Symbol.species"]}, {"path": "./test262-main/test/built-ins/ArrayBuffer/return-abrupt-from-length-symbol.js", "esid": " sec-arraybuffer-length", "description": " >Throws a TypeError if length is a symbol\n", "info": " |ArrayBuffer( length )\n\n1. If NewTarget is undefined, throw a TypeError exception.\n2. Let byteLength be ? ToIndex(length).\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/ArrayIteratorPrototype/Symbol.toStringTag/value-from-to-string.js", "esid": " 22.1.5.2.2", "description": " >`Object.prototype.toString` should honor the value of the @@toStringTag\nattribute.\n", "version": 6, "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/built-ins/ArrayIteratorPrototype/next/Float32Array.js", "esid": " sec-%arrayiteratorprototype%.next", "description": " >Visits each element of the array in order and ceases iteration once all\nvalues have been visited.\n", "features": ["Symbol.iterator", "TypedArray"]}, {"path": "./test262-main/test/built-ins/ArrayIteratorPrototype/next/Float64Array.js", "esid": " sec-%arrayiteratorprototype%.next", "description": " >Visits each element of the array in order and ceases iteration once all\nvalues have been visited.\n", "features": ["Symbol.iterator", "TypedArray"]}, {"path": "./test262-main/test/built-ins/ArrayIteratorPrototype/next/Int16Array.js", "esid": " sec-%arrayiteratorprototype%.next", "description": " >Visits each element of the array in order and ceases iteration once all\nvalues have been visited.\n", "features": ["Symbol.iterator", "TypedArray"]}, {"path": "./test262-main/test/built-ins/ArrayIteratorPrototype/next/Int32Array.js", "esid": " sec-%arrayiteratorprototype%.next", "description": " >Visits each element of the array in order and ceases iteration once all\nvalues have been visited.\n", "features": ["Symbol.iterator", "TypedArray"]}, {"path": "./test262-main/test/built-ins/ArrayIteratorPrototype/next/Int8Array.js", "esid": " sec-%arrayiteratorprototype%.next", "description": " >Visits each element of the array in order and ceases iteration once all\nvalues have been visited.\n", "features": ["Symbol.iterator", "TypedArray"]}, {"path": "./test262-main/test/built-ins/ArrayIteratorPrototype/next/Uint16Array.js", "esid": " sec-%arrayiteratorprototype%.next", "description": " >Visits each element of the array in order and ceases iteration once all\nvalues have been visited.\n", "features": ["Symbol.iterator", "TypedArray"]}, {"path": "./test262-main/test/built-ins/ArrayIteratorPrototype/next/Uint32Array.js", "esid": " sec-%arrayiteratorprototype%.next", "description": " >Visits each element of the array in order and ceases iteration once all\nvalues have been visited.\n", "features": ["Symbol.iterator", "TypedArray"]}, {"path": "./test262-main/test/built-ins/ArrayIteratorPrototype/next/Uint8Array.js", "esid": " sec-%arrayiteratorprototype%.next", "description": " >Visits each element of the array in order and ceases iteration once all\nvalues have been visited.\n", "features": ["Symbol.iterator", "TypedArray"]}, {"path": "./test262-main/test/built-ins/ArrayIteratorPrototype/next/Uint8ClampedArray.js", "esid": " sec-%arrayiteratorprototype%.next", "description": " >Visits each element of the array in order and ceases iteration once all\nvalues have been visited.\n", "features": ["Symbol.iterator", "TypedArray"]}, {"path": "./test262-main/test/built-ins/ArrayIteratorPrototype/next/iteration-mutable.js", "esid": " 22.1.3.30", "description": " >When an item is added to the array after the iterator is created but\nbefore the iterator is \"done\" (as defined by 22.1.5.2.1), the new item\nshould be accessible via iteration. When an item is added to the array\nafter the iterator is \"done\", the new item should not be accessible via\niteration.\n", "version": 6, "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/built-ins/ArrayIteratorPrototype/next/iteration.js", "esid": " 22.1.3.30", "description": " >The method should return a valid iterator with the context as the\nIteratedObject.\n", "version": 6, "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/built-ins/ArrayIteratorPrototype/next/length.js", "esid": " sec-%arrayiteratorprototype%.next", "description": " >%ArrayIteratorPrototype%.next.length is 0.\n", "info": " |%ArrayIteratorPrototype%.next( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/built-ins/ArrayIteratorPrototype/next/name.js", "esid": " sec-%arrayiteratorprototype%.next", "description": " >%ArrayIteratorPrototype%.next.name is \"next\".\n", "info": " |%ArrayIteratorPrototype%.next( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/built-ins/ArrayIteratorPrototype/next/non-own-slots.js", "description": " >If the `this` value does not have all of the internal slots of an Array\nIterator Instance (22.1.5.3), throw a TypeError exception.\n", "esid": " sec-%arrayiteratorprototype%.next", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/built-ins/ArrayIteratorPrototype/next/property-descriptor.js", "esid": " sec-%arrayiteratorprototype%.next", "description": " >The method should exist on the ArrayIterator prototype, and it should be\nwritable and configurable, but not enumerable.\n", "includes": ["propertyHelper.js"], "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/built-ins/Boolean/prototype/toString/length.js", "esid": " sec-boolean.prototype.tostring", "description": " >Boolean.prototype.toString.length is 0.\n", "info": " |Boolean.prototype.toString ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Boolean/prototype/toString/name.js", "esid": " sec-boolean.prototype.tostring", "description": " >Boolean.prototype.toString.name is \"toString\".\n", "info": " |Boolean.prototype.toString ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Boolean/prototype/valueOf/length.js", "esid": " sec-boolean.prototype.valueof", "description": " >Boolean.prototype.valueOf.length is 0.\n", "info": " |Boolean.prototype.valueOf ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Boolean/prototype/valueOf/name.js", "esid": " sec-boolean.prototype.valueof", "description": " >Boolean.prototype.valueOf.name is \"valueOf\".\n", "info": " |Boolean.prototype.valueOf ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Boolean/symbol-coercion.js", "esid": " sec-toboolean", "description": " >Boolean coercion operations on Symbols\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/DataView/buffer-not-object-throws.js", "esid": " sec-dataview-buffer-byteoffset-bytelength", "description": " >Throws a TypeError if buffer is not Object\n", "info": " |24.2.2.1 DataView (buffer, byteOffset, byteLength )\n\n1. If NewTarget is undefined, throw a TypeError exception.\n2. If Type(buffer) is not Object, throw a TypeError exception.\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/DataView/name.js", "esid": " sec-dataview-constructor", "description": " >The name property of DataView is \"DataView\"\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/buffer/length.js", "esid": " sec-get-dataview.prototype.buffer", "description": " >get DataView.prototype.buffer.length is 0.\n", "info": " |get DataView.prototype.buffer\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/buffer/prop-desc.js", "esid": " sec-get-dataview.prototype.buffer", "description": " >\"buffer\" property of DataView.prototype\n", "info": " |DataView.prototype.buffer is an accessor property whose set accessor function\nis undefined.\n\nSection 17: Every accessor property described in clauses 18 through 26 and in\nAnnex B.2 has the attributes {[[Enumerable]]: false, [[Configurable]]: true }\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/buffer/this-is-not-object.js", "esid": " sec-get-dataview.prototype.buffer", "description": " Throws a TypeError exception when `this` is not Object", "info": " |24.2.4.1 get DataView.prototype.buffer\n\n1. Let O be the this value.\n2. If Type(O) is not Object, throw a TypeError exception.\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/byteLength/length.js", "esid": " sec-get-dataview.prototype.bytelength", "description": " >get DataView.prototype.byteLength.length is 0.\n", "info": " |get DataView.prototype.byteLength\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/byteLength/prop-desc.js", "esid": " sec-get-dataview.prototype.bytelength", "description": " >\"byteLength\" property of DataView.prototype\n", "info": " |24.2.4.2 get DataView.prototype.byteLength\n\nDataView.prototype.byteLength is an accessor property whose set accessor\nfunction is undefined.\n\nSection 17: Every accessor property described in clauses 18 through 26 and in\nAnnex B.2 has the attributes {[[Enumerable]]: false, [[Configurable]]: true }\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/byteLength/this-is-not-object.js", "esid": " sec-get-dataview.prototype.bytelength", "description": " Throws a TypeError exception when `this` is not Object", "info": " |24.2.4.2 get DataView.prototype.byteLength\n\n1. Let O be the this value.\n2. If Type(O) is not Object, throw a TypeError exception.\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/byteOffset/length.js", "esid": " sec-get-dataview.prototype.byteoffset", "description": " >get DataView.prototype.byteOffset.length is 0.\n", "info": " |get DataView.prototype.byteOffset\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/byteOffset/prop-desc.js", "esid": " sec-get-dataview.prototype.byteoffset", "description": " >\"byteOffset\" property of DataView.prototype\n", "info": " |DataView.prototype.byteOffset is an accessor property whose set accessor\nfunction is undefined.\n\nSection 17: Every accessor property described in clauses 18 through 26 and in\nAnnex B.2 has the attributes {[[Enumerable]]: false, [[Configurable]]: true }\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/byteOffset/this-is-not-object.js", "esid": " sec-get-dataview.prototype.byteoffset", "description": " Throws a TypeError exception when `this` is not Object", "info": " |24.2.4.3 get DataView.prototype.byteOffset\n\n1. Let O be the this value.\n2. If Type(O) is not Object, throw a TypeError exception.\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getBigInt64/return-abrupt-from-tonumber-byteoffset-symbol.js", "esid": " sec-dataview.prototype.getbigint64", "description": " >Return abrupt from ToNumber(symbol byteOffset)\n", "info": " |DataView.prototype.getBigInt64 ( byteOffset [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be undefined.\n3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Int64\").\n\n24.3.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\n\n...\n4. Let getIndex be ? ToNumber(requestIndex).\n...\n", "features": ["DataView", "ArrayBuffer", "Symbol", "BigInt", "arrow-function"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getBigInt64/this-is-not-object.js", "esid": " sec-dataview.prototype.getbigint64", "description": " Throws a TypeError if this is not Object", "info": " |DataView.prototype.getBigInt64 ( byteOffset [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be undefined.\n3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Int64\").\n\n24.3.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\n\n1. If Type(view) is not Object, throw a TypeError exception.\n...\n", "features": ["DataView", "ArrayBuffer", "Symbol", "BigInt", "arrow-function"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getBigUint64/return-abrupt-from-tonumber-byteoffset-symbol.js", "esid": " sec-dataview.prototype.getbiguint64", "description": " >Return abrupt from ToNumber(symbol byteOffset)\n", "features": ["DataView", "ArrayBuffer", "Symbol", "BigInt", "arrow-function"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getBigUint64/this-is-not-object.js", "esid": " sec-dataview.prototype.getbiguint64", "description": " Throws a TypeError if this is not Object", "features": ["DataView", "ArrayBuffer", "Symbol", "BigInt", "arrow-function"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getFloat32/name.js", "esid": " sec-dataview.prototype.getfloat32", "description": " >DataView.prototype.getFloat32.name is \"getFloat32\".\n", "info": " |DataView.prototype.getFloat32 ( byteOffset [ , littleEndian ] )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getFloat32/return-abrupt-from-tonumber-byteoffset-symbol.js", "esid": " sec-dataview.prototype.getfloat32", "description": " >Return abrupt from ToNumber(symbol byteOffset)\n", "info": " |24.2.4.5 DataView.prototype.getFloat32 ( byteOffset [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Float32\").\n\n24.2.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\n\n...\n4. Let numberIndex be ? ToNumber(requestIndex).\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getFloat32/this-is-not-object.js", "esid": " sec-dataview.prototype.getfloat32", "description": " Throws a TypeError if this is not Object", "info": " |24.2.4.5 DataView.prototype.getFloat32 ( byteOffset [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Float32\").\n\n24.2.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\n\n1. If Type(view) is not Object, throw a TypeError exception.\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getFloat32/to-boolean-littleendian.js", "esid": " sec-dataview.prototype.getfloat32", "description": " >Boolean littleEndian argument coerced in ToBoolean\n", "info": " |24.2.4.5 DataView.prototype.getFloat32 ( byteOffset [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Float32\").\n\n24.2.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\n\n...\n14. Let bufferIndex be getIndex + viewOffset.\n15. Return GetValueFromBuffer(buffer, bufferIndex, type, isLittleEndian).\n...\n\n24.1.1.5 GetValueFromBuffer ( arrayBuffer, byteIndex, type [ , isLittleEndian\n] )\n\n...\n8. If isLittleEndian is false, reverse the order of the elements of rawValue.\n...\n", "features": ["DataView.prototype.setUint8", "Symbol"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getFloat64/name.js", "esid": " sec-dataview.prototype.getfloat64", "description": " >DataView.prototype.getFloat64.name is \"getFloat64\".\n", "info": " |DataView.prototype.getFloat64 ( byteOffset [ , littleEndian ] )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getFloat64/return-abrupt-from-tonumber-byteoffset-symbol.js", "esid": " sec-dataview.prototype.getfloat64", "description": " >Return abrupt from ToNumber(symbol byteOffset)\n", "info": " |24.2.4.6 DataView.prototype.getFloat64 ( byteOffset [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Float64\").\n\n24.2.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\n\n...\n4. Let numberIndex be ? ToNumber(requestIndex).\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getFloat64/this-is-not-object.js", "esid": " sec-dataview.prototype.getfloat64", "description": " Throws a TypeError if this is not Object", "info": " |24.2.4.6 DataView.prototype.getFloat64 ( byteOffset [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Float64\").\n\n24.2.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\n\n1. If Type(view) is not Object, throw a TypeError exception.\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getFloat64/to-boolean-littleendian.js", "esid": " sec-dataview.prototype.getfloat64", "description": " >Boolean littleEndian argument coerced in ToBoolean\n", "info": " |24.2.4.6 DataView.prototype.getFloat64 ( byteOffset [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Float64\").\n\n24.2.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\n\n...\n14. Let bufferIndex be getIndex + viewOffset.\n15. Return GetValueFromBuffer(buffer, bufferIndex, type, isLittleEndian).\n...\n\n24.1.1.5 GetValueFromBuffer ( arrayBuffer, byteIndex, type [ , isLittleEndian\n] )\n\n...\n8. If isLittleEndian is false, reverse the order of the elements of rawValue.\n...\n", "features": ["DataView.prototype.setUint8", "Symbol"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getInt16/name.js", "esid": " sec-dataview.prototype.getint16", "description": " >DataView.prototype.getInt16.name is \"getInt16\".\n", "info": " |DataView.prototype.getInt16 ( byteOffset [ , littleEndian ] )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getInt16/return-abrupt-from-tonumber-byteoffset-symbol.js", "esid": " sec-dataview.prototype.getint16", "description": " >Return abrupt from ToNumber(symbol byteOffset)\n", "info": " |24.2.4.8 DataView.prototype.getInt16 ( byteOffset [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Int16\").\n\n24.2.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\n\n...\n4. Let numberIndex be ? ToNumber(requestIndex).\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getInt16/this-is-not-object.js", "esid": " sec-dataview.prototype.getint16", "description": " Throws a TypeError if this is not Object", "info": " |24.2.4.8 DataView.prototype.getInt16 ( byteOffset [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Int16\").\n\n24.2.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\n\n1. If Type(view) is not Object, throw a TypeError exception.\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getInt16/to-boolean-littleendian.js", "esid": " sec-dataview.prototype.getint16", "description": " >Boolean littleEndian argument coerced in ToBoolean\n", "info": " |24.2.4.8 DataView.prototype.getInt16 ( byteOffset [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Int16\").\n\n24.2.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\n\n...\n14. Let bufferIndex be getIndex + viewOffset.\n15. Return GetValueFromBuffer(buffer, bufferIndex, type, isLittleEndian).\n...\n\n24.1.1.5 GetValueFromBuffer ( arrayBuffer, byteIndex, type [ , isLittleEndian\n] )\n\n...\n8. If isLittleEndian is false, reverse the order of the elements of rawValue.\n...\n", "features": ["DataView.prototype.setUint8", "Symbol"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getInt32/name.js", "esid": " sec-dataview.prototype.getint32", "description": " >DataView.prototype.getInt32.name is \"getInt32\".\n", "info": " |DataView.prototype.getInt32 ( byteOffset [ , littleEndian ] )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getInt32/return-abrupt-from-tonumber-byteoffset-symbol.js", "esid": " sec-dataview.prototype.getint32", "description": " >Return abrupt from ToNumber(symbol byteOffset)\n", "info": " |24.2.4.9 DataView.prototype.getInt32 ( byteOffset [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Int32\").\n\n24.2.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\n\n...\n4. Let numberIndex be ? ToNumber(requestIndex).\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getInt32/this-is-not-object.js", "esid": " sec-dataview.prototype.getint32", "description": " Throws a TypeError if this is not Object", "info": " |24.2.4.9 DataView.prototype.getInt32 ( byteOffset [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Int32\").\n\n24.2.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\n\n1. If Type(view) is not Object, throw a TypeError exception.\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getInt32/to-boolean-littleendian.js", "esid": " sec-dataview.prototype.getint32", "description": " >Boolean littleEndian argument coerced in ToBoolean\n", "info": " |24.2.4.9 DataView.prototype.getInt32 ( byteOffset [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Int32\").\n\n24.2.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\n\n...\n14. Let bufferIndex be getIndex + viewOffset.\n15. Return GetValueFromBuffer(buffer, bufferIndex, type, isLittleEndian).\n...\n\n24.1.1.5 GetValueFromBuffer ( arrayBuffer, byteIndex, type [ , isLittleEndian\n] )\n\n...\n8. If isLittleEndian is false, reverse the order of the elements of rawValue.\n...\n", "features": ["DataView.prototype.setUint8", "Symbol"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getInt8/length.js", "esid": " sec-dataview.prototype.getint8", "description": " >DataView.prototype.getInt8.length is 1.\n", "info": " |DataView.prototype.getInt8 ( byteOffset )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getInt8/name.js", "esid": " sec-dataview.prototype.getint8", "description": " >DataView.prototype.getInt8.name is \"getInt8\".\n", "info": " |DataView.prototype.getInt8 ( byteOffset )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getInt8/return-abrupt-from-tonumber-byteoffset-symbol.js", "esid": " sec-dataview.prototype.getint8", "description": " >Return abrupt from ToNumber(symbol byteOffset)\n", "info": " |24.2.4.7 DataView.prototype.getInt8 ( byteOffset )\n\n1. Let v be the this value.\n2. Return ? GetViewValue(v, byteOffset, true, \"Int8\").\n\n24.2.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\n\n...\n4. Let numberIndex be ? ToNumber(requestIndex).\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getInt8/this-is-not-object.js", "esid": " sec-dataview.prototype.getint8", "description": " Throws a TypeError if this is not Object", "info": " |24.2.4.7 DataView.prototype.getInt8 ( byteOffset )\n\n1. Let v be the this value.\n2. Return ? GetViewValue(v, byteOffset, true, \"Int8\").\n\n24.2.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\n\n1. If Type(view) is not Object, throw a TypeError exception.\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getUint16/name.js", "esid": " sec-dataview.prototype.getuint16", "description": " >DataView.prototype.getUint16.name is \"getUint16\".\n", "info": " |DataView.prototype.getUint16 ( byteOffset [ , littleEndian ] )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getUint16/return-abrupt-from-tonumber-byteoffset-symbol.js", "esid": " sec-dataview.prototype.getuint16", "description": " >Return abrupt from ToNumber(symbol byteOffset)\n", "info": " |24.2.4.11 DataView.prototype.getUint16 ( byteOffset [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Uint16\").\n\n24.2.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\n\n...\n4. Let numberIndex be ? ToNumber(requestIndex).\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getUint16/this-is-not-object.js", "esid": " sec-dataview.prototype.getuint16", "description": " Throws a TypeError if this is not Object", "info": " |24.2.4.11 DataView.prototype.getUint16 ( byteOffset [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Uint16\").\n\n24.2.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\n\n1. If Type(view) is not Object, throw a TypeError exception.\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getUint16/to-boolean-littleendian.js", "esid": " sec-dataview.prototype.getuint16", "description": " >Boolean littleEndian argument coerced in ToBoolean\n", "info": " |24.2.4.11 DataView.prototype.getUint16 ( byteOffset [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Uint16\").\n\n24.2.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\n\n...\n14. Let bufferIndex be getIndex + viewOffset.\n15. Return GetValueFromBuffer(buffer, bufferIndex, type, isLittleEndian).\n...\n\n24.1.1.5 GetValueFromBuffer ( arrayBuffer, byteIndex, type [ , isLittleEndian\n] )\n\n...\n8. If isLittleEndian is false, reverse the order of the elements of rawValue.\n...\n", "features": ["DataView.prototype.setUint8", "Symbol"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getUint32/name.js", "esid": " sec-dataview.prototype.getuint32", "description": " >DataView.prototype.getUint32.name is \"getUint32\".\n", "info": " |DataView.prototype.getUint32 ( byteOffset [ , littleEndian ] )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getUint32/return-abrupt-from-tonumber-byteoffset-symbol.js", "esid": " sec-dataview.prototype.getuint32", "description": " >Return abrupt from ToNumber(symbol byteOffset)\n", "info": " |24.2.4.12 DataView.prototype.getUint32 ( byteOffset [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Uint32\").\n\n24.2.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\n\n...\n4. Let numberIndex be ? ToNumber(requestIndex).\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getUint32/this-is-not-object.js", "esid": " sec-dataview.prototype.getuint32", "description": " Throws a TypeError if this is not Object", "info": " |24.2.4.12 DataView.prototype.getUint32 ( byteOffset [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Uint32\").\n\n24.2.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\n\n1. If Type(view) is not Object, throw a TypeError exception.\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getUint32/to-boolean-littleendian.js", "esid": " sec-dataview.prototype.getuint32", "description": " >Boolean littleEndian argument coerced in ToBoolean\n", "info": " |24.2.4.12 DataView.prototype.getUint32 ( byteOffset [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Uint32\").\n\n24.2.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\n\n...\n14. Let bufferIndex be getIndex + viewOffset.\n15. Return GetValueFromBuffer(buffer, bufferIndex, type, isLittleEndian).\n...\n\n24.1.1.5 GetValueFromBuffer ( arrayBuffer, byteIndex, type [ , isLittleEndian\n] )\n\n...\n8. If isLittleEndian is false, reverse the order of the elements of rawValue.\n...\n", "features": ["DataView.prototype.setUint8", "Symbol"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getUint8/length.js", "esid": " sec-dataview.prototype.getuint8", "description": " >DataView.prototype.getUint8.length is 1.\n", "info": " |DataView.prototype.getUint8 ( byteOffset )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getUint8/name.js", "esid": " sec-dataview.prototype.getuint8", "description": " >DataView.prototype.getUint8.name is \"getUint8\".\n", "info": " |DataView.prototype.getUint8 ( byteOffset )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getUint8/return-abrupt-from-tonumber-byteoffset-symbol.js", "esid": " sec-dataview.prototype.getuint8", "description": " >Return abrupt from ToNumber(symbol byteOffset)\n", "info": " |24.2.4.10 DataView.prototype.getUint8 ( byteOffset )\n\n1. Let v be the this value.\n2. Return ? GetViewValue(v, byteOffset, true, \"Uint8\").\n\n24.2.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\n\n...\n4. Let numberIndex be ? ToNumber(requestIndex).\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/getUint8/this-is-not-object.js", "esid": " sec-dataview.prototype.getuint8", "description": " Throws a TypeError if this is not Object", "info": " |24.2.4.10 DataView.prototype.getUint8 ( byteOffset )\n\n1. Let v be the this value.\n2. Return ? GetViewValue(v, byteOffset, true, \"Uint8\").\n\n24.2.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )\n\n1. If Type(view) is not Object, throw a TypeError exception.\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/setBigInt64/return-abrupt-from-tobigint-value-symbol.js", "esid": " sec-dataview.prototype.setbigint64", "description": " >Return abrupt from ToBigInt(symbol value)\n", "features": ["DataView", "ArrayBuffer", "Symbol", "BigInt"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/setBigInt64/this-is-not-object.js", "esid": " sec-dataview.prototype.setbigint64", "description": " Throws a TypeError if this is not Object", "features": ["DataView", "ArrayBuffer", "Symbol", "BigInt"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/setFloat32/name.js", "esid": " sec-dataview.prototype.setfloat32", "description": " >DataView.prototype.setFloat32.name is \"setFloat32\".\n", "info": " |DataView.prototype.setFloat32 ( byteOffset, value [ , littleEndian ] )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/setFloat32/range-check-after-value-conversion.js", "esid": " sec-dataview.prototype.setfloat32", "description": " >Index bounds checks are performed after value conversion.\n", "info": " |...\n3. Return SetViewValue(v, byteOffset, littleEndian, \"Float32\", value).\n\n24.2.1.2 SetViewValue ( view, requestIndex, isLittleEndian, type, value )\n...\n3. Let numberIndex be ToNumber(requestIndex).\n4. Let getIndex be ? ToInteger(numberIndex).\n...\n6. Let numberValue be ? ToNumber(value).\n...\n11. Let viewSize be the value of view's [[ByteLength]] internal slot.\n12. Let elementSize be the Number value of the Element Size value specified in Table 49 for Element Type type.\n13. If getIndex + elementSize > viewSize, throw a RangeError exception.\n...\n"}, {"path": "./test262-main/test/built-ins/DataView/prototype/setFloat32/return-abrupt-from-tonumber-byteoffset-symbol.js", "esid": " sec-dataview.prototype.setfloat32", "description": " >Return abrupt from ToNumber(symbol byteOffset)\n", "info": " |24.2.4.13 DataView.prototype.setFloat32 ( byteOffset, value [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? SetViewValue(v, byteOffset, littleEndian, \"Float32\", value).\n\n24.2.1.2 SetViewValue ( view, requestIndex, isLittleEndian, type, value )\n\n...\n4. Let numberIndex be ? ToNumber(requestIndex).\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/setFloat32/return-abrupt-from-tonumber-value-symbol.js", "esid": " sec-dataview.prototype.setfloat32", "description": " >Return abrupt from ToNumber(symbol value)\n", "info": " |24.2.4.13 DataView.prototype.setFloat32 ( byteOffset, value [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? SetViewValue(v, byteOffset, littleEndian, \"Float32\", value).\n\n24.2.1.2 SetViewValue ( view, requestIndex, isLittleEndian, type, value )\n\n...\n7. Let numberValue be ? ToNumber(value).\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/setFloat32/this-is-not-object.js", "esid": " sec-dataview.prototype.setfloat32", "description": " Throws a TypeError if this is not Object", "info": " |24.2.4.13 DataView.prototype.setFloat32 ( byteOffset, value [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? SetViewValue(v, byteOffset, littleEndian, \"Float32\", value).\n\n24.2.1.2 SetViewValue ( view, requestIndex, isLittleEndian, type, value )\n\n1. If Type(view) is not Object, throw a TypeError exception.\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/setFloat32/to-boolean-littleendian.js", "esid": " sec-dataview.prototype.setfloat32", "description": " >Boolean littleEndian argument coerced in ToBoolean\n", "info": " |24.2.4.13 DataView.prototype.setFloat32 ( byteOffset, value [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? SetViewValue(v, byteOffset, littleEndian, \"Float32\", value).\n\n24.2.1.2 SetViewValue ( view, requestIndex, isLittleEndian, type, value )\n\n...\n15. Let bufferIndex be getIndex + viewOffset.\n16. Return SetValueInBuffer(buffer, bufferIndex, type, numberValue, isLittleEndian).\n\n24.1.1.6 SetValueInBuffer ( arrayBuffer, byteIndex, type, value [ , isLittleEndian ] )\n\n...\n8. If type is \"Float32\", then\na. Set rawBytes to a List containing the 4 bytes that are the result of\nconverting value to IEEE 754-2008 binary32 format using \u201cRound to nearest,\nties to even\u201d rounding mode. If isLittleEndian is false, the bytes are\narranged in big endian order. Otherwise, the bytes are arranged in little\nendian order. [...]\n...\n", "features": ["DataView.prototype.getFloat32", "Symbol"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/setFloat64/name.js", "esid": " sec-dataview.prototype.setfloat64", "description": " >DataView.prototype.setFloat64.name is \"setFloat64\".\n", "info": " |DataView.prototype.setFloat64 ( byteOffset, value [ , littleEndian ] )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/setFloat64/range-check-after-value-conversion.js", "esid": " sec-dataview.prototype.setfloat64", "description": " >Index bounds checks are performed after value conversion.\n", "info": " |...\n3. Return SetViewValue(v, byteOffset, littleEndian, \"Float64\", value).\n\n24.2.1.2 SetViewValue ( view, requestIndex, isLittleEndian, type, value )\n...\n3. Let numberIndex be ToNumber(requestIndex).\n4. Let getIndex be ? ToInteger(numberIndex).\n...\n6. Let numberValue be ? ToNumber(value).\n...\n11. Let viewSize be the value of view's [[ByteLength]] internal slot.\n12. Let elementSize be the Number value of the Element Size value specified in Table 49 for Element Type type.\n13. If getIndex + elementSize > viewSize, throw a RangeError exception.\n...\n"}, {"path": "./test262-main/test/built-ins/DataView/prototype/setFloat64/return-abrupt-from-tonumber-byteoffset-symbol.js", "esid": " sec-dataview.prototype.setfloat64", "description": " >Return abrupt from ToNumber(symbol byteOffset)\n", "info": " |24.2.4.14 DataView.prototype.setFloat64 ( byteOffset, value [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? SetViewValue(v, byteOffset, littleEndian, \"Float64\", value).\n\n24.2.1.2 SetViewValue ( view, requestIndex, isLittleEndian, type, value )\n\n...\n4. Let numberIndex be ? ToNumber(requestIndex).\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/setFloat64/return-abrupt-from-tonumber-value-symbol.js", "esid": " sec-dataview.prototype.setfloat64", "description": " >Return abrupt from ToNumber(symbol value)\n", "info": " |24.2.4.14 DataView.prototype.setFloat64 ( byteOffset, value [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? SetViewValue(v, byteOffset, littleEndian, \"Float64\", value).\n\n24.2.1.2 SetViewValue ( view, requestIndex, isLittleEndian, type, value )\n\n...\n7. Let numberValue be ? ToNumber(value).\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/setFloat64/this-is-not-object.js", "esid": " sec-dataview.prototype.setfloat64", "description": " Throws a TypeError if this is not Object", "info": " |24.2.4.14 DataView.prototype.setFloat64 ( byteOffset, value [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? SetViewValue(v, byteOffset, littleEndian, \"Float64\", value).\n\n24.2.1.2 SetViewValue ( view, requestIndex, isLittleEndian, type, value )\n\n1. If Type(view) is not Object, throw a TypeError exception.\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/setFloat64/to-boolean-littleendian.js", "esid": " sec-dataview.prototype.setfloat64", "description": " >Boolean littleEndian argument coerced in ToBoolean\n", "info": " |24.2.4.14 DataView.prototype.setFloat64 ( byteOffset, value [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? SetViewValue(v, byteOffset, littleEndian, \"Float64\", value).\n\n24.2.1.2 SetViewValue ( view, requestIndex, isLittleEndian, type, value )\n\n...\n15. Let bufferIndex be getIndex + viewOffset.\n16. Return SetValueInBuffer(buffer, bufferIndex, type, numberValue, isLittleEndian).\n\n24.1.1.6 SetValueInBuffer ( arrayBuffer, byteIndex, type, value [ , isLittleEndian ] )\n\n...\n9. Else if type is \"Float64\", then\na. Set rawBytes to a List containing the 8 bytes that are the IEEE 754-2008\nbinary64 format encoding of value. If isLittleEndian is false, the bytes are\narranged in big endian order. Otherwise, the bytes are arranged in little\nendian order. [...]\n...\n", "features": ["DataView.prototype.getFloat64", "Symbol"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/setInt16/name.js", "esid": " sec-dataview.prototype.setint16", "description": " >DataView.prototype.setInt16.name is \"setInt16\".\n", "info": " |DataView.prototype.setInt16 ( byteOffset, value [ , littleEndian ] )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/setInt16/range-check-after-value-conversion.js", "esid": " sec-dataview.prototype.setint16", "description": " >Index bounds checks are performed after value conversion.\n", "info": " |...\n3. Return SetViewValue(v, byteOffset, littleEndian, \"Int16\", value).\n\n24.2.1.2 SetViewValue ( view, requestIndex, isLittleEndian, type, value )\n...\n3. Let numberIndex be ToNumber(requestIndex).\n4. Let getIndex be ? ToInteger(numberIndex).\n...\n6. Let numberValue be ? ToNumber(value).\n...\n11. Let viewSize be the value of view's [[ByteLength]] internal slot.\n12. Let elementSize be the Number value of the Element Size value specified in Table 49 for Element Type type.\n13. If getIndex + elementSize > viewSize, throw a RangeError exception.\n...\n"}, {"path": "./test262-main/test/built-ins/DataView/prototype/setInt16/return-abrupt-from-tonumber-byteoffset-symbol.js", "esid": " sec-dataview.prototype.setint16", "description": " >Return abrupt from ToNumber(symbol byteOffset)\n", "info": " |24.2.4.16 DataView.prototype.setInt16 ( byteOffset, value [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? SetViewValue(v, byteOffset, littleEndian, \"Int16\", value).\n\n24.2.1.2 SetViewValue ( view, requestIndex, isLittleEndian, type, value )\n\n...\n4. Let numberIndex be ? ToNumber(requestIndex).\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/setInt16/return-abrupt-from-tonumber-value-symbol.js", "esid": " sec-dataview.prototype.setint16", "description": " >Return abrupt from ToNumber(symbol value)\n", "info": " |24.2.4.16 DataView.prototype.setInt16 ( byteOffset, value [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? SetViewValue(v, byteOffset, littleEndian, \"Int16\", value).\n\n24.2.1.2 SetViewValue ( view, requestIndex, isLittleEndian, type, value )\n\n...\n7. Let numberValue be ? ToNumber(value).\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/setInt16/this-is-not-object.js", "esid": " sec-dataview.prototype.setint16", "description": " Throws a TypeError if this is not Object", "info": " |24.2.4.16 DataView.prototype.setInt16 ( byteOffset, value [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? SetViewValue(v, byteOffset, littleEndian, \"Int16\", value).\n\n24.2.1.2 SetViewValue ( view, requestIndex, isLittleEndian, type, value )\n\n1. If Type(view) is not Object, throw a TypeError exception.\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/setInt16/to-boolean-littleendian.js", "esid": " sec-dataview.prototype.setint16", "description": " >Boolean littleEndian argument coerced in ToBoolean\n", "info": " |24.2.4.16 DataView.prototype.setInt16 ( byteOffset, value [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? SetViewValue(v, byteOffset, littleEndian, \"Int16\", value).\n\n24.2.1.2 SetViewValue ( view, requestIndex, isLittleEndian, type, value )\n\n...\n15. Let bufferIndex be getIndex + viewOffset.\n16. Return SetValueInBuffer(buffer, bufferIndex, type, numberValue, isLittleEndian).\n", "features": ["DataView.prototype.getInt16", "Symbol"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/setInt32/name.js", "esid": " sec-dataview.prototype.setint32", "description": " >DataView.prototype.setInt32.name is \"setInt32\".\n", "info": " |DataView.prototype.setInt32 ( byteOffset, value [ , littleEndian ] )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/setInt32/range-check-after-value-conversion.js", "esid": " sec-dataview.prototype.setint32", "description": " >Index bounds checks are performed after value conversion.\n", "info": " |...\n3. Return SetViewValue(v, byteOffset, littleEndian, \"Int32\", value).\n\n24.2.1.2 SetViewValue ( view, requestIndex, isLittleEndian, type, value )\n...\n3. Let numberIndex be ToNumber(requestIndex).\n4. Let getIndex be ? ToInteger(numberIndex).\n...\n6. Let numberValue be ? ToNumber(value).\n...\n11. Let viewSize be the value of view's [[ByteLength]] internal slot.\n12. Let elementSize be the Number value of the Element Size value specified in Table 49 for Element Type type.\n13. If getIndex + elementSize > viewSize, throw a RangeError exception.\n...\n"}, {"path": "./test262-main/test/built-ins/DataView/prototype/setInt32/return-abrupt-from-tonumber-byteoffset-symbol.js", "esid": " sec-dataview.prototype.setint32", "description": " >Return abrupt from ToNumber(symbol byteOffset)\n", "info": " |24.2.4.17 DataView.prototype.setInt32 ( byteOffset, value [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? SetViewValue(v, byteOffset, littleEndian, \"Int32\", value).\n\n24.2.1.2 SetViewValue ( view, requestIndex, isLittleEndian, type, value )\n\n...\n4. Let numberIndex be ? ToNumber(requestIndex).\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/setInt32/return-abrupt-from-tonumber-value-symbol.js", "esid": " sec-dataview.prototype.setint32", "description": " >Return abrupt from ToNumber(symbol value)\n", "info": " |24.2.4.17 DataView.prototype.setInt32 ( byteOffset, value [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? SetViewValue(v, byteOffset, littleEndian, \"Int32\", value).\n\n24.2.1.2 SetViewValue ( view, requestIndex, isLittleEndian, type, value )\n\n...\n7. Let numberValue be ? ToNumber(value).\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/setInt32/this-is-not-object.js", "esid": " sec-dataview.prototype.setint32", "description": " Throws a TypeError if this is not Object", "info": " |24.2.4.17 DataView.prototype.setInt32 ( byteOffset, value [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? SetViewValue(v, byteOffset, littleEndian, \"Int32\", value).\n\n24.2.1.2 SetViewValue ( view, requestIndex, isLittleEndian, type, value )\n\n1. If Type(view) is not Object, throw a TypeError exception.\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/setInt32/to-boolean-littleendian.js", "esid": " sec-dataview.prototype.setint32", "description": " >Boolean littleEndian argument coerced in ToBoolean\n", "info": " |24.2.4.17 DataView.prototype.setInt32 ( byteOffset, value [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? SetViewValue(v, byteOffset, littleEndian, \"Int32\", value).\n\n24.2.1.2 SetViewValue ( view, requestIndex, isLittleEndian, type, value )\n\n...\n15. Let bufferIndex be getIndex + viewOffset.\n16. Return SetValueInBuffer(buffer, bufferIndex, type, numberValue, isLittleEndian).\n", "features": ["DataView.prototype.getInt32", "Symbol"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/setInt8/length.js", "esid": " sec-dataview.prototype.setint8", "description": " >DataView.prototype.setInt8.length is 2.\n", "info": " |DataView.prototype.setInt8 ( byteOffset, value )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/setInt8/name.js", "esid": " sec-dataview.prototype.setint8", "description": " >DataView.prototype.setInt8.name is \"setInt8\".\n", "info": " |DataView.prototype.setInt8 ( byteOffset, value )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/setInt8/range-check-after-value-conversion.js", "esid": " sec-dataview.prototype.setint8", "description": " >Index bounds checks are performed after value conversion.\n", "info": " |...\n3. Return SetViewValue(v, byteOffset, littleEndian, \"Int8\", value).\n\n24.2.1.2 SetViewValue ( view, requestIndex, isLittleEndian, type, value )\n...\n3. Let numberIndex be ToNumber(requestIndex).\n4. Let getIndex be ? ToInteger(numberIndex).\n...\n6. Let numberValue be ? ToNumber(value).\n...\n11. Let viewSize be the value of view's [[ByteLength]] internal slot.\n12. Let elementSize be the Number value of the Element Size value specified in Table 49 for Element Type type.\n13. If getIndex + elementSize > viewSize, throw a RangeError exception.\n...\n"}, {"path": "./test262-main/test/built-ins/DataView/prototype/setInt8/return-abrupt-from-tonumber-byteoffset-symbol.js", "esid": " sec-dataview.prototype.setint8", "description": " >Return abrupt from ToNumber(symbol byteOffset)\n", "info": " |24.2.4.15 DataView.prototype.setInt8 ( byteOffset, value )\n\n1. Let v be the this value.\n2. Return ? SetViewValue(v, byteOffset, true, \"Int8\", value).\n\n24.2.1.2 SetViewValue ( view, requestIndex, isLittleEndian, type, value )\n\n...\n4. Let numberIndex be ? ToNumber(requestIndex).\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/setInt8/return-abrupt-from-tonumber-value-symbol.js", "esid": " sec-dataview.prototype.setint8", "description": " >Return abrupt from ToNumber(symbol value)\n", "info": " |24.2.4.15 DataView.prototype.setInt8 ( byteOffset, value )\n\n1. Let v be the this value.\n2. Return ? SetViewValue(v, byteOffset, true, \"Int8\", value).\n\n24.2.1.2 SetViewValue ( view, requestIndex, isLittleEndian, type, value )\n\n...\n7. Let numberValue be ? ToNumber(value).\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/setInt8/this-is-not-object.js", "esid": " sec-dataview.prototype.setint8", "description": " Throws a TypeError if this is not Object", "info": " |24.2.4.15 DataView.prototype.setInt8 ( byteOffset, value )\n\n1. Let v be the this value.\n2. Return ? SetViewValue(v, byteOffset, true, \"Int8\", value).\n\n24.2.1.2 SetViewValue ( view, requestIndex, isLittleEndian, type, value )\n\n1. If Type(view) is not Object, throw a TypeError exception.\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/setUint16/name.js", "esid": " sec-dataview.prototype.setuint16", "description": " >DataView.prototype.setUint16.name is \"setUint16\".\n", "info": " |DataView.prototype.setUint16 ( byteOffset, value [ , littleEndian ] )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/setUint16/range-check-after-value-conversion.js", "esid": " sec-dataview.prototype.setuint16", "description": " >Index bounds checks are performed after value conversion.\n", "info": " |...\n3. Return SetViewValue(v, byteOffset, littleEndian, \"Uint16\", value).\n\n24.2.1.2 SetViewValue ( view, requestIndex, isLittleEndian, type, value )\n...\n3. Let numberIndex be ToNumber(requestIndex).\n4. Let getIndex be ? ToInteger(numberIndex).\n...\n6. Let numberValue be ? ToNumber(value).\n...\n11. Let viewSize be the value of view's [[ByteLength]] internal slot.\n12. Let elementSize be the Number value of the Element Size value specified in Table 49 for Element Type type.\n13. If getIndex + elementSize > viewSize, throw a RangeError exception.\n...\n"}, {"path": "./test262-main/test/built-ins/DataView/prototype/setUint16/return-abrupt-from-tonumber-byteoffset-symbol.js", "esid": " sec-dataview.prototype.setuint16", "description": " >Return abrupt from ToNumber(symbol byteOffset)\n", "info": " |24.2.4.19 DataView.prototype.setUint16 ( byteOffset, value [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? SetViewValue(v, byteOffset, littleEndian, \"Uint16\", value).\n\n24.2.1.2 SetViewValue ( view, requestIndex, isLittleEndian, type, value )\n\n...\n4. Let numberIndex be ? ToNumber(requestIndex).\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/setUint16/return-abrupt-from-tonumber-value-symbol.js", "esid": " sec-dataview.prototype.setuint16", "description": " >Return abrupt from ToNumber(symbol value)\n", "info": " |24.2.4.19 DataView.prototype.setUint16 ( byteOffset, value [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? SetViewValue(v, byteOffset, littleEndian, \"Uint16\", value).\n\n24.2.1.2 SetViewValue ( view, requestIndex, isLittleEndian, type, value )\n\n...\n7. Let numberValue be ? ToNumber(value).\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/setUint16/this-is-not-object.js", "esid": " sec-dataview.prototype.setuint16", "description": " Throws a TypeError if this is not Object", "info": " |24.2.4.19 DataView.prototype.setUint16 ( byteOffset, value [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? SetViewValue(v, byteOffset, littleEndian, \"Uint16\", value).\n\n24.2.1.2 SetViewValue ( view, requestIndex, isLittleEndian, type, value )\n\n1. If Type(view) is not Object, throw a TypeError exception.\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/setUint16/to-boolean-littleendian.js", "esid": " sec-dataview.prototype.setuint16", "description": " >Boolean littleEndian argument coerced in ToBoolean\n", "info": " |24.2.4.19 DataView.prototype.setUint16 ( byteOffset, value [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? SetViewValue(v, byteOffset, littleEndian, \"Uint16\", value).\n\n24.2.1.2 SetViewValue ( view, requestIndex, isLittleEndian, type, value )\n\n...\n15. Let bufferIndex be getIndex + viewOffset.\n16. Return SetValueInBuffer(buffer, bufferIndex, type, numberValue, isLittleEndian).\n", "features": ["DataView.prototype.getUint16", "Symbol"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/setUint32/name.js", "esid": " sec-dataview.prototype.setuint32", "description": " >DataView.prototype.setUint32.name is \"setUint32\".\n", "info": " |DataView.prototype.setUint32 ( byteOffset, value [ , littleEndian ] )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/setUint32/range-check-after-value-conversion.js", "esid": " sec-dataview.prototype.setuint32", "description": " >Index bounds checks are performed after value conversion.\n", "info": " |...\n3. Return SetViewValue(v, byteOffset, littleEndian, \"Uint32\", value).\n\n24.2.1.2 SetViewValue ( view, requestIndex, isLittleEndian, type, value )\n...\n3. Let numberIndex be ToNumber(requestIndex).\n4. Let getIndex be ? ToInteger(numberIndex).\n...\n6. Let numberValue be ? ToNumber(value).\n...\n11. Let viewSize be the value of view's [[ByteLength]] internal slot.\n12. Let elementSize be the Number value of the Element Size value specified in Table 49 for Element Type type.\n13. If getIndex + elementSize > viewSize, throw a RangeError exception.\n...\n"}, {"path": "./test262-main/test/built-ins/DataView/prototype/setUint32/return-abrupt-from-tonumber-byteoffset-symbol.js", "esid": " sec-dataview.prototype.setuint32", "description": " >Return abrupt from ToNumber(symbol byteOffset)\n", "info": " |24.2.4.20 DataView.prototype.setUint32 ( byteOffset, value [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? SetViewValue(v, byteOffset, littleEndian, \"Uint32\", value).\n\n24.2.1.2 SetViewValue ( view, requestIndex, isLittleEndian, type, value )\n\n...\n4. Let numberIndex be ? ToNumber(requestIndex).\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/setUint32/return-abrupt-from-tonumber-value-symbol.js", "esid": " sec-dataview.prototype.setuint32", "description": " >Return abrupt from ToNumber(symbol value)\n", "info": " |24.2.4.20 DataView.prototype.setUint32 ( byteOffset, value [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? SetViewValue(v, byteOffset, littleEndian, \"Uint32\", value).\n\n24.2.1.2 SetViewValue ( view, requestIndex, isLittleEndian, type, value )\n\n...\n7. Let numberValue be ? ToNumber(value).\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/setUint32/this-is-not-object.js", "esid": " sec-dataview.prototype.setuint32", "description": " Throws a TypeError if this is not Object", "info": " |24.2.4.20 DataView.prototype.setUint32 ( byteOffset, value [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? SetViewValue(v, byteOffset, littleEndian, \"Uint32\", value).\n\n24.2.1.2 SetViewValue ( view, requestIndex, isLittleEndian, type, value )\n\n1. If Type(view) is not Object, throw a TypeError exception.\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/setUint32/to-boolean-littleendian.js", "esid": " sec-dataview.prototype.setuint32", "description": " >Boolean littleEndian argument coerced in ToBoolean\n", "info": " |24.2.4.20 DataView.prototype.setUint32 ( byteOffset, value [ , littleEndian ] )\n\n1. Let v be the this value.\n2. If littleEndian is not present, let littleEndian be false.\n3. Return ? SetViewValue(v, byteOffset, littleEndian, \"Uint32\", value).\n\n24.2.1.2 SetViewValue ( view, requestIndex, isLittleEndian, type, value )\n\n...\n15. Let bufferIndex be getIndex + viewOffset.\n16. Return SetValueInBuffer(buffer, bufferIndex, type, numberValue, isLittleEndian).\n", "features": ["DataView.prototype.getUint32", "Symbol"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/setUint8/length.js", "esid": " sec-dataview.prototype.setuint8", "description": " >DataView.prototype.setUint8.length is 2.\n", "info": " |DataView.prototype.setUint8 ( byteOffset, value )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/setUint8/name.js", "esid": " sec-dataview.prototype.setuint8", "description": " >DataView.prototype.setUint8.name is \"setUint8\".\n", "info": " |DataView.prototype.setUint8 ( byteOffset, value )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/setUint8/range-check-after-value-conversion.js", "esid": " sec-dataview.prototype.setuint8", "description": " >Index bounds checks are performed after value conversion.\n", "info": " |...\n3. Return SetViewValue(v, byteOffset, littleEndian, \"Uint8\", value).\n\n24.2.1.2 SetViewValue ( view, requestIndex, isLittleEndian, type, value )\n...\n3. Let numberIndex be ToNumber(requestIndex).\n4. Let getIndex be ? ToInteger(numberIndex).\n...\n6. Let numberValue be ? ToNumber(value).\n...\n11. Let viewSize be the value of view's [[ByteLength]] internal slot.\n12. Let elementSize be the Number value of the Element Size value specified in Table 49 for Element Type type.\n13. If getIndex + elementSize > viewSize, throw a RangeError exception.\n...\n"}, {"path": "./test262-main/test/built-ins/DataView/prototype/setUint8/return-abrupt-from-tonumber-byteoffset-symbol.js", "esid": " sec-dataview.prototype.setuint8", "description": " >Return abrupt from ToNumber(symbol byteOffset)\n", "info": " |24.2.4.18 DataView.prototype.setUint8 ( byteOffset, value )\n\n1. Let v be the this value.\n2. Return ? SetViewValue(v, byteOffset, true, \"Uint8\", value).\n\n24.2.1.2 SetViewValue ( view, requestIndex, isLittleEndian, type, value )\n\n...\n4. Let numberIndex be ? ToNumber(requestIndex).\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/setUint8/return-abrupt-from-tonumber-value-symbol.js", "esid": " sec-dataview.prototype.setuint8", "description": " >Return abrupt from ToNumber(symbol value)\n", "info": " |24.2.4.18 DataView.prototype.setUint8 ( byteOffset, value )\n\n1. Let v be the this value.\n2. Return ? SetViewValue(v, byteOffset, true, \"Uint8\", value).\n\n24.2.1.2 SetViewValue ( view, requestIndex, isLittleEndian, type, value )\n\n...\n7. Let numberValue be ? ToNumber(value).\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/DataView/prototype/setUint8/this-is-not-object.js", "esid": " sec-dataview.prototype.setuint8", "description": " Throws a TypeError if this is not Object", "info": " |24.2.4.18 DataView.prototype.setUint8 ( byteOffset, value )\n\n1. Let v be the this value.\n2. Return ? SetViewValue(v, byteOffset, true, \"Uint8\", value).\n\n24.2.1.2 SetViewValue ( view, requestIndex, isLittleEndian, type, value )\n\n1. If Type(view) is not Object, throw a TypeError exception.\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/DataView/return-abrupt-tonumber-bytelength-symbol.js", "esid": " sec-dataview-buffer-byteoffset-bytelength", "description": " >Return abrupt from ToLength(symbol byteLength)\n", "info": " |24.2.2.1 DataView (buffer, byteOffset, byteLength )\n\n...\n10. If byteLength is undefined, then\na. Let viewByteLength be bufferByteLength - offset.\n11. Else,\na. Let viewByteLength be ? ToLength(byteLength).\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/DataView/return-abrupt-tonumber-byteoffset-symbol.js", "esid": " sec-dataview-buffer-byteoffset-bytelength", "description": " >Return abrupt from ToNumber(symbol byteOffset)\n", "info": " |24.2.2.1 DataView (buffer, byteOffset, byteLength )\n\n...\n4. Let numberOffset be ? ToNumber(byteOffset).\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Date/UTC/S15.9.4.3_A3_T2.js", "esid": " 15.9.4.3_A3_T2", "info": " |The Date.UTC property \"length\" has { ReadOnly, ! DontDelete, DontEnum }\nattributes\n", "version": 5, "description": " Checking DontDelete attribute"}, {"path": "./test262-main/test/built-ins/Date/UTC/name.js", "esid": " sec-date.utc", "description": " >Date.UTC.name is \"UTC\".\n", "info": " |Date.UTC ( year, month [ , date [ , hours [ , minutes [ , seconds [ , ms ] ] ] ] ] )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Date/name.js", "esid": " sec-date-constructor", "description": " Constructor \"name\" property descriptor", "info": " |17 ECMAScript Standard Built-in Objects:\n\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value is a\nString.\n\nUnless otherwise specified, the name property of a built-in Function object,\nif it exists, has the attributes { [[Writable]]: false, [[Enumerable]]:\nfalse, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Date/now/name.js", "esid": " sec-date.now", "description": " >Date.now.name is \"now\".\n", "info": " |Date.now ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Date/parse/S15.9.4.2_A3_T2.js", "info": " |The Date.parse property \"length\" has { ReadOnly, ! DontDelete, DontEnum }\nattributes\n", "esid": " sec-date.parse", "description": " Checking DontDelete attribute"}, {"path": "./test262-main/test/built-ins/Date/parse/name.js", "esid": " sec-date.parse", "description": " >Date.parse.name is \"parse\".\n", "info": " |Date.parse ( string )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Date/parse/time-value-maximum-range.js", "esid": " sec-date.parse", "description": " >Date.parse return value is limited to specified time value maximum range\n", "info": " |Date.parse ( string )\n\nparse interprets the resulting String as a date and time; it returns a\nNumber, the UTC time value corresponding to the date and time.\n\nA Date object contains a Number indicating a particular instant in time to\nwithin a millisecond. Such a Number is called a time value.\n\nThe actual range of times supported by ECMAScript Date objects is slightly\nsmaller: exactly -100,000,000 days to 100,000,000 days measured relative to\nmidnight at the beginning of 01 January, 1970 UTC. This gives a range of\n8,640,000,000,000,000 milliseconds to either side of 01 January, 1970 UTC.\n"}, {"path": "./test262-main/test/built-ins/Date/prototype/Symbol.toPrimitive/called-as-function.js", "esid": " sec-date.prototype-@@toprimitive", "description": " >`this` value is resolved using strict mode semantics,\nthrowing TypeError if called as top-level function.\n", "info": " |Date.prototype [ @@toPrimitive ] ( hint )\n\n1. Let O be the this value.\n2. If Type(O) is not Object, throw a TypeError exception.\n\nToObject ( argument )\n\nArgument Type: Undefined\nResult: Throw a TypeError exception.\n", "features": ["Symbol", "Symbol.toPrimitive"]}, {"path": "./test262-main/test/built-ins/Date/prototype/Symbol.toPrimitive/hint-default-no-callables.js", "esid": " sec-date.prototype-@@toprimitive", "description": " >Behavior when `hint` is \"default\" and neither first nor second try are callable.\n", "info": " |1. Let O be the this value.\n2. If Type(O) is not Object, throw a TypeError exception.\n3. If hint is the String value \"string\" or the String value \"default\", then\na. Let tryFirst be \"string\".\n4. Else if hint is the String value \"number\", then\na. Let tryFirst be \"number\".\n5. Else, throw a TypeError exception.\n6. Return OrdinaryToPrimitive(O, tryFirst).\n", "features": ["Symbol.toPrimitive"]}, {"path": "./test262-main/test/built-ins/Date/prototype/Symbol.toPrimitive/hint-number-no-callables.js", "esid": " sec-date.prototype-@@toprimitive", "description": " >Behavior when `hint` is \"number\" and neither first nor second try are callable.\n", "info": " |1. Let O be the this value.\n2. If Type(O) is not Object, throw a TypeError exception.\n3. If hint is the String value \"string\" or the String value \"default\", then\na. Let tryFirst be \"string\".\n4. Else if hint is the String value \"number\", then\na. Let tryFirst be \"number\".\n5. Else, throw a TypeError exception.\n6. Return OrdinaryToPrimitive(O, tryFirst).\n", "features": ["Symbol.toPrimitive"]}, {"path": "./test262-main/test/built-ins/Date/prototype/Symbol.toPrimitive/hint-string-no-callables.js", "esid": " sec-date.prototype-@@toprimitive", "description": " >Behavior when `hint` is \"string\" and neither first nor second try are callable.\n", "info": " |1. Let O be the this value.\n2. If Type(O) is not Object, throw a TypeError exception.\n3. If hint is the String value \"string\" or the String value \"default\", then\na. Let tryFirst be \"string\".\n4. Else if hint is the String value \"number\", then\na. Let tryFirst be \"number\".\n5. Else, throw a TypeError exception.\n6. Return OrdinaryToPrimitive(O, tryFirst).\n", "features": ["Symbol.toPrimitive"]}, {"path": "./test262-main/test/built-ins/Date/prototype/constructor/S15.9.5.1_A3_T2.js", "info": " |The Date.prototype.constructor property \"length\" has { ReadOnly, !\nDontDelete, DontEnum } attributes\n", "esid": " sec-date.prototype.constructor", "description": " Checking DontDelete attribute"}, {"path": "./test262-main/test/built-ins/Date/prototype/getDate/S15.9.5.14_A3_T2.js", "info": " |The Date.prototype.getDate property \"length\" has { ReadOnly, !\nDontDelete, DontEnum } attributes\n", "esid": " sec-date.prototype.getdate", "description": " Checking DontDelete attribute"}, {"path": "./test262-main/test/built-ins/Date/prototype/getDate/name.js", "esid": " sec-date.prototype.getdate", "description": " >Date.prototype.getDate.name is \"getDate\".\n", "info": " |Date.prototype.getDate ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Date/prototype/getDate/this-value-non-object.js", "esid": " sec-date.prototype.getdate", "description": " Behavior when \"this\" value is not an Object", "info": " |1. Let t be ? thisTimeValue(this value).\n\nThe abstract operation thisTimeValue(value) performs the following steps:\n\n1. If Type(value) is Object and value has a [[DateValue]] internal slot, then\na. Return value.[[DateValue]].\n2. Throw a TypeError exception.\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Date/prototype/getDay/S15.9.5.16_A3_T2.js", "esid": " 15.9.5.16_A3_T2", "info": " |The Date.prototype.getDay property \"length\" has { ReadOnly, ! DontDelete,\nDontEnum } attributes\n", "version": 5, "description": " Checking DontDelete attribute"}, {"path": "./test262-main/test/built-ins/Date/prototype/getDay/name.js", "esid": " sec-date.prototype.getday", "description": " >Date.prototype.getDay.name is \"getDay\".\n", "info": " |Date.prototype.getDay ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Date/prototype/getDay/this-value-non-object.js", "esid": " sec-date.prototype.getday", "description": " Behavior when \"this\" value is not an Object", "info": " |1. Let t be ? thisTimeValue(this value).\n\nThe abstract operation thisTimeValue(value) performs the following steps:\n\n1. If Type(value) is Object and value has a [[DateValue]] internal slot, then\na. Return value.[[DateValue]].\n2. Throw a TypeError exception.\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Date/prototype/getFullYear/S15.9.5.10_A3_T2.js", "esid": " 15.9.5.10_A3_T2", "info": " |The Date.prototype.getFullYear property \"length\" has { ReadOnly, !\nDontDelete, DontEnum } attributes\n", "version": 5, "description": " Checking DontDelete attribute"}, {"path": "./test262-main/test/built-ins/Date/prototype/getFullYear/name.js", "esid": " sec-date.prototype.getfullyear", "description": " >Date.prototype.getFullYear.name is \"getFullYear\".\n", "info": " |Date.prototype.getFullYear ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Date/prototype/getFullYear/this-value-non-object.js", "esid": " sec-date.prototype.getfullyear", "description": " Behavior when \"this\" value is not an Object", "info": " |1. Let t be ? thisTimeValue(this value).\n\nThe abstract operation thisTimeValue(value) performs the following steps:\n\n1. If Type(value) is Object and value has a [[DateValue]] internal slot, then\na. Return value.[[DateValue]].\n2. Throw a TypeError exception.\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Date/prototype/getHours/S15.9.5.18_A3_T2.js", "esid": " 15.9.5.18_A3_T2", "info": " |The Date.prototype.getHours property \"length\" has { ReadOnly, !\nDontDelete, DontEnum } attributes\n", "version": 5, "description": " Checking DontDelete attribute"}, {"path": "./test262-main/test/built-ins/Date/prototype/getHours/name.js", "esid": " sec-date.prototype.gethours", "description": " >Date.prototype.getHours.name is \"getHours\".\n", "info": " |Date.prototype.getHours ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Date/prototype/getHours/this-value-non-object.js", "esid": " sec-date.prototype.gethours", "description": " Behavior when \"this\" value is not an Object", "info": " |1. Let t be ? thisTimeValue(this value).\n\nThe abstract operation thisTimeValue(value) performs the following steps:\n\n1. If Type(value) is Object and value has a [[DateValue]] internal slot, then\na. Return value.[[DateValue]].\n2. Throw a TypeError exception.\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Date/prototype/getMilliseconds/S15.9.5.24_A3_T2.js", "esid": " 15.9.5.24_A3_T2", "info": " |The Date.prototype.getMilliseconds property \"length\" has { ReadOnly, !\nDontDelete, DontEnum } attributes\n", "version": 5, "description": " Checking DontDelete attribute"}, {"path": "./test262-main/test/built-ins/Date/prototype/getMilliseconds/name.js", "esid": " sec-date.prototype.getmilliseconds", "description": " >Date.prototype.getMilliseconds.name is \"getMilliseconds\".\n", "info": " |Date.prototype.getMilliseconds ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Date/prototype/getMilliseconds/this-value-non-object.js", "esid": " sec-date.prototype.getmilliseconds", "description": " Behavior when \"this\" value is not an Object", "info": " |1. Let t be ? thisTimeValue(this value).\n\nThe abstract operation thisTimeValue(value) performs the following steps:\n\n1. If Type(value) is Object and value has a [[DateValue]] internal slot, then\na. Return value.[[DateValue]].\n2. Throw a TypeError exception.\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Date/prototype/getMinutes/S15.9.5.20_A3_T2.js", "esid": " 15.9.5.20_A3_T2", "info": " |The Date.prototype.getMinutes property \"length\" has { ReadOnly, !\nDontDelete, DontEnum } attributes\n", "version": 5, "description": " Checking DontDelete attribute"}, {"path": "./test262-main/test/built-ins/Date/prototype/getMinutes/name.js", "esid": " sec-date.prototype.getminutes", "description": " >Date.prototype.getMinutes.name is \"getMinutes\".\n", "info": " |Date.prototype.getMinutes ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Date/prototype/getMinutes/this-value-non-object.js", "esid": " sec-date.prototype.getminutes", "description": " Behavior when \"this\" value is not an Object", "info": " |1. Let t be ? thisTimeValue(this value).\n\nThe abstract operation thisTimeValue(value) performs the following steps:\n\n1. If Type(value) is Object and value has a [[DateValue]] internal slot, then\na. Return value.[[DateValue]].\n2. Throw a TypeError exception.\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Date/prototype/getMonth/S15.9.5.12_A3_T2.js", "info": " |The Date.prototype.getMonth property \"length\" has { ReadOnly, !\nDontDelete, DontEnum } attributes\n", "esid": " sec-date.prototype.getmonth", "description": " Checking DontDelete attribute"}, {"path": "./test262-main/test/built-ins/Date/prototype/getMonth/name.js", "esid": " sec-date.prototype.getmonth", "description": " >Date.prototype.getMonth.name is \"getMonth\".\n", "info": " |Date.prototype.getMonth ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Date/prototype/getMonth/this-value-non-object.js", "esid": " sec-date.prototype.getmonth", "description": " Behavior when \"this\" value is not an Object", "info": " |1. Let t be ? thisTimeValue(this value).\n\nThe abstract operation thisTimeValue(value) performs the following steps:\n\n1. If Type(value) is Object and value has a [[DateValue]] internal slot, then\na. Return value.[[DateValue]].\n2. Throw a TypeError exception.\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Date/prototype/getSeconds/S15.9.5.22_A3_T2.js", "info": " |The Date.prototype.getSeconds property \"length\" has { ReadOnly, !\nDontDelete, DontEnum } attributes\n", "esid": " sec-date.prototype.getseconds", "description": " Checking DontDelete attribute"}, {"path": "./test262-main/test/built-ins/Date/prototype/getSeconds/name.js", "esid": " sec-date.prototype.getseconds", "description": " >Date.prototype.getSeconds.name is \"getSeconds\".\n", "info": " |Date.prototype.getSeconds ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Date/prototype/getSeconds/this-value-non-object.js", "esid": " sec-date.prototype.getseconds", "description": " Behavior when \"this\" value is not an Object", "info": " |1. Let t be ? thisTimeValue(this value).\n\nThe abstract operation thisTimeValue(value) performs the following steps:\n\n1. If Type(value) is Object and value has a [[DateValue]] internal slot, then\na. Return value.[[DateValue]].\n2. Throw a TypeError exception.\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Date/prototype/getTime/S15.9.5.9_A3_T2.js", "info": " |The Date.prototype.getTime property \"length\" has { ReadOnly, !\nDontDelete, DontEnum } attributes\n", "esid": " sec-date.prototype.getseconds", "description": " Checking DontDelete attribute"}, {"path": "./test262-main/test/built-ins/Date/prototype/getTime/name.js", "esid": " sec-date.prototype.getseconds", "description": " >Date.prototype.getTime.name is \"getTime\".\n", "info": " |Date.prototype.getTime ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Date/prototype/getTime/this-value-non-object.js", "esid": " sec-date.prototype.gettime", "description": " Behavior when \"this\" value is not an Object", "info": " |1. Return ? thisTimeValue(this value). \n\nThe abstract operation thisTimeValue(value) performs the following steps:\n\n1. If Type(value) is Object and value has a [[DateValue]] internal slot, then\na. Return value.[[DateValue]].\n2. Throw a TypeError exception.\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Date/prototype/getTimezoneOffset/S15.9.5.26_A3_T2.js", "info": " |The Date.prototype.getTimezoneOffset property \"length\" has { ReadOnly, !\nDontDelete, DontEnum } attributes\n", "esid": " sec-date.prototype.gettimezoneoffset", "description": " Checking DontDelete attribute"}, {"path": "./test262-main/test/built-ins/Date/prototype/getTimezoneOffset/name.js", "esid": " sec-date.prototype.gettimezoneoffset", "description": " >Date.prototype.getTimezoneOffset.name is \"getTimezoneOffset\".\n", "info": " |Date.prototype.getTimezoneOffset ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Date/prototype/getTimezoneOffset/this-value-non-object.js", "esid": " sec-date.prototype.gettimezoneoffset", "description": " Behavior when \"this\" value is not an Object", "info": " |1. Let t be ? thisTimeValue(this value).\n\nThe abstract operation thisTimeValue(value) performs the following steps:\n\n1. If Type(value) is Object and value has a [[DateValue]] internal slot, then\na. Return value.[[DateValue]].\n2. Throw a TypeError exception.\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Date/prototype/getUTCDate/S15.9.5.15_A3_T2.js", "info": " |The Date.prototype.getUTCDate property \"length\" has { ReadOnly, !\nDontDelete, DontEnum } attributes\n", "esid": " sec-date.prototype.getutcdate", "description": " Checking DontDelete attribute"}, {"path": "./test262-main/test/built-ins/Date/prototype/getUTCDate/name.js", "esid": " sec-date.prototype.getutcdate", "description": " >Date.prototype.getUTCDate.name is \"getUTCDate\".\n", "info": " |Date.prototype.getUTCDate ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Date/prototype/getUTCDate/this-value-non-object.js", "esid": " sec-date.prototype.getutcdate", "description": " Behavior when \"this\" value is not an Object", "info": " |1. Let t be ? thisTimeValue(this value).\n\nThe abstract operation thisTimeValue(value) performs the following steps:\n\n1. If Type(value) is Object and value has a [[DateValue]] internal slot, then\na. Return value.[[DateValue]].\n2. Throw a TypeError exception.\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Date/prototype/getUTCDay/S15.9.5.17_A3_T2.js", "info": " |The Date.prototype.getUTCDay property \"length\" has { ReadOnly, !\nDontDelete, DontEnum } attributes\n", "esid": " sec-date.prototype.getutcdaty", "description": " Checking DontDelete attribute"}, {"path": "./test262-main/test/built-ins/Date/prototype/getUTCDay/name.js", "esid": " sec-date.prototype.getutcdaty", "description": " >Date.prototype.getUTCDay.name is \"getUTCDay\".\n", "info": " |Date.prototype.getUTCDay ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Date/prototype/getUTCDay/this-value-non-object.js", "esid": " sec-date.prototype.getutcdaty", "description": " Behavior when \"this\" value is not an Object", "info": " |1. Let t be ? thisTimeValue(this value).\n\nThe abstract operation thisTimeValue(value) performs the following steps:\n\n1. If Type(value) is Object and value has a [[DateValue]] internal slot, then\na. Return value.[[DateValue]].\n2. Throw a TypeError exception.\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Date/prototype/getUTCFullYear/S15.9.5.11_A3_T2.js", "info": " |The Date.prototype.getUTCFullYear property \"length\" has { ReadOnly, !\nDontDelete, DontEnum } attributes\n", "esid": " sec-date.prototype.getutcfullyear", "description": " Checking DontDelete attribute"}, {"path": "./test262-main/test/built-ins/Date/prototype/getUTCFullYear/name.js", "esid": " sec-date.prototype.getutcfullyear", "description": " >Date.prototype.getUTCFullYear.name is \"getUTCFullYear\".\n", "info": " |Date.prototype.getUTCFullYear ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Date/prototype/getUTCFullYear/this-value-non-object.js", "esid": " sec-date.prototype.getutcfullyear", "description": " Behavior when \"this\" value is not an Object", "info": " |1. Let t be ? thisTimeValue(this value).\n\nThe abstract operation thisTimeValue(value) performs the following steps:\n\n1. If Type(value) is Object and value has a [[DateValue]] internal slot, then\na. Return value.[[DateValue]].\n2. Throw a TypeError exception.\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Date/prototype/getUTCHours/S15.9.5.19_A3_T2.js", "info": " |The Date.prototype.getUTCHours property \"length\" has { ReadOnly, !\nDontDelete, DontEnum } attributes\n", "esid": " sec-date.prototype.getutchours", "description": " Checking DontDelete attribute"}, {"path": "./test262-main/test/built-ins/Date/prototype/getUTCHours/name.js", "esid": " sec-date.prototype.getutchours", "description": " >Date.prototype.getUTCHours.name is \"getUTCHours\".\n", "info": " |Date.prototype.getUTCHours ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Date/prototype/getUTCHours/this-value-non-object.js", "esid": " sec-date.prototype.getutchours", "description": " Behavior when \"this\" value is not an Object", "info": " |1. Let t be ? thisTimeValue(this value).\n\nThe abstract operation thisTimeValue(value) performs the following steps:\n\n1. If Type(value) is Object and value has a [[DateValue]] internal slot, then\na. Return value.[[DateValue]].\n2. Throw a TypeError exception.\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Date/prototype/getUTCMilliseconds/S15.9.5.25_A3_T2.js", "info": " |The Date.prototype.getUTCMilliseconds property \"length\" has { ReadOnly, !\nDontDelete, DontEnum } attributes\n", "esid": " sec-date.prototype.getutcmilliseconds", "description": " Checking DontDelete attribute"}, {"path": "./test262-main/test/built-ins/Date/prototype/getUTCMilliseconds/name.js", "esid": " sec-date.prototype.getutcmilliseconds", "description": " >Date.prototype.getUTCMilliseconds.name is \"getUTCMilliseconds\".\n", "info": " |Date.prototype.getUTCMilliseconds ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Date/prototype/getUTCMilliseconds/this-value-non-object.js", "esid": " sec-date.prototype.getutcmilliseconds", "description": " Behavior when \"this\" value is not an Object", "info": " |1. Let t be ? thisTimeValue(this value).\n\nThe abstract operation thisTimeValue(value) performs the following steps:\n\n1. If Type(value) is Object and value has a [[DateValue]] internal slot, then\na. Return value.[[DateValue]].\n2. Throw a TypeError exception.\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Date/prototype/getUTCMinutes/S15.9.5.21_A3_T2.js", "info": " |The Date.prototype.getUTCMinutes property \"length\" has { ReadOnly, !\nDontDelete, DontEnum } attributes\n", "esid": " sec-date.prototype.getutcminutes", "description": " Checking DontDelete attribute"}, {"path": "./test262-main/test/built-ins/Date/prototype/getUTCMinutes/name.js", "esid": " sec-date.prototype.getutcminutes", "description": " >Date.prototype.getUTCMinutes.name is \"getUTCMinutes\".\n", "info": " |Date.prototype.getUTCMinutes ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Date/prototype/getUTCMinutes/this-value-non-object.js", "esid": " sec-date.prototype.getutcminutes", "description": " Behavior when \"this\" value is not an Object", "info": " |1. Let t be ? thisTimeValue(this value).\n\nThe abstract operation thisTimeValue(value) performs the following steps:\n\n1. If Type(value) is Object and value has a [[DateValue]] internal slot, then\na. Return value.[[DateValue]].\n2. Throw a TypeError exception.\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Date/prototype/getUTCMonth/S15.9.5.13_A3_T2.js", "info": " |The Date.prototype.getUTCMonth property \"length\" has { ReadOnly, !\nDontDelete, DontEnum } attributes\n", "esid": " sec-date.prototype.getutcmonth", "description": " Checking DontDelete attribute"}, {"path": "./test262-main/test/built-ins/Date/prototype/getUTCMonth/name.js", "esid": " sec-date.prototype.getutcmonth", "description": " >Date.prototype.getUTCMonth.name is \"getUTCMonth\".\n", "info": " |Date.prototype.getUTCMonth ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Date/prototype/getUTCMonth/this-value-non-object.js", "esid": " sec-date.prototype.getutcmonth", "description": " Behavior when \"this\" value is not an Object", "info": " |1. Let t be ? thisTimeValue(this value).\n\nThe abstract operation thisTimeValue(value) performs the following steps:\n\n1. If Type(value) is Object and value has a [[DateValue]] internal slot, then\na. Return value.[[DateValue]].\n2. Throw a TypeError exception.\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Date/prototype/getUTCSeconds/S15.9.5.23_A3_T2.js", "info": " |The Date.prototype.getUTCSeconds property \"length\" has { ReadOnly, !\nDontDelete, DontEnum } attributes\n", "esid": " sec-date.prototype.getutcseconds", "description": " Checking DontDelete attribute"}, {"path": "./test262-main/test/built-ins/Date/prototype/getUTCSeconds/name.js", "esid": " sec-date.prototype.getutcseconds", "description": " >Date.prototype.getUTCSeconds.name is \"getUTCSeconds\".\n", "info": " |Date.prototype.getUTCSeconds ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Date/prototype/getUTCSeconds/this-value-non-object.js", "esid": " sec-date.prototype.getutcseconds", "description": " Behavior when \"this\" value is not an Object", "info": " |1. Let t be ? thisTimeValue(this value).\n\nThe abstract operation thisTimeValue(value) performs the following steps:\n\n1. If Type(value) is Object and value has a [[DateValue]] internal slot, then\na. Return value.[[DateValue]].\n2. Throw a TypeError exception.\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Date/prototype/setDate/S15.9.5.36_A3_T2.js", "info": " |The Date.prototype.setDate property \"length\" has { ReadOnly, !\nDontDelete, DontEnum } attributes\n", "esid": " sec-date.prototype.setdate", "description": " Checking DontDelete attribute"}, {"path": "./test262-main/test/built-ins/Date/prototype/setDate/name.js", "esid": " sec-date.prototype.setdate", "description": " >Date.prototype.setDate.name is \"setDate\".\n", "info": " |Date.prototype.setDate ( date )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Date/prototype/setDate/this-value-non-object.js", "esid": " sec-date.prototype.setdate", "description": " Behavior when \"this\" value is not an Object", "info": " |1. Let t be LocalTime(? thisTimeValue(this value)).\n\nThe abstract operation thisTimeValue(value) performs the following steps:\n\n1. If Type(value) is Object and value has a [[DateValue]] internal slot, then\na. Return value.[[DateValue]].\n2. Throw a TypeError exception.\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Date/prototype/setFullYear/S15.9.5.40_A3_T2.js", "info": " |The Date.prototype.setFullYear property \"length\" has { ReadOnly, !\nDontDelete, DontEnum } attributes\n", "esid": " sec-date.prototype.setfullyear", "description": " Checking DontDelete attribute"}, {"path": "./test262-main/test/built-ins/Date/prototype/setFullYear/name.js", "esid": " sec-date.prototype.setfullyear", "description": " >Date.prototype.setFullYear.name is \"setFullYear\".\n", "info": " |Date.prototype.setFullYear ( year [ , month [ , date ] ] )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Date/prototype/setFullYear/this-value-non-object.js", "esid": " sec-date.prototype.setfullyear", "description": " Behavior when \"this\" value is not an Object", "info": " |1. Let t be ? thisTimeValue(this value).\n\nThe abstract operation thisTimeValue(value) performs the following steps:\n\n1. If Type(value) is Object and value has a [[DateValue]] internal slot, then\na. Return value.[[DateValue]].\n2. Throw a TypeError exception.\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Date/prototype/setHours/S15.9.5.34_A3_T2.js", "info": " |The Date.prototype.setHours property \"length\" has { ReadOnly, !\nDontDelete, DontEnum } attributes\n", "esid": " sec-date.prototype.sethours", "description": " Checking DontDelete attribute"}, {"path": "./test262-main/test/built-ins/Date/prototype/setHours/name.js", "esid": " sec-date.prototype.sethours", "description": " >Date.prototype.setHours.name is \"setHours\".\n", "info": " |Date.prototype.setHours ( hour [ , min [ , sec [ , ms ] ] ] )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Date/prototype/setHours/this-value-non-object.js", "esid": " sec-date.prototype.sethours", "description": " Behavior when \"this\" value is not an Object", "info": " |1. Let t be LocalTime(? thisTimeValue(this value)).\n\nThe abstract operation thisTimeValue(value) performs the following steps:\n\n1. If Type(value) is Object and value has a [[DateValue]] internal slot, then\na. Return value.[[DateValue]].\n2. Throw a TypeError exception.\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Date/prototype/setMilliseconds/S15.9.5.28_A3_T2.js", "info": " |The Date.prototype.setMilliseconds property \"length\" has { ReadOnly, !\nDontDelete, DontEnum } attributes\n", "esid": " sec-date.prototype.setmilliseconds", "description": " Checking DontDelete attribute"}, {"path": "./test262-main/test/built-ins/Date/prototype/setMilliseconds/name.js", "esid": " sec-date.prototype.setmilliseconds", "description": " >Date.prototype.setMilliseconds.name is \"setMilliseconds\".\n", "info": " |Date.prototype.setMilliseconds ( ms )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Date/prototype/setMilliseconds/this-value-non-object.js", "esid": " sec-date.prototype.setmilliseconds", "description": " Behavior when \"this\" value is not an Object", "info": " |1. Let t be LocalTime(? thisTimeValue(this value)).\n\nThe abstract operation thisTimeValue(value) performs the following steps:\n\n1. If Type(value) is Object and value has a [[DateValue]] internal slot, then\na. Return value.[[DateValue]].\n2. Throw a TypeError exception.\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Date/prototype/setMinutes/S15.9.5.32_A3_T2.js", "info": " |The Date.prototype.setMinutes property \"length\" has { ReadOnly, !\nDontDelete, DontEnum } attributes\n", "esid": " sec-date.prototype.setminutes", "description": " Checking DontDelete attribute"}, {"path": "./test262-main/test/built-ins/Date/prototype/setMinutes/name.js", "esid": " sec-date.prototype.setminutes", "description": " >Date.prototype.setMinutes.name is \"setMinutes\".\n", "info": " |Date.prototype.setMinutes ( min [ , sec [ , ms ] ] )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Date/prototype/setMinutes/this-value-non-object.js", "esid": " sec-date.prototype.setminutes", "description": " Behavior when \"this\" value is not an Object", "info": " |1. Let t be LocalTime(? thisTimeValue(this value)).\n\nThe abstract operation thisTimeValue(value) performs the following steps:\n\n1. If Type(value) is Object and value has a [[DateValue]] internal slot, then\na. Return value.[[DateValue]].\n2. Throw a TypeError exception.\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Date/prototype/setMonth/S15.9.5.38_A3_T2.js", "info": " |The Date.prototype.setMonth property \"length\" has { ReadOnly, !\nDontDelete, DontEnum } attributes\n", "esid": " sec-date.prototype.setmonth", "description": " Checking DontDelete attribute"}, {"path": "./test262-main/test/built-ins/Date/prototype/setMonth/name.js", "esid": " sec-date.prototype.setmonth", "description": " >Date.prototype.setMonth.name is \"setMonth\".\n", "info": " |Date.prototype.setMonth ( month [ , date ] )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Date/prototype/setMonth/this-value-non-object.js", "esid": " sec-date.prototype.setmonth", "description": " Behavior when \"this\" value is not an Object", "info": " |1. Let t be ? thisTimeValue(this value).\n\nThe abstract operation thisTimeValue(value) performs the following steps:\n\n1. If Type(value) is Object and value has a [[DateValue]] internal slot, then\na. Return value.[[DateValue]].\n2. Throw a TypeError exception.\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Date/prototype/setSeconds/S15.9.5.30_A3_T2.js", "info": " |The Date.prototype.setSeconds property \"length\" has { ReadOnly, !\nDontDelete, DontEnum } attributes\n", "esid": " sec-date.prototype.setseconds", "description": " Checking DontDelete attribute"}, {"path": "./test262-main/test/built-ins/Date/prototype/setSeconds/name.js", "esid": " sec-date.prototype.setseconds", "description": " >Date.prototype.setSeconds.name is \"setSeconds\".\n", "info": " |Date.prototype.setSeconds ( sec [ , ms ] )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Date/prototype/setSeconds/this-value-non-object.js", "esid": " sec-date.prototype.setseconds", "description": " Behavior when \"this\" value is not an Object", "info": " |1. Let t be LocalTime(? thisTimeValue(this value)).\n\nThe abstract operation thisTimeValue(value) performs the following steps:\n\n1. If Type(value) is Object and value has a [[DateValue]] internal slot, then\na. Return value.[[DateValue]].\n2. Throw a TypeError exception.\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Date/prototype/setTime/S15.9.5.27_A3_T2.js", "info": " |The Date.prototype.setTime property \"length\" has { ReadOnly, !\nDontDelete, DontEnum } attributes\n", "esid": " sec-date.prototype.settime", "description": " Checking DontDelete attribute"}, {"path": "./test262-main/test/built-ins/Date/prototype/setTime/name.js", "esid": " sec-date.prototype.settime", "description": " >Date.prototype.setTime.name is \"setTime\".\n", "info": " |Date.prototype.setTime ( time )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Date/prototype/setTime/this-value-non-object.js", "esid": " sec-date.prototype.settime", "description": " Behavior when \"this\" value is not an Object", "info": " |1. Let t be LocalTime(? thisTimeValue(this value)).\n\nThe abstract operation thisTimeValue(value) performs the following steps:\n\n1. If Type(value) is Object and value has a [[DateValue]] internal slot, then\na. Return value.[[DateValue]].\n2. Throw a TypeError exception.\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Date/prototype/setUTCDate/S15.9.5.37_A3_T2.js", "info": " |The Date.prototype.setUTCDate property \"length\" has { ReadOnly, !\nDontDelete, DontEnum } attributes\n", "esid": " sec-date.prototype.setutcdate", "description": " Checking DontDelete attribute"}, {"path": "./test262-main/test/built-ins/Date/prototype/setUTCDate/name.js", "esid": " sec-date.prototype.setutcdate", "description": " >Date.prototype.setUTCDate.name is \"setUTCDate\".\n", "info": " |Date.prototype.setUTCDate ( date )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Date/prototype/setUTCFullYear/S15.9.5.41_A3_T2.js", "info": " |The Date.prototype.setUTCFullYear property \"length\" has { ReadOnly, !\nDontDelete, DontEnum } attributes\n", "esid": " sec-date.prototype.setutcfullyear", "description": " Checking DontDelete attribute"}, {"path": "./test262-main/test/built-ins/Date/prototype/setUTCFullYear/name.js", "esid": " sec-date.prototype.setutcfullyear", "description": " >Date.prototype.setUTCFullYear.name is \"setUTCFullYear\".\n", "info": " |Date.prototype.setUTCFullYear ( year [ , month [ , date ] ] )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Date/prototype/setUTCHours/S15.9.5.35_A3_T2.js", "info": " |The Date.prototype.setUTCHours property \"length\" has { ReadOnly, !\nDontDelete, DontEnum } attributes\n", "esid": " sec-date.prototype.setutchours", "description": " Checking DontDelete attribute"}, {"path": "./test262-main/test/built-ins/Date/prototype/setUTCHours/name.js", "esid": " sec-date.prototype.setutchours", "description": " >Date.prototype.setUTCHours.name is \"setUTCHours\".\n", "info": " |Date.prototype.setUTCHours ( hour [ , min [ , sec [ , ms ] ] ] )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Date/prototype/setUTCMilliseconds/S15.9.5.29_A3_T2.js", "info": " |The Date.prototype.setUTCMilliseconds property \"length\" has { ReadOnly, !\nDontDelete, DontEnum } attributes\n", "esid": " sec-date.prototype.setutcmilliseconds", "description": " Checking DontDelete attribute"}, {"path": "./test262-main/test/built-ins/Date/prototype/setUTCMilliseconds/name.js", "esid": " sec-date.prototype.setutcmilliseconds", "description": " >Date.prototype.setUTCMilliseconds.name is \"setUTCMilliseconds\".\n", "info": " |Date.prototype.setUTCMilliseconds ( ms )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Date/prototype/setUTCMinutes/S15.9.5.33_A3_T2.js", "info": " |The Date.prototype.setUTCMinutes property \"length\" has { ReadOnly, !\nDontDelete, DontEnum } attributes\n", "esid": " sec-date.prototype.setutcminutes", "description": " Checking DontDelete attribute"}, {"path": "./test262-main/test/built-ins/Date/prototype/setUTCMinutes/name.js", "esid": " sec-date.prototype.setutcminutes", "description": " >Date.prototype.setUTCMinutes.name is \"setUTCMinutes\".\n", "info": " |Date.prototype.setUTCMinutes ( min [ , sec [, ms ] ] )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Date/prototype/setUTCMonth/S15.9.5.39_A3_T2.js", "info": " |The Date.prototype.setUTCMonth property \"length\" has { ReadOnly, !\nDontDelete, DontEnum } attributes\n", "esid": " sec-date.prototype.setutcmonth", "description": " Checking DontDelete attribute"}, {"path": "./test262-main/test/built-ins/Date/prototype/setUTCMonth/name.js", "esid": " sec-date.prototype.setutcmonth", "description": " >Date.prototype.setUTCMonth.name is \"setUTCMonth\".\n", "info": " |Date.prototype.setUTCMonth ( month [ , date ] )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Date/prototype/setUTCSeconds/S15.9.5.31_A3_T2.js", "info": " |The Date.prototype.setUTCSeconds property \"length\" has { ReadOnly, !\nDontDelete, DontEnum } attributes\n", "esid": " sec-date.prototype.setutcseconds", "description": " Checking DontDelete attribute"}, {"path": "./test262-main/test/built-ins/Date/prototype/setUTCSeconds/name.js", "esid": " sec-date.prototype.setutcseconds", "description": " >Date.prototype.setUTCSeconds.name is \"setUTCSeconds\".\n", "info": " |Date.prototype.setUTCSeconds ( sec [ , ms ] )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Date/prototype/toDateString/S15.9.5.3_A3_T2.js", "info": " |The Date.prototype.toDateString property \"length\" has { ReadOnly, !\nDontDelete, DontEnum } attributes\n", "esid": " sec-date.prototype.todatestring", "description": " Checking DontDelete attribute"}, {"path": "./test262-main/test/built-ins/Date/prototype/toDateString/name.js", "esid": " sec-date.prototype.todatestring", "description": " >Date.prototype.toDateString.name is \"toDateString\".\n", "info": " |Date.prototype.toDateString ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Date/prototype/toISOString/name.js", "esid": " sec-date.prototype.toisostring", "description": " >Date.prototype.toISOString.name is \"toISOString\".\n", "info": " |Date.prototype.toISOString ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Date/prototype/toJSON/invoke-abrupt.js", "esid": " sec-date.prototype.tojson", "description": " >Abrupt completion from GetV or Call.\n", "info": " |Date.prototype.toJSON ( key )\n\n[...]\n4. Return ? Invoke(O, \"toISOString\").\n\nInvoke ( V, P [ , argumentsList ] )\n\n[...]\n3. Let func be ? GetV(V, P).\n4. Return ? Call(func, V, argumentsList).\n"}, {"path": "./test262-main/test/built-ins/Date/prototype/toJSON/length.js", "esid": " sec-date.prototype.tojson", "description": " >Date.prototype.toJSON.length is 1.\n", "info": " |Date.prototype.toJSON ( key )\n\nECMAScript Standard Built-in Objects\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Date/prototype/toJSON/name.js", "esid": " sec-date.prototype.tojson", "description": " >Date.prototype.toJSON.name is \"toJSON\".\n", "info": " |Date.prototype.toJSON ( key )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Date/prototype/toJSON/to-object.js", "esid": " sec-date.prototype.tojson", "description": " >This value is coerced to an object.\n", "info": " |Date.prototype.toJSON ( key )\n\n1. Let O be ? ToObject(this value).\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Date/prototype/toLocaleDateString/S15.9.5.6_A3_T2.js", "info": " |The Date.prototype.toLocaleDateString property \"length\" has { ReadOnly, !\nDontDelete, DontEnum } attributes\n", "esid": " sec-date.prototype.tolocaledatestring", "description": " Checking DontDelete attribute"}, {"path": "./test262-main/test/built-ins/Date/prototype/toLocaleDateString/name.js", "esid": " sec-date.prototype.tolocaledatestring", "description": " >Date.prototype.toLocaleDateString.name is \"toLocaleDateString\".\n", "info": " |Date.prototype.toLocaleDateString ( [ reserved1 [ , reserved2 ] ] )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Date/prototype/toLocaleString/S15.9.5.5_A3_T2.js", "info": " |The Date.prototype.toLocaleString property \"length\" has { ReadOnly, !\nDontDelete, DontEnum } attributes\n", "esid": " sec-date.prototype.tolocalestring", "description": " Checking DontDelete attribute"}, {"path": "./test262-main/test/built-ins/Date/prototype/toLocaleString/name.js", "esid": " sec-date.prototype.tolocalestring", "description": " >Date.prototype.toLocaleString.name is \"toLocaleString\".\n", "info": " |Date.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Date/prototype/toLocaleTimeString/S15.9.5.7_A3_T2.js", "info": " |The Date.prototype.toLocaleTimeString property \"length\" has { ReadOnly, !\nDontDelete, DontEnum } attributes\n", "esid": " sec-date.prototype.tolocaletimestring", "description": " Checking DontDelete attribute"}, {"path": "./test262-main/test/built-ins/Date/prototype/toLocaleTimeString/name.js", "esid": " sec-date.prototype.tolocaletimestring", "description": " >Date.prototype.toLocaleTimeString.name is \"toLocaleTimeString\".\n", "info": " |Date.prototype.toLocaleTimeString ( [ reserved1 [ , reserved2 ] ] )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Date/prototype/toString/S15.9.5.2_A3_T2.js", "info": " |The Date.prototype.toString property \"length\" has { ReadOnly, !\nDontDelete, DontEnum } attributes\n", "esid": " sec-date.prototype.tostring", "description": " Checking DontDelete attribute"}, {"path": "./test262-main/test/built-ins/Date/prototype/toString/name.js", "esid": " sec-date.prototype.tostring", "description": " >Date.prototype.toString.name is \"toString\".\n", "info": " |Date.prototype.toString ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Date/prototype/toTimeString/S15.9.5.4_A3_T2.js", "info": " |The Date.prototype.toTimeString property \"length\" has { ReadOnly, !\nDontDelete, DontEnum } attributes\n", "esid": " sec-date.prototype.totimestring", "description": " Checking DontDelete attribute"}, {"path": "./test262-main/test/built-ins/Date/prototype/toTimeString/name.js", "esid": " sec-date.prototype.totimestring", "description": " >Date.prototype.toTimeString.name is \"toTimeString\".\n", "info": " |Date.prototype.toTimeString ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Date/prototype/toUTCString/S15.9.5.42_A3_T2.js", "info": " |The Date.prototype.toUTCString property \"length\" has { ReadOnly, !\nDontDelete, DontEnum } attributes\n", "esid": " sec-date.prototype.toutcstring", "description": " Checking DontDelete attribute"}, {"path": "./test262-main/test/built-ins/Date/prototype/toUTCString/name.js", "esid": " sec-date.prototype.toutcstring", "description": " >Date.prototype.toUTCString.name is \"toUTCString\".\n", "info": " |Date.prototype.toUTCString ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Date/prototype/valueOf/S15.9.5.8_A3_T2.js", "info": " |The Date.prototype.valueOf property \"length\" has { ReadOnly, !\nDontDelete, DontEnum } attributes\n", "esid": " sec-date.prototype.valueof", "description": " Checking DontDelete attribute"}, {"path": "./test262-main/test/built-ins/Date/prototype/valueOf/name.js", "esid": " sec-date.prototype.valueof", "description": " >Date.prototype.valueOf.name is \"valueOf\".\n", "info": " |Date.prototype.valueOf ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Error/message_property.js", "description": " Error constructor creates own message property", "info": " |19.5.1.1 Error ( message )\n\n...\n4.\n...\nc. Let msgDesc be the PropertyDescriptor{[[Value]]: msg, [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true}.\nd. Let status be DefinePropertyOrThrow(O, \"message\", msgDesc).\n", "version": 6, "esid": " 19.5.1.1", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Error/prototype/toString/15.11.4.4-8-2.js", "version": 5, "esid": " 15.11.4.4-8-2", "description": " >Error.prototype.toString return empty string when 'name' is empty\nstring and 'msg' is undefined\n"}, {"path": "./test262-main/test/built-ins/Error/prototype/toString/invalid-receiver.js", "esid": " sec-error.prototype.tostring", "description": " >Error.prototype.toString throws if its receiver is not an object.\n", "info": " |Error.prototype.toString ( )\n1. Let O be this value.\n2. If Type(O) is not Object, throw a TypeError exception.\n"}, {"path": "./test262-main/test/built-ins/Error/prototype/toString/length.js", "version": 6, "esid": " 19.5.3.4", "description": " >Error.prototype.toString.length is 0.\n", "info": " |Error.prototype.toString ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Error/prototype/toString/name.js", "version": 6, "esid": " 19.5.3.4", "description": " >Error.prototype.toString.name is \"toString\".\n", "info": " |Error.prototype.toString ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Function/StrictFunction_restricted-properties.js", "description": " >ECMAScript Function objects defined using syntactic constructors\nin strict mode code do not have own properties \"caller\" or\n\"arguments\" other than those that are created by applying the\nAddRestrictedFunctionProperties abstract operation to the function.\n", "flags": ["onlyStrict"], "version": 6, "esid": " 16.1"}, {"path": "./test262-main/test/built-ins/Function/instance-name.js", "version": 6, "esid": " 19.2.1.1", "description": " Assignment of function `name` attribute", "info": " |[...]\n3. Return CreateDynamicFunction(C, NewTarget, \"normal\", args).\n\nES6 19.2.1.1.1\nRuntimeSemantics: CreateDynamicFunction(constructor, newTarget, kind, args)\n\n[...]\n29. Perform SetFunctionName(F, \"anonymous\").\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Function/length/15.3.3.2-1.js", "version": 5, "esid": " 15.3.3.2-1", "description": " Function.length - data property with value 1"}, {"path": "./test262-main/test/built-ins/Function/length/S15.3.5.1_A2_T1.js", "info": " the length property does not have the attributes { DontDelete }", "version": 5, "esid": " 15.3.5.1_A2_T1", "description": " >Checking if deleting the length property of\nFunction(\"arg1,arg2,arg3\", null) succeeds\n"}, {"path": "./test262-main/test/built-ins/Function/length/S15.3.5.1_A2_T2.js", "info": " the length property does not have the attributes { DontDelete }", "version": 5, "esid": " 15.3.5.1_A2_T2", "description": " >Checking if deleting the length property of\nFunction(\"arg1,arg2,arg3\",\"arg4,arg5\", null) succeeds\n"}, {"path": "./test262-main/test/built-ins/Function/length/S15.3.5.1_A2_T3.js", "info": " the length property does not have the attributes { DontDelete }", "version": 5, "esid": " 15.3.5.1_A2_T3", "description": " >Checking if deleting the length property of\nFunction(\"arg1,arg2,arg3\",\"arg1,arg2\",\"arg3\", null) succeeds\n"}, {"path": "./test262-main/test/built-ins/Function/prototype/Symbol.hasInstance/this-val-prototype-non-obj.js", "version": 6, "esid": " 19.2.3.6", "description": " Error thrown when accessing `prototype` property of `this` value", "info": " |1. Let F be the this value.\n2. Return OrdinaryHasInstance(F, V).\n\n7.3.19 OrdinaryHasInstance (C, O)\n\n[...]\n4. Let P be Get(C, \"prototype\").\n5. ReturnIfAbrupt(P).\n6. If Type(P) is not Object, throw a TypeError exception.\n", "features": ["Symbol", "Symbol.hasInstance"]}, {"path": "./test262-main/test/built-ins/Function/prototype/apply/argarray-not-object.js", "esid": " sec-function.prototype.apply", "description": " >Throws a TypeError exception if argArray is not an object\n", "info": " |Function.prototype.apply ( thisArg, argArray )\n\n[...]\n4. Let argList be ? CreateListFromArrayLike(argArray).\n\nCreateListFromArrayLike ( obj [ , elementTypes ] )\n\n[...]\n2. If Type(obj) is not Object, throw a TypeError exception.\n"}, {"path": "./test262-main/test/built-ins/Function/prototype/apply/length.js", "esid": " sec-function.prototype.apply", "description": " >Function.prototype.apply.length is 2.\n", "info": " |ECMAScript Standard Built-in Objects\n...\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this value\nis equal to the largest number of named arguments shown in the subclause\nheadings for the function description, including optional parameters.\n...\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Function/prototype/apply/name.js", "version": 6, "esid": " 19.2.3.1", "description": " >Function.prototype.apply.name is \"apply\".\n", "info": " |Function.prototype.apply ( thisArg, argArray )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Function/prototype/bind/BoundFunction_restricted-properties.js", "description": " >Functions created using Function.prototype.bind() do not have own\nproperties \"caller\" or \"arguments\", but inherit them from\n%FunctionPrototype%.\n", "version": 6, "esid": " 16.1"}, {"path": "./test262-main/test/built-ins/Function/prototype/bind/instance-length-default-value.js", "esid": " sec-function.prototype.bind", "description": " >\"length\" value of a bound function defaults to 0.\nNon-own and non-number \"length\" values of target function are ignored.\n", "info": " |Function.prototype.bind ( thisArg, ...args )\n\n[...]\n5. Let targetHasLength be ? HasOwnProperty(Target, \"length\").\n6. If targetHasLength is true, then\na. Let targetLen be ? Get(Target, \"length\").\nb. If Type(targetLen) is not Number, let L be 0.\nc. Else,\ni. Set targetLen to ! ToInteger(targetLen).\nii. Let L be the larger of 0 and the result of targetLen minus the number of elements of args.\n7. Else, let L be 0.\n8. Perform ! SetFunctionLength(F, L).\n[...]\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Function/prototype/bind/instance-length-exceeds-int32.js", "esid": " sec-function.prototype.bind", "description": " >The target function length can exceed 2**31-1.\n", "info": " |19.2.3.2 Function.prototype.bind ( thisArg, ...args )\n\n...\n6. If targetHasLength is true, then\na. Let targetLen be ? Get(Target, \"length\").\nb. If Type(targetLen) is not Number, let L be 0.\nc. Else,\ni. Let targetLen be ToInteger(targetLen).\nii. Let L be the larger of 0 and the result of targetLen minus the number of elements of args.\n...\n8. Perform ! SetFunctionLength(F, L).\n...\n"}, {"path": "./test262-main/test/built-ins/Function/prototype/bind/instance-length-prop-desc.js", "esid": " sec-function.prototype.bind", "description": " >\"length\" property of a bound function has correct descriptor.\n", "info": " |Function.prototype.bind ( thisArg, ...args )\n\n[...]\n8. Perform ! SetFunctionLength(F, L).\n[...]\n\nSetFunctionLength ( F, length )\n\n[...]\n4. Return ! DefinePropertyOrThrow(F, \"length\", PropertyDescriptor { [[Value]]:\nlength, [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }).\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Function/prototype/bind/instance-length-tointeger.js", "esid": " sec-function.prototype.bind", "description": " >\"length\" value of a bound function is non-negative integer.\nToInteger is performed on \"length\" value of target function.\n", "info": " |Function.prototype.bind ( thisArg, ...args )\n\n[...]\n5. Let targetHasLength be ? HasOwnProperty(Target, \"length\").\n6. If targetHasLength is true, then\na. Let targetLen be ? Get(Target, \"length\").\nb. If Type(targetLen) is not Number, let L be 0.\nc. Else,\ni. Set targetLen to ! ToInteger(targetLen).\nii. Let L be the larger of 0 and the result of targetLen minus the number of elements of args.\n7. Else, let L be 0.\n8. Perform ! SetFunctionLength(F, L).\n[...]\n\nToInteger ( argument )\n\n1. Let number be ? ToNumber(argument).\n2. If number is NaN, +0, or -0, return +0.\n3. If number is +\u221e or -\u221e, return number.\n4. Let integer be the Number value that is the same sign as number and whose magnitude is floor(abs(number)).\n5. If integer is -0, return +0.\n6. Return integer.\n"}, {"path": "./test262-main/test/built-ins/Function/prototype/bind/instance-name-error.js", "version": 6, "esid": " 19.2.3.2", "description": " Error thrown when accessing target's `name` property", "info": " |12. Let targetName be Get(Target, \"name\").\n13. ReturnIfAbrupt(targetName).\n"}, {"path": "./test262-main/test/built-ins/Function/prototype/bind/length.js", "esid": " sec-function.prototype.bind", "description": " >Function.prototype.bind.length is 1.\n", "info": " |Function.prototype.bind ( thisArg, ...args )\n\nECMAScript Standard Built-in Objects\n\nEvery built-in function object, including constructors, has a \"length\" property whose\nvalue is an integer. Unless otherwise specified, this value is equal to the largest\nnumber of named arguments shown in the subclause headings for the function description.\nOptional parameters (which are indicated with brackets: [ ]) or rest parameters (which\nare shown using the form \u00ab...name\u00bb) are not included in the default argument count.\n\nUnless otherwise specified, the \"length\" property of a built-in function object has\nthe attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Function/prototype/bind/name.js", "version": 6, "esid": " 19.2.3.2", "description": " >Function.prototype.bind.name is \"bind\".\n", "info": " |Function.prototype.bind ( thisArg , ...args)\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Function/prototype/call/S15.3.4.4_A9.js", "info": " |The Function.prototype.call.length property does not have the attribute\nDontDelete\n", "version": 5, "esid": " 15.3.4.4_A9", "description": " >Checking if deleting the Function.prototype.call.length property\nfails\n"}, {"path": "./test262-main/test/built-ins/Function/prototype/call/name.js", "version": 6, "esid": " 19.2.3.3", "description": " >Function.prototype.call.name is \"call\".\n", "info": " |Function.prototype.call (thisArg , ...args)\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Function/prototype/length.js", "esid": " sec-properties-of-the-function-prototype-object", "description": " >Function.prototype.length is 0.\n", "info": " |Properties of the Function Prototype Object\n\nThe Function prototype object:\n\n[...]\n* has a \"length\" property whose value is 0.\n\nECMAScript Standard Built-in Objects\n\nUnless otherwise specified, the \"length\" property of a built-in function object has\nthe attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Function/prototype/name.js", "version": 6, "esid": " 19.2.3", "description": " FunctionPrototype `name` property", "info": " |The value of the name property of the Function prototype object is the\nempty String.\n\nES6 Section 17:\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Function/prototype/toString/S15.3.4.2_A9.js", "info": " |The Function.prototype.toString.length property does not have the\nattribute DontDelete\n", "version": 5, "esid": " 15.3.4.2_A9", "description": " >Checking if deleting the Function.prototype.toString.length\nproperty fails\n"}, {"path": "./test262-main/test/built-ins/Function/prototype/toString/name.js", "esid": " sec-function.prototype.tostring", "description": " >Function.prototype.toString.name is \"toString\".\n", "info": " |Function.prototype.toString ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/GeneratorFunction/extensibility.js", "esid": " sec-properties-of-the-generatorfunction-constructor", "description": " Object extensibility", "info": " |The value of the [[Extensible]] internal slot of the GeneratorFunction\nconstructor is true.\n", "features": ["generators"]}, {"path": "./test262-main/test/built-ins/GeneratorFunction/has-instance.js", "version": 6, "esid": " 25.2", "description": " >Generator function instances are correctly reported as instances of the\nGeneratorFunction intrinsic.\n", "features": ["generators"]}, {"path": "./test262-main/test/built-ins/GeneratorFunction/instance-length.js", "esid": " sec-generatorfunction", "description": " Definition of instance `length` property", "info": " |[...]\n3. Return CreateDynamicFunction(C, NewTarget, \"generator\", args).\n\n19.2.1.1.1 Runtime Semantics: CreateDynamicFunction\n\n[...]\n26. Perform FunctionInitialize(F, Normal, parameters, body, scope).\n[...]\n\n9.2.4 FunctionInitialize\n\n[...]\n3. Perform ! DefinePropertyOrThrow(F, \"length\",\nPropertyDescriptor{[[Value]]: len, [[Writable]]: false, [[Enumerable]]:\nfalse, [[Configurable]]: true}).\n[...]\n", "includes": ["propertyHelper.js"], "features": ["generators"]}, {"path": "./test262-main/test/built-ins/GeneratorFunction/instance-name.js", "version": 6, "esid": " 25.2.1.1", "description": " Assignment of function `name` attribute", "info": " |[...]\n3. Return CreateDynamicFunction(C, NewTarget, \"generator\", args).\n\nES6 19.2.1.1.1\nRuntimeSemantics: CreateDynamicFunction(constructor, newTarget, kind, args)\n\n[...]\n29. Perform SetFunctionName(F, \"anonymous\").\n", "includes": ["propertyHelper.js"], "features": ["generators"]}, {"path": "./test262-main/test/built-ins/GeneratorFunction/instance-prototype.js", "esid": " sec-generatorfunction", "description": " Definition of instance `prototype` property", "info": " |[...]\n3. Return CreateDynamicFunction(C, NewTarget, \"generator\", args).\n\n19.2.1.1.1 Runtime Semantics: CreateDynamicFunction\n\n[...]\n27. If kind is \"generator\", then\na. Let prototype be ObjectCreate(%GeneratorPrototype%).\nb. Perform DefinePropertyOrThrow(F, \"prototype\",\nPropertyDescriptor{[[Value]]: prototype, [[Writable]]: true,\n[[Enumerable]]: false, [[Configurable]]: false}).\n[...]\n", "includes": ["propertyHelper.js"], "features": ["generators"]}, {"path": "./test262-main/test/built-ins/GeneratorFunction/instance-yield-expr-in-param.js", "esid": " sec-generatorfunction", "description": " Definition of instance `length` property", "info": " |[...]\n3. Return CreateDynamicFunction(C, NewTarget, \"generator\", args).\n\n19.2.1.1.1 Runtime Semantics: CreateDynamicFunction\n\n[...]\n20. If kind is \"generator\", then\na. If parameters Contains YieldExpression is true, throw a SyntaxError\nexception.\n", "features": ["generators"]}, {"path": "./test262-main/test/built-ins/GeneratorFunction/invoked-as-constructor-no-arguments.js", "version": 6, "esid": " 25.2", "description": " >When invoked via the constructor invocation pattern without arguments, the\nGeneratorFunction intrinsic returns a valid generator with an empty body.\n", "features": ["generators"]}, {"path": "./test262-main/test/built-ins/GeneratorFunction/invoked-as-function-multiple-arguments.js", "version": 6, "esid": " 25.2", "description": " >When invoked via the function invocation pattern with multiple arguments,\nthe GeneratorFunction intrinsic creates a valid generator whose body is the\nlast argument evaluated as source code and whose formal parameters are\ndefined by the preceding arguments.\n", "features": ["generators"]}, {"path": "./test262-main/test/built-ins/GeneratorFunction/invoked-as-function-no-arguments.js", "version": 6, "esid": " 25.2", "description": " >When invoked via the function invocation pattern without arguments, the\nGeneratorFunction intrinsic returns a valid generator with an empty body.\n", "features": ["generators"]}, {"path": "./test262-main/test/built-ins/GeneratorFunction/invoked-as-function-single-argument.js", "version": 6, "esid": " 25.2", "description": " >When invoked via the function invocation pattern with a single argument,\nthe GeneratorFunction intrinsic creates a valid generator whose body is the\nfirst argument evaluated as source code.\n", "features": ["generators"]}, {"path": "./test262-main/test/built-ins/GeneratorFunction/length.js", "esid": " sec-generatorfunction.length", "description": " >This is a data property with a value of 1. This property has the attributes {\n[[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["generators"]}, {"path": "./test262-main/test/built-ins/GeneratorFunction/name.js", "esid": " sec-properties-of-the-generatorfunction-constructor", "description": " Function \"name\" property", "info": " |The value of the name property of the GeneratorFunction is\n\"GeneratorFunction\".\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value is a\nString.\n\nUnless otherwise specified, the name property of a built-in Function object,\nif it exists, has the attributes { [[Writable]]: false, [[Enumerable]]:\nfalse, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["generators"]}, {"path": "./test262-main/test/built-ins/GeneratorFunction/prototype/extensibility.js", "esid": " sec-properties-of-the-generatorfunction-prototype-object", "description": " Object extensibility", "info": " |The initial value of the [[Extensible]] internal slot of the\nGeneratorFunction prototype object is true.\n", "features": ["generators"]}, {"path": "./test262-main/test/built-ins/GeneratorFunction/prototype/not-callable.js", "esid": " sec-properties-of-the-generatorfunction-prototype-object", "description": " >%GeneratorFunction.prototype% is an ordinary non-callable object.\n", "info": " |Properties of the GeneratorFunction Prototype Object\n\nThe GeneratorFunction prototype object:\n\n[...]\n* is an ordinary object.\n* is not a function object and does not have an [[ECMAScriptCode]] internal slot\nor any other of the internal slots listed in Table 28 or Table 74.\n", "features": ["generators"]}, {"path": "./test262-main/test/built-ins/GeneratorFunction/prototype/prop-desc.js", "version": 6, "esid": " 25.4.5.1", "description": " GeneratorFunction.prototype property descriptor", "info": " |This property has the attributes { [[Writable]]: false, [[Enumerable]]:\nfalse, [[Configurable]]: false }.\n", "includes": ["propertyHelper.js"], "features": ["generators"]}, {"path": "./test262-main/test/built-ins/GeneratorPrototype/next/consecutive-yields.js", "version": 6, "esid": " 25.2", "description": " >When a generator body contains two consecutive yield statements, it should\nproduce an iterable that visits each yielded value and then completes.\n", "features": ["generators"]}, {"path": "./test262-main/test/built-ins/GeneratorPrototype/next/context-method-invocation.js", "version": 6, "esid": " 25.2", "description": " >When a generator function is invoked as a method of an object, its context\nis that object.\n", "features": ["generators"]}, {"path": "./test262-main/test/built-ins/GeneratorPrototype/next/from-state-executing.js", "esid": " sec-generatorvalidate", "description": " >A TypeError should be thrown if the generator is resumed while in the\n\"executing\" state and the generator should be marked as \"completed\"\n", "info": " |25.3.3.1 GeneratorStart\n\n[...]\n4. Set the code evaluation state of genContext such that when evaluation is\nresumed for that execution context the following steps will be performed:\na. Let result be the result of evaluating generatorBody.\nb. Assert: If we return here, the generator either threw an exception or\nperformed either an implicit or explicit return.\nc. Remove genContext from the execution context stack and restore the\nexecution context that is at the top of the execution context stack as\nthe running execution context.\nd. Set generator.[[GeneratorState]] to \"completed\".\n[...]\n\n25.3.3.3 GeneratorResume\n\n1. Let state be ? GeneratorValidate(generator).\n\n25.3.3.2 GeneratorValidate\n\n1. If Type(generator) is not Object, throw a TypeError exception.\n2. If generator does not have a [[GeneratorState]] internal slot, throw a\nTypeError exception.\n3. Assert: generator also has a [[GeneratorContext]] internal slot.\n4. Let state be generator.[[GeneratorState]].\n5. If state is \"executing\", throw a TypeError exception.\n", "features": ["generators"]}, {"path": "./test262-main/test/built-ins/GeneratorPrototype/next/length.js", "version": 6, "esid": " 25.3.1.2", "description": " >Generator.prototype.next.length is 1.\n", "info": " |Generator.prototype.next ( value )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["generators"]}, {"path": "./test262-main/test/built-ins/GeneratorPrototype/next/lone-return.js", "version": 6, "esid": " 25.2", "description": " >When a generator body contains a lone return statement, it should produce\nan iterator that immediately completes with the returned value.\n", "features": ["generators"]}, {"path": "./test262-main/test/built-ins/GeneratorPrototype/next/lone-yield.js", "version": 6, "esid": " 25.2", "description": " >When a generator body contains a lone yield statement, it should produce an\niterable that visits the yielded value and then completes.\n", "features": ["generators"]}, {"path": "./test262-main/test/built-ins/GeneratorPrototype/next/name.js", "version": 6, "esid": " 25.3.1.2", "description": " >Generator.prototype.next.name is \"next\".\n", "info": " |Generator.prototype.next ( value )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["generators"]}, {"path": "./test262-main/test/built-ins/GeneratorPrototype/next/no-control-flow.js", "version": 6, "esid": " 25.2", "description": " >When a generator body contains no control flow statements, it should\nproduce an iterator that is initially completed with `undefined` as its\nvalue.\n", "features": ["generators"]}, {"path": "./test262-main/test/built-ins/GeneratorPrototype/next/not-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >Object.getPrototypeOf((function* g() {}).prototype).next does not implement [[Construct]], is not new-able\n", "info": " |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n", "includes": ["isConstructor.js"], "features": ["Reflect.construct", "generators", "arrow-function"]}, {"path": "./test262-main/test/built-ins/GeneratorPrototype/next/property-descriptor.js", "description": " >The GeneratorPrototype intrinsic should define a `next` property that is\nnon-enumerable, writable, and configurable (as per section 17).\n", "includes": ["propertyHelper.js"], "version": 6, "esid": " 25.3.1", "features": ["generators"]}, {"path": "./test262-main/test/built-ins/GeneratorPrototype/next/result-prototype.js", "version": 6, "esid": " 25.2", "description": " >The `next` method returns an object that has \"own\" properties `value` and\n`done` and that inherits directly from the Object prototype.\n", "features": ["generators"]}, {"path": "./test262-main/test/built-ins/GeneratorPrototype/next/return-yield-expr.js", "version": 6, "esid": " 25.2", "description": " >Yield expressions are valid yield expression operands.\n", "features": ["generators"]}, {"path": "./test262-main/test/built-ins/GeneratorPrototype/next/this-val-not-generator.js", "esid": " sec-generator.prototype.next", "description": " >A TypeError should be thrown from GeneratorValidate (25.3.3.2) if the\ncontext of `next` does not define the [[GeneratorState]] internal slot.\n", "info": " |1. Let g be the this value.\n2. Return GeneratorResume(g, value).\n\n25.3.3.3 GeneratorResume\n\n1. Let state be ? GeneratorValidate(generator).\n\n25.3.3.2 GeneratorValidate\n\n[...]\n2. If generator does not have a [[GeneratorState]] internal slot, throw a\nTypeError exception.\n", "features": ["generators"]}, {"path": "./test262-main/test/built-ins/GeneratorPrototype/next/this-val-not-object.js", "esid": " sec-generator.prototype.next", "description": " >A TypeError should be thrown from GeneratorValidate (25.3.3.2) if the \"this\"\nvalue of `next` is not an object.\n", "info": " |1. Let g be the this value.\n2. Return GeneratorResume(g, value).\n\n25.3.3.3 GeneratorResume\n\n1. Let state be ? GeneratorValidate(generator).\n\n25.3.3.2 GeneratorValidate\n\n1. If Type(generator) is not Object, throw a TypeError exception.\n", "features": ["generators", "Symbol"]}, {"path": "./test262-main/test/built-ins/GeneratorPrototype/return/from-state-completed.js", "version": 6, "esid": " 25.3.1.3", "description": " >Resuming abruptly from a generator in the 'completed' state should honor the\nabrupt completion and remain in the 'completed' state.\n", "features": ["generators"]}, {"path": "./test262-main/test/built-ins/GeneratorPrototype/return/from-state-executing.js", "esid": " sec-generatorvalidate", "description": " >A TypeError should be thrown if the generator is in the \"executing\" state,\nand the generator should be marked as \"completed\"\n", "info": " |25.3.3.1 GeneratorStart\n\n[...]\n4. Set the code evaluation state of genContext such that when evaluation is\nresumed for that execution context the following steps will be performed:\na. Let result be the result of evaluating generatorBody.\nb. Assert: If we return here, the generator either threw an exception or\nperformed either an implicit or explicit return.\nc. Remove genContext from the execution context stack and restore the\nexecution context that is at the top of the execution context stack as\nthe running execution context.\nd. Set generator.[[GeneratorState]] to \"completed\".\n[...]\n\n25.3.3.4 GeneratorResumeAbrupt\n\n1. Let state be ? GeneratorValidate(generator).\n\n25.3.3.2 GeneratorValidate\n\n1. If Type(generator) is not Object, throw a TypeError exception.\n2. If generator does not have a [[GeneratorState]] internal slot, throw a\nTypeError exception.\n3. Assert: generator also has a [[GeneratorContext]] internal slot.\n4. Let state be generator.[[GeneratorState]].\n5. If state is \"executing\", throw a TypeError exception.\n", "features": ["generators"]}, {"path": "./test262-main/test/built-ins/GeneratorPrototype/return/from-state-suspended-start.js", "version": 6, "esid": " 25.3.1.3", "description": " >Resuming abruptly from a generator in the 'suspendedStart' state should\nhonor the abrupt completion and trigger a transition into the 'completed'\nstate.\n", "features": ["generators"]}, {"path": "./test262-main/test/built-ins/GeneratorPrototype/return/length.js", "version": 6, "esid": " 25.3.1.3", "description": " >Generator.prototype.return.length is 1.\n", "info": " |Generator.prototype.return ( value )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["generators"]}, {"path": "./test262-main/test/built-ins/GeneratorPrototype/return/name.js", "version": 6, "esid": " 25.3.1.3", "description": " >Generator.prototype.return.name is \"return\".\n", "info": " |Generator.prototype.return ( value )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["generators"]}, {"path": "./test262-main/test/built-ins/GeneratorPrototype/return/not-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >Object.getPrototypeOf((function* g() {}).prototype).return does not implement [[Construct]], is not new-able\n", "info": " |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n", "includes": ["isConstructor.js"], "features": ["Reflect.construct", "generators", "arrow-function"]}, {"path": "./test262-main/test/built-ins/GeneratorPrototype/return/property-descriptor.js", "description": " >The GeneratorPrototype intrinsic should define a `return` property that is\nnon-enumerable, writable, and configurable (as per section 17).\n", "includes": ["propertyHelper.js"], "version": 6, "esid": " 25.3.1", "features": ["generators"]}, {"path": "./test262-main/test/built-ins/GeneratorPrototype/return/this-val-not-generator.js", "esid": " sec-generator.prototype.return", "description": " >A TypeError should be thrown from GeneratorValidate (25.3.3.2) if the\ncontext of `return` does not define the [[GeneratorState]] internal slot.\n", "info": " |[...]\n3. Return ? GeneratorResumeAbrupt(g, C).\n\n25.3.3.4 GeneratorResumeAbrupt\n\n1. Let state be ? GeneratorValidate(generator).\n\n25.3.3.2 GeneratorValidate\n\n[...]\n2. If generator does not have a [[GeneratorState]] internal slot, throw a\nTypeError exception.\n", "features": ["generators"]}, {"path": "./test262-main/test/built-ins/GeneratorPrototype/return/this-val-not-object.js", "esid": " sec-generator.prototype.return", "description": " >A TypeError should be thrown from GeneratorValidate (25.3.3.2) if the \"this\"\nvalue of `return` is not an object.\n", "info": " |[...]\n3. Return ? GeneratorResumeAbrupt(g, C).\n\n25.3.3.4 GeneratorResumeAbrupt\n\n1. Let state be ? GeneratorValidate(generator).\n\n25.3.3.2 GeneratorValidate\n\n1. If Type(generator) is not Object, throw a TypeError exception.\n", "features": ["generators", "Symbol"]}, {"path": "./test262-main/test/built-ins/GeneratorPrototype/return/try-catch-before-try.js", "version": 6, "esid": " 25.3.1.3", "description": " >When a generator is paused before a `try..catch` statement, `return` should\ninterrupt control flow as if a `return` statement had appeared at that\nlocation in the function body.\n", "features": ["generators"]}, {"path": "./test262-main/test/built-ins/GeneratorPrototype/return/try-catch-following-catch.js", "version": 6, "esid": " 25.3.1.3", "description": " >When a generator is paused after a `try..catch` statement, `return` should\ninterrupt control flow as if a `return` statement had appeared at that\nlocation in the function body.\n", "features": ["generators"]}, {"path": "./test262-main/test/built-ins/GeneratorPrototype/return/try-catch-within-catch.js", "version": 6, "esid": " 25.3.1.3", "description": " >When a generator is paused within the `catch` block of a `try..catch`\nstatement, `return` should interrupt control flow as if a `return`\nstatement had appeared at that location in the function body.\n", "features": ["generators"]}, {"path": "./test262-main/test/built-ins/GeneratorPrototype/return/try-catch-within-try.js", "version": 6, "esid": " 25.3.1.3", "description": " >When a generator is paused within the `try` block of a `try..catch`\nstatement, `return` should interrupt control flow as if a `return`\nstatement had appeared at that location in the function body.\n", "features": ["generators"]}, {"path": "./test262-main/test/built-ins/GeneratorPrototype/return/try-finally-before-try.js", "version": 6, "esid": " 25.3.1.3", "description": " >When a generator is paused before a `try..finally` statement, `return`\nshould interrupt control flow as if a `return` statement had appeared at\nthat location in the function body.\n", "features": ["generators"]}, {"path": "./test262-main/test/built-ins/GeneratorPrototype/return/try-finally-following-finally.js", "version": 6, "esid": " 25.3.1.3", "description": " >When a generator is paused after a `try..finally` statement, `return`\nshould interrupt control flow as if a `return` statement had appeared at\nthat location in the function body.\n", "features": ["generators"]}, {"path": "./test262-main/test/built-ins/GeneratorPrototype/return/try-finally-nested-try-catch-within-catch.js", "version": 6, "esid": " 25.3.1.3", "description": " >When a generator is paused within a `catch` block that is declared within a\n`try` block of a `try..catch` statement, `return` should interrupt control\nflow as if a `return` statement had appeared at that location in the\nfunction body.\n", "features": ["generators"]}, {"path": "./test262-main/test/built-ins/GeneratorPrototype/return/try-finally-nested-try-catch-within-finally.js", "version": 6, "esid": " 25.3.1.3", "description": " >When a generator is paused within a `finally` block of a `try..catch`\nstatement, `return` should interrupt control flow as if a `return`\nstatement had appeared at that location in the function body.\n", "features": ["generators"]}, {"path": "./test262-main/test/built-ins/GeneratorPrototype/return/try-finally-nested-try-catch-within-inner-try.js", "version": 6, "esid": " 25.3.1.3", "description": " >When a generator is paused within a `try` block that is declared within a\n`try` block of a `try..catch` statement, `return` should interrupt control\nflow as if a `return` statement had appeared at that location in the\nfunction body.\n", "features": ["generators"]}, {"path": "./test262-main/test/built-ins/GeneratorPrototype/return/try-finally-nested-try-catch-within-outer-try-after-nested.js", "version": 6, "esid": " 25.3.1.3", "description": " >When a generator is paused within a `try` block of a `try..catch` statement\nand following a nested `try..catch` statment, `return` should interrupt\ncontrol flow as if a `return` statement had appeared at that location in\nthe function body.\n", "features": ["generators"]}, {"path": "./test262-main/test/built-ins/GeneratorPrototype/return/try-finally-nested-try-catch-within-outer-try-before-nested.js", "version": 6, "esid": " 25.3.1.3", "description": " >When a generator is paused within a `try` block of a `try..catch` statement\nand before a nested `try..catch` statement, `return` should interrupt\ncontrol flow as if a `return` statement had appeared at that location in\nthe function body.\n", "features": ["generators"]}, {"path": "./test262-main/test/built-ins/GeneratorPrototype/return/try-finally-within-finally.js", "version": 6, "esid": " 25.3.1.3", "description": " >When a generator is paused within the `finally` block of a `try..finally`\nstatement, `return` should interrupt control flow as if a `return`\nstatement had appeared at that location in the function body.\n", "features": ["generators"]}, {"path": "./test262-main/test/built-ins/GeneratorPrototype/return/try-finally-within-try.js", "version": 6, "esid": " 25.3.1.3", "description": " >When a generator is paused within a `try` block of a `try..finally`\nstatement, `return` should interrupt control flow as if a `return`\nstatement had appeared at that location in the function body.\n", "features": ["generators"]}, {"path": "./test262-main/test/built-ins/GeneratorPrototype/throw/from-state-completed.js", "version": 6, "esid": " 25.3.1.4", "description": " >Resuming abruptly from a generator in the 'completed' state should honor\nthe abrupt completion and remain in the 'completed' state.\n", "features": ["generators"]}, {"path": "./test262-main/test/built-ins/GeneratorPrototype/throw/from-state-executing.js", "esid": " sec-generatorvalidate", "description": " >A TypeError should be thrown if the generator is in the \"executing\" state,\nand the generator should be marked as \"completed\"\n", "info": " |25.3.3.1 GeneratorStart\n\n[...]\n4. Set the code evaluation state of genContext such that when evaluation is\nresumed for that execution context the following steps will be performed:\na. Let result be the result of evaluating generatorBody.\nb. Assert: If we return here, the generator either threw an exception or\nperformed either an implicit or explicit return.\nc. Remove genContext from the execution context stack and restore the\nexecution context that is at the top of the execution context stack as\nthe running execution context.\nd. Set generator.[[GeneratorState]] to \"completed\".\n[...]\n\n25.3.3.4 GeneratorResumeAbrupt\n\n1. Let state be ? GeneratorValidate(generator).\n\n25.3.3.2 GeneratorValidate\n\n1. If Type(generator) is not Object, throw a TypeError exception.\n2. If generator does not have a [[GeneratorState]] internal slot, throw a\nTypeError exception.\n3. Assert: generator also has a [[GeneratorContext]] internal slot.\n4. Let state be generator.[[GeneratorState]].\n5. If state is \"executing\", throw a TypeError exception.\n", "features": ["generators"]}, {"path": "./test262-main/test/built-ins/GeneratorPrototype/throw/from-state-suspended-start.js", "version": 6, "esid": " 25.3.1.4", "description": " >Resuming abruptly from a generator in the 'suspendedStart' state should\nhonor the abrupt completion and trigger a transition into the 'completed'\nstate.\n", "features": ["generators"]}, {"path": "./test262-main/test/built-ins/GeneratorPrototype/throw/length.js", "version": 6, "esid": " 25.3.1.4", "description": " >Generator.prototype.throw.length is 1.\n", "info": " |Generator.prototype.throw ( exception )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["generators"]}, {"path": "./test262-main/test/built-ins/GeneratorPrototype/throw/name.js", "version": 6, "esid": " 25.3.1.4", "description": " >Generator.prototype.throw.name is \"throw\".\n", "info": " |Generator.prototype.throw ( exception )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["generators"]}, {"path": "./test262-main/test/built-ins/GeneratorPrototype/throw/not-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >Object.getPrototypeOf((function* g() {}).prototype).throw does not implement [[Construct]], is not new-able\n", "info": " |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n", "includes": ["isConstructor.js"], "features": ["Reflect.construct", "generators", "arrow-function"]}, {"path": "./test262-main/test/built-ins/GeneratorPrototype/throw/property-descriptor.js", "description": " >The GeneratorPrototype intrinsic should define a `throw` property that is\nnon-enumerable, writable, and configurable (as per section 17).\n", "includes": ["propertyHelper.js"], "version": 6, "esid": " 25.3.1", "features": ["generators"]}, {"path": "./test262-main/test/built-ins/GeneratorPrototype/throw/this-val-not-generator.js", "esid": " sec-generator.prototype.throw", "description": " >A TypeError should be thrown from GeneratorValidate (25.3.3.2) if the\ncontext of `throw` does not define the [[GeneratorState]] internal slot.\n", "info": " |[...]\n3. Return ? GeneratorResumeAbrupt(g, C).\n\n25.3.3.4 GeneratorResumeAbrupt\n\n1. Let state be ? GeneratorValidate(generator).\n\n25.3.3.2 GeneratorValidate\n\n[...]\n2. If generator does not have a [[GeneratorState]] internal slot, throw a\nTypeError exception.\n", "features": ["generators"]}, {"path": "./test262-main/test/built-ins/GeneratorPrototype/throw/this-val-not-object.js", "esid": " sec-generator.prototype.throw", "description": " >A TypeError should be thrown from GeneratorValidate (25.3.3.2) if the \"this\"\nvalue of `throw` is not an object.\n", "info": " |[...]\n3. Return ? GeneratorResumeAbrupt(g, C).\n\n25.3.3.4 GeneratorResumeAbrupt\n\n1. Let state be ? GeneratorValidate(generator).\n\n25.3.3.2 GeneratorValidate\n\n1. If Type(generator) is not Object, throw a TypeError exception.\n", "features": ["generators", "Symbol"]}, {"path": "./test262-main/test/built-ins/GeneratorPrototype/throw/try-catch-before-try.js", "version": 6, "esid": " 25.3.1.4", "description": " >When a generator is paused before a `try..catch` statement, `throw` should\ninterrupt control flow as if a `throw` statement had appeared at that\nlocation in the function body.\n", "features": ["generators"]}, {"path": "./test262-main/test/built-ins/GeneratorPrototype/throw/try-catch-following-catch.js", "version": 6, "esid": " 25.3.1.4", "description": " >When a generator is paused after a `try..catch` statement, `throw` should\ninterrupt control flow as if a `throw` statement had appeared at that\nlocation in the function body.\n", "features": ["generators"]}, {"path": "./test262-main/test/built-ins/GeneratorPrototype/throw/try-catch-within-catch.js", "version": 6, "esid": " 25.3.1.4", "description": " >When a generator is paused within the `catch` block of a `try..catch`\nstatement, `throw` should interrupt control flow as if a `throw` statement\nhad appeared at that location in the function body.\n", "features": ["generators"]}, {"path": "./test262-main/test/built-ins/GeneratorPrototype/throw/try-catch-within-try.js", "version": 6, "esid": " 25.3.1.4", "description": " >When a generator is paused within the `try` block of a `try..catch`\nstatement, `throw` should interrupt control flow as if a `throw` statement\nhad appeared at that location in the function body.\n", "features": ["generators"]}, {"path": "./test262-main/test/built-ins/GeneratorPrototype/throw/try-finally-before-try.js", "version": 6, "esid": " 25.3.1.4", "description": " >When a generator is paused before a `try..finally` statement, `throw`\nshould interrupt control flow as if a `throw` statement had appeared at\nthat location in the function body.\n", "features": ["generators"]}, {"path": "./test262-main/test/built-ins/GeneratorPrototype/throw/try-finally-following-finally.js", "version": 6, "esid": " 25.3.1.4", "description": " >When a generator is paused after a `try..finally` statement, `throw` should\ninterrupt control flow as if a `throw` statement had appeared at that\nlocation in the function body.\n", "features": ["generators"]}, {"path": "./test262-main/test/built-ins/GeneratorPrototype/throw/try-finally-nested-try-catch-within-catch.js", "version": 6, "esid": " 25.3.1.4", "description": " >When a generator is paused within a `catch` block that is declared within a\n`try` block of a `try..catch` statement, `throw` should interrupt control\nflow as if a `throw` statement had appeared at that location in the\nfunction body.\n", "features": ["generators"]}, {"path": "./test262-main/test/built-ins/GeneratorPrototype/throw/try-finally-nested-try-catch-within-finally.js", "version": 6, "esid": " 25.3.1.4", "description": " >When a generator is paused within a `finally` block of a `try..catch`\nstatement, `throw` should interrupt control flow as if a `throw` statement\nhad appeared at that location in the function body.\n", "features": ["generators"]}, {"path": "./test262-main/test/built-ins/GeneratorPrototype/throw/try-finally-nested-try-catch-within-inner-try.js", "version": 6, "esid": " 25.3.1.4", "description": " >When a generator is paused within a `try` block that is declared within a\n`try` block of a `try..catch` statement, `throw` should interrupt control\nflow as if a `throw` statement had appeared at that location in the\nfunction body.\n", "features": ["generators"]}, {"path": "./test262-main/test/built-ins/GeneratorPrototype/throw/try-finally-nested-try-catch-within-outer-try-after-nested.js", "version": 6, "esid": " 25.3.1.4", "description": " >When a generator is paused within a `try` block of a `try..catch` statement\nand following a nested `try..catch` statment, `throw` should interrupt\ncontrol flow as if a `throw` statement had appeared at that location in the\nfunction body.\n", "features": ["generators"]}, {"path": "./test262-main/test/built-ins/GeneratorPrototype/throw/try-finally-nested-try-catch-within-outer-try-before-nested.js", "version": 6, "esid": " 25.3.1.4", "description": " >When a generator is paused within a `try` block of a `try..catch` statement\nand before a nested `try..catch` statement, `throw` should interrupt\ncontrol flow as if a `throw` statement had appeared at that location in the\nfunction body.\n", "features": ["generators"]}, {"path": "./test262-main/test/built-ins/GeneratorPrototype/throw/try-finally-within-finally.js", "version": 6, "esid": " 25.3.1.4", "description": " >When a generator is paused within the `finally` block of a `try..finally`\nstatement, `throw` should interrupt control flow as if a `throw` statement\nhad appeared at that location in the function body.\n", "features": ["generators"]}, {"path": "./test262-main/test/built-ins/GeneratorPrototype/throw/try-finally-within-try.js", "version": 6, "esid": " 25.3.1.4", "description": " >When a generator is paused within a `try` block of a `try..finally`\nstatement, `throw` should interrupt control flow as if a `throw` statement\nhad appeared at that location in the function body.\n", "features": ["generators"]}, {"path": "./test262-main/test/built-ins/IteratorPrototype/Symbol.iterator/length.js", "version": 6, "esid": " 25.1.2.1", "description": " Length of IteratorPrototype[ @@iterator ]", "info": " |ES6 Section 17:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this value\nis equal to the largest number of named arguments shown in the subclause\nheadings for the function description, including optional parameters.\n\n[...]\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "features": ["Symbol.iterator"], "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/IteratorPrototype/Symbol.iterator/name.js", "version": 6, "esid": " 25.1.2.1", "description": " Descriptor for `name` property", "info": " |The value of the name property of this function is \"[Symbol.iterator]\".\n\nES6 Section 17: ECMAScript Standard Built-in Objects\n\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value is a\nString. Unless otherwise specified, this value is the name that is given to\nthe function in this specification.\n\n[...]\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "features": ["Symbol.iterator"], "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/IteratorPrototype/Symbol.iterator/prop-desc.js", "version": 6, "esid": " 25.1.2.1", "description": " Property descriptor", "info": " |ES6 Section 17\n\nEvery other data property described in clauses 18 through 26 and in Annex\nB.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false,\n[[Configurable]]: true } unless otherwise specified.\n", "features": ["Symbol.iterator"], "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/JSON/parse/length.js", "esid": " sec-json.parse", "description": " >JSON.parse.length is 2.\n", "info": " |JSON.parse ( text [ , reviver ] )\n\nThe \"length\" property of the parse function is 2.\n\nECMAScript Standard Built-in Objects\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/JSON/parse/name.js", "esid": " sec-json.parse", "description": " >JSON.parse.name is \"parse\".\n", "info": " |JSON.parse ( text [ , reviver ] )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/JSON/parse/revived-proxy-revoked.js", "esid": " sec-json.parse", "description": " Behavior when revived value is a revoked Proxy exotic object", "info": " |[...]\n7. If IsCallable(reviver) is true, then\na. Let root be ObjectCreate(%ObjectPrototype%).\nb. Let rootName be the empty String.\nc. Let status be CreateDataProperty(root, rootName, unfiltered).\nd. Assert: status is true.\ne. Return ? InternalizeJSONProperty(root, rootName).\n\n24.3.1.1 Runtime Semantics: InternalizeJSONProperty\n\n[...]\n2. If Type(val) is Object, then\na. Let isArray be ? IsArray(val).\n\n7.2.2 IsArray\n\n[...]\n3. If argument is a Proxy exotic object, then\na. If the value of the [[ProxyHandler]] internal slot of argument is null,\nthrow a TypeError exception.\nb. Let target be the value of the [[ProxyTarget]] internal slot of\nargument.\nc. Return ? IsArray(target).\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/JSON/parse/reviver-call-order.js", "esid": " sec-internalizejsonproperty", "description": " JSON.parse reviver call order", "features": ["for-in-order"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/JSON/parse/reviver-object-own-keys-err.js", "esid": " sec-internalizejsonproperty", "description": " Abrupt completion from object property enumeration while reviving", "info": " |JSON.parse ( text [ , reviver ] )\n\n[...]\n7. If IsCallable(reviver) is true, then\n[...]\ne. Return ? InternalizeJSONProperty(root, rootName).\n\nRuntime Semantics: InternalizeJSONProperty ( holder, name)\n\n1. Let val be ? Get(holder, name).\n2. If Type(val) is Object, then\na. Let isArray be ? IsArray(val).\nb. If isArray is true, then\n[...]\nc. Else,\ni. Let keys be ? EnumerableOwnProperties(val, \"key\").\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/JSON/parse/text-non-string-primitive.js", "esid": " sec-json.parse", "description": " >Primitive values are coerced to strings and parsed.\n", "info": " |JSON.parse ( text [ , reviver ] )\n\n1. Let JText be ? ToString(text).\n2. Parse JText interpreted as UTF-16 encoded Unicode points (6.1.4) as a JSON\ntext as specified in ECMA-404. Throw a SyntaxError exception if JText is not\na valid JSON text as defined in that specification.\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/JSON/stringify/length.js", "esid": " sec-json.stringify", "description": " >JSON.stringify.length is 3.\n", "info": " |JSON.stringify ( value [ , replacer [ , space ] ] )\n\nThe \"length\" property of the stringify function is 3.\n\nECMAScript Standard Built-in Objects\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/JSON/stringify/name.js", "esid": " sec-json.stringify", "description": " >JSON.stringify.name is \"stringify\".\n", "info": " |JSON.stringify ( value [ , replacer [ , space ] ] )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/JSON/stringify/replacer-array-abrupt.js", "esid": " sec-json.stringify", "description": " >Abrupt completion from Get.\n", "info": " |JSON.stringify ( value [ , replacer [ , space ] ] )\n\n[...]\n4. If Type(replacer) is Object, then\n[...]\n2. Let len be ? LengthOfArrayLike(replacer).\n3. Let k be 0.\n4. Repeat, while k < len,\na. Let v be ? Get(replacer, ! ToString(k)).\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/JSON/stringify/replacer-array-wrong-type.js", "esid": " sec-json.stringify", "description": " >Values that are neither strings nor numbers are ignored.\n", "info": " |JSON.stringify ( value [ , replacer [ , space ] ] )\n\n[...]\n4. If Type(replacer) is Object, then\n[...]\n4. Repeat, while k < len,\na. Let v be ? Get(replacer, ! ToString(k)).\n[...]\nf. If item is not undefined and item is not currently an element of PropertyList, then\ni. Append item to the end of PropertyList.\n", "features": ["Proxy", "Symbol"]}, {"path": "./test262-main/test/built-ins/JSON/stringify/replacer-function-arguments.js", "esid": " sec-serializejsonproperty", "description": " >Replacer function is called with correct context and arguments.\n", "info": " |JSON.stringify ( value [ , replacer [ , space ] ] )\n\n[...]\n12. Return ? SerializeJSONProperty(the empty String, wrapper).\n\nSerializeJSONProperty ( key, holder )\n\n1. Let value be ? Get(holder, key).\n[...]\n3. If ReplacerFunction is not undefined, then\na. Set value to ? Call(ReplacerFunction, holder, \u00ab key, value \u00bb).\n", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/JSON/stringify/replacer-wrong-type.js", "esid": " sec-json.stringify", "description": " >Replacer paramter of wrong type is silently ignored.\n", "info": " |JSON.stringify ( value [ , replacer [ , space ] ] )\n\n[...]\n4. If Type(replacer) is Object, then\na. If IsCallable(replacer) is true, then\ni. Set ReplacerFunction to replacer.\nb. Else,\ni. Let isArray be ? IsArray(replacer).\nii. If isArray is true, then\n1. Set PropertyList to a new empty List.\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/JSON/stringify/space-wrong-type.js", "esid": " sec-json.stringify", "description": " >Space parameter of wrong type is silently ignored.\n", "info": " |JSON.stringify ( value [ , replacer [ , space ] ] )\n\n[...]\n8. Else,\na. Let gap be the empty String.\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/JSON/stringify/value-array-proxy-revoked.js", "esid": " sec-json.stringify", "description": " >Revoked array proxy value produces a TypeError.\n", "info": " |JSON.stringify ( value [ , replacer [ , space ] ] )\n\n[...]\n12. Return ? SerializeJSONProperty(the empty String, wrapper).\n\nSerializeJSONProperty ( key, holder )\n\n[...]\n10. If Type(value) is Object and IsCallable(value) is false, then\na. Let isArray be ? IsArray(value).\n\nIsArray ( argument )\n\n[...]\n3. If argument is a Proxy exotic object, then\na. If argument.[[ProxyHandler]] is null, throw a TypeError exception.\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/JSON/stringify/value-object-proxy-revoked.js", "esid": " sec-serializejsonobject", "description": " >Revoked object proxy value produces a TypeError.\n", "info": " |JSON.stringify ( value [ , replacer [ , space ] ] )\n\n[...]\n12. Return ? SerializeJSONProperty(the empty String, wrapper).\n\nSerializeJSONProperty ( key, holder )\n\n[...]\n10. If Type(value) is Object and IsCallable(value) is false, then\n[...]\nc. Return ? SerializeJSONObject(value).\n\nSerializeJSONObject ( value )\n\n[...]\n6. Else,\na. Let K be ? EnumerableOwnPropertyNames(value, \"key\").\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/JSON/stringify/value-object-proxy.js", "esid": " sec-serializejsonobject", "description": " >Proxy of an object is treated as regular object.\n", "info": " |JSON.stringify ( value [ , replacer [ , space ] ] )\n\n[...]\n12. Return ? SerializeJSONProperty(the empty String, wrapper).\n\nSerializeJSONProperty ( key, holder )\n\n[...]\n10. If Type(value) is Object and IsCallable(value) is false, then\n[...]\nc. Return ? SerializeJSONObject(value).\n\nSerializeJSONObject ( value )\n\n[...]\n6. Else,\na. Let K be ? EnumerableOwnPropertyNames(value, \"key\").\n7. Let partial be a new empty List.\n8. For each element P of K, do\na. Let strP be ? SerializeJSONProperty(P, value).\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/JSON/stringify/value-symbol.js", "esid": " sec-serializejsonproperty", "description": " >Symbol primitives are ignored, both as keys and as values.\n", "info": " |JSON.stringify ( value [ , replacer [ , space ] ] )\n\n[...]\n12. Return ? SerializeJSONProperty(the empty String, wrapper).\n\nSerializeJSONProperty ( key, holder )\n\n[...]\n11. Return undefined.\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/JSON/stringify/value-tojson-abrupt.js", "esid": " sec-serializejsonproperty", "description": " >Abrupt completions from Get and Call.\n", "info": " |JSON.stringify ( value [ , replacer [ , space ] ] )\n\n[...]\n12. Return ? SerializeJSONProperty(the empty String, wrapper).\n\nSerializeJSONProperty ( key, holder )\n\n[...]\n2. If Type(value) is Object, then\na. Let toJSON be ? Get(value, \"toJSON\").\nb. If IsCallable(toJSON) is true, then\ni. Set value to ? Call(toJSON, value, \u00ab key \u00bb).\n"}, {"path": "./test262-main/test/built-ins/Map/get-set-method-failure.js", "version": 6, "esid": " 23.1.1.1", "description": " >new Map returns abrupt from getting Map.prototype.set.\n", "info": " |Map ( [ iterable ] )\n\n...\n7. Else,\na. Let adder be Get(map, \"add\").\nb. ReturnIfAbrupt(adder).\n"}, {"path": "./test262-main/test/built-ins/Map/iterable-calls-set.js", "version": 6, "esid": " 23.1.1.1", "description": " >new Map calls `set` for each item on the iterable argument in order.\n", "info": " |Map ( [ iterable ] )\n\n...\n9. Repeat\n...\nk. Let status be Call(adder, map, \u00abk.[[value]], v.[[value]]\u00bb).\n...\n", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/Map/iterator-close-failure-after-set-failure.js", "esid": " sec-map-iterable", "description": " >The correct error is thrown `Map.prototype.set` throws an error and\nthe IteratorClose throws an error.\n", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/built-ins/Map/iterator-is-undefined-throws.js", "esid": " sec-map-objects", "description": " >Throws a TypeError if the iterator of the iterable is undefined.\n", "info": " |Map ( [ iterable ] )\n...\n9. Let iteratorRecord be ? GetIterator(iterable).\n", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/built-ins/Map/iterator-items-are-not-object.js", "version": 6, "esid": " 23.1.1.1", "description": " >Throws a TypeError if iterable items are not Objects.\n", "info": " |Map ( [ iterable ] )\n\n...\n9. Repeat\n...\nd. Let nextItem be IteratorValue(next).\ne. ReturnIfAbrupt(nextItem).\nf. If Type(nextItem) is not Object,\ni. Let error be Completion{[[type]]: throw, [[value]]: a newly created\nTypeError object, [[target]]:empty}.\nii. Return IteratorClose(iter, error).\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Map/iterator-next-failure.js", "version": 6, "esid": " 23.1.1.1", "description": " >The iterator is closed when iterable `next` throws an error.\n", "info": " |Map ( [ iterable ] )\n\n...\n9. Repeat\na. Let next be IteratorStep(iter).\nb. ReturnIfAbrupt(next).\n", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/built-ins/Map/iterator-value-failure.js", "version": 6, "esid": " 23.1.1.1", "description": " >The iterator is closed when iterable `next` value throws an error.\n", "info": " |Map ( [ iterable ] )\n\n...\n9. Repeat\n...\nd. Let nextItem be IteratorValue(next).\ne. ReturnIfAbrupt(nextItem).\n", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/built-ins/Map/map-iterable-throws-when-set-is-not-callable.js", "version": 6, "esid": " 23.1.1.1", "description": " >Throws a TypeError if `set` is not callable on Map constructor with a\niterable argument.\n", "info": " |Map ( [ iterable ] )\n\nWhen the Map function is called with optional argument the following steps are\ntaken:\n\n...\n5. If iterable is not present, let iterable be undefined.\n6. If iterable is either undefined or null, let iter be undefined.\n7. Else,\na. Let adder be Get(map, \"set\").\nb. ReturnIfAbrupt(adder).\nc. If IsCallable(adder) is false, throw a TypeError exception.\n"}, {"path": "./test262-main/test/built-ins/Map/map-no-iterable.js", "version": 6, "esid": " 23.1.1.1", "description": " >Returns the new Map object with the new empty list if the iterable argument is\nundefined.\n", "info": " |Map ( [ iterable ] )\n\n...\n2. Let map be OrdinaryCreateFromConstructor(NewTarget, \"%MapPrototype%\",\n\u00ab\u200d[[MapData]]\u00bb ).\n...\n4. Map map\u2019s [[MapData]] internal slot to a new empty List.\n5. If iterable is not present, let iterable be undefined.\n6. If iterable is either undefined or null, let iter be undefined.\n...\n8. If iter is undefined, return map.\n"}, {"path": "./test262-main/test/built-ins/Map/name.js", "version": 6, "esid": " 23.1.1.1", "description": " Map.name value and descriptor.", "info": " |Map ( [ iterable ] )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Map/prototype/Symbol.iterator/not-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >Map.prototype[Symbol.iterator] does not implement [[Construct]], is not new-able\n", "info": " |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n", "includes": ["isConstructor.js"], "features": ["Reflect.construct", "Symbol", "Symbol.iterator", "Map", "arrow-function"]}, {"path": "./test262-main/test/built-ins/Map/prototype/Symbol.iterator.js", "version": 6, "esid": " 23.1.3.12", "description": " Initial state of the Symbol.iterator property", "info": " |The initial value of the @@iterator property is the same function object as\nthe initial value of the entries property.\n\nPer ES6 section 17, the method should exist on the Array prototype, and it\nshould be writable and configurable, but not enumerable.\n", "includes": ["propertyHelper.js"], "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/built-ins/Map/prototype/clear/clear-map.js", "version": 6, "esid": " 23.1.3.1", "description": " >Clears a Map.\n", "info": " |Map.prototype.clear ( )\n\n...\n4. Let entries be the List that is the value of M\u2019s [[MapData]] internal slot.\n5. Repeat for each Record {[[key]], [[value]]} p that is an element of\nentries,\na. Set p.[[key]] to empty.\nb. Set p.[[value]] to empty.\n6. Return undefined.\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Map/prototype/clear/context-is-not-object.js", "version": 6, "esid": " 23.1.3.1", "description": " >Throws a TypeError if `this` is not an Object.\n", "info": " |Map.prototype.clear ( )\n\n1. Let M be the this value.\n2. If Type(M) is not Object, throw a TypeError exception.\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Map/prototype/clear/length.js", "version": 6, "esid": " 23.1.3.1", "description": " >Map.prototype.clear.length value and descriptor.\n", "info": " |Map.prototype.clear ( )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Map/prototype/clear/map-data-list-is-preserved.js", "version": 6, "esid": " 23.1.3.1", "description": " >The existing [[MapData]] List is preserved.\n", "info": " |The existing [[MapData]] List is preserved because there may be existing\nMapIterator objects that are suspended midway through iterating over that\nList.\n\nMap.prototype.clear ( )\n\n...\n4. Let entries be the List that is the value of M\u2019s [[MapData]] internal slot.\n5. Repeat for each Record {[[key]], [[value]]} p that is an element of\nentries,\na. Set p.[[key]] to empty.\nb. Set p.[[value]] to empty.\n6. Return undefined.\n"}, {"path": "./test262-main/test/built-ins/Map/prototype/clear/name.js", "version": 6, "esid": " 23.1.3.1", "description": " >Map.prototype.entries.name value and descriptor.\n", "info": " |Map.prototype.clear ( )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Map/prototype/delete/context-is-not-object.js", "version": 6, "esid": " 23.1.3.3", "description": " >Throws a TypeError if `this` is not an Object.\n", "info": " |Map.prototype.delete ( key )\n\n1. Let M be the this value.\n2. If Type(M) is not Object, throw a TypeError exception.\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Map/prototype/delete/does-not-break-iterators.js", "version": 6, "esid": " 23.1.3.3", "description": " >Deleting an entry does not break a [[MapData]] List.\n", "info": " |Map.prototype.delete ( key )\n\n4. Let entries be the List that is the value of M\u2019s [[MapData]] internal slot.\n5. Repeat for each Record {[[key]], [[value]]} p that is an element of entries,\na. If p.[[key]] is not empty and SameValueZero(p.[[key]], key) is true, then\ni. Set p.[[key]] to empty.\nii. Set p.[[value]] to empty.\niii. Return true.\n...\n"}, {"path": "./test262-main/test/built-ins/Map/prototype/delete/length.js", "version": 6, "esid": " 23.1.3.3", "description": " >Map.prototype.delete.length value and descriptor.\n", "info": " |Map.prototype.delete ( key )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Map/prototype/delete/name.js", "version": 6, "esid": " 23.1.3.3", "description": " >Map.prototype.delete.name value and descriptor.\n", "info": " |Map.prototype.delete ( key )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Map/prototype/entries/length.js", "version": 6, "esid": " 23.1.3.4", "description": " >Map.prototype.entries.length value and descriptor.\n", "info": " |Map.prototype.entries ( )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Map/prototype/entries/name.js", "version": 6, "esid": " 23.1.3.4", "description": " >Map.prototype.entries.name value and descriptor.\n", "info": " |Map.prototype.entries ( )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Map/prototype/entries/returns-iterator-empty.js", "version": 6, "esid": " 23.1.3.4", "description": " >Returns an iterator on an empty Map object.\n", "info": " |Map.prototype.entries ( )\n\n...\n2. Return CreateMapIterator(M, \"key+value\").\n\n23.1.5.1 CreateMapIterator Abstract Operation\n\n...\n7. Return iterator.\n"}, {"path": "./test262-main/test/built-ins/Map/prototype/entries/returns-iterator.js", "version": 6, "esid": " 23.1.3.4", "description": " >Returns an iterator.\n", "info": " |Map.prototype.entries ( )\n\n...\n2. Return CreateMapIterator(M, \"key+value\").\n\n23.1.5.1 CreateMapIterator Abstract Operation\n\n...\n7. Return iterator.\n"}, {"path": "./test262-main/test/built-ins/Map/prototype/entries/this-not-object-throw.js", "version": 6, "esid": " 23.1.3.4", "description": " >Throws a TypeError if `this` is not an Object.\n", "info": " |Map.prototype.entries ( )\n\n...\n2. Return CreateSetIterator(M, \"key+value\").\n\n23.1.5.1 CreateSetIterator Abstract Operation\n\n1. If Type(map) is not Object, throw a TypeError exception.\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Map/prototype/forEach/callback-parameters.js", "version": 6, "esid": " 23.1.3.5", "description": " >Verify the parameters order on the given callback.\n", "info": " |Map.prototype.forEach ( callbackfn [ , thisArg ] )\n\n...\n5. If thisArg was supplied, let T be thisArg; else let T be undefined.\n6. Let entries be the List that is the value of M\u2019s [[MapData]] internal slot.\n7. Repeat for each Record {[[key]], [[value]]} e that is an element of\nentries, in original key insertion order\na. If e.[[key]] is not empty, then\ni. Let funcResult be Call(callbackfn, T, \u00abe.[[value]], e.[[key]], M\u00bb).\n...\n"}, {"path": "./test262-main/test/built-ins/Map/prototype/forEach/callback-result-is-abrupt.js", "version": 6, "esid": " 23.1.3.5", "description": " >Returns error from callback result is abrupt.\n", "info": " |Map.prototype.forEach ( callbackfn [ , thisArg ] )\n\n...\n5. If thisArg was supplied, let T be thisArg; else let T be undefined.\n6. Let entries be the List that is the value of M\u2019s [[MapData]] internal slot.\n7. Repeat for each Record {[[key]], [[value]]} e that is an element of\nentries, in original key insertion order\na. If e.[[key]] is not empty, then\ni. Let funcResult be Call(callbackfn, T, \u00abe.[[value]], e.[[key]], M\u00bb).\nii. ReturnIfAbrupt(funcResult).\n...\n"}, {"path": "./test262-main/test/built-ins/Map/prototype/forEach/callback-this-non-strict.js", "version": 6, "esid": " 23.1.3.5", "description": " >If a thisArg is not provided, undefined will be used as the this value for\neach invocation of callbackfn.\n", "info": " |Map.prototype.forEach ( callbackfn [ , thisArg ] )\n\n...\n5. If thisArg was supplied, let T be thisArg; else let T be undefined.\n6. Let entries be the List that is the value of M\u2019s [[MapData]] internal slot.\n7. Repeat for each Record {[[key]], [[value]]} e that is an element of\nentries, in original key insertion order\na. If e.[[key]] is not empty, then\ni. Let funcResult be Call(callbackfn, T, \u00abe.[[value]], e.[[key]], M\u00bb).\n...\n", "flags": ["noStrict"]}, {"path": "./test262-main/test/built-ins/Map/prototype/forEach/callback-this-strict.js", "version": 6, "esid": " 23.1.3.5", "description": " >If a thisArg is not provided, undefined will be used as the this value for\neach invocation of callbackfn.\n", "info": " |Map.prototype.forEach ( callbackfn [ , thisArg ] )\n\n...\n5. If thisArg was supplied, let T be thisArg; else let T be undefined.\n6. Let entries be the List that is the value of M\u2019s [[MapData]] internal slot.\n7. Repeat for each Record {[[key]], [[value]]} e that is an element of\nentries, in original key insertion order\na. If e.[[key]] is not empty, then\ni. Let funcResult be Call(callbackfn, T, \u00abe.[[value]], e.[[key]], M\u00bb).\n...\n", "flags": ["onlyStrict"]}, {"path": "./test262-main/test/built-ins/Map/prototype/forEach/deleted-values-during-foreach.js", "version": 6, "esid": " 23.1.3.5", "description": " >Map state with deleted values during forEach.\n", "info": " |Map.prototype.forEach ( callbackfn [ , thisArg ] )\n\n...\n5. If thisArg was supplied, let T be thisArg; else let T be undefined.\n6. Let entries be the List that is the value of M\u2019s [[MapData]] internal slot.\n7. Repeat for each Record {[[key]], [[value]]} e that is an element of\nentries, in original key insertion order\na. If e.[[key]] is not empty, then\ni. Let funcResult be Call(callbackfn, T, \u00abe.[[value]], e.[[key]], M\u00bb).\nii. ReturnIfAbrupt(funcResult).\n...\n"}, {"path": "./test262-main/test/built-ins/Map/prototype/forEach/first-argument-is-not-callable.js", "version": 6, "esid": " 23.1.3.5", "description": " >Throws a TypeError if first argument is not callable.\n", "info": " |Map.prototype.forEach ( callbackfn [ , thisArg ] )\n\n4. If IsCallable(callbackfn) is false, throw a TypeError exception.\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Map/prototype/forEach/forEach.js", "version": 6, "esid": " 23.1.3.5", "description": " >Property type and descriptor.\n", "info": " |Map.prototype.forEach ( callbackfn [ , thisArg ] )\n\n17 ECMAScript Standard Built-in Objects\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Map/prototype/forEach/iterates-in-key-insertion-order.js", "version": 6, "esid": " 23.1.3.5", "description": " >Repeats for each non-empty record, in original key insertion order.\n", "info": " |Map.prototype.forEach ( callbackfn [ , thisArg ] )\n\n...\n5. If thisArg was supplied, let T be thisArg; else let T be undefined.\n6. Let entries be the List that is the value of M\u2019s [[MapData]] internal slot.\n7. Repeat for each Record {[[key]], [[value]]} e that is an element of\nentries, in original key insertion order\na. If e.[[key]] is not empty, then\ni. Let funcResult be Call(callbackfn, T, \u00abe.[[value]], e.[[key]], M\u00bb).\n...\n"}, {"path": "./test262-main/test/built-ins/Map/prototype/forEach/iterates-values-added-after-foreach-begins.js", "version": 6, "esid": " 23.1.3.5", "description": " >New keys are visited if created during forEach execution.\n", "info": " |Map.prototype.forEach ( callbackfn [ , thisArg ] )\n\n...\n5. If thisArg was supplied, let T be thisArg; else let T be undefined.\n6. Let entries be the List that is the value of M\u2019s [[MapData]] internal slot.\n7. Repeat for each Record {[[key]], [[value]]} e that is an element of\nentries, in original key insertion order\na. If e.[[key]] is not empty, then\ni. Let funcResult be Call(callbackfn, T, \u00abe.[[value]], e.[[key]], M\u00bb).\nii. ReturnIfAbrupt(funcResult).\n...\n"}, {"path": "./test262-main/test/built-ins/Map/prototype/forEach/iterates-values-deleted-then-readded.js", "version": 6, "esid": " 23.1.3.5", "description": " >New keys are visited if created during forEach execution.\n", "info": " |Map.prototype.forEach ( callbackfn [ , thisArg ] )\n\n...\n5. If thisArg was supplied, let T be thisArg; else let T be undefined.\n6. Let entries be the List that is the value of M\u2019s [[MapData]] internal slot.\n7. Repeat for each Record {[[key]], [[value]]} e that is an element of\nentries, in original key insertion order\na. If e.[[key]] is not empty, then\ni. Let funcResult be Call(callbackfn, T, \u00abe.[[value]], e.[[key]], M\u00bb).\nii. ReturnIfAbrupt(funcResult).\n...\n"}, {"path": "./test262-main/test/built-ins/Map/prototype/forEach/length.js", "version": 6, "esid": " 23.1.3.5", "description": " >Map.prototype.forEach.length value and descriptor.\n", "info": " |Map.prototype.forEach ( callbackfn [ , thisArg ] )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Map/prototype/forEach/name.js", "version": 6, "esid": " 23.1.3.5", "description": " >Map.prototype.forEach.name value and descriptor.\n", "info": " |Map.prototype.forEach ( callbackfn [ , thisArg ] )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Map/prototype/forEach/return-undefined.js", "version": 6, "esid": " 23.1.3.5", "description": " >Returns undefined.\n", "info": " |Map.prototype.forEach ( callbackfn [ , thisArg ] )\n\n...\n8. Return undefined.\n"}, {"path": "./test262-main/test/built-ins/Map/prototype/forEach/second-parameter-as-callback-context.js", "version": 6, "esid": " 23.1.3.5", "description": " >If a thisArg parameter is provided, it will be used as the this value for each\ninvocation of callbackfn.\n", "info": " |Map.prototype.forEach ( callbackfn [ , thisArg ] )\n\n...\n5. If thisArg was supplied, let T be thisArg; else let T be undefined.\n6. Let entries be the List that is the value of M\u2019s [[MapData]] internal slot.\n7. Repeat for each Record {[[key]], [[value]]} e that is an element of\nentries, in original key insertion order\na. If e.[[key]] is not empty, then\ni. Let funcResult be Call(callbackfn, T, \u00abe.[[value]], e.[[key]], M\u00bb).\n...\n"}, {"path": "./test262-main/test/built-ins/Map/prototype/get/length.js", "version": 6, "esid": " 23.1.3.6", "description": " >Map.prototype.get.length value and descriptor.\n", "info": " |Map.prototype.get ( key )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Map/prototype/get/name.js", "version": 6, "esid": " 23.1.3.6", "description": " >Map.prototype.get.name value and descriptor.\n", "info": " |Map.prototype.get ( key )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Map/prototype/get/returns-value-different-key-types.js", "version": 6, "esid": " 23.1.3.6", "description": " >Returns the value from the specified key on different types.\n", "info": " |Map.prototype.get ( key )\n\n4. Let entries be the List that is the value of M\u2019s [[MapData]] internal slot.\n5. Repeat for each Record {[[key]], [[value]]} p that is an element of\nentries,\na. If p.[[key]] is not empty and SameValueZero(p.[[key]], key) is true,\nreturn p.[[value]].\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Map/prototype/get/returns-value-normalized-zero-key.js", "version": 6, "esid": " 23.1.3.6", "description": " >-0 and +0 are normalized to +0;\n", "info": " |Map.prototype.get ( key )\n\n4. Let entries be the List that is the value of M\u2019s [[MapData]] internal slot.\n5. Repeat for each Record {[[key]], [[value]]} p that is an element of\nentries,\na. If p.[[key]] is not empty and SameValueZero(p.[[key]], key) is true,\nreturn p.[[value]].\n...\n"}, {"path": "./test262-main/test/built-ins/Map/prototype/get/this-not-object-throw.js", "version": 6, "esid": " 23.1.3.6", "description": " >Throws a TypeError if `this` is not an Object.\n", "info": " |Map.prototype.get ( key )\n\n1. Let M be the this value.\n2. If Type(M) is not Object, throw a TypeError exception.\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Map/prototype/has/length.js", "version": 6, "esid": " 23.1.3.7", "description": " >Map.prototype.has.length value and descriptor.\n", "info": " |Map.prototype.has ( key )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Map/prototype/has/name.js", "version": 6, "esid": " 23.1.3.7", "description": " >Map.prototype.has.name value and descriptor.\n", "info": " |Map.prototype.has ( key )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Map/prototype/has/normalizes-zero-key.js", "version": 6, "esid": " 23.1.3.7", "description": " >-0 and +0 are normalized to +0;\n", "info": " |Map.prototype.has ( key )\n\n5. Repeat for each Record {[[key]], [[value]]} p that is an element of\nentries,\na. If p.[[key]] is not empty and SameValueZero(p.[[key]], key) is true,\nreturn true.\n...\n"}, {"path": "./test262-main/test/built-ins/Map/prototype/has/return-false-different-key-types.js", "version": 6, "esid": " 23.1.3.7", "description": " >Returns true for existing keys, using different key types.\n", "info": " |Map.prototype.has ( key )\n\n5. Repeat for each Record {[[key]], [[value]]} p that is an element of\nentries,\ni. If p.[[key]] is not empty and SameValueZero(p.[[key]], key) is true,\nreturn true.\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Map/prototype/has/return-true-different-key-types.js", "version": 6, "esid": " 23.1.3.7", "description": " >Returns true for existing keys, using different key types.\n", "info": " |Map.prototype.has ( key )\n\n5. Repeat for each Record {[[key]], [[value]]} p that is an element of\nentries,\ni. If p.[[key]] is not empty and SameValueZero(p.[[key]], key) is true,\nreturn true.\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Map/prototype/has/this-not-object-throw.js", "version": 6, "esid": " 23.1.3.7", "description": " >Throws a TypeError if `this` is not an Object.\n", "info": " |Map.prototype.has ( key )\n\n1. Let M be the this value.\n2. If Type(M) is not Object, throw a TypeError exception.\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Map/prototype/keys/length.js", "version": 6, "esid": " 23.1.3.8", "description": " >Map.prototype.keys.length value and descriptor.\n", "info": " |Map.prototype.keys ()\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Map/prototype/keys/name.js", "version": 6, "esid": " 23.1.3.8", "description": " >Map.prototype.keys.name value and descriptor.\n", "info": " |Map.prototype.keys ()\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Map/prototype/keys/returns-iterator-empty.js", "version": 6, "esid": " 23.1.3.8", "description": " >Returns an iterator on an empty Map object.\n", "info": " |Map.prototype.keys ()\n\n...\n2. Return CreateMapIterator(M, \"key\").\n\n23.1.5.1 CreateMapIterator Abstract Operation\n\n...\n7. Return iterator.\n"}, {"path": "./test262-main/test/built-ins/Map/prototype/keys/returns-iterator.js", "version": 6, "esid": " 23.1.3.8", "description": " >Returns an iterator.\n", "info": " |Map.prototype.keys ( )\n\n...\n2. Return CreateMapIterator(M, \"key\").\n\n23.1.5.1 CreateMapIterator Abstract Operation\n\n...\n7. Return iterator.\n"}, {"path": "./test262-main/test/built-ins/Map/prototype/keys/this-not-object-throw.js", "version": 6, "esid": " 23.1.3.8", "description": " >Throws a TypeError if `this` is not an Object.\n", "info": " |Map.prototype.keys ()\n\n...\n2. Return CreateMapIterator(M, \"key\").\n\n23.1.5.1 CreateMapIterator Abstract Operation\n\n1. If Type(map) is not Object, throw a TypeError exception.\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Map/prototype/set/append-new-values-normalizes-zero-key.js", "version": 6, "esid": " 23.1.3.9", "description": " >Appends new value in the map normalizing +0 and -0.\n", "info": " |Map.prototype.set ( key , value )\n\n...\n6. If key is \u22120, let key be +0.\n7. Let p be the Record {[[key]]: key, [[value]]: value}.\n8. Append p as the last element of entries.\n9. Return M.\n...\n"}, {"path": "./test262-main/test/built-ins/Map/prototype/set/append-new-values-return-map.js", "version": 6, "esid": " 23.1.3.9", "description": " >Map.prototype.set returns the given `this` object.\n", "info": " |Map.prototype.set ( key , value )\n\n...\n6. If key is \u22120, let key be +0.\n7. Let p be the Record {[[key]]: key, [[value]]: value}.\n8. Append p as the last element of entries.\n9. Return M.\n...\n"}, {"path": "./test262-main/test/built-ins/Map/prototype/set/append-new-values.js", "version": 6, "esid": " 23.1.3.9", "description": " >Append a new value as the last element of entries.\n", "info": " |Map.prototype.set ( key , value )\n\n...\n6. If key is \u22120, let key be +0.\n7. Let p be the Record {[[key]]: key, [[value]]: value}.\n8. Append p as the last element of entries.\n9. Return M.\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Map/prototype/set/length.js", "version": 6, "esid": " 23.1.3.9", "description": " >Map.prototype.set.length value and descriptor.\n", "info": " |Map.prototype.set ( key , value )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Map/prototype/set/name.js", "version": 6, "esid": " 23.1.3.9", "description": " >Map.prototype.set.name value and descriptor.\n", "info": " |Map.prototype.set ( key , value )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Map/prototype/set/replaces-a-value-normalizes-zero-key.js", "version": 6, "esid": " 23.1.3.9", "description": " >Replaces a value in the map normalizing +0 and -0.\n", "info": " |Map.prototype.set ( key , value )\n\n...\n5. Repeat for each Record {[[key]], [[value]]} p that is an element of\nentries,\na. If p.[[key]] is not empty and SameValueZero(p.[[key]], key) is true, then\ni. Set p.[[value]] to value.\nii. Return M.\n...\n"}, {"path": "./test262-main/test/built-ins/Map/prototype/set/replaces-a-value-returns-map.js", "version": 6, "esid": " 23.1.3.9", "description": " >Map.prototype.set returns the given `this` map object.\n", "info": " |Map.prototype.set ( key , value )\n\n1. Let M be the this value.\n...\n5. Repeat for each Record {[[key]], [[value]]} p that is an element of\nentries,\na. If p.[[key]] is not empty and SameValueZero(p.[[key]], key) is true, then\ni. Set p.[[value]] to value.\nii. Return M.\n...\n"}, {"path": "./test262-main/test/built-ins/Map/prototype/set/this-not-object-throw.js", "version": 6, "esid": " 23.1.3.9", "description": " >Throws a TypeError if `this` is not an Object.\n", "info": " |Map.prototype.set ( key , value )\n\n1. Let M be the this value.\n2. If Type(M) is not Object, throw a TypeError exception.\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Map/prototype/size/length.js", "version": 6, "esid": " 23.1.3.10", "description": " >Map.prototype.size.length value and descriptor.\n", "info": " |get Map.prototype.size\n\n17 ECMAScript Standard Built-in Objects\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Map/prototype/size/returns-count-of-present-values-by-insertion.js", "version": 6, "esid": " 23.1.3.10", "description": " >Returns count of present values inserted with set.\n", "info": " |get Map.prototype.size\n\n5. Let count be 0.\n6. For each Record {[[key]], [[value]]} p that is an element of entries\na. If p.[[key]] is not empty, set count to count+1.\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Map/prototype/size/returns-count-of-present-values-by-iterable.js", "version": 6, "esid": " 23.1.3.10", "description": " >Returns count of present values inserted via iterable argument.\n", "info": " |get Map.prototype.size\n\n5. Let count be 0.\n6. For each Record {[[key]], [[value]]} p that is an element of entries\na. If p.[[key]] is not empty, set count to count+1.\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Map/prototype/size/this-not-object-throw.js", "version": 6, "esid": " 23.1.3.10", "description": " >Throws a TypeError if `this` is not an Object.\n", "info": " |get Map.prototype.size\n\n1. Let M be the this value.\n2. If Type(M) is not Object, throw a TypeError exception.\n3. If M does not have a [[MapData]] internal slot, throw a TypeError\nexception.\n...\n\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Map/prototype/values/length.js", "version": 6, "esid": " 23.1.3.11", "description": " >Map.prototype.values.length value and descriptor.\n", "info": " |Map.prototype.values ()\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Map/prototype/values/name.js", "version": 6, "esid": " 23.1.3.11", "description": " >Map.prototype.values.name value and descriptor.\n", "info": " |Map.prototype.values ()\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Map/prototype/values/returns-iterator-empty.js", "version": 6, "esid": " 23.1.3.11", "description": " >Returns an iterator on an empty Map object.\n", "info": " |Map.prototype.values ()\n\n...\n2. Return CreateMapIterator(M, \"value\").\n\n23.1.5.1 CreateMapIterator Abstract Operation\n\n...\n7. Return iterator.\n"}, {"path": "./test262-main/test/built-ins/Map/prototype/values/returns-iterator.js", "version": 6, "esid": " 23.1.3.11", "description": " >Returns an iterator.\n", "info": " |Map.prototype.values ( )\n\n...\n2. Return CreateMapIterator(M, \"value\").\n\n23.1.5.1 CreateMapIterator Abstract Operation\n\n...\n7. Return iterator.\n"}, {"path": "./test262-main/test/built-ins/Map/prototype/values/this-not-object-throw.js", "version": 6, "esid": " 23.1.3.11", "description": " >Throws a TypeError if `this` is not an Object.\n", "info": " |Map.prototype.values ()\n\n...\n2. Return CreateMapIterator(M, \"values\").\n\n23.1.5.1 CreateMapIterator Abstract Operation\n\n1. If Type(map) is not Object, throw a TypeError exception.\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Map/symbol-as-entry-key.js", "version": 6, "esid": " 19.4", "description": " >Symbol as Map key\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/MapIteratorPrototype/next/does-not-have-mapiterator-internal-slots-map.js", "version": 6, "esid": " 23.1.5.2.1", "description": " >Throws a TypeError if `this` does not have all of the internal slots of a Map\nIterator Instance.\n", "info": " |%MapIteratorPrototype%.next ( )\n\n1. Let O be the this value.\n2. If Type(O) is not Object, throw a TypeError exception.\n3. If O does not have all of the internal slots of a Map Iterator Instance\n(23.1.5.3), throw a TypeError exception.\n...\n", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/built-ins/MapIteratorPrototype/next/does-not-have-mapiterator-internal-slots.js", "version": 6, "esid": " 23.1.5.2.1", "description": " >Throws a TypeError if `this` does not have all of the internal slots of a Map\nIterator Instance.\n", "info": " |%MapIteratorPrototype%.next ( )\n\n1. Let O be the this value.\n2. If Type(O) is not Object, throw a TypeError exception.\n3. If O does not have all of the internal slots of a Map Iterator Instance\n(23.1.5.3), throw a TypeError exception.\n...\n", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/built-ins/MapIteratorPrototype/next/iteration-mutable.js", "version": 6, "esid": " 23.1.3.12", "description": " >When an item is added to the map after the iterator is created but before\nthe iterator is \"done\" (as defined by 23.1.5.2.1), the new item should be\naccessible via iteration. When an item is added to the map after the\niterator is \"done\", the new item should not be accessible via iteration.\n", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/built-ins/MapIteratorPrototype/next/iteration.js", "version": 6, "esid": " 23.1.3.12", "description": " >The method should return a valid iterator with the context as the\nIteratedObject.\n", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/built-ins/MapIteratorPrototype/next/length.js", "version": 6, "esid": " 23.1.5.2.1", "description": " >%MapIteratorPrototype%.next.length is 0.\n", "info": " |%MapIteratorPrototype%.next ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/MapIteratorPrototype/next/name.js", "version": 6, "esid": " 23.1.5.2.1", "description": " >%MapIteratorPrototype%.next.name is \"next\".\n", "info": " |%MapIteratorPrototype%.next ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/MapIteratorPrototype/next/this-not-object-throw-entries.js", "version": 6, "esid": " 23.1.5.2.1", "description": " >Throws a TypeError if `this` value is not an Object.\n", "info": " |From Map.prototype.entries()\n\n%MapIteratorPrototype%.next ( )\n\n1. Let O be the this value.\n2. If Type(O) is not Object, throw a TypeError exception.\n...\n", "features": [""]}, {"path": "./test262-main/test/built-ins/MapIteratorPrototype/next/this-not-object-throw-keys.js", "version": 6, "esid": " 23.1.5.2.1", "description": " >Throws a TypeError if `this` value is not an Object.\n", "info": " |From Map.prototype.keys()\n\n%MapIteratorPrototype%.next ( )\n\n1. Let O be the this value.\n2. If Type(O) is not Object, throw a TypeError exception.\n...\n", "features": [""]}, {"path": "./test262-main/test/built-ins/MapIteratorPrototype/next/this-not-object-throw-prototype-iterator.js", "version": 6, "esid": " 23.1.5.2.1", "description": " >Throws a TypeError if `this` value is not an Object.\n", "info": " |Using Map.prototype[Symbol.iterator]()\n\n%MapIteratorPrototype%.next ( )\n\n1. Let O be the this value.\n2. If Type(O) is not Object, throw a TypeError exception.\n...\n", "features": [""]}, {"path": "./test262-main/test/built-ins/MapIteratorPrototype/next/this-not-object-throw-values.js", "version": 6, "esid": " 23.1.5.2.1", "description": " >Throws a TypeError if `this` value is not an Object.\n", "info": " |From Map.prototype.values()\n\n%MapIteratorPrototype%.next ( )\n\n1. Let O be the this value.\n2. If Type(O) is not Object, throw a TypeError exception.\n...\n", "features": [""]}, {"path": "./test262-main/test/built-ins/Math/abs/length.js", "version": 6, "esid": " 20.2.2.1", "description": " >Math.abs.length is 1.\n", "info": " |Math.abs ( x )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Math/abs/name.js", "version": 6, "esid": " 20.2.2.1", "description": " >Math.abs.name is \"abs\".\n", "info": " |Math.abs ( x )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Math/acos/length.js", "version": 6, "esid": " 20.2.2.2", "description": " >Math.acos.length is 1.\n", "info": " |Math.acos ( x )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Math/acos/name.js", "version": 6, "esid": " 20.2.2.2", "description": " >Math.acos.name is \"acos\".\n", "info": " |Math.acos ( x )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Math/acosh/arg-is-infinity.js", "esid": " sec-math.acosh", "description": " >Return Infinity if x is Infinity\n", "info": " |Math.acosh ( x )\n\nIf x is +\u221e, the result is +\u221e.\n"}, {"path": "./test262-main/test/built-ins/Math/acosh/arg-is-one.js", "description": " Math.acosh(1) returns +0", "version": 6, "esid": " 20.2.2.3", "info": " |Math.acosh ( x )\n\n- If x is 1, the result is +0.\n"}, {"path": "./test262-main/test/built-ins/Math/acosh/length.js", "version": 6, "esid": " 20.2.2.3", "description": " length property of Math.acosh", "info": " |Math.acosh ( x )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Math/acosh/name.js", "version": 6, "esid": " 20.2.2.3", "description": " >Math.acosh.name is \"acosh\".\n", "info": " |Math.acosh ( x )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Math/acosh/nan-returns.js", "description": " Math.acosh with special values", "version": 6, "esid": " 20.2.2.3", "info": " |Math.acosh ( x )\n\n- If x is NaN, the result is NaN.\n- If x is less than 1, the result is NaN.\n"}, {"path": "./test262-main/test/built-ins/Math/acosh/prop-desc.js", "description": " Testing descriptor property of Math.acosh", "includes": ["propertyHelper.js"], "version": 6, "esid": " 20.2.2.3"}, {"path": "./test262-main/test/built-ins/Math/asin/length.js", "version": 6, "esid": " 20.2.2.4", "description": " >Math.asin.length is 1.\n", "info": " |Math.asin ( x )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Math/asin/name.js", "version": 6, "esid": " 20.2.2.4", "description": " >Math.asin.name is \"asin\".\n", "info": " |Math.asin ( x )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Math/asinh/asinh-specialVals.js", "description": " Math.asinh with special values", "version": 6, "esid": " 20.2.2.5"}, {"path": "./test262-main/test/built-ins/Math/asinh/length.js", "description": " length property of Math.asinh", "version": 6, "esid": " 20.2.2.5", "info": " |Math.asinh ( x )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Math/asinh/name.js", "version": 6, "esid": " 20.2.2.5", "description": " >Math.asinh.name is \"asinh\".\n", "info": " |Math.asinh ( x )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Math/asinh/prop-desc.js", "description": " Testing descriptor property of Math.asinh", "includes": ["propertyHelper.js"], "version": 6, "esid": " 20.2.2.5"}, {"path": "./test262-main/test/built-ins/Math/atan/length.js", "version": 6, "esid": " 20.2.2.6", "description": " >Math.atan.length is 1.\n", "info": " |Math.atan ( x )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Math/atan/name.js", "version": 6, "esid": " 20.2.2.6", "description": " >Math.atan.name is \"atan\".\n", "info": " |Math.atan ( x )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Math/atan2/length.js", "version": 6, "esid": " 20.2.2.8", "description": " >Math.atan2.length is 2.\n", "info": " |Math.atan2 ( y, x )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Math/atan2/name.js", "version": 6, "esid": " 20.2.2.8", "description": " >Math.atan2.name is \"atan2\".\n", "info": " |Math.atan2 ( y, x )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Math/atanh/atanh-specialVals.js", "description": " Math.atanh with special values", "version": 6, "esid": " 20.2.2.7"}, {"path": "./test262-main/test/built-ins/Math/atanh/length.js", "description": " length property of Math.atanh", "version": 6, "esid": " 20.2.2.7", "info": " |Math.atanh ( x )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Math/atanh/name.js", "version": 6, "esid": " 20.2.2.7", "description": " >Math.atanh.name is \"atanh\".\n", "info": " |Math.atanh ( x )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Math/atanh/prop-desc.js", "description": " Testing descriptor property of Math.atanh", "includes": ["propertyHelper.js"], "version": 6, "esid": " 20.2.2.7"}, {"path": "./test262-main/test/built-ins/Math/cbrt/cbrt-specialValues.js", "description": " Math.cbrt with special values", "version": 6, "esid": " 20.2.2.9"}, {"path": "./test262-main/test/built-ins/Math/cbrt/length.js", "description": " length property of Math.cbrt", "version": 6, "esid": " 20.2.2.9", "info": " |Math.cbrt ( x )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Math/cbrt/name.js", "version": 6, "esid": " 20.2.2.9", "description": " >Math.cbrt.name is \"cbrt\".\n", "info": " |Math.cbrt ( x )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Math/cbrt/prop-desc.js", "description": " Testing descriptor property of Math.cbrt", "includes": ["propertyHelper.js"], "version": 6, "esid": " 20.2.2.9"}, {"path": "./test262-main/test/built-ins/Math/ceil/length.js", "version": 6, "esid": " 20.2.2.10", "description": " >Math.ceil.length is 1.\n", "info": " |Math.ceil ( x )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Math/ceil/name.js", "version": 6, "esid": " 20.2.2.10", "description": " >Math.ceil.name is \"ceil\".\n", "info": " |Math.ceil ( x )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Math/clz32/Math.clz32.js", "version": 6, "esid": " 20.2.2.11", "author": " Ryan Lewis", "description": " Math.clz32 should return 32 if passed 0."}, {"path": "./test262-main/test/built-ins/Math/clz32/Math.clz32_1.js", "version": 6, "esid": " 20.2.2.11", "author": " Ryan Lewis", "description": " Math.clz32 should return 31 if passed 1."}, {"path": "./test262-main/test/built-ins/Math/clz32/Math.clz32_2.js", "version": 6, "esid": " 20.2.2.11", "author": " Ryan Lewis", "description": " Math.clz32 should return 0 if passed 2147483648"}, {"path": "./test262-main/test/built-ins/Math/clz32/infinity.js", "esid": " sec-math.clz32", "description": " >Return 32 if x is Infinity or -Infinity\n", "info": " |Math.clz32 ( x )\n\n1. Let n be ToUint32(x).\n2. Let p be the number of leading zero bits in the 32-bit binary representation of n.\n3. Return p.\n\n7.1.6 ToUint32 ( argument )\n\n[...]\n2. If number is NaN, +0, -0, +\u221e, or -\u221e, return +0.\n[...]\n"}, {"path": "./test262-main/test/built-ins/Math/clz32/int32bit.js", "esid": " sec-math.clz32", "description": " >Catches the int32bit value in the ToUint32 operation\n", "info": " |Math.clz32 ( x )\n\n1. Let n be ToUint32(x).\n2. Let p be the number of leading zero bits in the 32-bit binary representation of n.\n3. Return p.\n\n7.1.6 ToUint32 ( argument )\n\n[...]\n3. Let int be the mathematical value that is the same sign as number and whose\nmagnitude is floor(abs(number)).\n4. Let int32bit be int modulo 232.\n5. Return int32bit.\n[...]\n"}, {"path": "./test262-main/test/built-ins/Math/clz32/length.js", "version": 6, "esid": " 20.2.2.11", "description": " >Math.clz32.length is 1.\n", "info": " |Math.clz32 ( x )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Math/clz32/name.js", "version": 6, "esid": " 20.2.2.11", "description": " >Math.clz32.name is \"clz32\".\n", "info": " |Math.clz32 ( x )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Math/clz32/nan.js", "esid": " sec-math.clz32", "description": " >Return 32 if x is NaN\n", "info": " |Math.clz32 ( x )\n\n1. Let n be ToUint32(x).\n2. Let p be the number of leading zero bits in the 32-bit binary representation of n.\n3. Return p.\n\n7.1.6 ToUint32 ( argument )\n\n[...]\n2. If number is NaN, +0, -0, +\u221e, or -\u221e, return +0.\n[...]\n"}, {"path": "./test262-main/test/built-ins/Math/clz32/prop-desc.js", "esid": " sec-math.clz32", "description": " >\"clz32\" property of Math\n", "info": " |Section 17: Every other data property described in clauses 18 through 26\nand in Annex B.2 has the attributes { [[Writable]]: true,\n[[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Math/cos/length.js", "version": 6, "esid": " 20.2.2.12", "description": " >Math.cos.length is 1.\n", "info": " |Math.cos ( x )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Math/cos/name.js", "version": 6, "esid": " 20.2.2.12", "description": " >Math.cos.name is \"cos\".\n", "info": " |Math.cos ( x )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Math/cosh/cosh-specialVals.js", "description": " Math.cosh with special values", "version": 6, "esid": " 20.2.2.13"}, {"path": "./test262-main/test/built-ins/Math/cosh/length.js", "version": 6, "esid": " 20.2.2.13", "description": " Length property of Math.cosh is 1", "info": " |Math.cosh ( x )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Math/cosh/name.js", "version": 6, "esid": " 20.2.2.13", "description": " >Math.cosh.name is \"cosh\".\n", "info": " |Math.cosh ( x )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Math/cosh/prop-desc.js", "description": " Testing descriptor property of Math.cosh", "includes": ["propertyHelper.js"], "version": 6, "esid": " 20.2.2.13"}, {"path": "./test262-main/test/built-ins/Math/exp/length.js", "version": 6, "esid": " 20.2.2.14", "description": " >Math.exp.length is 1.\n", "info": " |Math.exp ( x )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Math/exp/name.js", "version": 6, "esid": " 20.2.2.14", "description": " >Math.exp.name is \"exp\".\n", "info": " |Math.exp ( x )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Math/expm1/expm1-specialVals.js", "description": " Math.expm1 with sample values.", "version": 6, "esid": " 20.2.2.15"}, {"path": "./test262-main/test/built-ins/Math/expm1/length.js", "description": " length property of Math.expm1", "version": 6, "esid": " 20.2.2.15", "info": " |Math.expm1 ( x )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Math/expm1/name.js", "version": 6, "esid": " 20.2.2.15", "description": " >Math.expm1.name is \"expm1\".\n", "info": " |Math.expm1 ( x )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Math/expm1/prop-desc.js", "description": " Testing descriptor property of Math.expm1", "includes": ["propertyHelper.js"], "version": 6, "esid": " 20.2.2.15"}, {"path": "./test262-main/test/built-ins/Math/floor/length.js", "version": 6, "esid": " 20.2.2.16", "description": " >Math.floor.length is 1.\n", "info": " |Math.floor ( x )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Math/floor/name.js", "version": 6, "esid": " 20.2.2.16", "description": " >Math.floor.name is \"floor\".\n", "info": " |Math.floor ( x )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Math/fround/Math.fround_Infinity.js", "version": 6, "esid": " 20.2.2.17", "author": " Ryan Lewis", "description": " Math.fround should return Infinity if called with Infinity."}, {"path": "./test262-main/test/built-ins/Math/fround/Math.fround_NaN.js", "version": 6, "esid": " 20.2.2.17", "author": " Ryan Lewis", "description": " Math.fround should return NaN if called with NaN."}, {"path": "./test262-main/test/built-ins/Math/fround/Math.fround_Zero.js", "version": 6, "esid": " 20.2.2.17", "author": " Ryan Lewis", "description": " Math.fround should return arg if called with 0 or -0."}, {"path": "./test262-main/test/built-ins/Math/fround/length.js", "version": 6, "esid": " 20.2.2.17", "description": " >Math.fround.length is 1.\n", "info": " |Math.fround ( x )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Math/fround/name.js", "version": 6, "esid": " 20.2.2.17", "description": " >Math.fround.name is \"fround\".\n", "info": " |Math.fround ( x )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Math/fround/prop-desc.js", "esid": " sec-math.fround", "description": " >\"fround\" property of Math\n", "info": " |Section 17: Every other data property described in clauses 18 through 26\nand in Annex B.2 has the attributes { [[Writable]]: true,\n[[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Math/fround/ties.js", "esid": " sec-math.fround", "description": " Math.fround should use roundTiesToEven for conversion to binary32."}, {"path": "./test262-main/test/built-ins/Math/fround/value-convertion.js", "esid": " sec-math.fround", "description": " >Convert to binary32 format and than to binary64 format\n", "info": " |Math.fround ( x )\n\n[...]\n3. Let x32 be the result of converting x to a value in IEEE 754-2008 binary32\nformat using roundTiesToEven.\n4. Let x64 be the result of converting x32 to a value in IEEE 754-2008\nbinary64 format.\n5. Return the ECMAScript Number value corresponding to x64.\n"}, {"path": "./test262-main/test/built-ins/Math/hypot/Math.hypot_Infinity.js", "version": 6, "esid": " 20.2.2.18", "author": " Ryan Lewis", "description": " >Math.hypot should return Infinity if called with any argument that\nis Infinity.\n"}, {"path": "./test262-main/test/built-ins/Math/hypot/Math.hypot_InfinityNaN.js", "version": 6, "esid": " 20.2.2.18", "author": " Ryan Lewis", "description": " >Math.hypot should return Infinity if called with any argument that\nis Infinity.\n"}, {"path": "./test262-main/test/built-ins/Math/hypot/Math.hypot_NaN.js", "version": 6, "esid": " 20.2.2.18", "author": " Ryan Lewis", "description": " >Math.hypot should return NaN if called with any argument that is\nNaN.\n"}, {"path": "./test262-main/test/built-ins/Math/hypot/Math.hypot_NegInfinity.js", "version": 6, "esid": " 20.2.2.18", "author": " Ryan Lewis", "description": " >Math.hypot should return Infinity if called with any argument that\nis -Infinity.\n"}, {"path": "./test262-main/test/built-ins/Math/hypot/Math.hypot_NoArgs.js", "version": 6, "esid": " 20.2.2.18", "author": " Ryan Lewis", "description": " Math.hypot should return 0 if called with no arguments."}, {"path": "./test262-main/test/built-ins/Math/hypot/Math.hypot_Success_2.js", "version": 6, "esid": " 20.2.2.18", "author": " Ryan Lewis", "description": " Math.hypot should return 5 if called with 3 and 4."}, {"path": "./test262-main/test/built-ins/Math/hypot/Math.hypot_Zero_2.js", "version": 6, "esid": " 20.2.2.18", "author": " Ryan Lewis", "description": " Return 0 if all arguments being are 0 or -0."}, {"path": "./test262-main/test/built-ins/Math/hypot/length.js", "version": 6, "esid": " 20.2.2.18", "author": " Ryan Lewis", "description": " Math.hypot.length should return 2.", "info": " |Math.hypot ( value1, value2, ...values )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Math/hypot/name.js", "version": 6, "esid": " 20.2.2.18", "description": " >Math.hypot.name is \"hypot\".\n", "info": " |Math.hypot ( value1 , value2 , \u2026values )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Math/hypot/prop-desc.js", "description": " Testing descriptor property of Math.hypot", "includes": ["propertyHelper.js"], "version": 6, "esid": " 20.2.2.18"}, {"path": "./test262-main/test/built-ins/Math/imul/length.js", "version": 6, "esid": " 20.2.2.19", "description": " length property of Math.imul", "info": " |Math.imul ( x, y )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Math/imul/name.js", "version": 6, "esid": " 20.2.2.19", "description": " >Math.imul.name is \"imul\".\n", "info": " |Math.imul ( x, y )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Math/log/length.js", "version": 6, "esid": " 20.2.2.20", "description": " >Math.log.length is 1.\n", "info": " |Math.log ( x )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Math/log/name.js", "version": 6, "esid": " 20.2.2.20", "description": " >Math.log.name is \"log\".\n", "info": " |Math.log ( x )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Math/log10/Log10-specialVals.js", "description": " Math.Log10 with sample values.", "version": 6, "esid": " 20.2.2.20"}, {"path": "./test262-main/test/built-ins/Math/log10/length.js", "version": 6, "esid": " 20.2.2.20", "description": " length property of Math.log10", "info": " |Math.log10 ( x )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Math/log10/name.js", "version": 6, "esid": " 20.2.2.22", "description": " >Math.log10.name is \"log10\".\n", "info": " |Math.log10 ( x )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Math/log10/prop-desc.js", "description": " >\"log10\" property of Math\n", "includes": ["propertyHelper.js"], "version": 6, "esid": " 20.2.2.20"}, {"path": "./test262-main/test/built-ins/Math/log1p/length.js", "version": 6, "esid": " 20.2.2.21", "description": " length property of Math.log1p", "info": " |Math.log1p ( x )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Math/log1p/name.js", "version": 6, "esid": " 20.2.2.21", "description": " >Math.log1p.name is \"log1p\".\n", "info": " |Math.log1p ( x )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Math/log1p/prop-desc.js", "description": " Testing descriptor property of Math.log1p", "includes": ["propertyHelper.js"], "version": 6, "esid": " 20.2.2.21"}, {"path": "./test262-main/test/built-ins/Math/log1p/specific-results.js", "esid": " sec-math.log1p", "description": " >Return specific results\n", "info": " |Math.log1p ( x )\n\nIf x is NaN, the result is NaN.\nIf x is less than -1, the result is NaN.\nIf x is -1, the result is -\u221e.\nIf x is +0, the result is +0.\nIf x is -0, the result is -0.\nIf x is +\u221e, the result is +\u221e.\n"}, {"path": "./test262-main/test/built-ins/Math/log2/length.js", "version": 6, "esid": " 20.2.2.23", "description": " length property of Math.log2", "info": " |Math.log2 ( x )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Math/log2/log2-basicTests.js", "description": " Math.Log2 with sample values.", "version": 6, "esid": " 20.2.2.23"}, {"path": "./test262-main/test/built-ins/Math/log2/name.js", "version": 6, "esid": " 20.2.2.23", "description": " >Math.log2.name is \"log2\".\n", "info": " |Math.log2 ( x )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Math/log2/prop-desc.js", "description": " Testing descriptor property of Math.log2", "includes": ["propertyHelper.js"], "version": 6, "esid": " 20.2.2.23"}, {"path": "./test262-main/test/built-ins/Math/max/length.js", "esid": " sec-math.max", "description": " >\"length\" property of Math.max\n", "info": " |Math.max ( value1, value2, ...values )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Math/max/name.js", "version": 6, "esid": " 20.2.2.24", "description": " >Math.max.name is \"max\".\n", "info": " |Math.max ( value1, value2 , \u2026values )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Math/min/length.js", "esid": " sec-math.min", "description": " >\"length\" property of Math.min\n", "info": " |Math.min ( value1, value2, ...values )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Math/min/name.js", "version": 6, "esid": " 20.2.2.25", "description": " >Math.min.name is \"min\".\n", "info": " |Math.min ( value1, value2 , \u2026values )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Math/pow/length.js", "esid": " sec-math.pow", "description": " >Math.pow.length is 2.\n", "info": " |Math.pow ( x, y )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \"...name\"\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Math/pow/name.js", "esid": " sec-math.pow", "description": " >Math.pow.name is \"pow\".\n", "info": " |Math.pow ( x, y )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Math/random/length.js", "version": 6, "esid": " 20.2.2.27", "description": " >Math.random.length is 0.\n", "info": " |Math.random ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Math/random/name.js", "version": 6, "esid": " 20.2.2.27", "description": " >Math.random.name is \"random\".\n", "info": " |Math.random ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Math/round/S15.8.2.15_A7.js", "info": " |If x is less than or equal to -0 and x is greater than or equal to -0.5,\nMath.round(x) is equal to -0\n", "version": 5, "esid": " 15.8.2.15_A7", "description": " >`Math.round(x)` differs from `Math.floor(x + 0.5)`:\n\n1) for values in [-0.5; -0]\n2) for 0.5 - Number.EPSILON / 4\n3) for odd integers in [-(2 / Number.EPSILON - 1); -(1 / Number.EPSILON + 1)] or in [1 / Number.EPSILON + 1; 2 / Number.EPSILON - 1]\n"}, {"path": "./test262-main/test/built-ins/Math/round/length.js", "version": 6, "esid": " 20.2.2.28", "description": " >Math.round.length is 1.\n", "info": " |Math.round ( x )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Math/round/name.js", "version": 6, "esid": " 20.2.2.28", "description": " >Math.round.name is \"round\".\n", "info": " |Math.round ( x )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Math/sign/length.js", "description": " length property of Math.sign", "version": 6, "esid": " 20.2.2.29", "info": " |Math.sign ( x )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Math/sign/name.js", "version": 6, "esid": " 20.2.2.29", "description": " >Math.sign.name is \"sign\".\n", "info": " |Math.sign ( x )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Math/sign/prop-desc.js", "description": " Testing descriptor property of Math.sign", "includes": ["propertyHelper.js"], "version": 6, "esid": " 20.2.2.29"}, {"path": "./test262-main/test/built-ins/Math/sign/sign-specialVals.js", "description": " >Returns the sign of the x, indicating whether x is positive, negative or zero.\n", "version": 6, "esid": " 20.2.2.29"}, {"path": "./test262-main/test/built-ins/Math/sin/length.js", "version": 6, "esid": " 20.2.2.30", "description": " >Math.sin.length is 1.\n", "info": " |Math.sin ( x )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Math/sin/name.js", "version": 6, "esid": " 20.2.2.30", "description": " >Math.sin.name is \"sin\".\n", "info": " |Math.sin ( x )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Math/sinh/length.js", "description": " length property of Math.sinh", "version": 6, "esid": " 20.2.2.31", "info": " |Math.sinh ( x )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Math/sinh/name.js", "version": 6, "esid": " 20.2.2.31", "description": " >Math.sinh.name is \"sinh\".\n", "info": " |Math.sinh ( x )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Math/sinh/prop-desc.js", "description": " Testing descriptor property of Math.sinh", "includes": ["propertyHelper.js"], "version": 6, "esid": " 20.2.2.31"}, {"path": "./test262-main/test/built-ins/Math/sinh/sinh-specialVals.js", "description": " Math.sinh with special values", "version": 6, "esid": " 20.2.2.31"}, {"path": "./test262-main/test/built-ins/Math/sqrt/length.js", "version": 6, "esid": " 20.2.2.32", "description": " >Math.sqrt.length is 1.\n", "info": " |Math.sqrt ( x )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Math/sqrt/name.js", "version": 6, "esid": " 20.2.2.32", "description": " >Math.sqrt.name is \"sqrt\".\n", "info": " |Math.sqrt ( x )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Math/tan/length.js", "version": 6, "esid": " 20.2.2.33", "description": " >Math.tan.length is 1.\n", "info": " |Math.tan ( x )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Math/tan/name.js", "version": 6, "esid": " 20.2.2.33", "description": " >Math.tan.name is \"tan\".\n", "info": " |Math.tan ( x )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Math/tanh/length.js", "description": " length property of Math.tanh", "version": 6, "esid": " 20.2.2.34", "info": " |Math.tanh ( x )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Math/tanh/name.js", "version": 6, "esid": " 20.2.2.34", "description": " >Math.tanh.name is \"tanh\".\n", "info": " |Math.tanh ( x )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Math/tanh/prop-desc.js", "description": " Testing descriptor property of Math.tanh", "includes": ["propertyHelper.js"], "version": 6, "esid": " 20.2.2.34"}, {"path": "./test262-main/test/built-ins/Math/tanh/tanh-specialVals.js", "description": " Math.tanh with special values", "version": 6, "esid": " 20.2.2.34"}, {"path": "./test262-main/test/built-ins/Math/trunc/Math.trunc_Infinity.js", "version": 6, "esid": " 20.2.2.35", "author": " Ryan Lewis", "description": " Return arg when called with Infinity or -Infinity."}, {"path": "./test262-main/test/built-ins/Math/trunc/Math.trunc_NaN.js", "version": 6, "esid": " 20.2.2.35", "author": " Ryan Lewis", "description": " Math.trunc should return NaN when called with NaN."}, {"path": "./test262-main/test/built-ins/Math/trunc/Math.trunc_NegDecimal.js", "version": 6, "esid": " 20.2.2.35", "author": " Ryan Lewis", "description": " Math.trunc should return -0 if called with a value between 0 and -1."}, {"path": "./test262-main/test/built-ins/Math/trunc/Math.trunc_PosDecimal.js", "version": 6, "esid": " 20.2.2.35", "author": " Ryan Lewis", "description": " Math.trunc should return 0 if called with a value between 0 and 1."}, {"path": "./test262-main/test/built-ins/Math/trunc/Math.trunc_Success.js", "version": 6, "esid": " 20.2.2.35", "author": " Ryan Lewis", "description": " Math.trunc should return 4578 if called with 4578.584949"}, {"path": "./test262-main/test/built-ins/Math/trunc/Math.trunc_Zero.js", "version": 6, "esid": " 20.2.2.35", "author": " Ryan Lewis", "description": " Math.trunc should return 0 when called with 0."}, {"path": "./test262-main/test/built-ins/Math/trunc/length.js", "description": " length property of Math.trunc", "version": 6, "esid": " 20.2.2.35", "info": " |Math.trunc ( x )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Math/trunc/name.js", "version": 6, "esid": " 20.2.2.35", "description": " >Math.trunc.name is \"trunc\".\n", "info": " |Math.trunc ( x )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Math/trunc/prop-desc.js", "description": " Testing descriptor property of Math.trunc", "includes": ["propertyHelper.js"], "version": 6, "esid": " 20.2.2.35"}, {"path": "./test262-main/test/built-ins/Math/trunc/trunc-sampleTests.js", "description": " sample tests for trunc", "version": 6, "esid": " 20.2.2.35"}, {"path": "./test262-main/test/built-ins/Math/trunc/trunc-specialVals.js", "description": " Math.trunc with sample values.", "version": 6, "esid": " 20.2.2.35"}, {"path": "./test262-main/test/built-ins/NativeErrors/EvalError/length.js", "version": 6, "esid": " 19.5.6.2", "description": " >EvalError.length is 1.\n", "info": " |NativeError ( message )\n\n19.5.6.2 Properties of the NativeError Constructors\nBesides the length property (whose value is 1) [...].\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/NativeErrors/EvalError/name.js", "version": 6, "esid": " 19.5.6.1", "description": " >EvalError.name is \"EvalError\".\n", "info": " |17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/NativeErrors/RangeError/length.js", "version": 6, "esid": " 19.5.6.2", "description": " >RangeError.length is 1.\n", "info": " |NativeError ( message )\n\n19.5.6.2 Properties of the NativeError Constructors\nBesides the length property (whose value is 1) [...].\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/NativeErrors/RangeError/name.js", "version": 6, "esid": " 19.5.6.1", "description": " >RangeError.name is \"RangeError\".\n", "info": " |17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/NativeErrors/ReferenceError/length.js", "version": 6, "esid": " 19.5.6.2", "description": " >ReferenceError.length is 1.\n", "info": " |NativeError ( message )\n\n19.5.6.2 Properties of the NativeError Constructors\nBesides the length property (whose value is 1) [...].\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/NativeErrors/ReferenceError/name.js", "version": 6, "esid": " 19.5.6.1", "description": " >ReferenceError.name is \"ReferenceError\".\n", "info": " |17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/NativeErrors/SyntaxError/length.js", "version": 6, "esid": " 19.5.6.2", "description": " >SyntaxError.length is 1.\n", "info": " |NativeError ( message )\n\n19.5.6.2 Properties of the NativeError Constructors\nBesides the length property (whose value is 1) [...].\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/NativeErrors/SyntaxError/name.js", "version": 6, "esid": " 19.5.6.1", "description": " >SyntaxError.name is \"SyntaxError\".\n", "info": " |17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/NativeErrors/TypeError/length.js", "version": 6, "esid": " 19.5.6.2", "description": " >TypeError.length is 1.\n", "info": " |NativeError ( message )\n\n19.5.6.2 Properties of the NativeError Constructors\nBesides the length property (whose value is 1) [...].\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/NativeErrors/TypeError/name.js", "version": 6, "esid": " 19.5.6.1", "description": " >TypeError.name is \"TypeError\".\n", "info": " |17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/NativeErrors/URIError/length.js", "version": 6, "esid": " 19.5.6.2", "description": " >URIError.length is 1.\n", "info": " |NativeError ( message )\n\n19.5.6.2 Properties of the NativeError Constructors\nBesides the length property (whose value is 1) [...].\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/NativeErrors/URIError/name.js", "version": 6, "esid": " 19.5.6.1", "description": " >URIError.name is \"URIError\".\n", "info": " |17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/NativeErrors/message_property_native_error.js", "description": " NativeError constructor creates own message property", "info": " |19.5.6.1.1 NativeError ( message )\n\n...\n4.\n...\nc. Let msgDesc be the PropertyDescriptor{[[Value]]: msg, [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true}.\nd. Let status be DefinePropertyOrThrow(O, \"message\", msgDesc).\n", "version": 6, "esid": " 19.5.6.1.1", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Number/EPSILON.js", "esid": " sec-number.epsilon", "description": " >\"EPSILON\" property of Number\n", "info": " |20.1.2.1 Number.EPSILON\n\nThe value of Number.EPSILON is the difference between 1 and the smallest value\ngreater than 1 that is representable as a Number value, which is approximately\n2.2204460492503130808472633361816 x 10-16.\n\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: false }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Number/MAX_SAFE_INTEGER.js", "description": " Property descriptor for `Number.MAX_SAFE_INTEGER`", "esid": " sec-number.max_safe_integer", "info": " |The value of Number.MAX_SAFE_INTEGER is 9007199254740991\n\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]:\nfalse, [[Configurable]]: false }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Number/MIN_SAFE_INTEGER.js", "description": " Property descriptor for `Number.MIN_SAFE_INTEGER`", "esid": " sec-number.min_safe_integer", "info": " |The value of Number.MIN_SAFE_INTEGER is \u22129007199254740991\n\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]:\nfalse, [[Configurable]]: false }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Number/isFinite/arg-is-not-number.js", "esid": " sec-number.isfinite", "description": " >Return false if argument is not Number\n", "info": " |Number.isFinite ( number )\n\n1. If Type(number) is not Number, return false.\n[...]\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Number/isFinite/length.js", "version": 6, "esid": " 20.1.2.2", "description": " >Number.isFinite.length is 1.\n", "info": " |Number.isFinite ( number )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Number/isFinite/name.js", "version": 6, "esid": " 20.1.2.2", "description": " >Number.isFinite.name is \"isFinite\".\n", "info": " |Number.isFinite ( number )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Number/isInteger/arg-is-not-number.js", "esid": " sec-number.isinteger", "description": " >Return false if argument is not Number\n", "info": " |Number.isInteger ( number )\n\n1. If Type(number) is not Number, return false.\n[...]\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Number/isInteger/length.js", "version": 6, "esid": " 20.1.2.3", "description": " >Number.isInteger.length is 1.\n", "info": " |Number.isInteger ( number )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Number/isInteger/name.js", "version": 6, "esid": " 20.1.2.3", "description": " >Number.isInteger.name is \"isInteger\".\n", "info": " |Number.isInteger ( number )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Number/isNaN/arg-is-not-number.js", "esid": " sec-number.isnan", "description": " >Return false if argument is not Number\n", "info": " |Number.isNaN ( number )\n\n1. If Type(number) is not Number, return false.\n[...]\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Number/isNaN/length.js", "version": 6, "esid": " 20.1.2.4", "description": " >Number.isNaN.length is 1.\n", "info": " |Number.isNaN ( number )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Number/isNaN/name.js", "version": 6, "esid": " 20.1.2.4", "description": " >Number.isNaN.name is \"isNaN\".\n", "info": " |Number.isNaN ( number )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Number/isSafeInteger/arg-is-not-number.js", "esid": " sec-number.issafeinteger", "description": " >Return false if argument is not Number\n", "info": " |Number.isSafeInteger ( number )\n\n1. If Type(number) is not Number, return false.\n[...]\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Number/isSafeInteger/infinity.js", "esid": " sec-number.issafeinteger", "description": " >Return false if argument is an Infinity value\n", "info": " |Number.isSafeInteger ( number )\n\n[...]\n2. If number is NaN, +\u221e, or -\u221e, return false.\n[...]\n"}, {"path": "./test262-main/test/built-ins/Number/isSafeInteger/length.js", "version": 6, "esid": " 20.1.2.5", "description": " >Number.isSafeInteger.length is 1.\n", "info": " |Number.isSafeInteger ( number )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Number/isSafeInteger/name.js", "version": 6, "esid": " 20.1.2.5", "description": " >Number.isSafeInteger.name is \"isSafeInteger\".\n", "info": " |Number.isSafeInteger ( number )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Number/isSafeInteger/nan.js", "esid": " sec-number.issafeinteger", "description": " >Return false if argument is NaN\n", "info": " |Number.isSafeInteger ( number )\n\n[...]\n2. If number is NaN, +\u221e, or -\u221e, return false.\n[...]\n"}, {"path": "./test262-main/test/built-ins/Number/isSafeInteger/not-integer.js", "esid": " sec-number.issafeinteger", "description": " >Return false if argument is not an integer\n", "info": " |Number.isSafeInteger ( number )\n\n[...]\n3. Let integer be ToInteger(number).\n4. If integer is not equal to number, return false.\n[...]\n"}, {"path": "./test262-main/test/built-ins/Number/isSafeInteger/not-safe-integer.js", "esid": " sec-number.issafeinteger", "description": " >Return false if argument is not a safe integer\n", "info": " |Number.isSafeInteger ( number )\n\n[...]\n3. Let integer be ToInteger(number).\n4. If integer is not equal to number, return false.\n5. If abs(integer) \u2264 2**53-1, return true.\n6. Otherwise, return false.\n"}, {"path": "./test262-main/test/built-ins/Number/isSafeInteger/prop-desc.js", "esid": " sec-number.issafeinteger", "description": " >\"isSafeInteger\" property of Number\n", "info": " |17 ECMAScript Standard Built-in Objects:\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2\nhas the attributes { [[Writable]]: true, [[Enumerable]]: false,\n[[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Number/isSafeInteger/safe-integers.js", "esid": " sec-number.issafeinteger", "description": " >Return true if argument is a safe integer\n", "info": " |Number.isSafeInteger ( number )\n\n[...]\n3. Let integer be ToInteger(number).\n4. If integer is not equal to number, return false.\n5. If abs(integer) \u2264 2**53-1, return true.\n[...]\n"}, {"path": "./test262-main/test/built-ins/Number/prototype/toExponential/length.js", "version": 6, "esid": " 20.1.3.2", "description": " >Number.prototype.toExponential.length is 1.\n", "info": " |Number.prototype.toExponential ( fractionDigits )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Number/prototype/toExponential/name.js", "version": 6, "esid": " 20.1.3.2", "description": " >Number.prototype.toExponential.name is \"toExponential\".\n", "info": " |Number.prototype.toExponential ( fractionDigits )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Number/prototype/toExponential/return-abrupt-tointeger-fractiondigits-symbol.js", "esid": " sec-number.prototype.toexponential", "description": " >Return abrupt completion from ToInteger(symbol fractionDigits)\n", "info": " |Number.prototype.toExponential ( fractionDigits )\n\n1. Let x be ? thisNumberValue(this value).\n2. Let f be ? ToInteger(fractionDigits).\n[...]\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Number/prototype/toExponential/this-type-not-number-or-number-object.js", "esid": " sec-number.prototype.toexponential", "description": " >Throws a TypeError if this value is not a number object or value\n", "info": " |20.1.3 Properties of the Number Prototype Object\n\nThe Number prototype object is the intrinsic object %NumberPrototype%. The\nNumber prototype object is an ordinary object. The Number prototype is itself\na Number object; it has a [[NumberData]] internal slot with the value +0.\n\n[...]\nThe abstract operation thisNumberValue(value) performs the following steps:\n\n1. If Type(value) is Number, return value.\n2. If Type(value) is Object and value has a [[NumberData]] internal slot, then\na. Assert: value's [[NumberData]] internal slot is a Number value.\nb. Return the value of value's [[NumberData]] internal slot.\n3. Throw a TypeError exception.\n\nNumber.prototype.toExponential ( fractionDigits )\n\n1. Let x be ? thisNumberValue(this value).\n[...]\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Number/prototype/toExponential/undefined-fractiondigits.js", "esid": " sec-number.prototype.toexponential", "description": " >Handle undefined fractionDigits, not only casting it to 0\n", "info": " |Number.prototype.toExponential ( fractionDigits )\n\n1. Let x be ? thisNumberValue(this value).\n2. Let f be ? ToInteger(fractionDigits).\n[...]\n10. Else x \u2260 0,\na. If fractionDigits is not undefined, then\ni. Let e and n be integers such that 10f \u2264 n < 10f+1 and for which the\nexact mathematical value of n \u00d7 10e-f - x is as close to zero as\npossible. If there are two such sets of e and n, pick the e and n for\nwhich n \u00d7 10e-f is larger.\nb. Else fractionDigits is undefined,\ni. Let e, n, and f be integers such that f \u2265 0, 10f \u2264 n < 10f+1, the\nNumber value for n \u00d7 10e-f is x, and f is as small as possible. Note\nthat the decimal representation of n has f+1 digits, n is not divisible\nby 10, and the least significant digit of n is not necessarily uniquely\ndetermined by these criteria.\n"}, {"path": "./test262-main/test/built-ins/Number/prototype/toFixed/length.js", "esid": " sec-number.prototype.tofixed", "description": " >Number.prototype.toFixed.length is 1.\n", "info": " |Number.prototype.toFixed ( fractionDigits )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Number/prototype/toFixed/name.js", "version": 6, "esid": " 20.1.3.3", "description": " >Number.prototype.toFixed.name is \"toFixed\".\n", "info": " |Number.prototype.toFixed ( fractionDigits )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Number/prototype/toLocaleString/length.js", "version": 6, "esid": " 20.1.3.4", "description": " >Number.prototype.toLocaleString.length is 0.\n", "info": " |Number.prototype.toLocaleString( [ reserved1 [ , reserved2 ] ])\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Number/prototype/toLocaleString/name.js", "version": 6, "esid": " 20.1.3.4", "description": " >Number.prototype.toLocaleString.name is \"toLocaleString\".\n", "info": " |Number.prototype.toLocaleString( [ reserved1 [ , reserved2 ] ])\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Number/prototype/toPrecision/length.js", "version": 6, "esid": " 20.1.3.5", "description": " >Number.prototype.toPrecision.length is 1.\n", "info": " |Number.prototype.toPrecision ( precision )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Number/prototype/toPrecision/name.js", "version": 6, "esid": " 20.1.3.5", "description": " >Number.prototype.toPrecision.name is \"toPrecision\".\n", "info": " |Number.prototype.toPrecision ( precision )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Number/prototype/toPrecision/return-abrupt-tointeger-precision-symbol.js", "esid": " sec-number.prototype.toprecision", "description": " >Return abrupt completion from ToInteger(symbol precision)\n", "info": " |20.1.3 Properties of the Number Prototype Object\n\nThe Number prototype object is the intrinsic object %NumberPrototype%. The\nNumber prototype object is an ordinary object. The Number prototype is itself\na Number object; it has a [[NumberData]] internal slot with the value +0.\n\n[...]\nThe abstract operation thisNumberValue(value) performs the following steps:\n\n1. If Type(value) is Number, return value.\n2. If Type(value) is Object and value has a [[NumberData]] internal slot, then\na. Assert: value's [[NumberData]] internal slot is a Number value.\nb. Return the value of value's [[NumberData]] internal slot.\n3. Throw a TypeError exception.\n\nNumber.prototype.toPrecision ( precision )\n\n1. Let x be ? thisNumberValue(this value).\n2. If precision is undefined, return ! ToString(x).\n3. Let p be ? ToInteger(precision).\n[...]\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Number/prototype/toPrecision/this-type-not-number-or-number-object.js", "esid": " sec-number.prototype.toprecision", "description": " >Throws a TypeError if this value is not a number object or value\n", "info": " |20.1.3 Properties of the Number Prototype Object\n\nThe Number prototype object is the intrinsic object %NumberPrototype%. The\nNumber prototype object is an ordinary object. The Number prototype is itself\na Number object; it has a [[NumberData]] internal slot with the value +0.\n\n[...]\nThe abstract operation thisNumberValue(value) performs the following steps:\n\n1. If Type(value) is Number, return value.\n2. If Type(value) is Object and value has a [[NumberData]] internal slot, then\na. Assert: value's [[NumberData]] internal slot is a Number value.\nb. Return the value of value's [[NumberData]] internal slot.\n3. Throw a TypeError exception.\n\nNumber.prototype.toPrecision ( precision )\n\n1. Let x be ? thisNumberValue(this value).\n[...]\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Number/prototype/toString/length.js", "version": 6, "esid": " 20.1.3.6", "description": " >Number.prototype.toString.length is 1.\n", "info": " |Number.prototype.toString ( [ radix ] )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Number/prototype/toString/name.js", "version": 6, "esid": " 20.1.3.6", "description": " >Number.prototype.toString.name is \"toString\".\n", "info": " |Number.prototype.toString ( [ radix ] )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Number/prototype/toString/numeric-literal-tostring-radix-poisoned.js", "esid": " sec-number.prototype.tostring", "description": " >Else, let radixNumber be ? ToInteger(radix).\n"}, {"path": "./test262-main/test/built-ins/Number/prototype/valueOf/length.js", "version": 6, "esid": " 20.1.3.7", "description": " >Number.prototype.valueOf.length is 0.\n", "info": " |Number.prototype.valueOf ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Number/prototype/valueOf/name.js", "version": 6, "esid": " 20.1.3.7", "description": " >Number.prototype.valueOf.name is \"valueOf\".\n", "info": " |Number.prototype.valueOf ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Number/return-abrupt-tonumber-value-symbol.js", "esid": " sec-number-constructor-number-value", "description": " >Return abrupt from ToNumber(value)\n", "info": " |Number ( value )\n\n1. If no arguments were passed to this function invocation, let n be +0.\n2. Else, let n be ? ToNumber(value).\n[...]\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Number/string-binary-literal.js", "version": 6, "esid": " 20.1.1.1", "description": " Mathematical value of valid binary integer literals", "info": " |20.1.1.1 Number ( [ value ] )\n\nWhen Number is called with argument number, the following steps are taken:\n\n1. If no arguments were passed to this function invocation, let n be +0.\n2. Else, let n be ToNumber(value).\n\n[...]\n\n7.1.3.1 ToNumber Applied to the String Type\n\nAll grammar symbols not explicitly defined above have the definitions used\nin the Lexical Grammar for numeric literals (11.8.3)\n\n[...]\n\nThe MV of BinaryIntegerLiteral :: 0b BinaryDigits is the MV of\nBinaryDigits.\nThe MV of BinaryIntegerLiteral :: 0B BinaryDigits is the MV of\nBinaryDigits.\nThe MV of BinaryDigits :: BinaryDigit is the MV of BinaryDigit.\nThe MV of BinaryDigits :: BinaryDigits BinaryDigit is (the MV of\nBinaryDigits \u00d7 2) plus the MV of BinaryDigit.\n"}, {"path": "./test262-main/test/built-ins/Number/string-octal-literal.js", "version": 6, "esid": " 20.1.1.1", "description": " Mathematical value of valid octal integer literals", "info": " |20.1.1.1 Number ( [ value ] )\n\nWhen Number is called with argument number, the following steps are taken:\n\n1. If no arguments were passed to this function invocation, let n be +0.\n2. Else, let n be ToNumber(value).\n\n[...]\n\n7.1.3.1 ToNumber Applied to the String Type\n\nAll grammar symbols not explicitly defined above have the definitions used\nin the Lexical Grammar for numeric literals (11.8.3)\n\n[...]\n\nThe MV of OctalIntegerLiteral :: 0o OctalDigits is the MV of OctalDigits.\nThe MV of OctalIntegerLiteral :: 0O OctalDigits is the MV of OctalDigits.\nThe MV of OctalDigits :: OctalDigit is the MV of OctalDigit.\nThe MV of OctalDigits :: OctalDigits OctalDigit is (the MV of OctalDigits \u00d7\n8) plus the MV of OctalDigit.\n"}, {"path": "./test262-main/test/built-ins/Object/assign/ObjectOverride-sameproperty.js", "description": " >Object properties are assigned to target in ascending index order,\ni.e. a later assignment to the same property overrides an earlier assignment.\n", "version": 6, "esid": "  19.1.2.1"}, {"path": "./test262-main/test/built-ins/Object/assign/OnlyOneArgument.js", "description": " >test Object.Assign(target,...sources),only one argument was passed,\nreturn ToObject(target)\n", "version": 6, "esid": "  19.1.2.1.3"}, {"path": "./test262-main/test/built-ins/Object/assign/Override-notstringtarget.js", "description": " >Test override of Object.Assign(target,...sources),\nEvery string from sources will be wrapped to objects, and override from the first letter(result[0]) all the time\n", "version": 6, "esid": "  19.1.2.1"}, {"path": "./test262-main/test/built-ins/Object/assign/Override.js", "description": " Test Object.Assign(target,...sources).", "esid": " sec-object.assign"}, {"path": "./test262-main/test/built-ins/Object/assign/Source-Null-Undefined.js", "description": " null and undefined source should be ignored,result should be original object.", "esid": " sec-object.assign"}, {"path": "./test262-main/test/built-ins/Object/assign/Source-Number-Boolen-Symbol.js", "description": " >Number,Boolean,Symbol cannot have own enumerable properties,\nSo cannot be Assigned.Here result should be original object.\n", "esid": " sec-object.assign", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Object/assign/Source-String.js", "description": " Test Object.Assign(target,...sources), string have own enumerable properties, so it can be wrapped to objects.", "esid": " sec-object.assign"}, {"path": "./test262-main/test/built-ins/Object/assign/Target-Boolean.js", "description": " >Test the first argument(target) of Object.Assign(target,...sources),\nif target is Boolean,the return value should be a new object whose value is target.\n", "version": 6, "esid": "  19.1.2.1.1"}, {"path": "./test262-main/test/built-ins/Object/assign/Target-Number.js", "description": " >Test the first argument(target) of Object.Assign(target,...sources),\nif target is Number,the return value should be a new object whose value is target.\n", "version": 6, "esid": "  19.1.2.1.1"}, {"path": "./test262-main/test/built-ins/Object/assign/Target-Object.js", "description": " >Test the first argument(target) of Object.Assign(target,...sources),\nif target is Object,its properties will be the properties of new object.\n", "version": 6, "esid": "  19.1.2.1.1"}, {"path": "./test262-main/test/built-ins/Object/assign/Target-String.js", "description": " >Test the first argument(target) of Object.Assign(target,...sources),\nif target is String,the return value should be a new object whose value is target.\n", "version": 6, "esid": "  19.1.2.1.1"}, {"path": "./test262-main/test/built-ins/Object/assign/Target-Symbol.js", "description": " >Test the first argument(target) of Object.Assign(target,...sources),\nif target is Symbol,the return value should be a new Symbol object whose [[SymbolData]] value is target.\n", "version": 6, "esid": "  19.1.2.1.1", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Object/assign/assign-descriptor.js", "description": " Testing descriptor property of Object.assign", "includes": [""], "version": 6, "esid": " 19.1.2.1"}, {"path": "./test262-main/test/built-ins/Object/assign/assign-length.js", "description": " The length property of the assign method should be 2", "version": 6, "esid": "  19.1.2.1", "info": " |The length property of the assign method is 2.\n\nES6 Section 17:\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Object/assign/name.js", "version": 6, "esid": " 19.1.2.1", "description": " '`name` property'", "info": " |ES6 Section 17:\n\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value is a\nString. Unless otherwise specified, this value is the name that is given to\nthe function in this specification.\n\n[...]\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Object/assign/source-get-attr-error.js", "version": 6, "esid": " 19.1.2.1", "description": " Errors thrown during retrieval of source object attributes", "info": " |[...]\n5. For each element nextSource of sources, in ascending index order,\n[...]\nc. Repeat for each element nextKey of keys in List order,\n[...]\niii. if desc is not undefined and desc.[[Enumerable]] is true, then\n1. Let propValue be Get(from, nextKey).\n2. ReturnIfAbrupt(propValue).\n"}, {"path": "./test262-main/test/built-ins/Object/assign/source-non-enum.js", "version": 6, "esid": " 19.1.2.1", "description": " Does not assign non-enumerable source properties", "info": " |[...]\n5. For each element nextSource of sources, in ascending index order,\nc. Repeat for each element nextKey of keys in List order,\ni. Let desc be from.[[GetOwnProperty]](nextKey).\nii. ReturnIfAbrupt(desc).\niii. if desc is not undefined and desc.[[Enumerable]] is true, then\n"}, {"path": "./test262-main/test/built-ins/Object/assign/source-own-prop-desc-missing.js", "version": 6, "esid": " 19.1.2.1", "description": " Invoked with a source which does not have a descriptor for an own property", "info": " |[...]\n5. For each element nextSource of sources, in ascending index order,\n[...]\nc. Repeat for each element nextKey of keys in List order,\ni. Let desc be from.[[GetOwnProperty]](nextKey).\nii. ReturnIfAbrupt(desc).\niii. if desc is not undefined and desc.[[Enumerable]] is true, then\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Object/assign/source-own-prop-error.js", "version": 6, "esid": " 19.1.2.1", "description": " Invoked with a source whose own property descriptor cannot be retrieved", "info": " |[...]\n5. For each element nextSource of sources, in ascending index order,\n[...]\nc. Repeat for each element nextKey of keys in List order,\ni. Let desc be from.[[GetOwnProperty]](nextKey).\nii. ReturnIfAbrupt(desc).\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Object/assign/source-own-prop-keys-error.js", "version": 6, "esid": " 19.1.2.1", "description": " Invoked with a source whose own property keys cannot be retrieved", "info": " |[...]\n5. For each element nextSource of sources, in ascending index order,\na. If nextSource is undefined or null, let keys be an empty List.\nb. Else,\ni. Let from be ToObject(nextSource).\nii. ReturnIfAbrupt(from).\niii. Let keys be from.[[OwnPropertyKeys]]().\niv. ReturnIfAbrupt(keys).\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Object/assign/strings-and-symbol-order-proxy.js", "esid": " sec-object.assign", "description": " >Proxy keys are iterated in order they were provided by \"ownKeys\" trap.\n", "info": " |Object.assign ( target, ...sources )\n\n[...]\n4. For each element nextSource of sources, in ascending index order, do\na. If nextSource is neither undefined nor null, then\n[...]\nii. Let keys be ? from.[[OwnPropertyKeys]]().\niii. For each element nextKey of keys in List order, do\n1. Let desc be ? from.[[GetOwnProperty]](nextKey).\n\n[[OwnPropertyKeys]] ( )\n\n[...]\n7. Let trapResultArray be ? Call(trap, handler, \u00ab target \u00bb).\n8. Let trapResult be ? CreateListFromArrayLike(trapResultArray, \u00ab String, Symbol \u00bb).\n[...]\n23. Return trapResult.\n", "features": ["Proxy", "Symbol"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/Object/assign/strings-and-symbol-order.js", "esid": " sec-object.assign", "description": " >Symbol-valued properties are copied after String-valued properties.\n", "info": " |19.1.2.1 Object.assign ( target, ...sources )\n\n...\n4. For each element nextSource of sources, in ascending index order, do\na. ...\nb. Else,\ni. Let from be ! ToObject(nextSource).\nii. Let keys be ? from.[[OwnPropertyKeys]]().\nc. For each element nextKey of keys in List order, do\n...\n...\n\n9.1.11.1 OrdinaryOwnPropertyKeys ( O )\n\n...\n3. For each own property key P of O that is a String but is not an integer index,\nin ascending chronological order of property creation, do\na. Add P as the last element of keys.\n4. For each own property key P of O that is a Symbol, in ascending chronological\norder of property creation, do\na. Add P as the last element of keys.\n...\n\n", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/Object/assign/target-is-frozen-accessor-property-set-succeeds.js", "esid": " sec-object.assign", "description": " >[[Set]] to accessor property of frozen `target` succeeds.\n", "info": " |SetIntegrityLevel ( O, level )\n\n[...]\n3. Let status be ? O.[[PreventExtensions]]().\n[...]\n7. Else,\na. Assert: level is frozen.\nb. For each element k of keys, do\ni. Let currentDesc be ? O.[[GetOwnProperty]](k).\nii. If currentDesc is not undefined, then\n1. If IsAccessorDescriptor(currentDesc) is true, then\na. Let desc be the PropertyDescriptor { [[Configurable]]: false }.\n[...]\n3. Perform ? DefinePropertyOrThrow(O, k, desc).\n8. Return true.\n\nObject.assign ( target, ...sources )\n\n[...]\n3. For each element nextSource of sources, do\na. If nextSource is neither undefined nor null, then\n[...]\niii. For each element nextKey of keys, do\n1. Let desc be ? from.[[GetOwnProperty]](nextKey).\n2. If desc is not undefined and desc.[[Enumerable]] is true, then\n[...]\nb. Perform ? Set(to, nextKey, propValue, true).\n\nOrdinarySetWithOwnDescriptor ( O, P, V, Receiver, ownDesc )\n\n[...]\n7. Perform ? Call(setter, Receiver, \u00ab V \u00bb).\n8. Return true.\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Object/assign/target-is-frozen-data-property-set-throws.js", "esid": " sec-object.assign", "description": " >[[Set]] to data property of frozen `target` fails with TypeError.\n", "info": " |SetIntegrityLevel ( O, level )\n\n[...]\n3. Let status be ? O.[[PreventExtensions]]().\n[...]\n7. Else,\na. Assert: level is frozen.\nb. For each element k of keys, do\ni. Let currentDesc be ? O.[[GetOwnProperty]](k).\nii. If currentDesc is not undefined, then\n1. If IsAccessorDescriptor(currentDesc) is true, then\n[...]\n2. Else,\na. Let desc be the PropertyDescriptor { [[Configurable]]: false, [[Writable]]: false }.\n3. Perform ? DefinePropertyOrThrow(O, k, desc).\n8. Return true.\n\nObject.assign ( target, ...sources )\n\n[...]\n3. For each element nextSource of sources, do\na. If nextSource is neither undefined nor null, then\n[...]\niii. For each element nextKey of keys, do\n1. Let desc be ? from.[[GetOwnProperty]](nextKey).\n2. If desc is not undefined and desc.[[Enumerable]] is true, then\n[...]\nb. Perform ? Set(to, nextKey, propValue, true).\n\nOrdinarySetWithOwnDescriptor ( O, P, V, Receiver, ownDesc )\n\n[...]\n3. If IsDataDescriptor(ownDesc) is true, then\na. If ownDesc.[[Writable]] is false, return false.\n", "features": ["Symbol", "Reflect"]}, {"path": "./test262-main/test/built-ins/Object/assign/target-is-non-extensible-existing-accessor-property.js", "esid": " sec-object.assign", "description": " >[[Set]] to existing accessor property of non-extensible `target` is successful.\n", "info": " |OrdinaryPreventExtensions ( O )\n\n1. Set O.[[Extensible]] to false.\n\nObject.assign ( target, ...sources )\n\n[...]\n3. For each element nextSource of sources, do\na. If nextSource is neither undefined nor null, then\n[...]\niii. For each element nextKey of keys, do\n1. Let desc be ? from.[[GetOwnProperty]](nextKey).\n2. If desc is not undefined and desc.[[Enumerable]] is true, then\n[...]\nb. Perform ? Set(to, nextKey, propValue, true).\n\nOrdinarySetWithOwnDescriptor ( O, P, V, Receiver, ownDesc )\n\n[...]\n7. Perform ? Call(setter, Receiver, \u00ab V \u00bb).\n8. Return true.\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Object/assign/target-is-non-extensible-existing-data-property.js", "esid": " sec-object.assign", "description": " >[[Set]] to existing data property of non-extensible `target` is successful.\n", "info": " |OrdinaryPreventExtensions ( O )\n\n1. Set O.[[Extensible]] to false.\n\nObject.assign ( target, ...sources )\n\n[...]\n3. For each element nextSource of sources, do\na. If nextSource is neither undefined nor null, then\n[...]\niii. For each element nextKey of keys, do\n1. Let desc be ? from.[[GetOwnProperty]](nextKey).\n2. If desc is not undefined and desc.[[Enumerable]] is true, then\n[...]\nb. Perform ? Set(to, nextKey, propValue, true).\n\nOrdinarySetWithOwnDescriptor ( O, P, V, Receiver, ownDesc )\n\n[...]\n3. If IsDataDescriptor(ownDesc) is true, then\n[...]\nc. Let existingDescriptor be ? Receiver.[[GetOwnProperty]](P).\nd. If existingDescriptor is not undefined, then\n[...]\niii. Let valueDesc be the PropertyDescriptor { [[Value]]: V }.\niv. Return ? Receiver.[[DefineOwnProperty]](P, valueDesc).\n\nValidateAndApplyPropertyDescriptor ( O, P, extensible, Desc, current )\n\n[...]\n9. If O is not undefined, then\na. For each field of Desc that is present, set the corresponding attribute\nof the property named P of object O to the value of the field.\n10. Return true.\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Object/assign/target-is-non-extensible-property-creation-throws.js", "esid": " sec-object.assign", "description": " >[[Set]] to non-existing property of non-extensible `target` fails with TypeError.\n", "info": " |Object.assign ( target, ...sources )\n\n[...]\n3. For each element nextSource of sources, do\na. If nextSource is neither undefined nor null, then\n[...]\niii. For each element nextKey of keys, do\n1. Let desc be ? from.[[GetOwnProperty]](nextKey).\n2. If desc is not undefined and desc.[[Enumerable]] is true, then\n[...]\nb. Perform ? Set(to, nextKey, propValue, true).\n\nOrdinarySetWithOwnDescriptor ( O, P, V, Receiver, ownDesc )\n\n[...]\n3. If IsDataDescriptor(ownDesc) is true, then\n[...]\nc. Let existingDescriptor be ? Receiver.[[GetOwnProperty]](P).\nd. If existingDescriptor is not undefined, then\n[...]\ne. Else,\ni. Assert: Receiver does not currently have a property P.\nii. Return ? CreateDataProperty(Receiver, P, V).\n\nValidateAndApplyPropertyDescriptor ( O, P, extensible, Desc, current )\n\n[...]\n2. If current is undefined, then\na. If extensible is false, return false.\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Object/assign/target-is-sealed-existing-accessor-property.js", "esid": " sec-object.assign", "description": " >[[Set]] to existing accessor property of sealed `target` is successful.\n", "info": " |SetIntegrityLevel ( O, level )\n\n[...]\n3. Let status be ? O.[[PreventExtensions]]().\n[...]\n\nOrdinaryPreventExtensions ( O )\n\n1. Set O.[[Extensible]] to false.\n\nObject.assign ( target, ...sources )\n\n[...]\n3. For each element nextSource of sources, do\na. If nextSource is neither undefined nor null, then\n[...]\niii. For each element nextKey of keys, do\n1. Let desc be ? from.[[GetOwnProperty]](nextKey).\n2. If desc is not undefined and desc.[[Enumerable]] is true, then\n[...]\nb. Perform ? Set(to, nextKey, propValue, true).\n\nOrdinarySetWithOwnDescriptor ( O, P, V, Receiver, ownDesc )\n\n[...]\n7. Perform ? Call(setter, Receiver, \u00ab V \u00bb).\n8. Return true.\n"}, {"path": "./test262-main/test/built-ins/Object/assign/target-is-sealed-existing-data-property.js", "esid": " sec-object.assign", "description": " >[[Set]] to existing data property of sealed `target` is successful.\n", "info": " |SetIntegrityLevel ( O, level )\n\n[...]\n3. Let status be ? O.[[PreventExtensions]]().\n[...]\n\nOrdinaryPreventExtensions ( O )\n\n1. Set O.[[Extensible]] to false.\n\nObject.assign ( target, ...sources )\n\n[...]\n3. For each element nextSource of sources, do\na. If nextSource is neither undefined nor null, then\n[...]\niii. For each element nextKey of keys, do\n1. Let desc be ? from.[[GetOwnProperty]](nextKey).\n2. If desc is not undefined and desc.[[Enumerable]] is true, then\n[...]\nb. Perform ? Set(to, nextKey, propValue, true).\n\nOrdinarySetWithOwnDescriptor ( O, P, V, Receiver, ownDesc )\n\n[...]\n3. If IsDataDescriptor(ownDesc) is true, then\n[...]\nc. Let existingDescriptor be ? Receiver.[[GetOwnProperty]](P).\nd. If existingDescriptor is not undefined, then\n[...]\niii. Let valueDesc be the PropertyDescriptor { [[Value]]: V }.\niv. Return ? Receiver.[[DefineOwnProperty]](P, valueDesc).\n\nValidateAndApplyPropertyDescriptor ( O, P, extensible, Desc, current )\n\n[...]\n9. If O is not undefined, then\na. For each field of Desc that is present, set the corresponding attribute\nof the property named P of object O to the value of the field.\n10. Return true.\n"}, {"path": "./test262-main/test/built-ins/Object/assign/target-is-sealed-property-creation-throws.js", "esid": " sec-object.assign", "description": " >[[Set]] to non-existing property of sealed `target` fails with TypeError.\n", "info": " |SetIntegrityLevel ( O, level )\n\n[...]\n3. Let status be ? O.[[PreventExtensions]]().\n[...]\n\nObject.assign ( target, ...sources )\n\n[...]\n3. For each element nextSource of sources, do\na. If nextSource is neither undefined nor null, then\n[...]\niii. For each element nextKey of keys, do\n1. Let desc be ? from.[[GetOwnProperty]](nextKey).\n2. If desc is not undefined and desc.[[Enumerable]] is true, then\n[...]\nb. Perform ? Set(to, nextKey, propValue, true).\n\nOrdinarySetWithOwnDescriptor ( O, P, V, Receiver, ownDesc )\n\n[...]\n3. If IsDataDescriptor(ownDesc) is true, then\n[...]\nc. Let existingDescriptor be ? Receiver.[[GetOwnProperty]](P).\nd. If existingDescriptor is not undefined, then\n[...]\ne. Else,\ni. Assert: Receiver does not currently have a property P.\nii. Return ? CreateDataProperty(Receiver, P, V).\n\nValidateAndApplyPropertyDescriptor ( O, P, extensible, Desc, current )\n\n[...]\n2. If current is undefined, then\na. If extensible is false, return false.\n", "features": ["Symbol", "Reflect"]}, {"path": "./test262-main/test/built-ins/Object/assign/target-set-user-error.js", "version": 6, "esid": " 19.1.2.1", "description": " Errors thrown during definition of target object attributes", "info": " |[...]\n5. For each element nextSource of sources, in ascending index order,\n[...]\nc. Repeat for each element nextKey of keys in List order,\n[...]\niii. if desc is not undefined and desc.[[Enumerable]] is true, then\n[...]\n3. Let status be Set(to, nextKey, propValue, true).\n4. ReturnIfAbrupt(status).\n"}, {"path": "./test262-main/test/built-ins/Object/create/name.js", "version": 6, "esid": " 19.1.2.2", "description": " >Object.create.name is \"create\".\n", "info": " |Object.create ( O [ , Properties ] )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Object/defineProperties/name.js", "version": 6, "esid": " 19.1.2.3", "description": " >Object.defineProperties.name is \"defineProperties\".\n", "info": " |Object.defineProperties ( O, Properties )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Object/defineProperties/property-description-must-be-an-object-not-symbol.js", "esid": " sec-objectdefineproperties", "description": " >Property description must be an object (symbol)\n", "info": " |ObjectDefineProperties ( O, Properties )\n\n...\nFor each element nextKey of keys, do\nLet propDesc be ? props.[[GetOwnProperty]](nextKey).\nIf propDesc is not undefined and propDesc.[[Enumerable]] is true, then\nLet descObj be ? Get(props, nextKey).\nLet desc be ? ToPropertyDescriptor(descObj).\n...\n\nToPropertyDescriptor ( Obj )\n\nIf Type(Obj) is not Object, throw a TypeError exception.\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Object/defineProperties/proxy-no-ownkeys-returned-keys-order.js", "esid": " sec-object.getownpropertydescriptors", "description": " >If Proxy \"ownKeys\" trap is missing, keys are sorted by type in ascending\nchronological order.\n", "info": " |ObjectDefineProperties ( O, Properties )\n\n[...]\n3. Let keys be ? props.[[OwnPropertyKeys]]().\n[...]\n4. For each element nextKey of keys in List order, do\na. Let propDesc be ? props.[[GetOwnProperty]](nextKey).\n\n[[OwnPropertyKeys]] ( )\n\n[...]\n6. If trap is undefined, then\na. Return ? target.[[OwnPropertyKeys]]().\n\nOrdinaryOwnPropertyKeys ( O )\n\n[...]\n3. For each own property key P of O such that Type(P) is String and P is\nnot an array index, in ascending chronological order of property creation, do\na. Add P as the last element of keys.\n4. For each own property key P of O such that Type(P) is Symbol,\nin ascending chronological order of property creation, do\na. Add P as the last element of keys.\n5. Return keys.\n", "features": ["Proxy", "Symbol"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/Object/defineProperty/name.js", "version": 6, "esid": " 19.1.2.4", "description": " >Object.defineProperty.name is \"defineProperty\".\n", "info": " |Object.defineProperty ( O, P, Attributes )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Object/defineProperty/property-description-must-be-an-object-not-symbol.js", "esid": " sec-object.defineproperty", "description": " >Property description must be an object (symbol)\n", "info": " |ObjectDefineProperties ( O, Properties )\n\n...\nFor each element nextKey of keys, do\nLet propDesc be ? props.[[GetOwnProperty]](nextKey).\nIf propDesc is not undefined and propDesc.[[Enumerable]] is true, then\nLet descObj be ? Get(props, nextKey).\nLet desc be ? ToPropertyDescriptor(descObj).\n...\n\nToPropertyDescriptor ( Obj )\n\nIf Type(Obj) is not Object, throw a TypeError exception.\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Object/defineProperty/symbol-data-property-configurable.js", "version": 6, "esid": " 19.1.2.4", "description": " >Symbol used as property for configurable data property definition\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Object/defineProperty/symbol-data-property-default-non-strict.js", "version": 6, "esid": " 19.1.2.4", "description": " >Symbol used as property for property definition\n", "flags": ["noStrict"], "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Object/defineProperty/symbol-data-property-default-strict.js", "version": 6, "esid": " 19.1.2.4", "description": " >Symbol used as property for default data property definition\n", "flags": ["onlyStrict"], "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Object/defineProperty/symbol-data-property-writable.js", "version": 6, "esid": " 19.1.2.4", "description": " >Symbol used as property for writable data property definition\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Object/freeze/15.2.3.9-1-1.js", "version": 5, "esid": " 15.2.3.9-1-1", "description": " >Object.freeze does not throw TypeError if type of first param is\nundefined\n"}, {"path": "./test262-main/test/built-ins/Object/freeze/15.2.3.9-1-2.js", "version": 5, "esid": " 15.2.3.9-1-2", "description": " >Object.freeze does not throw TypeError if type of first param is\nnull\n"}, {"path": "./test262-main/test/built-ins/Object/freeze/15.2.3.9-1-3.js", "version": 5, "esid": " 15.2.3.9-1-3", "description": " >Object.freeze does not throw TypeError if type of first param is\nboolean primitive\n"}, {"path": "./test262-main/test/built-ins/Object/freeze/15.2.3.9-1-4.js", "version": 5, "esid": " 15.2.3.9-1-4", "description": " >Object.freeze does not throw TypeError if type of first param is\nstring primitive\n"}, {"path": "./test262-main/test/built-ins/Object/freeze/15.2.3.9-1.js", "version": 5, "esid": " 15.2.3.9-1", "description": " >Object.freeze does not throw TypeError if type of first param is\nnot Object\n"}, {"path": "./test262-main/test/built-ins/Object/freeze/frozen-object-contains-symbol-properties-non-strict.js", "version": 6, "esid": " 19.1.2.5", "description": " >Frozen object contains symbol properties.\n", "flags": ["noStrict"], "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Object/freeze/frozen-object-contains-symbol-properties-strict.js", "version": 6, "esid": " 19.1.2.5", "description": " >Frozen object contains symbol properties.\n", "flags": ["onlyStrict"], "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Object/freeze/name.js", "version": 6, "esid": " 19.1.2.5", "description": " >Object.freeze.name is \"freeze\".\n", "info": " |Object.freeze ( O )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Object/freeze/throws-when-false.js", "esid": " sec-object.freeze", "description": " >Object.freeze throws if SetIntegrityLevel(O, frozen) returns false.\n", "info": " |Object.freeze ( O )\n...\n2. Let status be ? SetIntegrityLevel(O, frozen).\n3. If status is false, throw a TypeError exception.\n\nSetIntegrityLevel ( O, level )\n...\n3. Let status be ? O.[[PreventExtensions]]().\n4. If status is false, return false.\n"}, {"path": "./test262-main/test/built-ins/Object/getOwnPropertyDescriptor/15.2.3.3-1-3.js", "version": 5, "esid": " 15.2.3.3-1-3", "description": " >Object.getOwnPropertyDescriptor - TypeError is not thrown when\nfirst param is a boolean\n"}, {"path": "./test262-main/test/built-ins/Object/getOwnPropertyDescriptor/15.2.3.3-1-4.js", "version": 5, "esid": " 15.2.3.3-1-4", "description": " >Object.getOwnPropertyDescriptor - TypeError is not thrown when\nfirst param is a number\n"}, {"path": "./test262-main/test/built-ins/Object/getOwnPropertyDescriptor/15.2.3.3-1.js", "version": 5, "esid": " 15.2.3.3-1", "description": " >Object.getOwnPropertyDescriptor does not throw TypeError if type\nof first param is not Object\n"}, {"path": "./test262-main/test/built-ins/Object/getOwnPropertyDescriptor/15.2.3.3-4-186.js", "version": 5, "esid": " 15.2.3.3-4-186", "description": " >Object.getOwnPropertyDescriptor returns data desc for properties\non built-ins (Function.length)\n"}, {"path": "./test262-main/test/built-ins/Object/getOwnPropertyDescriptor/15.2.3.3-4-187.js", "version": 5, "esid": " 15.2.3.3-4-187", "description": " >Object.getOwnPropertyDescriptor returns data desc for properties\non built-ins (Function (instance).length)\n"}, {"path": "./test262-main/test/built-ins/Object/getOwnPropertyDescriptor/15.2.3.3-4-191.js", "version": 5, "esid": " 15.2.3.3-4-191", "description": " >Object.getOwnPropertyDescriptor returns data desc for properties\non built-ins (String.length)\n"}, {"path": "./test262-main/test/built-ins/Object/getOwnPropertyDescriptor/15.2.3.3-4-194.js", "version": 5, "esid": " 15.2.3.3-4-194", "description": " >Object.getOwnPropertyDescriptor returns data desc for properties\non built-ins (Boolean.length)\n"}, {"path": "./test262-main/test/built-ins/Object/getOwnPropertyDescriptor/15.2.3.3-4-201.js", "version": 5, "esid": " 15.2.3.3-4-201", "description": " >Object.getOwnPropertyDescriptor returns data desc for properties\non built-ins (Number.length)\n"}, {"path": "./test262-main/test/built-ins/Object/getOwnPropertyDescriptor/15.2.3.3-4-213.js", "version": 5, "esid": " 15.2.3.3-4-213", "description": " >Object.getOwnPropertyDescriptor returns accessor desc for\naccessors on built-ins (RegExp.prototype.global)\n"}, {"path": "./test262-main/test/built-ins/Object/getOwnPropertyDescriptor/15.2.3.3-4-214.js", "version": 5, "esid": " 15.2.3.3-4-214", "description": " >Object.getOwnPropertyDescriptor returns accessor desc for\naccessors on built-ins (RegExp.prototype.ignoreCase)\n"}, {"path": "./test262-main/test/built-ins/Object/getOwnPropertyDescriptor/15.2.3.3-4-215.js", "version": 5, "esid": " 15.2.3.3-4-215", "description": " >Object.getOwnPropertyDescriptor returns accessor desc for\naccessors on built-ins (RegExp.prototype.multiline)\n"}, {"path": "./test262-main/test/built-ins/Object/getOwnPropertyDescriptor/length.js", "esid": " sec-object.getownpropertydescriptor", "description": " >Object.getOwnPropertyDescriptor.length is 2.\n", "info": " |Object.getOwnPropertyDescriptor ( O, P )\n\nECMAScript Standard Built-in Objects\n\nEvery built-in function object, including constructors, has a \"length\" property whose\nvalue is an integer. Unless otherwise specified, this value is equal to the largest\nnumber of named arguments shown in the subclause headings for the function description.\n\nUnless otherwise specified, the \"length\" property of a built-in function object has\nthe attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Object/getOwnPropertyDescriptor/name.js", "version": 6, "esid": " 19.1.2.6", "description": " >Object.getOwnPropertyDescriptor.name is \"getOwnPropertyDescriptor\".\n", "info": " |Object.getOwnPropertyDescriptor ( O, P )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Object/getOwnPropertyDescriptor/primitive-string.js", "esid": " sec-object.getownpropertydescriptor", "description": " >String primitive as first argument is coerced to object.\n", "info": " |Object.getOwnPropertyDescriptor ( O, P )\n\n1. Let obj be ? ToObject(O).\n[...]\n3. Let desc be ? obj.[[GetOwnProperty]](key).\n4. Return FromPropertyDescriptor(desc).\n\nString Exotic Objects\n\nString exotic objects always have a data property named \"length\" whose value is the number\nof code unit elements in the encapsulated String value. Both the code unit data properties\nand the \"length\" property are non-writable and non-configurable.\n"}, {"path": "./test262-main/test/built-ins/Object/getOwnPropertyDescriptor/primitive-symbol.js", "esid": " sec-object.getownpropertydescriptor", "description": " >Symbol primitive as first argument is coerced to object.\n", "info": " |Object.getOwnPropertyDescriptor ( O, P )\n\n1. Let obj be ? ToObject(O).\n[...]\n3. Let desc be ? obj.[[GetOwnProperty]](key).\n4. Return FromPropertyDescriptor(desc).\n\nProperties of Symbol Instances\n\nSymbol instances are ordinary objects that inherit properties from the Symbol prototype object.\nSymbol instances have a [[SymbolData]] internal slot.\nThe [[SymbolData]] internal slot is the Symbol value represented by this Symbol object.\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Object/getOwnPropertyNames/15.2.3.4-1-4.js", "version": 5, "esid": " 15.2.3.4-1-4", "description": " >Object.getOwnPropertyNames does not throw TypeError if 'O' is a\nboolean\n"}, {"path": "./test262-main/test/built-ins/Object/getOwnPropertyNames/15.2.3.4-1-5.js", "version": 5, "esid": " 15.2.3.4-1-5", "description": " >Object.getOwnPropertyNames does not throw TypeError if 'O' is a\nstring\n"}, {"path": "./test262-main/test/built-ins/Object/getOwnPropertyNames/15.2.3.4-1.js", "version": 5, "esid": " 15.2.3.4-1", "description": " >Object.getOwnPropertyNames does not throw TypeError if type of\nfirst param is not Object\n"}, {"path": "./test262-main/test/built-ins/Object/getOwnPropertyNames/15.2.3.4-4-49.js", "version": 5, "esid": " 15.2.3.4-4-49", "description": " >Object.getOwnPropertyNames - own index properties of Array objcect\nare pushed into the returned Array\n", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/Object/getOwnPropertyNames/15.2.3.4-4-b-2.js", "version": 5, "esid": " 15.2.3.4-4-b-2", "description": " >Object.getOwnPropertyNames - all own properties are pushed into\nthe returned array\n", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/Object/getOwnPropertyNames/name.js", "version": 6, "esid": " 19.1.2.7", "description": " >Object.getOwnPropertyNames.name is \"getOwnPropertyNames\".\n", "info": " |Object.getOwnPropertyNames ( O )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Object/getOwnPropertyNames/non-object-argument-valid.js", "esid": " sec-object.getownpropertynames", "description": " >Object.getOwnPropertyNames called with a valid non-object value\n", "info": " |GetOwnPropertyKeys ( O, type )\n\nLet obj be ? ToObject(O).\nLet keys be ? obj.[[OwnPropertyKeys]]().\nLet nameList be a new empty List.\nFor each element nextKey of keys, do\nIf Type(nextKey) is Symbol and type is symbol or Type(nextKey) is String and type is string, then\nAppend nextKey as the last element of nameList.\nReturn CreateArrayFromList(nameList).\n\n", "features": ["Symbol"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/Object/getOwnPropertyNames/order-after-define-property.js", "esid": " sec-object.getownpropertynames", "description": " >Property names are returned in ascending chronological order of creation\nthat is unaffected by [[DefineOwnProperty]].\n", "info": " |Object.getOwnPropertyNames ( O )\n\n1. Return ? GetOwnPropertyKeys(O, String).\n\nGetOwnPropertyKeys ( O, type )\n\n1. Let obj be ? ToObject(O).\n2. Let keys be ? obj.[[OwnPropertyKeys]]().\n[...]\n\nOrdinaryOwnPropertyKeys ( O )\n\n[...]\n3. For each own property key P of O that is a String but is not an array index,\nin ascending chronological order of property creation, do\na. Add P as the last element of keys.\n[...]\n5. Return keys.\n", "features": ["arrow-function"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/Object/getOwnPropertyNames/proxy-invariant-absent-not-configurable-symbol-key.js", "esid": " sec-object.getownpropertynames", "description": " >Proxy [[OwnPropertyKeys]] trap does not skip symbol keys when validating invariant:\n* The result List must contain the keys of all non-configurable own properties of\nthe target object.\n", "info": " |Object.getOwnPropertyNames ( O )\n\n1. Return ? GetOwnPropertyKeys(O, String).\n\nGetOwnPropertyKeys ( O, type )\n\n...\n2. Let keys be ? obj.[[OwnPropertyKeys]]().\n\n[[OwnPropertyKeys]] ( )\n\n...\n11. Let targetKeys be ? target.[[OwnPropertyKeys]]().\n...\n15. Let targetNonconfigurableKeys be a new empty List.\n16. For each element key of targetKeys, do\na. Let desc be ? target.[[GetOwnProperty]](key).\nb. If desc is not undefined and desc.[[Configurable]] is false, then\ni. Append key as an element of targetNonconfigurableKeys.\n...\n18. Let uncheckedResultKeys be a new List which is a copy of trapResult.\n19. For each key that is an element of targetNonconfigurableKeys, do\na. If key is not an element of uncheckedResultKeys, throw a TypeError exception.\n", "features": ["Proxy", "Symbol"]}, {"path": "./test262-main/test/built-ins/Object/getOwnPropertyNames/proxy-invariant-duplicate-symbol-entry.js", "esid": " sec-object.getownpropertynames", "description": " >Proxy [[OwnPropertyKeys]] trap does not skip symbol keys when validating invariant:\n* The returned List contains no duplicate entries.\n", "info": " |Object.getOwnPropertyNames ( O )\n\n1. Return ? GetOwnPropertyKeys(O, String).\n\nGetOwnPropertyKeys ( O, type )\n\n...\n2. Let keys be ? obj.[[OwnPropertyKeys]]().\n\n[[OwnPropertyKeys]] ( )\n\n...\n8. Let trapResult be ? CreateListFromArrayLike(trapResultArray, \u00ab String, Symbol \u00bb).\n9. If trapResult contains any duplicate entries, throw a TypeError exception.\n", "features": ["Proxy", "Symbol"]}, {"path": "./test262-main/test/built-ins/Object/getOwnPropertyNames/proxy-invariant-not-extensible-absent-symbol-key.js", "esid": " sec-object.getownpropertynames", "description": " >Proxy [[OwnPropertyKeys]] trap does not skip symbol keys when validating invariant:\n* If the target object is not extensible, then the result List must contain all the keys of\nthe own properties of the target object and no other values.\n", "info": " |Object.getOwnPropertyNames ( O )\n\n1. Return ? GetOwnPropertyKeys(O, String).\n\nGetOwnPropertyKeys ( O, type )\n\n...\n2. Let keys be ? obj.[[OwnPropertyKeys]]().\n\n[[OwnPropertyKeys]] ( )\n\n...\n11. Let targetKeys be ? target.[[OwnPropertyKeys]]().\n16. For each element key of targetKeys, do\na. Let desc be ? target.[[GetOwnProperty]](key).\nb. If desc is not undefined and desc.[[Configurable]] is false, then\n...\nc. Else,\ni. Append key as an element of targetConfigurableKeys.\n...\n18. Let uncheckedResultKeys be a new List which is a copy of trapResult.\n...\n21. For each key that is an element of targetConfigurableKeys, do\na. If key is not an element of uncheckedResultKeys, throw a TypeError exception.\n", "features": ["Proxy", "Symbol"]}, {"path": "./test262-main/test/built-ins/Object/getOwnPropertyNames/proxy-invariant-not-extensible-extra-symbol-key.js", "esid": " sec-object.getownpropertynames", "description": " >Proxy [[OwnPropertyKeys]] trap does not skip symbol keys when validating invariant:\n* If the target object is not extensible, then the result List must contain all the keys of\nthe own properties of the target object and no other values.\n", "info": " |Object.getOwnPropertyNames ( O )\n\n1. Return ? GetOwnPropertyKeys(O, String).\n\nGetOwnPropertyKeys ( O, type )\n\n...\n2. Let keys be ? obj.[[OwnPropertyKeys]]().\n\n[[OwnPropertyKeys]] ( )\n\n...\n11. Let targetKeys be ? target.[[OwnPropertyKeys]]().\n16. For each element key of targetKeys, do\na. Let desc be ? target.[[GetOwnProperty]](key).\nb. If desc is not undefined and desc.[[Configurable]] is false, then\n...\nc. Else,\ni. Append key as an element of targetConfigurableKeys.\n...\n18. Let uncheckedResultKeys be a new List which is a copy of trapResult.\n...\n22. If uncheckedResultKeys is not empty, throw a TypeError exception.\n", "features": ["Proxy", "Symbol"]}, {"path": "./test262-main/test/built-ins/Object/getOwnPropertySymbols/length.js", "esid": " sec-object.getownpropertysymbols", "description": " >Object.getOwnPropertySymbols.length is 1.\n", "info": " |Object.getOwnPropertySymbols ( O )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Object/getOwnPropertySymbols/name.js", "esid": " sec-object.getownpropertysymbols", "description": " >Object.getOwnPropertySymbols.name is \"getOwnPropertySymbols\".\n", "info": " |Object.getOwnPropertySymbols ( O )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Object/getOwnPropertySymbols/non-object-argument-valid.js", "esid": " sec-object.getownpropertysymbols", "description": " >Object.getOwnPropertySymbols called with a valid non-object value\n", "info": " |GetOwnPropertyKeys ( O, type )\n\nLet obj be ? ToObject(O).\nLet keys be ? obj.[[OwnPropertyKeys]]().\nLet nameList be a new empty List.\nFor each element nextKey of keys, do\nIf Type(nextKey) is Symbol and type is symbol or Type(nextKey) is String and type is string, then\nAppend nextKey as the last element of nameList.\nReturn CreateArrayFromList(nameList).\n\n", "features": ["Symbol"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/Object/getOwnPropertySymbols/object-contains-symbol-property-with-description.js", "esid": " sec-object.getownpropertysymbols", "description": " >Object.getOwnPropertySymbols returns all symbol properties that have descriptions\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Object/getOwnPropertySymbols/object-contains-symbol-property-without-description.js", "esid": " sec-object.getownpropertysymbols", "description": " >Object.getOwnPropertySymbols returns all symbol properties that do not have descriptions\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Object/getOwnPropertySymbols/order-after-define-property.js", "esid": " sec-object.getownpropertysymbols", "description": " >Property names are returned in ascending chronological order of creation\nthat is unaffected by [[DefineOwnProperty]].\n", "info": " |Object.getOwnPropertySymbols ( O )\n\n1. Return ? GetOwnPropertyKeys(O, Symbol).\n\nGetOwnPropertyKeys ( O, type )\n\n1. Let obj be ? ToObject(O).\n2. Let keys be ? obj.[[OwnPropertyKeys]]().\n[...]\n\nOrdinaryOwnPropertyKeys ( O )\n\n[...]\n4. For each own property key P of O that is a Symbol, in ascending\nchronological order of property creation, do\na. Add P as the last element of keys.\n5. Return keys.\n", "features": ["Symbol"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/Object/getPrototypeOf/15.2.3.2-1-3.js", "version": 5, "esid": " 15.2.3.2-1-3", "description": " Object.getPrototypeOf returns Boolean.prototype if 'O' is a boolean"}, {"path": "./test262-main/test/built-ins/Object/getPrototypeOf/15.2.3.2-1-4.js", "version": 5, "esid": " 15.2.3.2-1-4", "description": " Object.getPrototypeOf returns String.prototype if 'O' is a string"}, {"path": "./test262-main/test/built-ins/Object/getPrototypeOf/15.2.3.2-1.js", "version": 5, "esid": " 15.2.3.2-1", "description": " Object.getPrototypeOf returns Number.prototype if 'O' is a number"}, {"path": "./test262-main/test/built-ins/Object/getPrototypeOf/name.js", "version": 6, "esid": " 19.1.2.9", "description": " >Object.getPrototypeOf.name is \"getPrototypeOf\".\n", "info": " |Object.getPrototypeOf ( O )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Object/internals/DefineOwnProperty/nan-equivalence-define-own-property-reassign.js", "esid": " sec-ordinary-object-internal-methods-and-internal-slots-defineownproperty-p-desc", "description": " >Replaces value field even if they pass in the SameValue algorithm, including\ndistinct NaN values\n", "info": " |This test does not compare the actual byte values, instead it simply checks that\nthe value is some valid NaN encoding.\n\n---\n\nPreviously, this test compared the \"value\" field using the SameValue\nalgorithm (thereby ignoring distinct NaN values)\n\n---\n\n[[DefineOwnProperty]] (P, Desc)\n\nReturn ? OrdinaryDefineOwnProperty(O, P, Desc).\n\n#sec-ordinarydefineownproperty\nOrdinaryDefineOwnProperty ( O, P, Desc )\n\n1. Let current be ? O.[[GetOwnProperty]](P).\n2. Let extensible be O.[[Extensible]].\n3. Return ValidateAndApplyPropertyDescriptor(O, P, extensible, Desc,\ncurrent).\n\n#sec-validateandapplypropertydescriptor\nValidateAndApplyPropertyDescriptor ( O, P, extensible, Desc, current )\n\n...\n7. Else if IsDataDescriptor(current) and IsDataDescriptor(Desc) are both true,\nthen\na. If current.[[Configurable]] is false and current.[[Writable]] is false,\nthen\n...\n...\n9. If O is not undefined, then\na. For each field of Desc that is present, set the corresponding attribute\nof the property named P of object O to the value of the field.\n10. Return true.\n\n#sec-isnan-number\n\nNOTE: A reliable way for ECMAScript code to test if a value X is a NaN is\nan expression of the formX !== X. The result will be true if and only\nif X is a NaN.\n", "includes": ["nans.js"]}, {"path": "./test262-main/test/built-ins/Object/internals/DefineOwnProperty/nan-equivalence-define-own-property-reconfigure.js", "esid": " sec-ordinary-object-internal-methods-and-internal-slots-defineownproperty-p-desc", "description": " >Replaces value field even if they pass in the SameValue algorithm, including\ndistinct NaN values\n", "info": " |This test does not compare the actual byte values, instead it simply checks that\nthe value is some valid NaN encoding.\n\n---\n\nPreviously, this method compared the \"value\" field using the SameValue\nalgorithm (thereby ignoring distinct NaN values)\n\n---\n\n[[DefineOwnProperty]] (P, Desc)\n\nReturn ? OrdinaryDefineOwnProperty(O, P, Desc).\n\n#sec-ordinarydefineownproperty\nOrdinaryDefineOwnProperty ( O, P, Desc )\n\n1. Let current be ? O.[[GetOwnProperty]](P).\n2. Let extensible be O.[[Extensible]].\n3. Return ValidateAndApplyPropertyDescriptor(O, P, extensible, Desc,\ncurrent).\n\n#sec-validateandapplypropertydescriptor\nValidateAndApplyPropertyDescriptor ( O, P, extensible, Desc, current )\n\n...\n7. Else if IsDataDescriptor(current) and IsDataDescriptor(Desc) are both true,\nthen\na. If current.[[Configurable]] is false and current.[[Writable]] is false,\nthen\n...\n...\n9. If O is not undefined, then\na. For each field of Desc that is present, set the corresponding attribute\nof the property named P of object O to the value of the field.\n10. Return true.\n\n#sec-isnan-number\n\nNOTE: A reliable way for ECMAScript code to test if a value X is a NaN is\nan expression of the formX !== X. The result will be true if and only\nif X is a NaN.\n", "includes": ["nans.js"]}, {"path": "./test262-main/test/built-ins/Object/is/length.js", "version": 6, "esid": " 19.1.2.10", "description": " >Object.is ( value1, value2 )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Object/is/name.js", "version": 6, "esid": " 19.1.2.10", "description": " >Object.is ( value1, value2 )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Object/is/not-same-value-x-y-symbol.js", "version": 6, "esid": " 19.1.2.10", "description": " >Object.is ( value1, value2 )\n\n...\n6. If Type(x) is Symbol, then\na. If x and y are both the same Symbol value, \nreturn true; otherwise, return false.\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Object/is/same-value-x-y-symbol.js", "version": 6, "esid": " 19.1.2.10", "description": " >Object.is ( value1, value2 )\n\n...\n6. If Type(x) is Symbol, then\na. If x and y are both the same Symbol value, \nreturn true; otherwise, return false.\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Object/is/symbol-object-is-same-value.js", "esid": " sec-object.is", "description": " >Object.is/SameValue: Symbol\n", "features": ["Object.is", "Symbol"]}, {"path": "./test262-main/test/built-ins/Object/isExtensible/15.2.3.13-1-1.js", "version": 5, "esid": " 15.2.3.13-1-1", "description": " Object.isExtensible does not throw TypeError if 'O' is undefined"}, {"path": "./test262-main/test/built-ins/Object/isExtensible/15.2.3.13-1-2.js", "version": 5, "esid": " 15.2.3.13-1-2", "description": " Object.isExtensible does not throw TypeError if 'O' is null"}, {"path": "./test262-main/test/built-ins/Object/isExtensible/15.2.3.13-1-3.js", "version": 5, "esid": " 15.2.3.13-1-3", "description": " Object.isExtensible does not throw TypeError if 'O' is a boolean"}, {"path": "./test262-main/test/built-ins/Object/isExtensible/15.2.3.13-1-4.js", "version": 5, "esid": " 15.2.3.13-1-4", "description": " Object.isExtensible does not throw TypeError if 'O' is a string"}, {"path": "./test262-main/test/built-ins/Object/isExtensible/15.2.3.13-1.js", "version": 5, "esid": " 15.2.3.13-1", "description": " >Object.isExtensible does not throw TypeError if type of first\nparam is not Object\n"}, {"path": "./test262-main/test/built-ins/Object/isExtensible/name.js", "version": 6, "esid": " 19.1.2.11", "description": " >Object.isExtensible.name is \"isExtensible\".\n", "info": " |Object.isExtensible ( O )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Object/isFrozen/15.2.3.12-1-1.js", "version": 5, "esid": " 15.2.3.12-1-1", "description": " >Object.isFrozen - TypeError is not thrown when the first param 'O'\nis undefined\n"}, {"path": "./test262-main/test/built-ins/Object/isFrozen/15.2.3.12-1-2.js", "version": 5, "esid": " 15.2.3.12-1-2", "description": " >Object.isFrozen - TypeError is not thrown when the first param 'O'\nis null\n"}, {"path": "./test262-main/test/built-ins/Object/isFrozen/15.2.3.12-1-3.js", "version": 5, "esid": " 15.2.3.12-1-3", "description": " >Object.isFrozen - TypeError is not thrown when the first param 'O'\nis a boolean\n"}, {"path": "./test262-main/test/built-ins/Object/isFrozen/15.2.3.12-1-4.js", "version": 5, "esid": " 15.2.3.12-1-4", "description": " >Object.isFrozen - TypeError is not thrown when the first param 'O'\nis a string\n"}, {"path": "./test262-main/test/built-ins/Object/isFrozen/15.2.3.12-1.js", "version": 5, "esid": " 15.2.3.12-1", "description": " >Object.isFrozen does not throw TypeError if type of first param is\nnot Object\n"}, {"path": "./test262-main/test/built-ins/Object/isFrozen/name.js", "version": 6, "esid": " 19.1.2.12", "description": " >Object.isFrozen.name is \"isFrozen\".\n", "info": " |Object.isFrozen ( O )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Object/isSealed/15.2.3.11-1.js", "version": 5, "esid": " 15.2.3.11-1", "description": " >Object.isSealed does not throw TypeError if type of first param is\nnot Object\n"}, {"path": "./test262-main/test/built-ins/Object/isSealed/name.js", "version": 6, "esid": " 19.1.2.13", "description": " >Object.isSealed.name is \"isSealed\".\n", "info": " |Object.isSealed ( O )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Object/keys/15.2.3.14-1-1.js", "version": 5, "esid": " 15.2.3.14-1-1", "description": " >Object.keys does not throw TypeError if type of first param is not\nObject\n"}, {"path": "./test262-main/test/built-ins/Object/keys/15.2.3.14-1-2.js", "version": 5, "esid": " 15.2.3.14-1-2", "description": " >Object.keys does not throw TypeError if type of first param is not\nObject (boolean)\n"}, {"path": "./test262-main/test/built-ins/Object/keys/15.2.3.14-1-3.js", "version": 5, "esid": " 15.2.3.14-1-3", "description": " >Object.keys does not throw TypeError if type of first param is not\nObject (string)\n"}, {"path": "./test262-main/test/built-ins/Object/keys/name.js", "version": 6, "esid": " 19.1.2.14", "description": " >Object.keys.name is \"keys\".\n", "info": " |Object.keys ( O )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Object/keys/property-traps-order-with-proxied-array.js", "esid": " sec-object.keys", "description": " >Ensure the correct property traps are called on a proxy of an array.\n", "info": " |19.1.2.16 Object.keys ( O )\n...\n2. Let nameList be ? EnumerableOwnPropertyNames(obj, \"key\").\n...\n\n7.3.21 EnumerableOwnPropertyNames ( O, kind )\n...\n2. Let ownKeys be ? O.[[OwnPropertyKeys]]().\n...\n4. For each element key of ownKeys in List order, do\na. If Type(key) is String, then\ni. Let desc be ? O.[[GetOwnProperty]](key).\n...\n", "features": ["Proxy"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/Object/keys/proxy-keys.js", "esid": " sec-object.keys", "description": " >Object.keys() observably performs [[GetOwnProperty]]\n", "info": " |19.1.2.16 Object.keys ( O )\n\n1. Let obj be ? ToObject(O).\n2. Let nameList be ? EnumerableOwnProperties(obj, \"key\").\n...\n\n7.3.21 EnumerableOwnProperties ( O, kind )\n\n1. Assert: Type(O) is Object.\n2. Let ownKeys be ? O.[[OwnPropertyKeys]]().\n3. Let properties be a new empty List.\n4. For each element key of ownKeys in List order, do\na. If Type(key) is String, then\ni. Let desc be ? O.[[GetOwnProperty]](key).\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Object/keys/proxy-non-enumerable-prop-invariant-1.js", "esid": " sec-object.keys", "description": " >Proxy [[OwnPropertyKeys]] trap does not skip non-enumerable keys when validating invariant:\n* The result List must contain the keys of all non-configurable own properties of\nthe target object.\n", "info": " |Object.keys ( O )\n\n...\n2. Let nameList be ? EnumerableOwnPropertyNames(obj, \"key\").\n\nEnumerableOwnPropertyNames ( O, kind )\n\n...\n2. Let ownKeys be ? O.[[OwnPropertyKeys]]().\n\n[[OwnPropertyKeys]] ( )\n\n...\n11. Let targetKeys be ? target.[[OwnPropertyKeys]]().\n...\n15. Let targetNonconfigurableKeys be a new empty List.\n16. For each element key of targetKeys, do\na. Let desc be ? target.[[GetOwnProperty]](key).\nb. If desc is not undefined and desc.[[Configurable]] is false, then\ni. Append key as an element of targetNonconfigurableKeys.\n...\n18. Let uncheckedResultKeys be a new List which is a copy of trapResult.\n19. For each key that is an element of targetNonconfigurableKeys, do\na. If key is not an element of uncheckedResultKeys, throw a TypeError exception.\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Object/keys/proxy-non-enumerable-prop-invariant-2.js", "esid": " sec-object.keys", "description": " >Proxy [[OwnPropertyKeys]] trap does not skip non-enumerable keys when validating invariant:\n* If the target object is not extensible, then the result List must contain all the keys of\nthe own properties of the target object and no other values.\n", "info": " |Object.keys ( O )\n\n...\n2. Let nameList be ? EnumerableOwnPropertyNames(obj, \"key\").\n\nEnumerableOwnPropertyNames ( O, kind )\n\n...\n2. Let ownKeys be ? O.[[OwnPropertyKeys]]().\n\n[[OwnPropertyKeys]] ( )\n\n...\n11. Let targetKeys be ? target.[[OwnPropertyKeys]]().\n16. For each element key of targetKeys, do\na. Let desc be ? target.[[GetOwnProperty]](key).\nb. If desc is not undefined and desc.[[Configurable]] is false, then\n...\nc. Else,\ni. Append key as an element of targetConfigurableKeys.\n...\n18. Let uncheckedResultKeys be a new List which is a copy of trapResult.\n...\n21. For each key that is an element of targetConfigurableKeys, do\na. If key is not an element of uncheckedResultKeys, throw a TypeError exception.\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Object/keys/return-order.js", "esid": " sec-object.keys", "description": " Object.keys enumeration order", "features": ["for-in-order"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/Object/preventExtensions/15.2.3.10-1-1.js", "version": 5, "esid": " 15.2.3.10-1-1", "description": " >Object.preventExtensions does not throw TypeError if 'O' is\nundefined\n"}, {"path": "./test262-main/test/built-ins/Object/preventExtensions/15.2.3.10-1-2.js", "version": 5, "esid": " 15.2.3.10-1-2", "description": " Object.preventExtensions does not throw TypeError if 'O' is null"}, {"path": "./test262-main/test/built-ins/Object/preventExtensions/15.2.3.10-1-3.js", "version": 5, "esid": " 15.2.3.10-1-3", "description": " >Object.preventExtensions does not throw TypeError if 'O' is a\nboolean primitive value\n"}, {"path": "./test262-main/test/built-ins/Object/preventExtensions/15.2.3.10-1-4.js", "version": 5, "esid": " 15.2.3.10-1-4", "description": " >Object.preventExtensions does not throw TypeError if 'O' is a\nstring primitive value\n"}, {"path": "./test262-main/test/built-ins/Object/preventExtensions/15.2.3.10-1.js", "version": 5, "esid": " 15.2.3.10-1", "description": " >Object.preventExtensions does not throw TypeError if type of first\nparam is not Object\n"}, {"path": "./test262-main/test/built-ins/Object/preventExtensions/name.js", "version": 6, "esid": " 19.1.2.15", "description": " >Object.preventExtensions.name is \"preventExtensions\".\n", "info": " |Object.preventExtensions ( O )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Object/preventExtensions/symbol-object-contains-symbol-properties-non-strict.js", "version": 6, "esid": " 19.4", "description": " >Object.preventExtensions(obj) where obj contains symbol properties.\n", "flags": ["noStrict"], "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Object/preventExtensions/symbol-object-contains-symbol-properties-strict.js", "version": 6, "esid": " 19.4", "description": " >Object.preventExtensions(obj) where obj contains symbol properties.\n", "flags": ["onlyStrict"], "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Object/preventExtensions/throws-when-false.js", "esid": " sec-object.preventextensions", "description": " >Object.preventExtensions throws if O.[[PreventExtensions]]() returns false.\n", "info": " |Object.preventExtensions ( O )\n...\n2. Let status be ? O.[[PreventExtensions]]().\n3. If status is false, throw a TypeError exception.\n"}, {"path": "./test262-main/test/built-ins/Object/prototype/__defineGetter__/getter-non-callable.js", "esid": " sec-additional-properties-of-the-object.prototype-object", "description": " Behavior when getter is not callable", "info": " |[...]\n2. If IsCallable(getter) is false, throw a TypeError exception.\n", "features": ["Symbol", "__getter__"]}, {"path": "./test262-main/test/built-ins/Object/prototype/__defineGetter__/length.js", "esid": " sec-additional-properties-of-the-object.prototype-object", "description": " Object.prototype.__defineGetter__ `length` property", "info": " |ES6 Section 17:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this value\nis equal to the largest number of named arguments shown in the subclause\nheadings for the function description, including optional parameters.\n\n[...]\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["__getter__"]}, {"path": "./test262-main/test/built-ins/Object/prototype/__defineGetter__/name.js", "esid": " sec-additional-properties-of-the-object.prototype-object", "description": " Object.prototype.__defineGetter__ `name` property", "info": " |ES6 Section 17:\n\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value is a\nString. Unless otherwise specified, this value is the name that is given to\nthe function in this specification.\n\n[...]\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["__getter__"]}, {"path": "./test262-main/test/built-ins/Object/prototype/__defineSetter__/length.js", "esid": " sec-additional-properties-of-the-object.prototype-object", "description": " Object.prototype.__defineSetter__ `length` property", "info": " |ES6 Section 17:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this value\nis equal to the largest number of named arguments shown in the subclause\nheadings for the function description, including optional parameters.\n\n[...]\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["__setter__"]}, {"path": "./test262-main/test/built-ins/Object/prototype/__defineSetter__/name.js", "esid": " sec-additional-properties-of-the-object.prototype-object", "description": " Object.prototype.__defineSetter__ `name` property", "info": " |ES6 Section 17:\n\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value is a\nString. Unless otherwise specified, this value is the name that is given to\nthe function in this specification.\n\n[...]\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["__setter__"]}, {"path": "./test262-main/test/built-ins/Object/prototype/__defineSetter__/setter-non-callable.js", "esid": " sec-additional-properties-of-the-object.prototype-object", "description": " Behavior when getter is not callable", "info": " |[...]\n2. If IsCallable(setter) is false, throw a TypeError exception.\n", "features": ["Symbol", "__setter__"]}, {"path": "./test262-main/test/built-ins/Object/prototype/__lookupGetter__/length.js", "esid": " sec-additional-properties-of-the-object.prototype-object", "description": " Object.prototype.__lookupGetter__ `length` property", "info": " |ES6 Section 17:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this value\nis equal to the largest number of named arguments shown in the subclause\nheadings for the function description, including optional parameters.\n\n[...]\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["__getter__"]}, {"path": "./test262-main/test/built-ins/Object/prototype/__lookupGetter__/lookup-proto-get-err.js", "esid": " sec-additional-properties-of-the-object.prototype-object", "description": " >Behavior when [[GetOwnProperty]] of prototype returns an abrupt completion\n", "info": " |[...]\n4. Repeat\na. Let desc be ? O.[[GetOwnProperty]](key).\nb. If desc is not undefined, then\ni. If IsAccessorDescriptor(desc) is true, return desc.[[Get]].\nii. Return undefined.\nc. Let O be ? O.[[GetPrototypeOf]]().\nd. If O is null, return undefined.\n", "features": ["Proxy", "__getter__"]}, {"path": "./test262-main/test/built-ins/Object/prototype/__lookupGetter__/name.js", "esid": " sec-additional-properties-of-the-object.prototype-object", "description": " Object.prototype.__lookupGetter__ `name` property", "info": " |ES6 Section 17:\n\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value is a\nString. Unless otherwise specified, this value is the name that is given to\nthe function in this specification.\n\n[...]\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["__getter__"]}, {"path": "./test262-main/test/built-ins/Object/prototype/__lookupSetter__/length.js", "esid": " sec-additional-properties-of-the-object.prototype-object", "description": " Object.prototype.__lookupSetter__ `length` property", "info": " |ES6 Section 17:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this value\nis equal to the largest number of named arguments shown in the subclause\nheadings for the function description, including optional parameters.\n\n[...]\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["__setter__"]}, {"path": "./test262-main/test/built-ins/Object/prototype/__lookupSetter__/lookup-proto-get-err.js", "esid": " sec-additional-properties-of-the-object.prototype-object", "description": " >Behavior when [[GetOwnProperty]] of prototype returns an abrupt completion\n", "info": " |[...]\n4. Repeat\na. Let desc be ? O.[[GetOwnProperty]](key).\nb. If desc is not undefined, then\ni. If IsAccessorDescriptor(desc) is true, return desc.[[Set]].\nii. Return undefined.\nc. Let O be ? O.[[GetPrototypeOf]]().\nd. If O is null, return undefined.\n", "features": ["Proxy", "__setter__"]}, {"path": "./test262-main/test/built-ins/Object/prototype/__lookupSetter__/name.js", "esid": " sec-additional-properties-of-the-object.prototype-object", "description": " Object.prototype.__lookupSetter__ `name` property", "info": " |ES6 Section 17:\n\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value is a\nString. Unless otherwise specified, this value is the name that is given to\nthe function in this specification.\n\n[...]\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["__setter__"]}, {"path": "./test262-main/test/built-ins/Object/prototype/__proto__/set-invalid-value.js", "esid": " B.2.2.1", "version": 6, "description": " Called with a value that is neither an Object nor Null", "info": " |1. Let O be ? RequireObjectCoercible(this value).\n2. If Type(proto) is neither Object nor Null, return undefined.\n", "features": ["Symbol", "__proto__"]}, {"path": "./test262-main/test/built-ins/Object/prototype/__proto__/set-non-object.js", "esid": " B.2.2.1", "version": 6, "description": " Called on a value that is object-coercible but not an Object", "info": " |1. Let O be ? RequireObjectCoercible(this value).\n2. If Type(proto) is neither Object nor Null, return undefined.\n3. If Type(O) is not Object, return undefined.\n", "features": ["Symbol", "__proto__"]}, {"path": "./test262-main/test/built-ins/Object/prototype/hasOwnProperty/length.js", "esid": " sec-object.prototype.hasownproperty", "description": " >Object.prototype.hasOwnProperty.length is 1.\n", "info": " |Object.prototype.hasOwnProperty ( V )\n\nECMAScript Standard Built-in Objects\n\nEvery built-in function object, including constructors, has a \"length\"\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description.\n\nUnless otherwise specified, the \"length\" property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Object/prototype/hasOwnProperty/name.js", "version": 6, "esid": " 19.1.3.2", "description": " >Object.prototype.hasOwnProperty.name is \"hasOwnProperty\".\n", "info": " |Object.prototype.hasOwnProperty ( V )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Object/prototype/hasOwnProperty/symbol_own_property.js", "description": " Object.prototype.hasOwnProperty called with symbol property key", "info": " |19.1.3.2 Object.prototype.hasOwnProperty ( V )\n\n1. Let P be ToPropertyKey(V).\n2. ReturnIfAbrupt(P).\n...\n", "version": 6, "esid": " 19.1.3.2", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Object/prototype/isPrototypeOf/length.js", "esid": " sec-object.prototype.isprototypeof", "description": " >Object.prototype.isPrototypeOf.length is 1.\n", "info": " |Object.prototype.isPrototypeOf ( V )\n\nECMAScript Standard Built-in Objects\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Object/prototype/isPrototypeOf/name.js", "esid": " sec-object.prototype.isprototypeof", "description": " >Object.prototype.isPrototypeOf.name is \"isPrototypeOf\".\n", "info": " |Object.prototype.isPrototypeOf ( V )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Object/prototype/isPrototypeOf/null-this-and-primitive-arg-returns-false.js", "esid": " sec-object.prototype.isprototypeof", "description": " >The ordering of steps 1 and 2 preserves the behaviour specified by previous\neditions of this specification for the case where V is not an object and\nthe this value is undefined or null.\n", "info": " |Object.prototype.isPrototypeOf ( V )\n\n1. If Type(V) is not Object, return false.\n2. Let O be ? ToObject(this value).\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Object/prototype/isPrototypeOf/undefined-this-and-primitive-arg-returns-false.js", "esid": " sec-object.prototype.isprototypeof", "description": " >The ordering of steps 1 and 2 preserves the behaviour specified by previous\neditions of this specification for the case where V is not an object and\nthe this value is undefined or null.\n", "info": " |Object.prototype.isPrototypeOf ( V )\n\n1. If Type(V) is not Object, return false.\n2. Let O be ? ToObject(this value).\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Object/prototype/propertyIsEnumerable/S15.2.4.7_A9.js", "info": " |The Object.prototype.propertyIsEnumerable.length property does not have\nthe attribute DontDelete\n", "version": 5, "esid": " 15.2.4.7_A9", "description": " >Checking if deleting the\nObject.prototype.propertyIsEnumerable.length property fails\n"}, {"path": "./test262-main/test/built-ins/Object/prototype/propertyIsEnumerable/name.js", "version": 6, "esid": " 19.1.3.4", "description": " >Object.prototype.propertyIsEnumerable.name is \"propertyIsEnumerable\".\n", "info": " |Object.prototype.propertyIsEnumerable ( V )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Object/prototype/propertyIsEnumerable/symbol_own_property.js", "description": " Object.prototype.propertyIsEnumerable called with symbol property key", "info": " |19.1.3.4 Object.prototype.propertyIsEnumerable ( V )\n\n1. Let P be ToPropertyKey(V).\n2. ReturnIfAbrupt(P).\n...\n", "version": 6, "esid": " 19.1.3.4", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Object/prototype/toLocaleString/S15.2.4.3_A9.js", "info": " |The Object.prototype.toLocaleString.length property does not have the\nattribute DontDelete\n", "version": 5, "esid": " 15.2.4.3_A9", "description": " >Checknig if deleting of the Object.prototype.toLocaleString.length\nproperty fails\n"}, {"path": "./test262-main/test/built-ins/Object/prototype/toLocaleString/name.js", "version": 6, "esid": " 19.1.3.5", "description": " >Object.prototype.toLocaleString.name is \"toLocaleString\".\n", "info": " |Object.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Object/prototype/toString/length.js", "esid": " sec-object.prototype.tostring", "description": " >Object.prototype.toString.length is 0.\n", "info": " |Object.prototype.toString ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Object/prototype/toString/name.js", "version": 6, "esid": " 19.1.3.6", "description": " >Object.prototype.toString.name is \"toString\".\n", "info": " |Object.prototype.toString ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Object/prototype/toString/proxy-revoked-during-get-call.js", "esid": " sec-object.prototype.tostring", "description": " >If Proxy is revoked during Get call, a string is returned.\n", "info": " |Object.prototype.toString ( )\n\n[...]\n4. Let isArray be ? IsArray(O).\n[...]\n14. Else, let builtinTag be \"Object\".\n15. Let tag be ? Get(O, @@toStringTag).\n16. If Type(tag) is not String, set tag to builtinTag.\n17. Return the string-concatenation of \"[object \", tag, and \"]\".\n\nIsArray ( argument )\n\n[...]\n3. If argument.[[ProxyHandler]] is null, throw a TypeError exception.\na. If argument.[[ProxyHandler]] is null, throw a TypeError exception.\nb. Let target be argument.[[ProxyTarget]].\nc. Return ? IsArray(target).\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Object/prototype/toString/symbol-tag-non-str.js", "description": " >Non-string values of `Symbol.toStringTag` property are ignored\n", "version": 6, "esid": " 19.1.3.6", "info": " |16. Let tag be Get (O, @@toStringTag).\n17. ReturnIfAbrupt(tag).\n18. If Type(tag) is not String, let tag be builtinTag.\n19. Return the String that is the result of concatenating \"[object \", tag,\nand \"]\".\n", "features": ["Symbol.toStringTag"]}, {"path": "./test262-main/test/built-ins/Object/prototype/valueOf/S15.2.4.4_A9.js", "info": " |The Object.prototype.valueOf.length property does not have the attribute\nDontDelete\n", "version": 5, "esid": " 15.2.4.4_A9", "description": " >Checknig if deleting of the Object.prototype.valueOf.length\nproperty fails\n"}, {"path": "./test262-main/test/built-ins/Object/prototype/valueOf/name.js", "version": 6, "esid": " 19.1.3.7", "description": " >Object.prototype.valueOf.name is \"valueOf\".\n", "info": " |Object.prototype.valueOf ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Object/seal/length.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " Object.seal '`length` property'", "info": " |ECMAScript Standard Built-in Objects\n\nEvery built-in function object, including constructors, has a \"length\" property whose value is an integer. Unless otherwise specified, this value is equal to the number of required parameters shown in the subclause headings for the function description. Optional parameters and rest parameters are not included in the parameter count.\n\nUnless otherwise specified, the \"length\" property of a built-in function object has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Object/seal/name.js", "esid": " sec-object.seal", "description": " >Object.seal.name is \"seal\".\n", "info": " |Object.seal ( O )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Object/seal/seal-boolean-literal.js", "esid": " sec-object.seal", "description": " >Object.seal boolean literal\n", "info": " |If Type(O) is not Object, return O.\nLet status be ? SetIntegrityLevel(O, sealed).\n\nSetIntegrityLevel ( O, level )\n\nAssert: Type(O) is Object.\nAssert: level is either sealed or frozen.\nLet status be ? O.[[PreventExtensions]]().\nIf status is false, return false.\nLet keys be ? O.[[OwnPropertyKeys]]().\nIf level is sealed, then\nFor each element k of keys, do\nPerform ? DefinePropertyOrThrow(O, k, PropertyDescriptor { [[Configurable]]: false }).\nElse,\nAssert: level is frozen.\nFor each element k of keys, do\nLet currentDesc be ? O.[[GetOwnProperty]](k).\nIf currentDesc is not undefined, then\nIf IsAccessorDescriptor(currentDesc) is true, then\nLet desc be the PropertyDescriptor { [[Configurable]]: false }.\nElse,\nLet desc be the PropertyDescriptor { [[Configurable]]: false, [[Writable]]: false }.\nPerform ? DefinePropertyOrThrow(O, k, desc).\nReturn true.\n\n"}, {"path": "./test262-main/test/built-ins/Object/seal/seal-generatorfunction.js", "esid": " sec-object.seal", "description": " >Object.seal GeneratorFunction\n", "info": " |If Type(O) is not Object, return O.\nLet status be ? SetIntegrityLevel(O, sealed).\n\nSetIntegrityLevel ( O, level )\n\nAssert: Type(O) is Object.\nAssert: level is either sealed or frozen.\nLet status be ? O.[[PreventExtensions]]().\nIf status is false, return false.\nLet keys be ? O.[[OwnPropertyKeys]]().\nIf level is sealed, then\nFor each element k of keys, do\nPerform ? DefinePropertyOrThrow(O, k, PropertyDescriptor { [[Configurable]]: false }).\nElse,\nAssert: level is frozen.\nFor each element k of keys, do\nLet currentDesc be ? O.[[GetOwnProperty]](k).\nIf currentDesc is not undefined, then\nIf IsAccessorDescriptor(currentDesc) is true, then\nLet desc be the PropertyDescriptor { [[Configurable]]: false }.\nElse,\nLet desc be the PropertyDescriptor { [[Configurable]]: false, [[Writable]]: false }.\nPerform ? DefinePropertyOrThrow(O, k, desc).\nReturn true.\n\n"}, {"path": "./test262-main/test/built-ins/Object/seal/seal-infinity.js", "esid": " sec-object.seal", "description": " >Object.seal Infinity\n", "info": " |If Type(O) is not Object, return O.\nLet status be ? SetIntegrityLevel(O, sealed).\n\nSetIntegrityLevel ( O, level )\n\nAssert: Type(O) is Object.\nAssert: level is either sealed or frozen.\nLet status be ? O.[[PreventExtensions]]().\nIf status is false, return false.\nLet keys be ? O.[[OwnPropertyKeys]]().\nIf level is sealed, then\nFor each element k of keys, do\nPerform ? DefinePropertyOrThrow(O, k, PropertyDescriptor { [[Configurable]]: false }).\nElse,\nAssert: level is frozen.\nFor each element k of keys, do\nLet currentDesc be ? O.[[GetOwnProperty]](k).\nIf currentDesc is not undefined, then\nIf IsAccessorDescriptor(currentDesc) is true, then\nLet desc be the PropertyDescriptor { [[Configurable]]: false }.\nElse,\nLet desc be the PropertyDescriptor { [[Configurable]]: false, [[Writable]]: false }.\nPerform ? DefinePropertyOrThrow(O, k, desc).\nReturn true.\n\n"}, {"path": "./test262-main/test/built-ins/Object/seal/seal-nan.js", "esid": " sec-object.seal", "description": " >Object.seal NaN\n", "info": " |If Type(O) is not Object, return O.\nLet status be ? SetIntegrityLevel(O, sealed).\n\nSetIntegrityLevel ( O, level )\n\nAssert: Type(O) is Object.\nAssert: level is either sealed or frozen.\nLet status be ? O.[[PreventExtensions]]().\nIf status is false, return false.\nLet keys be ? O.[[OwnPropertyKeys]]().\nIf level is sealed, then\nFor each element k of keys, do\nPerform ? DefinePropertyOrThrow(O, k, PropertyDescriptor { [[Configurable]]: false }).\nElse,\nAssert: level is frozen.\nFor each element k of keys, do\nLet currentDesc be ? O.[[GetOwnProperty]](k).\nIf currentDesc is not undefined, then\nIf IsAccessorDescriptor(currentDesc) is true, then\nLet desc be the PropertyDescriptor { [[Configurable]]: false }.\nElse,\nLet desc be the PropertyDescriptor { [[Configurable]]: false, [[Writable]]: false }.\nPerform ? DefinePropertyOrThrow(O, k, desc).\nReturn true.\n\n"}, {"path": "./test262-main/test/built-ins/Object/seal/seal-null.js", "esid": " sec-object.seal", "description": " >Object.seal null\n", "info": " |If Type(O) is not Object, return O.\nLet status be ? SetIntegrityLevel(O, sealed).\n\nSetIntegrityLevel ( O, level )\n\nAssert: Type(O) is Object.\nAssert: level is either sealed or frozen.\nLet status be ? O.[[PreventExtensions]]().\nIf status is false, return false.\nLet keys be ? O.[[OwnPropertyKeys]]().\nIf level is sealed, then\nFor each element k of keys, do\nPerform ? DefinePropertyOrThrow(O, k, PropertyDescriptor { [[Configurable]]: false }).\nElse,\nAssert: level is frozen.\nFor each element k of keys, do\nLet currentDesc be ? O.[[GetOwnProperty]](k).\nIf currentDesc is not undefined, then\nIf IsAccessorDescriptor(currentDesc) is true, then\nLet desc be the PropertyDescriptor { [[Configurable]]: false }.\nElse,\nLet desc be the PropertyDescriptor { [[Configurable]]: false, [[Writable]]: false }.\nPerform ? DefinePropertyOrThrow(O, k, desc).\nReturn true.\n\n"}, {"path": "./test262-main/test/built-ins/Object/seal/seal-symbol.js", "esid": " sec-object.seal", "description": " >Object.seal Symbol\n", "info": " |If Type(O) is not Object, return O.\nLet status be ? SetIntegrityLevel(O, sealed).\n\nSetIntegrityLevel ( O, level )\n\nAssert: Type(O) is Object.\nAssert: level is either sealed or frozen.\nLet status be ? O.[[PreventExtensions]]().\nIf status is false, return false.\nLet keys be ? O.[[OwnPropertyKeys]]().\nIf level is sealed, then\nFor each element k of keys, do\nPerform ? DefinePropertyOrThrow(O, k, PropertyDescriptor { [[Configurable]]: false }).\nElse,\nAssert: level is frozen.\nFor each element k of keys, do\nLet currentDesc be ? O.[[GetOwnProperty]](k).\nIf currentDesc is not undefined, then\nIf IsAccessorDescriptor(currentDesc) is true, then\nLet desc be the PropertyDescriptor { [[Configurable]]: false }.\nElse,\nLet desc be the PropertyDescriptor { [[Configurable]]: false, [[Writable]]: false }.\nPerform ? DefinePropertyOrThrow(O, k, desc).\nReturn true.\n\n"}, {"path": "./test262-main/test/built-ins/Object/seal/seal-undefined.js", "esid": " sec-object.seal", "description": " >Object.seal undefined\n", "info": " |If Type(O) is not Object, return O.\nLet status be ? SetIntegrityLevel(O, sealed).\n\nSetIntegrityLevel ( O, level )\n\nAssert: Type(O) is Object.\nAssert: level is either sealed or frozen.\nLet status be ? O.[[PreventExtensions]]().\nIf status is false, return false.\nLet keys be ? O.[[OwnPropertyKeys]]().\nIf level is sealed, then\nFor each element k of keys, do\nPerform ? DefinePropertyOrThrow(O, k, PropertyDescriptor { [[Configurable]]: false }).\nElse,\nAssert: level is frozen.\nFor each element k of keys, do\nLet currentDesc be ? O.[[GetOwnProperty]](k).\nIf currentDesc is not undefined, then\nIf IsAccessorDescriptor(currentDesc) is true, then\nLet desc be the PropertyDescriptor { [[Configurable]]: false }.\nElse,\nLet desc be the PropertyDescriptor { [[Configurable]]: false, [[Writable]]: false }.\nPerform ? DefinePropertyOrThrow(O, k, desc).\nReturn true.\n\n"}, {"path": "./test262-main/test/built-ins/Object/seal/seal-weakset.js", "esid": " sec-object.seal", "description": " >Object.seal WeakSet\n", "info": " |If Type(O) is not Object, return O.\nLet status be ? SetIntegrityLevel(O, sealed).\n\nSetIntegrityLevel ( O, level )\n\nAssert: Type(O) is Object.\nAssert: level is either sealed or frozen.\nLet status be ? O.[[PreventExtensions]]().\nIf status is false, return false.\nLet keys be ? O.[[OwnPropertyKeys]]().\nIf level is sealed, then\nFor each element k of keys, do\nPerform ? DefinePropertyOrThrow(O, k, PropertyDescriptor { [[Configurable]]: false }).\nElse,\nAssert: level is frozen.\nFor each element k of keys, do\nLet currentDesc be ? O.[[GetOwnProperty]](k).\nIf currentDesc is not undefined, then\nIf IsAccessorDescriptor(currentDesc) is true, then\nLet desc be the PropertyDescriptor { [[Configurable]]: false }.\nElse,\nLet desc be the PropertyDescriptor { [[Configurable]]: false, [[Writable]]: false }.\nPerform ? DefinePropertyOrThrow(O, k, desc).\nReturn true.\n\n"}, {"path": "./test262-main/test/built-ins/Object/seal/symbol-object-contains-symbol-properties-non-strict.js", "esid": " sec-object.seal", "description": " >Object.seal(obj) where obj contains symbol properties.\n", "flags": ["noStrict"], "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Object/seal/symbol-object-contains-symbol-properties-strict.js", "esid": " sec-object.seal", "description": " >Object.seal(obj) where obj contains symbol properties.\n", "flags": ["onlyStrict"], "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Object/seal/throws-when-false.js", "esid": " sec-object.seal", "description": " >Object.seal throws if SetIntegrityLevel(O, sealed) returns false.\n", "info": " |Object.seal ( O )\n...\n2. Let status be ? SetIntegrityLevel(O, sealed).\n3. If status is false, throw a TypeError exception.\n\nSetIntegrityLevel ( O, level )\n...\n3. Let status be ? O.[[PreventExtensions]]().\n4. If status is false, return false.\n"}, {"path": "./test262-main/test/built-ins/Object/setPrototypeOf/length.js", "version": 6, "esid": " 19.1.2.18", "description": " Object.setPrototypeOf '`length` property'", "info": " |ES6 Section 17:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this value\nis equal to the largest number of named arguments shown in the subclause\nheadings for the function description, including optional parameters.\n\n[...]\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Object/setPrototypeOf/name.js", "version": 6, "esid": " 19.1.2.18", "description": " Object.setPrototypeOf '`name` property'", "info": " |ES6 Section 17:\n\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value is a\nString. Unless otherwise specified, this value is the name that is given to\nthe function in this specification.\n\n[...]\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Object/setPrototypeOf/o-not-obj.js", "version": 6, "esid": " 19.1.2.18", "description": " Object.setPrototypeOf invoked with a non-object value", "info": " |1. Let O be RequireObjectCoercible(O).\n2. ReturnIfAbrupt(O).\n3. If Type(proto) is neither Object nor Null, throw a TypeError exception.\n4. If Type(O) is not Object, return O.\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Object/setPrototypeOf/property-descriptor.js", "version": 6, "esid": " 19.1.2.18", "description": " Object.setPrototypeOf property descriptor", "info": " |Every other data property described in clauses 18 through 26 and in Annex\nB.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false,\n[[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Object/setPrototypeOf/proto-not-obj.js", "version": 6, "esid": " 19.1.2.18", "description": " Object.setPrototypeOf invoked with an invalid prototype value", "info": " |1. Let O be RequireObjectCoercible(O).\n2. ReturnIfAbrupt(O).\n3. If Type(proto) is neither Object nor Null, throw a TypeError exception.\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Object/setPrototypeOf/success.js", "version": 6, "esid": " 19.1.2.18", "description": " Object.setPrototypeOf invoked with a non-extensible object", "info": " |1. Let O be RequireObjectCoercible(O).\n2. ReturnIfAbrupt(O).\n3. If Type(proto) is neither Object nor Null, throw a TypeError exception.\n4. If Type(O) is not Object, return O.\n5. Let status be O.[[SetPrototypeOf]](proto).\n6. ReturnIfAbrupt(status).\n7. If status is false, throw a TypeError exception.\n8. Return O.\n"}, {"path": "./test262-main/test/built-ins/Object/symbol_object-returns-fresh-symbol.js", "version": 6, "esid": " 19.1.1.1_S3", "description": " >Object(sym) returns a fresh Symbol object\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Proxy/apply/null-handler.js", "esid": " sec-proxy-object-internal-methods-and-internal-slots-call-thisargument-argumentslist", "description": " >[[Call]] (thisArgument, argumentsList)\n\n2. If handler is null, throw a TypeError exception.\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Proxy/construct/null-handler.js", "esid": " sec-proxy-object-internal-methods-and-internal-slots-construct-argumentslist-newtarget", "description": " >[[Construct]] ( argumentsList, newTarget)\n\n2. If handler is null, throw a TypeError exception.\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Proxy/construct/return-not-object-throws-boolean.js", "esid": " sec-proxy-object-internal-methods-and-internal-slots-construct-argumentslist-newtarget", "description": " >Throws a TypeError if trap result is not an Object: Boolean\n", "info": " |[[Construct]] ( argumentsList, newTarget)\n\n11. If Type(newObj) is not Object, throw a TypeError exception.\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Proxy/construct/return-not-object-throws-null.js", "esid": " sec-proxy-object-internal-methods-and-internal-slots-construct-argumentslist-newtarget", "description": " >Throws a TypeError if trap result is not an Object: null\n", "info": " |[[Construct]] (argumentsList, newTarget)\n\n[...]\n11. If Type(newObj) is not Object, throw a TypeError exception.\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Proxy/construct/return-not-object-throws-number.js", "esid": " sec-proxy-object-internal-methods-and-internal-slots-construct-argumentslist-newtarget", "description": " >Throws a TypeError if trap result is not an Object: Number\n", "info": " |[[Construct]] ( argumentsList, newTarget)\n\n11. If Type(newObj) is not Object, throw a TypeError exception.\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Proxy/construct/return-not-object-throws-string.js", "esid": " sec-proxy-object-internal-methods-and-internal-slots-construct-argumentslist-newtarget", "description": " >Throws a TypeError if trap result is not an Object: String\n", "info": " |[[Construct]] ( argumentsList, newTarget)\n\n11. If Type(newObj) is not Object, throw a TypeError exception.\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Proxy/construct/return-not-object-throws-symbol.js", "esid": " sec-proxy-object-internal-methods-and-internal-slots-construct-argumentslist-newtarget", "description": " >Throws a TypeError if trap result is not an Object: Symbol\n", "info": " |[[Construct]] ( argumentsList, newTarget)\n\n11. If Type(newObj) is not Object, throw a TypeError exception.\n", "features": ["Proxy", "Symbol"]}, {"path": "./test262-main/test/built-ins/Proxy/construct/return-not-object-throws-undefined.js", "esid": " sec-proxy-object-internal-methods-and-internal-slots-construct-argumentslist-newtarget", "description": " >Throws a TypeError if trap result is not an Object: undefined\n", "info": " |[[Construct]] ( argumentsList, newTarget)\n\n11. If Type(newObj) is not Object, throw a TypeError exception.\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Proxy/constructor.js", "version": 6, "esid": " 26.2.1", "description": " >The Proxy constructor is the %Proxy% intrinsic object and the\ninitial value of the Proxy property of the global object.\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Proxy/create-handler-is-revoked-proxy.js", "esid": " sec-proxycreate", "description": " >A Proxy is created with its [[ProxyHandler]] as revoked Proxy.\n", "info": " |ProxyCreate ( target, handler )\n\n[...]\n3. Let P be ! MakeBasicObject(\u00ab [[ProxyHandler]], [[ProxyTarget]] \u00bb).\n[...]\n7. Set P.[[ProxyHandler]] to handler.\n8. Return P.\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Proxy/create-handler-not-object-throw-symbol.js", "version": 6, "esid": " 9.5.15", "description": " >Proxy ( target, handler )\n...\n3. If Type(handler) is not Object, throw a TypeError exception.\n...\n", "features": ["Proxy", "Symbol"]}, {"path": "./test262-main/test/built-ins/Proxy/create-target-is-revoked-function-proxy.js", "esid": " sec-proxycreate", "description": " >A Proxy is created with its [[ProxyTarget]] as revoked function Proxy.\n", "info": " |ProxyCreate ( target, handler )\n\n[...]\n3. Let P be ! MakeBasicObject(\u00ab [[ProxyHandler]], [[ProxyTarget]] \u00bb).\n[...]\n6. Set P.[[ProxyTarget]] to target.\n[...]\n8. Return P.\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Proxy/create-target-is-revoked-proxy.js", "esid": " sec-proxycreate", "description": " >A Proxy is created with its [[ProxyTarget]] as revoked Proxy.\n", "info": " |ProxyCreate ( target, handler )\n\n[...]\n3. Let P be ! MakeBasicObject(\u00ab [[ProxyHandler]], [[ProxyTarget]] \u00bb).\n[...]\n6. Set P.[[ProxyTarget]] to target.\n[...]\n8. Return P.\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Proxy/create-target-not-object-throw-symbol.js", "version": 6, "esid": " 9.5.15", "description": " >Proxy ( target, handler )\n...\n1. If Type(target) is not Object, throw a TypeError exception.\n...\n", "features": ["Proxy", "Symbol"]}, {"path": "./test262-main/test/built-ins/Proxy/defineProperty/null-handler.js", "version": 6, "esid": " 9.5.6", "description": " >Throws a TypeError exception if handler is null.\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Proxy/defineProperty/targetdesc-configurable-desc-not-configurable.js", "version": 6, "esid": " 9.5.6", "description": " >Throw a TypeError exception if Desc is not configurable and target property\ndescriptor is configurable and trap result is true.\n", "info": " |[[DefineOwnProperty]] (P, Desc)\n\n...\n20. Else targetDesc is not undefined,\nb. If settingConfigFalse is true and targetDesc.[[Configurable]] is\ntrue, throw a TypeError exception.\n...\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Proxy/deleteProperty/null-handler.js", "version": 6, "esid": " 9.5.10", "description": " >[[Delete]] (P)\n\n3. If handler is null, throw a TypeError exception.\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Proxy/function-prototype.js", "version": 6, "esid": " 26.2.2", "description": " >The value of the [[Prototype]] internal slot of the Proxy\nconstructor is the intrinsic object %FunctionPrototype% (19.2.3).\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Proxy/get/null-handler.js", "version": 6, "esid": " 9.5.8", "description": " >[[Get]] (P, Receiver)\n\n2. If handler is null, throw a TypeError exception.\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Proxy/get/return-trap-result-same-value-configurable-false-writable-false.js", "version": 6, "esid": " 9.5.8", "description": " >Proxy must report the same value for a non-writable, non-configurable\nproperty.\n", "info": " |[[Get]] (P, Receiver)\n\n13. If targetDesc is not undefined, then\na. If IsDataDescriptor(targetDesc) and targetDesc.[[Configurable]] is\nfalse and targetDesc.[[Writable]] is false, then\ni. If SameValue(trapResult, targetDesc.[[Value]]) is false, throw a\nTypeError exception.\n...\n14. Return trapResult.\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Proxy/get/trap-is-missing-target-is-proxy.js", "esid": " sec-proxy-object-internal-methods-and-internal-slots-get-p-receiver", "description": " >If \"get\" trap is null or undefined, [[Get]] call is properly\nforwarded to [[ProxyTarget]] (which is also a Proxy object).\n", "info": " |[[Get]] ( P, Receiver )\n\n[...]\n5. Let target be O.[[ProxyTarget]].\n6. Let trap be ? GetMethod(handler, \"get\").\n7. If trap is undefined, then\na. Return ? target.[[Get]](P, Receiver).\n", "features": ["Proxy", "Symbol.match"]}, {"path": "./test262-main/test/built-ins/Proxy/getOwnPropertyDescriptor/null-handler.js", "version": 6, "esid": " 9.5.5", "description": " >Throws a TypeError exception if handler is null.\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Proxy/getOwnPropertyDescriptor/result-type-is-not-object-nor-undefined.js", "version": 6, "esid": " 9.5.5", "description": " >Throws a TypeError exception if trap result is neither Object nor Undefined\n", "info": " |[[GetOwnProperty]] (P)\n\n...\n11. If Type(trapResultObj) is neither Object nor Undefined, throw a\nTypeError exception.\n...\n", "features": ["Proxy", "Symbol"]}, {"path": "./test262-main/test/built-ins/Proxy/getOwnPropertyDescriptor/resultdesc-is-invalid-descriptor.js", "version": 6, "esid": " 9.5.5", "description": " >Throws a TypeError exception if trap result and target property descriptors\nare not compatible.\n", "info": " |[[GetOwnProperty]] (P)\n\n...\n20. Let valid be IsCompatiblePropertyDescriptor (extensibleTarget,\nresultDesc, targetDesc).\n21. If valid is false, throw a TypeError exception.\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Proxy/getOwnPropertyDescriptor/resultdesc-is-not-configurable-targetdesc-is-configurable.js", "version": 6, "esid": " 9.5.5", "description": " >Throws a TypeError exception if trap result is not configurable but target\nproperty descriptor is configurable.\n", "info": " |[[GetOwnProperty]] (P)\n\n...\n22. If resultDesc.[[Configurable]] is false, then\na. If targetDesc is undefined or targetDesc.[[Configurable]] is true,\nthen\ni. Throw a TypeError exception.\n...\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Proxy/getPrototypeOf/null-handler.js", "version": 6, "esid": " 9.5.1", "description": " >Throws a TypeError exception if handler is null.\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Proxy/has/call-in-prototype-index.js", "esid": " sec-proxy-object-internal-methods-and-internal-slots-hasproperty-p", "description": " >Ordinary [[HasProperty]] forwards call to Proxy \"has\" trap with correct arguments.\n(integer index property name)\n", "info": " |OrdinaryHasProperty ( O, P )\n\n...\n4. Let parent be ? O.[[GetPrototypeOf]]().\n5. If parent is not null, then\na. Return ? parent.[[HasProperty]](P).\n\n[[HasProperty]] ( P )\n\n...\n8. Let booleanTrapResult be ! ToBoolean(? Call(trap, handler, \u00ab target, P \u00bb)).\n...\n10. Return booleanTrapResult.\n", "includes": ["proxyTrapsHelper.js"], "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Proxy/has/null-handler-using-with.js", "version": 6, "esid": " 9.5.7", "description": " >Throws a TypeError exception if handler is null.\n", "flags": ["noStrict"], "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Proxy/has/null-handler.js", "version": 6, "esid": " 9.5.7", "description": " >Throws a TypeError exception if handler is null.\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Proxy/isExtensible/call-parameters.js", "version": 6, "esid": " 9.5.3", "description": " >The trap is called with handler on its context and the target object as the\nfirst parabeter\n", "info": " |[[IsExtensible]] ( )\n\n...\n8. Let booleanTrapResult be ToBoolean(Call(trap, handler, \u00abtarget\u00bb)).\n...\n\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Proxy/isExtensible/null-handler.js", "version": 6, "esid": " 9.5.3", "description": " >Throws a TypeError exception if handler is null\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Proxy/isExtensible/return-is-abrupt.js", "version": 6, "esid": " 9.5.3", "description": " >Trap returns abrupt.\n", "info": " |[[IsExtensible]] ( )\n\n...\n8. Let booleanTrapResult be ToBoolean(Call(trap, handler, \u00abtarget\u00bb)).\n9. ReturnIfAbrupt(booleanTrapResult).\n...\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Proxy/isExtensible/return-is-different-from-target.js", "version": 6, "esid": " 9.5.3", "description": " >Throws a TypeError exception if boolean trap result is not the same as\ntarget.[[IsExtensible]]() result\n", "info": " |[[IsExtensible]] ( )\n\n...\n12. If SameValue(booleanTrapResult, targetResult) is false, throw a\nTypeError exception.\n...\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Proxy/isExtensible/trap-is-not-callable.js", "version": 6, "esid": " 9.5.3", "description": " >Throws a TypeError exception if trap is not callable.\n", "info": " |[[IsExtensible]] ( )\n\n...\n1. Let handler be the value of the [[ProxyHandler]] internal slot of O.\n...\n5. Let trap be GetMethod(handler, \"isExtensible\").\n...\n7.3.9 GetMethod (O, P)\n...\n2. Let func be GetV(O, P).\n5. If IsCallable(func) is false, throw a TypeError exception.\n...\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Proxy/length.js", "version": 6, "esid": " 26.2.2", "description": " >Properties of the Proxy Constructor\n\nBesides the length property (whose value is 2)\n\n", "includes": ["propertyHelper.js"], "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Proxy/name.js", "version": 6, "esid": " 26.2.1.1", "description": " >Proxy ( target, handler )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"], "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Proxy/ownKeys/call-parameters-object-getownpropertynames.js", "esid": " sec-proxy-object-internal-methods-and-internal-slots-ownpropertykeys", "description": " >[[OwnPropertyKeys]] ( )\n\n7. Let trapResultArray be ? Call(trap, handler, \u00ab target \u00bb).\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Proxy/ownKeys/call-parameters-object-getownpropertysymbols.js", "esid": " sec-proxy-object-internal-methods-and-internal-slots-ownpropertykeys", "description": " >[[OwnPropertyKeys]] ( )\n\n7. Let trapResultArray be ? Call(trap, handler, \u00ab target \u00bb).\n\n", "features": ["Proxy", "Symbol"]}, {"path": "./test262-main/test/built-ins/Proxy/ownKeys/call-parameters-object-keys.js", "esid": " sec-proxy-object-internal-methods-and-internal-slots-ownpropertykeys", "description": " >[[OwnPropertyKeys]] ( )\n\n7. Let trapResultArray be ? Call(trap, handler, \u00ab target \u00bb).\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Proxy/ownKeys/extensible-return-trap-result-absent-not-configurable-keys.js", "esid": " sec-proxy-object-internal-methods-and-internal-slots-ownpropertykeys", "description": " >If target is extensible, return the non-falsy trap result if target doesn't\ncontain any non-configurable keys.\n", "info": " |[[OwnPropertyKeys]] ( )\n\n...\n15. If extensibleTarget is true and targetNonconfigurableKeys is empty, then\na. Return trapResult.\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Proxy/ownKeys/extensible-return-trap-result.js", "esid": " sec-proxy-object-internal-methods-and-internal-slots-ownpropertykeys", "description": " >If target is extensible, return the non-falsy trap result if it contains all\nof target's non-configurable keys.\n", "info": " |[[OwnPropertyKeys]] ( )\n\n...\n18. If extensibleTarget is true, return trapResult.\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Proxy/ownKeys/not-extensible-missing-keys-throws.js", "esid": " sec-proxy-object-internal-methods-and-internal-slots-ownpropertykeys", "description": " >If target is not extensible, the result must contain all the keys of the own\nproperties of the target object.\n", "info": " |[[OwnPropertyKeys]] ( )\n\n...\n19. For each key that is an element of targetConfigurableKeys, do\na. If key is not an element of uncheckedResultKeys, throw a TypeError\nexception.\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Proxy/ownKeys/not-extensible-new-keys-throws.js", "esid": " sec-proxy-object-internal-methods-and-internal-slots-ownpropertykeys", "description": " >If target is not extensible, the result can't contain keys names not\ncontained in the target object.\n", "info": " |[[OwnPropertyKeys]] ( )\n\n...\n20. If uncheckedResultKeys is not empty, throw a TypeError exception.\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Proxy/ownKeys/null-handler.js", "esid": " sec-proxy-object-internal-methods-and-internal-slots-ownpropertykeys", "description": " >[[OwnPropertyKeys]] ( )\n\n2. If handler is null, throw a TypeError exception.\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Proxy/ownKeys/return-all-non-configurable-keys.js", "esid": " sec-proxy-object-internal-methods-and-internal-slots-ownpropertykeys", "description": " >The result List must contain the keys of all non-configurable own properties\nof the target object.\n", "info": " |[[OwnPropertyKeys]] ( )\n\n...\n17. For each key that is an element of targetNonconfigurableKeys, do\na. If key is not an element of uncheckedResultKeys, throw a TypeError\nexception.\n\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Proxy/ownKeys/return-duplicate-entries-throws.js", "esid": " sec-proxy-object-internal-methods-and-internal-slots-ownpropertykeys", "description": " >The returned list must not contain any duplicate entries.\n", "info": " |[[OwnPropertyKeys]] ( )\n\n...\n9. If trapResult contains any duplicate entries, throw a TypeError exception.\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Proxy/ownKeys/return-duplicate-symbol-entries-throws.js", "esid": " sec-proxy-object-internal-methods-and-internal-slots-ownpropertykeys", "description": " >The returned list must not contain any duplicate entries.\n", "info": " |[[OwnPropertyKeys]] ( )\n\n...\n9. If trapResult contains any duplicate entries, throw a TypeError exception.\n", "features": ["Proxy", "Symbol"]}, {"path": "./test262-main/test/built-ins/Proxy/ownKeys/return-is-abrupt.js", "esid": " sec-proxy-object-internal-methods-and-internal-slots-ownpropertykeys", "description": " >Trap returns abrupt.\n", "info": " |[[OwnPropertyKeys]] ( )\n\n...\n7. Let trapResultArray be ? Call(trap, handler, \u00ab target \u00bb).\n8. Let trapResult be ? CreateListFromArrayLike(trapResultArray, \u00ab String, Symbol \u00bb).\n\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Proxy/ownKeys/return-not-list-object-throws.js", "esid": " sec-proxy-object-internal-methods-and-internal-slots-ownpropertykeys", "description": " >If return is not a list object, throw a TypeError exception\n", "info": " |[[OwnPropertyKeys]] ( )\n\n7. Let trapResultArray be ? Call(trap, handler, \u00ab target \u00bb).\n8. Let trapResult be ? CreateListFromArrayLike(trapResultArray, \u00ab String,\nSymbol \u00bb).\n...\n\n#sec-createlistfromarraylike\n7.3.17 CreateListFromArrayLike (obj [, elementTypes] )\n\n2. If Type(obj) is not Object, throw a TypeError exception.\n\n", "features": ["Proxy", "Symbol"]}, {"path": "./test262-main/test/built-ins/Proxy/ownKeys/trap-is-not-callable.js", "esid": " sec-proxy-object-internal-methods-and-internal-slots-ownpropertykeys", "description": " >Trap is not callable.\n", "info": " |[[OwnPropertyKeys]] ( )\n\n5. Let trap be ? GetMethod(handler, \"ownKeys\").\n...\n\n#sec-getmethod\n7.3.9 GetMethod (O, P)\n\n4. If IsCallable(func) is false, throw a TypeError exception.\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Proxy/preventExtensions/null-handler.js", "version": 6, "esid": " 9.5.4", "description": " >Throws a TypeError exception if handler is null.\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Proxy/property-order.js", "esid": " sec-createbuiltinfunction", "description": " Proxy constructor property order", "info": " |Set order: \"length\", \"name\", ...\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Proxy/revocable/builtin.js", "esid": " sec-proxy.revocable", "description": " >Requirements for built-in functions, defined in introduction of chapter 17,\nare satisfied.\n", "features": ["Proxy", "Reflect.construct"]}, {"path": "./test262-main/test/built-ins/Proxy/revocable/handler-is-revoked-proxy.js", "esid": " sec-proxycreate", "description": " >A Proxy is created with its [[ProxyHandler]] as revoked Proxy.\n", "info": " |ProxyCreate ( target, handler )\n\n[...]\n3. Let P be ! MakeBasicObject(\u00ab [[ProxyHandler]], [[ProxyTarget]] \u00bb).\n[...]\n7. Set P.[[ProxyHandler]] to handler.\n8. Return P.\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Proxy/revocable/length.js", "version": 6, "esid": " 26.2.2.1", "description": " >Proxy.revocable.length is 2.\n", "info": " |Proxy.revocable ( target, handler )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Proxy/revocable/name.js", "version": 6, "esid": " 26.2.2.1", "description": " >Proxy.revocable.name is \"revocable\".\n", "info": " |Proxy.revocable ( target, handler )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Proxy/revocable/proxy.js", "version": 6, "esid": " 26.2.2.1", "description": " >The returned object has a proxy property which is the created Proxy object\nbuilt with the given target and handler given parameters.\n", "info": " |Proxy.revocable ( target, handler )\n\n6. Perform CreateDataProperty(result, \"proxy\", p).\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Proxy/revocable/revocation-function-extensible.js", "version": 6, "esid": " 26.2.2.1.1", "description": " The [[Extensible]] slot of Proxy Revocation functions", "info": " |17 ECMAScript Standard Built-in Objects:\nUnless specified otherwise, the [[Extensible]] internal slot\nof a built-in object initially has the value true.\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Proxy/revocable/revocation-function-length.js", "version": 6, "esid": " 26.2.2.1.1", "description": " The `length` property of Proxy Revocation functions", "info": " |The length property of a Proxy revocation function is 0.\n\n17 ECMAScript Standard Built-in Objects:\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Proxy/revocable/revocation-function-not-a-constructor.js", "esid": " sec-proxy.revocable", "description": " Proxy Revocation functions are not constructors", "info": " |17 ECMAScript Standard Built-in Objects:\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified\nin the description of a particular function.\n", "includes": ["isConstructor.js"], "features": ["Proxy", "Reflect.construct", "arrow-function"]}, {"path": "./test262-main/test/built-ins/Proxy/revocable/revocation-function-property-order.js", "esid": " sec-createbuiltinfunction", "description": " Proxy revocation function property order", "info": " |Set order: \"length\", \"name\"\n"}, {"path": "./test262-main/test/built-ins/Proxy/revocable/revocation-function-prototype.js", "version": 6, "esid": " 26.2.2.1.1", "description": " The [[Prototype]] of Proxy Revocation functions", "info": " |17 ECMAScript Standard Built-in Objects:\nUnless otherwise specified every built-in function and every built-in\nconstructor has the Function prototype object, which is the initial\nvalue of the expression Function.prototype (19.2.3), as the value of\nits [[Prototype]] internal slot.\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Proxy/revocable/revoke-consecutive-call-returns-undefined.js", "version": 6, "esid": " 26.2.2.1.1", "description": " >Calling the revoked function again will return undefined\n", "info": " |Proxy Revocation Functions\n\n...\n1. Let p be the value of F\u2019s [[RevocableProxy]] internal slot.\n2. If p is null, return undefined.\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Proxy/revocable/revoke-returns-undefined.js", "version": 6, "esid": " 26.2.2.1.1", "description": " >Calling the revoked function returns undefined\n", "info": " |Proxy Revocation Functions\n\n...\n7. Return undefined.\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Proxy/revocable/revoke.js", "version": 6, "esid": " 26.2.2.1", "description": " >The returned object has a `revoked` property which is a function\n", "info": " |Proxy.revocable ( target, handler )\n\n7. Perform CreateDataProperty(result, \"revoke\", revoker).\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Proxy/revocable/target-is-revoked-function-proxy.js", "esid": " sec-proxycreate", "description": " >A Proxy is created with its [[ProxyTarget]] as revoked function Proxy.\n", "info": " |ProxyCreate ( target, handler )\n\n[...]\n3. Let P be ! MakeBasicObject(\u00ab [[ProxyHandler]], [[ProxyTarget]] \u00bb).\n[...]\n6. Set P.[[ProxyTarget]] to target.\n[...]\n8. Return P.\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Proxy/revocable/target-is-revoked-proxy.js", "esid": " sec-proxycreate", "description": " >A Proxy is created with its [[ProxyTarget]] as revoked Proxy.\n", "info": " |ProxyCreate ( target, handler )\n\n[...]\n3. Let P be ! MakeBasicObject(\u00ab [[ProxyHandler]], [[ProxyTarget]] \u00bb).\n[...]\n6. Set P.[[ProxyTarget]] to target.\n[...]\n8. Return P.\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Proxy/set/call-parameters-prototype-dunder-proto.js", "esid": " sec-proxy-object-internal-methods-and-internal-slots-set-p-v-receiver", "description": " >Ordinary [[Set]] forwards call to Proxy \"set\" trap with correct arguments.\nProperty name is \"__proto__\".\n", "info": " |OrdinarySet ( O, P, V, Receiver )\n\n...\n3. Return OrdinarySetWithOwnDescriptor(O, P, V, Receiver, ownDesc).\n\nOrdinarySetWithOwnDescriptor ( O, P, V, Receiver, ownDesc )\n\n...\n2. If ownDesc is undefined, then\na. Let parent be ? O.[[GetPrototypeOf]]().\nb. If parent is not null, then\ni. Return ? parent.[[Set]](P, V, Receiver).\n\n[[Set]] ( P, V, Receiver )\n\n...\n8. Let booleanTrapResult be ! ToBoolean(? Call(trap, handler, \u00ab target, P, V, Receiver \u00bb)).\n...\n12. Return true.\n", "includes": ["proxyTrapsHelper.js"], "features": ["Proxy", "__proto__"]}, {"path": "./test262-main/test/built-ins/Proxy/set/call-parameters-prototype-index.js", "esid": " sec-proxy-object-internal-methods-and-internal-slots-set-p-v-receiver", "description": " >Ordinary [[Set]] forwards call to Proxy \"set\" trap with correct arguments.\n(integer index property name)\n", "info": " |OrdinarySet ( O, P, V, Receiver )\n\n...\n3. Return OrdinarySetWithOwnDescriptor(O, P, V, Receiver, ownDesc).\n\nOrdinarySetWithOwnDescriptor ( O, P, V, Receiver, ownDesc )\n\n...\n2. If ownDesc is undefined, then\na. Let parent be ? O.[[GetPrototypeOf]]().\nb. If parent is not null, then\ni. Return ? parent.[[Set]](P, V, Receiver).\n\n[[Set]] ( P, V, Receiver )\n\n...\n8. Let booleanTrapResult be ! ToBoolean(? Call(trap, handler, \u00ab target, P, V, Receiver \u00bb)).\n...\n12. Return true.\n", "includes": ["proxyTrapsHelper.js"], "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Proxy/set/call-parameters-prototype.js", "esid": " sec-proxy-object-internal-methods-and-internal-slots-set-p-v-receiver", "description": " >Ordinary [[Set]] forwards call to Proxy \"set\" trap with correct arguments.\n", "info": " |OrdinarySet ( O, P, V, Receiver )\n\n...\n3. Return OrdinarySetWithOwnDescriptor(O, P, V, Receiver, ownDesc).\n\nOrdinarySetWithOwnDescriptor ( O, P, V, Receiver, ownDesc )\n\n...\n2. If ownDesc is undefined, then\na. Let parent be ? O.[[GetPrototypeOf]]().\nb. If parent is not null, then\ni. Return ? parent.[[Set]](P, V, Receiver).\n\n[[Set]] ( P, V, Receiver )\n\n...\n8. Let booleanTrapResult be ! ToBoolean(? Call(trap, handler, \u00ab target, P, V, Receiver \u00bb)).\n...\n12. Return true.\n", "includes": ["proxyTrapsHelper.js"], "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Proxy/set/null-handler.js", "version": 6, "esid": " 9.5.9", "description": " >[[Set]] ( P, V, Receiver)\n\n3. If handler is null, throw a TypeError exception.\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Proxy/setPrototypeOf/not-extensible-target-not-same-target-prototype.js", "version": 6, "esid": " 9.5.2", "description": " >Throws a TypeError exception if boolean trap result is true, target is\nnot extensible, and the given parameter is not the same object as the target\nprototype.\n", "info": " |[[SetPrototypeOf]] (V)\n\n...\n2. Let handler be the value of the [[ProxyHandler]] internal slot of O.\n...\n5. Let target be the value of the [[ProxyTarget]] internal slot of O.\n6. Let trap be GetMethod(handler, \"setPrototypeOf\").\n...\n9. Let booleanTrapResult be ToBoolean(Call(trap, handler, \u00abtarget, V\u00bb)).\n14. Let targetProto be target.[[GetPrototypeOf]]().\n15. ReturnIfAbrupt(targetProto).\n16. If booleanTrapResult is true and SameValue(V, targetProto) is false,\nthrow a TypeError exception.\n...\n", "features": ["Proxy", "Reflect", "Reflect.setPrototypeOf"]}, {"path": "./test262-main/test/built-ins/Proxy/setPrototypeOf/null-handler.js", "version": 6, "esid": " 9.5.2", "description": " >Throws a TypeError exception if handler is null\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Proxy/setPrototypeOf/trap-is-null-target-is-proxy.js", "esid": " sec-proxy-object-internal-methods-and-internal-slots-setprototypeof-v", "description": " >If \"setPrototypeOf\" trap is null or undefined, [[SetPrototypeOf]] call\nis properly forwarded to [[ProxyTarget]] (which is also a Proxy object).\n", "info": " |[[SetPrototypeOf]] ( V )\n\n[...]\n5. Let target be O.[[ProxyTarget]].\n6. Let trap be ? GetMethod(handler, \"setPrototypeOf\").\n7. If trap is undefined, then\na. Return ? target.[[SetPrototypeOf]](V).\n\nOrdinarySetPrototypeOf ( O, V )\n\n[...]\n8. Repeat, while done is false,\na. If p is null, set done to true.\nb. Else if SameValue(p, O) is true, return false.\n[...]\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Proxy/setPrototypeOf/trap-is-undefined-target-is-proxy.js", "esid": " sec-proxy-object-internal-methods-and-internal-slots-setprototypeof-v", "description": " >If \"setPrototypeOf\" trap is null or undefined, [[SetPrototypeOf]] call\nis properly forwarded to [[ProxyTarget]] (which is also a Proxy object).\n", "info": " |[[SetPrototypeOf]] ( V )\n\n[...]\n5. Let target be O.[[ProxyTarget]].\n6. Let trap be ? GetMethod(handler, \"setPrototypeOf\").\n7. If trap is undefined, then\na. Return ? target.[[SetPrototypeOf]](V).\n\nOrdinarySetPrototypeOf ( O, V )\n\n[...]\n4. Let extensible be O.[[Extensible]].\n5. If extensible is false, return false.\n", "features": ["Proxy"]}, {"path": "./test262-main/test/built-ins/Reflect/defineProperty/target-is-symbol-throws.js", "version": 6, "esid": " 26.1.3", "description": " >Throws a TypeError if target is a Symbol\n", "info": " |26.1.3 Reflect.defineProperty ( target, propertyKey, attributes )\n\n1. If Type(target) is not Object, throw a TypeError exception.\n...\n", "features": ["Reflect", "Symbol"]}, {"path": "./test262-main/test/built-ins/Reflect/deleteProperty/target-is-symbol-throws.js", "version": 6, "esid": " 26.1.4", "description": " >Throws a TypeError if target is a Symbol\n", "info": " |26.1.4 Reflect.deleteProperty ( target, propertyKey )\n\n1. If Type(target) is not Object, throw a TypeError exception.\n...\n", "features": ["Reflect", "Symbol"]}, {"path": "./test262-main/test/built-ins/Reflect/get/target-is-symbol-throws.js", "version": 6, "esid": " 26.1.6", "description": " >Throws a TypeError if target is a Symbol\n", "info": " |26.1.6 Reflect.get ( target, propertyKey [ , receiver ])\n\n1. If Type(target) is not Object, throw a TypeError exception.\n...\n", "features": ["Reflect", "Symbol"]}, {"path": "./test262-main/test/built-ins/Reflect/getOwnPropertyDescriptor/target-is-symbol-throws.js", "version": 6, "esid": " 26.1.7", "description": " >Throws a TypeError if target is a Symbol\n", "info": " |26.1.7 Reflect.getOwnPropertyDescriptor ( target, propertyKey )\n\n1. If Type(target) is not Object, throw a TypeError exception.\n...\n", "features": ["Reflect", "Symbol"]}, {"path": "./test262-main/test/built-ins/Reflect/getPrototypeOf/target-is-symbol-throws.js", "version": 6, "esid": " 26.1.8", "description": " >Throws a TypeError if target is a Symbol\n", "info": " |26.1.8 Reflect.getPrototypeOf ( target )\n\n1. If Type(target) is not Object, throw a TypeError exception.\n...\n", "features": ["Reflect", "Symbol"]}, {"path": "./test262-main/test/built-ins/Reflect/has/target-is-symbol-throws.js", "version": 6, "esid": " 26.1.9", "description": " >Throws a TypeError if target is a Symbol\n", "info": " |26.1.9 Reflect.has ( target, propertyKey )\n\n1. If Type(target) is not Object, throw a TypeError exception.\n...\n", "features": ["Reflect", "Symbol"]}, {"path": "./test262-main/test/built-ins/Reflect/isExtensible/target-is-symbol-throws.js", "version": 6, "esid": " 26.1.10", "description": " >Throws a TypeError if target is a Symbol\n", "info": " |26.1.10 Reflect.isExtensible (target)\n\n1. If Type(target) is not Object, throw a TypeError exception.\n...\n", "features": ["Reflect", "Symbol"]}, {"path": "./test262-main/test/built-ins/Reflect/ownKeys/target-is-symbol-throws.js", "version": 6, "esid": " 26.1.11", "description": " >Throws a TypeError if target is a Symbol\n", "info": " |26.1.11 Reflect.ownKeys ( target )\n\n1. If Type(target) is not Object, throw a TypeError exception.\n...\n", "features": ["Reflect", "Symbol"]}, {"path": "./test262-main/test/built-ins/Reflect/preventExtensions/target-is-symbol-throws.js", "version": 6, "esid": " 26.1.10", "description": " >Throws a TypeError if target is a Symbol\n", "info": " |26.1.10 Reflect.isExtensible (target)\n\n1. If Type(target) is not Object, throw a TypeError exception.\n...\n", "features": ["Reflect", "Symbol"]}, {"path": "./test262-main/test/built-ins/Reflect/set/target-is-symbol-throws.js", "version": 6, "esid": " 26.1.13", "description": " >Throws a TypeError if target is a Symbol\n", "info": " |26.1.13 Reflect.set ( target, propertyKey, V [ , receiver ] )\n\n1. If Type(target) is not Object, throw a TypeError exception.\n...\n", "features": ["Reflect", "Reflect.set", "Symbol"]}, {"path": "./test262-main/test/built-ins/Reflect/setPrototypeOf/proto-is-symbol-throws.js", "version": 6, "esid": " 26.1.14", "description": " >Throws a TypeError if proto is a Symbol\n", "info": " |26.1.14 Reflect.setPrototypeOf ( target, proto )\n\n...\n2. If Type(proto) is not Object and proto is not null, throw a TypeError\nexception\n...\n", "features": ["Reflect", "Reflect.setPrototypeOf", "Symbol"]}, {"path": "./test262-main/test/built-ins/Reflect/setPrototypeOf/target-is-symbol-throws.js", "version": 6, "esid": " 26.1.14", "description": " >Throws a TypeError if target is a Symbol\n", "info": " |26.1.14 Reflect.setPrototypeOf ( target, proto )\n\n1. If Type(target) is not Object, throw a TypeError exception.\n...\n", "features": ["Reflect", "Reflect.setPrototypeOf", "Symbol"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.match/builtin-failure-g-set-lastindex-err.js", "description": " >Behavior when error thrown while setting `lastIndex` after a match failure\n", "version": 6, "esid": " 21.2.5.6", "info": " |[...]\n5. Let global be ToBoolean(Get(rx, \"global\")).\n6. ReturnIfAbrupt(global).\n7. If global is false, then\na. Return RegExpExec(rx, S).\n\n21.2.5.2.1 Runtime Semantics: RegExpExec ( R, S )\n\n[...]\n7. Return RegExpBuiltinExec(R, S).\n\n21.2.5.2.2 Runtime Semantics: RegExpBuiltinExec ( R, S )\n\n[...]\n3. Let length be the number of code units in S.\n[...]\n11. Let matchSucceeded be false.\n12. Repeat, while matchSucceeded is false\na. If lastIndex > length, then\ni. If global is true or sticky is true, then\n1. Perform ? Set(R, \"lastIndex\", 0, true).\nii. Return null.\n", "features": ["Symbol.match"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.match/builtin-failure-y-set-lastindex-err.js", "description": " >Behavior when error thrown while setting `lastIndex` after a \"sticky\" match\nfailure\n", "version": 6, "esid": " 21.2.5.6", "info": " |[...]\n5. Let global be ToBoolean(Get(rx, \"global\")).\n6. ReturnIfAbrupt(global).\n7. If global is false, then\na. Return RegExpExec(rx, S).\n\n21.2.5.2.1 Runtime Semantics: RegExpExec ( R, S )\n\n[...]\n7. Return RegExpBuiltinExec(R, S).\n\n21.2.5.2.2 Runtime Semantics: RegExpBuiltinExec ( R, S )\n\n[...]\n8. Let sticky be ToBoolean(Get(R, \"sticky\")).\n[...]\n14. Let matchSucceeded be false.\n15. Repeat, while matchSucceeded is false\n[...]\nc. If r is failure, then\ni. If sticky is true, then\n1. Let setStatus be Set(R, \"lastIndex\", 0, true).\n2. ReturnIfAbrupt(setStatus).\n", "features": ["Symbol.match"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.match/builtin-success-g-set-lastindex-err.js", "description": " >Behavior when error thrown while setting `lastIndex` after a \"global\" match\nsuccess\n", "version": 6, "esid": " 21.2.5.6", "info": " |[...]\n5. Let global be ToBoolean(Get(rx, \"global\")).\n6. ReturnIfAbrupt(global).\n7. If global is false, then\na. Return RegExpExec(rx, S).\n\n21.2.5.2.1 Runtime Semantics: RegExpExec ( R, S )\n\n[...]\n7. Return RegExpBuiltinExec(R, S).\n\n21.2.5.2.2 Runtime Semantics: RegExpBuiltinExec ( R, S )\n\n[...]\n18. If global is true or sticky is true,\na. Let setStatus be Set(R, \"lastIndex\", e, true).\nb. ReturnIfAbrupt(setStatus).\n", "features": ["Symbol.match"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.match/builtin-success-y-set-lastindex-err.js", "description": " >Behavior when error thrown while setting `lastIndex` after a \"sticky\" match\nsuccess\n", "version": 6, "esid": " 21.2.5.6", "info": " |[...]\n5. Let global be ToBoolean(Get(rx, \"global\")).\n6. ReturnIfAbrupt(global).\n7. If global is false, then\na. Return RegExpExec(rx, S).\n\n21.2.5.2.1 Runtime Semantics: RegExpExec ( R, S )\n\n[...]\n7. Return RegExpBuiltinExec(R, S).\n\n21.2.5.2.2 Runtime Semantics: RegExpBuiltinExec ( R, S )\n\n[...]\n18. If global is true or sticky is true,\na. Let setStatus be Set(R, \"lastIndex\", e, true).\nb. ReturnIfAbrupt(setStatus).\n", "features": ["Symbol.match"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.match/g-init-lastindex-err.js", "description": " Behavior when `lastIndex` cannot be set on \"global\" instances", "version": 6, "esid": " 21.2.5.6", "info": " |7. If global is false, then\n[...]\n8. Else global is true,\n[...]\nc. Let setStatus be Set(rx, \"lastIndex\", 0, true).\nd. ReturnIfAbrupt(setStatus).\n", "features": ["Symbol.match"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.match/g-match-empty-set-lastindex-err.js", "description": " >Behavior when error is thrown while setting `lastIndex` after a zero-width\nmatch\n", "version": 6, "esid": " 21.2.5.6", "info": " |7. If global is false, then\n[...]\n8. Else global is true,\n[...]\ng. Repeat,\ni. Let result be RegExpExec(rx, S).\n[...]\niv. Else result is not null,\n1. Let matchStr be ToString(Get(result, \"0\")).\n[...]\n5. If matchStr is the empty String, then\n[...]\nd. Let setStatus be Set(rx, \"lastIndex\", nextIndex, true).\ne. ReturnIfAbrupt(setStatus).\n", "features": ["Symbol.match"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.match/not-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >RegExp.prototype[Symbol.match] does not implement [[Construct]], is not new-able\n", "info": " |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n", "includes": ["isConstructor.js"], "features": ["Reflect.construct", "Symbol", "Symbol.match", "arrow-function"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.match/this-val-non-obj.js", "description": " The `this` value must be an object", "version": 6, "esid": " 21.2.5.6", "info": " |1. Let rx be the this value.\n2. If Type(rx) is not Object, throw a TypeError exception.\n", "features": ["Symbol.match"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.match/y-fail-lastindex-no-write.js", "description": " Match failure with non-writable `lastIndex` property", "version": 6, "esid": " 21.2.5.6", "info": " |21.2.5.6 RegExp.prototype [ @@match ] ( string )\n\n[...]\n5. Let global be ToBoolean(Get(rx, \"global\")).\n6. ReturnIfAbrupt(global).\n7. If global is false, then\na. Return RegExpExec(rx, S).\n\n21.2.5.2.2 Runtime Semantics: RegExpBuiltinExec ( R, S )\n\n[...]\n4. Let lastIndex be ToLength(Get(R,\"lastIndex\")).\n[...]\n8. Let sticky be ToBoolean(Get(R, \"sticky\")).\n[...]\n15. Repeat, while matchSucceeded is false\n[...]\nb. Let r be matcher(S, lastIndex).\nc. If r is failure, then\ni. If sticky is true, then\n1. Let setStatus be Set(R, \"lastIndex\", 0, true).\n2. ReturnIfAbrupt(setStatus).\n", "features": ["Symbol.match"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.matchAll/not-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >RegExp.prototype[Symbol.matchAll] does not implement [[Construct]], is not new-able\n", "info": " |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n", "includes": ["isConstructor.js"], "features": ["Reflect.construct", "Symbol", "Symbol.match", "Symbol.matchAll", "arrow-function"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.matchAll/species-constructor-is-not-object-throws.js", "esid": " pending", "description": " Throws TypeError if `constructor` property is not an object", "info": " |RegExp.prototype [ @@matchAll ] ( string )\n[...]\n3. Return ? MatchAllIterator(R, string).\n\nMatchAllIterator ( R, O )\n[...]\n2. If ? IsRegExp(R) is true, then\na. Let C be ? SpeciesConstructor(R, RegExp).\n\nSpeciesConstructor ( O, defaultConstructor )\n[...]\n2. Let C be ? Get(O, \"constructor\").\n3. If C is undefined, return defaultConstructor.\n4. If Type(C) is not Object, throw a TypeError exception.\n", "features": ["Symbol.matchAll"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.matchAll/species-constructor-species-is-not-constructor.js", "esid": " pending", "description": " TypeError is thrown when species constructor is not a constructor", "info": " |RegExp.prototype [ @@matchAll ] ( string )\n[...]\n2. Return ? [MatchAllIterator](#matchalliterator)(R, string).\n\nMatchAllIterator ( R, O )\n[...]\n3. Let C be ? [SpeciesConstructor][species-constructor](R, RegExp).\n\nSpeciesConstructor ( O, defaultConstructor )\n[...]\n2. Let C be ? Get(O, \"constructor\").\n3. If C is undefined, return defaultConstructor.\n4. If Type(C) is not Object, throw a TypeError exception.\n5. Let S be ? Get(C, @@species).\n6. If S is either undefined or null, return defaultConstructor.\n7. If IsConstructor(S) is true, return S.\n8. Throw a TypeError exception.\n", "features": ["Symbol.matchAll", "Symbol.species"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.matchAll/this-not-object-throws.js", "esid": " pending", "description": " Throws TypeError when `this` is not an Object", "info": " |RegExp.prototype [ @@matchAll ] ( string )\n1. Let R be the this value.\n2. If Type(R) is not Object, throw a TypeError exception.\n", "features": ["Symbol.matchAll"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.replace/not-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >RegExp.prototype[Symbol.replace] does not implement [[Construct]], is not new-able\n", "info": " |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n", "includes": ["isConstructor.js"], "features": ["Reflect.construct", "Symbol", "Symbol.replace", "arrow-function"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.replace/result-coerce-groups-err.js", "esid": " sec-regexp.prototype-@@replace", "description": " >Abrupt completion during coercion of \"groups\"\nproperty of the value returned by RegExpExec.\n", "info": " |RegExp.prototype [ @@replace ] ( string, replaceValue )\n\n[...]\n14. For each result in results, do\n[...]\nj. Let namedCaptures be ? Get(result, \"groups\").\nk. If functionalReplace is true, then\n[...]\nl. Else,\ni. If namedCaptures is not undefined, then\n1. Set namedCaptures to ? ToObject(namedCaptures).\n", "features": ["Symbol.replace", "regexp-named-groups"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.replace/this-val-non-obj.js", "description": " The `this` value must be an object", "version": 6, "esid": " 21.2.5.8", "info": " |1. Let rx be the this value.\n2. If Type(rx) is not Object, throw a TypeError exception.\n", "features": ["Symbol.replace"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.replace/y-fail-lastindex-no-write.js", "description": " Match failure with non-writable `lastIndex` property", "version": 6, "esid": " 21.2.5.8", "info": " |21.2.5.8 RegExp.prototype [ @@replace ] ( string, replaceValue )\n\n[...]\n13. Repeat, while done is false\na. Let result be RegExpExec(rx, S).\n\n21.2.5.2.2 Runtime Semantics: RegExpBuiltinExec ( R, S )\n\n[...]\n4. Let lastIndex be ToLength(Get(R,\"lastIndex\")).\n[...]\n8. Let sticky be ToBoolean(Get(R, \"sticky\")).\n[...]\n15. Repeat, while matchSucceeded is false\n[...]\nb. Let r be matcher(S, lastIndex).\nc. If r is failure, then\ni. If sticky is true, then\n1. Let setStatus be Set(R, \"lastIndex\", 0, true).\n2. ReturnIfAbrupt(setStatus).\n", "features": ["Symbol.replace"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.search/cstm-exec-return-invalid.js", "version": 6, "esid": " 21.2.5.9", "description": " Behavior when invalid value is returned by custom `exec` method", "info": " |[...]\n9. Let result be RegExpExec(rx, S).\n10. ReturnIfAbrupt(result).\n[...]\n14. Return Get(result, \"index\").\n\n21.2.5.2.1 Runtime Semantics: RegExpExec ( R, S )\n\n[...]\n5. If IsCallable(exec) is true, then\na. Let result be Call(exec, R, \u00abS\u00bb).\nb. ReturnIfAbrupt(result).\nc. If Type(result) is neither Object or Null, throw a TypeError\nexception.\n\n", "features": ["Symbol", "Symbol.search"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.search/not-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >RegExp.prototype[Symbol.search] does not implement [[Construct]], is not new-able\n", "info": " |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n", "includes": ["isConstructor.js"], "features": ["Reflect.construct", "Symbol", "Symbol.search", "arrow-function"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.search/this-val-non-obj.js", "description": " The `this` value must be an object", "version": 6, "esid": " 21.2.5.9", "info": " |1. Let rx be the this value.\n2. If Type(rx) is not Object, throw a TypeError exception.\n", "features": ["Symbol.search"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.split/not-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >RegExp.prototype[Symbol.split] does not implement [[Construct]], is not new-able\n", "info": " |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n", "includes": ["isConstructor.js"], "features": ["Reflect.construct", "Symbol", "Symbol.split", "arrow-function"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/Symbol.split/this-val-non-obj.js", "description": " The `this` value must be an object", "version": 6, "esid": " 21.2.5.11", "info": " |1. Let rx be the this value.\n2. If Type(rx) is not Object, throw a TypeError exception.\n", "features": ["Symbol.split"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/exec/S15.10.6.2_A9.js", "info": " |The RegExp.prototype.exec.length property does not have the attribute\nDontDelete\n", "version": 5, "esid": " 15.10.6.2_A9", "description": " >Checking if deleting the RegExp.prototype.exec.length property\nfails\n"}, {"path": "./test262-main/test/built-ins/RegExp/prototype/exec/name.js", "version": 6, "esid": " 21.2.5.2", "description": " >RegExp.prototype.exec.name is \"exec\".\n", "info": " |RegExp.prototype.exec ( string )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/exec/y-fail-lastindex.js", "description": " Resets the `lastIndex` property to zero after a match failure", "version": 6, "esid": " 21.2.5.2", "info": " |21.2.5.2 RegExp.prototype.exec ( string )\n\n[...]\n6. Return RegExpBuiltinExec(R, S).\n\n21.2.5.2.2 Runtime Semantics: RegExpBuiltinExec ( R, S )\n\n[...]\n4. Let lastIndex be ToLength(Get(R,\"lastIndex\")).\n[...]\n8. Let sticky be ToBoolean(Get(R, \"sticky\")).\n[...]\n15. Repeat, while matchSucceeded is false\n[...]\nb. Let r be matcher(S, lastIndex).\nc. If r is failure, then\ni. If sticky is true, then\n1. Let setStatus be Set(R, \"lastIndex\", 0, true).\n"}, {"path": "./test262-main/test/built-ins/RegExp/prototype/flags/coercion-global.js", "esid": " sec-get-regexp.prototype.flags", "description": " Boolean coercion of the global property", "info": " |get RegExp.prototype.flags\n\n...\n4. Let global be ToBoolean(? Get(R, \"global\")).\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/flags/coercion-ignoreCase.js", "esid": " sec-get-regexp.prototype.flags", "description": " Boolean coercion of the ignoreCase property", "info": " |get RegExp.prototype.flags\n\n...\n6. Let ignoreCase be ToBoolean(? Get(R, \"ignoreCase\")).\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/flags/coercion-multiline.js", "esid": " sec-get-regexp.prototype.flags", "description": " Boolean coercion of the multiline property", "info": " |get RegExp.prototype.flags\n\n...\n8. Let multiline be ToBoolean(? Get(R, \"multiline\")).\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/flags/coercion-sticky.js", "esid": " sec-get-regexp.prototype.flags", "description": " Boolean coercion of the sticky property", "info": " |get RegExp.prototype.flags\n\n...\n14. Let sticky be ToBoolean(? Get(R, \"sticky\")).\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/flags/coercion-unicode.js", "esid": " sec-get-regexp.prototype.flags", "description": " Boolean coercion of the unicode property", "info": " |get RegExp.prototype.flags\n\n...\n12. Let unicode be ToBoolean(? Get(R, \"unicode\")).\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/flags/length.js", "esid": " sec-get-regexp.prototype.flags", "description": " >get RegExp.prototype.flags.length is 0.\n", "info": " |get RegExp.prototype.flags\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/flags/prop-desc.js", "esid": " sec-get-regexp.prototype.flags", "description": " >get RegExp.prototype.flags property descriptor\n", "info": " |get RegExp.prototype.flags\n\nRegExp.prototype.flags is an accessor property whose set accessor\nfunction is undefined\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/flags/this-val-non-obj.js", "esid": " sec-get-regexp.prototype.flags", "description": " A TypeError is thrown when the `this` value is not an Object", "info": " |1. Let R be the this value.\n2. If Type(R) is not Object, throw a TypeError exception.\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/flags/this-val-regexp-prototype.js", "esid": " sec-get-regexp.prototype.flags", "description": " >Return \"\" when the `this` value is the RegExp.prototype object\n", "info": " |3. Let result be the empty String.\n4. Let global be ToBoolean(? Get(R, \"global\")).\n5. If global is true, append \"g\" as the last code unit of result.\n6. Let ignoreCase be ToBoolean(? Get(R, \"ignoreCase\")).\n7. If ignoreCase is true, append \"i\" as the last code unit of result.\n8. Let multiline be ToBoolean(? Get(R, \"multiline\")).\n9. If multiline is true, append \"m\" as the last code unit of result.\n10. Let dotAll be ToBoolean(? Get(R, \"dotAll\")).\n11. If dotAll is true, append \"s\" as the last code unit of result.\n12. Let unicode be ToBoolean(? Get(R, \"unicode\")).\n13. If unicode is true, append \"u\" as the last code unit of result.\n14. Let sticky be ToBoolean(? Get(R, \"sticky\")).\n15. If sticky is true, append \"y\" as the last code unit of result.\n16. Return result.\n"}, {"path": "./test262-main/test/built-ins/RegExp/prototype/global/15.10.7.2-2.js", "version": 5, "esid": " 15.10.7.2-2", "description": " >RegExp.prototype.global is an accessor property whose set accessor\nfunction is undefined\n"}, {"path": "./test262-main/test/built-ins/RegExp/prototype/global/S15.10.7.2_A9.js", "info": " |The RegExp.prototype global property does not have the attribute\nDontDelete\n", "version": 5, "esid": " 15.10.7.2_A9", "description": " Checking if deleting the global property succeeds"}, {"path": "./test262-main/test/built-ins/RegExp/prototype/global/length.js", "version": 6, "esid": " 21.2.5.4", "description": " >get RegExp.prototype.global.length is 0.\n", "info": " |get RegExp.prototype.global\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/global/this-val-non-obj.js", "esid": " sec-get-regexp.prototype.global", "description": " A TypeError is thrown when the \"this\" value is not an Object", "info": " |1. Let R be the this value.\n2. If Type(R) is not Object, throw a TypeError exception.\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/ignoreCase/15.10.7.3-2.js", "version": 5, "esid": " 15.10.7.3-2", "description": " >RegExp.prototype.ignoreCase is an accessor property whose set\naccessor function is undefined\n"}, {"path": "./test262-main/test/built-ins/RegExp/prototype/ignoreCase/S15.10.7.3_A9.js", "info": " |The RegExp.prototype ignoreCase property does not have the attribute\nDontDelete\n", "version": 5, "esid": " 15.10.7.3_A9", "description": " Checking if deleting the ignoreCase property succeeds"}, {"path": "./test262-main/test/built-ins/RegExp/prototype/ignoreCase/length.js", "version": 6, "esid": " 21.2.5.5", "description": " >get RegExp.prototype.ignoreCase.length is 0.\n", "info": " |get RegExp.prototype.ignoreCase\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/ignoreCase/this-val-non-obj.js", "esid": " sec-get-regexp.prototype.ignorecase", "description": " A TypeError is thrown when the \"this\" value is not an Object", "info": " |1. Let R be the this value.\n2. If Type(R) is not Object, throw a TypeError exception.\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/multiline/15.10.7.4-2.js", "version": 5, "esid": " 15.10.7.4-2", "description": " >RegExp.prototype.multiline is an accessor property whose set\naccessor function is undefined\n"}, {"path": "./test262-main/test/built-ins/RegExp/prototype/multiline/S15.10.7.4_A9.js", "info": " |The RegExp.prototype multiline property does not have the attribute\nDontDelete\n", "version": 5, "esid": " 15.10.7.4_A9", "description": " Checking if deleting the multiline property succeeds"}, {"path": "./test262-main/test/built-ins/RegExp/prototype/multiline/length.js", "version": 6, "esid": " 21.2.5.7", "description": " >get RegExp.prototype.multiline.length is 0.\n", "info": " |get RegExp.prototype.multiline\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/multiline/this-val-non-obj.js", "esid": " sec-get-regexp.prototype.multiline", "description": " A TypeError is thrown when the \"this\" value is not an Object", "info": " |1. Let R be the this value.\n2. If Type(R) is not Object, throw a TypeError exception.\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/source/this-val-non-obj.js", "esid": " sec-get-regexp.prototype.source", "description": " A TypeError is thrown when the \"this\" value is not an Object", "info": " |1. Let R be the this value.\n2. If Type(R) is not Object, throw a TypeError exception.\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/source/value-empty.js", "esid": " sec-get-regexp.prototype.source", "description": " >Return value can be used to create an equivalent RegExp when the\n[[OriginalSource]] internal slot is the empty string\n\n21.2.3.2.4 Runtime Semantics: EscapeRegExpPattern\n\n[...] the internal procedure that would result from evaluating S as a\nPattern[~U] (Pattern[+U] if F contains \"u\") must behave identically to the\ninternal procedure given by the constructed object's [[RegExpMatcher]]\ninternal slot.\n", "info": " |[...]\n5. Let src be R.[[OriginalSource]].\n6. Let flags be R.[[OriginalFlags]].\n7. Return EscapeRegExpPattern(src, flags).\n"}, {"path": "./test262-main/test/built-ins/RegExp/prototype/source/value-line-terminator.js", "esid": " sec-get-regexp.prototype.source", "description": " >Return value can be used to create an equivalent RegExp when the\n[[OriginalSource]] internal slot contains a LineTerminator\n", "info": " |[...]\n5. Let src be R.[[OriginalSource]].\n6. Let flags be R.[[OriginalFlags]].\n7. Return EscapeRegExpPattern(src, flags).\n\n21.2.3.2.4 Runtime Semantics: EscapeRegExpPattern\n\n[...] the internal procedure that would result from evaluating S as a\nPattern[~U] (Pattern[+U] if F contains \"u\") must behave identically to the\ninternal procedure given by the constructed object's [[RegExpMatcher]]\ninternal slot.\n"}, {"path": "./test262-main/test/built-ins/RegExp/prototype/sticky/length.js", "version": 6, "esid": " 21.2.5.12", "description": " >get RegExp.prototype.sticky.length is 0.\n", "info": " |get RegExp.prototype.sticky\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/sticky/prop-desc.js", "version": 6, "esid": " 21.2.5.12", "description": " >`sticky` property descriptor\n", "info": " |RegExp.prototype.sticky is an accessor property whose set accessor\nfunction is undefined.\n"}, {"path": "./test262-main/test/built-ins/RegExp/prototype/test/S15.10.6.3_A9.js", "info": " |The RegExp.prototype.test.length property does not have the attribute\nDontDelete\n", "version": 5, "esid": " 15.10.6.3_A9", "description": " Checking if deleting RegExp.prototype.test.length property fails"}, {"path": "./test262-main/test/built-ins/RegExp/prototype/test/name.js", "version": 6, "esid": " 21.2.5.13", "description": " >RegExp.prototype.test.name is \"test\".\n", "info": " |RegExp.prototype.test( S )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/RegExp/prototype/test/y-fail-lastindex.js", "description": " Resets the `lastIndex` property to zero after a match failure", "version": 6, "esid": " 21.2.5.13", "info": " |21.2.5.13 RegExp.prototype.test( S )\n\n[...]\n5. Let match be RegExpExec(R, string).\n\n21.2.5.2.2 Runtime Semantics: RegExpBuiltinExec ( R, S )\n\n[...]\n4. Let lastIndex be ToLength(Get(R,\"lastIndex\")).\n[...]\n8. Let sticky be ToBoolean(Get(R, \"sticky\")).\n[...]\n15. Repeat, while matchSucceeded is false\n[...]\nb. Let r be matcher(S, lastIndex).\nc. If r is failure, then\ni. If sticky is true, then\n1. Let setStatus be Set(R, \"lastIndex\", 0, true).\n"}, {"path": "./test262-main/test/built-ins/RegExp/prototype/toString/S15.10.6.4_A9.js", "info": " |The RegExp.prototype.toString.length property does not have the attribute\nDontDelete\n", "version": 5, "esid": " 15.10.6.4_A9", "description": " >Checking if deleting the RegExp.prototype.toString.length property\nfails\n"}, {"path": "./test262-main/test/built-ins/RegExp/prototype/toString/name.js", "version": 6, "esid": " 21.2.5.14", "description": " >RegExp.prototype.toString.name is \"toString\".\n", "info": " |RegExp.prototype.toString ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Set/name.js", "version": 6, "esid": " 23.2.1.1", "description": " >Set ( [ iterable ] )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Set/prototype/Symbol.iterator/not-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >Set.prototype[Symbol.iterator] does not implement [[Construct]], is not new-able\n", "info": " |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n", "includes": ["isConstructor.js"], "features": ["Reflect.construct", "Symbol", "Symbol.iterator", "Set", "arrow-function"]}, {"path": "./test262-main/test/built-ins/Set/prototype/Symbol.iterator.js", "description": " Initial state of the Symbol.iterator property", "info": " |The initial value of the @@iterator property is the same function object as\nthe initial value of the values property.\n\nPer ES6 section 17, the method should exist on the Set prototype, and it\nshould be writable and configurable, but not enumerable.\n", "includes": ["propertyHelper.js"], "features": ["Symbol.iterator"], "version": 6, "esid": " 23.2.3.11"}, {"path": "./test262-main/test/built-ins/Set/prototype/add/does-not-have-setdata-internal-slot-weakset.js", "version": 6, "esid": " 23.2.3.1", "description": " >Set.prototype.add ( value )\n\n...\n3. If S does not have a [[SetData]] internal slot, throw a TypeError exception.\n...\n", "features": ["WeakSet"]}, {"path": "./test262-main/test/built-ins/Set/prototype/add/length.js", "version": 6, "esid": " 23.2.3.1", "description": " >Set.prototype.add ( value )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Set/prototype/add/name.js", "version": 6, "esid": " 23.2.3.1", "description": " >Set.prototype.add ( value )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Set/prototype/add/preserves-insertion-order.js", "version": 6, "esid": " 23.2.3.1", "description": " >Set.prototype.add ( value )\n\n...\n7. Append value as the last element of entries.\n...\n"}, {"path": "./test262-main/test/built-ins/Set/prototype/add/returns-this-when-ignoring-duplicate.js", "version": 6, "esid": " 23.2.3.1", "description": " >Set.prototype.add ( value )\n\n1. Let S be this value.\n...\n5. Repeat for each e that is an element of entries,\na. If e is not empty and SameValueZero(e, value) is true, then\ni. Return S.\n...\n\n"}, {"path": "./test262-main/test/built-ins/Set/prototype/add/returns-this.js", "version": 6, "esid": " 23.2.3.1", "description": " >Set.prototype.add ( value )\n\n1. Let S be this value.\n...\n8. Return S.\n\n"}, {"path": "./test262-main/test/built-ins/Set/prototype/add/this-not-object-throw-symbol.js", "version": 6, "esid": " 23.2.3.1", "description": " >Set.prototype.add ( value )\n\n1. Let S be the this value.\n2. If Type(S) is not Object, throw a TypeError exception.\n\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Set/prototype/add/will-not-add-duplicate-entry-normalizes-zero.js", "version": 6, "esid": " 23.2.3.1", "description": " >Set.prototype.add ( value )\n\n...\n4. Let entries be the List that is the value of S\u2019s [[SetData]] internal slot.\n5. Repeat for each e that is an element of entries,\na. If e is not empty and SameValueZero(e, value) is true, then\ni. Return S.\n6. If value is \u22120, let value be +0.\n7. Append value as the last element of entries.\n...\n\n"}, {"path": "./test262-main/test/built-ins/Set/prototype/clear/clears-all-contents.js", "version": 6, "esid": " 23.2.3.2", "description": " >Set.prototype.clear ( )\n\n...\n4. Let entries be the List that is the value of S\u2019s [[SetData]] internal slot.\n5. Repeat for each e that is an element of entries,\na. Replace the element of entries whose value is e with an element whose value is empty.\n...\n\n"}, {"path": "./test262-main/test/built-ins/Set/prototype/clear/does-not-have-setdata-internal-slot-weakset.js", "version": 6, "esid": " 23.2.3.2", "description": " >Set.prototype.clear ( )\n\n...\n3. If S does not have a [[SetData]] internal slot, throw a TypeError exception.\n...\n", "features": ["WeakSet"]}, {"path": "./test262-main/test/built-ins/Set/prototype/clear/length.js", "version": 6, "esid": " 23.2.3.2", "description": " >Set.prototype.clear ( )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Set/prototype/clear/name.js", "version": 6, "esid": " 23.2.3.2", "description": " >Set.prototype.clear ( )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Set/prototype/clear/this-not-object-throw-symbol.js", "version": 6, "esid": " 23.2.3.2", "description": " >Set.prototype.clear ( )\n\n1. Let S be the this value.\n2. If Type(S) is not Object, throw a TypeError exception.\n\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Set/prototype/delete/delete-entry-normalizes-zero.js", "version": 6, "esid": " 23.2.3.4", "description": " >Set.prototype.delete ( value )\n\n...\n4. Let entries be the List that is the value of S\u2019s [[SetData]] internal slot.\n5. Repeat for each e that is an element of entries,\na. If e is not empty and SameValueZero(e, value) is true, then\nb. Replace the element of entries whose value is e with an element whose value is empty.\nc. Return true.\n...\n\n"}, {"path": "./test262-main/test/built-ins/Set/prototype/delete/does-not-have-setdata-internal-slot-weakset.js", "version": 6, "esid": " 23.2.3.4", "description": " >Set.prototype.delete ( value )\n\n...\n3. If S does not have a [[SetData]] internal slot, throw a TypeError exception.\n...\n", "features": ["WeakSet"]}, {"path": "./test262-main/test/built-ins/Set/prototype/delete/length.js", "version": 6, "esid": " 23.2.3.4", "description": " >Set.prototype.delete ( value )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Set/prototype/delete/name.js", "version": 6, "esid": " 23.2.3.4", "description": " >Set.prototype.delete ( value )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Set/prototype/delete/this-not-object-throw-symbol.js", "version": 6, "esid": " 23.2.3.4", "description": " >Set.prototype.delete ( value )\n\n1. Let S be the this value.\n2. If Type(S) is not Object, throw a TypeError exception.\n\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Set/prototype/entries/does-not-have-setdata-internal-slot-weakset.js", "version": 6, "esid": " 23.2.3.5", "description": " >Set.prototype.entries ( )\n\n...\n2. Return CreateSetIterator(S, \"key+value\").\n\n\n23.2.5.1 CreateSetIterator Abstract Operation\n\n...\n2. If S does not have a [[SetData]] internal slot, throw a TypeError exception.\n...\n", "features": ["WeakSet"]}, {"path": "./test262-main/test/built-ins/Set/prototype/entries/length.js", "version": 6, "esid": " 23.2.3.5", "description": " >Set.prototype.entries ( )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Set/prototype/entries/name.js", "version": 6, "esid": " 23.2.3.5", "description": " >Set.prototype.entries ( )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Set/prototype/entries/returns-iterator-empty.js", "version": 6, "esid": " 23.2.3.5", "description": " >Set.prototype.entries ( )\n\n...\n2. Return CreateSetIterator(S, \"key+value\").\n\n\n23.2.5.1 CreateSetIterator Abstract Operation\n\n...\n7. Return iterator.\n\n\n"}, {"path": "./test262-main/test/built-ins/Set/prototype/entries/returns-iterator.js", "version": 6, "esid": " 23.2.3.5", "description": " >Set.prototype.entries ( )\n\n...\n2. Return CreateSetIterator(S, \"key+value\").\n\n\n23.2.5.1 CreateSetIterator Abstract Operation\n\n...\n7. Return iterator.\n\n\n"}, {"path": "./test262-main/test/built-ins/Set/prototype/entries/this-not-object-throw-symbol.js", "version": 6, "esid": " 23.2.3.5", "description": " >Set.prototype.entries ( )\n\n...\n2. Return CreateSetIterator(S, \"key+value\").\n\n\n23.2.5.1 CreateSetIterator Abstract Operation\n\n1. If Type(set) is not Object, throw a TypeError exception.\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Set/prototype/forEach/callback-not-callable-symbol.js", "version": 6, "esid": " 23.2.3.6", "description": " >Set.prototype.forEach ( callbackfn [ , thisArg ] )\n\n...\n4. If IsCallable(callbackfn) is false, throw a TypeError exception.\n...\n\nPassing `symbol` as callback\n\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Set/prototype/forEach/forEach.js", "version": 6, "esid": " 23.2.3.6", "description": " >Set.prototype.forEach ( callbackfn [ , thisArg ] )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Set/prototype/forEach/iterates-in-insertion-order.js", "version": 6, "esid": " 23.2.3.6", "description": " >Set.prototype.forEach ( callbackfn [ , thisArg ] )\n\n...\n7. Repeat for each e that is an element of entries, in original insertion order\na. If e is not empty, then\ni. Let funcResult be Call(callbackfn, T, \u00abe, e, S\u00bb).\nii. ReturnIfAbrupt(funcResult).\n...\n"}, {"path": "./test262-main/test/built-ins/Set/prototype/forEach/iterates-in-iterable-entry-order.js", "version": 6, "esid": " 23.2.3.6", "description": " >Set.prototype.forEach ( callbackfn [ , thisArg ] )\n\n...\n7. Repeat for each e that is an element of entries, in original insertion order\na. If e is not empty, then\ni. Let funcResult be Call(callbackfn, T, \u00abe, e, S\u00bb).\nii. ReturnIfAbrupt(funcResult).\n...\n"}, {"path": "./test262-main/test/built-ins/Set/prototype/forEach/iterates-values-added-after-foreach-begins.js", "version": 6, "esid": " 23.2.3.6", "description": " >Set.prototype.forEach ( callbackfn [ , thisArg ] )\n\n...\n7. Repeat for each e that is an element of entries, in original insertion order\na. If e is not empty, then\ni. Let funcResult be Call(callbackfn, T, \u00abe, e, S\u00bb).\nii. ReturnIfAbrupt(funcResult).\n...\n\nNOTE:\n\n...\nNew values added after the call to forEach begins are visited.\n\n"}, {"path": "./test262-main/test/built-ins/Set/prototype/forEach/iterates-values-deleted-then-readded.js", "version": 6, "esid": " 23.2.3.6", "description": " >Set.prototype.forEach ( callbackfn [ , thisArg ] )\n\n...\n7. Repeat for each e that is an element of entries, in original insertion order\na. If e is not empty, then\ni. Let funcResult be Call(callbackfn, T, \u00abe, e, S\u00bb).\nii. ReturnIfAbrupt(funcResult).\n...\n\nNOTE:\n\n...\nValues that are deleted after the call to forEach begins and before being visited are not visited unless the value is added again before the forEach call completes.\n...\n\n"}, {"path": "./test262-main/test/built-ins/Set/prototype/forEach/iterates-values-not-deleted.js", "version": 6, "esid": " 23.2.3.6", "description": " >Set.prototype.forEach ( callbackfn [ , thisArg ] )\n\n...\n7. Repeat for each e that is an element of entries, in original insertion order\na. If e is not empty, then\ni. Let funcResult be Call(callbackfn, T, \u00abe, e, S\u00bb).\nii. ReturnIfAbrupt(funcResult).\n...\n\nNOTE:\n\ncallbackfn should be a function that accepts three arguments. forEach calls callbackfn once for each value present in the set object, in value insertion order. callbackfn is called only for values of the Set which actually exist; it is not called for keys that have been deleted from the set.\n\n"}, {"path": "./test262-main/test/built-ins/Set/prototype/forEach/iterates-values-revisits-after-delete-re-add.js", "version": 6, "esid": " 23.2.3.6", "description": " >Set.prototype.forEach ( callbackfn [ , thisArg ] )\n\n...\n7. Repeat for each e that is an element of entries, in original insertion order\na. If e is not empty, then\ni. Let funcResult be Call(callbackfn, T, \u00abe, e, S\u00bb).\nii. ReturnIfAbrupt(funcResult).\n...\n\nNOTE:\n\n...\na value will be revisited if it is deleted after it has been visited and then re-added before the forEach call completes.\n...\n\n"}, {"path": "./test262-main/test/built-ins/Set/prototype/forEach/length.js", "version": 6, "esid": " 23.2.3.6", "description": " >Set.prototype.forEach ( callbackfn [ , thisArg ] )\n\nThe length property of the forEach method is 1.\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Set/prototype/forEach/name.js", "version": 6, "esid": " 23.2.3.6", "description": " >Set.prototype.forEach ( callbackfn [ , thisArg ] )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Set/prototype/forEach/returns-undefined.js", "version": 6, "esid": " 23.2.3.6", "description": " >Set.prototype.forEach ( callbackfn [ , thisArg ] )\n\n...\n8. Return undefined.\n\n"}, {"path": "./test262-main/test/built-ins/Set/prototype/forEach/this-arg-explicit-cannot-override-lexical-this-arrow.js", "version": 6, "esid": " 23.2.3.6", "description": " >Set.prototype.forEach ( callbackfn [ , thisArg ] )\n\n...\n5. If thisArg was supplied, let T be thisArg; else let T be undefined.\n...\n\nAn arrow function will ignore an explicit thisArg\n\n", "features": ["arrow-function"]}, {"path": "./test262-main/test/built-ins/Set/prototype/forEach/this-arg-explicit.js", "version": 6, "esid": " 23.2.3.6", "description": " >Set.prototype.forEach ( callbackfn [ , thisArg ] )\n\n...\n5. If thisArg was supplied, let T be thisArg; else let T be undefined.\n...\n"}, {"path": "./test262-main/test/built-ins/Set/prototype/forEach/this-non-strict.js", "version": 6, "esid": " 23.2.3.6", "description": " >Set.prototype.forEach ( callbackfn [ , thisArg ] )\n\n...\n5. If thisArg was supplied, let T be thisArg; else let T be undefined.\n...\n\n", "flags": ["noStrict"]}, {"path": "./test262-main/test/built-ins/Set/prototype/forEach/this-strict.js", "version": 6, "esid": " 23.2.3.6", "description": " >Set.prototype.forEach ( callbackfn [ , thisArg ] )\n\n...\n5. If thisArg was supplied, let T be thisArg; else let T be undefined.\n...\n\n", "flags": ["onlyStrict"]}, {"path": "./test262-main/test/built-ins/Set/prototype/forEach/throws-when-callback-throws.js", "version": 6, "esid": " 23.2.3.6", "description": " >Set.prototype.forEach ( callbackfn [ , thisArg ] )\n\n...\n7. Repeat for each e that is an element of entries, in original insertion order\na. If e is not empty, then\ni. Let funcResult be Call(callbackfn, T, \u00abe, e, S\u00bb).\nii. ReturnIfAbrupt(funcResult).\n...\n"}, {"path": "./test262-main/test/built-ins/Set/prototype/has/does-not-have-setdata-internal-slot-weakset.js", "version": 6, "esid": " 23.2.3.7", "description": " >Set.prototype.has ( value )\n\n...\n3. If S does not have a [[SetData]] internal slot, throw a TypeError exception.\n...\n", "features": ["WeakSet"]}, {"path": "./test262-main/test/built-ins/Set/prototype/has/length.js", "version": 6, "esid": " 23.2.3.7", "description": " >Set.prototype.has ( value )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Set/prototype/has/name.js", "version": 6, "esid": " 23.2.3.7", "description": " >Set.prototype.has ( value )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Set/prototype/has/returns-false-when-value-not-present-symbol.js", "version": 6, "esid": " 23.2.3.7", "description": " >Set.prototype.has ( value )\n\n...\n6. Return false.\n\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Set/prototype/has/returns-true-when-value-present-symbol.js", "version": 6, "esid": " 23.2.3.7", "description": " >Set.prototype.has ( value )\n\n...\n5. Repeat for each e that is an element of entries,\na. If e is not empty and SameValueZero(e, value) is true, return true.\n...\n\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Set/prototype/has/this-not-object-throw-symbol.js", "version": 6, "esid": " 23.2.3.7", "description": " >Set.prototype.has ( value )\n\n1. Let S be the this value.\n2. If Type(S) is not Object, throw a TypeError exception.\n\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Set/prototype/size/length.js", "version": 6, "esid": " 23.2.3.9", "description": " >get Set.prototype.size\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Set/prototype/size/returns-count-of-present-values-by-insertion.js", "version": 6, "esid": " 23.2.3.9", "description": " >get Set.prototype.size\n\n5. Let count be 0.\n6. For each e that is an element of entries\na. If e is not empty, set count to count+1.\n\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Set/prototype/size/returns-count-of-present-values-by-iterable.js", "version": 6, "esid": " 23.2.3.9", "description": " >get Set.prototype.size\n\n5. Let count be 0.\n6. For each e that is an element of entries\na. If e is not empty, set count to count+1.\n\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Set/prototype/values/does-not-have-setdata-internal-slot-weakset.js", "version": 6, "esid": " 23.2.3.10", "description": " >Set.prototype.values ( )\n\n...\n2. Return CreateSetIterator(S, \"value\").\n\n\n23.2.5.1 CreateSetIterator Abstract Operation\n\n...\n2. If S does not have a [[SetData]] internal slot, throw a TypeError exception.\n...\n", "features": ["WeakSet"]}, {"path": "./test262-main/test/built-ins/Set/prototype/values/length.js", "version": 6, "esid": " 23.2.3.10", "description": " >Set.prototype.values ( )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Set/prototype/values/name.js", "version": 6, "esid": " 23.2.3.10", "description": " >Set.prototype.values ( )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/Set/prototype/values/returns-iterator-empty.js", "description": " >Returns an iterator that's already done if Set is empty.\nes6id: 23.2.3.10\n", "version": 6, "esid": " 23.2.3.10"}, {"path": "./test262-main/test/built-ins/Set/prototype/values/returns-iterator.js", "description": " >The method should return a valid iterator with the context as the\nIteratedObject.\nes6id: 23.2.3.10\n", "version": 6, "esid": " 23.2.3.10"}, {"path": "./test262-main/test/built-ins/Set/prototype/values/this-not-object-throw-symbol.js", "version": 6, "esid": " 23.2.3.10", "description": " >Set.prototype.values ( )\n\n...\n2. Return CreateSetIterator(S, \"value\").\n\n\n23.2.5.1 CreateSetIterator Abstract Operation\n\n1. If Type(set) is not Object, throw a TypeError exception.\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Set/prototype/values/values-iteration-mutable.js", "description": " >When an item is added to the set after the iterator is created but before\nthe iterator is \"done\" (as defined by 23.2.5.2.1), the new item should be\naccessible via iteration. When an item is added to the set after the\niterator is \"done\", the new item should not be accessible via iteration.\nes6id: 23.2.3.10\n", "version": 6, "esid": " 23.2.3.10"}, {"path": "./test262-main/test/built-ins/Set/set-get-add-method-failure.js", "version": 6, "esid": " 23.2.1.1", "description": " >Set ( [ iterable ] )\n\nWhen the Set function is called with optional argument iterable the following steps are taken:\n\n...\n6. If iterable is either undefined or null, let iter be undefined.\n7. Else,\na. Let adder be Get(set, \"add\").\nb. ReturnIfAbrupt(adder).\n"}, {"path": "./test262-main/test/built-ins/Set/set-iterable-calls-add.js", "version": 6, "esid": " 23.2.1.1", "description": " >Set ( [ iterable ] )\n\nWhen the Set function is called with optional argument iterable the following steps are taken:\n\n...\n7. Else,\na. Let adder be Get(set, \"add\").\nb. ReturnIfAbrupt(adder).\nc. If IsCallable(adder) is false, throw a TypeError exception.\nd. Let iter be GetIterator(iterable).\ne. ReturnIfAbrupt(iter).\n...\n9. Repeat\na. Let next be IteratorStep(iter).\nb. ReturnIfAbrupt(next).\nc. If next is false, return set.\nd. Let nextValue be IteratorValue(next).\ne. ReturnIfAbrupt(nextValue).\nf. Let status be Call(adder, set, \u00abnextValue.[[value]]\u00bb).\ng. If status is an abrupt completion, return IteratorClose(iter, status).\n\n"}, {"path": "./test262-main/test/built-ins/Set/set-iterable-throws-when-add-is-not-callable.js", "version": 6, "esid": " 23.2.1.1", "description": " >Set ( [ iterable ] )\n\nWhen the Set function is called with optional argument iterable the following steps are taken:\n\n...\n7. Else,\na. Let adder be Get(set, \"add\").\nb. ReturnIfAbrupt(adder).\nc. If IsCallable(adder) is false, throw a TypeError exception.\nd. Let iter be GetIterator(iterable).\ne. ReturnIfAbrupt(iter).\n...\n9. Repeat\na. Let next be IteratorStep(iter).\nb. ReturnIfAbrupt(next).\nc. If next is false, return set.\nd. Let nextValue be IteratorValue(next).\ne. ReturnIfAbrupt(nextValue).\nf. Let status be Call(adder, set, \u00abnextValue.[[value]]\u00bb).\ng. If status is an abrupt completion, return IteratorClose(iter, status).\n\n"}, {"path": "./test262-main/test/built-ins/Set/set-iterator-next-failure.js", "version": 6, "esid": " 23.2.1.1", "description": " >Set ( [ iterable ] )\n\nWhen the Set function is called with optional argument iterable the following steps are taken:\n\n...\n9. Repeat\na. Let next be IteratorStep(iter).\nb. ReturnIfAbrupt(next).\n", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/built-ins/Set/set-iterator-value-failure.js", "version": 6, "esid": " 23.2.1.1", "description": " >Set ( [ iterable ] )\n\nWhen the Set function is called with optional argument iterable the following steps are taken:\n\n...\n9. Repeat\n...\nd. Let nextValue be IteratorValue(next).\ne. ReturnIfAbrupt(nextValue).\n", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/built-ins/Set/set-no-iterable.js", "version": 6, "esid": " 23.2.1.1", "description": " >Set ( [ iterable ] )\n\nWhen the Set function is called with optional argument iterable the following steps are taken:\n\n...\n5. If iterable is not present, let iterable be undefined.\n6. If iterable is either undefined or null, let iter be undefined.\n...\n8. If iter is undefined, return set.\n\n"}, {"path": "./test262-main/test/built-ins/Set/symbol-as-entry.js", "version": 6, "esid": " 19.4", "description": " >Symbol as Set entry\n", "features": ["Symbol", "Set"]}, {"path": "./test262-main/test/built-ins/SetIteratorPrototype/next/does-not-have-mapiterator-internal-slots-set.js", "version": 6, "esid": " 23.2.5.2.1", "description": " >Throws a TypeError if `this` does not have all of the internal slots of a Set\nIterator Instance.\n", "info": " |%SetIteratorPrototype%.next ( )\n\n1. Let O be the this value.\n2. If Type(O) is not Object, throw a TypeError exception.\n3. If O does not have all of the internal slots of a Set Iterator Instance\n(23.2.5.3), throw a TypeError exception.\n...\n", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/built-ins/SetIteratorPrototype/next/does-not-have-mapiterator-internal-slots.js", "version": 6, "esid": " 23.2.5.2.1", "description": " >Throws a TypeError if `this` does not have all of the internal slots of a Set\nIterator Instance.\n", "info": " |%SetIteratorPrototype%.next ( )\n\n1. Let O be the this value.\n2. If Type(O) is not Object, throw a TypeError exception.\n3. If O does not have all of the internal slots of a Set Iterator Instance\n(23.2.5.3), throw a TypeError exception.\n...\n", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/built-ins/SetIteratorPrototype/next/iteration-mutable.js", "version": 6, "esid": " 23.2.3.11", "description": " >When an item is added to the set after the iterator is created but before\nthe iterator is \"done\" (as defined by 23.2.5.2.1), the new item should be\naccessible via iteration. When an item is added to the set after the\niterator is \"done\", the new item should not be accessible via iteration.\n", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/built-ins/SetIteratorPrototype/next/iteration.js", "version": 6, "esid": " 23.2.3.11", "description": " >The method should return a valid iterator with the context as the\nIteratedObject.\n", "features": [""]}, {"path": "./test262-main/test/built-ins/SetIteratorPrototype/next/length.js", "version": 6, "esid": " 23.2.5.2.1", "description": " >%SetIteratorPrototype%.next.length is 0.\n", "info": " |%SetIteratorPrototype%.next ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/SetIteratorPrototype/next/name.js", "version": 6, "esid": " 23.2.5.2.1", "description": " >%SetIteratorPrototype%.next.name is \"next\".\n", "info": " |%SetIteratorPrototype%.next ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/SetIteratorPrototype/next/this-not-object-throw-entries.js", "version": 6, "esid": " 23.2.5.2.1", "description": " >Throws a TypeError if `this` value is not an Object.\n", "info": " |From Set.prototype.entries()\n\n%SetIteratorPrototype%.next ( )\n\n1. Let O be the this value.\n2. If Type(O) is not Object, throw a TypeError exception.\n...\n", "features": [""]}, {"path": "./test262-main/test/built-ins/SetIteratorPrototype/next/this-not-object-throw-keys.js", "version": 6, "esid": " 23.2.5.2.1", "description": " >Throws a TypeError if `this` value is not an Object.\n", "info": " |From Set.prototype.keys()\n\n%SetIteratorPrototype%.next ( )\n\n1. Let O be the this value.\n2. If Type(O) is not Object, throw a TypeError exception.\n...\n", "features": [""]}, {"path": "./test262-main/test/built-ins/SetIteratorPrototype/next/this-not-object-throw-prototype-iterator.js", "version": 6, "esid": " 23.2.5.2.1", "description": " >Throws a TypeError if `this` value is not an Object.\n", "info": " |Using Set.prototype[Symbol.iterator]()\n\n%SetIteratorPrototype%.next ( )\n\n1. Let O be the this value.\n2. If Type(O) is not Object, throw a TypeError exception.\n...\n", "features": [""]}, {"path": "./test262-main/test/built-ins/SetIteratorPrototype/next/this-not-object-throw-values.js", "version": 6, "esid": " 23.2.5.2.1", "description": " >Throws a TypeError if `this` value is not an Object.\n", "info": " |From Set.prototype.values()\n\n%SetIteratorPrototype%.next ( )\n\n1. Let O be the this value.\n2. If Type(O) is not Object, throw a TypeError exception.\n...\n", "features": [""]}, {"path": "./test262-main/test/built-ins/String/fromCharCode/name.js", "version": 6, "esid": " 21.1.2.1", "description": " >String.fromCharCode.name is \"fromCharCode\".\n", "info": " |String.fromCharCode ( ...codeUnits )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/String/fromCodePoint/argument-is-Symbol.js", "version": 6, "esid": " 21.1.2.2", "description": " >Return abrupt from ToNumber(next).\n", "info": " |String.fromCodePoint ( ...codePoints )\n\n1. Let codePoints be a List containing the arguments passed to this function.\n2. Let length be the number of elements in codePoints.\n3. Let elements be a new List.\n4. Let nextIndex be 0.\n5. Repeat while nextIndex < length\na. Let next be codePoints[nextIndex].\nb. Let nextCP be ToNumber(next).\nc. ReturnIfAbrupt(nextCP).\n", "features": ["Symbol", "String.fromCodePoint"]}, {"path": "./test262-main/test/built-ins/String/fromCodePoint/argument-is-not-integer.js", "version": 6, "esid": " 21.1.2.2", "description": " >Throw a RangeError if an argument is not equal to its Integer representation.\n", "info": " |String.fromCodePoint ( ...codePoints )\n\n1. Let codePoints be a List containing the arguments passed to this function.\n2. Let length be the number of elements in codePoints.\n3. Let elements be a new List.\n4. Let nextIndex be 0.\n5. Repeat while nextIndex < length\na. Let next be codePoints[nextIndex].\nb. Let nextCP be ToNumber(next).\nc. ReturnIfAbrupt(nextCP).\nd. If SameValue(nextCP, ToInteger(nextCP)) is false, throw a RangeError\nexception.\n...\n", "features": ["String.fromCodePoint"]}, {"path": "./test262-main/test/built-ins/String/fromCodePoint/argument-not-coercible.js", "version": 6, "esid": " 21.1.2.2", "description": " >Return abrupt from ToNumber(next).\n", "info": " |String.fromCodePoint ( ...codePoints )\n\n1. Let codePoints be a List containing the arguments passed to this function.\n2. Let length be the number of elements in codePoints.\n3. Let elements be a new List.\n4. Let nextIndex be 0.\n5. Repeat while nextIndex < length\na. Let next be codePoints[nextIndex].\nb. Let nextCP be ToNumber(next).\nc. ReturnIfAbrupt(nextCP).\n", "features": ["String.fromCodePoint"]}, {"path": "./test262-main/test/built-ins/String/fromCodePoint/arguments-is-empty.js", "version": 6, "esid": " 21.1.2.2", "description": " >The the arguments list is empty, an empty string is returned.\n", "info": " |String.fromCodePoint ( ...codePoints )\n\n1. Let codePoints be a List containing the arguments passed to this function.\n...\n5. Repeat while nextIndex < length\n...\nf. Append the elements of the UTF16Encoding (10.1.1) of nextCP to the end of\nelements.\ng. Let nextIndex be nextIndex + 1.\n6. Return the String value whose elements are, in order, the elements in the\nList elements. If length is 0, the empty string is returned.\n\n", "features": ["String.fromCodePoint"]}, {"path": "./test262-main/test/built-ins/String/fromCodePoint/fromCodePoint.js", "version": 6, "esid": " 21.1.2.2", "description": " >String.fromCodePoint property descriptor\n", "info": " |String.fromCodePoint ( ...codePoints )\n\n17 ECMAScript Standard Built-in Objects\n", "includes": ["propertyHelper.js"], "features": ["String.fromCodePoint"]}, {"path": "./test262-main/test/built-ins/String/fromCodePoint/length.js", "version": 6, "esid": " 21.1.2.2", "description": " >The length property of the String.fromCodePoint constructor is 1.\n", "includes": ["propertyHelper.js"], "features": ["String.fromCodePoint"]}, {"path": "./test262-main/test/built-ins/String/fromCodePoint/name.js", "version": 6, "esid": " 21.1.2.2", "description": " >String.fromCodePoint.name\n", "info": " |String.fromCodePoint ( ...codePoints )\n\n17 ECMAScript Standard Built-in Objects\n", "includes": ["propertyHelper.js"], "features": ["String.fromCodePoint"]}, {"path": "./test262-main/test/built-ins/String/fromCodePoint/number-is-out-of-range.js", "version": 6, "esid": " 21.1.2.2", "description": " >Throw a RangeError if an argument is < 0 or > 0x10FFFF.\n", "info": " |String.fromCodePoint ( ...codePoints )\n\n1. Let codePoints be a List containing the arguments passed to this function.\n2. Let length be the number of elements in codePoints.\n3. Let elements be a new List.\n4. Let nextIndex be 0.\n5. Repeat while nextIndex < length\na. Let next be codePoints[nextIndex].\nb. Let nextCP be ToNumber(next).\nc. ReturnIfAbrupt(nextCP).\nd. If SameValue(nextCP, ToInteger(nextCP)) is false, throw a RangeError\nexception.\ne. If nextCP < 0 or nextCP > 0x10FFFF, throw a RangeError exception.\n...\n", "features": ["String.fromCodePoint"]}, {"path": "./test262-main/test/built-ins/String/fromCodePoint/return-string-value.js", "version": 6, "esid": " 21.1.2.2", "description": " >Returns the String value whose elements are, in order, the code unit for the\nnumbers in the arguments list.\n", "info": " |String.fromCodePoint ( ...codePoints )\n\n1. Let codePoints be a List containing the arguments passed to this function.\n...\n5. Repeat while nextIndex < length\n...\nf. Append the elements of the UTF16Encoding (10.1.1) of nextCP to the end of\nelements.\ng. Let nextIndex be nextIndex + 1.\n6. Return the String value whose elements are, in order, the elements in the\nList elements. If length is 0, the empty string is returned.\n", "features": ["String.fromCodePoint"]}, {"path": "./test262-main/test/built-ins/String/fromCodePoint/to-number-conversions.js", "version": 6, "esid": " 21.1.2.2", "description": " >Returns the String value with the code unit for the given coerced types.\n", "info": " |String.fromCodePoint ( ...codePoints )\n\n1. Let codePoints be a List containing the arguments passed to this function.\n...\n5. Repeat while nextIndex < length\na. Let next be codePoints[nextIndex].\nb. Let nextCP be ToNumber(next).\n...\n6. Return the String value whose elements are, in order, the elements in the\nList elements. If length is 0, the empty string is returned.\n\nRef: 7.1.3 ToNumber ( argument )\n", "features": ["String.fromCodePoint"]}, {"path": "./test262-main/test/built-ins/String/prototype/Symbol.iterator/length.js", "version": 6, "esid": " 25.1.3.27", "description": " Length of String.prototype[ @@iterator ]", "info": " |ES6 Section 17:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this value\nis equal to the largest number of named arguments shown in the subclause\nheadings for the function description, including optional parameters.\n\n[...]\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "features": ["Symbol.iterator"], "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/String/prototype/Symbol.iterator/name.js", "version": 6, "esid": " 25.1.3.27", "description": " Descriptor for `name` property", "info": " |The value of the name property of this function is \"[Symbol.iterator]\".\n\nES6 Section 17: ECMAScript Standard Built-in Objects\n\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value is a\nString. Unless otherwise specified, this value is the name that is given to\nthe function in this specification.\n\n[...]\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "features": ["Symbol.iterator"], "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/String/prototype/Symbol.iterator/not-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >String.prototype[Symbol.iterator] does not implement [[Construct]], is not new-able\n", "info": " |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n", "includes": ["isConstructor.js"], "features": ["Reflect.construct", "Symbol", "Symbol.iterator", "arrow-function"]}, {"path": "./test262-main/test/built-ins/String/prototype/Symbol.iterator/prop-desc.js", "version": 6, "esid": " 25.1.3.27", "description": " Property descriptor", "info": " |ES6 Section 17\n\nEvery other data property described in clauses 18 through 26 and in Annex\nB.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false,\n[[Configurable]]: true } unless otherwise specified.\n", "features": ["Symbol.iterator"], "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/String/prototype/Symbol.iterator/this-val-non-obj-coercible.js", "version": 6, "esid": " 25.1.3.27", "description": " The `this` value cannot be coerced into an object", "info": " |1. Let O be RequireObjectCoercible(this value).\n2. Let S be ToString(O).\n3. ReturnIfAbrupt(S).\n", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/built-ins/String/prototype/Symbol.iterator/this-val-to-str-err.js", "version": 6, "esid": " 25.1.3.27", "description": " Error thrown coercing `this` value to a string", "info": " |1. Let O be RequireObjectCoercible(this value).\n2. Let S be ToString(O).\n3. ReturnIfAbrupt(S).\n", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/built-ins/String/prototype/charAt/S15.5.4.4_A9.js", "info": " |The String.prototype.charAt.length property does not have the attribute\nDontDelete\n", "version": 5, "esid": " 15.5.4.4_A9", "description": " >Checking if deleting the String.prototype.charAt.length property\nfails\n"}, {"path": "./test262-main/test/built-ins/String/prototype/charAt/name.js", "version": 6, "esid": " 21.1.3.1", "description": " >String.prototype.charAt.name is \"charAt\".\n", "info": " |String.prototype.charAt ( pos )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/String/prototype/charCodeAt/S15.5.4.5_A9.js", "info": " |The String.prototype.charCodeAt.length property does not have the\nattribute DontDelete\n", "version": 5, "esid": " 15.5.4.5_A9", "description": " >Checking if deleting the String.prototype.charCodeAt.length\nproperty fails\n"}, {"path": "./test262-main/test/built-ins/String/prototype/charCodeAt/name.js", "version": 6, "esid": " 21.1.3.2", "description": " >String.prototype.charCodeAt.name is \"charCodeAt\".\n", "info": " |String.prototype.charCodeAt ( pos )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/String/prototype/codePointAt/codePointAt.js", "version": 6, "esid": " 21.1.3.3", "description": " >Property type and descriptor.\n", "info": " |21.1.3.3 String.prototype.codePointAt ( pos )\n\n17 ECMAScript Standard Built-in Objects\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/String/prototype/codePointAt/length.js", "version": 6, "esid": " 21.1.3.3", "description": " >String.prototype.codePointAt.length value and descriptor.\n", "info": " |21.1.3.3 String.prototype.codePointAt ( pos )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/String/prototype/codePointAt/name.js", "version": 6, "esid": " 21.1.3.3", "description": " >String.prototype.codePointAt.name value and descriptor.\n", "info": " |21.1.3.3 String.prototype.codePointAt ( pos )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/String/prototype/codePointAt/return-abrupt-from-object-pos-to-integer.js", "version": 6, "esid": " 21.1.3.3", "description": " >Returns abrupt from ToInteger(pos)\n", "info": " |21.1.3.3 String.prototype.codePointAt ( pos )\n\n1. Let O be RequireObjectCoercible(this value).\n2. Let S be ToString(O).\n3. ReturnIfAbrupt(S).\n4. Let position be ToInteger(pos).\n5. ReturnIfAbrupt(position).\n"}, {"path": "./test262-main/test/built-ins/String/prototype/codePointAt/return-abrupt-from-symbol-pos-to-integer.js", "version": 6, "esid": " 21.1.3.3", "description": " >Returns abrupt from ToInteger(pos)\n", "info": " |21.1.3.3 String.prototype.codePointAt ( pos )\n\n1. Let O be RequireObjectCoercible(this value).\n2. Let S be ToString(O).\n3. ReturnIfAbrupt(S).\n4. Let position be ToInteger(pos).\n5. ReturnIfAbrupt(position).\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/String/prototype/codePointAt/return-abrupt-from-this-as-symbol.js", "version": 6, "esid": " 21.1.3.3", "description": " >Returns abrupt from ToString(this) where this is a Symbol\n", "info": " |21.1.3.3 String.prototype.codePointAt ( pos )\n\n1. Let O be RequireObjectCoercible(this value).\n2. Let S be ToString(O).\n3. ReturnIfAbrupt(S).\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/String/prototype/codePointAt/return-abrupt-from-this.js", "version": 6, "esid": " 21.1.3.3", "description": " >Returns abrupt from ToString(this)\n", "info": " |21.1.3.3 String.prototype.codePointAt ( pos )\n\n1. Let O be RequireObjectCoercible(this value).\n2. Let S be ToString(O).\n3. ReturnIfAbrupt(S).\n"}, {"path": "./test262-main/test/built-ins/String/prototype/codePointAt/return-code-unit-coerced-position.js", "version": 6, "esid": " 21.1.3.3", "description": " >Return value on coerced values on ToInteger(position).\n", "info": " |21.1.3.3 String.prototype.codePointAt ( pos )\n\n...\n4. Let position be ToInteger(pos).\n...\n\n"}, {"path": "./test262-main/test/built-ins/String/prototype/codePointAt/return-first-code-unit.js", "version": 6, "esid": " 21.1.3.3", "description": " >Returns code point of LeadSurrogate if not followed by a valid TrailSurrogate.\n", "info": " |21.1.3.3 String.prototype.codePointAt ( pos )\n\n...\n8. Let first be the code unit value of the element at index position in the\nString S.\n9. If first < 0xD800 or first > 0xDBFF or position+1 = size, return first.\n10. Let second be the code unit value of the element at index position+1 in\nthe String S.\n11. If second < 0xDC00 or second > 0xDFFF, return first.\n"}, {"path": "./test262-main/test/built-ins/String/prototype/codePointAt/return-single-code-unit.js", "version": 6, "esid": " 21.1.3.3", "description": " >Return single code unit value of the element at index position.\n", "info": " |21.1.3.3 String.prototype.codePointAt ( pos )\n\n1. Let O be RequireObjectCoercible(this value).\n2. Let S be ToString(O).\n3. ReturnIfAbrupt(S).\n4. Let position be ToInteger(pos).\n5. ReturnIfAbrupt(position).\n6. Let size be the number of elements in S.\n7. If position < 0 or position \u2265 size, return undefined.\n8. Let first be the code unit value of the element at index position in the\nString S.\n9. If first < 0xD800 or first > 0xDBFF or position+1 = size, return first.\n"}, {"path": "./test262-main/test/built-ins/String/prototype/codePointAt/return-utf16-decode.js", "version": 6, "esid": " 21.1.3.3", "description": " >Return UTF16 Decode value of the lead and trail elements at index position.\n", "info": " |21.1.3.3 String.prototype.codePointAt ( pos )\n\n...\n8. Let first be the code unit value of the element at index position in the\nString S.\n9. If first < 0xD800 or first > 0xDBFF or position+1 = size, return first.\n10. Let second be the code unit value of the element at index position+1 in\nthe String S.\n11. If second < 0xDC00 or second > 0xDFFF, return first.\n12. Return UTF16Decode(first, second).\n\n10.1.2 Static Semantics: UTF16Decode( lead, trail )\n\nTwo code units, lead and trail, that form a UTF-16 surrogate pair are\nconverted to a code point by performing the following steps:\n\n1. Assert: 0xD800 \u2264 lead \u2264 0xDBFF and 0xDC00 \u2264 trail \u2264 0xDFFF.\n2. Let cp be (lead \u2013 0xD800) \u00d7 1024 + (trail \u2013 0xDC00) + 0x10000.\n3. Return the code point cp.\n"}, {"path": "./test262-main/test/built-ins/String/prototype/codePointAt/returns-undefined-on-position-equal-or-more-than-size.js", "version": 6, "esid": " 21.1.3.3", "description": " >If pos >= size, return undefined\n", "info": " |21.1.3.3 String.prototype.codePointAt ( pos )\n\n1. Let O be RequireObjectCoercible(this value).\n2. Let S be ToString(O).\n3. ReturnIfAbrupt(S).\n4. Let position be ToInteger(pos).\n5. ReturnIfAbrupt(position).\n6. Let size be the number of elements in S.\n7. If position < 0 or position \u2265 size, return undefined.\n"}, {"path": "./test262-main/test/built-ins/String/prototype/codePointAt/returns-undefined-on-position-less-than-zero.js", "version": 6, "esid": " 21.1.3.3", "description": " >If pos < size, return undefined\n", "info": " |21.1.3.3 String.prototype.codePointAt ( pos )\n\n1. Let O be RequireObjectCoercible(this value).\n2. Let S be ToString(O).\n3. ReturnIfAbrupt(S).\n4. Let position be ToInteger(pos).\n5. ReturnIfAbrupt(position).\n6. Let size be the number of elements in S.\n7. If position < 0 or position \u2265 size, return undefined.\n"}, {"path": "./test262-main/test/built-ins/String/prototype/concat/S15.5.4.6_A9.js", "info": " |The String.prototype.concat.length property does not have the attribute\nDontDelete\n", "version": 5, "esid": " 15.5.4.6_A9", "description": " >Checking if deleting the String.prototype.concat.length property\nfails\n"}, {"path": "./test262-main/test/built-ins/String/prototype/concat/name.js", "version": 6, "esid": " 21.1.3.4", "description": " >String.prototype.concat.name is \"concat\".\n", "info": " |String.prototype.concat ( ...args )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/String/prototype/endsWith/length.js", "version": 6, "esid": " 21.1.3.6", "description": " >String.prototype.endsWith.length value and descriptor.\n", "info": " |21.1.3.6 String.prototype.endsWith ( searchString [ , endPosition] )\n\nThe length property of the endsWith method is 1.\n\n", "includes": ["propertyHelper.js"], "features": ["String.prototype.endsWith"]}, {"path": "./test262-main/test/built-ins/String/prototype/endsWith/name.js", "version": 6, "esid": " 21.1.3.6", "description": " >String.prototype.endsWith.name value and descriptor.\n", "info": " |21.1.3.6 String.prototype.endsWith ( searchString [ , endPosition] )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"], "features": ["String.prototype.endsWith"]}, {"path": "./test262-main/test/built-ins/String/prototype/endsWith/return-abrupt-from-position-as-symbol.js", "version": 6, "esid": " 21.1.3.6", "description": " >Returns abrupt from ToInteger(endPosition) as a Symbol.\n", "info": " |21.1.3.6 String.prototype.endsWith ( searchString [ , endPosition] )\n\n...\n10. If endPosition is undefined, let pos be len, else let pos be\nToInteger(endPosition).\n11. ReturnIfAbrupt(pos).\n...\n", "features": ["Symbol", "String.prototype.endsWith"]}, {"path": "./test262-main/test/built-ins/String/prototype/endsWith/return-abrupt-from-searchstring-as-symbol.js", "version": 6, "esid": " 21.1.3.6", "description": " >Returns abrupt from ToString(searchString) as a Symbol\n", "info": " |21.1.3.6 String.prototype.endsWith ( searchString [ , endPosition] )\n\n...\n7. Let searchStr be ToString(searchString).\n8. ReturnIfAbrupt(searchStr).\n...\n", "features": ["Symbol", "String.prototype.endsWith"]}, {"path": "./test262-main/test/built-ins/String/prototype/endsWith/return-abrupt-from-this-as-symbol.js", "version": 6, "esid": " 21.1.3.6", "description": " >Returns abrupt from ToString(this) where this is a Symbol\n", "info": " |21.1.3.6 String.prototype.endsWith ( searchString [ , endPosition] )\n\n1. Let O be RequireObjectCoercible(this value).\n2. Let S be ToString(O).\n3. ReturnIfAbrupt(S).\n...\n", "features": ["Symbol", "String.prototype.endsWith"]}, {"path": "./test262-main/test/built-ins/String/prototype/endsWith/searchstring-is-regexp-throws.js", "version": 6, "esid": " 21.1.3.6", "description": " >Throws a TypeError if searchString is a RegExp.\n", "info": " |21.1.3.6 String.prototype.endsWith ( searchString [ , endPosition] )\n\n...\n4. Let isRegExp be IsRegExp(searchString).\n5. ReturnIfAbrupt(isRegExp).\n6. If isRegExp is true, throw a TypeError exception.\n...\n", "features": ["String.prototype.endsWith"]}, {"path": "./test262-main/test/built-ins/String/prototype/includes/return-abrupt-from-position-as-symbol.js", "version": 6, "esid": " 21.1.3.7", "description": " >Returns abrupt from ToInteger(position) as a Symbol.\n", "info": " |21.1.3.7 String.prototype.includes ( searchString [ , position ] )\n\n...\n9. Let pos be ToInteger(position). (If position is undefined, this step\nproduces the value 0).\n10. ReturnIfAbrupt(pos).\n...\n", "features": ["Symbol", "String.prototype.includes"]}, {"path": "./test262-main/test/built-ins/String/prototype/includes/return-abrupt-from-searchstring-as-symbol.js", "version": 6, "esid": " 21.1.3.7", "description": " >Returns abrupt from ToString(searchString) as a Symbol\n", "info": " |21.1.3.7 String.prototype.includes ( searchString [ , position ] )\n\n...\n7. Let searchStr be ToString(searchString).\n8. ReturnIfAbrupt(searchStr).\n...\n", "features": ["Symbol", "String.prototype.includes"]}, {"path": "./test262-main/test/built-ins/String/prototype/includes/return-abrupt-from-this-as-symbol.js", "version": 6, "esid": " 21.1.3.7", "description": " >Returns abrupt from ToString(this) where this is a Symbol\n", "info": " |21.1.3.7 String.prototype.includes ( searchString [ , position ] )\n\n1. Let O be RequireObjectCoercible(this value).\n2. Let S be ToString(O).\n3. ReturnIfAbrupt(S).\n", "features": ["Symbol", "String.prototype.includes"]}, {"path": "./test262-main/test/built-ins/String/prototype/indexOf/S15.5.4.7_A9.js", "info": " |The String.prototype.indexOf.length property does not have the attribute\nDontDelete\n", "version": 5, "esid": " 15.5.4.7_A9", "description": " >Checking if deleting the String.prototype.indexOf.length property\nfails\n"}, {"path": "./test262-main/test/built-ins/String/prototype/indexOf/name.js", "version": 6, "esid": " 21.1.3.8", "description": " >String.prototype.indexOf.name is \"indexOf\".\n", "info": " |String.prototype.indexOf ( searchString [ , position ] )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/String/prototype/lastIndexOf/S15.5.4.8_A9.js", "info": " |The String.prototype.lastIndexOf.length property does not have the\nattribute DontDelete\n", "version": 5, "esid": " 15.5.4.8_A9", "description": " >Checking if deleting the String.prototype.lastIndexOf.length\nproperty fails\n"}, {"path": "./test262-main/test/built-ins/String/prototype/lastIndexOf/name.js", "version": 6, "esid": " 21.1.3.9", "description": " >String.prototype.lastIndexOf.name is \"lastIndexOf\".\n", "info": " |String.prototype.lastIndexOf ( searchString [ , position ] )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/String/prototype/localeCompare/S15.5.4.9_A9.js", "info": " |The String.prototype.localeCompare.length property does not have the\nattribute DontDelete\n", "version": 5, "esid": " 15.5.4.9_A9", "description": " >Checking if deleting the String.prototype.localeCompare.length\nproperty fails\n"}, {"path": "./test262-main/test/built-ins/String/prototype/localeCompare/name.js", "version": 6, "esid": " 21.1.3.10", "description": " >String.prototype.localeCompare.name is \"localeCompare\".\n", "info": " |String.prototype.localeCompare ( that [, reserved1 [ , reserved2 ] ] )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/String/prototype/match/S15.5.4.10_A9.js", "info": " |The String.prototype.match.length property does not have the attribute\nDontDelete\n", "version": 5, "esid": " 15.5.4.10_A9", "description": " >Checking if deleting the String.prototype.match.length property\nfails\n"}, {"path": "./test262-main/test/built-ins/String/prototype/match/cstm-matcher-is-null.js", "esid": " sec-string.prototype.match", "description": " >If regexp's Symbol.match property is null, no error is thrown.\n", "info": " |String.prototype.match ( regexp )\n\n[...]\n2. If regexp is neither undefined nor null, then\na. Let matcher be ? GetMethod(regexp, @@match).\nb. If matcher is not undefined, then\n[...]\n[...]\n5. Return ? Invoke(rx, @@match, \u00ab S \u00bb).\n\nGetMethod ( V, P )\n\n[...]\n2. Let func be ? GetV(V, P).\n3. If func is either undefined or null, return undefined.\n", "features": ["Symbol.match"]}, {"path": "./test262-main/test/built-ins/String/prototype/match/length.js", "version": 6, "esid": " 21.1.3.11", "description": " Checking String.prototype.match.length", "info": " |The length property of the match method is 1.\n\nES6 Section 17:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this value\nis equal to the largest number of named arguments shown in the subclause\nheadings for the function description, including optional parameters.\n\n[...]\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/String/prototype/match/name.js", "version": 6, "esid": " 21.1.3.11", "description": " >String.prototype.match.name is \"match\".\n", "info": " |String.prototype.match ( regexp )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/String/prototype/normalize/form-is-not-valid-throws.js", "version": 6, "esid": " 21.1.3.12", "description": " >Throws a RangeError if ToString(form) value is not a valid form name.\n", "info": " |21.1.3.12 String.prototype.normalize ( [ form ] )\n\n...\n7. If f is not one of \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", throw a RangeError\nexception.\n"}, {"path": "./test262-main/test/built-ins/String/prototype/normalize/length.js", "version": 6, "esid": " 21.1.3.12", "description": " >String.prototype.normalize.length value and descriptor.\n", "info": " |21.1.3.12 String.prototype.normalize ( [ form ] )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/String/prototype/normalize/name.js", "version": 6, "esid": " 21.1.3.12", "description": " >String.prototype.normalize.name value and descriptor.\n", "info": " |21.1.3.12 String.prototype.normalize ( [ form ] )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/String/prototype/normalize/normalize.js", "version": 6, "esid": " 21.1.3.12", "description": " >Property type and descriptor.\n", "info": " |21.1.3.12 String.prototype.normalize ( [ form ] )\n\n17 ECMAScript Standard Built-in Objects\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/String/prototype/normalize/return-abrupt-from-form-as-symbol.js", "version": 6, "esid": " 21.1.3.12", "description": " >Returns abrupt from ToString(form) as a Symbol.\n", "info": " |21.1.3.12 String.prototype.normalize ( [ form ] )\n\n...\n4. If form is not provided or form is undefined, let form be \"NFC\".\n5. Let f be ToString(form).\n6. ReturnIfAbrupt(f).\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/String/prototype/normalize/return-abrupt-from-form.js", "version": 6, "esid": " 21.1.3.12", "description": " >Returns abrupt from ToString(form)\n", "info": " |21.1.3.12 String.prototype.normalize ( [ form ] )\n\n...\n4. If form is not provided or form is undefined, let form be \"NFC\".\n5. Let f be ToString(form).\n6. ReturnIfAbrupt(f).\n"}, {"path": "./test262-main/test/built-ins/String/prototype/normalize/return-abrupt-from-this-as-symbol.js", "version": 6, "esid": " 21.1.3.12", "description": " >Returns abrupt from ToString(this) where this is a Symbol\n", "info": " |21.1.3.12 String.prototype.normalize ( [ form ] )\n\n1. Let O be RequireObjectCoercible(this value).\n2. Let S be ToString(O).\n3. ReturnIfAbrupt(S).\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/String/prototype/normalize/return-abrupt-from-this.js", "version": 6, "esid": " 21.1.3.12", "description": " >Returns abrupt from ToString(this)\n", "info": " |21.1.3.12 String.prototype.normalize ( [ form ] )\n\n1. Let O be RequireObjectCoercible(this value).\n2. Let S be ToString(O).\n3. ReturnIfAbrupt(S).\n"}, {"path": "./test262-main/test/built-ins/String/prototype/normalize/return-normalized-string-from-coerced-form.js", "version": 6, "esid": " 21.1.3.12", "description": " >Returns normalized string from coerced form.\n", "info": " |21.1.3.12 String.prototype.normalize ( [ form ] )\n\n...\n4. If form is not provided or form is undefined, let form be \"NFC\".\n5. Let f be ToString(form).\n6. ReturnIfAbrupt(f).\n7. If f is not one of \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", throw a RangeError\nexception.\n8. Let ns be the String value that is the result of normalizing S into the\nnormalization form named by f as specified in\nhttp://www.unicode.org/reports/tr15/tr15-29.html.\n9. Return ns.\n"}, {"path": "./test262-main/test/built-ins/String/prototype/normalize/return-normalized-string-using-default-parameter.js", "version": 6, "esid": " 21.1.3.12", "description": " >Returns normalized string.\n", "info": " |21.1.3.12 String.prototype.normalize ( [ form ] )\n\n...\n4. If form is not provided or form is undefined, let form be \"NFC\".\n...\n8. Let ns be the String value that is the result of normalizing S into the\nnormalization form named by f as specified in\nhttp://www.unicode.org/reports/tr15/tr15-29.html.\n9. Return ns.\n"}, {"path": "./test262-main/test/built-ins/String/prototype/normalize/return-normalized-string.js", "version": 6, "esid": " 21.1.3.12", "description": " >Returns normalized string.\n", "info": " |21.1.3.12 String.prototype.normalize ( [ form ] )\n\n...\n7. If f is not one of \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", throw a RangeError\nexception.\n8. Let ns be the String value that is the result of normalizing S into the\nnormalization form named by f as specified in\nhttp://www.unicode.org/reports/tr15/tr15-29.html.\n9. Return ns.\n"}, {"path": "./test262-main/test/built-ins/String/prototype/padEnd/exception-fill-string-symbol.js", "esid": " sec-string.prototype.padend", "description": " String#padEnd should fail if given a Symbol fillString.", "author": " Jordan Harband", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/String/prototype/padStart/exception-fill-string-symbol.js", "esid": " sec-string.prototype.padstart", "description": " String#padStart should fail if given a Symbol fillString.", "author": " Jordan Harband", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/String/prototype/repeat/empty-string-returns-empty.js", "version": 6, "esid": " 21.1.3.13", "description": " >An empty repeated n times will return an empty string.\n", "info": " |21.1.3.13 String.prototype.repeat ( count )\n\n8. Let T be a String value that is made from n copies of S appended together.\nIf n is 0, T is the empty String.\n9. Return T.\n"}, {"path": "./test262-main/test/built-ins/String/prototype/repeat/length.js", "version": 6, "esid": " 21.1.3.13", "description": " >String.prototype.repeat.length value and descriptor.\n", "info": " |21.1.3.13 String.prototype.repeat ( count )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/String/prototype/repeat/name.js", "version": 6, "esid": " 21.1.3.13", "description": " >String.prototype.repeat.name value and descriptor.\n", "info": " |21.1.3.13 String.prototype.repeat ( count )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/String/prototype/repeat/return-abrupt-from-count-as-symbol.js", "version": 6, "esid": " 21.1.3.13", "description": " >Returns abrupt from ToInteger(count) where count is a Symbol\n", "info": " |21.1.3.13 String.prototype.repeat ( count )\n\n4. Let n be ToInteger(count).\n5. ReturnIfAbrupt(n).\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/String/prototype/repeat/return-abrupt-from-this-as-symbol.js", "version": 6, "esid": " 21.1.3.13", "description": " >Returns abrupt from ToString(this) where this is a Symbol\n", "info": " |21.1.3.13 String.prototype.repeat ( count )\n\n1. Let O be RequireObjectCoercible(this value).\n2. Let S be ToString(O).\n3. ReturnIfAbrupt(S).\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/String/prototype/replace/cstm-replace-is-null.js", "esid": " sec-string.prototype.replace", "description": " >If searchValue's Symbol.replace property is null, no error is thrown.\n", "info": " |String.prototype.replace ( searchValue, replaceValue )\n\n[...]\n2. If searchValue is neither undefined nor null, then\na. Let replacer be ? GetMethod(searchValue, @@replace).\nb. If replacer is not undefined, then\n[...]\n[...]\n12. Return newString.\n\nGetMethod ( V, P )\n\n[...]\n2. Let func be ? GetV(V, P).\n3. If func is either undefined or null, return undefined.\n", "features": ["Symbol.replace"]}, {"path": "./test262-main/test/built-ins/String/prototype/replace/length.js", "esid": " sec-string.prototype.replace", "description": " >String.prototype.replace.length is 2.\n", "info": " |String.prototype.replace ( searchValue, replaceValue )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/String/prototype/replace/name.js", "version": 6, "esid": " 21.1.3.14", "description": " >String.prototype.replace.name is \"replace\".\n", "info": " |String.prototype.replace (searchValue, replaceValue )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/String/prototype/search/S15.5.4.12_A9.js", "info": " |The String.prototype.search.length property does not have the attribute\nDontDelete\n", "version": 5, "esid": " 15.5.4.12_A9", "description": " >Checking if deleting the String.prototype.search.length property\nfails\n"}, {"path": "./test262-main/test/built-ins/String/prototype/search/cstm-search-is-null.js", "esid": " sec-string.prototype.search", "description": " >If regexp's Symbol.search property is null, no error is thrown.\n", "info": " |String.prototype.search ( regexp )\n\n[...]\n2. If regexp is neither undefined nor null, then\na. Let searcher be ? GetMethod(regexp, @@search).\nb. If searcher is not undefined, then\n[...]\n[...]\n5. Return ? Invoke(rx, @@search, \u00ab string \u00bb).\n\nGetMethod ( V, P )\n\n[...]\n2. Let func be ? GetV(V, P).\n3. If func is either undefined or null, return undefined.\n", "features": ["Symbol.search"]}, {"path": "./test262-main/test/built-ins/String/prototype/search/name.js", "version": 6, "esid": " 21.1.3.15", "description": " >String.prototype.search.name is \"search\".\n", "info": " |String.prototype.search ( regexp )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/String/prototype/slice/S15.5.4.13_A9.js", "info": " |The String.prototype.slice.length property does not have the attribute\nDontDelete\n", "version": 5, "esid": " 15.5.4.13_A9", "description": " >Checking if deleting the String.prototype.slice.length property\nfails\n"}, {"path": "./test262-main/test/built-ins/String/prototype/slice/name.js", "version": 6, "esid": " 21.1.3.16", "description": " >String.prototype.slice.name is \"slice\".\n", "info": " |String.prototype.slice ( start, end )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/String/prototype/split/checking-if-deleting-the-string-prototype-split-length-property-fails.js", "info": " |The String.prototype.split.length property does not have the attribute\nDontDelete\n", "version": 5, "esid": " 15.5.4.14_A9", "description": " >Checking if deleting the String.prototype.split.length property\nfails\n"}, {"path": "./test262-main/test/built-ins/String/prototype/split/cstm-split-is-null.js", "esid": " sec-string.prototype.split", "description": " >If separator's Symbol.split property is null, no error is thrown.\n", "info": " |String.prototype.split ( separator, limit )\n\n[...]\n2. If separator is neither undefined nor null, then\na. Let splitter be ? GetMethod(separator, @@split).\nb. If splitter is not undefined, then\n[...]\n[...]\n17. Return A.\n\nGetMethod ( V, P )\n\n[...]\n2. Let func be ? GetV(V, P).\n3. If func is either undefined or null, return undefined.\n", "includes": ["compareArray.js"], "features": ["Symbol.split"]}, {"path": "./test262-main/test/built-ins/String/prototype/split/name.js", "version": 6, "esid": " 21.1.3.17", "description": " >String.prototype.split.name is \"split\".\n", "info": " |String.prototype.split ( separator, limit )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/String/prototype/split/transferred-to-custom.js", "esid": " sec-string.prototype.split", "description": " >split method can be \"transferred\" to another object\nwhose this value can be coerced to a string.\n", "info": " |String.prototype.split(separator, limit):\n\nLet O be ? RequireObjectCoercible(this value).\n...\nLet S be ? ToString(O).\n\n", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/built-ins/String/prototype/split/valueOf-is-called-for-limit-argument.js", "esid": " sec-string.prototype.split", "description": " >Calls valueOf() of limit argument\n", "info": " |String.prototype.split(separator, limit):\n\nIf limit is undefined, let lim be 232 - 1; else let lim be \u211d(? ToUint32(limit)).\n", "features": ["arrow-function"]}, {"path": "./test262-main/test/built-ins/String/prototype/startsWith/length.js", "version": 6, "esid": " 21.1.3.18", "description": " >String.prototype.startsWith.length value and descriptor.\n", "info": " |21.1.3.18 String.prototype.startsWith ( searchString [ , position ] )\n\nThe length property of the startsWith method is 1.\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/String/prototype/startsWith/name.js", "version": 6, "esid": " 21.1.3.18", "description": " >String.prototype.startsWith.name value and descriptor.\n", "info": " |21.1.3.18 String.prototype.startsWith ( searchString [ , position ] )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/String/prototype/startsWith/return-abrupt-from-position-as-symbol.js", "version": 6, "esid": " 21.1.3.18", "description": " >Returns abrupt from ToInteger(position) as a Symbol.\n", "info": " |21.1.3.18 String.prototype.startsWith ( searchString [ , position ] )\n\n...\n9. Let pos be ToInteger(position). (If position is undefined, this step\nproduces the value 0).\n10. ReturnIfAbrupt(pos).\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/String/prototype/startsWith/return-abrupt-from-searchstring-as-symbol.js", "version": 6, "esid": " 21.1.3.18", "description": " >Returns abrupt from ToString(searchString) as a Symbol\n", "info": " |21.1.3.18 String.prototype.startsWith ( searchString [ , position ] )\n\n...\n7. Let searchStr be ToString(searchString).\n8. ReturnIfAbrupt(searchString).\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/String/prototype/startsWith/return-abrupt-from-this-as-symbol.js", "version": 6, "esid": " 21.1.3.18", "description": " >Returns abrupt from ToString(this) where this is a Symbol\n", "info": " |21.1.3.18 String.prototype.startsWith ( searchString [ , position ] )\n\n1. Let O be RequireObjectCoercible(this value).\n2. Let S be ToString(O).\n3. ReturnIfAbrupt(S).\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/String/prototype/startsWith/searchstring-is-regexp-throws.js", "version": 6, "esid": " 21.1.3.18", "description": " >Throws a TypeError if searchString is a RegExp.\n", "info": " |21.1.3.18 String.prototype.startsWith ( searchString [ , position ] )\n\n...\n4. Let isRegExp be IsRegExp(searchString).\n5. ReturnIfAbrupt(isRegExp).\n6. If isRegExp is true, throw a TypeError exception.\n...\n"}, {"path": "./test262-main/test/built-ins/String/prototype/substring/S15.5.4.15_A9.js", "info": " |The String.prototype.substring.length property does not have the\nattribute DontDelete\n", "version": 5, "esid": " 15.5.4.15_A9", "description": " >Checking if deleting the String.prototype.substring.length\nproperty fails\n"}, {"path": "./test262-main/test/built-ins/String/prototype/substring/name.js", "version": 6, "esid": " 21.1.3.19", "description": " >String.prototype.substring.name is \"substring\".\n", "info": " |String.prototype.substring ( start, end )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/String/prototype/toLocaleLowerCase/S15.5.4.17_A9.js", "info": " |The String.prototype.toLocaleLowerCase.length property does not have the\nattribute DontDelete\n", "version": 5, "esid": " 15.5.4.17_A9", "description": " >Checking if deleting the String.prototype.toLocaleLowerCase.length\nproperty fails\n"}, {"path": "./test262-main/test/built-ins/String/prototype/toLocaleLowerCase/name.js", "version": 6, "esid": " 21.1.3.20", "description": " >String.prototype.toLocaleLowerCase.name is \"toLocaleLowerCase\".\n", "info": " |String.prototype.toLocaleLowerCase ( [ reserved1 [ , reserved2 ] ] )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/String/prototype/toLocaleUpperCase/S15.5.4.19_A9.js", "info": " |The String.prototype.toLocaleUpperCase.length property does not have the\nattribute DontDelete\n", "version": 5, "esid": " 15.5.4.19_A9", "description": " >Checking if deleting the String.prototype.toLocaleUpperCase.length\nproperty fails\n"}, {"path": "./test262-main/test/built-ins/String/prototype/toLocaleUpperCase/name.js", "version": 6, "esid": " 21.1.3.21", "description": " >String.prototype.toLocaleUpperCase.name is \"toLocaleUpperCase\".\n", "info": " |String.prototype.toLocaleUpperCase ( [ reserved1 [ , reserved2 ] ] )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/String/prototype/toLowerCase/S15.5.4.16_A9.js", "info": " |The String.prototype.toLowerCase.length property does not have the\nattribute DontDelete\n", "version": 5, "esid": " 15.5.4.16_A9", "description": " >Checking if deleting the String.prototype.toLowerCase.length\nproperty fails\n"}, {"path": "./test262-main/test/built-ins/String/prototype/toLowerCase/name.js", "version": 6, "esid": " 21.1.3.22", "description": " >String.prototype.toLowerCase.name is \"toLowerCase\".\n", "info": " |String.prototype.toLowerCase ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/String/prototype/toString/length.js", "esid": " sec-string.prototype.tostring", "description": " >String.prototype.toString.length is 0.\n", "info": " |ECMAScript Standard Built-in Objects\n...\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this value\nis equal to the largest number of named arguments shown in the subclause\nheadings for the function description, including optional parameters.\n...\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/String/prototype/toString/name.js", "esid": " sec-string.prototype.tostring", "description": " >String.prototype.toString.name is \"toString\".\n", "info": " |String.prototype.toString ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/String/prototype/toString/non-generic.js", "esid": " sec-string.prototype.tostring", "description": " >Throws a TypeError if called on neither String primitive nor String object\n", "info": " |String.prototype.toString ( )\n\n1. Return ? thisStringValue(this value).\n\nthisStringValue ( value )\n\n[...]\n3. Throw a TypeError exception.\n"}, {"path": "./test262-main/test/built-ins/String/prototype/toUpperCase/S15.5.4.18_A9.js", "info": " |The String.prototype.toUpperCase.length property does not have the\nattribute DontDelete\n", "version": 5, "esid": " 15.5.4.18_A9", "description": " >Checking if deleting the String.prototype.toUpperCase.length\nproperty fails\n"}, {"path": "./test262-main/test/built-ins/String/prototype/toUpperCase/name.js", "version": 6, "esid": " 21.1.3.24", "description": " >String.prototype.toUpperCase.name is \"toUpperCase\".\n", "info": " |String.prototype.toUpperCase ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/String/prototype/trim/name.js", "version": 6, "esid": " 21.1.3.25", "description": " >String.prototype.trim.name is \"trim\".\n", "info": " |String.prototype.trim ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/String/prototype/valueOf/length.js", "esid": " sec-string.prototype.valueof", "description": " >String.prototype.valueOf.length is 0.\n", "info": " |String.prototype.valueOf ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/String/prototype/valueOf/name.js", "esid": " sec-string.prototype.valueof", "description": " >String.prototype.valueOf.name is \"valueOf\".\n", "info": " |String.prototype.valueOf ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/String/prototype/valueOf/non-generic.js", "esid": " sec-string.prototype.valueof", "description": " >Throws a TypeError if called on neither String primitive nor String object\n", "info": " |String.prototype.valueOf ( )\n\n1. Return ? thisStringValue(this value).\n\nthisStringValue ( value )\n\n[...]\n3. Throw a TypeError exception.\n"}, {"path": "./test262-main/test/built-ins/String/raw/length.js", "version": 6, "esid": " 21.1.2.4", "description": " >String.raw.length value and property descriptor\n", "info": " |String.raw ( template , ...substitutions )\n\nThe length property of the raw function is 1.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/String/raw/name.js", "version": 6, "esid": " 21.1.2.4", "description": " >String.raw.name value and property descriptor\n", "info": " |String.raw ( template , ...substitutions )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/String/raw/nextkey-is-symbol-throws.js", "version": 6, "esid": " 21.1.2.4", "description": " >Throws a TypeError if nextKey is Symbol\n", "info": " |21.1.2.4 String.raw ( template , ...substitutions )\n\n...\n10. Let stringElements be a new List.\n11. Let nextIndex be 0.\n12. Repeat\na. Let nextKey be ToString(nextIndex).\nb. Let nextSeg be ToString(Get(raw, nextKey)).\nc. ReturnIfAbrupt(nextSeg).\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/String/raw/raw.js", "version": 6, "esid": " 21.1.2.4", "description": " >String.raw property descriptor\n", "info": " |String.raw ( template , ...substitutions )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/String/raw/return-empty-string-from-empty-array-length.js", "version": 6, "esid": " 21.1.2.4", "description": " >Returns empty string if template.raw an empty Array\n", "info": " |21.1.2.4 String.raw ( template , ...substitutions )\n\n...\n7. Let literalSegments be ToLength(Get(raw, \"length\")).\n8. ReturnIfAbrupt(literalSegments).\n9. If literalSegments \u2264 0, return the empty string.\n...\n"}, {"path": "./test262-main/test/built-ins/String/raw/return-empty-string-if-length-is-negative-infinity.js", "version": 6, "esid": " 21.1.2.4", "description": " >Returns empty string if template.raw.length is -Infinity\n", "info": " |21.1.2.4 String.raw ( template , ...substitutions )\n\n...\n7. Let literalSegments be ToLength(Get(raw, \"length\")).\n8. ReturnIfAbrupt(literalSegments).\n9. If literalSegments \u2264 0, return the empty string.\n...\n"}, {"path": "./test262-main/test/built-ins/String/raw/return-empty-string-if-length-is-not-defined.js", "version": 6, "esid": " 21.1.2.4", "description": " >Returns empty string if template.raw.length isn't defined.\n", "info": " |21.1.2.4 String.raw ( template , ...substitutions )\n\n...\n7. Let literalSegments be ToLength(Get(raw, \"length\")).\n8. ReturnIfAbrupt(literalSegments).\n9. If literalSegments \u2264 0, return the empty string.\n...\n"}, {"path": "./test262-main/test/built-ins/String/raw/return-empty-string-if-length-is-undefined.js", "version": 6, "esid": " 21.1.2.4", "description": " >Returns empty string if template.raw.length isn't defined.\n", "info": " |21.1.2.4 String.raw ( template , ...substitutions )\n\n...\n7. Let literalSegments be ToLength(Get(raw, \"length\")).\n8. ReturnIfAbrupt(literalSegments).\n9. If literalSegments \u2264 0, return the empty string.\n...\n"}, {"path": "./test262-main/test/built-ins/String/raw/return-empty-string-if-length-is-zero-NaN.js", "version": 6, "esid": " 21.1.2.4", "description": " >Returns empty string if template.raw.length is NaN\n", "info": " |21.1.2.4 String.raw ( template , ...substitutions )\n\n...\n7. Let literalSegments be ToLength(Get(raw, \"length\")).\n8. ReturnIfAbrupt(literalSegments).\n9. If literalSegments \u2264 0, return the empty string.\n...\n"}, {"path": "./test262-main/test/built-ins/String/raw/return-empty-string-if-length-is-zero-boolean.js", "version": 6, "esid": " 21.1.2.4", "description": " >Returns empty string if template.raw.length is false\n", "info": " |21.1.2.4 String.raw ( template , ...substitutions )\n\n...\n7. Let literalSegments be ToLength(Get(raw, \"length\")).\n8. ReturnIfAbrupt(literalSegments).\n9. If literalSegments \u2264 0, return the empty string.\n...\n"}, {"path": "./test262-main/test/built-ins/String/raw/return-empty-string-if-length-is-zero-null.js", "version": 6, "esid": " 21.1.2.4", "description": " >Returns empty string if template.raw.length is null\n", "info": " |21.1.2.4 String.raw ( template , ...substitutions )\n\n...\n7. Let literalSegments be ToLength(Get(raw, \"length\")).\n8. ReturnIfAbrupt(literalSegments).\n9. If literalSegments \u2264 0, return the empty string.\n...\n"}, {"path": "./test262-main/test/built-ins/String/raw/return-empty-string-if-length-is-zero-or-less-number.js", "version": 6, "esid": " 21.1.2.4", "description": " >Returns empty string if template.raw.length is <= 0\n", "info": " |21.1.2.4 String.raw ( template , ...substitutions )\n\n...\n7. Let literalSegments be ToLength(Get(raw, \"length\")).\n8. ReturnIfAbrupt(literalSegments).\n9. If literalSegments \u2264 0, return the empty string.\n...\n"}, {"path": "./test262-main/test/built-ins/String/raw/return-empty-string-if-length-is-zero-or-less-string.js", "version": 6, "esid": " 21.1.2.4", "description": " >Returns empty string if template.raw.length is <= 0\n", "info": " |21.1.2.4 String.raw ( template , ...substitutions )\n\n...\n7. Let literalSegments be ToLength(Get(raw, \"length\")).\n8. ReturnIfAbrupt(literalSegments).\n9. If literalSegments \u2264 0, return the empty string.\n...\n"}, {"path": "./test262-main/test/built-ins/String/raw/return-the-string-value-from-template.js", "version": 6, "esid": " 21.1.2.4", "description": " >Returns the string value.\n", "info": " |21.1.2.4 String.raw ( template , ...substitutions )\n\n...\n10. Let stringElements be a new List.\n11. Let nextIndex be 0.\n12. Repeat\na. Let nextKey be ToString(nextIndex).\nb. Let nextSeg be ToString(Get(raw, nextKey)).\nc. ReturnIfAbrupt(nextSeg).\nd. Append in order the code unit elements of nextSeg to the end of\nstringElements.\ne. If nextIndex + 1 = literalSegments, then\ni. Return the String value whose code units are, in order, the elements in\nthe List stringElements. If stringElements has no elements, the empty\nstring is returned.\n...\n"}, {"path": "./test262-main/test/built-ins/String/raw/return-the-string-value.js", "version": 6, "esid": " 21.1.2.4", "description": " >Returns the string value without substitutions arguments and limited to the\ngiven length.\n", "info": " |21.1.2.4 String.raw ( template , ...substitutions )\n\n...\n10. Let stringElements be a new List.\n11. Let nextIndex be 0.\n12. Repeat\na. Let nextKey be ToString(nextIndex).\nb. Let nextSeg be ToString(Get(raw, nextKey)).\nc. ReturnIfAbrupt(nextSeg).\nd. Append in order the code unit elements of nextSeg to the end of\nstringElements.\ne. If nextIndex + 1 = literalSegments, then\ni. Return the String value whose code units are, in order, the elements in\nthe List stringElements. If stringElements has no elements, the empty\nstring is returned.\n...\n"}, {"path": "./test262-main/test/built-ins/String/raw/returns-abrupt-from-next-key-toString.js", "version": 6, "esid": " 21.1.2.4", "description": " >Returns abrupt from nextKey.\n", "info": " |21.1.2.4 String.raw ( template , ...substitutions )\n\n...\n10. Let stringElements be a new List.\n11. Let nextIndex be 0.\n12. Repeat\na. Let nextKey be ToString(nextIndex).\nb. Let nextSeg be ToString(Get(raw, nextKey)).\nc. ReturnIfAbrupt(nextSeg).\n...\n"}, {"path": "./test262-main/test/built-ins/String/raw/returns-abrupt-from-next-key.js", "version": 6, "esid": " 21.1.2.4", "description": " >Returns abrupt from nextKey.\n", "info": " |21.1.2.4 String.raw ( template , ...substitutions )\n\n...\n10. Let stringElements be a new List.\n11. Let nextIndex be 0.\n12. Repeat\na. Let nextKey be ToString(nextIndex).\nb. Let nextSeg be ToString(Get(raw, nextKey)).\nc. ReturnIfAbrupt(nextSeg).\n...\n"}, {"path": "./test262-main/test/built-ins/String/raw/returns-abrupt-from-substitution-symbol.js", "version": 6, "esid": " 21.1.2.4", "description": " >Returns the abrupt from ToString(substitutions[nextIndex]) using a Symbol\nvalue.\n", "info": " |21.1.2.4 String.raw ( template , ...substitutions )\n\n...\n10. Let stringElements be a new List.\n11. Let nextIndex be 0.\n12. Repeat\na. Let nextKey be ToString(nextIndex).\nb. Let nextSeg be ToString(Get(raw, nextKey)).\nc. ReturnIfAbrupt(nextSeg).\nd. Append in order the code unit elements of nextSeg to the end of\nstringElements.\ne. If nextIndex + 1 = literalSegments, then\ni. Return the String value whose code units are, in order, the elements in\nthe List stringElements. If stringElements has no elements, the empty\nstring is returned.\nf. If nextIndex < numberOfSubstitutions, let next be substitutions[nextIndex].\ng. Else, let next be the empty String.\nh. Let nextSub be ToString(next).\ni. ReturnIfAbrupt(nextSub).\nj. Append in order the code unit elements of nextSub to the end of stringElements.\nk. Let nextIndex be nextIndex + 1.\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/String/raw/returns-abrupt-from-substitution.js", "version": 6, "esid": " 21.1.2.4", "description": " >Returns the abrupt from ToString(substitutions[nextIndex]).\n", "info": " |21.1.2.4 String.raw ( template , ...substitutions )\n\n...\n10. Let stringElements be a new List.\n11. Let nextIndex be 0.\n12. Repeat\na. Let nextKey be ToString(nextIndex).\nb. Let nextSeg be ToString(Get(raw, nextKey)).\nc. ReturnIfAbrupt(nextSeg).\nd. Append in order the code unit elements of nextSeg to the end of\nstringElements.\ne. If nextIndex + 1 = literalSegments, then\ni. Return the String value whose code units are, in order, the elements in\nthe List stringElements. If stringElements has no elements, the empty\nstring is returned.\nf. If nextIndex < numberOfSubstitutions, let next be substitutions[nextIndex].\ng. Else, let next be the empty String.\nh. Let nextSub be ToString(next).\ni. ReturnIfAbrupt(nextSub).\nj. Append in order the code unit elements of nextSub to the end of stringElements.\nk. Let nextIndex be nextIndex + 1.\n"}, {"path": "./test262-main/test/built-ins/String/raw/special-characters.js", "version": 6, "esid": " 21.1.2.4", "description": " >When used as a tag function of a tagged template, `String.raw` should\nreturn the \"raw\" representation of the template.\n"}, {"path": "./test262-main/test/built-ins/String/raw/substitutions-are-appended-on-same-index.js", "version": 6, "esid": " 21.1.2.4", "description": " >Returns the string value appending the substitutions on the same index order.\n", "info": " |21.1.2.4 String.raw ( template , ...substitutions )\n\n...\n10. Let stringElements be a new List.\n11. Let nextIndex be 0.\n12. Repeat\na. Let nextKey be ToString(nextIndex).\nb. Let nextSeg be ToString(Get(raw, nextKey)).\nc. ReturnIfAbrupt(nextSeg).\nd. Append in order the code unit elements of nextSeg to the end of\nstringElements.\ne. If nextIndex + 1 = literalSegments, then\ni. Return the String value whose code units are, in order, the elements in\nthe List stringElements. If stringElements has no elements, the empty\nstring is returned.\nf. If nextIndex < numberOfSubstitutions, let next be substitutions[nextIndex].\ng. Else, let next be the empty String.\nh. Let nextSub be ToString(next).\ni. ReturnIfAbrupt(nextSub).\nj. Append in order the code unit elements of nextSub to the end of stringElements.\nk. Let nextIndex be nextIndex + 1.\n"}, {"path": "./test262-main/test/built-ins/String/raw/substitutions-are-limited-to-template-raw-length.js", "version": 6, "esid": " 21.1.2.4", "description": " >Limit appended substitutions arguments to template.raw.length - 1.\n", "info": " |21.1.2.4 String.raw ( template , ...substitutions )\n\n...\n10. Let stringElements be a new List.\n11. Let nextIndex be 0.\n12. Repeat\na. Let nextKey be ToString(nextIndex).\nb. Let nextSeg be ToString(Get(raw, nextKey)).\nc. ReturnIfAbrupt(nextSeg).\nd. Append in order the code unit elements of nextSeg to the end of\nstringElements.\ne. If nextIndex + 1 = literalSegments, then\ni. Return the String value whose code units are, in order, the elements in\nthe List stringElements. If stringElements has no elements, the empty\nstring is returned.\n...\n"}, {"path": "./test262-main/test/built-ins/String/raw/template-length-is-symbol-throws.js", "version": 6, "esid": " 21.1.2.4", "description": " >Returns abrupt completion from ToLength(template.raw.length).\n", "info": " |21.1.2.4 String.raw ( template , ...substitutions )\n\n1. Let substitutions be a List consisting of all of the arguments passed to\nthis function, starting with the second argument. If fewer than two arguments\nwere passed, the List is empty.\n2. Let numberOfSubstitutions be the number of elements in substitutions.\n3. Let cooked be ToObject(template).\n4. ReturnIfAbrupt(cooked).\n5. Let raw be ToObject(Get(cooked, \"raw\")).\n6. ReturnIfAbrupt(raw).\n7. Let literalSegments be ToLength(Get(raw, \"length\")).\n8. ReturnIfAbrupt(literalSegments).\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/String/raw/template-length-throws.js", "version": 6, "esid": " 21.1.2.4", "description": " >Returns abrupt completion from ToObject(template.raw.length).\n", "info": " |21.1.2.4 String.raw ( template , ...substitutions )\n\n1. Let substitutions be a List consisting of all of the arguments passed to\nthis function, starting with the second argument. If fewer than two arguments\nwere passed, the List is empty.\n2. Let numberOfSubstitutions be the number of elements in substitutions.\n3. Let cooked be ToObject(template).\n4. ReturnIfAbrupt(cooked).\n5. Let raw be ToObject(Get(cooked, \"raw\")).\n6. ReturnIfAbrupt(raw).\n7. Let literalSegments be ToLength(Get(raw, \"length\")).\n8. ReturnIfAbrupt(literalSegments).\n"}, {"path": "./test262-main/test/built-ins/String/raw/template-raw-throws.js", "version": 6, "esid": " 21.1.2.4", "description": " >Returns abrupt completion from ToObject(template.raw).\n", "info": " |21.1.2.4 String.raw ( template , ...substitutions )\n\n1. Let substitutions be a List consisting of all of the arguments passed to\nthis function, starting with the second argument. If fewer than two arguments\nwere passed, the List is empty.\n2. Let numberOfSubstitutions be the number of elements in substitutions.\n3. Let cooked be ToObject(template).\n4. ReturnIfAbrupt(cooked).\n5. Let raw be ToObject(Get(cooked, \"raw\")).\n6. ReturnIfAbrupt(raw).\n"}, {"path": "./test262-main/test/built-ins/String/raw/template-substitutions-are-appended-on-same-index.js", "version": 6, "esid": " 21.1.2.4", "description": " >Returns the string value appending from the same index order using String.raw\nas a tag function.\n", "info": " |21.1.2.4 String.raw ( template , ...substitutions )\n\n...\n10. Let stringElements be a new List.\n11. Let nextIndex be 0.\n12. Repeat\na. Let nextKey be ToString(nextIndex).\nb. Let nextSeg be ToString(Get(raw, nextKey)).\nc. ReturnIfAbrupt(nextSeg).\nd. Append in order the code unit elements of nextSeg to the end of\nstringElements.\ne. If nextIndex + 1 = literalSegments, then\ni. Return the String value whose code units are, in order, the elements in\nthe List stringElements. If stringElements has no elements, the empty\nstring is returned.\nf. If nextIndex < numberOfSubstitutions, let next be substitutions[nextIndex].\ng. Else, let next be the empty String.\nh. Let nextSub be ToString(next).\ni. ReturnIfAbrupt(nextSub).\nj. Append in order the code unit elements of nextSub to the end of stringElements.\nk. Let nextIndex be nextIndex + 1.\n"}, {"path": "./test262-main/test/built-ins/String/raw/zero-literal-segments.js", "version": 6, "esid": " 21.1.2.4", "description": " >If literalSegments \u2264 0, return the empty string.\n"}, {"path": "./test262-main/test/built-ins/String/symbol-string-coercion.js", "esid": " sec-string-constructor", "description": " Symbol value may be coerced to a String", "info": " |1. If no arguments were passed to this function invocation, let s be \"\".\n2. Else,\na. If NewTarget is undefined and Type(value) is Symbol, return\nSymbolDescriptiveString(value).\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/String/symbol-wrapping.js", "esid": " sec-string-constructor", "description": " Symbol value may not be wrapped", "info": " |1. If no arguments were passed to this function invocation, let s be \"\".\n2. Else,\na. If NewTarget is undefined and Type(value) is Symbol, return\nSymbolDescriptiveString(value).\nb. Let s be ? ToString(value).\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/StringIteratorPrototype/next/length.js", "version": 6, "esid": " 21.1.5.2.1", "description": " >%StringIteratorPrototype%.next.length is 0.\n", "info": " |%StringIteratorPrototype%.next ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/built-ins/StringIteratorPrototype/next/name.js", "version": 6, "esid": " 21.1.5.2.1", "description": " >%StringIteratorPrototype%.next.name is \"next\".\n", "info": " |%StringIteratorPrototype%.next ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/built-ins/StringIteratorPrototype/next/next-iteration-surrogate-pairs.js", "version": 6, "esid": " 21.1.5.2.1", "description": " >Iteration should respect UTF-16-encoded Unicode code points specified via\nsurrogate pairs.\n", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/built-ins/StringIteratorPrototype/next/next-iteration.js", "version": 6, "esid": " 21.1.5.2.1", "description": " >Iteration should visit each UTF-8 code point exactly once.\n", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/built-ins/StringIteratorPrototype/next/next-missing-internal-slots.js", "esid": " sec-properties-of-string-iterator-instances", "description": " >If the `this` value does not have all of the internal slots of an String\nIterator Instance (21.1.5.3), throw a `TypeError` exception.\n", "info": " |...\nIf O does not have all of the internal slots of a String Iterator Instance (21.1.5.3),\nthrow a TypeError exception.\n...\n\n", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/built-ins/Symbol/auto-boxing-non-strict.js", "version": 6, "esid": " 19.4", "description": " >Symbol ToObject auto-boxing\n", "flags": ["noStrict"], "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Symbol/constructor.js", "version": 6, "esid": " 19.4.3.1", "description": " >Symbol constructor\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Symbol/desc-to-string-symbol.js", "esid": " sec-symbol-constructor", "description": " The first argument is coerced to a String value (from a Symbol)", "info": " |1. If NewTarget is not undefined, throw a TypeError exception.\n2. If description is undefined, let descString be undefined.\n2. Else, let descString be ? ToString(description).\n3. Return a new unique Symbol value whose [[Description]] value is\ndescString.\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Symbol/desc-to-string.js", "esid": " sec-symbol-constructor", "description": " The first argument is coerced to a String value (from an object)", "info": " |1. If NewTarget is not undefined, throw a TypeError exception.\n2. If description is undefined, let descString be undefined.\n2. Else, let descString be ? ToString(description).\n3. Return a new unique Symbol value whose [[Description]] value is\ndescString.\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Symbol/for/create-value.js", "esid": " sec-symbol.for", "description": " Creation of a unique Symbol value", "info": " |1. Let stringKey be ? ToString(key).\n2. For each element e of the GlobalSymbolRegistry List,\na. If SameValue(e.[[Key]], stringKey) is true, return e.[[Symbol]].\n3. Assert: GlobalSymbolRegistry does not currently contain an entry for\nstringKey.\n4. Let newSymbol be a new unique Symbol value whose [[Description]] value\nis stringKey.\n5. Append the Record { [[Key]]: stringKey, [[Symbol]]: newSymbol } to the\nGlobalSymbolRegistry List.\n6. Return newSymbol. \n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Symbol/for/length.js", "version": 6, "esid": " 19.4.2.1", "description": " >Symbol.for.length is 1.\n", "info": " |Symbol.for ( key )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Symbol/for/name.js", "version": 6, "esid": " 19.4.2.1", "description": " >Symbol.for.name is \"for\".\n", "info": " |Symbol.for ( key )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Symbol/for/not-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >Symbol.for does not implement [[Construct]], is not new-able\n", "info": " |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n", "includes": ["isConstructor.js"], "features": ["Reflect.construct", "Symbol", "arrow-function"]}, {"path": "./test262-main/test/built-ins/Symbol/for/prop-desc.js", "esid": " sec-symbol.for", "description": " Property descriptor", "info": " |Every other data property described in clauses 18 through 26 and in Annex\nB.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false,\n[[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js"], "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Symbol/for/retrieve-value.js", "esid": " sec-symbol.for", "description": " Retrieval of previously-created value", "info": " |1. Let stringKey be ? ToString(key).\n2. For each element e of the GlobalSymbolRegistry List,\na. If SameValue(e.[[Key]], stringKey) is true, return e.[[Symbol]].\n3. Assert: GlobalSymbolRegistry does not currently contain an entry for\nstringKey.\n4. Let newSymbol be a new unique Symbol value whose [[Description]] value\nis stringKey.\n5. Append the Record { [[Key]]: stringKey, [[Symbol]]: newSymbol } to the\nGlobalSymbolRegistry List.\n6. Return newSymbol. \n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Symbol/for/to-string-err.js", "esid": " sec-symbol.for", "description": " Error resulting from string coercion of first argument", "info": " |1. Let stringKey be ? ToString(key).\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Symbol/invoked-with-new.js", "esid": " sec-symbol-constructor", "description": " The Symbol constructor may not be invoked with `new`", "info": " |1. If NewTarget is not undefined, throw a TypeError exception.\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Symbol/iterator/prop-desc.js", "version": 6, "esid": " 19.4.2.4", "description": " >`Symbol.iterator` property descriptor\n", "info": " |This property has the attributes { [[Writable]]: false, [[Enumerable]]:\nfalse, [[Configurable]]: false }.\n", "includes": ["propertyHelper.js"], "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/built-ins/Symbol/keyFor/arg-non-symbol.js", "esid": " sec-symbol.keyfor", "description": " Called with a non-symbol argument", "info": " |1. If Type(sym) is not Symbol, throw a TypeError exception.\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Symbol/keyFor/arg-symbol-registry-hit.js", "esid": " sec-symbol.keyfor", "description": " Called with Symbol value that exists in the global symbol registry", "info": " |1. If Type(sym) is not Symbol, throw a TypeError exception.\n2. For each element e of the GlobalSymbolRegistry List (see 19.4.2.1),\na. If SameValue(e.[[Symbol]], sym) is true, return e.[[Key]].\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Symbol/keyFor/arg-symbol-registry-miss.js", "esid": " sec-symbol.keyfor", "description": " >Called with Symbol value that does not exist in the global symbol registry\n", "info": " |1. If Type(sym) is not Symbol, throw a TypeError exception.\n2. For each element e of the GlobalSymbolRegistry List (see 19.4.2.1),\na. If SameValue(e.[[Symbol]], sym) is true, return e.[[Key]].\n3. Assert: GlobalSymbolRegistry does not currently contain an entry for\nsym.\n4. Return undefined. \n", "features": ["Symbol.iterator", "Symbol"]}, {"path": "./test262-main/test/built-ins/Symbol/keyFor/length.js", "version": 6, "esid": " 19.4.2.5", "description": " >Symbol.keyFor.length is 1.\n", "info": " |Symbol.keyFor ( sym )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Symbol/keyFor/name.js", "version": 6, "esid": " 19.4.2.5", "description": " >Symbol.keyFor.name is \"keyFor\".\n", "info": " |Symbol.keyFor ( sym )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Symbol/keyFor/not-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >Symbol.keyFor does not implement [[Construct]], is not new-able\n", "info": " |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n", "includes": ["isConstructor.js"], "features": ["Reflect.construct", "Symbol", "arrow-function"]}, {"path": "./test262-main/test/built-ins/Symbol/keyFor/prop-desc.js", "esid": " sec-symbol.keyfor", "description": " Property descriptor", "info": " |Every other data property described in clauses 18 through 26 and in Annex\nB.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false,\n[[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js"], "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Symbol/name.js", "esid": " sec-symbol-constructor", "description": " >Symbol ( [ description ] )\n\n", "includes": ["propertyHelper.js"], "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Symbol/not-callable.js", "esid": " sec-properties-of-symbol-instances", "description": " >Symbol primitives and objects are not callable.\n", "info": " |Properties of Symbol Instances\n\nSymbol instances are ordinary objects that inherit properties from the\nSymbol prototype object. Symbol instances have a [[SymbolData]] internal slot.\nThe [[SymbolData]] internal slot is the Symbol value represented by this\nSymbol object.\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Symbol/prototype/Symbol.toPrimitive/this-val-obj-non-symbol-wrapper.js", "version": 6, "esid": " 19.4.3.4", "description": " >Behavior when `this` value is an object without a [[SymbolData]] internal\nslot\n", "info": " |1. Let s be the this value.\n2. If Type(s) is Symbol, return s.\n3. If Type(s) is not Object, throw a TypeError exception.\n4. If s does not have a [[SymbolData]] internal slot, throw a TypeError\nexception.\n", "features": ["Symbol.toPrimitive"]}, {"path": "./test262-main/test/built-ins/Symbol/prototype/constructor.js", "esid": " sec-symbol.prototype.constructor", "description": " Property descriptor", "info": " |Every other data property described in clauses 18 through 26 and in Annex\nB.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false,\n[[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js"], "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Symbol/prototype/description/is-not-own-property.js", "esid": " sec-symbol.prototype.description", "description": " Ensure that 'description' is not an own property of Symbols", "features": ["Symbol.prototype.description"]}, {"path": "./test262-main/test/built-ins/Symbol/prototype/intrinsic.js", "version": 6, "esid": " 19.4.3", "description": " >Symbol prototype\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Symbol/prototype/toString/length.js", "version": 6, "esid": " 19.4.3.2", "description": " >Symbol.prototype.toString.length is 0.\n", "info": " |Symbol.prototype.toString ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Symbol/prototype/toString/name.js", "version": 6, "esid": " 19.4.3.2", "description": " >Symbol.prototype.toString.name is \"toString\".\n", "info": " |Symbol.prototype.toString ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Symbol/prototype/toString/not-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >Symbol.prototype.toString does not implement [[Construct]], is not new-able\n", "info": " |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n", "includes": ["isConstructor.js"], "features": ["Reflect.construct", "Symbol", "arrow-function"]}, {"path": "./test262-main/test/built-ins/Symbol/prototype/toString/prop-desc.js", "esid": " sec-symbol.prototype.tostring", "description": " Property descriptor", "info": " |Every other data property described in clauses 18 through 26 and in Annex\nB.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false,\n[[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js"], "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Symbol/prototype/toString/toString-default-attributes-non-strict.js", "version": 6, "esid": " 19.4", "description": " >Symbol property get and set, non-strict\n", "flags": ["noStrict"], "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Symbol/prototype/toString/toString.js", "version": 6, "esid": " 19.4.3.2", "description": " >toString operations on Symbols\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Symbol/prototype/toString/undefined.js", "esid": " sec-symbol-constructor", "description": " The value \"undefined\" is reported as the empty string", "info": " |1. If NewTarget is not undefined, throw a TypeError exception.\n2. If description is undefined, let descString be undefined.\n2. Else, let descString be ? ToString(description).\n3. Return a new unique Symbol value whose [[Description]] value is\ndescString.\n\n19.4.3.2.1 Runtime Semantics: SymbolDescriptiveString\n\n1. Assert: Type(sym) is Symbol.\n2. Let desc be sym's [[Description]] value.\n3. If desc is undefined, let desc be the empty string.\n4. Assert: Type(desc) is String.\n5. Return the result of concatenating the strings \"Symbol(\", desc, and \")\".\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Symbol/prototype/valueOf/length.js", "version": 6, "esid": " 19.4.3.3", "description": " >Symbol.prototype.valueOf.length is 0.\n", "info": " |Symbol.prototype.valueOf ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Symbol/prototype/valueOf/name.js", "version": 6, "esid": " 19.4.3.3", "description": " >Symbol.prototype.valueOf.name is \"valueOf\".\n", "info": " |Symbol.prototype.valueOf ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Symbol/prototype/valueOf/not-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >Symbol.prototype.valueOf does not implement [[Construct]], is not new-able\n", "info": " |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n", "includes": ["isConstructor.js"], "features": ["Reflect.construct", "Symbol", "arrow-function"]}, {"path": "./test262-main/test/built-ins/Symbol/prototype/valueOf/prop-desc.js", "esid": " sec-symbol.prototype.valueof", "description": " Property descriptor", "info": " |Every other data property described in clauses 18 through 26 and in Annex\nB.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false,\n[[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js"], "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Symbol/prototype/valueOf/this-val-non-obj.js", "esid": " sec-symbol.prototype.valueof", "description": " Called on a value that is neither a Symbol nor an Object", "info": " |1. Let s be the this value.\n2. If Type(s) is Symbol, return s.\n3. If Type(s) is not Object, throw a TypeError exception.\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Symbol/prototype/valueOf/this-val-obj-non-symbol.js", "esid": " sec-symbol.prototype.valueof", "description": " Called on an Object value that is not a Symbol object", "info": " |1. Let s be the this value.\n2. If Type(s) is Symbol, return s.\n3. If Type(s) is not Object, throw a TypeError exception.\n4. If s does not have a [[SymbolData]] internal slot, throw a TypeError exception.\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Symbol/prototype/valueOf/this-val-obj-symbol.js", "esid": " sec-symbol.prototype.valueof", "description": " Called on a Symbol Object value", "info": " |1. Let s be the this value.\n2. If Type(s) is Symbol, return s.\n3. If Type(s) is not Object, throw a TypeError exception.\n4. If s does not have a [[SymbolData]] internal slot, throw a TypeError exception.\n5. Return the value of s's [[SymbolData]] internal slot. \n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Symbol/prototype/valueOf/this-val-symbol.js", "esid": " sec-symbol.prototype.valueof", "description": " Called on a Symbol value", "info": " |1. Let s be the this value.\n2. If Type(s) is Symbol, return s.\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Symbol/symbol.js", "esid": " sec-symbol-constructor", "description": " >The Symbol constructor is the %Symbol% intrinsic object and the initial\nvalue of the Symbol property of the global object.\n\n", "includes": ["propertyHelper.js"], "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/Symbol/uniqueness.js", "esid": " sec-symbol-constructor", "description": " The Symbol constructor returns a unique value", "info": " |1. If NewTarget is not undefined, throw a TypeError exception.\n2. If description is undefined, let descString be undefined.\n2. Else, let descString be ? ToString(description).\n3. Return a new unique Symbol value whose [[Description]] value is\ndescString.\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/ThrowTypeError/forbidden-arguments.js", "esid": " sec-%throwtypeerror%", "description": " >%ThrowTypeError% does not have an own \"arguments\" property.\n", "info": " |%ThrowTypeError% ( )\n\nThe %ThrowTypeError% intrinsic is an anonymous built-in function\nobject that is defined once for each realm.\n\n16.2 Forbidden Extensions\n\nOther than as defined in this specification, ECMAScript Function\nobjects defined using syntactic constructors in strict mode code\nmust not be created with own properties named \"caller\" or\n\"arguments\" other than those that are created by applying the\nAddRestrictedFunctionProperties abstract operation (9.2.7) to\nthe function. [...] Built-in functions, strict mode functions\ncreated using the Function constructor, generator functions\ncreated using the Generator constructor, and functions created\nusing the bind method also must not be created with such own\nproperties.\n"}, {"path": "./test262-main/test/built-ins/ThrowTypeError/forbidden-caller.js", "esid": " sec-%throwtypeerror%", "description": " >%ThrowTypeError% does not have an own \"caller\" property.\n", "info": " |%ThrowTypeError% ( )\n\nThe %ThrowTypeError% intrinsic is an anonymous built-in function\nobject that is defined once for each realm.\n\n16.2 Forbidden Extensions\n\nOther than as defined in this specification, ECMAScript Function\nobjects defined using syntactic constructors in strict mode code\nmust not be created with own properties named \"caller\" or\n\"arguments\" other than those that are created by applying the\nAddRestrictedFunctionProperties abstract operation (9.2.7) to\nthe function. [...] Built-in functions, strict mode functions\ncreated using the Function constructor, generator functions\ncreated using the Generator constructor, and functions created\nusing the bind method also must not be created with such own\nproperties.\n"}, {"path": "./test262-main/test/built-ins/TypedArray/from/arylk-get-length-error.js", "esid": " sec-%typedarray%.from", "description": " Returns error produced by accessing array-like's length", "info": " |22.2.2.1 %TypedArray%.from ( source [ , mapfn [ , thisArg ] ] )\n\n...\n7. Let len be ? ToLength(? Get(arrayLike, \"length\")).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/from/arylk-to-length-error.js", "esid": " sec-%typedarray%.from", "description": " Returns error produced by interpreting length property as a length", "info": " |22.2.2.1 %TypedArray%.from ( source [ , mapfn [ , thisArg ] ] )\n\n...\n7. Let len be ? ToLength(? Get(arrayLike, \"length\")).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/from/iter-access-error.js", "esid": " sec-%typedarray%.from", "description": " Returns error produced by accessing @@iterator", "info": " |22.2.2.1 %TypedArray%.from ( source [ , mapfn [ , thisArg ] ] )\n\n...\n6. Let arrayLike be ? IterableToArrayLike(source).\n...\n\n22.2.2.1.1 Runtime Semantics: IterableToArrayLike( items )\n\n1. Let usingIterator be ? GetMethod(items, @@iterator).\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol.iterator", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/from/iter-invoke-error.js", "esid": " sec-%typedarray%.from", "description": " Returns error produced by invoking @@iterator", "info": " |22.2.2.1 %TypedArray%.from ( source [ , mapfn [ , thisArg ] ] )\n\n...\n6. Let arrayLike be ? IterableToArrayLike(source).\n...\n\n22.2.2.1.1 Runtime Semantics: IterableToArrayLike( items )\n\n1. Let usingIterator be ? GetMethod(items, @@iterator).\n2. If usingIterator is not undefined, then\na. Let iterator be ? GetIterator(items, usingIterator).\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol.iterator", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/from/iter-next-error.js", "esid": " sec-%typedarray%.from", "description": " Returns error produced by advancing the iterator", "info": " |22.2.2.1.1 Runtime Semantics: IterableToArrayLike( items )\n\n2. If usingIterator is not undefined, then\n...\nd. Repeat, while next is not false\ni. Let next be ? IteratorStep(iterator).\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol.iterator", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/from/iter-next-value-error.js", "esid": " sec-%typedarray%.from", "description": " Returns error produced by accessing iterated value", "info": " |22.2.2.1.1 Runtime Semantics: IterableToArrayLike( items )\n\n2. If usingIterator is not undefined, then\n...\nd. Repeat, while next is not false\n...\nii. If next is not false, then\n1. Let nextValue be ? IteratorValue(next).\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol.iterator", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/from/length.js", "esid": " sec-%typedarray%.from", "description": " >%TypedArray%.from.length is 1.\n", "info": " |%TypedArray%.from ( source [ , mapfn [ , thisArg ] ] )\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery built-in Function object, including constructors, has a length property\nwhose value is an integer. Unless otherwise specified, this value is equal to\nthe largest number of named arguments shown in the subclause headings for the\nfunction description. Optional parameters (which are indicated with brackets:\n[ ]) or rest parameters (which are shown using the form \u00ab...name\u00bb) are not\nincluded in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function object\nhas the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/from/mapfn-is-not-callable.js", "esid": " sec-%typedarray%.from", "description": " Throw a TypeError exception is mapfn is not callable", "info": " |22.2.2.1 %TypedArray%.from ( source [ , mapfn [ , thisArg ] ] )\n\n...\n3. If mapfn was supplied and mapfn is not undefined, then\na. If IsCallable(mapfn) is false, throw a TypeError exception.\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "Symbol.iterator", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/from/name.js", "version": 6, "esid": " 22.2.2.1", "description": " >%TypedArray%.from.name is \"from\".\n", "info": " |%TypedArray%.from ( source [ , mapfn [ , thisArg ] ] )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/from/prop-desc.js", "version": 6, "esid": " 22.2.2.1", "description": " >\"from\" property of TypedArray\n", "info": " |ES6 section 17: Every other data property described in clauses 18 through 26\nand in Annex B.2 has the attributes { [[Writable]]: true,\n[[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/name.js", "esid": " sec-%typedarray%", "description": " >TypedArray has a 'name' property whose value is \"TypedArray\".\n", "info": " |22.2.2 Properties of the %TypedArray% Intrinsic Object\n\nBesides a length property whose value is 3 and a name property whose value is\n\"TypedArray\", %TypedArray% has the following properties:\n...\n\nES6 section 17: Unless otherwise specified, the name property of a built-in\nFunction object, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/of/length.js", "esid": " sec-%typedarray%-of", "description": " >%TypedArray%.of.length is 0.\n", "info": " |%TypedArray%.of ( ...items )\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery built-in Function object, including constructors, has a length property\nwhose value is an integer. Unless otherwise specified, this value is equal to\nthe largest number of named arguments shown in the subclause headings for the\nfunction description. Optional parameters (which are indicated with brackets:\n[ ]) or rest parameters (which are shown using the form \u00ab...name\u00bb) are not\nincluded in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function object\nhas the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/of/name.js", "version": 6, "esid": " 22.2.2.2", "description": " >%TypedArray%.of.name is \"of\".\n", "info": " |%TypedArray%.of ( ...items )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/of/prop-desc.js", "version": 6, "esid": " 22.2.2.2", "description": " >\"of\" property of TypedArray\n", "info": " |ES6 section 17: Every other data property described in clauses 18 through 26\nand in Annex B.2 has the attributes { [[Writable]]: true,\n[[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/Symbol.iterator/not-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >TypedArray.prototype[Symbol.iterator] does not implement [[Construct]], is not new-able\n", "info": " |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n", "includes": ["isConstructor.js", "testTypedArray.js"], "features": ["Reflect.construct", "Symbol", "Symbol.iterator", "arrow-function", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/Symbol.iterator.js", "esid": " sec-%typedarray%.prototype-@@iterator", "description": " >Initial state of the Symbol.iterator property\n", "info": " |The initial value of the @@iterator property is the same function object\nas the initial value of the %TypedArray%.prototype.values property.\n\nPer ES6 section 17, the method should exist on the %TypedArray% prototype, and it\nshould be writable and configurable, but not enumerable.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/Symbol.toStringTag/BigInt/invoked-as-accessor.js", "esid": " sec-get-%typedarray%.prototype-@@tostringtag", "description": " >Return undefined if this value does not have a [[TypedArrayName]] internal slot\n", "info": " |22.2.3.31 get %TypedArray%.prototype [ @@toStringTag ]\n\n1. Let O be the this value.\n...\n3. If O does not have a [[TypedArrayName]] internal slot, return undefined.\n...\n", "includes": ["testBigIntTypedArray.js"], "features": ["BigInt", "Symbol.toStringTag", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/Symbol.toStringTag/invoked-as-accessor.js", "esid": " sec-get-%typedarray%.prototype-@@tostringtag", "description": " >Return undefined if this value does not have a [[TypedArrayName]] internal slot\n", "info": " |22.2.3.31 get %TypedArray%.prototype [ @@toStringTag ]\n\n1. Let O be the this value.\n...\n3. If O does not have a [[TypedArrayName]] internal slot, return undefined.\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol.toStringTag", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/buffer/invoked-as-func.js", "esid": " sec-get-%typedarray%.prototype.buffer", "description": " Throws a TypeError exception when invoked as a function", "info": " |22.2.3.1 get %TypedArray%.prototype.buffer\n\n1. Let O be the this value.\n2. If Type(O) is not Object, throw a TypeError exception.\n3. If O does not have a [[ViewedArrayBuffer]] internal slot, throw a TypeError\nexception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/buffer/length.js", "esid": " sec-get-%typedarray%.prototype.buffer", "description": " >get %TypedArray%.prototype.buffer.length is 0.\n", "info": " |get %TypedArray%.prototype.buffer\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/buffer/prop-desc.js", "esid": " sec-get-%typedarray%.prototype.buffer", "description": " >\"buffer\" property of TypedArrayPrototype\n", "info": " |%TypedArray%.prototype.buffer is an accessor property whose set accessor\nfunction is undefined.\n\nSection 17: Every accessor property described in clauses 18 through 26 and in\nAnnex B.2 has the attributes {[[Enumerable]]: false, [[Configurable]]: true }\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/buffer/this-has-no-typedarrayname-internal.js", "esid": " sec-get-%typedarray%.prototype.buffer", "description": " >Throws a TypeError exception when `this` does not have a [[TypedArrayName]]\ninternal slot\n", "info": " |22.2.3.1 get %TypedArray%.prototype.buffer\n\n1. Let O be the this value.\n2. If Type(O) is not Object, throw a TypeError exception.\n3. If O does not have a [[TypedArrayName]] internal slot, throw a TypeError\nexception.\n...\n", "includes": ["testTypedArray.js"], "features": ["DataView", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/buffer/this-inherits-typedarray.js", "esid": " sec-get-%typedarray%.prototype.buffer", "description": " >Throws a TypeError exception when `this` does not have a [[TypedArrayName]]\ninternal slot, even if its prototype does\n", "info": " |22.2.3.1 get %TypedArray%.prototype.buffer\n\n1. Let O be the this value.\n2. If Type(O) is not Object, throw a TypeError exception.\n3. If O does not have a [[TypedArrayName]] internal slot, throw a TypeError\nexception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/buffer/this-is-not-object.js", "esid": " sec-get-%typedarray%.prototype.buffer", "description": " Throws a TypeError exception when `this` is not Object", "info": " |22.2.3.1 get %TypedArray%.prototype.buffer\n\n1. Let O be the this value.\n2. If Type(O) is not Object, throw a TypeError exception.\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/byteLength/invoked-as-func.js", "esid": " sec-get-%typedarray%.prototype.bytelength", "description": " Throws a TypeError exception when invoked as a function", "info": " |22.2.3.2 get %TypedArray%.prototype.byteLength\n\n1. Let O be the this value.\n2. If Type(O) is not Object, throw a TypeError exception.\n3. If O does not have a [[ViewedArrayBuffer]] internal slot, throw a TypeError\nexception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/byteLength/length.js", "esid": " sec-get-%typedarray%.prototype.bytelength", "description": " >get %TypedArray%.prototype.byteLength.length is 0.\n", "info": " |get %TypedArray%.prototype.byteLength\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/byteLength/prop-desc.js", "esid": " sec-get-%typedarray%.prototype.bytelength", "description": " >\"byteLength\" property of TypedArrayPrototype\n", "info": " |%TypedArray%.prototype.byteLength is an accessor property whose set accessor\nfunction is undefined.\n\nSection 17: Every accessor property described in clauses 18 through 26 and in\nAnnex B.2 has the attributes {[[Enumerable]]: false, [[Configurable]]: true }\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/byteLength/this-has-no-typedarrayname-internal.js", "esid": " sec-get-%typedarray%.prototype.bytelength", "description": " >Throws a TypeError exception when `this` does not have a [[TypedArrayName]]\ninternal slot\n", "info": " |22.2.3.2 get %TypedArray%.prototype.byteLength\n\n1. Let O be the this value.\n2. If Type(O) is not Object, throw a TypeError exception.\n3. If O does not have a [[TypedArrayName]] internal slot, throw a TypeError\nexception.\n...\n", "includes": ["testTypedArray.js"], "features": ["DataView", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/byteLength/this-is-not-object.js", "esid": " sec-get-%typedarray%.prototype.bytelength", "description": " Throws a TypeError exception when `this` is not Object", "info": " |22.2.3.2 get %TypedArray%.prototype.byteLength\n\n1. Let O be the this value.\n2. If Type(O) is not Object, throw a TypeError exception.\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/byteOffset/invoked-as-func.js", "esid": " sec-get-%typedarray%.prototype.byteoffset", "description": " Throws a TypeError exception when invoked as a function", "info": " |22.2.3.3 get %TypedArray%.prototype.byteOffset\n\n1. Let O be the this value.\n2. If Type(O) is not Object, throw a TypeError exception.\n3. If O does not have a [[ViewedArrayBuffer]] internal slot, throw a TypeError\nexception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/byteOffset/length.js", "esid": " sec-get-%typedarray%.prototype.byteoffset", "description": " >get %TypedArray%.prototype.byteOffset.length is 0.\n", "info": " |get %TypedArray%.prototype.byteOffset\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/byteOffset/prop-desc.js", "esid": " sec-get-%typedarray%.prototype.byteoffset", "description": " >\"byteOffset\" property of TypedArrayPrototype\n", "info": " |%TypedArray%.prototype.byteOffset is an accessor property whose set accessor\nfunction is undefined.\n\nSection 17: Every accessor property described in clauses 18 through 26 and in\nAnnex B.2 has the attributes {[[Enumerable]]: false, [[Configurable]]: true }\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/byteOffset/this-has-no-typedarrayname-internal.js", "esid": " sec-get-%typedarray%.prototype.byteoffset", "description": " >Throws a TypeError exception when `this` does not have a [[TypedArrayName]]\ninternal slot\n", "info": " |22.2.3.3 get %TypedArray%.prototype.byteOffset\n\n1. Let O be the this value.\n2. If Type(O) is not Object, throw a TypeError exception.\n3. If O does not have a [[TypedArrayName]] internal slot, throw a TypeError\nexception.\n...\n", "includes": ["testTypedArray.js"], "features": ["DataView", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/byteOffset/this-is-not-object.js", "esid": " sec-get-%typedarray%.prototype.byteoffset", "description": " Throws a TypeError exception when `this` is not Object", "info": " |22.2.3.3 get %TypedArray%.prototype.byteOffset\n\n1. Let O be the this value.\n2. If Type(O) is not Object, throw a TypeError exception.\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/constructor.js", "esid": " sec-%typedarray%.prototype.constructor", "description": " >Initial state of the constructor property\n", "info": " |The initial value of %TypedArray%.prototype.constructor is the %TypedArray% intrinsic object.\n\nPer ES6 section 17, the method should exist on the %TypedArray% prototype, and it\nshould be writable and configurable, but not enumerable.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/copyWithin/bit-precision.js", "esid": " sec-%typedarray%.prototype.copywithin", "description": " Preservation of bit-level encoding", "info": " |Array.prototype.copyWithin (target, start [ , end ] )\n\n12. Repeat, while count > 0\n[...]\nd. If fromPresent is true, then\ni. Let fromVal be ? Get(O, fromKey).\nii. Perform ? Set(O, toKey, fromVal, true).\n", "includes": ["nans.js", "compareArray.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/copyWithin/coerced-values-end.js", "esid": " sec-%typedarray%.prototype.copywithin", "description": " >end argument is coerced to an integer values.\n", "info": " |22.2.3.5 %TypedArray%.prototype.copyWithin (target, start [ , end ] )\n\n%TypedArray%.prototype.copyWithin is a distinct function that implements the\nsame algorithm as Array.prototype.copyWithin as defined in 22.1.3.3 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\" and the actual copying of values in step 12\nmust be performed in a manner that preserves the bit-level encoding of the\nsource data.\n\n...\n\n22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )\n\n...\n7. If end is undefined, let relativeEnd be len; else let relativeEnd be ?\nToInteger(end).\n...\n", "includes": ["compareArray.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/copyWithin/coerced-values-start.js", "esid": " sec-%typedarray%.prototype.copywithin", "description": " >start argument is coerced to an integer value.\n", "info": " |22.2.3.5 %TypedArray%.prototype.copyWithin (target, start [ , end ] )\n\n%TypedArray%.prototype.copyWithin is a distinct function that implements the\nsame algorithm as Array.prototype.copyWithin as defined in 22.1.3.3 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\" and the actual copying of values in step 12\nmust be performed in a manner that preserves the bit-level encoding of the\nsource data.\n\n...\n\n22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )\n\n...\n5. Let relativeStart be ? ToInteger(start).\n...\n", "includes": ["compareArray.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/copyWithin/coerced-values-target.js", "esid": " sec-%typedarray%.prototype.copywithin", "description": " >target argument is coerced to an integer value.\n", "info": " |22.2.3.5 %TypedArray%.prototype.copyWithin (target, start [ , end ] )\n\n%TypedArray%.prototype.copyWithin is a distinct function that implements the\nsame algorithm as Array.prototype.copyWithin as defined in 22.1.3.3 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\" and the actual copying of values in step 12\nmust be performed in a manner that preserves the bit-level encoding of the\nsource data.\n\n...\n\n22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )\n\n...\n3. Let relativeTarget be ? ToInteger(target).\n...\n", "includes": ["compareArray.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/copyWithin/get-length-ignores-length-prop.js", "esid": " sec-%typedarray%.prototype.copywithin", "description": " >Unreachable abrupt from Get(O, \"length\") as [[ArrayLength]] is returned.\n", "info": " |22.2.3.5 %TypedArray%.prototype.copyWithin (target, start [ , end ] )\n\n%TypedArray%.prototype.copyWithin is a distinct function that implements the\nsame algorithm as Array.prototype.copyWithin as defined in 22.1.3.3 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\" and the actual copying of values in step 12\nmust be performed in a manner that preserves the bit-level encoding of the\nsource data.\n\n...\n\n22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )\n\n1. Let O be ? ToObject(this value).\n2. Let len be ? ToLength(? Get(O, \"length\")).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/copyWithin/invoked-as-func.js", "esid": " sec-%typedarray%.prototype.copywithin", "description": " Throws a TypeError exception when invoked as a function", "info": " |22.2.3.5 %TypedArray%.prototype.copyWithin (target, start [, end ] )\n\nThis function is not generic. ValidateTypedArray is applied to the this value\nprior to evaluating the algorithm. If its result is an abrupt completion that\nexception is thrown instead of evaluating the algorithm.\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n2. If O does not have a [[TypedArrayName]] internal slot, throw a TypeError\nexception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/copyWithin/invoked-as-method.js", "esid": " sec-%typedarray%.prototype.copywithin", "description": " Requires a [[TypedArrayName]] internal slot.", "info": " |22.2.3.5 %TypedArray%.prototype.copyWithin (target, start [, end ] )\n\nThis function is not generic. ValidateTypedArray is applied to the this value\nprior to evaluating the algorithm. If its result is an abrupt completion that\nexception is thrown instead of evaluating the algorithm.\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n2. If O does not have a [[TypedArrayName]] internal slot, throw a TypeError\nexception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/copyWithin/length.js", "esid": " sec-%typedarray%.prototype.copywithin", "description": " >%TypedArray%.prototype.copyWithin.length is 2.\n", "info": " |%TypedArray%.prototype.copyWithin (target, start [, end ] )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/copyWithin/name.js", "esid": " sec-%typedarray%.prototype.copywithin", "description": " >%TypedArray%.prototype.copyWithin.name is \"copyWithin\".\n", "info": " |%TypedArray%.prototype.copyWithin (target, start [, end ] )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/copyWithin/negative-end.js", "esid": " sec-%typedarray%.prototype.copywithin", "description": " >Set values with negative end argument.\n", "info": " |22.2.3.5 %TypedArray%.prototype.copyWithin (target, start [ , end ] )\n\n%TypedArray%.prototype.copyWithin is a distinct function that implements the\nsame algorithm as Array.prototype.copyWithin as defined in 22.1.3.3 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\" and the actual copying of values in step 12\nmust be performed in a manner that preserves the bit-level encoding of the\nsource data.\n\n...\n\n22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )\n\n...\n7. If end is undefined, let relativeEnd be len; else let relativeEnd be ?\nToInteger(end).\n8. If relativeEnd < 0, let final be max((len + relativeEnd), 0); else let\nfinal be min(relativeEnd, len).\n...\n", "includes": ["compareArray.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/copyWithin/negative-out-of-bounds-end.js", "esid": " sec-%typedarray%.prototype.copywithin", "description": " >Set values with negative out of bounds end argument.\n", "info": " |22.2.3.5 %TypedArray%.prototype.copyWithin (target, start [ , end ] )\n\n%TypedArray%.prototype.copyWithin is a distinct function that implements the\nsame algorithm as Array.prototype.copyWithin as defined in 22.1.3.3 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\" and the actual copying of values in step 12\nmust be performed in a manner that preserves the bit-level encoding of the\nsource data.\n\n...\n\n22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )\n\n...\n7. If end is undefined, let relativeEnd be len; else let relativeEnd be ?\nToInteger(end).\n8. If relativeEnd < 0, let final be max((len + relativeEnd), 0); else let\nfinal be min(relativeEnd, len).\n...\n", "includes": ["compareArray.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/copyWithin/negative-out-of-bounds-start.js", "esid": " sec-%typedarray%.prototype.copywithin", "description": " >Set values with out of bounds negative start argument.\n", "info": " |22.2.3.5 %TypedArray%.prototype.copyWithin (target, start [ , end ] )\n\n%TypedArray%.prototype.copyWithin is a distinct function that implements the\nsame algorithm as Array.prototype.copyWithin as defined in 22.1.3.3 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\" and the actual copying of values in step 12\nmust be performed in a manner that preserves the bit-level encoding of the\nsource data.\n\n...\n\n22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )\n\n...\n6. If relativeStart < 0, let from be max((len + relativeStart), 0); else let\nfrom be min(relativeStart, len).\n...\n", "includes": ["compareArray.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/copyWithin/negative-out-of-bounds-target.js", "esid": " sec-%typedarray%.prototype.copywithin", "description": " >Set values with out of bounds negative target argument.\n", "info": " |22.2.3.5 %TypedArray%.prototype.copyWithin (target, start [ , end ] )\n\n%TypedArray%.prototype.copyWithin is a distinct function that implements the\nsame algorithm as Array.prototype.copyWithin as defined in 22.1.3.3 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\" and the actual copying of values in step 12\nmust be performed in a manner that preserves the bit-level encoding of the\nsource data.\n\n...\n\n22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )\n\n...\n4. If relativeTarget < 0, let to be max((len + relativeTarget), 0); else let\nto be min(relativeTarget, len).\n...\n", "includes": ["compareArray.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/copyWithin/negative-start.js", "esid": " sec-%typedarray%.prototype.copywithin", "description": " >Set values with negative start argument.\n", "info": " |22.2.3.5 %TypedArray%.prototype.copyWithin (target, start [ , end ] )\n\n%TypedArray%.prototype.copyWithin is a distinct function that implements the\nsame algorithm as Array.prototype.copyWithin as defined in 22.1.3.3 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\" and the actual copying of values in step 12\nmust be performed in a manner that preserves the bit-level encoding of the\nsource data.\n\n...\n\n22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )\n\n...\n6. If relativeStart < 0, let from be max((len + relativeStart), 0); else let\nfrom be min(relativeStart, len).\n...\n", "includes": ["compareArray.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/copyWithin/negative-target.js", "esid": " sec-%typedarray%.prototype.copywithin", "description": " >Set values with negative target argument.\n", "info": " |22.2.3.5 %TypedArray%.prototype.copyWithin (target, start [ , end ] )\n\n%TypedArray%.prototype.copyWithin is a distinct function that implements the\nsame algorithm as Array.prototype.copyWithin as defined in 22.1.3.3 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\" and the actual copying of values in step 12\nmust be performed in a manner that preserves the bit-level encoding of the\nsource data.\n\n...\n\n22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )\n\n...\n4. If relativeTarget < 0, let to be max((len + relativeTarget), 0); else let\nto be min(relativeTarget, len).\n...\n", "includes": ["compareArray.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/copyWithin/non-negative-out-of-bounds-target-and-start.js", "esid": " sec-%typedarray%.prototype.copywithin", "description": " >Max values of target and start positions are this.length.\n", "info": " |22.2.3.5 %TypedArray%.prototype.copyWithin (target, start [ , end ] )\n\n%TypedArray%.prototype.copyWithin is a distinct function that implements the\nsame algorithm as Array.prototype.copyWithin as defined in 22.1.3.3 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\" and the actual copying of values in step 12\nmust be performed in a manner that preserves the bit-level encoding of the\nsource data.\n\n...\n", "includes": ["compareArray.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/copyWithin/non-negative-target-and-start.js", "esid": " sec-%typedarray%.prototype.copywithin", "description": " >Copy values with non-negative target and start positions.\n", "info": " |22.2.3.5 %TypedArray%.prototype.copyWithin (target, start [ , end ] )\n\n%TypedArray%.prototype.copyWithin is a distinct function that implements the\nsame algorithm as Array.prototype.copyWithin as defined in 22.1.3.3 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\" and the actual copying of values in step 12\nmust be performed in a manner that preserves the bit-level encoding of the\nsource data.\n\n...\n", "includes": ["compareArray.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/copyWithin/non-negative-target-start-and-end.js", "esid": " sec-%typedarray%.prototype.copywithin", "description": " >Copy values with non-negative target, start and end positions.\n", "info": " |22.2.3.5 %TypedArray%.prototype.copyWithin (target, start [ , end ] )\n\n%TypedArray%.prototype.copyWithin is a distinct function that implements the\nsame algorithm as Array.prototype.copyWithin as defined in 22.1.3.3 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\" and the actual copying of values in step 12\nmust be performed in a manner that preserves the bit-level encoding of the\nsource data.\n\n...\n", "includes": ["compareArray.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/copyWithin/not-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >TypedArray.prototype.copyWithin does not implement [[Construct]], is not new-able\n", "info": " |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n", "includes": ["isConstructor.js", "testTypedArray.js"], "features": ["Reflect.construct", "arrow-function", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/copyWithin/prop-desc.js", "esid": " sec-%typedarray%.prototype.copywithin", "description": " >\"copyWithin\" property of TypedArrayPrototype\n", "info": " |ES6 section 17: Every other data property described in clauses 18 through 26\nand in Annex B.2 has the attributes { [[Writable]]: true,\n[[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/copyWithin/return-abrupt-from-end-is-symbol.js", "esid": " sec-%typedarray%.prototype.copywithin", "description": " >Return abrupt if end is a Symbol.\n", "info": " |22.2.3.5 %TypedArray%.prototype.copyWithin (target, start [ , end ] )\n\n%TypedArray%.prototype.copyWithin is a distinct function that implements the\nsame algorithm as Array.prototype.copyWithin as defined in 22.1.3.3 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\" and the actual copying of values in step 12\nmust be performed in a manner that preserves the bit-level encoding of the\nsource data.\n\n...\n\n22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )\n\n...\n7. If end is undefined, let relativeEnd be len; else let relativeEnd be ?\nToInteger(end).\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/copyWithin/return-abrupt-from-end.js", "esid": " sec-%typedarray%.prototype.copywithin", "description": " >Return abrupt from ToInteger(end).\n", "info": " |22.2.3.5 %TypedArray%.prototype.copyWithin (target, start [ , end ] )\n\n%TypedArray%.prototype.copyWithin is a distinct function that implements the\nsame algorithm as Array.prototype.copyWithin as defined in 22.1.3.3 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\" and the actual copying of values in step 12\nmust be performed in a manner that preserves the bit-level encoding of the\nsource data.\n\n...\n\n22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )\n\n...\n7. If end is undefined, let relativeEnd be len; else let relativeEnd be ?\nToInteger(end).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/copyWithin/return-abrupt-from-start-is-symbol.js", "esid": " sec-%typedarray%.prototype.copywithin", "description": " >Return abrupt if start is a Symbol.\n", "info": " |22.2.3.5 %TypedArray%.prototype.copyWithin (target, start [ , end ] )\n\n%TypedArray%.prototype.copyWithin is a distinct function that implements the\nsame algorithm as Array.prototype.copyWithin as defined in 22.1.3.3 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\" and the actual copying of values in step 12\nmust be performed in a manner that preserves the bit-level encoding of the\nsource data.\n\n...\n\n22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )\n\n...\n5. Let relativeStart be ? ToInteger(start).\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/copyWithin/return-abrupt-from-start.js", "esid": " sec-%typedarray%.prototype.copywithin", "description": " >Return abrupt from ToInteger(start).\n", "info": " |22.2.3.5 %TypedArray%.prototype.copyWithin (target, start [ , end ] )\n\n%TypedArray%.prototype.copyWithin is a distinct function that implements the\nsame algorithm as Array.prototype.copyWithin as defined in 22.1.3.3 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\" and the actual copying of values in step 12\nmust be performed in a manner that preserves the bit-level encoding of the\nsource data.\n\n...\n\n22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )\n\n...\n5. Let relativeStart be ? ToInteger(start).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/copyWithin/return-abrupt-from-target-is-symbol.js", "esid": " sec-%typedarray%.prototype.copywithin", "description": " >Return abrupt if target is a Symbol.\n", "info": " |22.2.3.5 %TypedArray%.prototype.copyWithin (target, start [ , end ] )\n\n%TypedArray%.prototype.copyWithin is a distinct function that implements the\nsame algorithm as Array.prototype.copyWithin as defined in 22.1.3.3 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\" and the actual copying of values in step 12\nmust be performed in a manner that preserves the bit-level encoding of the\nsource data.\n\n...\n\n22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )\n\n...\n3. Let relativeTarget be ? ToInteger(target).\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/copyWithin/return-abrupt-from-target.js", "esid": " sec-%typedarray%.prototype.copywithin", "description": " >Return abrupt from ToInteger(target).\n", "info": " |22.2.3.5 %TypedArray%.prototype.copyWithin (target, start [ , end ] )\n\n%TypedArray%.prototype.copyWithin is a distinct function that implements the\nsame algorithm as Array.prototype.copyWithin as defined in 22.1.3.3 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\" and the actual copying of values in step 12\nmust be performed in a manner that preserves the bit-level encoding of the\nsource data.\n\n...\n\n22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )\n\n...\n3. Let relativeTarget be ? ToInteger(target).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/copyWithin/return-this.js", "esid": " sec-%typedarray%.prototype.copywithin", "description": " >Returns `this`.\n", "info": " |22.2.3.5 %TypedArray%.prototype.copyWithin (target, start [ , end ] )\n\n%TypedArray%.prototype.copyWithin is a distinct function that implements the\nsame algorithm as Array.prototype.copyWithin as defined in 22.1.3.3 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\" and the actual copying of values in step 12\nmust be performed in a manner that preserves the bit-level encoding of the\nsource data.\n\n...\n\n22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )\n\n13. Return O.\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/copyWithin/this-is-not-object.js", "esid": " sec-%typedarray%.prototype.copywithin", "description": " Throws a TypeError exception when `this` is not Object", "info": " |22.2.3.5 %TypedArray%.prototype.copyWithin (target, start [ , end ] )\n\nThis function is not generic. ValidateTypedArray is applied to the this value\nprior to evaluating the algorithm. If its result is an abrupt completion that\nexception is thrown instead of evaluating the algorithm.\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/copyWithin/this-is-not-typedarray-instance.js", "esid": " sec-%typedarray%.prototype.copywithin", "description": " >Throws a TypeError exception when `this` is not a TypedArray instance\n", "info": " |22.2.3.5 %TypedArray%.prototype.copyWithin (target, start [ , end ] )\n\nThis function is not generic. ValidateTypedArray is applied to the this value\nprior to evaluating the algorithm. If its result is an abrupt completion that\nexception is thrown instead of evaluating the algorithm.\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n2. If O does not have a [[TypedArrayName]] internal slot, throw a TypeError\nexception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/copyWithin/undefined-end.js", "esid": " sec-%typedarray%.prototype.copywithin", "description": " >If `end` is undefined, set final position to `this.length`.\n", "info": " |22.2.3.5 %TypedArray%.prototype.copyWithin (target, start [ , end ] )\n\n%TypedArray%.prototype.copyWithin is a distinct function that implements the\nsame algorithm as Array.prototype.copyWithin as defined in 22.1.3.3 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\" and the actual copying of values in step 12\nmust be performed in a manner that preserves the bit-level encoding of the\nsource data.\n\n...\n\n22.1.3.3 Array.prototype.copyWithin (target, start [ , end ] )\n\n...\n7. If end is undefined, let relativeEnd be len; else let relativeEnd be ?\nToInteger(end).\n...\n", "includes": ["compareArray.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/entries/invoked-as-func.js", "esid": " sec-%typedarray%.prototype.entries", "description": " Throws a TypeError exception when invoked as a function", "info": " |22.2.3.6 %TypedArray%.prototype.entries ( )\n\nThe following steps are taken:\n\n1. Let O be the this value.\n2. Let valid be ValidateTypedArray(O).\n3. ReturnIfAbrupt(valid).\n...\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n2. If O does not have a [[TypedArrayName]] internal slot, throw a TypeError\nexception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/entries/invoked-as-method.js", "esid": " sec-%typedarray%.prototype.entries", "description": " Requires a [[TypedArrayName]] internal slot.", "info": " |22.2.3.6 %TypedArray%.prototype.entries ( )\n\nThe following steps are taken:\n\n1. Let O be the this value.\n2. Let valid be ValidateTypedArray(O).\n3. ReturnIfAbrupt(valid).\n...\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n2. If O does not have a [[TypedArrayName]] internal slot, throw a TypeError\nexception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/entries/iter-prototype.js", "esid": " sec-%typedarray%.prototype.entries", "description": " >The prototype of the returned iterator is ArrayIteratorPrototype\n", "info": " |22.2.3.6 %TypedArray%.prototype.entries ( )\n\n...\n3. Return CreateArrayIterator(O, \"key+value\").\n", "includes": ["testTypedArray.js"], "features": ["Symbol.iterator", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/entries/length.js", "esid": " sec-%typedarray%.prototype.entries", "description": " >%TypedArray%.prototype.entries.length is 0.\n", "info": " |%TypedArray%.prototype.entries ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/entries/name.js", "esid": " sec-%typedarray%.prototype.entries", "description": " >%TypedArray%.prototype.entries.name is \"entries\".\n", "info": " |%TypedArray%.prototype.entries ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/entries/not-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >TypedArray.prototype.entries does not implement [[Construct]], is not new-able\n", "info": " |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n", "includes": ["isConstructor.js", "testTypedArray.js"], "features": ["Reflect.construct", "arrow-function", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/entries/prop-desc.js", "esid": " sec-%typedarray%.prototype.entries", "description": " >\"entries\" property of TypedArrayPrototype\n", "info": " |ES6 section 17: Every other data property described in clauses 18 through 26\nand in Annex B.2 has the attributes { [[Writable]]: true,\n[[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/entries/return-itor.js", "esid": " sec-%typedarray%.prototype.entries", "description": " Return an iterator for the entries.", "info": " |22.2.3.6 %TypedArray%.prototype.entries ( )\n\n...\n3. Return CreateArrayIterator(O, \"key+value\").\n", "includes": ["testTypedArray.js", "compareArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/entries/this-is-not-object.js", "esid": " sec-%typedarray%.prototype.entries", "description": " Throws a TypeError exception when `this` is not Object", "info": " |22.2.3.6 %TypedArray%.prototype.entries ( )\n\nThe following steps are taken:\n\n1. Let O be the this value.\n2. Perform ? ValidateTypedArray(O).\n...\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/entries/this-is-not-typedarray-instance.js", "esid": " sec-%typedarray%.prototype.entries", "description": " >Throws a TypeError exception when `this` is not a TypedArray instance\n", "info": " |22.2.3.6 %TypedArray%.prototype.entries ( )\n\nThe following steps are taken:\n\n1. Let O be the this value.\n2. Perform ? ValidateTypedArray(O).\n...\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n2. If O does not have a [[TypedArrayName]] internal slot, throw a TypeError\nexception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/every/callbackfn-arguments-with-thisarg.js", "esid": " sec-%typedarray%.prototype.every", "description": " >thisArg does not affect callbackfn arguments\n", "info": " |22.2.3.7 %TypedArray%.prototype.every ( callbackfn [ , thisArg ] )\n\n%TypedArray%.prototype.every is a distinct function that implements the same\nalgorithm as Array.prototype.every as defined in 22.1.3.5 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\".\n\n22.1.3.5 Array.prototype.every ( callbackfn [ , thisArg ] )\n\n...\n6. Repeat, while k < len\n...\nc. If kPresent is true, then\ni. Let kValue be ? Get(O, Pk).\nii. Let testResult be ToBoolean(? Call(callbackfn, T, \u00ab kValue, k, O \u00bb)).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/every/callbackfn-arguments-without-thisarg.js", "esid": " sec-%typedarray%.prototype.every", "description": " >callbackfn arguments\n", "info": " |22.2.3.7 %TypedArray%.prototype.every ( callbackfn [ , thisArg ] )\n\n%TypedArray%.prototype.every is a distinct function that implements the same\nalgorithm as Array.prototype.every as defined in 22.1.3.5 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\".\n\n22.1.3.5 Array.prototype.every ( callbackfn [ , thisArg ] )\n\n...\n6. Repeat, while k < len\n...\nc. If kPresent is true, then\ni. Let kValue be ? Get(O, Pk).\nii. Let testResult be ToBoolean(? Call(callbackfn, T, \u00ab kValue, k, O \u00bb)).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/every/callbackfn-no-interaction-over-non-integer.js", "esid": " sec-%typedarray%.prototype.every", "description": " >Does not interact over non-integer properties\n", "info": " |22.2.3.7 %TypedArray%.prototype.every ( callbackfn [ , thisArg ] )\n\n...\n6. Repeat, while k < len\n...\nc. If kPresent is true, then\ni. Let kValue be ? Get(O, Pk).\nii. Let testResult be ToBoolean(? Call(callbackfn, T, \u00ab kValue, k, O \u00bb)).\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/every/callbackfn-not-callable-throws.js", "esid": " sec-%typedarray%.prototype.every", "description": " Throws a TypeError if callbackfn is not callable", "info": " |22.2.3.7 %TypedArray%.prototype.every ( callbackfn [ , thisArg ] )\n\n%TypedArray%.prototype.every is a distinct function that implements the same\nalgorithm as Array.prototype.every as defined in 22.1.3.5 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\".\n\n22.1.3.5 Array.prototype.every ( callbackfn [ , thisArg ] )\n\n...\n3. If IsCallable(callbackfn) is false, throw a TypeError exception.\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/every/callbackfn-not-called-on-empty.js", "esid": " sec-%typedarray%.prototype.every", "description": " >callbackfn is not called on empty instances\n", "info": " |22.2.3.7 %TypedArray%.prototype.every ( callbackfn [ , thisArg ] )\n\n%TypedArray%.prototype.every is a distinct function that implements the same\nalgorithm as Array.prototype.every as defined in 22.1.3.5 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\".\n\n22.1.3.5 Array.prototype.every ( callbackfn [ , thisArg ] )\n\n...\n6. Repeat, while k < len\n..\nc. If kPresent is true, then\ni. Let kValue be ? Get(O, Pk).\nii. Let testResult be ToBoolean(? Call(callbackfn, T, \u00ab kValue, k, O \u00bb)).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/every/callbackfn-return-does-not-change-instance.js", "esid": " sec-%typedarray%.prototype.every", "description": " >The callbackfn return does not change the instance\n", "info": " |22.2.3.7 %TypedArray%.prototype.every ( callbackfn [ , thisArg ] )\n\n%TypedArray%.prototype.every is a distinct function that implements the same\nalgorithm as Array.prototype.every as defined in 22.1.3.5 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\".\n\n22.1.3.5 Array.prototype.every ( callbackfn [ , thisArg ] )\n\n...\n6. Repeat, while k < len\n..\nc. If kPresent is true, then\ni. Let kValue be ? Get(O, Pk).\nii. Let testResult be ToBoolean(? Call(callbackfn, T, \u00ab kValue, k, O \u00bb)).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/every/callbackfn-returns-abrupt.js", "esid": " sec-%typedarray%.prototype.every", "description": " Returns abrupt from callbackfn", "info": " |22.2.3.7 %TypedArray%.prototype.every ( callbackfn [ , thisArg ] )\n\n%TypedArray%.prototype.every is a distinct function that implements the same\nalgorithm as Array.prototype.every as defined in 22.1.3.5 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\".\n\n22.1.3.5 Array.prototype.every ( callbackfn [ , thisArg ] )\n\n...\n6. Repeat, while k < len\n..\nc. If kPresent is true, then\ni. Let kValue be ? Get(O, Pk).\nii. Let testResult be ToBoolean(? Call(callbackfn, T, \u00ab kValue, k, O \u00bb)).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/every/callbackfn-this.js", "esid": " sec-%typedarray%.prototype.every", "description": " >callbackfn `this` value\n", "info": " |22.2.3.7 %TypedArray%.prototype.every ( callbackfn [ , thisArg ] )\n\n%TypedArray%.prototype.every is a distinct function that implements the same\nalgorithm as Array.prototype.every as defined in 22.1.3.5 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\".\n\n22.1.3.5 Array.prototype.every ( callbackfn [ , thisArg ] )\n\n...\n4. If thisArg was supplied, let T be thisArg; else let T be undefined.\n...\n6. Repeat, while k < len\n...\nc. If kPresent is true, then\n...\nii. Let testResult be ToBoolean(? Call(callbackfn, T, \u00ab kValue, k, O \u00bb)).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/every/get-length-uses-internal-arraylength.js", "esid": " sec-%typedarray%.prototype.every", "description": " Get \"length\" uses internal ArrayLength", "info": " |22.2.3.7 %TypedArray%.prototype.every ( callbackfn [ , thisArg ] )\n\n%TypedArray%.prototype.every is a distinct function that implements the same\nalgorithm as Array.prototype.every as defined in 22.1.3.5 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\".\n\n22.1.3.5 Array.prototype.every ( callbackfn [ , thisArg ] )\n\n1. Let O be ? ToObject(this value).\n2. Let len be ? ToLength(? Get(O, \"length\")).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/every/invoked-as-func.js", "esid": " sec-%typedarray%.prototype.every", "description": " Throws a TypeError exception when invoked as a function", "info": " |22.2.3.7 %TypedArray%.prototype.every ( callbackfn [ , thisArg ] )\n\nThis function is not generic. ValidateTypedArray is applied to the this value\nprior to evaluating the algorithm. If its result is an abrupt completion that\nexception is thrown instead of evaluating the algorithm.\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n2. If O does not have a [[TypedArrayName]] internal slot, throw a TypeError\nexception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/every/invoked-as-method.js", "esid": " sec-%typedarray%.prototype.every", "description": " Requires a [[TypedArrayName]] internal slot.", "info": " |22.2.3.7 %TypedArray%.prototype.every ( callbackfn [ , thisArg ] )\n\nThis function is not generic. ValidateTypedArray is applied to the this value\nprior to evaluating the algorithm. If its result is an abrupt completion that\nexception is thrown instead of evaluating the algorithm.\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n2. If O does not have a [[TypedArrayName]] internal slot, throw a TypeError\nexception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/every/length.js", "esid": " sec-%typedarray%.prototype.every", "description": " >%TypedArray%.prototype.every.length is 1.\n", "info": " |%TypedArray%.prototype.every ( callbackfn [ , thisArg ] )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/every/name.js", "esid": " sec-%typedarray%.prototype.every", "description": " >%TypedArray%.prototype.every.name is \"every\".\n", "info": " |%TypedArray%.prototype.every ( callbackfn [ , thisArg ] )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/every/not-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >TypedArray.prototype.every does not implement [[Construct]], is not new-able\n", "info": " |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n", "includes": ["isConstructor.js", "testTypedArray.js"], "features": ["Reflect.construct", "arrow-function", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/every/prop-desc.js", "esid": " sec-%typedarray%.prototype.every", "description": " >\"every\" property of TypedArrayPrototype\n", "info": " |ES6 section 17: Every other data property described in clauses 18 through 26\nand in Annex B.2 has the attributes { [[Writable]]: true,\n[[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/every/returns-false-if-any-cb-returns-false.js", "esid": " sec-%typedarray%.prototype.every", "description": " >Returns false if any callbackfn call returns a coerced false.\n", "info": " |22.2.3.7 %TypedArray%.prototype.every ( callbackfn [ , thisArg ] )\n\n%TypedArray%.prototype.every is a distinct function that implements the same\nalgorithm as Array.prototype.every as defined in 22.1.3.5 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\".\n\n22.1.3.5 Array.prototype.every ( callbackfn [ , thisArg ] )\n\n...\n7. Return true.\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/every/returns-true-if-every-cb-returns-true.js", "esid": " sec-%typedarray%.prototype.every", "description": " >Returns true if every callbackfn returns a coerced true.\n", "info": " |22.2.3.7 %TypedArray%.prototype.every ( callbackfn [ , thisArg ] )\n\n%TypedArray%.prototype.every is a distinct function that implements the same\nalgorithm as Array.prototype.every as defined in 22.1.3.5 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\".\n\n22.1.3.5 Array.prototype.every ( callbackfn [ , thisArg ] )\n\n...\n7. Return true.\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/every/this-is-not-object.js", "esid": " sec-%typedarray%.prototype.every", "description": " Throws a TypeError exception when `this` is not Object", "info": " |22.2.3.7 %TypedArray%.prototype.every ( callbackfn [ , thisArg ] )\n\nThis function is not generic. ValidateTypedArray is applied to the this value\nprior to evaluating the algorithm. If its result is an abrupt completion that\nexception is thrown instead of evaluating the algorithm.\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/every/this-is-not-typedarray-instance.js", "esid": " sec-%typedarray%.prototype.every", "description": " >Throws a TypeError exception when `this` is not a TypedArray instance\n", "info": " |22.2.3.7 %TypedArray%.prototype.every ( callbackfn [ , thisArg ] )\n\nThis function is not generic. ValidateTypedArray is applied to the this value\nprior to evaluating the algorithm. If its result is an abrupt completion that\nexception is thrown instead of evaluating the algorithm.\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n2. If O does not have a [[TypedArrayName]] internal slot, throw a TypeError\nexception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/every/values-are-not-cached.js", "esid": " sec-%typedarray%.prototype.every", "description": " >Integer indexed values are not cached before iteration\n", "info": " |22.2.3.7 %TypedArray%.prototype.every ( callbackfn [ , thisArg ] )\n\n%TypedArray%.prototype.every is a distinct function that implements the same\nalgorithm as Array.prototype.every as defined in 22.1.3.5 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\".\n\n22.1.3.5 Array.prototype.every ( callbackfn [ , thisArg ] )\n\n...\n6. Repeat, while k < len\n..\nc. If kPresent is true, then\ni. Let kValue be ? Get(O, Pk).\nii. Let testResult be ToBoolean(? Call(callbackfn, T, \u00ab kValue, k, O \u00bb)).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/fill/coerced-indexes.js", "esid": " sec-%typedarray%.prototype.fill", "description": " >Fills elements from coerced to Integer `start` and `end` values\n", "info": " |22.2.3.8 %TypedArray%.prototype.fill (value [ , start [ , end ] ] )\n\n%TypedArray%.prototype.fill is a distinct function that implements the same\nalgorithm as Array.prototype.fill as defined in 22.1.3.6 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\". The implementation of the algorithm may be optimized with\nthe knowledge that the this value is an object that has a fixed length and\nwhose integer indexed properties are not sparse. However, such optimization\nmust not introduce any observable changes in the specified behaviour of the\nalgorithm.\n\n...\n\n22.1.3.6 Array.prototype.fill (value [ , start [ , end ] ] )\n\n...\n3. Let relativeStart be ? ToInteger(start).\n4. If relativeStart < 0, let k be max((len + relativeStart), 0); else let k be\nmin(relativeStart, len).\n5. If end is undefined, let relativeEnd be len; else let relativeEnd be ?\nToInteger(end).\n...\n", "includes": ["compareArray.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/fill/fill-values-conversion-operations-consistent-nan.js", "esid": " sec-%typedarray%.prototype.fill", "description": " >An implementation must always choose either the same encoding for each implementation distinguishable *NaN* value, or an implementation-defined canonical value.\n", "info": " |This test does not compare the actual byte values, instead it simply checks that\nthe value is some valid NaN encoding.\n\n---\n\n22.2.3.8 %TypedArray%.prototype.fill (value [ , start [ , end ] ] )\n\n%TypedArray%.prototype.fill is a distinct function that implements the same\nalgorithm as Array.prototype.fill as defined in 22.1.3.6 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\". The implementation of the algorithm may be optimized with\nthe knowledge that the this value is an object that has a fixed length and\nwhose integer indexed properties are not sparse. However, such optimization\nmust not introduce any observable changes in the specified behaviour of the\nalgorithm.\n\n...\n\n#sec-array.prototype.fill\nArray.prototype.fill (value [ , start [ , end ] ] )\n\n...\n7. Repeat, while k < final\na. Let Pk be ! ToString(k).\nb. Perform ? Set(O, Pk, value, true).\n...\n\n#sec-setvalueinbuffer\nSetValueInBuffer ( arrayBuffer, byteIndex, type, value [ ,\nisLittleEndian ] )\n\n8. Let rawBytes be NumberToRawBytes(type, value, isLittleEndian).\n\n#sec-numbertorawbytes\nNumberToRawBytes( type, value, isLittleEndian )\n\n1. If type is \"Float32\", then\na. Set rawBytes to a List containing the 4 bytes that are the result\nof converting value to IEEE 754-2008 binary32 format using \u201cRound to\nnearest, ties to even\u201d rounding mode. If isLittleEndian is false, the\nbytes are arranged in big endian order. Otherwise, the bytes are\narranged in little endian order. If value is NaN, rawValue may be set\nto any implementation chosen IEEE 754-2008 binary64 format Not-a-Number\nencoding. An implementation must always choose either the same encoding\nfor each implementation distinguishable *NaN* value, or an\nimplementation-defined canonical value.\n2. Else, if type is \"Float64\", then\na. Set _rawBytes_ to a List containing the 8 bytes that are the IEEE\n754-2008 binary64 format encoding of _value_. If _isLittleEndian_ is\n*false*, the bytes are arranged in big endian order. Otherwise,\nthe bytes are arranged in little endian order. If _value_ is *NaN*,\n_rawValue_ may be set to any implementation chosen IEEE 754-2008\nbinary64 format Not-a-Number encoding. An implementation must\nalways choose either the same encoding for each implementation\ndistinguishable *NaN* value, or an implementation-defined\ncanonical value.\n...\n\n#sec-isnan-number\n\nNOTE: A reliable way for ECMAScript code to test if a value X is a NaN is \nan expression of the formX !== X. The result will be true if and only \nif X is a NaN.\n", "includes": ["nans.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/fill/fill-values-conversion-operations.js", "esid": " sec-%typedarray%.prototype.fill", "description": " >Fills all the elements with non numeric values values.\n", "info": " |22.2.3.8 %TypedArray%.prototype.fill (value [ , start [ , end ] ] )\n\n%TypedArray%.prototype.fill is a distinct function that implements the same\nalgorithm as Array.prototype.fill as defined in 22.1.3.6 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\". The implementation of the algorithm may be optimized with\nthe knowledge that the this value is an object that has a fixed length and\nwhose integer indexed properties are not sparse. However, such optimization\nmust not introduce any observable changes in the specified behaviour of the\nalgorithm.\n\n...\n\n22.1.3.6 Array.prototype.fill (value [ , start [ , end ] ] )\n\n...\n7. Repeat, while k < final\na. Let Pk be ! ToString(k).\nb. Perform ? Set(O, Pk, value, true).\n...\n\n24.1.1.6 SetValueInBuffer ( arrayBuffer, byteIndex, type, value [ ,\nisLittleEndian ] )\n\n...\n8. If type is \"Float32\", then\n...\n9. Else, if type is \"Float64\", then\n...\n10. Else,\n...\nb. Let convOp be the abstract operation named in the Conversion Operation\ncolumn in Table 50 for Element Type type.\nc. Let intValue be convOp(value).\nd. If intValue \u2265 0, then\n...\ne. Else,\n...\n", "includes": ["byteConversionValues.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/fill/fill-values-custom-start-and-end.js", "esid": " sec-%typedarray%.prototype.fill", "description": " >Fills all the elements from a with a custom start and end indexes.\n", "info": " |22.2.3.8 %TypedArray%.prototype.fill (value [ , start [ , end ] ] )\n\n%TypedArray%.prototype.fill is a distinct function that implements the same\nalgorithm as Array.prototype.fill as defined in 22.1.3.6 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\". The implementation of the algorithm may be optimized with\nthe knowledge that the this value is an object that has a fixed length and\nwhose integer indexed properties are not sparse. However, such optimization\nmust not introduce any observable changes in the specified behaviour of the\nalgorithm.\n\n...\n\n22.1.3.6 Array.prototype.fill (value [ , start [ , end ] ] )\n\n...\n3. Let relativeStart be ? ToInteger(start).\n4. If relativeStart < 0, let k be max((len + relativeStart), 0); else let k be\nmin(relativeStart, len).\n5. If end is undefined, let relativeEnd be len; else let relativeEnd be ?\nToInteger(end).\n6. If relativeEnd < 0, let final be max((len + relativeEnd), 0); else let\nfinal be min(relativeEnd, len).\n...\n", "includes": ["compareArray.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/fill/fill-values-non-numeric.js", "esid": " sec-%typedarray%.prototype.fill", "description": " >Fills all the elements with non numeric values values.\n", "info": " |%TypedArray%.prototype.fill ( value [ , start [ , end ] ] )\n\nLet O be the this value.\nPerform ? ValidateTypedArray(O).\nLet len be O.[[ArrayLength]].\nIf O.[[ContentType]] is BigInt, set value to ? ToBigInt(value).\nOtherwise, set value to ? ToNumber(value).\nLet relativeStart be ? ToIntegerOrInfinity(start).\nIf relativeStart is -Infinity, let k be 0.\nElse if relativeStart < 0, let k be max(len + relativeStart, 0).\nElse, let k be min(relativeStart, len).\nIf end is undefined, let relativeEnd be len; else let relativeEnd be ? ToIntegerOrInfinity(end).\nIf relativeEnd is -Infinity, let final be 0.\nElse if relativeEnd < 0, let final be max(len + relativeEnd, 0).\nElse, let final be min(relativeEnd, len).\nIf IsDetachedBuffer(O.[[ViewedArrayBuffer]]) is true, throw a TypeError exception.\nRepeat, while k < final,\nLet Pk be ! ToString(F(k)).\nPerform ! Set(O, Pk, value, true).\nSet k to k + 1.\nReturn O.\n\nIntegerIndexedElementSet ( O, index, value )\n\nAssert: O is an Integer-Indexed exotic object.\nIf O.[[ContentType]] is BigInt, let numValue be ? ToBigInt(value).\nOtherwise, let numValue be ? ToNumber(value).\nLet buffer be O.[[ViewedArrayBuffer]].\nIf IsDetachedBuffer(buffer) is false and ! IsValidIntegerIndex(O, index) is true, then\nLet offset be O.[[ByteOffset]].\nLet arrayTypeName be the String value of O.[[TypedArrayName]].\nLet elementSize be the Element Size value specified in Table 62 for arrayTypeName.\nLet indexedPosition be (\u211d(index) \u00d7 elementSize) + offset.\nLet elementType be the Element Type value in Table 62 for arrayTypeName.\nPerform SetValueInBuffer(buffer, indexedPosition, elementType, numValue, true, Unordered).\nReturn NormalCompletion(undefined).\n\n\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/fill/fill-values-relative-end.js", "esid": " sec-%typedarray%.prototype.fill", "description": " >Fills all the elements from a with a custom end index.\n", "info": " |22.2.3.8 %TypedArray%.prototype.fill (value [ , start [ , end ] ] )\n\n%TypedArray%.prototype.fill is a distinct function that implements the same\nalgorithm as Array.prototype.fill as defined in 22.1.3.6 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\". The implementation of the algorithm may be optimized with\nthe knowledge that the this value is an object that has a fixed length and\nwhose integer indexed properties are not sparse. However, such optimization\nmust not introduce any observable changes in the specified behaviour of the\nalgorithm.\n\n...\n\n22.1.3.6 Array.prototype.fill (value [ , start [ , end ] ] )\n\n...\n5. If end is undefined, let relativeEnd be len; else let relativeEnd be ?\nToInteger(end).\n6. If relativeEnd < 0, let final be max((len + relativeEnd), 0); else let\nfinal be min(relativeEnd, len).\n...\n", "includes": ["compareArray.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/fill/fill-values-relative-start.js", "esid": " sec-%typedarray%.prototype.fill", "description": " >Fills all the elements from a with a custom start index.\n", "info": " |22.2.3.8 %TypedArray%.prototype.fill (value [ , start [ , end ] ] )\n\n%TypedArray%.prototype.fill is a distinct function that implements the same\nalgorithm as Array.prototype.fill as defined in 22.1.3.6 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\". The implementation of the algorithm may be optimized with\nthe knowledge that the this value is an object that has a fixed length and\nwhose integer indexed properties are not sparse. However, such optimization\nmust not introduce any observable changes in the specified behaviour of the\nalgorithm.\n\n...\n\n22.1.3.6 Array.prototype.fill (value [ , start [ , end ] ] )\n\n...\n4. If relativeStart < 0, let k be max((len + relativeStart), 0); else let k be\nmin(relativeStart, len).\n...\n", "includes": ["compareArray.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/fill/fill-values-symbol-throws.js", "esid": " sec-%typedarray%.prototype.fill", "description": " >Throws a TypeError if value is a Symbol\n", "info": " |%TypedArray%.prototype.fill ( value [ , start [ , end ] ] )\n\nLet O be the this value.\nPerform ? ValidateTypedArray(O).\nLet len be O.[[ArrayLength]].\nIf O.[[ContentType]] is BigInt, set value to ? ToBigInt(value).\nOtherwise, set value to ? ToNumber(value).\nLet relativeStart be ? ToIntegerOrInfinity(start).\nIf relativeStart is -Infinity, let k be 0.\nElse if relativeStart < 0, let k be max(len + relativeStart, 0).\nElse, let k be min(relativeStart, len).\nIf end is undefined, let relativeEnd be len; else let relativeEnd be ? ToIntegerOrInfinity(end).\nIf relativeEnd is -Infinity, let final be 0.\nElse if relativeEnd < 0, let final be max(len + relativeEnd, 0).\nElse, let final be min(relativeEnd, len).\nIf IsDetachedBuffer(O.[[ViewedArrayBuffer]]) is true, throw a TypeError exception.\nRepeat, while k < final,\nLet Pk be ! ToString(F(k)).\nPerform ! Set(O, Pk, value, true).\nSet k to k + 1.\nReturn O.\n\nIntegerIndexedElementSet ( O, index, value )\n\nAssert: O is an Integer-Indexed exotic object.\nIf O.[[ContentType]] is BigInt, let numValue be ? ToBigInt(value).\nOtherwise, let numValue be ? ToNumber(value).\nLet buffer be O.[[ViewedArrayBuffer]].\nIf IsDetachedBuffer(buffer) is false and ! IsValidIntegerIndex(O, index) is true, then\nLet offset be O.[[ByteOffset]].\nLet arrayTypeName be the String value of O.[[TypedArrayName]].\nLet elementSize be the Element Size value specified in Table 62 for arrayTypeName.\nLet indexedPosition be (\u211d(index) \u00d7 elementSize) + offset.\nLet elementType be the Element Type value in Table 62 for arrayTypeName.\nPerform SetValueInBuffer(buffer, indexedPosition, elementType, numValue, true, Unordered).\nReturn NormalCompletion(undefined).\n\n\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/fill/fill-values.js", "esid": " sec-%typedarray%.prototype.fill", "description": " >Fills all the elements with `value` from a default start and index.\n", "info": " |22.2.3.8 %TypedArray%.prototype.fill (value [ , start [ , end ] ] )\n\n%TypedArray%.prototype.fill is a distinct function that implements the same\nalgorithm as Array.prototype.fill as defined in 22.1.3.6 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\". The implementation of the algorithm may be optimized with\nthe knowledge that the this value is an object that has a fixed length and\nwhose integer indexed properties are not sparse. However, such optimization\nmust not introduce any observable changes in the specified behaviour of the\nalgorithm.\n\n...\n\n22.1.3.6 Array.prototype.fill (value [ , start [ , end ] ] )\n\n...\n7. Repeat, while k < final\na. Let Pk be ! ToString(k).\nb. Perform ? Set(O, Pk, value, true).\n", "includes": ["compareArray.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/fill/get-length-ignores-length-prop.js", "esid": " sec-%typedarray%.prototype.fill", "description": " >Unreachable abrupt from Get(O, \"length\") as [[ArrayLength]] is returned.\n", "info": " |22.2.3.8 %TypedArray%.prototype.fill (value [ , start [ , end ] ] )\n\n%TypedArray%.prototype.fill is a distinct function that implements the same\nalgorithm as Array.prototype.fill as defined in 22.1.3.6 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\". The implementation of the algorithm may be optimized with\nthe knowledge that the this value is an object that has a fixed length and\nwhose integer indexed properties are not sparse. However, such optimization\nmust not introduce any observable changes in the specified behaviour of the\nalgorithm.\n\n...\n\n22.1.3.6 Array.prototype.fill (value [ , start [ , end ] ] )\n\n1. Let O be ? ToObject(this value).\n2. Let len be ? ToLength(? Get(O, \"length\")).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/fill/invoked-as-func.js", "esid": " sec-%typedarray%.prototype.fill", "description": " Throws a TypeError exception when invoked as a function", "info": " |22.2.3.8 %TypedArray%.prototype.fill (value [ , start [ , end ] ] )\n\nThis function is not generic. ValidateTypedArray is applied to the this value\nprior to evaluating the algorithm. If its result is an abrupt completion that\nexception is thrown instead of evaluating the algorithm.\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n2. If O does not have a [[TypedArrayName]] internal slot, throw a TypeError\nexception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/fill/invoked-as-method.js", "esid": " sec-%typedarray%.prototype.fill", "description": " Requires a [[TypedArrayName]] internal slot.", "info": " |22.2.3.8 %TypedArray%.prototype.fill (value [ , start [ , end ] ] )\n\nThis function is not generic. ValidateTypedArray is applied to the this value\nprior to evaluating the algorithm. If its result is an abrupt completion that\nexception is thrown instead of evaluating the algorithm.\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n2. If O does not have a [[TypedArrayName]] internal slot, throw a TypeError\nexception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/fill/length.js", "esid": " sec-%typedarray%.prototype.fill", "description": " >%TypedArray%.prototype.fill.length is 1.\n", "info": " |%TypedArray%.prototype.fill (value [ , start [ , end ] ] )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/fill/name.js", "esid": " sec-%typedarray%.prototype.fill", "description": " >%TypedArray%.prototype.fill.name is \"fill\".\n", "info": " |%TypedArray%.prototype.fill (value [ , start [ , end ] ] )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/fill/not-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >TypedArray.prototype.fill does not implement [[Construct]], is not new-able\n", "info": " |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n", "includes": ["isConstructor.js", "testTypedArray.js"], "features": ["Reflect.construct", "arrow-function", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/fill/prop-desc.js", "esid": " sec-%typedarray%.prototype.fill", "description": " >\"fill\" property of TypedArrayPrototype\n", "info": " |ES6 section 17: Every other data property described in clauses 18 through 26\nand in Annex B.2 has the attributes { [[Writable]]: true,\n[[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/fill/return-abrupt-from-end-as-symbol.js", "esid": " sec-%typedarray%.prototype.fill", "description": " >Return abrupt if end is a Symbol.\n", "info": " |22.2.3.8 %TypedArray%.prototype.fill (value [ , start [ , end ] ] )\n\n%TypedArray%.prototype.fill is a distinct function that implements the same\nalgorithm as Array.prototype.fill as defined in 22.1.3.6 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\". The implementation of the algorithm may be optimized with\nthe knowledge that the this value is an object that has a fixed length and\nwhose integer indexed properties are not sparse. However, such optimization\nmust not introduce any observable changes in the specified behaviour of the\nalgorithm.\n\n...\n\n22.1.3.6 Array.prototype.fill (value [ , start [ , end ] ] )\n\n...\n5. If end is undefined, let relativeEnd be len; else let relativeEnd be ?\nToInteger(end).\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/fill/return-abrupt-from-end.js", "esid": " sec-%typedarray%.prototype.fill", "description": " >Return abrupt from ToInteger(end).\n", "info": " |22.2.3.8 %TypedArray%.prototype.fill (value [ , start [ , end ] ] )\n\n%TypedArray%.prototype.fill is a distinct function that implements the same\nalgorithm as Array.prototype.fill as defined in 22.1.3.6 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\". The implementation of the algorithm may be optimized with\nthe knowledge that the this value is an object that has a fixed length and\nwhose integer indexed properties are not sparse. However, such optimization\nmust not introduce any observable changes in the specified behaviour of the\nalgorithm.\n\n...\n\n22.1.3.6 Array.prototype.fill (value [ , start [ , end ] ] )\n\n...\n5. If end is undefined, let relativeEnd be len; else let relativeEnd be ?\nToInteger(end).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/fill/return-abrupt-from-set-value.js", "esid": " sec-%typedarray%.prototype.fill", "description": " >Returns abrupt from value set\n", "info": " |%TypedArray%.prototype.fill ( value [ , start [ , end ] ] )\n\nLet O be the this value.\nPerform ? ValidateTypedArray(O).\nLet len be O.[[ArrayLength]].\nIf O.[[ContentType]] is BigInt, set value to ? ToBigInt(value).\nOtherwise, set value to ? ToNumber(value).\nLet relativeStart be ? ToIntegerOrInfinity(start).\nIf relativeStart is -Infinity, let k be 0.\nElse if relativeStart < 0, let k be max(len + relativeStart, 0).\nElse, let k be min(relativeStart, len).\nIf end is undefined, let relativeEnd be len; else let relativeEnd be ? ToIntegerOrInfinity(end).\nIf relativeEnd is -Infinity, let final be 0.\nElse if relativeEnd < 0, let final be max(len + relativeEnd, 0).\nElse, let final be min(relativeEnd, len).\nIf IsDetachedBuffer(O.[[ViewedArrayBuffer]]) is true, throw a TypeError exception.\nRepeat, while k < final,\nLet Pk be ! ToString(F(k)).\nPerform ! Set(O, Pk, value, true).\nSet k to k + 1.\nReturn O.\n\nIntegerIndexedElementSet ( O, index, value )\n\nAssert: O is an Integer-Indexed exotic object.\nIf O.[[ContentType]] is BigInt, let numValue be ? ToBigInt(value).\nOtherwise, let numValue be ? ToNumber(value).\nLet buffer be O.[[ViewedArrayBuffer]].\nIf IsDetachedBuffer(buffer) is false and ! IsValidIntegerIndex(O, index) is true, then\nLet offset be O.[[ByteOffset]].\nLet arrayTypeName be the String value of O.[[TypedArrayName]].\nLet elementSize be the Element Size value specified in Table 62 for arrayTypeName.\nLet indexedPosition be (\u211d(index) \u00d7 elementSize) + offset.\nLet elementType be the Element Type value in Table 62 for arrayTypeName.\nPerform SetValueInBuffer(buffer, indexedPosition, elementType, numValue, true, Unordered).\nReturn NormalCompletion(undefined).\n\n\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/fill/return-abrupt-from-start-as-symbol.js", "esid": " sec-%typedarray%.prototype.fill", "description": " >Return abrupt from ToInteger(start) as a Symbol.\n", "info": " |22.2.3.8 %TypedArray%.prototype.fill (value [ , start [ , end ] ] )\n\n%TypedArray%.prototype.fill is a distinct function that implements the same\nalgorithm as Array.prototype.fill as defined in 22.1.3.6 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\". The implementation of the algorithm may be optimized with\nthe knowledge that the this value is an object that has a fixed length and\nwhose integer indexed properties are not sparse. However, such optimization\nmust not introduce any observable changes in the specified behaviour of the\nalgorithm.\n\n...\n\n22.1.3.6 Array.prototype.fill (value [ , start [ , end ] ] )\n\n...\n3. Let relativeStart be ? ToInteger(start).\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/fill/return-abrupt-from-start.js", "esid": " sec-%typedarray%.prototype.fill", "description": " >Return abrupt from ToInteger(start).\n", "info": " |22.2.3.8 %TypedArray%.prototype.fill (value [ , start [ , end ] ] )\n\n%TypedArray%.prototype.fill is a distinct function that implements the same\nalgorithm as Array.prototype.fill as defined in 22.1.3.6 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\". The implementation of the algorithm may be optimized with\nthe knowledge that the this value is an object that has a fixed length and\nwhose integer indexed properties are not sparse. However, such optimization\nmust not introduce any observable changes in the specified behaviour of the\nalgorithm.\n\n...\n\n22.1.3.6 Array.prototype.fill (value [ , start [ , end ] ] )\n\n...\n3. Let relativeStart be ? ToInteger(start).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/fill/return-this.js", "esid": " sec-%typedarray%.prototype.fill", "description": " >Returns `this`.\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/fill/this-is-not-object.js", "esid": " sec-%typedarray%.prototype.fill", "description": " Throws a TypeError exception when `this` is not Object", "info": " |22.2.3.8 %TypedArray%.prototype.fill (value [ , start [ , end ] ] )\n\nThis function is not generic. ValidateTypedArray is applied to the this value\nprior to evaluating the algorithm. If its result is an abrupt completion that\nexception is thrown instead of evaluating the algorithm.\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/fill/this-is-not-typedarray-instance.js", "esid": " sec-%typedarray%.prototype.fill", "description": " >Throws a TypeError exception when `this` is not a TypedArray instance\n", "info": " |22.2.3.8 %TypedArray%.prototype.fill (value [ , start [ , end ] ] )\n\nThis function is not generic. ValidateTypedArray is applied to the this value\nprior to evaluating the algorithm. If its result is an abrupt completion that\nexception is thrown instead of evaluating the algorithm.\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n2. If O does not have a [[TypedArrayName]] internal slot, throw a TypeError\nexception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/filter/arraylength-internal.js", "esid": " sec-%typedarray%.prototype.filter", "description": " Uses internal ArrayLength instead of length property", "info": " |22.2.3.9 %TypedArray%.prototype.filter ( callbackfn [ , thisArg ] )\n\n...\n3. Let len be the value of O's [[ArrayLength]] internal slot.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/filter/callbackfn-arguments-with-thisarg.js", "esid": " sec-%typedarray%.prototype.filter", "description": " >thisArg does not affect callbackfn arguments\n", "info": " |22.2.3.9 %TypedArray%.prototype.filter ( callbackfn [ , thisArg ] )\n\n...\n9. Repeat, while k < len\n...\nc. Let selected be ToBoolean(? Call(callbackfn, T, \u00ab kValue, k, O \u00bb)).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/filter/callbackfn-arguments-without-thisarg.js", "esid": " sec-%typedarray%.prototype.filter", "description": " >callbackfn arguments\n", "info": " |22.2.3.9 %TypedArray%.prototype.filter ( callbackfn [ , thisArg ] )\n\n...\n9. Repeat, while k < len\n...\nc. Let selected be ToBoolean(? Call(callbackfn, T, \u00ab kValue, k, O \u00bb)).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/filter/callbackfn-no-iteration-over-non-integer.js", "esid": " sec-%typedarray%.prototype.filter", "description": " >Does not iterate over non-integer properties\n", "info": " |22.2.3.9 %TypedArray%.prototype.filter ( callbackfn [ , thisArg ] )\n\n...\n9. Repeat, while k < len\n...\nc. Let selected be ToBoolean(? Call(callbackfn, T, \u00ab kValue, k, O \u00bb)).\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/filter/callbackfn-not-callable-throws.js", "esid": " sec-%typedarray%.prototype.filter", "description": " Throws TypeError if callbackfn is not callable", "info": " |22.2.3.9 %TypedArray%.prototype.filter ( callbackfn [ , thisArg ] )\n\n...\n4. If IsCallable(callbackfn) is false, throw a TypeError exception.\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/filter/callbackfn-not-called-on-empty.js", "esid": " sec-%typedarray%.prototype.filter", "description": " >callbackfn is not called on empty instances\n", "info": " |22.2.3.9 %TypedArray%.prototype.filter ( callbackfn [ , thisArg ] )\n\n...\n9. Repeat, while k < len\n...\nc. Let selected be ToBoolean(? Call(callbackfn, T, \u00ab kValue, k, O \u00bb)).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/filter/callbackfn-return-does-not-change-instance.js", "esid": " sec-%typedarray%.prototype.filter", "description": " >The callbackfn return does not change the instance\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/filter/callbackfn-returns-abrupt.js", "esid": " sec-%typedarray%.prototype.filter", "description": " >Returns abrupt from callbackfn\n", "info": " |22.2.3.9 %TypedArray%.prototype.filter ( callbackfn [ , thisArg ] )\n\n...\n9. Repeat, while k < len\n...\nc. Let selected be ToBoolean(? Call(callbackfn, T, \u00ab kValue, k, O \u00bb)).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/filter/callbackfn-this.js", "esid": " sec-%typedarray%.prototype.filter", "description": " >callbackfn `this` value\n", "info": " |22.2.3.9 %TypedArray%.prototype.filter ( callbackfn [ , thisArg ] )\n\n...\n5. If thisArg was supplied, let T be thisArg; else let T be undefined.\n...\n9. Repeat, while k < len\n...\nc. Let selected be ToBoolean(? Call(callbackfn, T, \u00ab kValue, k, O \u00bb)).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/filter/invoked-as-func.js", "esid": " sec-%typedarray%.prototype.filter", "description": " Throws a TypeError exception when invoked as a function", "info": " |22.2.3.9 %TypedArray%.prototype.filter ( callbackfn [ , thisArg ] )\n\n1. Let O be the this value.\n2. Let valid be ValidateTypedArray(O).\n3. ReturnIfAbrupt(valid).\n...\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n2. If O does not have a [[TypedArrayName]] internal slot, throw a TypeError\nexception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/filter/invoked-as-method.js", "esid": " sec-%typedarray%.prototype.filter", "description": " Requires a [[TypedArrayName]] internal slot.", "info": " |22.2.3.9 %TypedArray%.prototype.filter ( callbackfn [ , thisArg ] )\n\n1. Let O be the this value.\n2. Let valid be ValidateTypedArray(O).\n3. ReturnIfAbrupt(valid).\n...\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n2. If O does not have a [[TypedArrayName]] internal slot, throw a TypeError\nexception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/filter/length.js", "esid": " sec-%typedarray%.prototype.filter", "description": " >%TypedArray%.prototype.filter.length is 1.\n", "info": " |%TypedArray%.prototype.filter ( callbackfn [ , thisArg ] )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/filter/name.js", "esid": " sec-%typedarray%.prototype.filter", "description": " >%TypedArray%.prototype.filter.name is \"filter\".\n", "info": " |%TypedArray%.prototype.filter ( callbackfn [ , thisArg ] )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/filter/not-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >TypedArray.prototype.filter does not implement [[Construct]], is not new-able\n", "info": " |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n", "includes": ["isConstructor.js", "testTypedArray.js"], "features": ["Reflect.construct", "arrow-function", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/filter/prop-desc.js", "esid": " sec-%typedarray%.prototype.filter", "description": " >\"filter\" property of TypedArrayPrototype\n", "info": " |ES6 section 17: Every other data property described in clauses 18 through 26\nand in Annex B.2 has the attributes { [[Writable]]: true,\n[[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/filter/result-does-not-share-buffer.js", "esid": " sec-%typedarray%.prototype.filter", "description": " >Return does not share buffer\n", "info": " |22.2.3.9 %TypedArray%.prototype.filter ( callbackfn [ , thisArg ] )\n\n...\n10. Let A be ? TypedArraySpeciesCreate(O, \u00ab captured \u00bb).\n...\n13. Return A.\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/filter/result-empty-callbackfn-returns-false.js", "esid": " sec-%typedarray%.prototype.filter", "description": " >Returns empty if every callbackfn returns boolean false\n", "info": " |22.2.3.9 %TypedArray%.prototype.filter ( callbackfn [ , thisArg ] )\n\n...\n12. For each element e of kept\na. Perform ! Set(A, ! ToString(n), e, true).\nb. Increment n by 1.\n13. Return A.\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/filter/result-full-callbackfn-returns-true.js", "esid": " sec-%typedarray%.prototype.filter", "description": " >Returns full length result if every callbackfn returns boolean false\n", "info": " |22.2.3.9 %TypedArray%.prototype.filter ( callbackfn [ , thisArg ] )\n\n...\n12. For each element e of kept\na. Perform ! Set(A, ! ToString(n), e, true).\nb. Increment n by 1.\n13. Return A.\n", "includes": ["testTypedArray.js", "compareArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/filter/speciesctor-get-ctor-abrupt.js", "esid": " sec-%typedarray%.prototype.filter", "description": " Return abrupt from SpeciesConstructor's get Constructor", "info": " |22.2.3.9 %TypedArray%.prototype.filter ( callbackfn [ , thisArg ] )\n\n...\n10. Let A be ? TypedArraySpeciesCreate(O, \u00ab captured \u00bb).\n...\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n1. Assert: Type(O) is Object.\n2. Let C be ? Get(O, \"constructor\").\n3. If C is undefined, return defaultConstructor.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/filter/speciesctor-get-ctor-inherited.js", "esid": " sec-%typedarray%.prototype.filter", "description": " get inherited constructor on SpeciesConstructor", "info": " |22.2.3.9 %TypedArray%.prototype.filter ( callbackfn [ , thisArg ] )\n\n...\n10. Let A be ? TypedArraySpeciesCreate(O, \u00ab captured \u00bb).\n...\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n1. Assert: Type(O) is Object.\n2. Let C be ? Get(O, \"constructor\").\n3. If C is undefined, return defaultConstructor.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/filter/speciesctor-get-ctor-returns-throws.js", "esid": " sec-%typedarray%.prototype.filter", "description": " >Throws if O.constructor returns a non-Object and non-undefined value\n", "info": " |22.2.3.9 %TypedArray%.prototype.filter ( callbackfn [ , thisArg ] )\n\n...\n10. Let A be ? TypedArraySpeciesCreate(O, \u00ab captured \u00bb).\n...\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n1. Assert: Type(O) is Object.\n2. Let C be ? Get(O, \"constructor\").\n3. If C is undefined, return defaultConstructor.\n4. If Type(C) is not Object, throw a TypeError exception.\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/filter/speciesctor-get-ctor.js", "esid": " sec-%typedarray%.prototype.filter", "description": " get constructor on SpeciesConstructor", "info": " |22.2.3.9 %TypedArray%.prototype.filter ( callbackfn [ , thisArg ] )\n\n...\n10. Let A be ? TypedArraySpeciesCreate(O, \u00ab captured \u00bb).\n...\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n1. Assert: Type(O) is Object.\n2. Let C be ? Get(O, \"constructor\").\n3. If C is undefined, return defaultConstructor.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/filter/speciesctor-get-species-custom-ctor-length-throws.js", "esid": " sec-%typedarray%.prototype.filter", "description": " >Throws a TypeError if new typedArray's length < captured\n", "info": " |22.2.3.9 %TypedArray%.prototype.filter ( callbackfn [ , thisArg ] )\n\n...\n10. Let A be ? TypedArraySpeciesCreate(O, \u00ab captured \u00bb).\n...\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n4. Return ? TypedArrayCreate(constructor, argumentList).\n\n22.2.4.6 TypedArrayCreate ( constructor, argumentList )\n\n...\n3. If argumentList is a List of a single Number, then\na. If the value of newTypedArray's [[ArrayLength]] internal slot <\nargumentList[0], throw a TypeError exception.\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol.species", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/filter/speciesctor-get-species-custom-ctor-throws.js", "esid": " sec-%typedarray%.prototype.filter", "description": " >Custom @@species constructor throws if it does not return a compatible object\n", "info": " |22.2.3.9 %TypedArray%.prototype.filter ( callbackfn [ , thisArg ] )\n\n...\n10. Let A be ? TypedArraySpeciesCreate(O, \u00ab captured \u00bb).\n...\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n4. Return ? TypedArrayCreate(constructor, argumentList).\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n...\n5. Let S be ? Get(C, @@species).\n...\n7. If IsConstructor(S) is true, return S.\n...\n\n22.2.4.6 TypedArrayCreate ( constructor, argumentList )\n\n1. Let newTypedArray be ? Construct(constructor, argumentList).\n2. Perform ? ValidateTypedArray(newTypedArray).\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol.species", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/filter/speciesctor-get-species-returns-throws.js", "esid": " sec-%typedarray%.prototype.filter", "description": " >Throws if returned @@species is not a constructor, null or undefined.\n", "info": " |22.2.3.9 %TypedArray%.prototype.filter ( callbackfn [ , thisArg ] )\n\n...\n10. Let A be ? TypedArraySpeciesCreate(O, \u00ab captured \u00bb).\n...\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n...\n5. Let S be ? Get(C, @@species).\n6. If S is either undefined or null, return defaultConstructor.\n7. If IsConstructor(S) is true, return S.\n8. Throw a TypeError exception.\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol.species", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/filter/this-is-not-object.js", "esid": " sec-%typedarray%.prototype.filter", "description": " Throws a TypeError exception when `this` is not Object", "info": " |22.2.3.9 %TypedArray%.prototype.filter ( callbackfn [ , thisArg ] )\n\nThe following steps are taken:\n\n1. Let O be the this value.\n2. Perform ? ValidateTypedArray(O).\n...\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/filter/this-is-not-typedarray-instance.js", "esid": " sec-%typedarray%.prototype.filter", "description": " >Throws a TypeError exception when `this` is not a TypedArray instance\n", "info": " |22.2.3.9 %TypedArray%.prototype.filter ( callbackfn [ , thisArg ] )\n\nThe following steps are taken:\n\n1. Let O be the this value.\n2. Perform ? ValidateTypedArray(O).\n...\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n2. If O does not have a [[TypedArrayName]] internal slot, throw a TypeError\nexception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/filter/values-are-not-cached.js", "esid": " sec-%typedarray%.prototype.filter", "description": " >Integer indexed values are not cached before interaction\n", "info": " |22.2.3.9 %TypedArray%.prototype.filter ( callbackfn [ , thisArg ] )\n\n...\n9. Repeat, while k < len\n...\nc. Let selected be ToBoolean(? Call(callbackfn, T, \u00ab kValue, k, O \u00bb)).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/filter/values-are-set.js", "esid": " sec-%typedarray%.prototype.filter", "description": " >Returned instance with filtered values set on it\n", "info": " |22.2.3.9 %TypedArray%.prototype.filter ( callbackfn [ , thisArg ] )\n\n...\n12. For each element e of kept\na. Perform ! Set(A, ! ToString(n), e, true).\nb. Increment n by 1.\n13. Return A.\n", "includes": ["testTypedArray.js", "compareArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/find/get-length-ignores-length-prop.js", "esid": " sec-%typedarray%.prototype.find", "description": " >[[Get]] of \"length\" uses [[ArrayLength]]\n", "info": " |22.2.3.10 %TypedArray%.prototype.find (predicate [ , thisArg ] )\n\n%TypedArray%.prototype.find is a distinct function that implements the same\nalgorithm as Array.prototype.find as defined in 22.1.3.8 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\". The implementation of the algorithm may be optimized with\nthe knowledge that the this value is an object that has a fixed length and\nwhose integer indexed properties are not sparse.\n\n...\n\n22.1.3.8 Array.prototype.find ( predicate[ , thisArg ] )\n\n...\n2. Let len be ? ToLength(? Get(O, \"length\")).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/find/invoked-as-func.js", "esid": " sec-%typedarray%.prototype.find", "description": " Throws a TypeError exception when invoked as a function", "info": " |22.2.3.10 %TypedArray%.prototype.find (predicate [ , thisArg ] )\n\nThis function is not generic. ValidateTypedArray is applied to the this value\nprior to evaluating the algorithm. If its result is an abrupt completion that\nexception is thrown instead of evaluating the algorithm.\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n2. If O does not have a [[TypedArrayName]] internal slot, throw a TypeError\nexception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/find/invoked-as-method.js", "esid": " sec-%typedarray%.prototype.find", "description": " Requires a [[TypedArrayName]] internal slot.", "info": " |22.2.3.10 %TypedArray%.prototype.find (predicate [ , thisArg ] )\n\nThis function is not generic. ValidateTypedArray is applied to the this value\nprior to evaluating the algorithm. If its result is an abrupt completion that\nexception is thrown instead of evaluating the algorithm.\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n2. If O does not have a [[TypedArrayName]] internal slot, throw a TypeError\nexception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/find/length.js", "esid": " sec-%typedarray%.prototype.find", "description": " >%TypedArray%.prototype.find.length is 1.\n", "info": " |%TypedArray%.prototype.find (predicate [ , thisArg ] )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/find/name.js", "esid": " sec-%typedarray%.prototype.find", "description": " >%TypedArray%.prototype.find.name is \"find\".\n", "info": " |%TypedArray%.prototype.find (predicate [ , thisArg ] )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/find/not-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >TypedArray.prototype.find does not implement [[Construct]], is not new-able\n", "info": " |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n", "includes": ["isConstructor.js", "testTypedArray.js"], "features": ["Reflect.construct", "arrow-function", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/find/predicate-call-changes-value.js", "esid": " sec-%typedarray%.prototype.find", "description": " >Change values during predicate call\n", "info": " |22.2.3.10 %TypedArray%.prototype.find (predicate [ , thisArg ] )\n\n%TypedArray%.prototype.find is a distinct function that implements the same\nalgorithm as Array.prototype.find as defined in 22.1.3.8 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\". The implementation of the algorithm may be optimized with\nthe knowledge that the this value is an object that has a fixed length and\nwhose integer indexed properties are not sparse.\n\n...\n\n22.1.3.8 Array.prototype.find ( predicate[ , thisArg ] )\n\n...\n4. If thisArg was supplied, let T be thisArg; else let T be undefined.\n5. Let k be 0.\n6. Repeat, while k < len\n...\nc. Let testResult be ToBoolean(? Call(predicate, T, \u00ab kValue, k, O \u00bb)).\n...\n", "includes": ["compareArray.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/find/predicate-call-parameters.js", "esid": " sec-%typedarray%.prototype.find", "description": " >Predicate called as F.call( thisArg, kValue, k, O ) for each array entry.\n", "info": " |22.2.3.10 %TypedArray%.prototype.find (predicate [ , thisArg ] )\n\n%TypedArray%.prototype.find is a distinct function that implements the same\nalgorithm as Array.prototype.find as defined in 22.1.3.8 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\". The implementation of the algorithm may be optimized with\nthe knowledge that the this value is an object that has a fixed length and\nwhose integer indexed properties are not sparse.\n\n...\n\n22.1.3.8 Array.prototype.find ( predicate[ , thisArg ] )\n\n...\n4. If thisArg was supplied, let T be thisArg; else let T be undefined.\n5. Let k be 0.\n6. Repeat, while k < len\n...\nc. Let testResult be ToBoolean(? Call(predicate, T, \u00ab kValue, k, O \u00bb)).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/find/predicate-call-this-non-strict.js", "esid": " sec-%typedarray%.prototype.find", "description": " >Verify predicate this on non-strict mode\n", "info": " |22.2.3.10 %TypedArray%.prototype.find (predicate [ , thisArg ] )\n\n%TypedArray%.prototype.find is a distinct function that implements the same\nalgorithm as Array.prototype.find as defined in 22.1.3.8 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\". The implementation of the algorithm may be optimized with\nthe knowledge that the this value is an object that has a fixed length and\nwhose integer indexed properties are not sparse.\n\n...\n\n22.1.3.8 Array.prototype.find ( predicate[ , thisArg ] )\n\n...\n4. If thisArg was supplied, let T be thisArg; else let T be undefined.\n...\n6. Repeat, while k < len\n...\nc. Let testResult be ToBoolean(? Call(predicate, T, \u00ab kValue, k, O \u00bb)).\n...\n", "flags": ["noStrict"], "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/find/predicate-call-this-strict.js", "esid": " sec-%typedarray%.prototype.find", "description": " >Verify predicate this on strict mode\n", "info": " |22.2.3.10 %TypedArray%.prototype.find (predicate [ , thisArg ] )\n\n%TypedArray%.prototype.find is a distinct function that implements the same\nalgorithm as Array.prototype.find as defined in 22.1.3.8 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\". The implementation of the algorithm may be optimized with\nthe knowledge that the this value is an object that has a fixed length and\nwhose integer indexed properties are not sparse.\n\n...\n\n22.1.3.8 Array.prototype.find ( predicate[ , thisArg ] )\n\n...\n4. If thisArg was supplied, let T be thisArg; else let T be undefined.\n...\n6. Repeat, while k < len\n...\nc. Let testResult be ToBoolean(? Call(predicate, T, \u00ab kValue, k, O \u00bb)).\n...\n", "flags": ["onlyStrict"], "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/find/predicate-not-called-on-empty-array.js", "esid": " sec-%typedarray%.prototype.find", "description": " >Predicate is not called on empty instances\n", "info": " |22.2.3.10 %TypedArray%.prototype.find (predicate [ , thisArg ] )\n\n%TypedArray%.prototype.find is a distinct function that implements the same\nalgorithm as Array.prototype.find as defined in 22.1.3.8 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\". The implementation of the algorithm may be optimized with\nthe knowledge that the this value is an object that has a fixed length and\nwhose integer indexed properties are not sparse.\n\n...\n\n22.1.3.8 Array.prototype.find ( predicate[ , thisArg ] )\n\n...\n6. Repeat, while k < len\n...\nc. Let testResult be ToBoolean(? Call(predicate, T, \u00ab kValue, k, O \u00bb)).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/find/prop-desc.js", "esid": " sec-%typedarray%.prototype.find", "description": " >\"find\" property of TypedArrayPrototype\n", "info": " |ES6 section 17: Every other data property described in clauses 18 through 26\nand in Annex B.2 has the attributes { [[Writable]]: true,\n[[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/find/return-abrupt-from-predicate-call.js", "esid": " sec-%typedarray%.prototype.find", "description": " >Return abrupt from predicate call.\n", "info": " |22.2.3.10 %TypedArray%.prototype.find (predicate [ , thisArg ] )\n\n%TypedArray%.prototype.find is a distinct function that implements the same\nalgorithm as Array.prototype.find as defined in 22.1.3.8 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\". The implementation of the algorithm may be optimized with\nthe knowledge that the this value is an object that has a fixed length and\nwhose integer indexed properties are not sparse.\n\n...\n\n22.1.3.8 Array.prototype.find ( predicate[ , thisArg ] )\n\n...\n6. Repeat, while k < len\n...\nc. Let testResult be ToBoolean(? Call(predicate, T, \u00ab kValue, k, O \u00bb)).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/find/return-found-value-predicate-result-is-true.js", "esid": " sec-%typedarray%.prototype.find", "description": " >Return found value if predicate return a boolean true value.\n", "info": " |22.2.3.10 %TypedArray%.prototype.find (predicate [ , thisArg ] )\n\n%TypedArray%.prototype.find is a distinct function that implements the same\nalgorithm as Array.prototype.find as defined in 22.1.3.8 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\". The implementation of the algorithm may be optimized with\nthe knowledge that the this value is an object that has a fixed length and\nwhose integer indexed properties are not sparse.\n\n...\n\n22.1.3.8 Array.prototype.find ( predicate[ , thisArg ] )\n\n...\n6. Repeat, while k < len\n...\nc. Let testResult be ToBoolean(? Call(predicate, T, \u00ab kValue, k, O \u00bb)).\nd. If testResult is true, return kValue.\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/find/return-undefined-if-predicate-returns-false-value.js", "esid": " sec-%typedarray%.prototype.find", "description": " >Return undefined if predicate always returns a boolean false value.\n", "info": " |22.2.3.10 %TypedArray%.prototype.find (predicate [ , thisArg ] )\n\n%TypedArray%.prototype.find is a distinct function that implements the same\nalgorithm as Array.prototype.find as defined in 22.1.3.8 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\". The implementation of the algorithm may be optimized with\nthe knowledge that the this value is an object that has a fixed length and\nwhose integer indexed properties are not sparse.\n\n...\n\n22.1.3.8 Array.prototype.find ( predicate[ , thisArg ] )\n\n...\n6. Repeat, while k < len\n...\nc. Let testResult be ToBoolean(? Call(predicate, T, \u00ab kValue, k, O \u00bb)).\n...\n7. Return undefined.\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/find/this-is-not-object.js", "esid": " sec-%typedarray%.prototype.find", "description": " Throws a TypeError exception when `this` is not Object", "info": " |22.2.3.10 %TypedArray%.prototype.find (predicate [ , thisArg ] )\n\nThis function is not generic. ValidateTypedArray is applied to the this value\nprior to evaluating the algorithm. If its result is an abrupt completion that\nexception is thrown instead of evaluating the algorithm.\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/find/this-is-not-typedarray-instance.js", "esid": " sec-%typedarray%.prototype.find", "description": " >Throws a TypeError exception when `this` is not a TypedArray instance\n", "info": " |22.2.3.10 %TypedArray%.prototype.find (predicate [ , thisArg ] )\n\nThis function is not generic. ValidateTypedArray is applied to the this value\nprior to evaluating the algorithm. If its result is an abrupt completion that\nexception is thrown instead of evaluating the algorithm.\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n2. If O does not have a [[TypedArrayName]] internal slot, throw a TypeError\nexception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/findIndex/get-length-ignores-length-prop.js", "esid": " sec-%typedarray%.prototype.findindex", "description": " >[[Get]] of \"length\" uses [[ArrayLength]]\n", "info": " |22.2.3.11 %TypedArray%.prototype.findIndex ( predicate [ , thisArg ] )\n\n%TypedArray%.prototype.findIndex is a distinct function that implements the\nsame algorithm as Array.prototype.findIndex as defined in 22.1.3.9 except that\nthe this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n...\n\n22.1.3.9 Array.prototype.findIndex ( predicate[ , thisArg ] )\n\n...\n2. Let len be ? ToLength(? Get(O, \"length\")).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/findIndex/invoked-as-func.js", "esid": " sec-%typedarray%.prototype.findindex", "description": " Throws a TypeError exception when invoked as a function", "info": " |22.2.3.11 %TypedArray%.prototype.findIndex ( predicate [ , thisArg ] )\n\nThis function is not generic. ValidateTypedArray is applied to the this value\nprior to evaluating the algorithm. If its result is an abrupt completion that\nexception is thrown instead of evaluating the algorithm.\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n2. If O does not have a [[TypedArrayName]] internal slot, throw a TypeError\nexception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/findIndex/invoked-as-method.js", "esid": " sec-%typedarray%.prototype.findindex", "description": " Requires a [[TypedArrayName]] internal slot.", "info": " |22.2.3.11 %TypedArray%.prototype.findIndex ( predicate [ , thisArg ] )\n\nThis function is not generic. ValidateTypedArray is applied to the this value\nprior to evaluating the algorithm. If its result is an abrupt completion that\nexception is thrown instead of evaluating the algorithm.\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n2. If O does not have a [[TypedArrayName]] internal slot, throw a TypeError\nexception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/findIndex/length.js", "esid": " sec-%typedarray%.prototype.findindex", "description": " >%TypedArray%.prototype.findIndex.length is 1.\n", "info": " |%TypedArray%.prototype.findIndex (predicate [ , thisArg ] )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/findIndex/name.js", "esid": " sec-%typedarray%.prototype.findindex", "description": " >%TypedArray%.prototype.findIndex.name is \"findIndex\".\n", "info": " |%TypedArray%.prototype.findIndex (predicate [ , thisArg ] )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/findIndex/not-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >TypedArray.prototype.findIndex does not implement [[Construct]], is not new-able\n", "info": " |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n", "includes": ["isConstructor.js", "testTypedArray.js"], "features": ["Reflect.construct", "arrow-function", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/findIndex/predicate-call-changes-value.js", "esid": " sec-%typedarray%.prototype.findindex", "description": " >Change values during predicate call\n", "info": " |22.2.3.11 %TypedArray%.prototype.findIndex ( predicate [ , thisArg ] )\n\n%TypedArray%.prototype.findIndex is a distinct function that implements the\nsame algorithm as Array.prototype.findIndex as defined in 22.1.3.9 except that\nthe this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n...\n\n22.1.3.9 Array.prototype.findIndex ( predicate[ , thisArg ] )\n\n...\n6. Repeat, while k < len\n...\nc. Let testResult be ToBoolean(? Call(predicate, T, \u00ab kValue, k, O \u00bb)).\n...\n", "includes": ["compareArray.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/findIndex/predicate-call-parameters.js", "esid": " sec-%typedarray%.prototype.findindex", "description": " >Predicate called as F.call( thisArg, kValue, k, O ) for each array entry.\n", "info": " |22.2.3.11 %TypedArray%.prototype.findIndex ( predicate [ , thisArg ] )\n\n%TypedArray%.prototype.findIndex is a distinct function that implements the\nsame algorithm as Array.prototype.findIndex as defined in 22.1.3.9 except that\nthe this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n...\n\n22.1.3.9 Array.prototype.findIndex ( predicate[ , thisArg ] )\n\n...\n4. If thisArg was supplied, let T be thisArg; else let T be undefined.\n5. Let k be 0.\n6. Repeat, while k < len\n...\nc. Let testResult be ToBoolean(? Call(predicate, T, \u00ab kValue, k, O \u00bb)).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/findIndex/predicate-call-this-non-strict.js", "esid": " sec-%typedarray%.prototype.findindex", "description": " >Verify predicate this on non-strict mode\n", "info": " |22.2.3.11 %TypedArray%.prototype.findIndex ( predicate [ , thisArg ] )\n\n%TypedArray%.prototype.findIndex is a distinct function that implements the\nsame algorithm as Array.prototype.findIndex as defined in 22.1.3.9 except that\nthe this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n...\n\n22.1.3.9 Array.prototype.findIndex ( predicate[ , thisArg ] )\n\n...\n4. If thisArg was supplied, let T be thisArg; else let T be undefined.\n5. Let k be 0.\n6. Repeat, while k < len\n...\nc. Let testResult be ToBoolean(? Call(predicate, T, \u00ab kValue, k, O \u00bb)).\n...\n", "flags": ["noStrict"], "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/findIndex/predicate-call-this-strict.js", "esid": " sec-%typedarray%.prototype.findindex", "description": " >Predicate thisArg as F.call( thisArg, kValue, k, O ) for each array entry.\n", "info": " |22.2.3.11 %TypedArray%.prototype.findIndex ( predicate [ , thisArg ] )\n\n%TypedArray%.prototype.findIndex is a distinct function that implements the\nsame algorithm as Array.prototype.findIndex as defined in 22.1.3.9 except that\nthe this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n...\n\n22.1.3.9 Array.prototype.findIndex ( predicate[ , thisArg ] )\n\n...\n4. If thisArg was supplied, let T be thisArg; else let T be undefined.\n5. Let k be 0.\n6. Repeat, while k < len\n...\nc. Let testResult be ToBoolean(? Call(predicate, T, \u00ab kValue, k, O \u00bb)).\n...\n", "flags": ["onlyStrict"], "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/findIndex/predicate-not-called-on-empty-array.js", "esid": " sec-%typedarray%.prototype.findindex", "description": " >Predicate is not called on an empty instance\n", "info": " |22.2.3.11 %TypedArray%.prototype.findIndex ( predicate [ , thisArg ] )\n\n%TypedArray%.prototype.findIndex is a distinct function that implements the\nsame algorithm as Array.prototype.findIndex as defined in 22.1.3.9 except that\nthe this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n...\n\n22.1.3.9 Array.prototype.findIndex ( predicate[ , thisArg ] )\n\n...\n6. Repeat, while k < len\n...\nc. Let testResult be ToBoolean(? Call(predicate, T, \u00ab kValue, k, O \u00bb)).\n...\n7. Return -1.\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/findIndex/prop-desc.js", "esid": " sec-%typedarray%.prototype.findindex", "description": " >\"findIndex\" property of TypedArrayPrototype\n", "info": " |ES6 section 17: Every other data property described in clauses 18 through 26\nand in Annex B.2 has the attributes { [[Writable]]: true,\n[[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/findIndex/return-abrupt-from-predicate-call.js", "esid": " sec-%typedarray%.prototype.findindex", "description": " >Return abrupt from predicate call.\n", "info": " |22.2.3.11 %TypedArray%.prototype.findIndex ( predicate [ , thisArg ] )\n\n%TypedArray%.prototype.findIndex is a distinct function that implements the\nsame algorithm as Array.prototype.findIndex as defined in 22.1.3.9 except that\nthe this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n...\n\n22.1.3.9 Array.prototype.findIndex ( predicate[ , thisArg ] )\n\n...\n5. Let k be 0.\n6. Repeat, while k < len\n...\nc. Let testResult be ToBoolean(? Call(predicate, T, \u00ab kValue, k, O \u00bb)).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/findIndex/return-index-predicate-result-is-true.js", "esid": " sec-%typedarray%.prototype.findindex", "description": " >Return index if predicate return a boolean true value.\n", "info": " |22.2.3.11 %TypedArray%.prototype.findIndex ( predicate [ , thisArg ] )\n\n%TypedArray%.prototype.findIndex is a distinct function that implements the\nsame algorithm as Array.prototype.findIndex as defined in 22.1.3.9 except that\nthe this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n...\n\n22.1.3.9 Array.prototype.findIndex ( predicate[ , thisArg ] )\n\n...\n5. Let k be 0.\n6. Repeat, while k < len\n...\nc. Let testResult be ToBoolean(? Call(predicate, T, \u00ab kValue, k, O \u00bb)).\nd. If testResult is true, return k.\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/findIndex/return-negative-one-if-predicate-returns-false-value.js", "esid": " sec-%typedarray%.prototype.findindex", "description": " >Return -1 if predicate always returns a boolean false value.\n", "info": " |22.2.3.11 %TypedArray%.prototype.findIndex ( predicate [ , thisArg ] )\n\n%TypedArray%.prototype.findIndex is a distinct function that implements the\nsame algorithm as Array.prototype.findIndex as defined in 22.1.3.9 except that\nthe this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n...\n\n22.1.3.9 Array.prototype.findIndex ( predicate[ , thisArg ] )\n\n...\n6. Repeat, while k < len\n...\nc. Let testResult be ToBoolean(? Call(predicate, T, \u00ab kValue, k, O \u00bb)).\n...\n7. Return -1.\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/findIndex/this-is-not-object.js", "esid": " sec-%typedarray%.prototype.findindex", "description": " Throws a TypeError exception when `this` is not Object", "info": " |22.2.3.11 %TypedArray%.prototype.findIndex ( predicate [ , thisArg ] )\n\nThis function is not generic. ValidateTypedArray is applied to the this value\nprior to evaluating the algorithm. If its result is an abrupt completion that\nexception is thrown instead of evaluating the algorithm.\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/findIndex/this-is-not-typedarray-instance.js", "esid": " sec-%typedarray%.prototype.findindex", "description": " >Throws a TypeError exception when `this` is not a TypedArray instance\n", "info": " |22.2.3.11 %TypedArray%.prototype.findIndex ( predicate [ , thisArg ] )\n\nThis function is not generic. ValidateTypedArray is applied to the this value\nprior to evaluating the algorithm. If its result is an abrupt completion that\nexception is thrown instead of evaluating the algorithm.\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n2. If O does not have a [[TypedArrayName]] internal slot, throw a TypeError\nexception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/forEach/arraylength-internal.js", "esid": " sec-%typedarray%.prototype.foreach", "description": " >[[ArrayLength]] is accessed in place of performing a [[Get]] of \"length\"\n", "info": " |22.2.3.12 %TypedArray%.prototype.forEach ( callbackfn [ , thisArg ] )\n\n%TypedArray%.prototype.forEach is a distinct function that implements the same\nalgorithm as Array.prototype.forEach as defined in 22.1.3.10 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\"\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/forEach/callbackfn-arguments-with-thisarg.js", "esid": " sec-%typedarray%.prototype.foreach", "description": " >thisArg does not affect callbackfn arguments\n", "info": " |22.2.3.12 %TypedArray%.prototype.forEach ( callbackfn [ , thisArg ] )\n\n%TypedArray%.prototype.forEach is a distinct function that implements the same\nalgorithm as Array.prototype.forEach as defined in 22.1.3.10 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\"\n\n22.1.3.10 Array.prototype.forEach ( callbackfn [ , thisArg ] )\n\n...\n6. Repeat, while k < len\n...\nc. If kPresent is true, then\ni. Let kValue be ? Get(O, Pk).\nii. Perform ? Call(callbackfn, T, \u00ab kValue, k, O \u00bb).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/forEach/callbackfn-arguments-without-thisarg.js", "esid": " sec-%typedarray%.prototype.foreach", "description": " >callbackfn arguments\n", "info": " |22.2.3.12 %TypedArray%.prototype.forEach ( callbackfn [ , thisArg ] )\n\n%TypedArray%.prototype.forEach is a distinct function that implements the same\nalgorithm as Array.prototype.forEach as defined in 22.1.3.10 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\"\n\n22.1.3.10 Array.prototype.forEach ( callbackfn [ , thisArg ] )\n\n...\n6. Repeat, while k < len\n...\nc. If kPresent is true, then\ni. Let kValue be ? Get(O, Pk).\nii. Perform ? Call(callbackfn, T, \u00ab kValue, k, O \u00bb).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/forEach/callbackfn-no-interaction-over-non-integer.js", "esid": " sec-%typedarray%.prototype.foreach", "description": " >Does not interact over non-integer properties\n", "info": " |22.2.3.12 %TypedArray%.prototype.forEach ( callbackfn [ , thisArg ] )\n\n...\n6. Repeat, while k < len\n...\nc. If kPresent is true, then\n...\nii. Perform ? Call(callbackfn, T, \u00ab kValue, k, O \u00bb).\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/forEach/callbackfn-not-called-on-empty.js", "esid": " sec-%typedarray%.prototype.foreach", "description": " >callbackfn is not called on empty instances\n", "info": " |22.2.3.12 %TypedArray%.prototype.forEach ( callbackfn [ , thisArg ] )\n\n%TypedArray%.prototype.forEach is a distinct function that implements the same\nalgorithm as Array.prototype.forEach as defined in 22.1.3.10 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\"\n\n22.1.3.10 Array.prototype.forEach ( callbackfn [ , thisArg ] )\n\n...\n6. Repeat, while k < len\n...\nc. If kPresent is true, then\n...\nii. Perform ? Call(callbackfn, T, \u00ab kValue, k, O \u00bb).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/forEach/callbackfn-return-does-not-change-instance.js", "esid": " sec-%typedarray%.prototype.foreach", "description": " >The callbackfn return does not change the instance\n", "info": " |22.2.3.12 %TypedArray%.prototype.forEach ( callbackfn [ , thisArg ] )\n\n%TypedArray%.prototype.forEach is a distinct function that implements the same\nalgorithm as Array.prototype.forEach as defined in 22.1.3.10 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\"\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/forEach/callbackfn-returns-abrupt.js", "esid": " sec-%typedarray%.prototype.foreach", "description": " >Returns abrupt from callbackfn\n", "info": " |22.2.3.12 %TypedArray%.prototype.forEach ( callbackfn [ , thisArg ] )\n\n%TypedArray%.prototype.forEach is a distinct function that implements the same\nalgorithm as Array.prototype.forEach as defined in 22.1.3.10 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\"\n\n22.1.3.10 Array.prototype.forEach ( callbackfn [ , thisArg ] )\n\n...\n6. Repeat, while k < len\n...\nc. If kPresent is true, then\n...\nii. Perform ? Call(callbackfn, T, \u00ab kValue, k, O \u00bb).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/forEach/callbackfn-this.js", "esid": " sec-%typedarray%.prototype.foreach", "description": " >callbackfn `this` value\n", "info": " |22.2.3.12 %TypedArray%.prototype.forEach ( callbackfn [ , thisArg ] )\n\n%TypedArray%.prototype.forEach is a distinct function that implements the same\nalgorithm as Array.prototype.forEach as defined in 22.1.3.10 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\"\n\n22.1.3.10 Array.prototype.forEach ( callbackfn [ , thisArg ] )\n\n...\n4. If thisArg was supplied, let T be thisArg; else let T be undefined.\n...\n6. Repeat, while k < len\n...\nc. If kPresent is true, then\n...\nii. Perform ? Call(callbackfn, T, \u00ab kValue, k, O \u00bb).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/forEach/invoked-as-func.js", "esid": " sec-%typedarray%.prototype.foreach", "description": " Throws a TypeError exception when invoked as a function", "info": " |22.2.3.12 %TypedArray%.prototype.forEach ( callbackfn [ , thisArg ] )\n\nThis function is not generic. ValidateTypedArray is applied to the this value\nprior to evaluating the algorithm. If its result is an abrupt completion that\nexception is thrown instead of evaluating the algorithm.\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n2. If O does not have a [[TypedArrayName]] internal slot, throw a TypeError\nexception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/forEach/invoked-as-method.js", "esid": " sec-%typedarray%.prototype.foreach", "description": " Requires a [[TypedArrayName]] internal slot.", "info": " |22.2.3.12 %TypedArray%.prototype.forEach ( callbackfn [ , thisArg ] )\n\nThis function is not generic. ValidateTypedArray is applied to the this value\nprior to evaluating the algorithm. If its result is an abrupt completion that\nexception is thrown instead of evaluating the algorithm.\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n2. If O does not have a [[TypedArrayName]] internal slot, throw a TypeError\nexception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/forEach/length.js", "esid": " sec-%typedarray%.prototype.foreach", "description": " >%TypedArray%.prototype.forEach.length is 1.\n", "info": " |%TypedArray%.prototype.forEach (callbackfn [ , thisArg ] )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/forEach/name.js", "esid": " sec-%typedarray%.prototype.foreach", "description": " >%TypedArray%.prototype.forEach.name is \"forEach\".\n", "info": " |%TypedArray%.prototype.forEach (callbackfn [ , thisArg ] )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/forEach/not-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >TypedArray.prototype.forEach does not implement [[Construct]], is not new-able\n", "info": " |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n", "includes": ["isConstructor.js", "testTypedArray.js"], "features": ["Reflect.construct", "arrow-function", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/forEach/prop-desc.js", "esid": " sec-%typedarray%.prototype.foreach", "description": " >\"forEach\" property of TypedArrayPrototype\n", "info": " |ES6 section 17: Every other data property described in clauses 18 through 26\nand in Annex B.2 has the attributes { [[Writable]]: true,\n[[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/forEach/returns-undefined.js", "esid": " sec-%typedarray%.prototype.foreach", "description": " >Returns undefined\n", "info": " |22.2.3.12 %TypedArray%.prototype.forEach ( callbackfn [ , thisArg ] )\n\n%TypedArray%.prototype.forEach is a distinct function that implements the same\nalgorithm as Array.prototype.forEach as defined in 22.1.3.10 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\"\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/forEach/this-is-not-object.js", "esid": " sec-%typedarray%.prototype.foreach", "description": " Throws a TypeError exception when `this` is not Object", "info": " |22.2.3.12 %TypedArray%.prototype.forEach ( callbackfn [ , thisArg ] )\n\nThis function is not generic. ValidateTypedArray is applied to the this value\nprior to evaluating the algorithm. If its result is an abrupt completion that\nexception is thrown instead of evaluating the algorithm.\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/forEach/this-is-not-typedarray-instance.js", "esid": " sec-%typedarray%.prototype.foreach", "description": " >Throws a TypeError exception when `this` is not a TypedArray instance\n", "info": " |22.2.3.12 %TypedArray%.prototype.forEach ( callbackfn [ , thisArg ] )\n\nThis function is not generic. ValidateTypedArray is applied to the this value\nprior to evaluating the algorithm. If its result is an abrupt completion that\nexception is thrown instead of evaluating the algorithm.\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n2. If O does not have a [[TypedArrayName]] internal slot, throw a TypeError\nexception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/forEach/values-are-not-cached.js", "esid": " sec-%typedarray%.prototype.foreach", "description": " >Integer indexed values are not cached before iteration\n", "info": " |22.2.3.12 %TypedArray%.prototype.forEach ( callbackfn [ , thisArg ] )\n\n%TypedArray%.prototype.forEach is a distinct function that implements the same\nalgorithm as Array.prototype.forEach as defined in 22.1.3.10 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\"\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/includes/not-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >TypedArray.prototype.includes does not implement [[Construct]], is not new-able\n", "info": " |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n", "includes": ["isConstructor.js", "testTypedArray.js"], "features": ["Reflect.construct", "arrow-function", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/includes/return-abrupt-tointeger-fromindex-symbol.js", "esid": " sec-%typedarray%.prototype.includes", "description": " Return abrupt from ToInteger(fromIndex) - using symbol", "info": " |22.2.3.13 %TypedArray%.prototype.includes ( searchElement [ , fromIndex ] )\n\n%TypedArray%.prototype.includes is a distinct function that implements the\nsame algorithm as Array.prototype.includes as defined in 22.1.3.11 except that\nthe this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n22.1.3.11 Array.prototype.includes ( searchElement [ , fromIndex ] )\n\n...\n4. Let n be ? ToInteger(fromIndex). (If fromIndex is undefined, this step\nproduces the value 0.)\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/includes/this-is-not-object.js", "esid": " sec-%typedarray%.prototype.includes", "description": " Throws a TypeError exception when `this` is not Object", "info": " |22.2.3.14 %TypedArray%.prototype.includes ( searchElement [ , fromIndex ] )\n\nThis function is not generic. ValidateTypedArray is applied to the this value\nprior to evaluating the algorithm. If its result is an abrupt completion that\nexception is thrown instead of evaluating the algorithm.\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/includes/this-is-not-typedarray-instance.js", "esid": " sec-%typedarray%.prototype.includes", "description": " >Throws a TypeError exception when `this` is not a TypedArray instance\n", "info": " |22.2.3.14 %TypedArray%.prototype.includes ( searchElement [ , fromIndex ] )\n\nThis function is not generic. ValidateTypedArray is applied to the this value\nprior to evaluating the algorithm. If its result is an abrupt completion that\nexception is thrown instead of evaluating the algorithm.\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n2. If O does not have a [[TypedArrayName]] internal slot, throw a TypeError\nexception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/indexOf/fromIndex-equal-or-greater-length-returns-minus-one.js", "esid": " sec-%typedarray%.prototype.indexof", "description": " Return -1 if fromIndex >= ArrayLength", "info": " |22.2.3.13 %TypedArray%.prototype.indexOf (searchElement [ , fromIndex ] )\n\n%TypedArray%.prototype.indexOf is a distinct function that implements the same\nalgorithm as Array.prototype.indexOf as defined in 22.1.3.12 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\".\n\n22.1.3.12 Array.prototype.indexOf ( searchElement [ , fromIndex ] )\n\n...\n4. Let n be ? ToInteger(fromIndex). (If fromIndex is undefined, this step\nproduces the value 0.)\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/indexOf/fromIndex-infinity.js", "esid": " sec-%typedarray%.prototype.indexof", "description": " handle Infinity values for fromIndex", "info": " |22.2.3.13 %TypedArray%.prototype.indexOf (searchElement [ , fromIndex ] )\n\n%TypedArray%.prototype.indexOf is a distinct function that implements the same\nalgorithm as Array.prototype.indexOf as defined in 22.1.3.12 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\".\n\n22.1.3.12 Array.prototype.indexOf ( searchElement [ , fromIndex ] )\n\n...\n6. If n \u2265 0, then\na. If n is -0, let k be +0; else let k be n.\n7. Else n < 0,\na. Let k be len + n.\nb. If k < 0, let k be 0.\n8. Repeat, while k < len\na. Let kPresent be ? HasProperty(O, ! ToString(k)).\nb. If kPresent is true, then\ni. Let elementK be ? Get(O, ! ToString(k)).\nii. Let same be the result of performing Strict Equality Comparison\nsearchElement === elementK.\niii. If same is true, return k.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/indexOf/get-length-uses-internal-arraylength.js", "esid": " sec-%typedarray%.prototype.indexof", "description": " Get \"length\" uses internal ArrayLength", "info": " |22.2.3.13 %TypedArray%.prototype.indexOf (searchElement [ , fromIndex ] )\n\n%TypedArray%.prototype.indexOf is a distinct function that implements the same\nalgorithm as Array.prototype.indexOf as defined in 22.1.3.12 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\".\n\n22.1.3.12 Array.prototype.indexOf ( searchElement [ , fromIndex ] )\n\n...\n2. Let len be ? ToLength(? Get(O, \"length\")).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/indexOf/invoked-as-func.js", "esid": " sec-%typedarray%.prototype.indexof", "description": " Throws a TypeError exception when invoked as a function", "info": " |22.2.3.13 %TypedArray%.prototype.indexOf (searchElement [ , fromIndex ] )\n\nThis function is not generic. ValidateTypedArray is applied to the this value\nprior to evaluating the algorithm. If its result is an abrupt completion that\nexception is thrown instead of evaluating the algorithm.\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n2. If O does not have a [[TypedArrayName]] internal slot, throw a TypeError\nexception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/indexOf/invoked-as-method.js", "esid": " sec-%typedarray%.prototype.indexof", "description": " Requires a [[TypedArrayName]] internal slot.", "info": " |22.2.3.13 %TypedArray%.prototype.indexOf (searchElement [ , fromIndex ] )\n\nThis function is not generic. ValidateTypedArray is applied to the this value\nprior to evaluating the algorithm. If its result is an abrupt completion that\nexception is thrown instead of evaluating the algorithm.\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n2. If O does not have a [[TypedArrayName]] internal slot, throw a TypeError\nexception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/indexOf/length-zero-returns-minus-one.js", "esid": " sec-%typedarray%.prototype.indexof", "description": " Returns -1 if length is 0", "info": " |22.2.3.13 %TypedArray%.prototype.indexOf (searchElement [ , fromIndex ] )\n\n%TypedArray%.prototype.indexOf is a distinct function that implements the same\nalgorithm as Array.prototype.indexOf as defined in 22.1.3.12 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\".\n\n22.1.3.12 Array.prototype.indexOf ( searchElement [ , fromIndex ] )\n\n...\n2. Let len be ? ToLength(? Get(O, \"length\")).\n3. If len is 0, return -1.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/indexOf/length.js", "esid": " sec-%typedarray%.prototype.indexof", "description": " >%TypedArray%.prototype.indexOf.length is 1.\n", "info": " |%TypedArray%.prototype.indexOf (searchElement [ , fromIndex ] )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/indexOf/name.js", "esid": " sec-%typedarray%.prototype.indexof", "description": " >%TypedArray%.prototype.indexOf.name is \"indexOf\".\n", "info": " |%TypedArray%.prototype.indexOf (searchElement [ , fromIndex ] )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/indexOf/no-arg.js", "esid": " sec-%typedarray%.prototype.indexof", "description": " >If `searchElement` is not supplied, -1 is returned.\n", "info": " |%TypedArray%.prototype.indexOf ( searchElement [ , fromIndex ] )\n\n%TypedArray%.prototype.indexOf is a distinct function that implements\nthe same algorithm as Array.prototype.indexOf as defined in 22.1.3.14\nexcept that the this value's [[ArrayLength]] internal slot is accessed\nin place of performing a [[Get]] of \"length\".\n\nArray.prototype.indexOf ( searchElement [ , fromIndex ] )\n\n[...]\n10. Return -1.\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/indexOf/not-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >TypedArray.prototype.indexOf does not implement [[Construct]], is not new-able\n", "info": " |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n", "includes": ["isConstructor.js", "testTypedArray.js"], "features": ["Reflect.construct", "arrow-function", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/indexOf/prop-desc.js", "esid": " sec-%typedarray%.prototype.indexof", "description": " >\"indexOf\" property of TypedArrayPrototype\n", "info": " |ES6 section 17: Every other data property described in clauses 18 through 26\nand in Annex B.2 has the attributes { [[Writable]]: true,\n[[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/indexOf/return-abrupt-tointeger-fromindex-symbol.js", "esid": " sec-%typedarray%.prototype.indexof", "description": " Return abrupt from ToInteger(fromIndex) - using symbol", "info": " |22.2.3.13 %TypedArray%.prototype.indexOf (searchElement [ , fromIndex ] )\n\n%TypedArray%.prototype.indexOf is a distinct function that implements the same\nalgorithm as Array.prototype.indexOf as defined in 22.1.3.12 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\".\n\n22.1.3.12 Array.prototype.indexOf ( searchElement [ , fromIndex ] )\n\n...\n4. Let n be ? ToInteger(fromIndex). (If fromIndex is undefined, this step\nproduces the value 0.)\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/indexOf/return-abrupt-tointeger-fromindex.js", "esid": " sec-%typedarray%.prototype.indexof", "description": " Return abrupt from ToInteger(fromIndex)", "info": " |22.2.3.13 %TypedArray%.prototype.indexOf (searchElement [ , fromIndex ] )\n\n%TypedArray%.prototype.indexOf is a distinct function that implements the same\nalgorithm as Array.prototype.indexOf as defined in 22.1.3.12 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\".\n\n22.1.3.12 Array.prototype.indexOf ( searchElement [ , fromIndex ] )\n\n...\n4. Let n be ? ToInteger(fromIndex). (If fromIndex is undefined, this step\nproduces the value 0.)\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/indexOf/search-found-returns-index.js", "esid": " sec-%typedarray%.prototype.indexof", "description": " returns index for the first found element", "info": " |22.2.3.13 %TypedArray%.prototype.indexOf (searchElement [ , fromIndex ] )\n\n%TypedArray%.prototype.indexOf is a distinct function that implements the same\nalgorithm as Array.prototype.indexOf as defined in 22.1.3.12 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\".\n\n22.1.3.12 Array.prototype.indexOf ( searchElement [ , fromIndex ] )\n\n...\n6. If n \u2265 0, then\na. If n is -0, let k be +0; else let k be n.\n7. Else n < 0,\na. Let k be len + n.\nb. If k < 0, let k be 0.\n8. Repeat, while k < len\na. Let kPresent be ? HasProperty(O, ! ToString(k)).\nb. If kPresent is true, then\ni. Let elementK be ? Get(O, ! ToString(k)).\nii. Let same be the result of performing Strict Equality Comparison\nsearchElement === elementK.\niii. If same is true, return k.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/indexOf/search-not-found-returns-minus-one.js", "esid": " sec-%typedarray%.prototype.indexof", "description": " returns -1 if the element if not found", "info": " |22.2.3.13 %TypedArray%.prototype.indexOf (searchElement [ , fromIndex ] )\n\n%TypedArray%.prototype.indexOf is a distinct function that implements the same\nalgorithm as Array.prototype.indexOf as defined in 22.1.3.12 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\".\n\n22.1.3.12 Array.prototype.indexOf ( searchElement [ , fromIndex ] )\n\n...\n6. If n \u2265 0, then\na. If n is -0, let k be +0; else let k be n.\n7. Else n < 0,\na. Let k be len + n.\nb. If k < 0, let k be 0.\n...\n9. Return -1.\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/indexOf/strict-comparison.js", "esid": " sec-%typedarray%.prototype.indexof", "description": " search element is compared using strict comparing (===)", "info": " |22.2.3.13 %TypedArray%.prototype.indexOf (searchElement [ , fromIndex ] )\n\n%TypedArray%.prototype.indexOf is a distinct function that implements the same\nalgorithm as Array.prototype.indexOf as defined in 22.1.3.12 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\".\n\n22.1.3.12 Array.prototype.indexOf ( searchElement [ , fromIndex ] )\n\n...\n8. Repeat, while k < len\n...\nb. If kPresent is true, then\ni. Let elementK be ? Get(O, ! ToString(k)).\nii. Let same be the result of performing Strict Equality Comparison\nsearchElement === elementK.\niii. If same is true, return k.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/indexOf/this-is-not-object.js", "esid": " sec-%typedarray%.prototype.indexof", "description": " Throws a TypeError exception when `this` is not Object", "info": " |22.2.3.13 %TypedArray%.prototype.indexOf (searchElement [ , fromIndex ] )\n\nThis function is not generic. ValidateTypedArray is applied to the this value\nprior to evaluating the algorithm. If its result is an abrupt completion that\nexception is thrown instead of evaluating the algorithm.\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/indexOf/this-is-not-typedarray-instance.js", "esid": " sec-%typedarray%.prototype.indexof", "description": " >Throws a TypeError exception when `this` is not a TypedArray instance\n", "info": " |22.2.3.13 %TypedArray%.prototype.indexOf (searchElement [ , fromIndex ] )\n\nThis function is not generic. ValidateTypedArray is applied to the this value\nprior to evaluating the algorithm. If its result is an abrupt completion that\nexception is thrown instead of evaluating the algorithm.\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n2. If O does not have a [[TypedArrayName]] internal slot, throw a TypeError\nexception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/indexOf/tointeger-fromindex.js", "esid": " sec-%typedarray%.prototype.indexof", "description": " Return -1 if fromIndex >= ArrayLength - converted values", "info": " |22.2.3.13 %TypedArray%.prototype.indexOf (searchElement [ , fromIndex ] )\n\n%TypedArray%.prototype.indexOf is a distinct function that implements the same\nalgorithm as Array.prototype.indexOf as defined in 22.1.3.12 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\".\n\n22.1.3.12 Array.prototype.indexOf ( searchElement [ , fromIndex ] )\n\n...\n4. Let n be ? ToInteger(fromIndex). (If fromIndex is undefined, this step\nproduces the value 0.)\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/join/custom-separator-result-from-tostring-on-each-simple-value.js", "esid": " sec-%typedarray%.prototype.join", "description": " >Concatenates the result of toString for each value with custom separator\n", "info": " |22.2.3.15 %TypedArray%.prototype.join ( separator )\n\n%TypedArray%.prototype.join is a distinct function that implements the same\nalgorithm as Array.prototype.join as defined in 22.1.3.13 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\".\n\n22.1.3.13 Array.prototype.join (separator)\n\n...\n7. If element0 is undefined or null, let R be the empty String; otherwise, let\nR be ? ToString(element0).\n8. Let k be 1.\n9. Repeat, while k < len\na. Let S be the String value produced by concatenating R and sep.\nb. Let element be ? Get(O, ! ToString(k)).\nc. If element is undefined or null, let next be the empty String; otherwise,\nlet next be ? ToString(element).\nd. Let R be a String value produced by concatenating S and next.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/join/custom-separator-result-from-tostring-on-each-value.js", "esid": " sec-%typedarray%.prototype.join", "description": " >Concatenates the result of toString for each value with custom separator\n", "info": " |22.2.3.15 %TypedArray%.prototype.join ( separator )\n\n%TypedArray%.prototype.join is a distinct function that implements the same\nalgorithm as Array.prototype.join as defined in 22.1.3.13 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\".\n\n22.1.3.13 Array.prototype.join (separator)\n\n...\n7. If element0 is undefined or null, let R be the empty String; otherwise, let\nR be ? ToString(element0).\n8. Let k be 1.\n9. Repeat, while k < len\na. Let S be the String value produced by concatenating R and sep.\nb. Let element be ? Get(O, ! ToString(k)).\nc. If element is undefined or null, let next be the empty String; otherwise,\nlet next be ? ToString(element).\nd. Let R be a String value produced by concatenating S and next.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/join/empty-instance-empty-string.js", "esid": " sec-%typedarray%.prototype.join", "description": " Return the empty String if length is 0", "info": " |22.2.3.15 %TypedArray%.prototype.join ( separator )\n\n%TypedArray%.prototype.join is a distinct function that implements the same\nalgorithm as Array.prototype.join as defined in 22.1.3.13 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\".\n\n22.1.3.13 Array.prototype.join (separator)\n\n...\n4. Let sep be ? ToString(separator).\n5. If len is zero, return the empty String.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/join/get-length-uses-internal-arraylength.js", "esid": " sec-%typedarray%.prototype.join", "description": " Get \"length\" uses internal ArrayLength", "info": " |22.2.3.15 %TypedArray%.prototype.join ( separator )\n\n%TypedArray%.prototype.join is a distinct function that implements the same\nalgorithm as Array.prototype.join as defined in 22.1.3.13 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\".\n\n22.1.3.13 Array.prototype.join (separator)\n\n1. Let O be ? ToObject(this value).\n2. Let len be ? ToLength(? Get(O, \"length\")).\n...\n5. If len is zero, return the empty String.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/join/invoked-as-func.js", "esid": " sec-%typedarray%.prototype.join", "description": " Throws a TypeError exception when invoked as a function", "info": " |22.2.3.14 %TypedArray%.prototype.join ( separator )\n\nThis function is not generic. ValidateTypedArray is applied to the this value\nprior to evaluating the algorithm. If its result is an abrupt completion that\nexception is thrown instead of evaluating the algorithm.\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n2. If O does not have a [[TypedArrayName]] internal slot, throw a TypeError\nexception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/join/invoked-as-method.js", "esid": " sec-%typedarray%.prototype.join", "description": " Requires a [[TypedArrayName]] internal slot.", "info": " |22.2.3.14 %TypedArray%.prototype.join ( separator )\n\nThis function is not generic. ValidateTypedArray is applied to the this value\nprior to evaluating the algorithm. If its result is an abrupt completion that\nexception is thrown instead of evaluating the algorithm.\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n2. If O does not have a [[TypedArrayName]] internal slot, throw a TypeError\nexception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/join/length.js", "esid": " sec-%typedarray%.prototype.join", "description": " >%TypedArray%.prototype.join.length is 1.\n", "info": " |%TypedArray%.prototype.join ( separator )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/join/name.js", "esid": " sec-%typedarray%.prototype.join", "description": " >%TypedArray%.prototype.join.name is \"join\".\n", "info": " |%TypedArray%.prototype.join ( separator )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/join/not-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >TypedArray.prototype.join does not implement [[Construct]], is not new-able\n", "info": " |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n", "includes": ["isConstructor.js", "testTypedArray.js"], "features": ["Reflect.construct", "arrow-function", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/join/prop-desc.js", "esid": " sec-%typedarray%.prototype.join", "description": " >\"join\" property of TypedArrayPrototype\n", "info": " |ES6 section 17: Every other data property described in clauses 18 through 26\nand in Annex B.2 has the attributes { [[Writable]]: true,\n[[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/join/result-from-tostring-on-each-simple-value.js", "esid": " sec-%typedarray%.prototype.join", "description": " Concatenates the result of toString for each simple value", "info": " |22.2.3.15 %TypedArray%.prototype.join ( separator )\n\n%TypedArray%.prototype.join is a distinct function that implements the same\nalgorithm as Array.prototype.join as defined in 22.1.3.13 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\".\n\n22.1.3.13 Array.prototype.join (separator)\n\n...\n7. If element0 is undefined or null, let R be the empty String; otherwise, let\nR be ? ToString(element0).\n8. Let k be 1.\n9. Repeat, while k < len\na. Let S be the String value produced by concatenating R and sep.\nb. Let element be ? Get(O, ! ToString(k)).\nc. If element is undefined or null, let next be the empty String; otherwise,\nlet next be ? ToString(element).\nd. Let R be a String value produced by concatenating S and next.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/join/result-from-tostring-on-each-value.js", "esid": " sec-%typedarray%.prototype.join", "description": " Concatenates the result of toString for each value", "info": " |22.2.3.15 %TypedArray%.prototype.join ( separator )\n\n%TypedArray%.prototype.join is a distinct function that implements the same\nalgorithm as Array.prototype.join as defined in 22.1.3.13 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\".\n\n22.1.3.13 Array.prototype.join (separator)\n\n...\n7. If element0 is undefined or null, let R be the empty String; otherwise, let\nR be ? ToString(element0).\n8. Let k be 1.\n9. Repeat, while k < len\na. Let S be the String value produced by concatenating R and sep.\nb. Let element be ? Get(O, ! ToString(k)).\nc. If element is undefined or null, let next be the empty String; otherwise,\nlet next be ? ToString(element).\nd. Let R be a String value produced by concatenating S and next.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/join/return-abrupt-from-separator-symbol.js", "esid": " sec-%typedarray%.prototype.join", "description": " Return abrupt from ToString(Symbol separator)", "info": " |22.2.3.15 %TypedArray%.prototype.join ( separator )\n\n%TypedArray%.prototype.join is a distinct function that implements the same\nalgorithm as Array.prototype.join as defined in 22.1.3.13 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\".\n\n22.1.3.13 Array.prototype.join (separator)\n\n...\n4. Let sep be ? ToString(separator).\n5. If len is zero, return the empty String.\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/join/return-abrupt-from-separator.js", "esid": " sec-%typedarray%.prototype.join", "description": " Return abrupt from ToString(separator)", "info": " |22.2.3.15 %TypedArray%.prototype.join ( separator )\n\n%TypedArray%.prototype.join is a distinct function that implements the same\nalgorithm as Array.prototype.join as defined in 22.1.3.13 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\".\n\n22.1.3.13 Array.prototype.join (separator)\n\n...\n4. Let sep be ? ToString(separator).\n5. If len is zero, return the empty String.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/join/this-is-not-object.js", "esid": " sec-%typedarray%.prototype.join", "description": " Throws a TypeError exception when `this` is not Object", "info": " |22.2.3.15 %TypedArray%.prototype.join ( separator )\n\nThis function is not generic. ValidateTypedArray is applied to the this value\nprior to evaluating the algorithm. If its result is an abrupt completion that\nexception is thrown instead of evaluating the algorithm.\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/join/this-is-not-typedarray-instance.js", "esid": " sec-%typedarray%.prototype.join", "description": " >Throws a TypeError exception when `this` is not a TypedArray instance\n", "info": " |22.2.3.15 %TypedArray%.prototype.join ( separator )\n\nThis function is not generic. ValidateTypedArray is applied to the this value\nprior to evaluating the algorithm. If its result is an abrupt completion that\nexception is thrown instead of evaluating the algorithm.\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n2. If O does not have a [[TypedArrayName]] internal slot, throw a TypeError\nexception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/keys/invoked-as-func.js", "esid": " sec-%typedarray%.prototype.keys", "description": " Throws a TypeError exception when invoked as a function", "info": " |22.2.3.15 %TypedArray%.prototype.keys ( )\n\n1. Let O be the this value.\n2. Let valid be ValidateTypedArray(O).\n3. ReturnIfAbrupt(valid).\n...\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n2. If O does not have a [[TypedArrayName]] internal slot, throw a TypeError\nexception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/keys/invoked-as-method.js", "esid": " sec-%typedarray%.prototype.keys", "description": " Requires a [[TypedArrayName]] internal slot.", "info": " |22.2.3.15 %TypedArray%.prototype.keys ( )\n\n1. Let O be the this value.\n2. Let valid be ValidateTypedArray(O).\n3. ReturnIfAbrupt(valid).\n...\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n2. If O does not have a [[TypedArrayName]] internal slot, throw a TypeError\nexception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/keys/iter-prototype.js", "esid": " sec-%typedarray%.prototype.keys", "description": " >The prototype of the returned iterator is ArrayIteratorPrototype\n", "info": " |22.2.3.16 %TypedArray%.prototype.keys ( )\n\n...\n3. Return CreateArrayIterator(O, \"key\").\n", "includes": ["testTypedArray.js"], "features": ["Symbol.iterator", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/keys/length.js", "esid": " sec-%typedarray%.prototype.keys", "description": " >%TypedArray%.prototype.keys.length is 0.\n", "info": " |%TypedArray%.prototype.keys ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/keys/name.js", "esid": " sec-%typedarray%.prototype.keys", "description": " >%TypedArray%.prototype.keys.name is \"keys\".\n", "info": " |%TypedArray%.prototype.keys ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/keys/not-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >TypedArray.prototype.keys does not implement [[Construct]], is not new-able\n", "info": " |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n", "includes": ["isConstructor.js", "testTypedArray.js"], "features": ["Reflect.construct", "arrow-function", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/keys/prop-desc.js", "esid": " sec-%typedarray%.prototype.keys", "description": " >\"keys\" property of TypedArrayPrototype\n", "info": " |ES6 section 17: Every other data property described in clauses 18 through 26\nand in Annex B.2 has the attributes { [[Writable]]: true,\n[[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/keys/return-itor.js", "esid": " sec-%typedarray%.prototype.keys", "description": " Return an iterator for the keys.", "info": " |22.2.3.16 %TypedArray%.prototype.keys ( )\n\n...\n3. Return CreateArrayIterator(O, \"key\").\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/keys/this-is-not-object.js", "esid": " sec-%typedarray%.prototype.keys", "description": " Throws a TypeError exception when `this` is not Object", "info": " |22.2.3.16 %TypedArray%.prototype.keys ( )\n\nThe following steps are taken:\n\n1. Let O be the this value.\n2. Perform ? ValidateTypedArray(O).\n...\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/keys/this-is-not-typedarray-instance.js", "esid": " sec-%typedarray%.prototype.keys", "description": " >Throws a TypeError exception when `this` is not a TypedArray instance\n", "info": " |22.2.3.16 %TypedArray%.prototype.keys ( )\n\nThe following steps are taken:\n\n1. Let O be the this value.\n2. Perform ? ValidateTypedArray(O).\n...\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n2. If O does not have a [[TypedArrayName]] internal slot, throw a TypeError\nexception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/lastIndexOf/fromIndex-infinity.js", "esid": " sec-%typedarray%.prototype.lastindexof", "description": " handle Infinity values for fromIndex", "info": " |22.2.3.17 %TypedArray%.prototype.lastIndexOf ( searchElement [ , fromIndex ] )\n\n%TypedArray%.prototype.lastIndexOf is a distinct function that implements the\nsame algorithm as Array.prototype.lastIndexOf as defined in 22.1.3.15 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n22.1.3.15 Array.prototype.lastIndexOf ( searchElement [ , fromIndex ] )\n\n...\n5. If n \u2265 0, then\na. If n is -0, let k be +0; else let k be min(n, len - 1).\n6. Else n < 0,\na. Let k be len + n.\n7. Repeat, while k \u2265 0\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/lastIndexOf/get-length-uses-internal-arraylength.js", "esid": " sec-%typedarray%.prototype.lastindexof", "description": " Get \"length\" uses internal ArrayLength", "info": " |22.2.3.17 %TypedArray%.prototype.lastIndexOf ( searchElement [ , fromIndex ] )\n\n%TypedArray%.prototype.lastIndexOf is a distinct function that implements the\nsame algorithm as Array.prototype.lastIndexOf as defined in 22.1.3.15 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n22.1.3.15 Array.prototype.lastIndexOf ( searchElement [ , fromIndex ] )\n\n...\n2. Let len be ? ToLength(? Get(O, \"length\")).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/lastIndexOf/invoked-as-func.js", "esid": " sec-%typedarray%.prototype.lastindexof", "description": " Throws a TypeError exception when invoked as a function", "info": " |22.2.3.16 %TypedArray%.prototype.lastIndexOf ( searchElement [ , fromIndex ] )\n\nThis function is not generic. ValidateTypedArray is applied to the this value\nprior to evaluating the algorithm. If its result is an abrupt completion that\nexception is thrown instead of evaluating the algorithm.\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n2. If O does not have a [[TypedArrayName]] internal slot, throw a TypeError\nexception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/lastIndexOf/invoked-as-method.js", "esid": " sec-%typedarray%.prototype.lastindexof", "description": " Requires a [[TypedArrayName]] internal slot.", "info": " |22.2.3.16 %TypedArray%.prototype.lastIndexOf ( searchElement [ , fromIndex ] )\n\nThis function is not generic. ValidateTypedArray is applied to the this value\nprior to evaluating the algorithm. If its result is an abrupt completion that\nexception is thrown instead of evaluating the algorithm.\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n2. If O does not have a [[TypedArrayName]] internal slot, throw a TypeError\nexception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/lastIndexOf/length-zero-returns-minus-one.js", "esid": " sec-%typedarray%.prototype.lastindexof", "description": " Returns -1 if length is 0", "info": " |22.2.3.17 %TypedArray%.prototype.lastIndexOf ( searchElement [ , fromIndex ] )\n\n%TypedArray%.prototype.lastIndexOf is a distinct function that implements the\nsame algorithm as Array.prototype.lastIndexOf as defined in 22.1.3.15 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n22.1.3.15 Array.prototype.lastIndexOf ( searchElement [ , fromIndex ] )\n\n...\n2. Let len be ? ToLength(? Get(O, \"length\")).\n3. If len is 0, return -1.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/lastIndexOf/length.js", "esid": " sec-%typedarray%.prototype.lastindexof", "description": " >%TypedArray%.prototype.lastIndexOf.length is 1.\n", "info": " |%TypedArray%.prototype.lastIndexOf ( searchElement [ , fromIndex ] )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/lastIndexOf/name.js", "esid": " sec-%typedarray%.prototype.lastindexof", "description": " >%TypedArray%.prototype.lastIndexOf.name is \"lastIndexOf\".\n", "info": " |%TypedArray%.prototype.lastIndexOf ( searchElement [ , fromIndex ] )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/lastIndexOf/no-arg.js", "esid": " sec-%typedarray%.prototype.lastindexof", "description": " >If `searchElement` is not supplied, -1 is returned.\n", "info": " |%TypedArray%.prototype.lastIndexOf ( searchElement [ , fromIndex ] )\n\n%TypedArray%.prototype.lastIndexOf is a distinct function that implements\nthe same algorithm as Array.prototype.lastIndexOf as defined in 22.1.3.17\nexcept that the this value's [[ArrayLength]] internal slot is accessed\nin place of performing a [[Get]] of \"length\".\n\nArray.prototype.lastIndexOf ( searchElement [ , fromIndex ] )\n\n[...]\n8. Return -1.\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/lastIndexOf/not-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >TypedArray.prototype.lastIndexOf does not implement [[Construct]], is not new-able\n", "info": " |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n", "includes": ["isConstructor.js", "testTypedArray.js"], "features": ["Reflect.construct", "arrow-function", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/lastIndexOf/prop-desc.js", "esid": " sec-%typedarray%.prototype.lastindexof", "description": " >\"lastIndexOf\" property of TypedArrayPrototype\n", "info": " |ES6 section 17: Every other data property described in clauses 18 through 26\nand in Annex B.2 has the attributes { [[Writable]]: true,\n[[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/lastIndexOf/return-abrupt-tointeger-fromindex-symbol.js", "esid": " sec-%typedarray%.prototype.lastindexof", "description": " Return abrupt from ToInteger(fromIndex) - using symbol", "info": " |22.2.3.17 %TypedArray%.prototype.lastIndexOf ( searchElement [ , fromIndex ] )\n\n%TypedArray%.prototype.lastIndexOf is a distinct function that implements the\nsame algorithm as Array.prototype.lastIndexOf as defined in 22.1.3.15 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n22.1.3.15 Array.prototype.lastIndexOf ( searchElement [ , fromIndex ] )\n\n...\n4. If argument fromIndex was passed, let n be ? ToInteger(fromIndex); else let\nn be len-1.\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/lastIndexOf/return-abrupt-tointeger-fromindex.js", "esid": " sec-%typedarray%.prototype.lastindexof", "description": " Return abrupt from ToInteger(fromIndex)", "info": " |22.2.3.17 %TypedArray%.prototype.lastIndexOf ( searchElement [ , fromIndex ] )\n\n%TypedArray%.prototype.lastIndexOf is a distinct function that implements the\nsame algorithm as Array.prototype.lastIndexOf as defined in 22.1.3.15 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n22.1.3.15 Array.prototype.lastIndexOf ( searchElement [ , fromIndex ] )\n\n...\n4. If argument fromIndex was passed, let n be ? ToInteger(fromIndex); else let\nn be len-1.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/lastIndexOf/search-found-returns-index.js", "esid": " sec-%typedarray%.prototype.lastindexof", "description": " returns index for the first found element", "info": " |22.2.3.17 %TypedArray%.prototype.lastIndexOf ( searchElement [ , fromIndex ] )\n\n%TypedArray%.prototype.lastIndexOf is a distinct function that implements the\nsame algorithm as Array.prototype.lastIndexOf as defined in 22.1.3.15 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n22.1.3.15 Array.prototype.lastIndexOf ( searchElement [ , fromIndex ] )\n\n...\n5. If n \u2265 0, then\na. If n is -0, let k be +0; else let k be min(n, len - 1).\n6. Else n < 0,\na. Let k be len + n.\n7. Repeat, while k \u2265 0\na. Let kPresent be ? HasProperty(O, ! ToString(k)).\nb. If kPresent is true, then\ni. Let elementK be ? Get(O, ! ToString(k)).\nii. Let same be the result of performing Strict Equality Comparison\nsearchElement === elementK.\niii. If same is true, return k.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/lastIndexOf/search-not-found-returns-minus-one.js", "esid": " sec-%typedarray%.prototype.lastindexof", "description": " returns -1 if the element if not found", "info": " |22.2.3.17 %TypedArray%.prototype.lastIndexOf ( searchElement [ , fromIndex ] )\n\n%TypedArray%.prototype.lastIndexOf is a distinct function that implements the\nsame algorithm as Array.prototype.lastIndexOf as defined in 22.1.3.15 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n22.1.3.15 Array.prototype.lastIndexOf ( searchElement [ , fromIndex ] )\n\n...\n5. If n \u2265 0, then\na. If n is -0, let k be +0; else let k be min(n, len - 1).\n6. Else n < 0,\na. Let k be len + n.\n7. Repeat, while k \u2265 0\n...\n8. Return -1.\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/lastIndexOf/strict-comparison.js", "esid": " sec-%typedarray%.prototype.lastindexof", "description": " search element is compared using strict comparing (===)", "info": " |22.2.3.17 %TypedArray%.prototype.lastIndexOf ( searchElement [ , fromIndex ] )\n\n%TypedArray%.prototype.lastIndexOf is a distinct function that implements the\nsame algorithm as Array.prototype.lastIndexOf as defined in 22.1.3.15 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n22.1.3.15 Array.prototype.lastIndexOf ( searchElement [ , fromIndex ] )\n\n...\n7. Repeat, while k \u2265 0\n...\nb. If kPresent is true, then\ni. Let elementK be ? Get(O, ! ToString(k)).\nii. Let same be the result of performing Strict Equality Comparison\nsearchElement === elementK.\niii. If same is true, return k.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/lastIndexOf/this-is-not-object.js", "esid": " sec-%typedarray%.prototype.lastindexof", "description": " Throws a TypeError exception when `this` is not Object", "info": " |22.2.3.17 %TypedArray%.prototype.lastIndexOf ( searchElement [ , fromIndex ] )\n\nThis function is not generic. ValidateTypedArray is applied to the this value\nprior to evaluating the algorithm. If its result is an abrupt completion that\nexception is thrown instead of evaluating the algorithm.\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/lastIndexOf/this-is-not-typedarray-instance.js", "esid": " sec-%typedarray%.prototype.lastindexof", "description": " >Throws a TypeError exception when `this` is not a TypedArray instance\n", "info": " |22.2.3.17 %TypedArray%.prototype.lastIndexOf ( searchElement [ , fromIndex ] )\n\nThis function is not generic. ValidateTypedArray is applied to the this value\nprior to evaluating the algorithm. If its result is an abrupt completion that\nexception is thrown instead of evaluating the algorithm.\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n2. If O does not have a [[TypedArrayName]] internal slot, throw a TypeError\nexception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/length/invoked-as-func.js", "esid": " sec-get-%typedarray%.prototype.length", "description": " Throws a TypeError exception when invoked as a function", "info": " |22.2.3.17 get %TypedArray%.prototype.length\n\n1. Let O be the this value.\n2. If Type(O) is not Object, throw a TypeError exception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/length/length.js", "esid": " sec-get-%typedarray%.prototype.length", "description": " >get %TypedArray%.prototype.length.length is 0.\n", "info": " |get %TypedArray%.prototype.length\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/length/prop-desc.js", "esid": " sec-get-%typedarray%.prototype.length", "description": " >\"length\" property of TypedArrayPrototype\n", "info": " |%TypedArray%.prototype.length is an accessor property whose set accessor\nfunction is undefined.\n\nSection 17: Every accessor property described in clauses 18 through 26 and in\nAnnex B.2 has the attributes {[[Enumerable]]: false, [[Configurable]]: true }\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/length/this-has-no-typedarrayname-internal.js", "esid": " sec-get-%typedarray%.prototype.length", "description": " >Throws a TypeError exception when `this` does not have a [[TypedArrayName]]\ninternal slot\n", "info": " |22.2.3.18 get %TypedArray%.prototype.length\n\n1. Let O be the this value.\n2. If Type(O) is not Object, throw a TypeError exception.\n3. If O does not have a [[TypedArrayName]] internal slot, throw a TypeError\nexception.\n...\n", "includes": ["testTypedArray.js"], "features": ["DataView", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/length/this-is-not-object.js", "esid": " sec-get-%typedarray%.prototype.length", "description": " Throws a TypeError exception when `this` is not Object", "info": " |22.2.3.18 get %TypedArray%.prototype.length\n\n1. Let O be the this value.\n2. If Type(O) is not Object, throw a TypeError exception.\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/map/arraylength-internal.js", "esid": " sec-%typedarray%.prototype.map", "description": " >[[ArrayLength]] is accessed in place of performing a [[Get]] of \"length\"\n", "info": " |22.2.3.19 %TypedArray%.prototype.map ( callbackfn [ , thisArg ] )\n\n...\n3. Let len be the value of O's [[ArrayLength]] internal slot.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/map/callbackfn-arguments-with-thisarg.js", "esid": " sec-%typedarray%.prototype.map", "description": " >thisArg does not affect callbackfn arguments\n", "info": " |22.2.3.19 %TypedArray%.prototype.map ( callbackfn [ , thisArg ] )\n\n...\n8. Repeat, while k < len\na. Let Pk be ! ToString(k).\nb. Let kValue be ? Get(O, Pk).\nc. Let mappedValue be ? Call(callbackfn, T, \u00ab kValue, k, O \u00bb).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/map/callbackfn-arguments-without-thisarg.js", "esid": " sec-%typedarray%.prototype.map", "description": " >callbackfn arguments\n", "info": " |22.2.3.19 %TypedArray%.prototype.map ( callbackfn [ , thisArg ] )\n\n...\n8. Repeat, while k < len\na. Let Pk be ! ToString(k).\nb. Let kValue be ? Get(O, Pk).\nc. Let mappedValue be ? Call(callbackfn, T, \u00ab kValue, k, O \u00bb).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/map/callbackfn-no-interaction-over-non-integer-properties.js", "esid": " sec-%typedarray%.prototype.map", "description": " >Does not interact over non-integer properties\n", "info": " |22.2.3.19 %TypedArray%.prototype.map ( callbackfn [ , thisArg ] )\n\n...\n8. Repeat, while k < len\na. Let Pk be ! ToString(k).\nb. Let kValue be ? Get(O, Pk).\nc. Let mappedValue be ? Call(callbackfn, T, \u00ab kValue, k, O \u00bb).\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/map/callbackfn-not-called-on-empty.js", "esid": " sec-%typedarray%.prototype.map", "description": " >callbackfn is not called on empty instances\n", "info": " |22.2.3.19 %TypedArray%.prototype.map ( callbackfn [ , thisArg ] )\n\n...\n7. Let k be 0.\n8. Repeat, while k < len\n...\nc. Let mappedValue be ? Call(callbackfn, T, \u00ab kValue, k, O \u00bb).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/map/callbackfn-return-affects-returned-object.js", "esid": " sec-%typedarray%.prototype.map", "description": " >The callbackfn returned values are applied to the new instance\n", "info": " |22.2.3.19 %TypedArray%.prototype.map ( callbackfn [ , thisArg ] )\n\n6. Let A be ? TypedArraySpeciesCreate(O, \u00ab len \u00bb).\n7. Let k be 0.\n8. Repeat, while k < len\n...\nc. Let mappedValue be ? Call(callbackfn, T, \u00ab kValue, k, O \u00bb).\nd. Perform ? Set(A, Pk, mappedValue, true).\n...\n9. Return A.\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/map/callbackfn-return-does-not-change-instance.js", "esid": " sec-%typedarray%.prototype.map", "description": " >The callbackfn return does not change the `this` instance\n", "info": " |22.2.3.19 %TypedArray%.prototype.map ( callbackfn [ , thisArg ] )\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/map/callbackfn-return-does-not-copy-non-integer-properties.js", "esid": " sec-%typedarray%.prototype.map", "description": " >Does not copy non-integer properties to returned value\n", "info": " |22.2.3.19 %TypedArray%.prototype.map ( callbackfn [ , thisArg ] )\n\n...\n8. Repeat, while k < len\na. Let Pk be ! ToString(k).\nb. Let kValue be ? Get(O, Pk).\nc. Let mappedValue be ? Call(callbackfn, T, \u00ab kValue, k, O \u00bb).\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/map/callbackfn-returns-abrupt.js", "esid": " sec-%typedarray%.prototype.map", "description": " >Returns abrupt from callbackfn\n", "info": " |22.2.3.19 %TypedArray%.prototype.map ( callbackfn [ , thisArg ] )\n\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/map/callbackfn-this.js", "esid": " sec-%typedarray%.prototype.map", "description": " >callbackfn `this` value\n", "info": " |22.2.3.19 %TypedArray%.prototype.map ( callbackfn [ , thisArg ] )\n\n...\n5. If thisArg was supplied, let T be thisArg; else let T be undefined.\n...\n8. Repeat, while k < len\n...\nc. Let mappedValue be ? Call(callbackfn, T, \u00ab kValue, k, O \u00bb).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/map/invoked-as-func.js", "esid": " sec-%typedarray%.prototype.map", "description": " Throws a TypeError exception when invoked as a function", "info": " |22.2.3.18 %TypedArray%.prototype.map ( callbackfn [ , thisArg ] )\n\n1. Let O be the this value.\n2. Let valid be ValidateTypedArray(O).\n3. ReturnIfAbrupt(valid).\n...\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n2. If O does not have a [[TypedArrayName]] internal slot, throw a TypeError\nexception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/map/invoked-as-method.js", "esid": " sec-%typedarray%.prototype.map", "description": " Requires a [[TypedArrayName]] internal slot.", "info": " |22.2.3.18 %TypedArray%.prototype.map ( callbackfn [ , thisArg ] )\n\n1. Let O be the this value.\n2. Let valid be ValidateTypedArray(O).\n3. ReturnIfAbrupt(valid).\n...\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n2. If O does not have a [[TypedArrayName]] internal slot, throw a TypeError\nexception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/map/length.js", "esid": " sec-%typedarray%.prototype.map", "description": " >%TypedArray%.prototype.map.length is 1.\n", "info": " |%TypedArray%.prototype.map ( callbackfn [ , thisArg ] )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/map/name.js", "esid": " sec-%typedarray%.prototype.map", "description": " >%TypedArray%.prototype.map.name is \"map\".\n", "info": " |%TypedArray%.prototype.map ( callbackfn [ , thisArg ] )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/map/not-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >TypedArray.prototype.map does not implement [[Construct]], is not new-able\n", "info": " |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n", "includes": ["isConstructor.js", "testTypedArray.js"], "features": ["Reflect.construct", "arrow-function", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/map/prop-desc.js", "esid": " sec-%typedarray%.prototype.map", "description": " >\"map\" property of TypedArrayPrototype\n", "info": " |ES6 section 17: Every other data property described in clauses 18 through 26\nand in Annex B.2 has the attributes { [[Writable]]: true,\n[[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/map/return-new-typedarray-conversion-operation-consistent-nan.js", "esid": " sec-%typedarray%.prototype.map", "description": " Consistent canonicalization of NaN values", "info": " |22.2.3.19 %TypedArray%.prototype.map ( callbackfn [ , thisArg ] )\n\n...\n8. Repeat, while k < len\n...\nd. Perform ? Set(A, Pk, mappedValue, true).\n...\n\nIntegerIndexedElementSet ( O, index, value )\n\nAssert: O is an Integer-Indexed exotic object.\nIf O.[[ContentType]] is BigInt, let numValue be ? ToBigInt(value).\nOtherwise, let numValue be ? ToNumber(value).\nLet buffer be O.[[ViewedArrayBuffer]].\nIf IsDetachedBuffer(buffer) is false and ! IsValidIntegerIndex(O, index) is true, then\nLet offset be O.[[ByteOffset]].\nLet arrayTypeName be the String value of O.[[TypedArrayName]].\nLet elementSize be the Element Size value specified in Table 62 for arrayTypeName.\nLet indexedPosition be (\u211d(index) \u00d7 elementSize) + offset.\nLet elementType be the Element Type value in Table 62 for arrayTypeName.\nPerform SetValueInBuffer(buffer, indexedPosition, elementType, numValue, true, Unordered).\nReturn NormalCompletion(undefined).\n\n24.1.1.6 SetValueInBuffer ( arrayBuffer, byteIndex, type, value [ ,\nisLittleEndian ] )\n\n...\n8. If type is \"Float32\", then\na. Set rawBytes to a List containing the 4 bytes that are the result\nof converting value to IEEE 754-2008 binary32 format using \u201cRound to\nnearest, ties to even\u201d rounding mode. If isLittleEndian is false, the\nbytes are arranged in big endian order. Otherwise, the bytes are\narranged in little endian order. If value is NaN, rawValue may be set\nto any implementation chosen IEEE 754-2008 binary64 format Not-a-Number\nencoding. An implementation must always choose the same encoding for\neach implementation distinguishable NaN value.\n9. Else, if type is \"Float64\", then\na. Set rawBytes to a List containing the 8 bytes that are the IEEE\n754-2008 binary64 format encoding of value. If isLittleEndian is false,\nthe bytes are arranged in big endian order. Otherwise, the bytes are\narranged in little endian order. If value is NaN, rawValue may be set\nto any implementation chosen IEEE 754-2008 binary32 format Not-a-Number\nencoding. An implementation must always choose the same encoding for\neach implementation distinguishable NaN value.\n...\n", "includes": ["nans.js", "testTypedArray.js", "compareArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/map/return-new-typedarray-conversion-operation.js", "esid": " sec-%typedarray%.prototype.map", "description": " >Verify conversion values on returned instance\n", "info": " |22.2.3.19 %TypedArray%.prototype.map ( callbackfn [ , thisArg ] )\n\n...\n8. Repeat, while k < len\n...\nd. Perform ? Set(A, Pk, mappedValue, true).\n...\n\nIntegerIndexedElementSet ( O, index, value )\n\nAssert: O is an Integer-Indexed exotic object.\nIf O.[[ContentType]] is BigInt, let numValue be ? ToBigInt(value).\nOtherwise, let numValue be ? ToNumber(value).\nLet buffer be O.[[ViewedArrayBuffer]].\nIf IsDetachedBuffer(buffer) is false and ! IsValidIntegerIndex(O, index) is true, then\nLet offset be O.[[ByteOffset]].\nLet arrayTypeName be the String value of O.[[TypedArrayName]].\nLet elementSize be the Element Size value specified in Table 62 for arrayTypeName.\nLet indexedPosition be (\u211d(index) \u00d7 elementSize) + offset.\nLet elementType be the Element Type value in Table 62 for arrayTypeName.\nPerform SetValueInBuffer(buffer, indexedPosition, elementType, numValue, true, Unordered).\nReturn NormalCompletion(undefined).\n\n24.1.1.6 SetValueInBuffer ( arrayBuffer, byteIndex, type, value [ ,\nisLittleEndian ] )\n\n...\n8. If type is \"Float32\", then\n...\n9. Else, if type is \"Float64\", then\n...\n10. Else,\n...\nb. Let convOp be the abstract operation named in the Conversion Operation\ncolumn in Table 50 for Element Type type.\nc. Let intValue be convOp(value).\nd. If intValue \u2265 0, then\n...\ne. Else,\n...\n", "includes": ["byteConversionValues.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/map/return-new-typedarray-from-empty-length.js", "esid": " sec-%typedarray%.prototype.map", "description": " >Returns a new typedArray instance from the same constructor with the same\nlength and a new buffer object - testing on an instance with length == 0\n", "info": " |22.2.3.19 %TypedArray%.prototype.map ( callbackfn [ , thisArg ] )\n\n...\n6. Let A be ? TypedArraySpeciesCreate(O, \u00ab len \u00bb).\n7. Let k be 0.\n8. Repeat, while k < len\n...\nc. Let mappedValue be ? Call(callbackfn, T, \u00ab kValue, k, O \u00bb).\n...\n9. Return A.\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/map/return-new-typedarray-from-positive-length.js", "esid": " sec-%typedarray%.prototype.map", "description": " >Returns a new typedArray instance from the same constructor with the same\nlength and a new buffer object - testing on an instance with length > 0\n", "info": " |22.2.3.19 %TypedArray%.prototype.map ( callbackfn [ , thisArg ] )\n\n...\n6. Let A be ? TypedArraySpeciesCreate(O, \u00ab len \u00bb).\n7. Let k be 0.\n8. Repeat, while k < len\n...\nc. Let mappedValue be ? Call(callbackfn, T, \u00ab kValue, k, O \u00bb).\n...\n9. Return A.\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/map/speciesctor-get-ctor-abrupt.js", "esid": " sec-%typedarray%.prototype.map", "description": " Return abrupt from SpeciesConstructor's get Constructor", "info": " |22.2.3.19 %TypedArray%.prototype.map ( callbackfn [ , thisArg ] )\n\n...\n6. Let A be ? TypedArraySpeciesCreate(O, \u00ab len \u00bb).\n...\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n1. Assert: Type(O) is Object.\n2. Let C be ? Get(O, \"constructor\").\n3. If C is undefined, return defaultConstructor.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/map/speciesctor-get-ctor-inherited.js", "esid": " sec-%typedarray%.prototype.map", "description": " get inherited constructor on SpeciesConstructor", "info": " |22.2.3.19 %TypedArray%.prototype.map ( callbackfn [ , thisArg ] )\n\n...\n6. Let A be ? TypedArraySpeciesCreate(O, \u00ab len \u00bb).\n...\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n1. Assert: Type(O) is Object.\n2. Let C be ? Get(O, \"constructor\").\n3. If C is undefined, return defaultConstructor.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/map/speciesctor-get-ctor-returns-throws.js", "esid": " sec-%typedarray%.prototype.map", "description": " >Throws if O.constructor returns a non-Object and non-undefined value\n", "info": " |22.2.3.19 %TypedArray%.prototype.map ( callbackfn [ , thisArg ] )\n\n...\n6. Let A be ? TypedArraySpeciesCreate(O, \u00ab len \u00bb).\n...\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n1. Assert: Type(O) is Object.\n2. Let C be ? Get(O, \"constructor\").\n3. If C is undefined, return defaultConstructor.\n4. If Type(C) is not Object, throw a TypeError exception.\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/map/speciesctor-get-ctor.js", "esid": " sec-%typedarray%.prototype.map", "description": " get constructor on SpeciesConstructor", "info": " |22.2.3.19 %TypedArray%.prototype.map ( callbackfn [ , thisArg ] )\n\n...\n6. Let A be ? TypedArraySpeciesCreate(O, \u00ab len \u00bb).\n...\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n1. Assert: Type(O) is Object.\n2. Let C be ? Get(O, \"constructor\").\n3. If C is undefined, return defaultConstructor.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/map/speciesctor-get-species-custom-ctor-length-throws.js", "esid": " sec-%typedarray%.prototype.map", "description": " >Throws a TypeError if new typedArray's length < len\n", "info": " |22.2.3.19 %TypedArray%.prototype.map ( callbackfn [ , thisArg ] )\n\n...\n6. Let A be ? TypedArraySpeciesCreate(O, \u00ab len \u00bb).\n...\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n4. Return ? TypedArrayCreate(constructor, argumentList).\n\n22.2.4.6 TypedArrayCreate ( constructor, argumentList )\n\n...\n3. If argumentList is a List of a single Number, then\na. If the value of newTypedArray's [[ArrayLength]] internal slot <\nargumentList[0], throw a TypeError exception.\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol.species", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/map/speciesctor-get-species-custom-ctor-throws.js", "esid": " sec-%typedarray%.prototype.map", "description": " >Custom @@species constructor throws if it does not return a compatible object\n", "info": " |22.2.3.19 %TypedArray%.prototype.map ( callbackfn [ , thisArg ] )\n\n...\n6. Let A be ? TypedArraySpeciesCreate(O, \u00ab len \u00bb).\n...\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n4. Return ? TypedArrayCreate(constructor, argumentList).\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n...\n5. Let S be ? Get(C, @@species).\n...\n7. If IsConstructor(S) is true, return S.\n...\n\n22.2.4.6 TypedArrayCreate ( constructor, argumentList )\n\n1. Let newTypedArray be ? Construct(constructor, argumentList).\n2. Perform ? ValidateTypedArray(newTypedArray).\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol.species", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/map/speciesctor-get-species-returns-throws.js", "esid": " sec-%typedarray%.prototype.map", "description": " >Throws if returned @@species is not a constructor, null or undefined.\n", "info": " |22.2.3.19 %TypedArray%.prototype.map ( callbackfn [ , thisArg ] )\n\n...\n6. Let A be ? TypedArraySpeciesCreate(O, \u00ab len \u00bb).\n...\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n...\n5. Let S be ? Get(C, @@species).\n6. If S is either undefined or null, return defaultConstructor.\n7. If IsConstructor(S) is true, return S.\n8. Throw a TypeError exception.\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol.species", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/map/this-is-not-object.js", "esid": " sec-%typedarray%.prototype.map", "description": " Throws a TypeError exception when `this` is not Object", "info": " |22.2.3.19 %TypedArray%.prototype.map ( callbackfn [ , thisArg ] )\n\n1. Let O be the this value.\n2. Perform ? ValidateTypedArray(O).\n...\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/map/this-is-not-typedarray-instance.js", "esid": " sec-%typedarray%.prototype.map", "description": " >Throws a TypeError exception when `this` is not a TypedArray instance\n", "info": " |22.2.3.19 %TypedArray%.prototype.map ( callbackfn [ , thisArg ] )\n\n1. Let O be the this value.\n2. Perform ? ValidateTypedArray(O).\n...\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n2. If O does not have a [[TypedArrayName]] internal slot, throw a TypeError\nexception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/map/values-are-not-cached.js", "esid": " sec-%typedarray%.prototype.map", "description": " >Integer indexed values changed during iteration\n", "info": " |22.2.3.19 %TypedArray%.prototype.map ( callbackfn [ , thisArg ] )\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduce/callbackfn-arguments-custom-accumulator.js", "esid": " sec-%typedarray%.prototype.reduce", "description": " >callbackfn arguments using custom accumulator\n", "info": " |22.2.3.20 %TypedArray%.prototype.reduce ( callbackfn [ , initialValue ] )\n\n%TypedArray%.prototype.reduce is a distinct function that implements the same\nalgorithm as Array.prototype.reduce as defined in 22.1.3.19 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\".\n\n22.1.3.19 Array.prototype.reduce ( callbackfn [ , initialValue ] )\n\n...\n8. Repeat, while k < len\n...\nc. If kPresent is true, then\n...\ni. Let accumulator be ? Call(callbackfn, undefined, \u00ab accumulator, kValue,\nk, O \u00bb).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduce/callbackfn-arguments-default-accumulator.js", "esid": " sec-%typedarray%.prototype.reduce", "description": " >callbackfn arguments using default accumulator (value at index 0)\n", "info": " |22.2.3.20 %TypedArray%.prototype.reduce ( callbackfn [ , initialValue ] )\n\n%TypedArray%.prototype.reduce is a distinct function that implements the same\nalgorithm as Array.prototype.reduce as defined in 22.1.3.19 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\".\n\n22.1.3.19 Array.prototype.reduce ( callbackfn [ , initialValue ] )\n\n...\n7. Else initialValue is not present,\na. Let kPresent be false.\nb. Repeat, while kPresent is false and k < len\n...\niii. If kPresent is true, then\n1. Let accumulator be ? Get(O, Pk).\n...\n8. Repeat, while k < len\n...\nc. If kPresent is true, then\n...\ni. Let accumulator be ? Call(callbackfn, undefined, \u00ab accumulator, kValue,\nk, O \u00bb).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduce/callbackfn-is-not-callable-throws.js", "esid": " sec-%typedarray%.prototype.reduce", "description": " >Throws TypeError if callbackfn is not callable\n", "info": " |22.2.3.20 %TypedArray%.prototype.reduce ( callbackfn [ , initialValue ] )\n\n%TypedArray%.prototype.reduce is a distinct function that implements the same\nalgorithm as Array.prototype.reduce as defined in 22.1.3.19 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\".\n\n22.1.3.19 Array.prototype.reduce ( callbackfn [ , initialValue ] )\n\n...\n3. If IsCallable(callbackfn) is false, throw a TypeError exception.\n4. If len is 0 and initialValue is not present, throw a TypeError exception.\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduce/callbackfn-no-iteration-over-non-integer-properties.js", "esid": " sec-%typedarray%.prototype.reduce", "description": " >Does not iterate over non-integer properties\n", "info": " |22.2.3.20 %TypedArray%.prototype.reduce ( callbackfn [ , initialValue ] )\n\n%TypedArray%.prototype.reduce is a distinct function that implements the same\nalgorithm as Array.prototype.reduce as defined in 22.1.3.19 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\".\n\n22.1.3.19 Array.prototype.reduce ( callbackfn [ , initialValue ] )\n\n...\n8. Repeat, while k < len\n...\nc. If kPresent is true, then\n...\ni. Let accumulator be ? Call(callbackfn, undefined, \u00ab accumulator, kValue,\nk, O \u00bb).\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduce/callbackfn-not-called-on-empty.js", "esid": " sec-%typedarray%.prototype.reduce", "description": " >callbackfn is not called on empty instances\n", "info": " |22.2.3.20 %TypedArray%.prototype.reduce ( callbackfn [ , initialValue ] )\n\n%TypedArray%.prototype.reduce is a distinct function that implements the same\nalgorithm as Array.prototype.reduce as defined in 22.1.3.19 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\".\n\n22.1.3.19 Array.prototype.reduce ( callbackfn [ , initialValue ] )\n\n...\n4. If len is 0 and initialValue is not present, throw a TypeError exception.\n...\n8. Repeat, while k < len\n...\nc. If kPresent is true, then\n...\ni. Let accumulator be ? Call(callbackfn, undefined, \u00ab accumulator, kValue,\nk, O \u00bb).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduce/callbackfn-return-does-not-change-instance.js", "esid": " sec-%typedarray%.prototype.reduce", "description": " >The callbackfn return does not change the `this` instance\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduce/callbackfn-returns-abrupt.js", "esid": " sec-%typedarray%.prototype.reduce", "description": " >Returns abrupt from callbackfn\n", "info": " |22.2.3.20 %TypedArray%.prototype.reduce ( callbackfn [ , initialValue ] )\n\n%TypedArray%.prototype.reduce is a distinct function that implements the same\nalgorithm as Array.prototype.reduce as defined in 22.1.3.19 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\".\n\n22.1.3.19 Array.prototype.reduce ( callbackfn [ , initialValue ] )\n\n...\n8. Repeat, while k < len\n...\nc. If kPresent is true, then\n...\ni. Let accumulator be ? Call(callbackfn, undefined, \u00ab accumulator, kValue,\nk, O \u00bb).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduce/callbackfn-this.js", "esid": " sec-%typedarray%.prototype.reduce", "description": " >callbackfn `this` value\n", "info": " |22.2.3.20 %TypedArray%.prototype.reduce ( callbackfn [ , initialValue ] )\n\n%TypedArray%.prototype.reduce is a distinct function that implements the same\nalgorithm as Array.prototype.reduce as defined in 22.1.3.19 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\".\n\n22.1.3.19 Array.prototype.reduce ( callbackfn [ , initialValue ] )\n\n...\n8. Repeat, while k < len\n...\nc. If kPresent is true, then\n...\ni. Let accumulator be ? Call(callbackfn, undefined, \u00ab accumulator, kValue,\nk, O \u00bb).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduce/empty-instance-return-initialvalue.js", "esid": " sec-%typedarray%.prototype.reduce", "description": " >Returns given initialValue on empty instances without calling callbackfn\n", "info": " |22.2.3.20 %TypedArray%.prototype.reduce ( callbackfn [ , initialValue ] )\n\n%TypedArray%.prototype.reduce is a distinct function that implements the same\nalgorithm as Array.prototype.reduce as defined in 22.1.3.19 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\".\n\n22.1.3.19 Array.prototype.reduce ( callbackfn [ , initialValue ] )\n\n...\n7. Else initialValue is not present,\n...\nb. Repeat, while kPresent is false and k < len\n...\niii. If kPresent is true, then\n1. Let accumulator be ? Get(O, Pk).\niv. Increase k by 1.\n...\n8. Repeat, while k < len\n...\n9. Return accumulator.\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduce/get-length-uses-internal-arraylength.js", "esid": " sec-%typedarray%.prototype.reduce", "description": " Get \"length\" uses internal ArrayLength", "info": " |22.2.3.20 %TypedArray%.prototype.reduce ( callbackfn [ , initialValue ] )\n\n%TypedArray%.prototype.reduce is a distinct function that implements the same\nalgorithm as Array.prototype.reduce as defined in 22.1.3.19 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\".\n\n22.1.3.19 Array.prototype.reduce ( callbackfn [ , initialValue ] )\n\n1. Let O be ? ToObject(this value).\n2. Let len be ? ToLength(? Get(O, \"length\")).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduce/invoked-as-func.js", "esid": " sec-%typedarray%.prototype.reduce", "description": " Throws a TypeError exception when invoked as a function", "info": " |22.2.3.19 %TypedArray%.prototype.reduce ( callbackfn [ , initialValue ] )\n\n...\nThis function is not generic. ValidateTypedArray is applied to the this value\nprior to evaluating the algorithm. If its result is an abrupt completion that\nexception is thrown instead of evaluating the algorithm.\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n2. If O does not have a [[TypedArrayName]] internal slot, throw a TypeError\nexception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduce/invoked-as-method.js", "esid": " sec-%typedarray%.prototype.reduce", "description": " Requires a [[TypedArrayName]] internal slot.", "info": " |22.2.3.19 %TypedArray%.prototype.reduce ( callbackfn [ , initialValue ] )\n\n...\nThis function is not generic. ValidateTypedArray is applied to the this value\nprior to evaluating the algorithm. If its result is an abrupt completion that\nexception is thrown instead of evaluating the algorithm.\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n2. If O does not have a [[TypedArrayName]] internal slot, throw a TypeError\nexception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduce/length.js", "esid": " sec-%typedarray%.prototype.reduce", "description": " >%TypedArray%.prototype.reduce.length is 1.\n", "info": " |%TypedArray%.prototype.reduce ( callbackfn [ , thisArg ] )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduce/name.js", "esid": " sec-%typedarray%.prototype.reduce", "description": " >%TypedArray%.prototype.reduce.name is \"reduce\".\n", "info": " |%TypedArray%.prototype.reduce ( callbackfn [ , thisArg ] )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduce/not-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >TypedArray.prototype.reduce does not implement [[Construct]], is not new-able\n", "info": " |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n", "includes": ["isConstructor.js", "testTypedArray.js"], "features": ["Reflect.construct", "arrow-function", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduce/prop-desc.js", "esid": " sec-%typedarray%.prototype.reduce", "description": " >\"reduce\" property of TypedArrayPrototype\n", "info": " |ES6 section 17: Every other data property described in clauses 18 through 26\nand in Annex B.2 has the attributes { [[Writable]]: true,\n[[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduce/result-is-last-callbackfn-return.js", "esid": " sec-%typedarray%.prototype.reduce", "description": " >Returns last accumulator value\n", "info": " |22.2.3.20 %TypedArray%.prototype.reduce ( callbackfn [ , initialValue ] )\n\n%TypedArray%.prototype.reduce is a distinct function that implements the same\nalgorithm as Array.prototype.reduce as defined in 22.1.3.19 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\".\n\n22.1.3.19 Array.prototype.reduce ( callbackfn [ , initialValue ] )\n\n...\n7. Else initialValue is not present,\n...\nb. Repeat, while kPresent is false and k < len\n...\niii. If kPresent is true, then\n1. Let accumulator be ? Get(O, Pk).\niv. Increase k by 1.\n...\n8. Repeat, while k < len\n...\nc. If kPresent is true, then\ni. Let kValue be ? Get(O, Pk).\nii. Let accumulator be ? Call(callbackfn, undefined, \u00ab accumulator,\nkValue, k, O \u00bb).\n9. Return accumulator.\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduce/result-of-any-type.js", "esid": " sec-%typedarray%.prototype.reduce", "description": " >Result can be of any type without any number conversions\n", "info": " |22.2.3.20 %TypedArray%.prototype.reduce ( callbackfn [ , initialValue ] )\n\n%TypedArray%.prototype.reduce is a distinct function that implements the same\nalgorithm as Array.prototype.reduce as defined in 22.1.3.19 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\".\n\n22.1.3.19 Array.prototype.reduce ( callbackfn [ , initialValue ] )\n\n...\n7. Else initialValue is not present,\n...\nb. Repeat, while kPresent is false and k < len\n...\niii. If kPresent is true, then\n1. Let accumulator be ? Get(O, Pk).\niv. Increase k by 1.\n...\n8. Repeat, while k < len\n...\nc. If kPresent is true, then\ni. Let kValue be ? Get(O, Pk).\nii. Let accumulator be ? Call(callbackfn, undefined, \u00ab accumulator,\nkValue, k, O \u00bb).\n9. Return accumulator.\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduce/return-first-value-without-callbackfn.js", "esid": " sec-%typedarray%.prototype.reduce", "description": " >Returns [0] without calling callbackfn if length is 1 and initialValue is not\npresent.\n", "info": " |22.2.3.20 %TypedArray%.prototype.reduce ( callbackfn [ , initialValue ] )\n\n%TypedArray%.prototype.reduce is a distinct function that implements the same\nalgorithm as Array.prototype.reduce as defined in 22.1.3.19 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\".\n\n22.1.3.19 Array.prototype.reduce ( callbackfn [ , initialValue ] )\n\n...\n7. Else initialValue is not present,\n...\nb. Repeat, while kPresent is false and k < len\n...\niii. If kPresent is true, then\n1. Let accumulator be ? Get(O, Pk).\niv. Increase k by 1.\n...\n8. Repeat, while k < len\n...\n9. Return accumulator.\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduce/this-is-not-object.js", "esid": " sec-%typedarray%.prototype.reduce", "description": " Throws a TypeError exception when `this` is not Object", "info": " |22.2.3.20 %TypedArray%.prototype.reduce ( callbackfn [ , initialValue ] )\n\nThis function is not generic. ValidateTypedArray is applied to the this value\nprior to evaluating the algorithm. If its result is an abrupt completion that\nexception is thrown instead of evaluating the algorithm.\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduce/this-is-not-typedarray-instance.js", "esid": " sec-%typedarray%.prototype.reduce", "description": " >Throws a TypeError exception when `this` is not a TypedArray instance\n", "info": " |22.2.3.20 %TypedArray%.prototype.reduce ( callbackfn [ , initialValue ] )\n\nThis function is not generic. ValidateTypedArray is applied to the this value\nprior to evaluating the algorithm. If its result is an abrupt completion that\nexception is thrown instead of evaluating the algorithm.\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n2. If O does not have a [[TypedArrayName]] internal slot, throw a TypeError\nexception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduce/values-are-not-cached.js", "esid": " sec-%typedarray%.prototype.reduce", "description": " >Integer indexed values are not cached before iteration\n", "info": " |22.2.3.20 %TypedArray%.prototype.reduce ( callbackfn [ , initialValue ] )\n\n%TypedArray%.prototype.reduce is a distinct function that implements the same\nalgorithm as Array.prototype.reduce as defined in 22.1.3.19 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\".\n\n22.1.3.19 Array.prototype.reduce ( callbackfn [ , initialValue ] )\n\n...\n8. Repeat, while k < len\n...\nc. If kPresent is true, then\ni. Let kValue be ? Get(O, Pk).\nii. Let accumulator be ? Call(callbackfn, undefined, \u00ab accumulator, kValue,\nk, O \u00bb).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduceRight/callbackfn-arguments-custom-accumulator.js", "esid": " sec-%typedarray%.prototype.reduceright", "description": " >callbackfn arguments using custom accumulator\n", "info": " |22.2.3.21 %TypedArray%.prototype.reduceRight ( callbackfn [ , initialValue ] )\n\n%TypedArray%.prototype.reduceRight is a distinct function that implements the\nsame algorithm as Array.prototype.reduceRight as defined in 22.1.3.20 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n22.1.3.20 Array.prototype.reduceRight ( callbackfn [ , initialValue ] )\n\n...\n8. Repeat, while k \u2265 0\n...\nc. If kPresent is true, then\ni. Let kValue be ? Get(O, Pk).\nii. Let accumulator be ? Call(callbackfn, undefined, \u00ab accumulator,\nkValue, k, O \u00bb).\nd. Decrease k by 1.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduceRight/callbackfn-arguments-default-accumulator.js", "esid": " sec-%typedarray%.prototype.reduceright", "description": " >callbackfn arguments using default accumulator (value at last index)\n", "info": " |22.2.3.21 %TypedArray%.prototype.reduceRight ( callbackfn [ , initialValue ] )\n\n%TypedArray%.prototype.reduceRight is a distinct function that implements the\nsame algorithm as Array.prototype.reduceRight as defined in 22.1.3.20 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n22.1.3.20 Array.prototype.reduceRight ( callbackfn [ , initialValue ] )\n\n...\n7. Else initialValue is not present,\n...\nb. Repeat, while kPresent is false and k \u2265 0\n...\nii. Let kPresent be ? HasProperty(O, Pk).\niii. If kPresent is true, then\n1. Let accumulator be ? Get(O, Pk).\niv. Decrease k by 1.\n...\n8. Repeat, while k \u2265 0\n...\nc. If kPresent is true, then\ni. Let kValue be ? Get(O, Pk).\nii. Let accumulator be ? Call(callbackfn, undefined, \u00ab accumulator,\nkValue, k, O \u00bb).\nd. Decrease k by 1.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduceRight/callbackfn-is-not-callable-throws.js", "esid": " sec-%typedarray%.prototype.reduceright", "description": " >Throws TypeError if callbackfn is not callable\n", "info": " |22.2.3.21 %TypedArray%.prototype.reduceRight ( callbackfn [ , initialValue ] )\n\n%TypedArray%.prototype.reduceRight is a distinct function that implements the\nsame algorithm as Array.prototype.reduceRight as defined in 22.1.3.20 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n22.1.3.20 Array.prototype.reduceRight ( callbackfn [ , initialValue ] )\n\n...\n3. If IsCallable(callbackfn) is false, throw a TypeError exception.\n4. If len is 0 and initialValue is not present, throw a TypeError exception.\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduceRight/callbackfn-no-iteration-over-non-integer-properties.js", "esid": " sec-%typedarray%.prototype.reduceright", "description": " >Does not iterate over non-integer properties\n", "info": " |22.2.3.21 %TypedArray%.prototype.reduceRight ( callbackfn [ , initialValue ] )\n\n%TypedArray%.prototype.reduceRight is a distinct function that implements the\nsame algorithm as Array.prototype.reduceRight as defined in 22.1.3.20 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n22.1.3.20 Array.prototype.reduceRight ( callbackfn [ , initialValue ] )\n\n...\n8. Repeat, while k \u2265 0\n...\nc. If kPresent is true, then\ni. Let kValue be ? Get(O, Pk).\nii. Let accumulator be ? Call(callbackfn, undefined, \u00ab accumulator,\nkValue, k, O \u00bb).\nd. Decrease k by 1.\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduceRight/callbackfn-not-called-on-empty.js", "esid": " sec-%typedarray%.prototype.reduceright", "description": " >callbackfn is not called on empty instances\n", "info": " |22.2.3.21 %TypedArray%.prototype.reduceRight ( callbackfn [ , initialValue ] )\n\n%TypedArray%.prototype.reduceRight is a distinct function that implements the\nsame algorithm as Array.prototype.reduceRight as defined in 22.1.3.20 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n22.1.3.20 Array.prototype.reduceRight ( callbackfn [ , initialValue ] )\n\n...\n4. If len is 0 and initialValue is not present, throw a TypeError exception.\n...\n8. Repeat, while k \u2265 0\n...\nc. If kPresent is true, then\ni. Let kValue be ? Get(O, Pk).\nii. Let accumulator be ? Call(callbackfn, undefined, \u00ab accumulator,\nkValue, k, O \u00bb).\nd. Decrease k by 1.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduceRight/callbackfn-return-does-not-change-instance.js", "esid": " sec-%typedarray%.prototype.reduceright", "description": " >The callbackfn return does not change the `this` instance\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduceRight/callbackfn-returns-abrupt.js", "esid": " sec-%typedarray%.prototype.reduceright", "description": " >Returns abrupt from callbackfn\n", "info": " |22.2.3.21 %TypedArray%.prototype.reduceRight ( callbackfn [ , initialValue ] )\n\n%TypedArray%.prototype.reduceRight is a distinct function that implements the\nsame algorithm as Array.prototype.reduceRight as defined in 22.1.3.20 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n22.1.3.20 Array.prototype.reduceRight ( callbackfn [ , initialValue ] )\n\n...\n8. Repeat, while k < len\n...\nc. If kPresent is true, then\n...\ni. Let accumulator be ? Call(callbackfn, undefined, \u00ab accumulator, kValue,\nk, O \u00bb).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduceRight/callbackfn-this.js", "esid": " sec-%typedarray%.prototype.reduceright", "description": " >callbackfn `this` value\n", "info": " |22.2.3.21 %TypedArray%.prototype.reduceRight ( callbackfn [ , initialValue ] )\n\n%TypedArray%.prototype.reduceRight is a distinct function that implements the\nsame algorithm as Array.prototype.reduceRight as defined in 22.1.3.20 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n22.1.3.20 Array.prototype.reduceRight ( callbackfn [ , initialValue ] )\n\n...\n8. Repeat, while k \u2265 0\n...\nc. If kPresent is true, then\ni. Let kValue be ? Get(O, Pk).\nii. Let accumulator be ? Call(callbackfn, undefined, \u00ab accumulator,\nkValue, k, O \u00bb).\nd. Decrease k by 1.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduceRight/empty-instance-return-initialvalue.js", "esid": " sec-%typedarray%.prototype.reduceright", "description": " >Returns given initialValue on empty instances without calling callbackfn\n", "info": " |22.2.3.21 %TypedArray%.prototype.reduceRight ( callbackfn [ , initialValue ] )\n\n%TypedArray%.prototype.reduceRight is a distinct function that implements the\nsame algorithm as Array.prototype.reduceRight as defined in 22.1.3.20 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n22.1.3.20 Array.prototype.reduceRight ( callbackfn [ , initialValue ] )\n\n...\n7. Else initialValue is not present,\n...\nb. Repeat, while kPresent is false and k \u2265 0\n...\nii. Let kPresent be ? HasProperty(O, Pk).\niii. If kPresent is true, then\n1. Let accumulator be ? Get(O, Pk).\niv. Decrease k by 1.\n...\n8. Repeat, while k \u2265 0\n...\n9. Return accumulator.\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduceRight/get-length-uses-internal-arraylength.js", "esid": " sec-%typedarray%.prototype.reduceright", "description": " Get \"length\" uses internal ArrayLength", "info": " |22.2.3.21 %TypedArray%.prototype.reduceRight ( callbackfn [ , initialValue ] )\n\n%TypedArray%.prototype.reduceRight is a distinct function that implements the\nsame algorithm as Array.prototype.reduceRight as defined in 22.1.3.20 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n22.1.3.20 Array.prototype.reduceRight ( callbackfn [ , initialValue ] )\n\n1. Let O be ? ToObject(this value).\n2. Let len be ? ToLength(? Get(O, \"length\")).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduceRight/invoked-as-func.js", "esid": " sec-%typedarray%.prototype.reduceright", "description": " Throws a TypeError exception when invoked as a function", "info": " |22.2.3.20 %TypedArray%.prototype.reduceRight ( callbackfn [ , initialValue ] )\n\n...\nThis function is not generic. ValidateTypedArray is applied to the this value\nprior to evaluating the algorithm. If its result is an abrupt completion that\nexception is thrown instead of evaluating the algorithm.\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n2. If O does not have a [[TypedArrayName]] internal slot, throw a TypeError\nexception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduceRight/invoked-as-method.js", "esid": " sec-%typedarray%.prototype.reduceright", "description": " Requires a [[TypedArrayName]] internal slot.", "info": " |22.2.3.20 %TypedArray%.prototype.reduceRight ( callbackfn [ , initialValue ] )\n\n...\nThis function is not generic. ValidateTypedArray is applied to the this value\nprior to evaluating the algorithm. If its result is an abrupt completion that\nexception is thrown instead of evaluating the algorithm.\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n2. If O does not have a [[TypedArrayName]] internal slot, throw a TypeError\nexception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduceRight/length.js", "esid": " sec-%typedarray%.prototype.reduceright", "description": " >%TypedArray%.prototype.reduceRight.length is 1.\n", "info": " |%TypedArray%.prototype.reduceRight ( callbackfn [ , thisArg ] )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduceRight/name.js", "esid": " sec-%typedarray%.prototype.reduceright", "description": " >%TypedArray%.prototype.reduceRight.name is \"reduceRight\".\n", "info": " |%TypedArray%.prototype.reduceRight ( callbackfn [ , thisArg ] )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduceRight/not-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >TypedArray.prototype.reduceRight does not implement [[Construct]], is not new-able\n", "info": " |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n", "includes": ["isConstructor.js", "testTypedArray.js"], "features": ["Reflect.construct", "arrow-function", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduceRight/prop-desc.js", "esid": " sec-%typedarray%.prototype.reduceright", "description": " >\"reduceRight\" property of TypedArrayPrototype\n", "info": " |ES6 section 17: Every other data property described in clauses 18 through 26\nand in Annex B.2 has the attributes { [[Writable]]: true,\n[[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduceRight/result-is-last-callbackfn-return.js", "esid": " sec-%typedarray%.prototype.reduceright", "description": " >Returns last accumulator value\n", "info": " |22.2.3.21 %TypedArray%.prototype.reduceRight ( callbackfn [ , initialValue ] )\n\n%TypedArray%.prototype.reduceRight is a distinct function that implements the\nsame algorithm as Array.prototype.reduceRight as defined in 22.1.3.20 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n22.1.3.20 Array.prototype.reduceRight ( callbackfn [ , initialValue ] )\n\n...\n7. Else initialValue is not present,\n...\nb. Repeat, while kPresent is false and k \u2265 0\n...\nii. Let kPresent be ? HasProperty(O, Pk).\niii. If kPresent is true, then\n1. Let accumulator be ? Get(O, Pk).\niv. Decrease k by 1.\n...\n8. Repeat, while k \u2265 0\n...\nc. If kPresent is true, then\ni. Let kValue be ? Get(O, Pk).\nii. Let accumulator be ? Call(callbackfn, undefined, \u00ab accumulator,\nkValue, k, O \u00bb).\nd. Decrease k by 1.\n9. Return accumulator.\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduceRight/result-of-any-type.js", "esid": " sec-%typedarray%.prototype.reduceright", "description": " >Result can be of any type without any number conversions\n", "info": " |22.2.3.21 %TypedArray%.prototype.reduceRight ( callbackfn [ , initialValue ] )\n\n%TypedArray%.prototype.reduceRight is a distinct function that implements the\nsame algorithm as Array.prototype.reduceRight as defined in 22.1.3.20 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n22.1.3.20 Array.prototype.reduceRight ( callbackfn [ , initialValue ] )\n\n...\n7. Else initialValue is not present,\n...\nb. Repeat, while kPresent is false and k \u2265 0\n...\nii. Let kPresent be ? HasProperty(O, Pk).\niii. If kPresent is true, then\n1. Let accumulator be ? Get(O, Pk).\niv. Decrease k by 1.\n...\n8. Repeat, while k \u2265 0\n...\nc. If kPresent is true, then\ni. Let kValue be ? Get(O, Pk).\nii. Let accumulator be ? Call(callbackfn, undefined, \u00ab accumulator,\nkValue, k, O \u00bb).\nd. Decrease k by 1.\n9. Return accumulator.\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduceRight/return-first-value-without-callbackfn.js", "esid": " sec-%typedarray%.prototype.reduceright", "description": " >Returns [0] without calling callbackfn if length is 1 and initialValue is not\npresent.\n", "info": " |22.2.3.21 %TypedArray%.prototype.reduceRight ( callbackfn [ , initialValue ] )\n\n%TypedArray%.prototype.reduceRight is a distinct function that implements the\nsame algorithm as Array.prototype.reduceRight as defined in 22.1.3.20 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n22.1.3.20 Array.prototype.reduceRight ( callbackfn [ , initialValue ] )\n\n...\n7. Else initialValue is not present,\n...\nb. Repeat, while kPresent is false and k \u2265 0\n...\nii. Let kPresent be ? HasProperty(O, Pk).\niii. If kPresent is true, then\n1. Let accumulator be ? Get(O, Pk).\niv. Decrease k by 1.\n...\n8. Repeat, while k \u2265 0\n...\n9. Return accumulator.\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduceRight/this-is-not-object.js", "esid": " sec-%typedarray%.prototype.reduceright", "description": " Throws a TypeError exception when `this` is not Object", "info": " |22.2.3.21 %TypedArray%.prototype.reduceRight ( callbackfn [ , initialValue ] )\n\nThis function is not generic. ValidateTypedArray is applied to the this value\nprior to evaluating the algorithm. If its result is an abrupt completion that\nexception is thrown instead of evaluating the algorithm.\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduceRight/this-is-not-typedarray-instance.js", "esid": " sec-%typedarray%.prototype.reduceright", "description": " >Throws a TypeError exception when `this` is not a TypedArray instance\n", "info": " |22.2.3.21 %TypedArray%.prototype.reduceRight ( callbackfn [ , initialValue ] )\n\nThis function is not generic. ValidateTypedArray is applied to the this value\nprior to evaluating the algorithm. If its result is an abrupt completion that\nexception is thrown instead of evaluating the algorithm.\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n2. If O does not have a [[TypedArrayName]] internal slot, throw a TypeError\nexception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reduceRight/values-are-not-cached.js", "esid": " sec-%typedarray%.prototype.reduceright", "description": " >Integer indexed values are not cached before iteration\n", "info": " |22.2.3.21 %TypedArray%.prototype.reduceRight ( callbackfn [ , initialValue ] )\n\n%TypedArray%.prototype.reduceRight is a distinct function that implements the\nsame algorithm as Array.prototype.reduceRight as defined in 22.1.3.20 except\nthat the this object's [[ArrayLength]] internal slot is accessed in place of\nperforming a [[Get]] of \"length\".\n\n22.1.3.20 Array.prototype.reduceRight ( callbackfn [ , initialValue ] )\n\n...\n8. Repeat, while k \u2265 0\n...\nc. If kPresent is true, then\ni. Let kValue be ? Get(O, Pk).\nii. Let accumulator be ? Call(callbackfn, undefined, \u00ab accumulator,\nkValue, k, O \u00bb).\nd. Decrease k by 1.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reverse/get-length-uses-internal-arraylength.js", "esid": " sec-%typedarray%.prototype.reverse", "description": " Get \"length\" uses internal ArrayLength", "info": " |22.2.3.22 %TypedArray%.prototype.reverse ( )\n\n%TypedArray%.prototype.reverse is a distinct function that implements the same\nalgorithm as Array.prototype.reverse as defined in 22.1.3.21 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\".\n\n22.1.3.21 Array.prototype.reverse ( )\n\n1. Let O be ? ToObject(this value).\n2. Let len be ? ToLength(? Get(O, \"length\")).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reverse/invoked-as-func.js", "esid": " sec-%typedarray%.prototype.reverse", "description": " Throws a TypeError exception when invoked as a function", "info": " |22.2.3.21 %TypedArray%.prototype.reverse ( )\n\n...\nThis function is not generic. ValidateTypedArray is applied to the this value\nprior to evaluating the algorithm. If its result is an abrupt completion that\nexception is thrown instead of evaluating the algorithm.\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n2. If O does not have a [[TypedArrayName]] internal slot, throw a TypeError\nexception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reverse/invoked-as-method.js", "esid": " sec-%typedarray%.prototype.reverse", "description": " Requires a [[TypedArrayName]] internal slot.", "info": " |22.2.3.21 %TypedArray%.prototype.reverse ( )\n\n...\nThis function is not generic. ValidateTypedArray is applied to the this value\nprior to evaluating the algorithm. If its result is an abrupt completion that\nexception is thrown instead of evaluating the algorithm.\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n2. If O does not have a [[TypedArrayName]] internal slot, throw a TypeError\nexception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reverse/length.js", "esid": " sec-%typedarray%.prototype.reverse", "description": " >%TypedArray%.prototype.reverse.length is 0.\n", "info": " |%TypedArray%.prototype.reverse ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reverse/name.js", "esid": " sec-%typedarray%.prototype.reverse", "description": " >%TypedArray%.prototype.reverse.name is \"reverse\".\n", "info": " |%TypedArray%.prototype.reverse ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reverse/not-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >TypedArray.prototype.reverse does not implement [[Construct]], is not new-able\n", "info": " |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n", "includes": ["isConstructor.js", "testTypedArray.js"], "features": ["Reflect.construct", "arrow-function", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reverse/preserves-non-numeric-properties.js", "esid": " sec-%typedarray%.prototype.reverse", "description": " Preserves non numeric properties", "info": " |22.2.3.22 %TypedArray%.prototype.reverse ( )\n\n%TypedArray%.prototype.reverse is a distinct function that implements the same\nalgorithm as Array.prototype.reverse as defined in 22.1.3.21 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\".\n\n22.1.3.21 Array.prototype.reverse ( )\n\n...\n6. Return O.\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reverse/prop-desc.js", "esid": " sec-%typedarray%.prototype.reverse", "description": " >\"reverse\" property of TypedArrayPrototype\n", "info": " |ES6 section 17: Every other data property described in clauses 18 through 26\nand in Annex B.2 has the attributes { [[Writable]]: true,\n[[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reverse/returns-original-object.js", "esid": " sec-%typedarray%.prototype.reverse", "description": " Returns the same object", "info": " |22.2.3.22 %TypedArray%.prototype.reverse ( )\n\n%TypedArray%.prototype.reverse is a distinct function that implements the same\nalgorithm as Array.prototype.reverse as defined in 22.1.3.21 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\".\n\n22.1.3.21 Array.prototype.reverse ( )\n\n...\n6. Return O.\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reverse/reverts.js", "esid": " sec-%typedarray%.prototype.reverse", "description": " Reverts values", "info": " |22.2.3.22 %TypedArray%.prototype.reverse ( )\n\n%TypedArray%.prototype.reverse is a distinct function that implements the same\nalgorithm as Array.prototype.reverse as defined in 22.1.3.21 except that the\nthis object's [[ArrayLength]] internal slot is accessed in place of performing\na [[Get]] of \"length\".\n\n22.1.3.21 Array.prototype.reverse ( )\n\n...\n6. Return O.\n", "includes": ["testTypedArray.js", "compareArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reverse/this-is-not-object.js", "esid": " sec-%typedarray%.prototype.reverse", "description": " Throws a TypeError exception when `this` is not Object", "info": " |22.2.3.22 %TypedArray%.prototype.reverse ( )\n\nThis function is not generic. ValidateTypedArray is applied to the this value\nprior to evaluating the algorithm. If its result is an abrupt completion that\nexception is thrown instead of evaluating the algorithm.\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/reverse/this-is-not-typedarray-instance.js", "esid": " sec-%typedarray%.prototype.reverse", "description": " >Throws a TypeError exception when `this` is not a TypedArray instance\n", "info": " |22.2.3.22 %TypedArray%.prototype.reverse ( )\n\nThis function is not generic. ValidateTypedArray is applied to the this value\nprior to evaluating the algorithm. If its result is an abrupt completion that\nexception is thrown instead of evaluating the algorithm.\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n2. If O does not have a [[TypedArrayName]] internal slot, throw a TypeError\nexception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/array-arg-offset-tointeger.js", "esid": " sec-%typedarray%.prototype.set-array-offset", "description": " >ToInteger(offset) operations\n", "info": " |22.2.3.23.1 %TypedArray%.prototype.set (array [ , offset ] )\n\n1. Assert: array is any ECMAScript language value other than an Object with a\n[[TypedArrayName]] internal slot. If it is such an Object, the definition in\n22.2.3.23.2 applies.\n...\n6. Let targetOffset be ? ToInteger(offset).\n7. If targetOffset < 0, throw a RangeError exception.\n...\n", "includes": ["testTypedArray.js", "compareArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/array-arg-return-abrupt-from-src-get-value.js", "esid": " sec-%typedarray%.prototype.set-array-offset", "description": " >Return abrupt from getting src property value\n", "info": " |22.2.3.23.1 %TypedArray%.prototype.set (array [ , offset ] )\n\n1. Assert: array is any ECMAScript language value other than an Object with a\n[[TypedArrayName]] internal slot. If it is such an Object, the definition in\n22.2.3.23.2 applies.\n...\n21. Repeat, while targetByteIndex < limit\na. Let Pk be ! ToString(k).\nb. Let kNumber be ? ToNumber(? Get(src, Pk)).\nc. If IsDetachedBuffer(targetBuffer) is true, throw a TypeError exception.\nd. Perform SetValueInBuffer(targetBuffer, targetByteIndex, targetType,\nkNumber).\n...\n", "includes": ["testTypedArray.js", "compareArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/array-arg-return-abrupt-from-src-length-symbol.js", "esid": " sec-%typedarray%.prototype.set-array-offset", "description": " >Return abrupt getting src \"length\" as symbol\n", "info": " |22.2.3.23.1 %TypedArray%.prototype.set (array [ , offset ] )\n\n1. Assert: array is any ECMAScript language value other than an Object with a\n[[TypedArrayName]] internal slot. If it is such an Object, the definition in\n22.2.3.23.2 applies.\n...\n16. Let srcLength be ? ToLength(? Get(src, \"length\")).\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/array-arg-return-abrupt-from-src-tonumber-value-symbol.js", "esid": " sec-%typedarray%.prototype.set-array-offset", "description": " >Return abrupt from ToNumber(src property symbol value)\n", "info": " |22.2.3.23.1 %TypedArray%.prototype.set (array [ , offset ] )\n\n1. Assert: array is any ECMAScript language value other than an Object with a\n[[TypedArrayName]] internal slot. If it is such an Object, the definition in\n22.2.3.23.2 applies.\n...\n21. Repeat, while targetByteIndex < limit\na. Let Pk be ! ToString(k).\nb. Let kNumber be ? ToNumber(? Get(src, Pk)).\nc. If IsDetachedBuffer(targetBuffer) is true, throw a TypeError exception.\nd. Perform SetValueInBuffer(targetBuffer, targetByteIndex, targetType,\nkNumber).\n...\n", "includes": ["testTypedArray.js", "compareArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/array-arg-return-abrupt-from-src-tonumber-value.js", "esid": " sec-%typedarray%.prototype.set-array-offset", "description": " >Return abrupt from ToNumber(src property value)\n", "info": " |22.2.3.23.1 %TypedArray%.prototype.set (array [ , offset ] )\n\n1. Assert: array is any ECMAScript language value other than an Object with a\n[[TypedArrayName]] internal slot. If it is such an Object, the definition in\n22.2.3.23.2 applies.\n...\n21. Repeat, while targetByteIndex < limit\na. Let Pk be ! ToString(k).\nb. Let kNumber be ? ToNumber(? Get(src, Pk)).\nc. If IsDetachedBuffer(targetBuffer) is true, throw a TypeError exception.\nd. Perform SetValueInBuffer(targetBuffer, targetByteIndex, targetType,\nkNumber).\n...\n", "includes": ["testTypedArray.js", "compareArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/array-arg-return-abrupt-from-tointeger-offset-symbol.js", "esid": " sec-%typedarray%.prototype.set-array-offset", "description": " >Return abrupt from ToInteger(Symbol offset)\n", "info": " |22.2.3.23.1 %TypedArray%.prototype.set (array [ , offset ] )\n\n1. Assert: array is any ECMAScript language value other than an Object with a\n[[TypedArrayName]] internal slot. If it is such an Object, the definition in\n22.2.3.23.2 applies.\n...\n6. Let targetOffset be ? ToInteger(offset).\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/array-arg-return-abrupt-from-toobject-offset.js", "esid": " sec-%typedarray%.prototype.set-array-offset", "description": " >Return abrupt from ToObject(array)\n", "info": " |22.2.3.23.1 %TypedArray%.prototype.set (array [ , offset ] )\n\n1. Assert: array is any ECMAScript language value other than an Object with a\n[[TypedArrayName]] internal slot. If it is such an Object, the definition in\n22.2.3.23.2 applies.\n...\n15. Let src be ? ToObject(array).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/array-arg-set-values-in-order.js", "esid": " sec-%typedarray%.prototype.set-array-offset", "description": " >Get and set each value in order\n", "info": " |22.2.3.23.1 %TypedArray%.prototype.set (array [ , offset ] )\n\n1. Assert: array is any ECMAScript language value other than an Object with a\n[[TypedArrayName]] internal slot. If it is such an Object, the definition in\n22.2.3.23.2 applies.\n...\n21. Repeat, while targetByteIndex < limit\na. Let Pk be ! ToString(k).\nb. Let kNumber be ? ToNumber(? Get(src, Pk)).\nc. If IsDetachedBuffer(targetBuffer) is true, throw a TypeError exception.\nd. Perform SetValueInBuffer(targetBuffer, targetByteIndex, targetType,\nkNumber).\n...\n", "includes": ["testTypedArray.js", "compareArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/array-arg-set-values.js", "esid": " sec-%typedarray%.prototype.set-array-offset", "description": " >Set values to target and return undefined\n", "info": " |22.2.3.23.1 %TypedArray%.prototype.set (array [ , offset ] )\n\n1. Assert: array is any ECMAScript language value other than an Object with a\n[[TypedArrayName]] internal slot. If it is such an Object, the definition in\n22.2.3.23.2 applies.\n...\n21. Repeat, while targetByteIndex < limit\nLet Pk be ! ToString(k).\nLet kNumber be ? ToNumber(? Get(src, Pk)).\nIf IsDetachedBuffer(targetBuffer) is true, throw a TypeError exception.\nPerform SetValueInBuffer(targetBuffer, targetByteIndex, targetType, kNumber).\n...\n22. Return undefined.\n", "includes": ["testTypedArray.js", "compareArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/array-arg-src-tonumber-value-conversions.js", "esid": " sec-%typedarray%.prototype.set-array-offset", "description": " >Values conversions on ToNumber(src property value)\n", "info": " |22.2.3.23.1 %TypedArray%.prototype.set (array [ , offset ] )\n\n1. Assert: array is any ECMAScript language value other than an Object with a\n[[TypedArrayName]] internal slot. If it is such an Object, the definition in\n22.2.3.23.2 applies.\n...\n21. Repeat, while targetByteIndex < limit\na. Let Pk be ! ToString(k).\nb. Let kNumber be ? ToNumber(? Get(src, Pk)).\nc. If IsDetachedBuffer(targetBuffer) is true, throw a TypeError exception.\nd. Perform SetValueInBuffer(targetBuffer, targetByteIndex, targetType,\nkNumber).\n...\n", "includes": ["byteConversionValues.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/array-arg-src-tonumber-value-type-conversions.js", "esid": " sec-%typedarray%.prototype.set-array-offset", "description": " >Type conversions on ToNumber(src property value)\n", "info": " |22.2.3.23.1 %TypedArray%.prototype.set (array [ , offset ] )\n\n1. Assert: array is any ECMAScript language value other than an Object with a\n[[TypedArrayName]] internal slot. If it is such an Object, the definition in\n22.2.3.23.2 applies.\n...\n21. Repeat, while targetByteIndex < limit\na. Let Pk be ! ToString(k).\nb. Let kNumber be ? ToNumber(? Get(src, Pk)).\nc. If IsDetachedBuffer(targetBuffer) is true, throw a TypeError exception.\nd. Perform SetValueInBuffer(targetBuffer, targetByteIndex, targetType,\nkNumber).\n...\n", "includes": ["testTypedArray.js", "compareArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/array-arg-src-values-are-not-cached.js", "esid": " sec-%typedarray%.prototype.set-array-offset", "description": " >Values from src array are not cached\n", "info": " |22.2.3.23.1 %TypedArray%.prototype.set (array [ , offset ] )\n\n1. Assert: array is any ECMAScript language value other than an Object with a\n[[TypedArrayName]] internal slot. If it is such an Object, the definition in\n22.2.3.23.2 applies.\n...\n21. Repeat, while targetByteIndex < limit\na. Let Pk be ! ToString(k).\nb. Let kNumber be ? ToNumber(? Get(src, Pk)).\nc. If IsDetachedBuffer(targetBuffer) is true, throw a TypeError exception.\nd. Perform SetValueInBuffer(targetBuffer, targetByteIndex, targetType,\nkNumber).\n...\n", "includes": ["testTypedArray.js", "compareArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/array-arg-target-arraylength-internal.js", "esid": " sec-%typedarray%.prototype.set-array-offset", "description": " >Uses target's internal [[ArrayLength]]\n", "info": " |22.2.3.23.1 %TypedArray%.prototype.set (array [ , offset ] )\n\n1. Assert: array is any ECMAScript language value other than an Object with a\n[[TypedArrayName]] internal slot. If it is such an Object, the definition in\n22.2.3.23.2 applies.\n...\n10. Let targetLength be the value of target's [[ArrayLength]] internal slot.\n...\n17. If srcLength + targetOffset > targetLength, throw a RangeError exception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/bit-precision.js", "esid": " sec-%typedarray%.prototype.set.2", "description": " Preservation of bit-level encoding", "info": " |[...]\n28. Else,\na. NOTE: If srcType and targetType are the same, the transfer must be\nperformed in a manner that preserves the bit-level encoding of the\nsource data.\nb. Repeat, while targetByteIndex < limit\ni. Let value be GetValueFromBuffer(srcBuffer, srcByteIndex, \"Uint8\").\nii. Perform SetValueInBuffer(targetBuffer, targetByteIndex, \"Uint8\",\nvalue).\niii. Set srcByteIndex to srcByteIndex + 1.\niv. Set targetByteIndex to targetByteIndex + 1.\n", "includes": ["nans.js", "compareArray.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/invoked-as-func.js", "esid": " sec-%typedarray%.prototype.set", "description": " Throws a TypeError exception when invoked as a function", "info": " |22.2.3.22 %TypedArray%.prototype.set ( overloaded [ , offset ])\n\nThis function is not generic. The this value must be an object with a\n[[TypedArrayName]] internal slot.\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/invoked-as-method.js", "esid": " sec-%typedarray%.prototype.set", "description": " Requires a [[TypedArrayName]] internal slot.", "info": " |22.2.3.22 %TypedArray%.prototype.set ( overloaded [ , offset ])\n\nThis function is not generic. The this value must be an object with a\n[[TypedArrayName]] internal slot.\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/name.js", "esid": " sec-%typedarray%.prototype.set", "description": " >%TypedArray%.prototype.set.name is \"set\".\n", "info": " |%TypedArray%.prototype.set ( overloaded [ , offset ])\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/not-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >TypedArray.prototype.set does not implement [[Construct]], is not new-able\n", "info": " |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n", "includes": ["isConstructor.js", "testTypedArray.js"], "features": ["Reflect.construct", "arrow-function", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/prop-desc.js", "esid": " sec-%typedarray%.prototype.set", "description": " >\"set\" property of TypedArrayPrototype\n", "info": " |ES6 section 17: Every other data property described in clauses 18 through 26\nand in Annex B.2 has the attributes { [[Writable]]: true,\n[[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/this-is-not-object.js", "esid": " sec-%typedarray%.prototype.set-overloaded-offset", "description": " Throws a TypeError exception when `this` is not Object", "info": " |22.2.3.23 %TypedArray%.prototype.set\n\n...\n2. Let target be the this value.\n3. If Type(target) is not Object, throw a TypeError exception.\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/this-is-not-typedarray-instance.js", "esid": " sec-%typedarray%.prototype.set-overloaded-offset", "description": " >Throws a TypeError exception when `this` is not a TypedArray instance\n", "info": " |22.2.3.23 %TypedArray%.prototype.set\n\n...\n2. Let target be the this value.\n3. If Type(target) is not Object, throw a TypeError exception.\n4. If target does not have a [[TypedArrayName]] internal slot, throw a\nTypeError exception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/typedarray-arg-offset-tointeger.js", "esid": " sec-%typedarray%.prototype.set-typedarray-offset", "description": " >ToInteger(offset) operations\n", "info": " |22.2.3.23.2 %TypedArray%.prototype.set(typedArray [ , offset ] )\n\n1. Assert: typedArray has a [[TypedArrayName]] internal slot. If it does not,\nthe definition in 22.2.3.23.1 applies.\n...\n6. Let targetOffset be ? ToInteger(offset).\n", "includes": ["testTypedArray.js", "compareArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/typedarray-arg-return-abrupt-from-tointeger-offset-symbol.js", "esid": " sec-%typedarray%.prototype.set-typedarray-offset", "description": " >Return abrupt from ToInteger(Symbol offset)\n", "info": " |22.2.3.23.2 %TypedArray%.prototype.set(typedArray [ , offset ] )\n\n1. Assert: typedArray has a [[TypedArrayName]] internal slot. If it does not,\nthe definition in 22.2.3.23.1 applies.\n...\n6. Let targetOffset be ? ToInteger(offset).\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/typedarray-arg-set-values-diff-buffer-other-type.js", "esid": " sec-%typedarray%.prototype.set-typedarray-offset", "description": " >Set values from different instances using the different buffer and different\ntype.\n", "info": " |22.2.3.23.2 %TypedArray%.prototype.set(typedArray [ , offset ] )\n\n1. Assert: typedArray has a [[TypedArrayName]] internal slot. If it does not,\nthe definition in 22.2.3.23.1 applies.\n...\n23. If SameValue(srcBuffer, targetBuffer) is true, then\n...\n24. Else, let srcByteIndex be srcByteOffset.\n...\n27. If SameValue(srcType, targetType) is true, then,\n...\n28. Else,\na. Repeat, while targetByteIndex < limit\ni. Let value be GetValueFromBuffer(srcBuffer, srcByteIndex, srcType).\nii. Perform SetValueInBuffer(targetBuffer, targetByteIndex, targetType,\nvalue).\n", "includes": ["testTypedArray.js", "compareArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/typedarray-arg-set-values-diff-buffer-same-type.js", "esid": " sec-%typedarray%.prototype.set-typedarray-offset", "description": " >Set values from different instances using the different buffer and same\nconstructor. srcBuffer values are cached.\n", "info": " |22.2.3.23.2 %TypedArray%.prototype.set(typedArray [ , offset ] )\n\n1. Assert: typedArray has a [[TypedArrayName]] internal slot. If it does not,\nthe definition in 22.2.3.23.1 applies.\n...\n23. If SameValue(srcBuffer, targetBuffer) is true, then\n...\n24. Else, let srcByteIndex be srcByteOffset.\n...\n27. If SameValue(srcType, targetType) is true, then,\na. NOTE: If srcType and targetType are the same, the transfer must be\nperformed in a manner that preserves the bit-level encoding of the source\ndata.\nb. Repeat, while targetByteIndex < limit\ni. Let value be GetValueFromBuffer(srcBuffer, srcByteIndex, \"Uint8\").\nii. Perform SetValueInBuffer(targetBuffer, targetByteIndex, \"Uint8\",\nvalue).\n...\n29. Return undefined.\n", "includes": ["testTypedArray.js", "compareArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/typedarray-arg-set-values-same-buffer-other-type.js", "esid": " sec-%typedarray%.prototype.set-typedarray-offset", "description": " >Set values from different instances using the same buffer and different\nconstructor.\n", "info": " |22.2.3.23.2 %TypedArray%.prototype.set(typedArray [ , offset ] )\n\n1. Assert: typedArray has a [[TypedArrayName]] internal slot. If it does not,\nthe definition in 22.2.3.23.1 applies.\n...\n23. If SameValue(srcBuffer, targetBuffer) is true, then\na. Let srcBuffer be ? CloneArrayBuffer(srcBuffer, srcByteOffset, srcLength,\n%ArrayBuffer%).\nb. NOTE: %ArrayBuffer% is used to clone srcBuffer because is it known to not\nhave any observable side-effects.\n...\n...\n27. If SameValue(srcType, targetType) is true, then,\n...\n28. Else,\na. Repeat, while targetByteIndex < limit\ni. Let value be GetValueFromBuffer(srcBuffer, srcByteIndex, srcType).\nii. Perform SetValueInBuffer(targetBuffer, targetByteIndex, targetType,\nvalue).\n...\n29. Return undefined.\n", "includes": ["testTypedArray.js", "compareArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/typedarray-arg-set-values-same-buffer-same-type.js", "esid": " sec-%typedarray%.prototype.set-typedarray-offset", "description": " >Set values from different instances using the same buffer and same\nconstructor. srcBuffer values are cached.\n", "info": " |22.2.3.23.2 %TypedArray%.prototype.set(typedArray [ , offset ] )\n\n1. Assert: typedArray has a [[TypedArrayName]] internal slot. If it does not,\nthe definition in 22.2.3.23.1 applies.\n...\n23. If SameValue(srcBuffer, targetBuffer) is true, then\na. Let srcBuffer be ? CloneArrayBuffer(srcBuffer, srcByteOffset, srcLength,\n%ArrayBuffer%).\nb. NOTE: %ArrayBuffer% is used to clone srcBuffer because is it known to not\nhave any observable side-effects.\n...\n...\n27. If SameValue(srcType, targetType) is true, then,\na. NOTE: If srcType and targetType are the same, the transfer must be\nperformed in a manner that preserves the bit-level encoding of the source\ndata.\nb. Repeat, while targetByteIndex < limit\ni. Let value be GetValueFromBuffer(srcBuffer, srcByteIndex, \"Uint8\").\nii. Perform SetValueInBuffer(targetBuffer, targetByteIndex, \"Uint8\",\nvalue).\n", "includes": ["testTypedArray.js", "compareArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/typedarray-arg-src-arraylength-internal.js", "esid": " sec-%typedarray%.prototype.set-typedarray-offset", "description": " >Uses typedArray's internal [[ArrayLength]]\n", "info": " |22.2.3.23.2 %TypedArray%.prototype.set(typedArray [ , offset ] )\n\n1. Assert: typedArray has a [[TypedArrayName]] internal slot. If it does not,\nthe definition in 22.2.3.23.1 applies.\n...\n20. Let srcLength be the value of typedArray's [[ArrayLength]] internal slot.\n...\n22. If srcLength + targetOffset > targetLength, throw a RangeError exception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/typedarray-arg-src-byteoffset-internal.js", "esid": " sec-%typedarray%.prototype.set-typedarray-offset", "description": " >Uses typedArray's internal [[ByteOffset]]\n", "info": " |22.2.3.23.2 %TypedArray%.prototype.set(typedArray [ , offset ] )\n1. Assert: typedArray has a [[TypedArrayName]] internal slot. If it does not,\nthe definition in 22.2.3.23.1 applies.\n...\n21. Let srcByteOffset be typedArray.[[ByteOffset]].\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/typedarray-arg-target-arraylength-internal.js", "esid": " sec-%typedarray%.prototype.set-typedarray-offset", "description": " >Uses target's internal [[ArrayLength]]\n", "info": " |22.2.3.23.2 %TypedArray%.prototype.set(typedArray [ , offset ] )\n\n1. Assert: typedArray has a [[TypedArrayName]] internal slot. If it does not,\nthe definition in 22.2.3.23.1 applies.\n2. Let target be the this value.\n...\n10. Let targetLength be the value of target's [[ArrayLength]] internal slot.\n...\n22. If srcLength + targetOffset > targetLength, throw a RangeError exception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/set/typedarray-arg-target-byteoffset-internal.js", "esid": " sec-%typedarray%.prototype.set-typedarray-offset", "description": " >Uses target's internal [[ArrayLength]]\n", "info": " |22.2.3.23.2 %TypedArray%.prototype.set(typedArray [ , offset ] )\n1. Assert: typedArray has a [[TypedArrayName]] internal slot. If it does not,\nthe definition in 22.2.3.23.1 applies.\n2. Let target be the this value.\n...\n16. Let targetByteOffset be target.[[ByteOffset]].\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/slice/arraylength-internal.js", "esid": " sec-%typedarray%.prototype.slice", "description": " Use internal ArrayLength instead of getting a length property", "info": " |22.2.3.24 %TypedArray%.prototype.slice ( start, end )\n\n...\n3. Let len be the value of O's [[ArrayLength]] internal slot.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/slice/infinity.js", "esid": " sec-%typedarray%.prototype.slice", "description": " Infinity values on start and end", "includes": ["testTypedArray.js", "compareArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/slice/invoked-as-func.js", "esid": " sec-%typedarray%.prototype.slice", "description": " Throws a TypeError exception when invoked as a function", "info": " |22.2.3.23 %TypedArray%.prototype.slice ( start, end )\n\n1. Let O be the this value.\n2. Let valid be ValidateTypedArray(O).\n3. ReturnIfAbrupt(valid).\n...\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n2. If O does not have a [[TypedArrayName]] internal slot, throw a TypeError\nexception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/slice/invoked-as-method.js", "esid": " sec-%typedarray%.prototype.slice", "description": " Requires a [[TypedArrayName]] internal slot.", "info": " |22.2.3.23 %TypedArray%.prototype.slice ( start, end )\n\n1. Let O be the this value.\n2. Let valid be ValidateTypedArray(O).\n3. ReturnIfAbrupt(valid).\n...\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n2. If O does not have a [[TypedArrayName]] internal slot, throw a TypeError\nexception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/slice/length.js", "esid": " sec-%typedarray%.prototype.slice", "description": " >%TypedArray%.prototype.slice.length is 2.\n", "info": " |%TypedArray%.prototype.slice ( start, end )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/slice/minus-zero.js", "esid": " sec-%typedarray%.prototype.slice", "description": " -0 values on start and end", "info": " |22.2.3.24 %TypedArray%.prototype.slice ( start, end )\n", "includes": ["testTypedArray.js", "compareArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/slice/name.js", "esid": " sec-%typedarray%.prototype.slice", "description": " >%TypedArray%.prototype.slice.name is \"slice\".\n", "info": " |%TypedArray%.prototype.slice ( start, end )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/slice/not-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >TypedArray.prototype.slice does not implement [[Construct]], is not new-able\n", "info": " |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n", "includes": ["isConstructor.js", "testTypedArray.js"], "features": ["Reflect.construct", "arrow-function", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/slice/prop-desc.js", "esid": " sec-%typedarray%.prototype.slice", "description": " >\"slice\" property of TypedArrayPrototype\n", "info": " |ES6 section 17: Every other data property described in clauses 18 through 26\nand in Annex B.2 has the attributes { [[Writable]]: true,\n[[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/slice/result-does-not-copy-ordinary-properties.js", "esid": " sec-%typedarray%.prototype.slice", "description": " Result does not import own properties", "info": " |22.2.3.24 %TypedArray%.prototype.slice( start , end )\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/slice/results-with-different-length.js", "esid": " sec-%typedarray%.prototype.slice", "description": " slice may return a new instance with a smaller length", "includes": ["testTypedArray.js", "compareArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/slice/results-with-empty-length.js", "esid": " sec-%typedarray%.prototype.slice", "description": " slice may return a new empty instance", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/slice/results-with-same-length.js", "esid": " sec-%typedarray%.prototype.slice", "description": " slice may return a new instance with the same length", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/slice/return-abrupt-from-end-symbol.js", "esid": " sec-%typedarray%.prototype.slice", "description": " Return abrupt from ToInteger(end), end is symbol", "info": " |22.2.3.24 %TypedArray%.prototype.slice ( start, end )\n\n...\n6. If end is undefined, let relativeEnd be len; else let relativeEnd be ?\nToInteger(end).\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/slice/return-abrupt-from-end.js", "esid": " sec-%typedarray%.prototype.slice", "description": " Return abrupt from ToInteger(end)", "info": " |22.2.3.24 %TypedArray%.prototype.slice ( start, end )\n\n...\n6. If end is undefined, let relativeEnd be len; else let relativeEnd be ?\nToInteger(end).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/slice/return-abrupt-from-start-symbol.js", "esid": " sec-%typedarray%.prototype.slice", "description": " Return abrupt from ToInteger(start), start is symbol", "info": " |22.2.3.24 %TypedArray%.prototype.slice ( start, end )\n\n...\n4. Let relativeStart be ? ToInteger(start).\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/slice/return-abrupt-from-start.js", "esid": " sec-%typedarray%.prototype.slice", "description": " Return abrupt from ToInteger(start)", "info": " |22.2.3.24 %TypedArray%.prototype.slice ( start, end )\n\n...\n4. Let relativeStart be ? ToInteger(start).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/slice/speciesctor-get-ctor-abrupt.js", "esid": " sec-%typedarray%.prototype.slice", "description": " Return abrupt from SpeciesConstructor's get Constructor", "info": " |22.2.3.24 %TypedArray%.prototype.slice ( start, end )\n\n...\n9. Let A be ? TypedArraySpeciesCreate(O, \u00ab count \u00bb).\n...\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n1. Assert: Type(O) is Object.\n2. Let C be ? Get(O, \"constructor\").\n3. If C is undefined, return defaultConstructor.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/slice/speciesctor-get-ctor-inherited.js", "esid": " sec-%typedarray%.prototype.slice", "description": " get inherited constructor on SpeciesConstructor", "info": " |22.2.3.24 %TypedArray%.prototype.slice ( start, end )\n\n...\n9. Let A be ? TypedArraySpeciesCreate(O, \u00ab count \u00bb).\n...\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n1. Assert: Type(O) is Object.\n2. Let C be ? Get(O, \"constructor\").\n3. If C is undefined, return defaultConstructor.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/slice/speciesctor-get-ctor-returns-throws.js", "esid": " sec-%typedarray%.prototype.slice", "description": " >Throws if O.constructor returns a non-Object and non-undefined value\n", "info": " |22.2.3.24 %TypedArray%.prototype.slice ( start, end )\n\n...\n9. Let A be ? TypedArraySpeciesCreate(O, \u00ab count \u00bb).\n...\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n1. Assert: Type(O) is Object.\n2. Let C be ? Get(O, \"constructor\").\n3. If C is undefined, return defaultConstructor.\n4. If Type(C) is not Object, throw a TypeError exception.\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/slice/speciesctor-get-ctor.js", "esid": " sec-%typedarray%.prototype.slice", "description": " get constructor on SpeciesConstructor", "info": " |22.2.3.24 %TypedArray%.prototype.slice ( start, end )\n\n...\n9. Let A be ? TypedArraySpeciesCreate(O, \u00ab count \u00bb).\n...\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n1. Assert: Type(O) is Object.\n2. Let C be ? Get(O, \"constructor\").\n3. If C is undefined, return defaultConstructor.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/slice/speciesctor-get-species-custom-ctor-length-throws.js", "esid": " sec-%typedarray%.prototype.slice", "description": " >Throws a TypeError if new typedArray's length < count\n", "info": " |22.2.3.24 %TypedArray%.prototype.slice ( start, end )\n\n...\n9. Let A be ? TypedArraySpeciesCreate(O, \u00ab count \u00bb).\n...\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n4. Return ? TypedArrayCreate(constructor, argumentList).\n\n22.2.4.6 TypedArrayCreate ( constructor, argumentList )\n\n...\n3. If argumentList is a List of a single Number, then\na. If the value of newTypedArray's [[ArrayLength]] internal slot <\nargumentList[0], throw a TypeError exception.\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol.species", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/slice/speciesctor-get-species-custom-ctor-throws.js", "esid": " sec-%typedarray%.prototype.slice", "description": " >Custom @@species constructor throws if it does not return a compatible object\n", "info": " |22.2.3.24 %TypedArray%.prototype.slice ( start, end )\n\n...\n9. Let A be ? TypedArraySpeciesCreate(O, \u00ab count \u00bb).\n...\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n4. Return ? TypedArrayCreate(constructor, argumentList).\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n...\n5. Let S be ? Get(C, @@species).\n...\n7. If IsConstructor(S) is true, return S.\n...\n\n22.2.4.6 TypedArrayCreate ( constructor, argumentList )\n\n1. Let newTypedArray be ? Construct(constructor, argumentList).\n2. Perform ? ValidateTypedArray(newTypedArray).\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol.species", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/slice/speciesctor-get-species-returns-throws.js", "esid": " sec-%typedarray%.prototype.slice", "description": " >Throws if returned @@species is not a constructor, null or undefined.\n", "info": " |22.2.3.24 %TypedArray%.prototype.slice ( start, end )\n\n...\n9. Let A be ? TypedArraySpeciesCreate(O, \u00ab count \u00bb).\n...\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n...\n5. Let S be ? Get(C, @@species).\n6. If S is either undefined or null, return defaultConstructor.\n7. If IsConstructor(S) is true, return S.\n8. Throw a TypeError exception.\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol.species", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/slice/this-is-not-object.js", "esid": " sec-%typedarray%.prototype.slice", "description": " Throws a TypeError exception when `this` is not Object", "info": " |22.2.3.24 %TypedArray%.prototype.slice ( start, end )\n\nThe following steps are taken:\n\n1. Let O be the this value.\n2. Perform ? ValidateTypedArray(O).\n...\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/slice/this-is-not-typedarray-instance.js", "esid": " sec-%typedarray%.prototype.slice", "description": " >Throws a TypeError exception when `this` is not a TypedArray instance\n", "info": " |22.2.3.24 %TypedArray%.prototype.slice ( start, end )\n\nThe following steps are taken:\n\n1. Let O be the this value.\n2. Perform ? ValidateTypedArray(O).\n...\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n2. If O does not have a [[TypedArrayName]] internal slot, throw a TypeError\nexception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/slice/tointeger-end.js", "esid": " sec-%typedarray%.prototype.slice", "description": " ToInteger(end)", "info": " |22.2.3.24 %TypedArray%.prototype.slice( start , end )\n\n...\n6. If end is undefined, let relativeEnd be len; else let relativeEnd be ?\nToInteger(end).\n...\n", "includes": ["testTypedArray.js", "compareArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/slice/tointeger-start.js", "esid": " sec-%typedarray%.prototype.slice", "description": " ToInteger(begin)", "info": " |22.2.3.24 %TypedArray%.prototype.slice ( start, end )\n\n...\n4. Let relativeStart be ? ToInteger(start).\n...\n", "includes": ["testTypedArray.js", "compareArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/some/callbackfn-arguments-with-thisarg.js", "esid": " sec-%typedarray%.prototype.some", "description": " >thisArg does not affect callbackfn arguments\n", "info": " |22.2.3.25 %TypedArray%.prototype.some ( callbackfn [ , thisArg ] )\n\n%TypedArray%.prototype.some is a distinct function that implements the same\nalgorithm as Array.prototype.some as defined in 22.1.3.24 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\".\n\n22.1.3.24 Array.prototype.some ( callbackfn [ , thisArg ] )\n\n...\n4. If thisArg was supplied, let T be thisArg; else let T be undefined.\n...\n6. Repeat, while k < len\n...\nc. If kPresent is true, then\ni. Let kValue be ? Get(O, Pk).\nii. Let testResult be ToBoolean(? Call(callbackfn, T, \u00ab kValue, k, O \u00bb)).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/some/callbackfn-arguments-without-thisarg.js", "esid": " sec-%typedarray%.prototype.some", "description": " >callbackfn arguments\n", "info": " |22.2.3.25 %TypedArray%.prototype.some ( callbackfn [ , thisArg ] )\n\n%TypedArray%.prototype.some is a distinct function that implements the same\nalgorithm as Array.prototype.some as defined in 22.1.3.24 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\".\n\n22.1.3.24 Array.prototype.some ( callbackfn [ , thisArg ] )\n\n...\n4. If thisArg was supplied, let T be thisArg; else let T be undefined.\n...\n6. Repeat, while k < len\n...\nc. If kPresent is true, then\ni. Let kValue be ? Get(O, Pk).\nii. Let testResult be ToBoolean(? Call(callbackfn, T, \u00ab kValue, k, O \u00bb)).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/some/callbackfn-no-interaction-over-non-integer.js", "esid": " sec-%typedarray%.prototype.some", "description": " >Does not interact over non-integer properties\n", "info": " |22.2.3.7 %TypedArray%.prototype.some ( callbackfn [ , thisArg ] )\n\n...\n6. Repeat, while k < len\n...\nc. If kPresent is true, then\ni. Let kValue be ? Get(O, Pk).\nii. Let testResult be ToBoolean(? Call(callbackfn, T, \u00ab kValue, k, O \u00bb)).\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/some/callbackfn-not-callable-throws.js", "esid": " sec-%typedarray%.prototype.some", "description": " Throws a TypeError if callbackfn is not callable", "info": " |22.2.3.25 %TypedArray%.prototype.some ( callbackfn [ , thisArg ] )\n\n%TypedArray%.prototype.some is a distinct function that implements the same\nalgorithm as Array.prototype.some as defined in 22.1.3.24 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\".\n\n22.1.3.24 Array.prototype.some ( callbackfn [ , thisArg ] )\n\n...\n3. If IsCallable(callbackfn) is false, throw a TypeError exception.\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/some/callbackfn-not-called-on-empty.js", "esid": " sec-%typedarray%.prototype.some", "description": " >callbackfn is not called on empty instances\n", "info": " |22.2.3.25 %TypedArray%.prototype.some ( callbackfn [ , thisArg ] )\n\n%TypedArray%.prototype.some is a distinct function that implements the same\nalgorithm as Array.prototype.some as defined in 22.1.3.24 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\".\n\n22.1.3.24 Array.prototype.some ( callbackfn [ , thisArg ] )\n\n...\n6. Repeat, while k < len\n..\nc. If kPresent is true, then\ni. Let kValue be ? Get(O, Pk).\nii. Let testResult be ToBoolean(? Call(callbackfn, T, \u00ab kValue, k, O \u00bb)).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/some/callbackfn-return-does-not-change-instance.js", "esid": " sec-%typedarray%.prototype.some", "description": " >The callbackfn return does not change the instance\n", "info": " |22.2.3.25 %TypedArray%.prototype.some ( callbackfn [ , thisArg ] )\n\n%TypedArray%.prototype.some is a distinct function that implements the same\nalgorithm as Array.prototype.some as defined in 22.1.3.24 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\".\n\n22.1.3.24 Array.prototype.some ( callbackfn [ , thisArg ] )\n\n...\n6. Repeat, while k < len\n..\nc. If kPresent is true, then\ni. Let kValue be ? Get(O, Pk).\nii. Let testResult be ToBoolean(? Call(callbackfn, T, \u00ab kValue, k, O \u00bb)).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/some/callbackfn-returns-abrupt.js", "esid": " sec-%typedarray%.prototype.some", "description": " Returns abrupt from callbackfn", "info": " |22.2.3.25 %TypedArray%.prototype.some ( callbackfn [ , thisArg ] )\n\n%TypedArray%.prototype.some is a distinct function that implements the same\nalgorithm as Array.prototype.some as defined in 22.1.3.24 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\".\n\n22.1.3.24 Array.prototype.some ( callbackfn [ , thisArg ] )\n\n...\n6. Repeat, while k < len\n..\nc. If kPresent is true, then\ni. Let kValue be ? Get(O, Pk).\nii. Let testResult be ToBoolean(? Call(callbackfn, T, \u00ab kValue, k, O \u00bb)).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/some/callbackfn-this.js", "esid": " sec-%typedarray%.prototype.some", "description": " >callbackfn `this` value\n", "info": " |22.2.3.25 %TypedArray%.prototype.some ( callbackfn [ , thisArg ] )\n\n%TypedArray%.prototype.some is a distinct function that implements the same\nalgorithm as Array.prototype.some as defined in 22.1.3.24 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\".\n\n22.1.3.24 Array.prototype.some ( callbackfn [ , thisArg ] )\n\n...\n4. If thisArg was supplied, let T be thisArg; else let T be undefined.\n...\n6. Repeat, while k < len\n...\nc. If kPresent is true, then\n...\nii. Let testResult be ToBoolean(? Call(callbackfn, T, \u00ab kValue, k, O \u00bb)).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/some/get-length-uses-internal-arraylength.js", "esid": " sec-%typedarray%.prototype.some", "description": " Get \"length\" uses internal ArrayLength", "info": " |22.2.3.25 %TypedArray%.prototype.some ( callbackfn [ , thisArg ] )\n\n%TypedArray%.prototype.some is a distinct function that implements the same\nalgorithm as Array.prototype.some as defined in 22.1.3.24 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\".\n\n22.1.3.24 Array.prototype.some ( callbackfn [ , thisArg ] )\n\n1. Let O be ? ToObject(this value).\n2. Let len be ? ToLength(? Get(O, \"length\")).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/some/invoked-as-func.js", "esid": " sec-%typedarray%.prototype.some", "description": " Throws a TypeError exception when invoked as a function", "info": " |22.2.3.24 %TypedArray%.prototype.some ( callbackfn [ , thisArg ] )\n\nThis function is not generic. ValidateTypedArray is applied to the this value\nprior to evaluating the algorithm. If its result is an abrupt completion that\nexception is thrown instead of evaluating the algorithm.\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n2. If O does not have a [[TypedArrayName]] internal slot, throw a TypeError\nexception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/some/invoked-as-method.js", "esid": " sec-%typedarray%.prototype.some", "description": " Requires a [[TypedArrayName]] internal slot.", "info": " |22.2.3.24 %TypedArray%.prototype.some ( callbackfn [ , thisArg ] )\n\nThis function is not generic. ValidateTypedArray is applied to the this value\nprior to evaluating the algorithm. If its result is an abrupt completion that\nexception is thrown instead of evaluating the algorithm.\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n2. If O does not have a [[TypedArrayName]] internal slot, throw a TypeError\nexception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/some/length.js", "esid": " sec-%typedarray%.prototype.some", "description": " >%TypedArray%.prototype.some.length is 1.\n", "info": " |%TypedArray%.prototype.some ( callbackfn [ , thisArg ] )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/some/name.js", "esid": " sec-%typedarray%.prototype.some", "description": " >%TypedArray%.prototype.some.name is \"some\".\n", "info": " |%TypedArray%.prototype.some ( callbackfn [ , thisArg ] )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/some/not-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >TypedArray.prototype.some does not implement [[Construct]], is not new-able\n", "info": " |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n", "includes": ["isConstructor.js", "testTypedArray.js"], "features": ["Reflect.construct", "arrow-function", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/some/prop-desc.js", "esid": " sec-%typedarray%.prototype.some", "description": " >\"some\" property of TypedArrayPrototype\n", "info": " |ES6 section 17: Every other data property described in clauses 18 through 26\nand in Annex B.2 has the attributes { [[Writable]]: true,\n[[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/some/returns-false-if-every-cb-returns-false.js", "esid": " sec-%typedarray%.prototype.some", "description": " >Returns false if every callbackfn calls returns a coerced false.\n", "info": " |22.2.3.25 %TypedArray%.prototype.some ( callbackfn [ , thisArg ] )\n\n%TypedArray%.prototype.some is a distinct function that implements the same\nalgorithm as Array.prototype.some as defined in 22.1.3.24 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\".\n\n22.1.3.24 Array.prototype.some ( callbackfn [ , thisArg ] )\n\n...\n7. Return true.\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/some/returns-true-if-any-cb-returns-true.js", "esid": " sec-%typedarray%.prototype.some", "description": " >Returns true if any callbackfn returns a coerced true.\n", "info": " |22.2.3.25 %TypedArray%.prototype.some ( callbackfn [ , thisArg ] )\n\n%TypedArray%.prototype.some is a distinct function that implements the same\nalgorithm as Array.prototype.some as defined in 22.1.3.24 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\".\n\n22.1.3.24 Array.prototype.some ( callbackfn [ , thisArg ] )\n\n...\n6. Repeat, while k < len\n...\nc. If kPresent is true, then\ni. Let kValue be ? Get(O, Pk).\nii. Let testResult be ToBoolean(? Call(callbackfn, T, \u00ab kValue, k, O \u00bb)).\niii. If testResult is true, return true.\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/some/this-is-not-object.js", "esid": " sec-%typedarray%.prototype.some", "description": " Throws a TypeError exception when `this` is not Object", "info": " |22.2.3.25 %TypedArray%.prototype.some ( callbackfn [ , thisArg ] )\n\nThis function is not generic. ValidateTypedArray is applied to the this value\nprior to evaluating the algorithm. If its result is an abrupt completion that\nexception is thrown instead of evaluating the algorithm.\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/some/this-is-not-typedarray-instance.js", "esid": " sec-%typedarray%.prototype.some", "description": " >Throws a TypeError exception when `this` is not a TypedArray instance\n", "info": " |22.2.3.25 %TypedArray%.prototype.some ( callbackfn [ , thisArg ] )\n\nThis function is not generic. ValidateTypedArray is applied to the this value\nprior to evaluating the algorithm. If its result is an abrupt completion that\nexception is thrown instead of evaluating the algorithm.\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n2. If O does not have a [[TypedArrayName]] internal slot, throw a TypeError\nexception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/some/values-are-not-cached.js", "esid": " sec-%typedarray%.prototype.some", "description": " >Integer indexed values are not cached before iteration\n", "info": " |22.2.3.25 %TypedArray%.prototype.some ( callbackfn [ , thisArg ] )\n\n%TypedArray%.prototype.some is a distinct function that implements the same\nalgorithm as Array.prototype.some as defined in 22.1.3.24 except that the this\nobject's [[ArrayLength]] internal slot is accessed in place of performing a\n[[Get]] of \"length\".\n\n22.1.3.24 Array.prototype.some ( callbackfn [ , thisArg ] )\n\n...\n6. Repeat, while k < len\n..\nc. If kPresent is true, then\ni. Let kValue be ? Get(O, Pk).\nii. Let testResult be ToBoolean(? Call(callbackfn, T, \u00ab kValue, k, O \u00bb)).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/sort/not-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >TypedArray.prototype.sort does not implement [[Construct]], is not new-able\n", "info": " |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n", "includes": ["isConstructor.js", "testTypedArray.js"], "features": ["Reflect.construct", "arrow-function", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/sort/this-is-not-object.js", "esid": " sec-%typedarray%.prototype.sort", "description": " Throws a TypeError exception when `this` is not Object", "info": " |22.2.3.26 %TypedArray%.prototype.sort ( comparefn )\n\n1. Let obj be the this value as the argument.\n2. Let buffer be ? ValidateTypedArray(obj).\n...\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/sort/this-is-not-typedarray-instance.js", "esid": " sec-%typedarray%.prototype.sort", "description": " >Throws a TypeError exception when `this` is not a TypedArray instance\n", "info": " |22.2.3.26 %TypedArray%.prototype.sort ( comparefn )\n\n1. Let obj be the this value as the argument.\n2. Let buffer be ? ValidateTypedArray(obj).\n...\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n2. If O does not have a [[TypedArrayName]] internal slot, throw a TypeError\nexception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/subarray/invoked-as-func.js", "esid": " sec-%typedarray%.prototype.subarray", "description": " Throws a TypeError exception when invoked as a function", "info": " |22.2.3.26 %TypedArray%.prototype.subarray( [ begin [ , end ] ] )\n\n1. Let O be the this value.\n2. If Type(O) is not Object, throw a TypeError exception.\n3. If O does not have a [[TypedArrayName]] internal slot, throw a TypeError\nexception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/subarray/invoked-as-method.js", "esid": " sec-%typedarray%.prototype.subarray", "description": " Requires a [[TypedArrayName]] internal slot.", "info": " |22.2.3.26 %TypedArray%.prototype.subarray( [ begin [ , end ] ] )\n\n1. Let O be the this value.\n2. If Type(O) is not Object, throw a TypeError exception.\n3. If O does not have a [[TypedArrayName]] internal slot, throw a TypeError\nexception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/subarray/length.js", "esid": " sec-%typedarray%.prototype.subarray", "description": " >%TypedArray%.prototype.subarray.length is 2.\n", "info": " |%TypedArray%.prototype.subarray( [ begin [ , end ] ] )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/subarray/minus-zero.js", "esid": " sec-%typedarray%.prototype.subarray", "description": " -0 values on begin and end", "info": " |22.2.3.27 %TypedArray%.prototype.subarray( begin , end )\n", "includes": ["testTypedArray.js", "compareArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/subarray/name.js", "esid": " sec-%typedarray%.prototype.subarray", "description": " >%TypedArray%.prototype.subarray.name is \"subarray\".\n", "info": " |%TypedArray%.prototype.subarray( [ begin [ , end ] ] )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/subarray/not-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >TypedArray.prototype.subarray does not implement [[Construct]], is not new-able\n", "info": " |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n", "includes": ["isConstructor.js", "testTypedArray.js"], "features": ["Reflect.construct", "arrow-function", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/subarray/prop-desc.js", "esid": " sec-%typedarray%.prototype.subarray", "description": " >\"subarray\" property of TypedArrayPrototype\n", "info": " |ES6 section 17: Every other data property described in clauses 18 through 26\nand in Annex B.2 has the attributes { [[Writable]]: true,\n[[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/subarray/result-is-new-instance-from-same-ctor.js", "esid": " sec-%typedarray%.prototype.subarray", "description": " Returns a new instance from the same constructor", "info": " |22.2.3.27 %TypedArray%.prototype.subarray( begin , end )\n\n...\n17. Return ? TypedArraySpeciesCreate(O, argumentsList).\n", "includes": ["testTypedArray.js", "compareArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/subarray/result-is-new-instance-with-shared-buffer.js", "esid": " sec-%typedarray%.prototype.subarray", "description": " Returns a new instance sharing the same buffer", "info": " |22.2.3.27 %TypedArray%.prototype.subarray( begin , end )\n\n...\n17. Return ? TypedArraySpeciesCreate(O, argumentsList).\n", "includes": ["testTypedArray.js", "compareArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/subarray/results-with-different-length.js", "esid": " sec-%typedarray%.prototype.subarray", "description": " Subarray may return a new instance with a smaller length", "info": " |22.2.3.27 %TypedArray%.prototype.subarray( begin , end )\n\n...\n17. Return ? TypedArraySpeciesCreate(O, argumentsList).\n", "includes": ["testTypedArray.js", "compareArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/subarray/return-abrupt-from-begin-symbol.js", "esid": " sec-%typedarray%.prototype.subarray", "description": " Return abrupt from ToInteger(begin), begin is symbol", "info": " |22.2.3.27 %TypedArray%.prototype.subarray( begin , end )\n\n...\n7. Let relativeBegin be ? ToInteger(begin).\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/subarray/return-abrupt-from-end-symbol.js", "esid": " sec-%typedarray%.prototype.subarray", "description": " Return abrupt from ToInteger(end), end is symbol", "info": " |22.2.3.27 %TypedArray%.prototype.subarray( begin , end )\n\n...\n9. If end is undefined, let relativeEnd be srcLength; else, let relativeEnd\nbe ? ToInteger(end).\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/subarray/speciesctor-get-species-use-default-ctor.js", "esid": " sec-%typedarray%.prototype.subarray", "description": " >Use defaultConstructor if @@species is either undefined or null\n", "info": " |22.2.3.27 %TypedArray%.prototype.subarray( begin , end )\n\n...\n17. Return ? TypedArraySpeciesCreate(O, argumentsList).\n\n22.2.4.7 TypedArraySpeciesCreate ( exemplar, argumentList )\n\n...\n3. Let constructor be ? SpeciesConstructor(exemplar, defaultConstructor).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n...\n5. Let S be ? Get(C, @@species).\n6. If S is either undefined or null, return defaultConstructor.\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol.species", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/subarray/this-is-not-object.js", "esid": " sec-%typedarray%.prototype.subarray", "description": " Throws a TypeError exception when `this` is not Object", "info": " |22.2.3.27 %TypedArray%.prototype.subarray( begin , end )\n\nThe following steps are taken:\n\n1. Let O be the this value.\n2. If Type(O) is not Object, throw a TypeError exception.\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/subarray/this-is-not-typedarray-instance.js", "esid": " sec-%typedarray%.prototype.subarray", "description": " >Throws a TypeError exception when `this` is not a TypedArray instance\n", "info": " |22.2.3.9 %TypedArray%.prototype.subarray( begin , end )\n\nThe following steps are taken:\n\n1. Let O be the this value.\n2. If Type(O) is not Object, throw a TypeError exception.\n3. If O does not have a [[TypedArrayName]] internal slot, throw a TypeError\nexception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/subarray/tointeger-begin.js", "esid": " sec-%typedarray%.prototype.subarray", "description": " ToInteger(begin)", "info": " |22.2.3.27 %TypedArray%.prototype.subarray( begin , end )\n\n...\n7. Let relativeBegin be ? ToInteger(begin).\n...\n", "includes": ["testTypedArray.js", "compareArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/toLocaleString/get-length-uses-internal-arraylength.js", "esid": " sec-%typedarray%.prototype.tolocalestring", "description": "  Get \"length\" uses internal ArrayLength", "info": " |22.2.3.28 %TypedArray%.prototype.toLocaleString ([ reserved1 [ , reserved2 ] ])\n\n%TypedArray%.prototype.toLocaleString is a distinct function that implements\nthe same algorithm as Array.prototype.toLocaleString as defined in 22.1.3.27\nexcept that the this object's [[ArrayLength]] internal slot is accessed in\nplace of performing a [[Get]] of \"length\".\n\n22.1.3.27 Array.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )\n\n1. Let array be ? ToObject(this value).\n2.Let len be ? ToLength(? Get(array, \"length\")).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/toLocaleString/invoked-as-func.js", "esid": " sec-%typedarray%.prototype.tolocalestring", "description": " Throws a TypeError exception when invoked as a function", "info": " |22.2.3.27 %TypedArray%.prototype.toLocaleString ([ reserved1 [ , reserved2 ] ])\n\n...\n\nThis function is not generic. ValidateTypedArray is applied to the this\nvalue prior to evaluating the algorithm. If its result is an abrupt\ncompletion that exception is thrown instead of evaluating the algorithm.\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n2. If O does not have a [[TypedArrayName]] internal slot, throw a TypeError\nexception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/toLocaleString/length.js", "esid": " sec-%typedarray%.prototype.tolocalestring", "description": " >%TypedArray%.prototype.toLocaleString.length is 0.\n", "info": " |%TypedArray%.prototype.toLocaleString ([ reserved1 [ , reserved2 ] ])\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/toLocaleString/name.js", "esid": " sec-%typedarray%.prototype.tolocalestring", "description": " >%TypedArray%.prototype.toLocaleString.name is \"toLocaleString\".\n", "info": " |%TypedArray%.prototype.toLocaleString ([ reserved1 [ , reserved2 ] ])\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/toLocaleString/not-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >TypedArray.prototype.toLocaleString does not implement [[Construct]], is not new-able\n", "info": " |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n", "includes": ["isConstructor.js", "testTypedArray.js"], "features": ["Reflect.construct", "arrow-function", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/toString/not-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >TypedArray.prototype.toString does not implement [[Construct]], is not new-able\n", "info": " |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n", "includes": ["isConstructor.js", "testTypedArray.js"], "features": ["Reflect.construct", "arrow-function", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/values/invoked-as-func.js", "esid": " sec-%typedarray%.prototype.values", "description": " Throws a TypeError exception when invoked as a function", "info": " |22.2.3.29 %TypedArray%.prototype.values ( )\n\n1. Let O be the this value.\n2. Let valid be ValidateTypedArray(O).\n3. ReturnIfAbrupt(valid).\n...\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n2. If O does not have a [[TypedArrayName]] internal slot, throw a TypeError\nexception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/values/invoked-as-method.js", "esid": " sec-%typedarray%.prototype.values", "description": " Requires a [[TypedArrayName]] internal slot.", "info": " |22.2.3.29 %TypedArray%.prototype.values ( )\n\n1. Let O be the this value.\n2. Let valid be ValidateTypedArray(O).\n3. ReturnIfAbrupt(valid).\n...\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n2. If O does not have a [[TypedArrayName]] internal slot, throw a TypeError\nexception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/values/iter-prototype.js", "esid": " sec-%typedarray%.prototype.values", "description": " >The prototype of the returned iterator is ArrayIteratorPrototype\n", "info": " |22.2.3.30 %TypedArray%.prototype.values ( )\n\n...\n3. Return CreateArrayIterator(O, \"value\").\n", "includes": ["testTypedArray.js"], "features": ["Symbol.iterator", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/values/length.js", "esid": " sec-%typedarray%.prototype.values", "description": " >%TypedArray%.prototype.values.length is 0.\n", "info": " |%TypedArray%.prototype.values ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form \u201c...name\u201d\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/values/name.js", "esid": " sec-%typedarray%.prototype.values", "description": " >%TypedArray%.prototype.values.name is \"values\".\n", "info": " |%TypedArray%.prototype.values ( )\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/values/not-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >TypedArray.prototype.values does not implement [[Construct]], is not new-able\n", "info": " |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n", "includes": ["isConstructor.js", "testTypedArray.js"], "features": ["Reflect.construct", "arrow-function", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/values/prop-desc.js", "esid": " sec-%typedarray%.prototype.values", "description": " >\"values\" property of TypedArrayPrototype\n", "info": " |ES6 section 17: Every other data property described in clauses 18 through\n26 and in Annex B.2 has the attributes { [[Writable]]: true,\n[[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/values/return-itor.js", "esid": " sec-%typedarray%.prototype.values", "description": " Return an iterator for the values.", "info": " |22.2.3.30 %TypedArray%.prototype.values ( )\n\n...\n3. Return CreateArrayIterator(O, \"value\").\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/values/this-is-not-object.js", "esid": " sec-%typedarray%.prototype.values", "description": " Throws a TypeError exception when `this` is not Object", "info": " |22.2.3.30 %TypedArray%.prototype.values ( )\n\nThe following steps are taken:\n\n1. Let O be the this value.\n2. Perform ? ValidateTypedArray(O).\n...\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype/values/this-is-not-typedarray-instance.js", "esid": " sec-%typedarray%.prototype.values", "description": " >Throws a TypeError exception when `this` is not a TypedArray instance\n", "info": " |22.2.3.30 %TypedArray%.prototype.values ( )\n\nThe following steps are taken:\n\n1. Let O be the this value.\n2. Perform ? ValidateTypedArray(O).\n...\n\n22.2.3.5.1 Runtime Semantics: ValidateTypedArray ( O )\n\n1. If Type(O) is not Object, throw a TypeError exception.\n2. If O does not have a [[TypedArrayName]] internal slot, throw a TypeError\nexception.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArray/prototype.js", "esid": " sec-%typedarray%", "description": " >\"prototype\" property of TypedArray\n", "info": " |22.2.2.3 %TypedArray%.prototype\n\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]:\nfalse, [[Configurable]]: false }.\n", "includes": ["propertyHelper.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/Float32Array/length.js", "esid": " sec-typedarray-constructors", "description": " Float32Array.length property descriptor", "info": " |The TypedArray Constructors\n\nThe length property of the TypedArray constructor function is 3.\n\n17 ECMAScript Standard Built-in Objects\n\n...\n\nUnless otherwise specified, the length property of a built-in function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/Float32Array/name.js", "esid": " sec-properties-of-the-typedarray-constructors", "description": " >Float32Array.name is \"Float32Array\".\n", "info": " |Each TypedArray constructor has a name property whose value is the\nString value of the constructor name specified for it in Table 49.\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/Float32Array/prototype/proto.js", "esid": " sec-properties-of-typedarray-prototype-objects", "description": " >The prototype of Float32Array.prototype is %TypedArrayPrototype%.\n", "info": " |The value of the [[Prototype]] internal slot of a TypedArray prototype\nobject is the intrinsic object %TypedArrayPrototype% (22.2.3).\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/Float64Array/length.js", "esid": " sec-typedarray-constructors", "description": " Float64Array.length property descriptor", "info": " |The TypedArray Constructors\n\nThe length property of the TypedArray constructor function is 3.\n\n17 ECMAScript Standard Built-in Objects\n\n...\n\nUnless otherwise specified, the length property of a built-in function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/Float64Array/name.js", "esid": " sec-properties-of-the-typedarray-constructors", "description": " >Float64Array.name is \"Float64Array\".\n", "info": " |Each TypedArray constructor has a name property whose value is the\nString value of the constructor name specified for it in Table 49.\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/Float64Array/prototype/proto.js", "esid": " sec-properties-of-typedarray-prototype-objects", "description": " >The prototype of Float64Array.prototype is %TypedArrayPrototype%.\n", "info": " |The value of the [[Prototype]] internal slot of a TypedArray prototype\nobject is the intrinsic object %TypedArrayPrototype% (22.2.3).\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/Int16Array/length.js", "esid": " sec-typedarray-constructors", "description": " Int16Array.length property descriptor", "info": " |The TypedArray Constructors\n\nThe length property of the TypedArray constructor function is 3.\n\n17 ECMAScript Standard Built-in Objects\n\n...\n\nUnless otherwise specified, the length property of a built-in function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/Int16Array/name.js", "esid": " sec-properties-of-the-typedarray-constructors", "description": " >Int16Array.name is \"Int16Array\".\n", "info": " |Each TypedArray constructor has a name property whose value is the\nString value of the constructor name specified for it in Table 49.\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/Int16Array/prototype/proto.js", "esid": " sec-properties-of-typedarray-prototype-objects", "description": " >The prototype of Int16Array.prototype is %TypedArrayPrototype%.\n", "info": " |The value of the [[Prototype]] internal slot of a TypedArray prototype\nobject is the intrinsic object %TypedArrayPrototype% (22.2.3).\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/Int32Array/length.js", "esid": " sec-typedarray-constructors", "description": " Int32Array.length property descriptor", "info": " |The TypedArray Constructors\n\nThe length property of the TypedArray constructor function is 3.\n\n17 ECMAScript Standard Built-in Objects\n\n...\n\nUnless otherwise specified, the length property of a built-in function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/Int32Array/name.js", "esid": " sec-properties-of-the-typedarray-constructors", "description": " >Int32Array.name is \"Int32Array\".\n", "info": " |Each TypedArray constructor has a name property whose value is the\nString value of the constructor name specified for it in Table 49.\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/Int32Array/prototype/proto.js", "esid": " sec-properties-of-typedarray-prototype-objects", "description": " >The prototype of Int32Array.prototype is %TypedArrayPrototype%.\n", "info": " |The value of the [[Prototype]] internal slot of a TypedArray prototype\nobject is the intrinsic object %TypedArrayPrototype% (22.2.3).\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/Int8Array/length.js", "esid": " sec-typedarray-constructors", "description": " Int8Array.length property descriptor", "info": " |The TypedArray Constructors\n\nThe length property of the TypedArray constructor function is 3.\n\n17 ECMAScript Standard Built-in Objects\n\n...\n\nUnless otherwise specified, the length property of a built-in function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/Int8Array/name.js", "esid": " sec-properties-of-the-typedarray-constructors", "description": " >Int8Array.name is \"Int8Array\".\n", "info": " |Each TypedArray constructor has a name property whose value is the\nString value of the constructor name specified for it in Table 49.\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/Int8Array/prototype/proto.js", "esid": " sec-properties-of-typedarray-prototype-objects", "description": " >The prototype of Int8Array.prototype is %TypedArrayPrototype%.\n", "info": " |The value of the [[Prototype]] internal slot of a TypedArray prototype\nobject is the intrinsic object %TypedArrayPrototype% (22.2.3).\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/Uint16Array/length.js", "esid": " sec-typedarray-constructors", "description": " Uint16Array.length property descriptor", "info": " |The TypedArray Constructors\n\nThe length property of the TypedArray constructor function is 3.\n\n17 ECMAScript Standard Built-in Objects\n\n...\n\nUnless otherwise specified, the length property of a built-in function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/Uint16Array/name.js", "esid": " sec-properties-of-the-typedarray-constructors", "description": " >Uint16Array.name is \"Uint16Array\".\n", "info": " |Each TypedArray constructor has a name property whose value is the\nString value of the constructor name specified for it in Table 49.\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/Uint16Array/prototype/proto.js", "esid": " sec-properties-of-typedarray-prototype-objects", "description": " >The prototype of Uint16Array.prototype is %TypedArrayPrototype%.\n", "info": " |The value of the [[Prototype]] internal slot of a TypedArray prototype\nobject is the intrinsic object %TypedArrayPrototype% (22.2.3).\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/Uint32Array/length.js", "esid": " sec-typedarray-constructors", "description": " Uint32Array.length property descriptor", "info": " |The TypedArray Constructors\n\nThe length property of the TypedArray constructor function is 3.\n\n17 ECMAScript Standard Built-in Objects\n\n...\n\nUnless otherwise specified, the length property of a built-in function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/Uint32Array/name.js", "esid": " sec-properties-of-the-typedarray-constructors", "description": " >Uint32Array.name is \"Uint32Array\".\n", "info": " |Each TypedArray constructor has a name property whose value is the\nString value of the constructor name specified for it in Table 49.\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/Uint32Array/prototype/proto.js", "esid": " sec-properties-of-typedarray-prototype-objects", "description": " >The prototype of Uint32Array.prototype is %TypedArrayPrototype%.\n", "info": " |The value of the [[Prototype]] internal slot of a TypedArray prototype\nobject is the intrinsic object %TypedArrayPrototype% (22.2.3).\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/Uint8Array/length.js", "esid": " sec-typedarray-constructors", "description": " Uint8Array.length property descriptor", "info": " |The TypedArray Constructors\n\nThe length property of the TypedArray constructor function is 3.\n\n17 ECMAScript Standard Built-in Objects\n\n...\n\nUnless otherwise specified, the length property of a built-in function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/Uint8Array/name.js", "esid": " sec-properties-of-the-typedarray-constructors", "description": " >Uint8Array.name is \"Uint8Array\".\n", "info": " |Each TypedArray constructor has a name property whose value is the\nString value of the constructor name specified for it in Table 49.\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/Uint8Array/prototype/proto.js", "esid": " sec-properties-of-typedarray-prototype-objects", "description": " >The prototype of Uint8Array.prototype is %TypedArrayPrototype%.\n", "info": " |The value of the [[Prototype]] internal slot of a TypedArray prototype\nobject is the intrinsic object %TypedArrayPrototype% (22.2.3).\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/Uint8ClampedArray/length.js", "esid": " sec-typedarray-constructors", "description": " Uint8ClampedArray.length property descriptor", "info": " |The TypedArray Constructors\n\nThe length property of the TypedArray constructor function is 3.\n\n17 ECMAScript Standard Built-in Objects\n\n...\n\nUnless otherwise specified, the length property of a built-in function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/Uint8ClampedArray/name.js", "esid": " sec-properties-of-the-typedarray-constructors", "description": " >Uint8ClampedArray.name is \"Uint8ClampedArray\".\n", "info": " |Each TypedArray constructor has a name property whose value is the\nString value of the constructor name specified for it in Table 49.\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/Uint8ClampedArray/prototype/proto.js", "esid": " sec-properties-of-typedarray-prototype-objects", "description": " >The prototype of Uint8ClampedArray.prototype is %TypedArrayPrototype%.\n", "info": " |The value of the [[Prototype]] internal slot of a TypedArray prototype\nobject is the intrinsic object %TypedArrayPrototype% (22.2.3).\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/byteoffset-is-symbol-throws.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Return abrupt from parsing integer value from byteOffset as a symbol\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n...\n7. Let offset be ? ToInteger(byteOffset).\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/length-access-throws.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Returns abrupt from ToLength(length)\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n...\n14. Else,\na. Let newLength be ? ToLength(length).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/length-is-symbol-throws.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >Throws a TypeError if length is a Symbol\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has an [[ArrayBufferData]] internal slot.\n\n...\n14. Else,\na. Let newLength be ? ToLength(length).\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/buffer-arg/new-instance-extensibility.js", "esid": " sec-typedarray-buffer-byteoffset-length", "description": " >The new typedArray instance from a buffer argument is extensible\n", "info": " |22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )\n\n...\n4. Let O be ? AllocateTypedArray(constructorName, NewTarget,\n\"%TypedArrayPrototype%\").\n...\n\n22.2.4.2.1 Runtime Semantics: AllocateTypedArray (constructorName, newTarget,\ndefaultProto [ , length ])\n\n...\n2. Let obj be IntegerIndexedObjectCreate(proto, \u00ab [[ViewedArrayBuffer]],\n[[TypedArrayName]], [[ByteLength]], [[ByteOffset]], [[ArrayLength]] \u00bb).\n...\n\n9.4.5.7 IntegerIndexedObjectCreate (prototype, internalSlotsList)\n\n...\n11. Set the [[Extensible]] internal slot of A to true.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/length-arg/is-symbol-throws.js", "esid": " sec-typedarray-length", "description": " >If length is a Symbol, throw a TypeError exception.\n", "info": " |22.2.4.2 TypedArray ( length )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is not Object.\n\n...\n4. Let numberLength be ? ToNumber(length).\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/length-arg/new-instance-extensibility.js", "esid": " sec-typedarray-length", "description": " >The new typedArray instance from a length argument is extensible\n", "info": " |22.2.4.2 TypedArray ( length )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is not Object.\n\n...\n8. Return ? AllocateTypedArray(constructorName, NewTarget,\n%TypedArrayPrototype%, elementLength).\n\n22.2.4.2.1 Runtime Semantics: AllocateTypedArray (constructorName, newTarget,\ndefaultProto [ , length ])\n\n...\n2. Let obj be IntegerIndexedObjectCreate(proto, \u00ab [[ViewedArrayBuffer]],\n[[TypedArrayName]], [[ByteLength]], [[ByteOffset]], [[ArrayLength]] \u00bb).\n...\n\n9.4.5.7 IntegerIndexedObjectCreate (prototype, internalSlotsList)\n\n...\n11. Set the [[Extensible]] internal slot of A to true.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/no-args/new-instance-extensibility.js", "esid": " sec-typedarray", "description": " >The new typedArray instance is extensible\n", "info": " |22.2.4.1 TypedArray( )\n\nThis description applies only if the TypedArray function is called with no\narguments.\n\n...\n3. Return ? AllocateTypedArray(constructorName, NewTarget,\n%TypedArrayPrototype%, 0).\n\n22.2.4.2.1 Runtime Semantics: AllocateTypedArray (constructorName, newTarget,\ndefaultProto [ , length ])\n\n...\n2. Let obj be IntegerIndexedObjectCreate(proto, \u00ab [[ViewedArrayBuffer]],\n[[TypedArrayName]], [[ByteLength]], [[ByteOffset]], [[ArrayLength]] \u00bb).\n...\n\n9.4.5.7 IntegerIndexedObjectCreate (prototype, internalSlotsList)\n\n...\n11. Set the [[Extensible]] internal slot of A to true.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/object-arg/conversion-operation-consistent-nan.js", "esid": " sec-typedarray-object", "description": " Consistent canonicalization of NaN values", "info": " |22.2.4.4 TypedArray ( object )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject does not have either a [[TypedArrayName]] or an [[ArrayBufferData]]\ninternal slot.\n\n...\n9. Repeat, while k < len\n...\nc. Perform ? Set(O, Pk, kValue, true).\n...\n\nIntegerIndexedElementSet ( O, index, value )\n\nAssert: O is an Integer-Indexed exotic object.\nIf O.[[ContentType]] is BigInt, let numValue be ? ToBigInt(value).\nOtherwise, let numValue be ? ToNumber(value).\nLet buffer be O.[[ViewedArrayBuffer]].\nIf IsDetachedBuffer(buffer) is false and ! IsValidIntegerIndex(O, index) is true, then\nLet offset be O.[[ByteOffset]].\nLet arrayTypeName be the String value of O.[[TypedArrayName]].\nLet elementSize be the Element Size value specified in Table 62 for arrayTypeName.\nLet indexedPosition be (\u211d(index) \u00d7 elementSize) + offset.\nLet elementType be the Element Type value in Table 62 for arrayTypeName.\nPerform SetValueInBuffer(buffer, indexedPosition, elementType, numValue, true, Unordered).\nReturn NormalCompletion(undefined).\n\n24.1.1.6 SetValueInBuffer ( arrayBuffer, byteIndex, type, value [ ,\nisLittleEndian ] )\n\n...\n8. If type is \"Float32\", then\na. Set rawBytes to a List containing the 4 bytes that are the result\nof converting value to IEEE 754-2008 binary32 format using \u201cRound to\nnearest, ties to even\u201d rounding mode. If isLittleEndian is false, the\nbytes are arranged in big endian order. Otherwise, the bytes are\narranged in little endian order. If value is NaN, rawValue may be set\nto any implementation chosen IEEE 754-2008 binary64 format Not-a-Number\nencoding. An implementation must always choose the same encoding for\neach implementation distinguishable NaN value.\n9. Else, if type is \"Float64\", then\na. Set rawBytes to a List containing the 8 bytes that are the IEEE\n754-2008 binary64 format encoding of value. If isLittleEndian is false,\nthe bytes are arranged in big endian order. Otherwise, the bytes are\narranged in little endian order. If value is NaN, rawValue may be set\nto any implementation chosen IEEE 754-2008 binary32 format Not-a-Number\nencoding. An implementation must always choose the same encoding for\neach implementation distinguishable NaN value.\n...\n", "includes": ["nans.js", "testTypedArray.js", "compareArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/object-arg/conversion-operation.js", "esid": " sec-typedarray-object", "description": " >Verify conversion values on returned instance\n", "info": " |22.2.4.4 TypedArray ( object )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject does not have either a [[TypedArrayName]] or an [[ArrayBufferData]]\ninternal slot.\n\n...\n9. Repeat, while k < len\n...\nc. Perform ? Set(O, Pk, kValue, true).\n...\n\nIntegerIndexedElementSet ( O, index, value )\n\nAssert: O is an Integer-Indexed exotic object.\nIf O.[[ContentType]] is BigInt, let numValue be ? ToBigInt(value).\nOtherwise, let numValue be ? ToNumber(value).\nLet buffer be O.[[ViewedArrayBuffer]].\nIf IsDetachedBuffer(buffer) is false and ! IsValidIntegerIndex(O, index) is true, then\nLet offset be O.[[ByteOffset]].\nLet arrayTypeName be the String value of O.[[TypedArrayName]].\nLet elementSize be the Element Size value specified in Table 62 for arrayTypeName.\nLet indexedPosition be (\u211d(index) \u00d7 elementSize) + offset.\nLet elementType be the Element Type value in Table 62 for arrayTypeName.\nPerform SetValueInBuffer(buffer, indexedPosition, elementType, numValue, true, Unordered).\nReturn NormalCompletion(undefined).\n\n24.1.1.6 SetValueInBuffer ( arrayBuffer, byteIndex, type, value [ ,\nisLittleEndian ] )\n\n...\n8. If type is \"Float32\", then\n...\n9. Else, if type is \"Float64\", then\n...\n10. Else,\n...\nb. Let convOp be the abstract operation named in the Conversion Operation\ncolumn in Table 50 for Element Type type.\nc. Let intValue be convOp(value).\nd. If intValue \u2265 0, then\n...\ne. Else,\n...\n", "includes": ["byteConversionValues.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/object-arg/iterator-is-null-as-array-like.js", "esid": " sec-typedarray-object", "description": " >If object's @@iterator is `null`, it is considered an array-like object.\n", "info": " |TypedArray ( object )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject does not have either a [[TypedArrayName]] or an [[ArrayBufferData]]\ninternal slot.\n\n[...]\n5. Let usingIterator be ? GetMethod(object, @@iterator).\n6. If usingIterator is not undefined, then\n[...]\n7. NOTE: object is not an Iterable so assume it is already an array-like object.\n[...]\n\nGetMethod ( V, P )\n\n[...]\n2. Let func be ? GetV(V, P).\n3. If func is either undefined or null, return undefined.\n", "includes": ["testTypedArray.js"], "features": ["Symbol.iterator", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/object-arg/length-is-symbol-throws.js", "esid": " sec-typedarray-object", "description": " >Return abrupt from length property as a Symbol on the object argument\n", "info": " |22.2.4.4 TypedArray ( object )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject does not have either a [[TypedArrayName]] or an [[ArrayBufferData]]\ninternal slot.\n\n...\n5. Let len be ? ToLength(? Get(arrayLike, \"length\")).\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/object-arg/length-throws.js", "esid": " sec-typedarray-object", "description": " >Return abrupt from getting length property on the object argument\n", "info": " |22.2.4.4 TypedArray ( object )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject does not have either a [[TypedArrayName]] or an [[ArrayBufferData]]\ninternal slot.\n\n...\n5. Let len be ? ToLength(? Get(arrayLike, \"length\")).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/object-arg/new-instance-extensibility.js", "esid": " sec-typedarray-object", "description": " >The new typedArray instance from an object argument is extensible\n", "info": " |22.2.4.4 TypedArray ( object )\n\n...\n4. Let O be ? AllocateTypedArray(constructorName, NewTarget,\n\"%TypedArrayPrototype%\").\n...\n\n22.2.4.2.1 Runtime Semantics: AllocateTypedArray (constructorName, newTarget,\ndefaultProto [ , length ])\n\n...\n2. Let obj be IntegerIndexedObjectCreate(proto, \u00ab [[ViewedArrayBuffer]],\n[[TypedArrayName]], [[ByteLength]], [[ByteOffset]], [[ArrayLength]] \u00bb).\n...\n\n9.4.5.7 IntegerIndexedObjectCreate (prototype, internalSlotsList)\n\n...\n11. Set the [[Extensible]] internal slot of A to true.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/object-arg/returns.js", "esid": " sec-typedarray-object", "description": " >Return typedArray from object argument\n", "info": " |22.2.4.4 TypedArray ( object )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject does not have either a [[TypedArrayName]] or an [[ArrayBufferData]]\ninternal slot.\n\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/object-arg/throws-from-property.js", "esid": " sec-typedarray-object", "description": " >Return abrupt from getting object property\n", "info": " |22.2.4.4 TypedArray ( object )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject does not have either a [[TypedArrayName]] or an [[ArrayBufferData]]\ninternal slot.\n\n...\n8. Repeat, while k < len\n...\nb. Let kValue be ? Get(arrayLike, Pk).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/object-arg/throws-setting-obj-tostring.js", "esid": " sec-typedarray-object", "description": " >Return abrupt from toString() when setting a property\n", "info": " |22.2.4.4 TypedArray ( object )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject does not have either a [[TypedArrayName]] or an [[ArrayBufferData]]\ninternal slot.\n\n...\n8. Repeat, while k < len\n...\nb. Let kValue be ? Get(arrayLike, Pk).\nc. Perform ? Set(O, Pk, kValue, true).\n...\n\n9.4.5.5 [[Set]] ( P, V, Receiver)\n\n...\n2. If Type(P) is String and if SameValue(O, Receiver) is true, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\ni. Perform ? IntegerIndexedElementSet(O, numericIndex, V).\nii. Return true.\n...\n\nIntegerIndexedElementSet ( O, index, value )\n\nAssert: O is an Integer-Indexed exotic object.\nIf O.[[ContentType]] is BigInt, let numValue be ? ToBigInt(value).\nOtherwise, let numValue be ? ToNumber(value).\nLet buffer be O.[[ViewedArrayBuffer]].\nIf IsDetachedBuffer(buffer) is false and ! IsValidIntegerIndex(O, index) is true, then\nLet offset be O.[[ByteOffset]].\nLet arrayTypeName be the String value of O.[[TypedArrayName]].\nLet elementSize be the Element Size value specified in Table 62 for arrayTypeName.\nLet indexedPosition be (\u211d(index) \u00d7 elementSize) + offset.\nLet elementType be the Element Type value in Table 62 for arrayTypeName.\nPerform SetValueInBuffer(buffer, indexedPosition, elementType, numValue, true, Unordered).\nReturn NormalCompletion(undefined).\n\nToNumber ( argument )\n\nObject, Apply the following steps:\n\n1. Let primValue be ? ToPrimitive(argument, hint Number).\n2. Return ? ToNumber(primValue).\n\n7.1.1 ToPrimitive ( input [ , PreferredType ] )\n\n...\n4. Let exoticToPrim be ? GetMethod(input, @@toPrimitive).\n5. If exoticToPrim is not undefined, then\na. Let result be ? Call(exoticToPrim, input, \u00ab hint \u00bb).\nb. If Type(result) is not Object, return result.\nc. Throw a TypeError exception.\n...\n7. Return ? OrdinaryToPrimitive(input, hint).\n\nOrdinaryToPrimitive\n\n...\n5. For each name in methodNames in List order, do\na. Let method be ? Get(O, name).\nb. If IsCallable(method) is true, then\ni. Let result be ? Call(method, O).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/object-arg/throws-setting-obj-valueof-typeerror.js", "esid": " sec-typedarray-object", "description": " >Throw TypeError from OrdinaryToPrimitive when setting a property\n", "info": " |22.2.4.4 TypedArray ( object )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject does not have either a [[TypedArrayName]] or an [[ArrayBufferData]]\ninternal slot.\n\n...\n8. Repeat, while k < len\n...\nb. Let kValue be ? Get(arrayLike, Pk).\nc. Perform ? Set(O, Pk, kValue, true).\n...\n\n9.4.5.5 [[Set]] ( P, V, Receiver)\n\n...\n2. If Type(P) is String and if SameValue(O, Receiver) is true, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\ni. Perform ? IntegerIndexedElementSet(O, numericIndex, V).\nii. Return true.\n...\n\nIntegerIndexedElementSet ( O, index, value )\n\nAssert: O is an Integer-Indexed exotic object.\nIf O.[[ContentType]] is BigInt, let numValue be ? ToBigInt(value).\nOtherwise, let numValue be ? ToNumber(value).\nLet buffer be O.[[ViewedArrayBuffer]].\nIf IsDetachedBuffer(buffer) is false and ! IsValidIntegerIndex(O, index) is true, then\nLet offset be O.[[ByteOffset]].\nLet arrayTypeName be the String value of O.[[TypedArrayName]].\nLet elementSize be the Element Size value specified in Table 62 for arrayTypeName.\nLet indexedPosition be (\u211d(index) \u00d7 elementSize) + offset.\nLet elementType be the Element Type value in Table 62 for arrayTypeName.\nPerform SetValueInBuffer(buffer, indexedPosition, elementType, numValue, true, Unordered).\nReturn NormalCompletion(undefined).\n\nToNumber ( argument )\n\nObject, Apply the following steps:\n\n1. Let primValue be ? ToPrimitive(argument, hint Number).\n2. Return ? ToNumber(primValue).\n\n7.1.1 ToPrimitive ( input [ , PreferredType ] )\n\n...\n4. Let exoticToPrim be ? GetMethod(input, @@toPrimitive).\n5. If exoticToPrim is not undefined, then\na. Let result be ? Call(exoticToPrim, input, \u00ab hint \u00bb).\nb. If Type(result) is not Object, return result.\nc. Throw a TypeError exception.\n...\n7. Return ? OrdinaryToPrimitive(input, hint).\n\nOrdinaryToPrimitive\n\n...\n5. For each name in methodNames in List order, do\na. Let method be ? Get(O, name).\nb. If IsCallable(method) is true, then\ni. Let result be ? Call(method, O).\nii. If Type(result) is not Object, return result.\n6. Throw a TypeError exception.\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/object-arg/throws-setting-obj-valueof.js", "esid": " sec-typedarray-object", "description": " >Return abrupt from valueOf() when setting a property\n", "info": " |22.2.4.4 TypedArray ( object )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject does not have either a [[TypedArrayName]] or an [[ArrayBufferData]]\ninternal slot.\n\n...\n8. Repeat, while k < len\n...\nb. Let kValue be ? Get(arrayLike, Pk).\nc. Perform ? Set(O, Pk, kValue, true).\n...\n\n9.4.5.5 [[Set]] ( P, V, Receiver)\n\n...\n2. If Type(P) is String and if SameValue(O, Receiver) is true, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\ni. Perform ? IntegerIndexedElementSet(O, numericIndex, V).\nii. Return true.\n...\n\nIntegerIndexedElementSet ( O, index, value )\n\nAssert: O is an Integer-Indexed exotic object.\nIf O.[[ContentType]] is BigInt, let numValue be ? ToBigInt(value).\nOtherwise, let numValue be ? ToNumber(value).\nLet buffer be O.[[ViewedArrayBuffer]].\nIf IsDetachedBuffer(buffer) is false and ! IsValidIntegerIndex(O, index) is true, then\nLet offset be O.[[ByteOffset]].\nLet arrayTypeName be the String value of O.[[TypedArrayName]].\nLet elementSize be the Element Size value specified in Table 62 for arrayTypeName.\nLet indexedPosition be (\u211d(index) \u00d7 elementSize) + offset.\nLet elementType be the Element Type value in Table 62 for arrayTypeName.\nPerform SetValueInBuffer(buffer, indexedPosition, elementType, numValue, true, Unordered).\nReturn NormalCompletion(undefined).\n\nToNumber ( argument )\n\nObject, Apply the following steps:\n\n1. Let primValue be ? ToPrimitive(argument, hint Number).\n2. Return ? ToNumber(primValue).\n\n7.1.1 ToPrimitive ( input [ , PreferredType ] )\n\n...\n4. Let exoticToPrim be ? GetMethod(input, @@toPrimitive).\n5. If exoticToPrim is not undefined, then\na. Let result be ? Call(exoticToPrim, input, \u00ab hint \u00bb).\nb. If Type(result) is not Object, return result.\nc. Throw a TypeError exception.\n...\n7. Return ? OrdinaryToPrimitive(input, hint).\n\nOrdinaryToPrimitive\n\n...\n5. For each name in methodNames in List order, do\na. Let method be ? Get(O, name).\nb. If IsCallable(method) is true, then\ni. Let result be ? Call(method, O).\nii. If Type(result) is not Object, return result.\n6. Throw a TypeError exception.\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/object-arg/throws-setting-property.js", "esid": " sec-typedarray-object", "description": " >Return abrupt from setting property\n", "info": " |22.2.4.4 TypedArray ( object )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject does not have either a [[TypedArrayName]] or an [[ArrayBufferData]]\ninternal slot.\n\n...\n8. Repeat, while k < len\n...\nb. Let kValue be ? Get(arrayLike, Pk).\nc. Perform ? Set(O, Pk, kValue, true).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/object-arg/throws-setting-symbol-property.js", "esid": " sec-typedarray-object", "description": " >Return abrupt from setting property\n", "info": " |22.2.4.4 TypedArray ( object )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject does not have either a [[TypedArrayName]] or an [[ArrayBufferData]]\ninternal slot.\n\n...\n8. Repeat, while k < len\n...\nb. Let kValue be ? Get(arrayLike, Pk).\nc. Perform ? Set(O, Pk, kValue, true).\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/typedarray-arg/new-instance-extensibility.js", "esid": " sec-typedarray-typedarray", "description": " >The new typedArray instance from a typedArray argument is extensible\n", "info": " |22.2.4.3 TypedArray ( typedArray )\n\n...\n4. Let O be ? AllocateTypedArray(constructorName, NewTarget,\n\"%TypedArrayPrototype%\").\n...\n\n22.2.4.2.1 Runtime Semantics: AllocateTypedArray (constructorName, newTarget,\ndefaultProto [ , length ])\n\n...\n2. Let obj be IntegerIndexedObjectCreate(proto, \u00ab [[ViewedArrayBuffer]],\n[[TypedArrayName]], [[ByteLength]], [[ByteOffset]], [[ArrayLength]] \u00bb).\n...\n\n9.4.5.7 IntegerIndexedObjectCreate (prototype, internalSlotsList)\n\n...\n11. Set the [[Extensible]] internal slot of A to true.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/typedarray-arg/other-ctor-buffer-ctor-species-null.js", "esid": " sec-typedarray-typedarray", "description": " >Use default ArrayBuffer constructor on null buffer.constructor.@@species\n", "info": " |22.2.4.3 TypedArray ( typedArray )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has a [[TypedArrayName]] internal slot.\n\n...\n18. Else,\na. Let bufferConstructor be ? SpeciesConstructor(srcData, %ArrayBuffer%).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n...\n5. Let S be ? Get(C, @@species).\n6. If S is either undefined or null, return defaultConstructor.\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol.species", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/typedarray-arg/other-ctor-buffer-ctor-species-undefined.js", "esid": " sec-typedarray-typedarray", "description": " >Use default ArrayBuffer constructor on undefined buffer.constructor.@@species\n", "info": " |22.2.4.3 TypedArray ( typedArray )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has a [[TypedArrayName]] internal slot.\n\n...\n18. Else,\na. Let bufferConstructor be ? SpeciesConstructor(srcData, %ArrayBuffer%).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n...\n5. Let S be ? Get(C, @@species).\n6. If S is either undefined or null, return defaultConstructor.\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol.species", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/typedarray-arg/same-ctor-buffer-ctor-species-null.js", "esid": " sec-typedarray-typedarray", "description": " >Use default ArrayBuffer constructor on null buffer.constructor.@@species\n", "info": " |22.2.4.3 TypedArray ( typedArray )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has a [[TypedArrayName]] internal slot.\n\n...\n17. If SameValue(elementType, srcType) is true, then\na. Let data be ? CloneArrayBuffer(srcData, srcByteOffset).\n...\n\n24.1.1.4 CloneArrayBuffer ( srcBuffer, srcByteOffset [ , cloneConstructor ] )\n\n...\n2. If cloneConstructor is not present, then\na. Let cloneConstructor be ? SpeciesConstructor(srcBuffer, %ArrayBuffer%).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n...\n5. Let S be ? Get(C, @@species).\n6. If S is either undefined or null, return defaultConstructor.\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol.species", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/ctors/typedarray-arg/same-ctor-buffer-ctor-species-undefined.js", "esid": " sec-typedarray-typedarray", "description": " >Use default ArrayBuffer constructor on undefined buffer.constructor.@@species\n", "info": " |22.2.4.3 TypedArray ( typedArray )\n\nThis description applies only if the TypedArray function is called with at\nleast one argument and the Type of the first argument is Object and that\nobject has a [[TypedArrayName]] internal slot.\n\n...\n17. If SameValue(elementType, srcType) is true, then\na. Let data be ? CloneArrayBuffer(srcData, srcByteOffset).\n...\n\n24.1.1.4 CloneArrayBuffer ( srcBuffer, srcByteOffset [ , cloneConstructor ] )\n\n...\n2. If cloneConstructor is not present, then\na. Let cloneConstructor be ? SpeciesConstructor(srcBuffer, %ArrayBuffer%).\n...\n\n7.3.20 SpeciesConstructor ( O, defaultConstructor )\n\n...\n5. Let S be ? Get(C, @@species).\n6. If S is either undefined or null, return defaultConstructor.\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol.species", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/from/arylk-get-length-error.js", "esid": " sec-%typedarray%.from", "description": " Returns error produced by accessing array-like's length", "info": " |22.2.2.1 %TypedArray%.from ( source [ , mapfn [ , thisArg ] ] )\n\n...\n7. Let len be ? ToLength(? Get(arrayLike, \"length\")).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/from/arylk-to-length-error.js", "esid": " sec-%typedarray%.from", "description": " Returns error produced by interpreting length property as a length", "info": " |22.2.2.1 %TypedArray%.from ( source [ , mapfn [ , thisArg ] ] )\n\n...\n7. Let len be ? ToLength(? Get(arrayLike, \"length\")).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/from/custom-ctor-returns-other-instance.js", "esid": " sec-%typedarray%.from", "description": " >Custom constructor can return any TypedArray instance with higher or same\nlength\n", "info": " |%TypedArray%.from ( source [ , mapfn [ , thisArg ] ] )\n\n...\n7. If usingIterator is not undefined, then\na. Let values be ? IterableToList(source, usingIterator).\nb. Let len be the number of elements in values.\nc. Let targetObj be ? TypedArrayCreate(C, \u00ablen\u00bb).\n...\n10. Let len be ? ToLength(? Get(arrayLike, \"length\")).\n11. Let targetObj be ? TypedArrayCreate(C, \u00ab len \u00bb).\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol.iterator", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/from/custom-ctor.js", "esid": " sec-%typedarray%.from", "description": " >Calls and return abrupt completion from custom constructor\n", "info": " |22.2.2.1 %TypedArray%.from ( source [ , mapfn [ , thisArg ] ] )\n\n...\n8. Let targetObj be ? TypedArrayCreate(C, \u00ablen\u00bb).\n...\n\n22.2.4.6 TypedArrayCreate ( constructor, argumentList )\n\n1. Let newTypedArray be ? Construct(constructor, argumentList).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/from/iter-access-error.js", "esid": " sec-%typedarray%.from", "description": " Returns error produced by accessing @@iterator", "info": " |22.2.2.1 %TypedArray%.from ( source [ , mapfn [ , thisArg ] ] )\n\n...\n6. Let arrayLike be ? IterableToArrayLike(source).\n...\n\n22.2.2.1.1 Runtime Semantics: IterableToArrayLike( items )\n\n1. Let usingIterator be ? GetMethod(items, @@iterator).\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol.iterator", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/from/iter-invoke-error.js", "esid": " sec-%typedarray%.from", "description": " Returns error produced by invoking @@iterator", "info": " |22.2.2.1 %TypedArray%.from ( source [ , mapfn [ , thisArg ] ] )\n\n...\n6. Let arrayLike be ? IterableToArrayLike(source).\n...\n\n22.2.2.1.1 Runtime Semantics: IterableToArrayLike( items )\n\n1. Let usingIterator be ? GetMethod(items, @@iterator).\n2. If usingIterator is not undefined, then\na. Let iterator be ? GetIterator(items, usingIterator).\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol.iterator", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/from/iter-next-error.js", "esid": " sec-%typedarray%.from", "description": " Returns error produced by advancing the iterator", "info": " |22.2.2.1.1 Runtime Semantics: IterableToArrayLike( items )\n\n2. If usingIterator is not undefined, then\n...\nd. Repeat, while next is not false\ni. Let next be ? IteratorStep(iterator).\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol.iterator", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/from/iter-next-value-error.js", "esid": " sec-%typedarray%.from", "description": " Returns error produced by accessing iterated value", "info": " |22.2.2.1.1 Runtime Semantics: IterableToArrayLike( items )\n\n2. If usingIterator is not undefined, then\n...\nd. Repeat, while next is not false\n...\nii. If next is not false, then\n1. Let nextValue be ? IteratorValue(next).\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol.iterator", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/from/mapfn-abrupt-completion.js", "esid": " sec-%typedarray%.from", "description": " >Return abrupt from mapfn\n", "info": " |22.2.2.1 %TypedArray%.from ( source [ , mapfn [ , thisArg ] ] )\n\n...\n10. Repeat, while k < len\n...\nc. If mapping is true, then\ni. Let mappedValue be ? Call(mapfn, T, \u00ab kValue, k \u00bb).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/from/mapfn-arguments.js", "esid": " sec-%typedarray%.from", "description": " >Assert mapfn arguments\n", "info": " |22.2.2.1 %TypedArray%.from ( source [ , mapfn [ , thisArg ] ] )\n\n...\n10. Repeat, while k < len\n...\nc. If mapping is true, then\ni. Let mappedValue be ? Call(mapfn, T, \u00ab kValue, k \u00bb).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/from/mapfn-is-not-callable.js", "esid": " sec-%typedarray%.from", "description": " Throw a TypeError exception is mapfn is not callable", "info": " |22.2.2.1 %TypedArray%.from ( source [ , mapfn [ , thisArg ] ] )\n\n...\n3. If mapfn was supplied and mapfn is not undefined, then\na. If IsCallable(mapfn) is false, throw a TypeError exception.\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "Symbol.iterator", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/from/mapfn-this-with-thisarg.js", "esid": " sec-%typedarray%.from", "description": " >Assert mapfn `this` with thisArg\n", "info": " |22.2.2.1 %TypedArray%.from ( source [ , mapfn [ , thisArg ] ] )\n\n...\n5. If thisArg was supplied, let T be thisArg; else let T be undefined.\n...\n10. Repeat, while k < len\n...\nc. If mapping is true, then\ni. Let mappedValue be ? Call(mapfn, T, \u00ab kValue, k \u00bb).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/from/mapfn-this-without-thisarg-non-strict.js", "esid": " sec-%typedarray%.from", "description": " >Assert mapfn `this` without thisArg\n", "info": " |22.2.2.1 %TypedArray%.from ( source [ , mapfn [ , thisArg ] ] )\n\n...\n5. If thisArg was supplied, let T be thisArg; else let T be undefined.\n...\n10. Repeat, while k < len\n...\nc. If mapping is true, then\ni. Let mappedValue be ? Call(mapfn, T, \u00ab kValue, k \u00bb).\n...\n", "includes": ["testTypedArray.js"], "flags": ["noStrict"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/from/mapfn-this-without-thisarg-strict.js", "esid": " sec-%typedarray%.from", "description": " >Assert mapfn `this` without thisArg\n", "info": " |22.2.2.1 %TypedArray%.from ( source [ , mapfn [ , thisArg ] ] )\n\n...\n5. If thisArg was supplied, let T be thisArg; else let T be undefined.\n...\n10. Repeat, while k < len\n...\nc. If mapping is true, then\ni. Let mappedValue be ? Call(mapfn, T, \u00ab kValue, k \u00bb).\n...\n", "includes": ["testTypedArray.js"], "flags": ["onlyStrict"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/from/nan-conversion.js", "esid": " sec-%typedarray%.from", "description": " >Test NaN conversions\n", "info": " |IntegerIndexedElementSet ( O, index, value )\n\nAssert: O is an Integer-Indexed exotic object.\nIf O.[[ContentType]] is BigInt, let numValue be ? ToBigInt(value).\nOtherwise, let numValue be ? ToNumber(value).\nLet buffer be O.[[ViewedArrayBuffer]].\nIf IsDetachedBuffer(buffer) is false and ! IsValidIntegerIndex(O, index) is true, then\nLet offset be O.[[ByteOffset]].\nLet arrayTypeName be the String value of O.[[TypedArrayName]].\nLet elementSize be the Element Size value specified in Table 62 for arrayTypeName.\nLet indexedPosition be (\u211d(index) \u00d7 elementSize) + offset.\nLet elementType be the Element Type value in Table 62 for arrayTypeName.\nPerform SetValueInBuffer(buffer, indexedPosition, elementType, numValue, true, Unordered).\nReturn NormalCompletion(undefined).\n24.1.1.6 SetValueInBuffer ( arrayBuffer, byteIndex, type, value [ ,\nisLittleEndian ] )\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/from/new-instance-empty.js", "esid": " sec-%typedarray%.from", "description": " >Return a new empty TypedArray\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/from/new-instance-from-ordinary-object.js", "esid": " sec-%typedarray%.from", "description": " >Return a new TypedArray from an ordinary object\n", "includes": ["testTypedArray.js"], "features": ["Array.prototype.values", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/from/new-instance-from-sparse-array.js", "esid": " sec-%typedarray%.from", "description": " >Return a new TypedArray from a sparse array\n", "includes": ["testTypedArray.js"], "features": ["Array.prototype.values", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/from/new-instance-from-zero.js", "esid": " sec-%typedarray%.from", "description": " >Return a new TypedArray using -0 and +0\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/from/new-instance-using-custom-ctor.js", "esid": " sec-%typedarray%.from", "description": " >Return a new TypedArray using a custom Constructor\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/from/new-instance-with-mapfn.js", "esid": " sec-%typedarray%.from", "description": " >Return a new TypedArray using mapfn\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/from/new-instance-without-mapfn.js", "esid": " sec-%typedarray%.from", "description": " >Return a new TypedArray\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/from/property-abrupt-completion.js", "esid": " sec-%typedarray%.from", "description": " >Return abrupt from source property\n", "info": " |22.2.2.1 %TypedArray%.from ( source [ , mapfn [ , thisArg ] ] )\n\n...\n10. Repeat, while k < len\n...\nb. Let kValue be ? Get(arrayLike, Pk).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/from/set-value-abrupt-completion.js", "esid": " sec-%typedarray%.from", "description": " >Return abrupt from setting a value on the new typedarray\n", "info": " |22.2.2.1 %TypedArray%.from ( source [ , mapfn [ , thisArg ] ] )\n\n...\n10. Repeat, while k < len\n...\nc. If mapping is true, then\ni. Let mappedValue be ? Call(mapfn, T, \u00ab kValue, k \u00bb).\nd. Else, let mappedValue be kValue.\ne. Perform ? Set(targetObj, Pk, mappedValue, true).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/from/source-value-is-symbol-throws.js", "esid": " sec-%typedarray%.from", "description": " >Throws a TypeError if argument is a Symbol\n", "info": " |IntegerIndexedElementSet ( O, index, value )\n\nAssert: O is an Integer-Indexed exotic object.\nIf O.[[ContentType]] is BigInt, let numValue be ? ToBigInt(value).\nOtherwise, let numValue be ? ToNumber(value).\nLet buffer be O.[[ViewedArrayBuffer]].\nIf IsDetachedBuffer(buffer) is false and ! IsValidIntegerIndex(O, index) is true, then\nLet offset be O.[[ByteOffset]].\nLet arrayTypeName be the String value of O.[[TypedArrayName]].\nLet elementSize be the Element Size value specified in Table 62 for arrayTypeName.\nLet indexedPosition be (\u211d(index) \u00d7 elementSize) + offset.\nLet elementType be the Element Type value in Table 62 for arrayTypeName.\nPerform SetValueInBuffer(buffer, indexedPosition, elementType, numValue, true, Unordered).\nReturn NormalCompletion(undefined).\n\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/DefineOwnProperty/conversion-operation-consistent-nan.js", "esid": " sec-integer-indexed-exotic-objects-defineownproperty-p-desc", "description": " Consistent canonicalization of NaN values", "info": " |This test does not compare the actual byte values, instead it simply checks that\nthe value is some valid NaN encoding.\n\n---\n\n[[DefineOwnProperty]] ( P, Desc)\n\n...\n3. If Type(P) is String, then\n...\nb. If numericIndex is not undefined, then\n...\nxi. If Desc has a [[Value]] field, then\n1. Let value be Desc.[[Value]].\n2. Return ? IntegerIndexedElementSet(O, intIndex, value).\n...\n\n#sec-integerindexedelementset\nIntegerIndexedElementSet ( O, index, value )\n\n...\n15. Perform SetValueInBuffer(buffer, indexedPosition, elementType, numValue).\n...\n\n#sec-setvalueinbuffer\nSetValueInBuffer ( arrayBuffer, byteIndex, type, value [ ,\nisLittleEndian ] )\n\n8. Let rawBytes be NumberToRawBytes(type, value, isLittleEndian).\n\n#sec-numbertorawbytes\nNumberToRawBytes( type, value, isLittleEndian )\n\n1. If type is \"Float32\", then\na. Set rawBytes to a List containing the 4 bytes that are the result\nof converting value to IEEE 754-2008 binary32 format using \u201cRound to\nnearest, ties to even\u201d rounding mode. If isLittleEndian is false, the\nbytes are arranged in big endian order. Otherwise, the bytes are\narranged in little endian order. If value is NaN, rawValue may be set\nto any implementation chosen IEEE 754-2008 binary64 format Not-a-Number\nencoding. An implementation must always choose either the same encoding\nfor each implementation distinguishable *NaN* value, or an\nimplementation-defined canonical value.\n2. Else, if type is \"Float64\", then\na. Set _rawBytes_ to a List containing the 8 bytes that are the IEEE\n754-2008 binary64 format encoding of _value_. If _isLittleEndian_ is\n*false*, the bytes are arranged in big endian order. Otherwise,\nthe bytes are arranged in little endian order. If _value_ is *NaN*,\n_rawValue_ may be set to any implementation chosen IEEE 754-2008\nbinary64 format Not-a-Number encoding. An implementation must\nalways choose either the same encoding for each implementation\ndistinguishable *NaN* value, or an implementation-defined\ncanonical value.\n...\n\n#sec-isnan-number\n\nNOTE: A reliable way for ECMAScript code to test if a value X is a NaN is\nan expression of the formX !== X. The result will be true if and only\nif X is a NaN.\n", "includes": ["nans.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/DefineOwnProperty/conversion-operation.js", "esid": " sec-integer-indexed-exotic-objects-defineownproperty-p-desc", "description": " >Verify conversion after defining value\n", "info": " |9.4.5.3 [[DefineOwnProperty]] ( P, Desc)\n\n...\n3. If Type(P) is String, then\n...\nb. If numericIndex is not undefined, then\n...\nxi. If Desc has a [[Value]] field, then\n1. Let value be Desc.[[Value]].\n2. Return ? IntegerIndexedElementSet(O, intIndex, value).\n...\n\nIntegerIndexedElementSet ( O, index, value )\n\nAssert: O is an Integer-Indexed exotic object.\nIf O.[[ContentType]] is BigInt, let numValue be ? ToBigInt(value).\nOtherwise, let numValue be ? ToNumber(value).\nLet buffer be O.[[ViewedArrayBuffer]].\nIf IsDetachedBuffer(buffer) is false and ! IsValidIntegerIndex(O, index) is true, then\nLet offset be O.[[ByteOffset]].\nLet arrayTypeName be the String value of O.[[TypedArrayName]].\nLet elementSize be the Element Size value specified in Table 62 for arrayTypeName.\nLet indexedPosition be (\u211d(index) \u00d7 elementSize) + offset.\nLet elementType be the Element Type value in Table 62 for arrayTypeName.\nPerform SetValueInBuffer(buffer, indexedPosition, elementType, numValue, true, Unordered).\nReturn NormalCompletion(undefined).\n\n24.1.1.6 SetValueInBuffer ( arrayBuffer, byteIndex, type, value [ ,\nisLittleEndian ] )\n\n...\n8. If type is \"Float32\", then\n...\n9. Else, if type is \"Float64\", then\n...\n10. Else,\n...\nb. Let convOp be the abstract operation named in the Conversion Operation\ncolumn in Table 50 for Element Type type.\nc. Let intValue be convOp(value).\nd. If intValue \u2265 0, then\n...\ne. Else,\n...\n", "includes": ["byteConversionValues.js", "testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/DefineOwnProperty/desc-value-throws.js", "esid": " sec-integer-indexed-exotic-objects-defineownproperty-p-desc", "description": " >Return abrupt from the evaluation of ToNumber(desc.value)\n", "info": " |9.4.5.3 [[DefineOwnProperty]] ( P, Desc)\n...\n3. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\n...\nxi. If Desc has a [[Value]] field, then\n1. Let value be Desc.[[Value]].\n2. Return ? IntegerIndexedElementSet(O, intIndex, value).\n...\n\nIntegerIndexedElementSet ( O, index, value )\n\nAssert: O is an Integer-Indexed exotic object.\nIf O.[[ContentType]] is BigInt, let numValue be ? ToBigInt(value).\nOtherwise, let numValue be ? ToNumber(value).\nLet buffer be O.[[ViewedArrayBuffer]].\nIf IsDetachedBuffer(buffer) is false and ! IsValidIntegerIndex(O, index) is true, then\nLet offset be O.[[ByteOffset]].\nLet arrayTypeName be the String value of O.[[TypedArrayName]].\nLet elementSize be the Element Size value specified in Table 62 for arrayTypeName.\nLet indexedPosition be (\u211d(index) \u00d7 elementSize) + offset.\nLet elementType be the Element Type value in Table 62 for arrayTypeName.\nPerform SetValueInBuffer(buffer, indexedPosition, elementType, numValue, true, Unordered).\nReturn NormalCompletion(undefined).\n\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/Delete/indexed-value-ab-non-strict.js", "esid": " sec-integer-indexed-exotic-objects-delete-p", "description": " >Return value from valid numeric index\n", "info": " |[[Delete]] (P)\n\n...\nAssert: IsPropertyKey(P) is true.\nAssert: O is an Integer-Indexed exotic object.\nIf Type(P) is String, then\nLet numericIndex be ! CanonicalNumericIndexString(P).\nIf numericIndex is not undefined, then\nIf IsDetachedBuffer(O.[[ViewedArrayBuffer]]) is true, return true.\nIf ! IsValidIntegerIndex(O, numericIndex) is false, return true.\nReturn false.\n...\n", "flags": ["noStrict"], "includes": ["testTypedArray.js"], "features": ["align-detached-buffer-semantics-with-web-reality", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/Delete/indexed-value-ab-strict.js", "esid": " sec-integer-indexed-exotic-objects-delete-p", "description": " >Return value from valid numeric index\n", "info": " |[[Delete]] (P)\n\n...\nAssert: IsPropertyKey(P) is true.\nAssert: O is an Integer-Indexed exotic object.\nIf Type(P) is String, then\nLet numericIndex be ! CanonicalNumericIndexString(P).\nIf numericIndex is not undefined, then\nIf IsDetachedBuffer(O.[[ViewedArrayBuffer]]) is true, return true.\nIf ! IsValidIntegerIndex(O, numericIndex) is false, return true.\nReturn false.\n...\n", "flags": ["onlyStrict"], "includes": ["testTypedArray.js"], "features": ["align-detached-buffer-semantics-with-web-reality", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/Delete/key-is-not-integer.js", "esid": " sec-integer-indexed-exotic-objects-delete-p", "description": " >Return true if key is a CanonicalNumericIndex and IsValidIntegerIndex(O, numericIndex) is false.\n", "info": " |[[Delete]] (P)\n\n...\nAssert: IsPropertyKey(P) is true.\nAssert: O is an Integer-Indexed exotic object.\nIf Type(P) is String, then\nLet numericIndex be ! CanonicalNumericIndexString(P).\nIf numericIndex is not undefined, then\nIf IsDetachedBuffer(O.[[ViewedArrayBuffer]]) is true, return true.\nIf ! IsValidIntegerIndex(O, numericIndex) is false, return true.\nReturn false.\n...\n\nIntegerIndexedElementGet ( O, index )\n\n...\n5. If IsInteger(index) is false, return undefined.\n...\n", "includes": ["testTypedArray.js"], "features": ["align-detached-buffer-semantics-with-web-reality", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/Delete/key-is-not-minus-zero-non-strict.js", "esid": " sec-integer-indexed-exotic-objects-delete-p", "description": " >Return true if key is a CanonicalNumericIndex and IsValidIntegerIndex(O, numericIndex) is false.\n", "info": " |[[Delete]] (P)\n\n...\nAssert: IsPropertyKey(P) is true.\nAssert: O is an Integer-Indexed exotic object.\nIf Type(P) is String, then\nLet numericIndex be ! CanonicalNumericIndexString(P).\nIf numericIndex is not undefined, then\nIf IsDetachedBuffer(O.[[ViewedArrayBuffer]]) is true, return true.\nIf ! IsValidIntegerIndex(O, numericIndex) is false, return true.\nReturn false.\n\n...\n\nIntegerIndexedElementGet ( O, index )\n\n...\nIf ! IsValidIntegerIndex(O, index) is false, return undefined.\n...\n", "flags": ["noStrict"], "includes": ["testTypedArray.js"], "features": ["align-detached-buffer-semantics-with-web-reality", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/Delete/key-is-not-minus-zero-strict.js", "esid": " sec-integer-indexed-exotic-objects-delete-p", "description": " >Return true if key is a CanonicalNumericIndex and IsValidIntegerIndex(O, numericIndex) is false.\n", "info": " |[[Delete]] (P)\n\n...\nAssert: IsPropertyKey(P) is true.\nAssert: O is an Integer-Indexed exotic object.\nIf Type(P) is String, then\nLet numericIndex be ! CanonicalNumericIndexString(P).\nIf numericIndex is not undefined, then\nIf IsDetachedBuffer(O.[[ViewedArrayBuffer]]) is true, return true.\nIf ! IsValidIntegerIndex(O, numericIndex) is false, return true.\nReturn false.\n\n...\n\nIntegerIndexedElementGet ( O, index )\n\n...\nIf ! IsValidIntegerIndex(O, index) is false, return undefined.\n...\n", "flags": ["onlyStrict"], "includes": ["testTypedArray.js"], "features": ["align-detached-buffer-semantics-with-web-reality", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/Delete/key-is-not-numeric-index-get-throws.js", "esid": " sec-integer-indexed-exotic-objects-delete-p", "description": " >Use OrdinaryDelete if key is not a CanonicalNumericIndex\n", "info": " |[[Delete]] (P)\n\n...\nAssert: IsPropertyKey(P) is true.\nAssert: O is an Integer-Indexed exotic object.\nIf Type(P) is String, then\nLet numericIndex be ! CanonicalNumericIndexString(P).\nIf numericIndex is not undefined, then\nIf IsDetachedBuffer(O.[[ViewedArrayBuffer]]) is true, return true.\nIf ! IsValidIntegerIndex(O, numericIndex) is false, return true.\nReturn false.\n...\nReturn ? OrdinaryDelete(O, P).\n\n", "includes": ["testTypedArray.js"], "features": ["align-detached-buffer-semantics-with-web-reality", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/Delete/key-is-not-numeric-index-non-strict.js", "esid": " sec-integer-indexed-exotic-objects-delete-p", "description": " >Use OrdinaryDelete if key is not a CanonicalNumericIndex\n", "info": " |[[Delete]] (P)\n\n...\nAssert: IsPropertyKey(P) is true.\nAssert: O is an Integer-Indexed exotic object.\nIf Type(P) is String, then\nLet numericIndex be ! CanonicalNumericIndexString(P).\nIf numericIndex is not undefined, then\nIf IsDetachedBuffer(O.[[ViewedArrayBuffer]]) is true, return true.\nIf ! IsValidIntegerIndex(O, numericIndex) is false, return true.\nReturn false.\n...\nReturn ? OrdinaryDelete(O, P).\n", "flags": ["noStrict"], "includes": ["testTypedArray.js"], "features": ["align-detached-buffer-semantics-with-web-reality", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/Delete/key-is-not-numeric-index-strict.js", "esid": " sec-integer-indexed-exotic-objects-delete-p", "description": " >Use OrdinaryDelete if key is not a CanonicalNumericIndex\n", "info": " |[[Delete]] (P)\n\n...\nAssert: IsPropertyKey(P) is true.\nAssert: O is an Integer-Indexed exotic object.\nIf Type(P) is String, then\nLet numericIndex be ! CanonicalNumericIndexString(P).\nIf numericIndex is not undefined, then\nIf IsDetachedBuffer(O.[[ViewedArrayBuffer]]) is true, return true.\nIf ! IsValidIntegerIndex(O, numericIndex) is false, return true.\nReturn false.\n...\nReturn ? OrdinaryDelete(O, P).\n", "flags": ["onlyStrict"], "includes": ["testTypedArray.js"], "features": ["align-detached-buffer-semantics-with-web-reality", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/Delete/key-is-out-of-bounds-non-strict.js", "esid": " sec-integer-indexed-exotic-objects-delete-p", "description": " >Return true if IsValidIntegerIndex(O, numericIndex) is false.\n", "info": " |[[Delete]] (P)\n\n...\nAssert: IsPropertyKey(P) is true.\nAssert: O is an Integer-Indexed exotic object.\nIf Type(P) is String, then\nLet numericIndex be ! CanonicalNumericIndexString(P).\nIf numericIndex is not undefined, then\nIf IsDetachedBuffer(O.[[ViewedArrayBuffer]]) is true, return true.\nIf ! IsValidIntegerIndex(O, numericIndex) is false, return true.\nReturn false.\n...\nReturn ? OrdinaryDelete(O, P).\n\n", "flags": ["noStrict"], "includes": ["testTypedArray.js"], "features": ["align-detached-buffer-semantics-with-web-reality", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/Delete/key-is-out-of-bounds-strict.js", "esid": " sec-integer-indexed-exotic-objects-delete-p", "description": " >Return true if IsValidIntegerIndex(O, numericIndex) is false.\n", "info": " |[[Delete]] (P)\n\n...\nAssert: IsPropertyKey(P) is true.\nAssert: O is an Integer-Indexed exotic object.\nIf Type(P) is String, then\nLet numericIndex be ! CanonicalNumericIndexString(P).\nIf numericIndex is not undefined, then\nIf IsDetachedBuffer(O.[[ViewedArrayBuffer]]) is true, return true.\nIf ! IsValidIntegerIndex(O, numericIndex) is false, return true.\nReturn false.\n...\nReturn ? OrdinaryDelete(O, P).\n\n", "flags": ["onlyStrict"], "includes": ["testTypedArray.js"], "features": ["align-detached-buffer-semantics-with-web-reality", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/Get/indexed-value.js", "esid": " sec-integer-indexed-exotic-objects-get-p-receiver", "description": " >Return value from valid numeric index\n", "info": " |9.4.5.4 [[Get]] (P, Receiver)\n\n...\n2. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\ni. Return ? IntegerIndexedElementGet(O, numericIndex).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/Get/key-is-not-minus-zero.js", "esid": " sec-integer-indexed-exotic-objects-get-p-receiver", "description": " >Return undefined if key is numeric index is -0.\n", "info": " |9.4.5.4 [[Get]] (P, Receiver)\n\n...\n2. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\ni. Return ? IntegerIndexedElementGet(O, numericIndex).\n...\n\n9.4.5.8 IntegerIndexedElementGet ( O, index )\n\n...\n6. If index = -0, return undefined.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/Get/key-is-not-numeric-index-get-throws.js", "esid": " sec-integer-indexed-exotic-objects-get-p-receiver", "description": " >Returns abrupt from OrdinaryGet when key is not a numeric index\n", "info": " |9.4.5.4 [[Get]] (P, Receiver)\n\n...\n2. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\n...\n3. Return ? OrdinaryGet(O, P, Receiver).\n\n9.1.8.1 OrdinaryGet (O, P, Receiver)\n\n...\n8. Return ? Call(getter, Receiver).\n...\n", "includes": ["testTypedArray.js"], "features": ["align-detached-buffer-semantics-with-web-reality", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/Get/key-is-not-numeric-index.js", "esid": " sec-integer-indexed-exotic-objects-get-p-receiver", "description": " >Use OrdinaryGet if key is not a CanonicalNumericIndex\n", "info": " |9.4.5.4 [[Get]] (P, Receiver)\n\n...\n2. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\n...\n3. Return ? OrdinaryGet(O, P, Receiver).\n", "includes": ["testTypedArray.js"], "features": ["align-detached-buffer-semantics-with-web-reality", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/Get/key-is-out-of-bounds.js", "esid": " sec-integer-indexed-exotic-objects-get-p-receiver", "description": " >Return undefined if key is numeric index < 0 or index \u2265 [[ArrayLength]].\n", "info": " |9.4.5.4 [[Get]] (P, Receiver)\n\n...\n2. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\ni. Return ? IntegerIndexedElementGet(O, numericIndex).\n...\n\n9.4.5.8 IntegerIndexedElementGet ( O, index )\n\n...\n7. Let length be the value of O's [[ArrayLength]] internal slot.\n8. If index < 0 or index \u2265 length, return undefined.\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/Get/key-is-symbol.js", "esid": " sec-integer-indexed-exotic-objects-get-p-receiver", "description": " >Use OrdinaryGet if key is a Symbol\n", "info": " |9.4.5.4 [[Get]] (P, Receiver)\n\n...\n2. If Type(P) is String, then\n...\n3. Return ? OrdinaryGet(O, P, Receiver).\n", "includes": ["testTypedArray.js"], "features": ["align-detached-buffer-semantics-with-web-reality", "Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/GetOwnProperty/key-is-not-numeric-index.js", "esid": " sec-integer-indexed-exotic-objects-getownproperty-p", "description": " >Returns an ordinary property value if key is not a CanonicalNumericIndex\n", "info": " |9.4.5.1 [[GetOwnProperty]] ( P )\n\n...\n3. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\n...\n4. Return OrdinaryGetOwnProperty(O, P).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/GetOwnProperty/key-is-symbol.js", "esid": " sec-integer-indexed-exotic-objects-getownproperty-p", "description": " >Returns an ordinary property value if key is a Symbol\n", "info": " |9.4.5.1 [[GetOwnProperty]] ( P )\n\n...\n3. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\n...\n4. Return OrdinaryGetOwnProperty(O, P).\n...\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/internals/Set/key-is-not-numeric-index-set-throws.js", "esid": " sec-integer-indexed-exotic-objects-set-p-v-receiver", "description": " >Returns abrupt from OrdinarySet when key is not a numeric index\n", "info": " |9.4.5.5 [[Set]] ( P, V, Receiver)\n\n...\n2. If Type(P) is String, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\n...\n3. Return ? OrdinarySet(O, P, V, Receiver).\n\n9.1.9.1 OrdinarySet (O, P, V, Receiver)\n\n...\n8. Perform ? Call(setter, Receiver, \u00ab V \u00bb).\n...\n", "includes": ["testTypedArray.js"], "features": ["align-detached-buffer-semantics-with-web-reality", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/of/argument-is-symbol-throws.js", "esid": " sec-%typedarray%.of", "description": " >Throws a TypeError if argument is a Symbol\n", "info": " |IntegerIndexedElementSet ( O, index, value )\n\nAssert: O is an Integer-Indexed exotic object.\nIf O.[[ContentType]] is BigInt, let numValue be ? ToBigInt(value).\nOtherwise, let numValue be ? ToNumber(value).\nLet buffer be O.[[ViewedArrayBuffer]].\nIf IsDetachedBuffer(buffer) is false and ! IsValidIntegerIndex(O, index) is true, then\nLet offset be O.[[ByteOffset]].\nLet arrayTypeName be the String value of O.[[TypedArrayName]].\nLet elementSize be the Element Size value specified in Table 62 for arrayTypeName.\nLet indexedPosition be (\u211d(index) \u00d7 elementSize) + offset.\nLet elementType be the Element Type value in Table 62 for arrayTypeName.\nPerform SetValueInBuffer(buffer, indexedPosition, elementType, numValue, true, Unordered).\nReturn NormalCompletion(undefined).\n\n", "includes": ["testTypedArray.js"], "features": ["Symbol", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/of/argument-number-value-throws.js", "esid": " sec-%typedarray%.of", "description": " >Return abrupt from object value\n", "info": " |22.2.2.2 %TypedArray%.of ( ...items )\n\n...\n7. Repeat, while k < len\n...\nc. Perform ? Set(newObj, Pk, kValue, true).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/of/custom-ctor-returns-other-instance.js", "esid": " sec-%typedarray%.of", "description": " >Custom constructor can return any TypedArray instance with higher or same\nlength\n", "info": " |%TypedArray%.of ( ...items )\n\n1. Let len be the actual number of arguments passed to this function.\n...\n5. Let newObj be ? TypedArrayCreate(C, \u00ab len \u00bb).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/of/custom-ctor.js", "esid": " sec-%typedarray%.of", "description": " >Calls and return abrupt from custom constructor\n", "info": " |22.2.2.2 %TypedArray%.of ( ...items )\n\n...\n5. Let newObj be ? TypedArrayCreate(C, \u00ablen\u00bb).\n...\n\n22.2.4.6 TypedArrayCreate ( constructor, argumentList )\n\n1. Let newTypedArray be ? Construct(constructor, argumentList).\n2. Perform ? ValidateTypedArray(newTypedArray).\n...\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/of/nan-conversion.js", "esid": " sec-%typedarray%.of", "description": " >Test NaN conversions\n", "info": " |IntegerIndexedElementSet ( O, index, value )\n\nAssert: O is an Integer-Indexed exotic object.\nIf O.[[ContentType]] is BigInt, let numValue be ? ToBigInt(value).\nOtherwise, let numValue be ? ToNumber(value).\nLet buffer be O.[[ViewedArrayBuffer]].\nIf IsDetachedBuffer(buffer) is false and ! IsValidIntegerIndex(O, index) is true, then\nLet offset be O.[[ByteOffset]].\nLet arrayTypeName be the String value of O.[[TypedArrayName]].\nLet elementSize be the Element Size value specified in Table 62 for arrayTypeName.\nLet indexedPosition be (\u211d(index) \u00d7 elementSize) + offset.\nLet elementType be the Element Type value in Table 62 for arrayTypeName.\nPerform SetValueInBuffer(buffer, indexedPosition, elementType, numValue, true, Unordered).\nReturn NormalCompletion(undefined).\n\n24.1.1.6 SetValueInBuffer ( arrayBuffer, byteIndex, type, value [ ,\nisLittleEndian ] )\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/of/new-instance-empty.js", "esid": " sec-%typedarray%.of", "description": " >Return a new empty TypedArray\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/of/new-instance-from-zero.js", "esid": " sec-%typedarray%.of", "description": " >Return a new TypedArray using -0 and +0 values\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/of/new-instance-using-custom-ctor.js", "esid": " sec-%typedarray%.of", "description": " >Return a new TypedArray using a custom Constructor\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/of/new-instance.js", "esid": " sec-%typedarray%.of", "description": " >Return a new TypedArray\n", "info": " |9.4.5.5 [[Set]] ( P, V, Receiver)\n\n...\n2. If Type(P) is String and if SameValue(O, Receiver) is true, then\na. Let numericIndex be ! CanonicalNumericIndexString(P).\nb. If numericIndex is not undefined, then\ni. Perform ? IntegerIndexedElementSet(O, numericIndex, V).\nii. Return true.\n...\n\nIntegerIndexedElementSet ( O, index, value )\n\nAssert: O is an Integer-Indexed exotic object.\nIf O.[[ContentType]] is BigInt, let numValue be ? ToBigInt(value).\nOtherwise, let numValue be ? ToNumber(value).\nLet buffer be O.[[ViewedArrayBuffer]].\nIf IsDetachedBuffer(buffer) is false and ! IsValidIntegerIndex(O, index) is true, then\nLet offset be O.[[ByteOffset]].\nLet arrayTypeName be the String value of O.[[TypedArrayName]].\nLet elementSize be the Element Size value specified in Table 62 for arrayTypeName.\nLet indexedPosition be (\u211d(index) \u00d7 elementSize) + offset.\nLet elementType be the Element Type value in Table 62 for arrayTypeName.\nPerform SetValueInBuffer(buffer, indexedPosition, elementType, numValue, true, Unordered).\nReturn NormalCompletion(undefined).\n\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/prototype/Symbol.iterator.js", "esid": " sec-%typedarray%.prototype-@@iterator", "description": " >_TypedArray_.prototype has no own property @@iterator\n", "includes": ["testTypedArray.js"], "features": ["Symbol.iterator", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/prototype/Symbol.toStringTag/inherited.js", "esid": " sec-get-%typedarray%.prototype-@@tostringtag", "description": " >_TypedArray_.prototype[@@toStringTag] is inherited from %TypedArray%\n_TypedArray_.prototype has no own property @@toStringTag\n", "includes": ["testTypedArray.js"], "features": ["Symbol.toStringTag", "TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/prototype/buffer/inherited.js", "esid": " sec-get-%typedarray%.prototype.buffer", "description": " >_TypedArray_.prototype has no own property \"buffer\"\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/prototype/byteLength/inherited.js", "esid": " sec-get-%typedarray%.prototype.bytelength", "description": " >_TypedArray_.prototype has no own property \"byteLength\"\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/prototype/byteOffset/inherited.js", "esid": " sec-get-%typedarray%.prototype.byteoffset", "description": " >_TypedArray_.prototype has no own property \"byteOffset\"\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/prototype/length/inherited.js", "esid": " sec-get-%typedarray%.prototype.length", "description": " >_TypedArray_.prototype has no own property \"length\"\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/prototype/set/inherited.js", "esid": " sec-%typedarray%.prototype.set", "description": " >_TypedArray_.prototype has no own property \"set\"\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/TypedArrayConstructors/prototype/subarray/inherited.js", "esid": " sec-%typedarray%.prototype.subarray", "description": " >_TypedArray_.prototype has no own property \"subarray\"\n", "includes": ["testTypedArray.js"], "features": ["TypedArray"]}, {"path": "./test262-main/test/built-ins/WeakMap/get-set-method-failure.js", "esid": " sec-weakmap-iterable", "description": " >Return abrupt after getting `set` method.\n", "info": " |23.3.1.1 WeakMap ( [ iterable ] )\n\n...\n5. If iterable is not present, let iterable be undefined.\n6. If iterable is either undefined or null, let iter be undefined.\n7. Else,\na. Let adder be Get(map, \"set\").\nb. ReturnIfAbrupt(adder).\n...\n"}, {"path": "./test262-main/test/built-ins/WeakMap/iterable-failure.js", "esid": " sec-weakmap-iterable", "description": " >If the iterable argument is undefined, return new WeakMap object.\n", "info": " |23.3.1.1 WeakMap ( [ iterable ] )\n\n...\n7. Else,\nd. Let iter be GetIterator(iterable).\ne. ReturnIfAbrupt(iter).\n...\n"}, {"path": "./test262-main/test/built-ins/WeakMap/iterable.js", "esid": " sec-weakmap-iterable", "description": " >Returns the new WeakMap adding the objects from the iterable parameter.\n", "info": " |WeakMap ( [ iterable ] )\n\n...\n9. Repeat\nk. Let status be Call(adder, map, \u00abk.[[value]], v.[[value]]\u00bb).\nl. If status is an abrupt completion, return IteratorClose(iter, status).\n"}, {"path": "./test262-main/test/built-ins/WeakMap/iterator-items-are-not-object.js", "esid": " sec-weakmap-iterable", "description": " >Throws a TypeError if iterable itens are not Objects.\n", "info": " |WeakMap ( [ iterable ] )\n\n...\n9. Repeat\n...\nd. Let nextItem be IteratorValue(next).\ne. ReturnIfAbrupt(nextItem).\nf. If Type(nextItem) is not Object,\ni. Let error be Completion{[[type]]: throw, [[value]]: a newly created\nTypeError object, [[target]]:empty}.\nii. Return IteratorClose(iter, error).\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/WeakMap/iterator-next-failure.js", "esid": " sec-weakmap-iterable", "description": " >Return abrupt from next iterator step.\n", "info": " |23.3.1.1 WeakMap ( [ iterable ] )\n\n...\n9. Repeat\na. Let next be IteratorStep(iter).\nb. ReturnIfAbrupt(next).\n...\n", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/built-ins/WeakMap/iterator-value-failure.js", "esid": " sec-weakmap-iterable", "description": " >If the iterable argument is empty, return new WeakMap object.\n", "info": " |23.3.1.1 WeakMap ( [ iterable ] )\n\n...\n9. Repeat\n...\nd. Let nextItem be IteratorValue(next).\ne. ReturnIfAbrupt(nextItem).\n...\n", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/built-ins/WeakMap/name.js", "esid": " sec-weakmap-iterable", "description": " >WeakMap ( [ iterable ] )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/WeakMap/prototype/delete/delete-entry-initial-iterable.js", "esid": " sec-weakmap.prototype.delete", "description": " >Delete an entry from initial iterable.\n", "info": " |WeakMap.prototype.delete ( value )\n\n...\n5. Let entries be the List that is the value of M\u2019s [[WeakMapData]] internal\nslot.\n6. If Type(key) is not Object, return false.\n7. Repeat for each Record {[[key]], [[value]]} p that is an element of\nentries,\na. If p.[[key]] is not empty and SameValue(p.[[key]], key) is true, then\ni. Set p.[[key]] to empty.\nii. Set p.[[value]] to empty.\niii. Return true.\n...\n"}, {"path": "./test262-main/test/built-ins/WeakMap/prototype/delete/length.js", "esid": " sec-weakmap.prototype.delete", "description": " >WeakMap.prototype.delete.length value and writability.\n", "info": " |WeakMap.prototype.delete ( value )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/WeakMap/prototype/delete/name.js", "esid": " sec-weakmap.prototype.delete", "description": " >WeakMap.prototype.delete.name value and writability.\n", "info": " |WeakMap.prototype.delete ( value )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/WeakMap/prototype/delete/returns-false-value-is-not-object.js", "esid": " sec-weakmap.prototype.delete", "description": " >Return false if value is not an Object.\n", "info": " |WeakMap.prototype.delete ( value )\n\n5. If Type(key) is not Object, return false.\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/WeakMap/prototype/delete/this-not-object-throw-symbol.js", "esid": " sec-weakmap.prototype.delete", "description": " Throws TypeError if `this` is not Object.", "info": " |WeakMap.prototype.delete ( value )\n\n1. Let M be the this value.\n2. If Type(M) is not Object, throw a TypeError exception.\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/WeakMap/prototype/get/name.js", "esid": " sec-weakmap.prototype.get", "description": " >WeakMap.prototype.get.name value and descriptor.\n", "info": " |WeakMap.prototype.get ( key )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/WeakMap/prototype/get/returns-undefined-key-is-not-object.js", "esid": " sec-weakmap.prototype.get", "description": " >Returns undefined when key is not an Object.\n", "info": " |WeakMap.prototype.get ( key )\n\n...\n4. Let entries be the List that is the value of M\u2019s [[WeakMapData]] internal\nslot.\n5. If Type(key) is not Object, return undefined.\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/WeakMap/prototype/get/returns-value.js", "esid": " sec-weakmap.prototype.get", "description": " >Returns the value from the specified key\n", "info": " |WeakMap.prototype.get ( key )\n\n4. Let entries be the List that is the value of M\u2019s [[WeakMapData]] internal\nslot.\n5. If Type(key) is not Object, return undefined.\n6. Repeat for each Record {[[key]], [[value]]} p that is an element of\nentries,\na. If p.[[key]] is not empty and SameValue(p.[[key]], key) is true, return\np.[[value]].\n...\n"}, {"path": "./test262-main/test/built-ins/WeakMap/prototype/get/this-not-object-throw.js", "esid": " sec-weakmap.prototype.get", "description": " >Throws a TypeError if `this` value is not an Object.\n", "info": " |WeakMap.prototype.get ( key )\n\n1. Let M be the this value.\n2. If Type(M) is not Object, throw a TypeError exception.\n...\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/WeakMap/prototype/has/length.js", "esid": " sec-weakmap.prototype.has", "description": " >WeakMap.prototype.has.length value and writability.\n", "info": " |WeakMap.prototype.has ( value )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/WeakMap/prototype/has/name.js", "esid": " sec-weakmap.prototype.has", "description": " >WeakMap.prototype.has.name value and writability.\n", "info": " |WeakMap.prototype.has ( value )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/WeakMap/prototype/has/returns-false-when-value-is-not-object.js", "esid": " sec-weakmap.prototype.has", "description": " >Returns false if value is not an Object.\n", "info": " |WeakMap.prototype.has ( value )\n\n5. If Type(key) is not Object, return false.\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/WeakMap/prototype/has/this-not-object-throw-symbol.js", "esid": " sec-weakmap.prototype.has", "description": " Throws TypeError if `this` is not Object.", "info": " |WeakMap.prototype.has ( value )\n\n1. Let M be the this value.\n2. If Type(M) is not Object, throw a TypeError exception.\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/WeakMap/prototype/set/key-not-object-throw.js", "esid": " sec-weakmap.prototype.set", "description": " Throws TypeError if `key` is not Object.", "info": " |WeakMap.prototype.set ( key, value )\n\n5. If Type(key) is not Object, throw a TypeError exception.\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/WeakMap/prototype/set/length.js", "esid": " sec-weakmap.prototype.set", "description": " WeakMap.prototype.set.length descriptor", "info": " |WeakMap.prototype.set ( key, value )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/WeakMap/prototype/set/name.js", "esid": " sec-weakmap.prototype.set", "description": " WeakMap.prototype.set.name descriptor", "info": " |WeakMap.prototype.set ( value )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/WeakMap/prototype/set/returns-this-when-ignoring-duplicate.js", "esid": " sec-weakmap.prototype.set", "description": " Returns `this` when new value is duplicate.", "info": " |WeakMap.prototype.set ( key, value )\n\n1. Let M be the this value.\n...\n6. Repeat for each Record {[[key]], [[value]]} p that is an element of\nentries,\na. If p.[[key]] is not empty and SameValue(p.[[key]], key) is true, then\ni. Set p.[[value]] to value.\nii. Return M.\n...\n"}, {"path": "./test262-main/test/built-ins/WeakMap/prototype/set/returns-this.js", "esid": " sec-weakmap.prototype.set", "description": " Returns `this` after setting a new value.", "info": " |WeakMap.prototype.set ( key, value )\n\n1. Let M be this value.\n...\n9. Return M.\n\n"}, {"path": "./test262-main/test/built-ins/WeakMap/prototype/set/this-not-object-throw-symbol.js", "esid": " sec-weakmap.prototype.set", "description": " Throws TypeError if `this` is not Object.", "info": " |WeakMap.prototype.set ( key, value )\n\n1. Let M be the this value.\n2. If Type(M) is not Object, throw a TypeError exception.\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/WeakMap/set-not-callable-throws.js", "esid": " sec-weakmap-iterable", "description": " >Throws TypeError if add is not callable on constructor call.\n", "info": " |23.3.1.1 WeakMap ( [ iterable ] )\n\n...\n5. If iterable is not present, let iterable be undefined.\n6. If iterable is either undefined or null, let iter be undefined.\n7. Else,\na. Let adder be Get(map, \"set\").\nb. ReturnIfAbrupt(adder).\nc. If IsCallable(adder) is false, throw a TypeError exception.\n...\n"}, {"path": "./test262-main/test/built-ins/WeakSet/add-not-callable-throws.js", "esid": " sec-weakset-iterable", "description": " >Throws TypeError if add is not callable on constructor call.\n", "info": " |23.4.1.1 WeakSet ( [ iterable ] )\n\n...\n5. If iterable is not present, let iterable be undefined.\n6. If iterable is either undefined or null, let iter be undefined.\n7. Else,\na. Let adder be Get(set, \"add\").\nb. ReturnIfAbrupt(adder).\nc. If IsCallable(adder) is false, throw a TypeError exception.\n...\n"}, {"path": "./test262-main/test/built-ins/WeakSet/constructor.js", "esid": " sec-weakset-constructor", "description": " >The WeakSet constructor is the %WeakSet% intrinsic object and the initial\nvalue of the WeakSet property of the global object.\n"}, {"path": "./test262-main/test/built-ins/WeakSet/empty-iterable.js", "esid": " sec-weakset-iterable", "description": " >If the iterable argument is empty, return new Weakset object.\n", "info": " |23.4.1.1 WeakSet ( [ iterable ] )\n\n...\n9. Repeat\na. Let next be IteratorStep(iter).\nb. ReturnIfAbrupt(next).\nc. If next is false, return set.\n...\n"}, {"path": "./test262-main/test/built-ins/WeakSet/get-add-method-failure.js", "esid": " sec-weakset-iterable", "description": " >Return abrupt after getting `add` method.\n", "info": " |23.4.1.1 WeakSet ( [ iterable ] )\n\n...\n5. If iterable is not present, let iterable be undefined.\n6. If iterable is either undefined or null, let iter be undefined.\n7. Else,\na. Let adder be Get(set, \"add\").\nb. ReturnIfAbrupt(adder).\n...\n"}, {"path": "./test262-main/test/built-ins/WeakSet/iterable-failure.js", "esid": " sec-weakset-iterable", "description": " >If the iterable argument is undefined, return new Weakset object.\n", "info": " |23.4.1.1 WeakSet ( [ iterable ] )\n\n...\n7. Else,\nd. Let iter be GetIterator(iterable).\ne. ReturnIfAbrupt(iter).\n...\n"}, {"path": "./test262-main/test/built-ins/WeakSet/iterable.js", "esid": " sec-weakset-iterable", "description": " >Returns the new WeakSet adding the objects from the iterable parameter.\n", "info": " |WeakSet ( [ iterable ] )\n\n...\n9. Repeat\nf. Let status be Call(adder, set, \u00abnextValue\u00bb).\ng. If status is an abrupt completion, return IteratorClose(iter, status).\n"}, {"path": "./test262-main/test/built-ins/WeakSet/iterator-next-failure.js", "esid": " sec-weakset-iterable", "description": " >Return abrupt from next iterator step.\n", "info": " |23.4.1.1 WeakSet ( [ iterable ] )\n\n...\n9. Repeat\na. Let next be IteratorStep(iter).\nb. ReturnIfAbrupt(next).\n...\n", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/built-ins/WeakSet/iterator-value-failure.js", "esid": " sec-weakset-iterable", "description": " >If the iterable argument is empty, return new Weakset object.\n", "info": " |23.4.1.1 WeakSet ( [ iterable ] )\n\n...\n9. Repeat\n...\nd. Let nextValue be IteratorValue(next).\ne. ReturnIfAbrupt(nextValue).\n", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/built-ins/WeakSet/name.js", "esid": " sec-weakset-iterable", "description": " >WeakSet ( [ iterable ] )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/WeakSet/no-iterable.js", "esid": " sec-weakset-iterable", "description": " >If the iterable argument is undefined, return new Weakset object.\n", "info": " |23.4.1.1 WeakSet ( [ iterable ] )\n\n...\n5. If iterable is not present, let iterable be undefined.\n6. If iterable is either undefined or null, let iter be undefined.\n...\n8. If iter is undefined, return set.\n...\n"}, {"path": "./test262-main/test/built-ins/WeakSet/properties-of-the-weakset-prototype-object.js", "esid": " sec-properties-of-the-weakset-prototype-object", "description": " >The WeakSet.prototype's prototype is Object.prototype.\n", "info": " |23.4.3 Properties of the WeakSet Prototype Object\n\nThe WeakSet prototype object is the intrinsic object %WeakSetPrototype%. The\nvalue of the [[Prototype]] internal slot of the WeakSet prototype object is\nthe intrinsic object %ObjectPrototype% (19.1.3). The WeakSet prototype\nobject is an ordinary object. It does not have a [[WeakSetData]] internal\nslot.\n"}, {"path": "./test262-main/test/built-ins/WeakSet/prototype/add/add.js", "esid": " sec-weakset.prototype.add", "description": " WeakSet.prototype.add property descriptor", "info": " |WeakSet.prototype.add ( value )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/WeakSet/prototype/add/adds-element.js", "esid": " sec-weakset.prototype.add", "description": " >Appends value as the last element of entries.\n", "info": " |WeakSet.prototype.add ( value )\n\n...\n7. Append value as the last element of entries.\n...\n"}, {"path": "./test262-main/test/built-ins/WeakSet/prototype/add/does-not-have-weaksetdata-internal-slot-array.js", "esid": " sec-weakset.prototype.add", "description": " >Throws TypeError if context doesn't have a [[WeakSetData]] internal slot.\n", "info": " |WeakSet.prototype.add ( value )\n\n...\n3. If S does not have a [[WeakSetData]] internal slot, throw a TypeError\nexception.\n...\n\n"}, {"path": "./test262-main/test/built-ins/WeakSet/prototype/add/does-not-have-weaksetdata-internal-slot-map.js", "esid": " sec-weakset.prototype.add", "description": " >Throws TypeError if context doesn't have a [[WeakSetData]] internal slot.\n", "info": " |WeakSet.prototype.add ( value )\n\n...\n3. If S does not have a [[WeakSetData]] internal slot, throw a TypeError\nexception.\n...\n\n"}, {"path": "./test262-main/test/built-ins/WeakSet/prototype/add/does-not-have-weaksetdata-internal-slot-object.js", "esid": " sec-weakset.prototype.add", "description": " >Throws TypeError if context doesn't have a [[WeakSetData]] internal slot.\n", "info": " |WeakSet.prototype.add ( value )\n\n...\n3. If S does not have a [[WeakSetData]] internal slot, throw a TypeError\nexception.\n...\n\n"}, {"path": "./test262-main/test/built-ins/WeakSet/prototype/add/does-not-have-weaksetdata-internal-slot-set.js", "esid": " sec-weakset.prototype.add", "description": " >Throws TypeError if context doesn't have a [[WeakSetData]] internal slot.\n", "info": " |WeakSet.prototype.add ( value )\n\n...\n3. If S does not have a [[WeakSetData]] internal slot, throw a TypeError\nexception.\n...\n", "features": ["Set"]}, {"path": "./test262-main/test/built-ins/WeakSet/prototype/add/does-not-have-weaksetdata-internal-slot-weakset-prototype.js", "esid": " sec-weakset.prototype.add", "description": " >Throws TypeError if context doesn't have a [[WeakSetData]] internal slot.\n", "info": " |WeakSet.prototype.add ( value )\n\n...\n3. If S does not have a [[WeakSetData]] internal slot, throw a TypeError\nexception.\n...\n\n"}, {"path": "./test262-main/test/built-ins/WeakSet/prototype/add/length.js", "esid": " sec-weakset.prototype.add", "description": " WeakSet.prototype.add.length descriptor", "info": " |WeakSet.prototype.add ( value )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/WeakSet/prototype/add/name.js", "esid": " sec-weakset.prototype.add", "description": " WeakSet.prototype.add.name descriptor", "info": " |WeakSet.prototype.add ( value )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/WeakSet/prototype/add/not-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >WeakSet.prototype.add does not implement [[Construct]], is not new-able\n", "info": " |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n", "includes": ["isConstructor.js"], "features": ["Reflect.construct", "WeakSet", "arrow-function"]}, {"path": "./test262-main/test/built-ins/WeakSet/prototype/add/returns-this-when-ignoring-duplicate.js", "esid": " sec-weakset.prototype.add", "description": " Returns `this` when new value is duplicate.", "info": " |WeakSet.prototype.add ( value )\n\n1. Let S be this value.\n...\n6. Repeat for each e that is an element of entries,\na. If e is not empty and SameValueZero(e, value) is true, then\ni. Return S.\n...\n"}, {"path": "./test262-main/test/built-ins/WeakSet/prototype/add/returns-this.js", "esid": " sec-weakset.prototype.add", "description": " Returns `this` after adding a new value.", "info": " |WeakSet.prototype.add ( value )\n\n1. Let S be this value.\n...\n8. Return S.\n\n"}, {"path": "./test262-main/test/built-ins/WeakSet/prototype/add/this-not-object-throw-boolean.js", "esid": " sec-weakset.prototype.add", "description": " Throws TypeError if `this` is not Object.", "info": " |WeakSet.prototype.add ( value )\n\n1. Let S be the this value.\n2. If Type(S) is not Object, throw a TypeError exception.\n\n"}, {"path": "./test262-main/test/built-ins/WeakSet/prototype/add/this-not-object-throw-null.js", "esid": " sec-weakset.prototype.add", "description": " Throws TypeError if `this` is not Object.", "info": " |WeakSet.prototype.add ( value )\n\n1. Let S be the this value.\n2. If Type(S) is not Object, throw a TypeError exception.\n\n"}, {"path": "./test262-main/test/built-ins/WeakSet/prototype/add/this-not-object-throw-number.js", "esid": " sec-weakset.prototype.add", "description": " Throws TypeError if `this` is not Object.", "info": " |WeakSet.prototype.add ( value )\n\n1. Let S be the this value.\n2. If Type(S) is not Object, throw a TypeError exception.\n\n"}, {"path": "./test262-main/test/built-ins/WeakSet/prototype/add/this-not-object-throw-string.js", "esid": " sec-weakset.prototype.add", "description": " Throws TypeError if `this` is not Object.", "info": " |WeakSet.prototype.add ( value )\n\n1. Let S be the this value.\n2. If Type(S) is not Object, throw a TypeError exception.\n\n"}, {"path": "./test262-main/test/built-ins/WeakSet/prototype/add/this-not-object-throw-symbol.js", "esid": " sec-weakset.prototype.add", "description": " Throws TypeError if `this` is not Object.", "info": " |WeakSet.prototype.add ( value )\n\n1. Let S be the this value.\n2. If Type(S) is not Object, throw a TypeError exception.\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/WeakSet/prototype/add/this-not-object-throw-undefined.js", "esid": " sec-weakset.prototype.add", "description": " Throws TypeError if `this` is not Object.", "info": " |WeakSet.prototype.add ( value )\n\n1. Let S be the this value.\n2. If Type(S) is not Object, throw a TypeError exception.\n\n"}, {"path": "./test262-main/test/built-ins/WeakSet/prototype/add/value-not-object-throw.js", "esid": " sec-weakset.prototype.add", "description": " Throws TypeError if `value` is not Object.", "info": " |WeakSet.prototype.add ( value )\n\n4. If Type(value) is not Object, throw a TypeError exception.\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/WeakSet/prototype/constructor/weakset-prototype-constructor-intrinsic.js", "esid": " sec-weakset.prototype.constructor", "description": " >The initial value of WeakSet.prototype.constructor is the %WeakSet%\nintrinsic object.\n"}, {"path": "./test262-main/test/built-ins/WeakSet/prototype/constructor/weakset-prototype-constructor.js", "esid": " sec-weakset.prototype.constructor", "description": " >WeakSet.prototype.constructor property descriptor\n", "info": " |WeakSet ( [ iterable ] )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/WeakSet/prototype/delete/delete-entry-initial-iterable.js", "esid": " sec-weakset.prototype.delete", "description": " >Delete an entry from initial iterable.\n", "info": " |WeakSet.prototype.delete ( value )\n\n...\n5. Let entries be the List that is the value of S\u2019s [[WeakSetData]] internal\nslot.\n6. Repeat for each e that is an element of entries,\na. If e is not empty and SameValue(e, value) is true, then\ni. Replace the element of entries whose value is e with an element whose\nvalue is empty.\nii. Return true.\n...\n"}, {"path": "./test262-main/test/built-ins/WeakSet/prototype/delete/delete-entry.js", "esid": " sec-weakset.prototype.delete", "description": " >Delete an entry.\n", "info": " |WeakSet.prototype.delete ( value )\n\n...\n5. Let entries be the List that is the value of S\u2019s [[WeakSetData]] internal\nslot.\n6. Repeat for each e that is an element of entries,\na. If e is not empty and SameValue(e, value) is true, then\ni. Replace the element of entries whose value is e with an element whose\nvalue is empty.\nii. Return true.\n...\n\n"}, {"path": "./test262-main/test/built-ins/WeakSet/prototype/delete/delete.js", "esid": " sec-weakset.prototype.delete", "description": " >WeakSet.prototype.delete property descriptor\n", "info": " |WeakSet.prototype.delete ( value )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/WeakSet/prototype/delete/does-not-have-weaksetdata-internal-slot-array.js", "esid": " sec-weakset.prototype.delete", "description": " >Throws TypeError if context doesn't have a [[WeakSetData]] internal slot.\n", "info": " |WeakSet.prototype.delete ( value )\n\n...\n3. If S does not have a [[WeakSetData]] internal slot, throw a TypeError\nexception.\n...\n"}, {"path": "./test262-main/test/built-ins/WeakSet/prototype/delete/does-not-have-weaksetdata-internal-slot-map.js", "esid": " sec-weakset.prototype.delete", "description": " >Throws TypeError if context doesn't have a [[WeakSetData]] internal slot.\n", "info": " |WeakSet.prototype.delete ( value )\n\n...\n3. If S does not have a [[WeakSetData]] internal slot, throw a TypeError\nexception.\n...\n"}, {"path": "./test262-main/test/built-ins/WeakSet/prototype/delete/does-not-have-weaksetdata-internal-slot-object.js", "esid": " sec-weakset.prototype.delete", "description": " >Throws TypeError if context doesn't have a [[WeakSetData]] internal slot.\n", "info": " |WeakSet.prototype.delete ( value )\n\n...\n3. If S does not have a [[WeakSetData]] internal slot, throw a TypeError\nexception.\n...\n"}, {"path": "./test262-main/test/built-ins/WeakSet/prototype/delete/does-not-have-weaksetdata-internal-slot-set.js", "esid": " sec-weakset.prototype.delete", "description": " >Throws TypeError if context doesn't have a [[WeakSetData]] internal slot.\n", "info": " |WeakSet.prototype.delete ( value )\n\n...\n3. If S does not have a [[WeakSetData]] internal slot, throw a TypeError\nexception.\n...\n", "features": ["Set"]}, {"path": "./test262-main/test/built-ins/WeakSet/prototype/delete/does-not-have-weaksetdata-internal-slot-weakset-prototype.js", "esid": " sec-weakset.prototype.delete", "description": " >Throws TypeError if context doesn't have a [[WeakSetData]] internal slot.\n", "info": " |WeakSet.prototype.delete ( value )\n\n...\n3. If S does not have a [[WeakSetData]] internal slot, throw a TypeError\nexception.\n...\n"}, {"path": "./test262-main/test/built-ins/WeakSet/prototype/delete/length.js", "esid": " sec-weakset.prototype.delete", "description": " >WeakSet.prototype.delete.length value and writability.\n", "info": " |WeakSet.prototype.delete ( value )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/WeakSet/prototype/delete/name.js", "esid": " sec-weakset.prototype.delete", "description": " >WeakSet.prototype.delete.name value and writability.\n", "info": " |WeakSet.prototype.delete ( value )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/WeakSet/prototype/delete/not-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >WeakSet.prototype.delete does not implement [[Construct]], is not new-able\n", "info": " |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n", "includes": ["isConstructor.js"], "features": ["Reflect.construct", "WeakSet", "arrow-function"]}, {"path": "./test262-main/test/built-ins/WeakSet/prototype/delete/returns-false-value-is-not-object.js", "esid": " sec-weakset.prototype.delete", "description": " >Return false if value is not a non-null Object.\n", "info": " |WeakSet.prototype.delete ( value )\n\n4. If Type(value) is not Object, return false.\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/WeakSet/prototype/delete/returns-false-when-delete-is-noop.js", "esid": " sec-weakset.prototype.delete", "description": " >Return false if entry wasn't in the WeakSet.\n", "info": " |WeakSet.prototype.delete ( value )\n\n...\n7. Return false.\n\n"}, {"path": "./test262-main/test/built-ins/WeakSet/prototype/delete/this-not-object-throw-boolean.js", "esid": " sec-weakset.prototype.delete", "description": " Throws TypeError if `this` is not Object.", "info": " |WeakSet.prototype.delete ( value )\n\n1. Let S be the this value.\n2. If Type(S) is not Object, throw a TypeError exception.\n"}, {"path": "./test262-main/test/built-ins/WeakSet/prototype/delete/this-not-object-throw-null.js", "esid": " sec-weakset.prototype.delete", "description": " Throws TypeError if `this` is not Object.", "info": " |WeakSet.prototype.delete ( value )\n\n1. Let S be the this value.\n2. If Type(S) is not Object, throw a TypeError exception.\n"}, {"path": "./test262-main/test/built-ins/WeakSet/prototype/delete/this-not-object-throw-number.js", "esid": " sec-weakset.prototype.delete", "description": " Throws TypeError if `this` is not Object.", "info": " |WeakSet.prototype.delete ( value )\n\n1. Let S be the this value.\n2. If Type(S) is not Object, throw a TypeError exception.\n"}, {"path": "./test262-main/test/built-ins/WeakSet/prototype/delete/this-not-object-throw-string.js", "esid": " sec-weakset.prototype.delete", "description": " Throws TypeError if `this` is not Object.", "info": " |WeakSet.prototype.delete ( value )\n\n1. Let S be the this value.\n2. If Type(S) is not Object, throw a TypeError exception.\n"}, {"path": "./test262-main/test/built-ins/WeakSet/prototype/delete/this-not-object-throw-symbol.js", "esid": " sec-weakset.prototype.delete", "description": " Throws TypeError if `this` is not Object.", "info": " |WeakSet.prototype.delete ( value )\n\n1. Let S be the this value.\n2. If Type(S) is not Object, throw a TypeError exception.\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/WeakSet/prototype/delete/this-not-object-throw-undefined.js", "esid": " sec-weakset.prototype.delete", "description": " Throws TypeError if `this` is not Object.", "info": " |WeakSet.prototype.delete ( value )\n\n1. Let S be the this value.\n2. If Type(S) is not Object, throw a TypeError exception.\n"}, {"path": "./test262-main/test/built-ins/WeakSet/prototype/has/does-not-have-weaksetdata-internal-slot-array.js", "esid": " sec-weakset.prototype.has", "description": " >Throws TypeError if context doesn't have a [[WeakSetData]] internal slot.\n", "info": " |WeakSet.prototype.has ( value )\n\n...\n3. If S does not have a [[WeakSetData]] internal slot, throw a TypeError\nexception.\n...\n"}, {"path": "./test262-main/test/built-ins/WeakSet/prototype/has/does-not-have-weaksetdata-internal-slot-map.js", "esid": " sec-weakset.prototype.has", "description": " >Throws TypeError if context doesn't have a [[WeakSetData]] internal slot.\n", "info": " |WeakSet.prototype.has ( value )\n\n...\n3. If S does not have a [[WeakSetData]] internal slot, throw a TypeError\nexception.\n...\n"}, {"path": "./test262-main/test/built-ins/WeakSet/prototype/has/does-not-have-weaksetdata-internal-slot-object.js", "esid": " sec-weakset.prototype.has", "description": " >Throws TypeError if context doesn't have a [[WeakSetData]] internal slot.\n", "info": " |WeakSet.prototype.has ( value )\n\n...\n3. If S does not have a [[WeakSetData]] internal slot, throw a TypeError\nexception.\n...\n"}, {"path": "./test262-main/test/built-ins/WeakSet/prototype/has/does-not-have-weaksetdata-internal-slot-set.js", "esid": " sec-weakset.prototype.has", "description": " >Throws TypeError if context doesn't have a [[WeakSetData]] internal slot.\n", "info": " |WeakSet.prototype.has ( value )\n\n...\n3. If S does not have a [[WeakSetData]] internal slot, throw a TypeError\nexception.\n...\n", "features": ["Set"]}, {"path": "./test262-main/test/built-ins/WeakSet/prototype/has/does-not-have-weaksetdata-internal-slot-weakset-prototype.js", "esid": " sec-weakset.prototype.has", "description": " >Throws TypeError if context doesn't have a [[WeakSetData]] internal slot.\n", "info": " |WeakSet.prototype.has ( value )\n\n...\n3. If S does not have a [[WeakSetData]] internal slot, throw a TypeError\nexception.\n...\n"}, {"path": "./test262-main/test/built-ins/WeakSet/prototype/has/has.js", "esid": " sec-weakset.prototype.has", "description": " >WeakSet.prototype.has property descriptor\n", "info": " |WeakSet.prototype.has ( value )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/WeakSet/prototype/has/length.js", "esid": " sec-weakset.prototype.has", "description": " >WeakSet.prototype.has.length value and writability.\n", "info": " |WeakSet.prototype.has ( value )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/WeakSet/prototype/has/name.js", "esid": " sec-weakset.prototype.has", "description": " >WeakSet.prototype.has.name value and writability.\n", "info": " |WeakSet.prototype.has ( value )\n\n17 ECMAScript Standard Built-in Objects\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/WeakSet/prototype/has/not-a-constructor.js", "esid": " sec-ecmascript-standard-built-in-objects", "description": " >WeakSet.prototype.has does not implement [[Construct]], is not new-able\n", "info": " |ECMAScript Function Objects\n\nBuilt-in function objects that are not identified as constructors do not\nimplement the [[Construct]] internal method unless otherwise specified in\nthe description of a particular function.\n\nsec-evaluatenew\n\n...\n7. If IsConstructor(constructor) is false, throw a TypeError exception.\n...\n", "includes": ["isConstructor.js"], "features": ["Reflect.construct", "WeakSet", "arrow-function"]}, {"path": "./test262-main/test/built-ins/WeakSet/prototype/has/returns-false-when-value-is-not-object.js", "esid": " sec-weakset.prototype.has", "description": " >Returns false if value is not a non-null Object.\n", "info": " |WeakSet.prototype.has ( value )\n\n5. If Type(value) is not Object, return false.\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/WeakSet/prototype/has/returns-false-when-value-not-present.js", "esid": " sec-weakset.prototype.has", "description": " >Return false when value is not present in the WeakSet entries.\n", "info": " |WeakSet.prototype.has ( value )\n\n...\n7. Return false.\n\n"}, {"path": "./test262-main/test/built-ins/WeakSet/prototype/has/returns-true-when-value-present.js", "esid": " sec-weakset.prototype.has", "description": " >Returns true when value is present in the WeakSet entries list.\n", "info": " |WeakSet.prototype.has ( value )\n\n...\n6. Repeat for each e that is an element of entries,\na. If e is not empty and SameValue(e, value) is true, return true.\n...\n"}, {"path": "./test262-main/test/built-ins/WeakSet/prototype/has/this-not-object-throw-boolean.js", "esid": " sec-weakset.prototype.has", "description": " Throws TypeError if `this` is not Object.", "info": " |WeakSet.prototype.has ( value )\n\n1. Let S be the this value.\n2. If Type(S) is not Object, throw a TypeError exception.\n\n"}, {"path": "./test262-main/test/built-ins/WeakSet/prototype/has/this-not-object-throw-null.js", "esid": " sec-weakset.prototype.has", "description": " Throws TypeError if `this` is not Object.", "info": " |WeakSet.prototype.has ( value )\n\n1. Let S be the this value.\n2. If Type(S) is not Object, throw a TypeError exception.\n\n"}, {"path": "./test262-main/test/built-ins/WeakSet/prototype/has/this-not-object-throw-number.js", "esid": " sec-weakset.prototype.has", "description": " Throws TypeError if `this` is not Object.", "info": " |WeakSet.prototype.has ( value )\n\n1. Let S be the this value.\n2. If Type(S) is not Object, throw a TypeError exception.\n\n"}, {"path": "./test262-main/test/built-ins/WeakSet/prototype/has/this-not-object-throw-string.js", "esid": " sec-weakset.prototype.has", "description": " Throws TypeError if `this` is not Object.", "info": " |WeakSet.prototype.has ( value )\n\n1. Let S be the this value.\n2. If Type(S) is not Object, throw a TypeError exception.\n\n"}, {"path": "./test262-main/test/built-ins/WeakSet/prototype/has/this-not-object-throw-symbol.js", "esid": " sec-weakset.prototype.has", "description": " Throws TypeError if `this` is not Object.", "info": " |WeakSet.prototype.has ( value )\n\n1. Let S be the this value.\n2. If Type(S) is not Object, throw a TypeError exception.\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/WeakSet/prototype/has/this-not-object-throw-undefined.js", "esid": " sec-weakset.prototype.has", "description": " Throws TypeError if `this` is not Object.", "info": " |WeakSet.prototype.has ( value )\n\n1. Let S be the this value.\n2. If Type(S) is not Object, throw a TypeError exception.\n\n"}, {"path": "./test262-main/test/built-ins/WeakSet/prototype/prototype-attributes.js", "esid": " sec-weakset.prototype", "description": " >WeakSet.prototype is not writable, not enumerable and not configurable.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/WeakSet/prototype-of-weakset.js", "esid": " sec-properties-of-the-weakset-constructor", "description": " >The value of the [[Prototype]] internal slot of the WeakSet constructor\nis the intrinsic object %FunctionPrototype% (19.2.3).\n"}, {"path": "./test262-main/test/built-ins/WeakSet/symbol-disallowed-as-weakset-key.js", "esid": " sec-weakset.prototype.add", "description": " >Symbol may not be used as a WeakSet entry\n", "features": ["Symbol", "WeakSet"]}, {"path": "./test262-main/test/built-ins/WeakSet/undefined-newtarget.js", "esid": " sec-weakset-iterable", "description": " >The WeakSet constructor is the %WeakSet% intrinsic object and the initial\nvalue of the WeakSet property of the global object.\n", "info": " |23.4.1.1 WeakSet ( [ iterable ] )\n\n1. If NewTarget is undefined, throw a TypeError exception.\n"}, {"path": "./test262-main/test/built-ins/WeakSet/weakset.js", "esid": " sec-weakset-iterable", "description": " >WeakSet ( [ iterable ] )\n\n17 ECMAScript Standard Built-in Objects\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/decodeURI/S15.1.3.1_A5.2.js", "info": " The length property of decodeURI does not have the attribute DontDelete", "esid": " sec-decodeuri-encodeduri", "description": " Checking use hasOwnProperty, delete"}, {"path": "./test262-main/test/built-ins/decodeURI/name.js", "esid": " sec-decodeuri-encodeduri", "description": " >decodeURI.name is \"decodeURI\".\n", "info": " |decodeURI (encodedURI)\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/decodeURIComponent/S15.1.3.2_A5.2.js", "info": " |The length property of decodeURIComponent does not have the attribute\nDontDelete\n", "esid": " sec-decodeuricomponent-encodeduricomponent", "description": " Checking use hasOwnProperty, delete"}, {"path": "./test262-main/test/built-ins/decodeURIComponent/name.js", "esid": " sec-decodeuricomponent-encodeduricomponent", "description": " >decodeURIComponent.name is \"decodeURIComponent\".\n", "info": " |decodeURIComponent (encodedURIComponent)\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/encodeURI/S15.1.3.3_A5.2.js", "info": " The length property of encodeURI does not have the attribute DontDelete", "esid": " sec-encodeuri-uri", "description": " Checking use hasOwnProperty, delete"}, {"path": "./test262-main/test/built-ins/encodeURI/name.js", "esid": " sec-encodeuri-uri", "description": " >encodeURI.name is \"encodeURI\".\n", "info": " |encodeURI (uri)\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/encodeURIComponent/S15.1.3.4_A5.2.js", "info": " |The length property of encodeURIComponent does not have the attribute\nDontDelete\n", "esid": " sec-encodeuricomponent-uricomponent", "description": " Checking use hasOwnProperty, delete"}, {"path": "./test262-main/test/built-ins/encodeURIComponent/name.js", "esid": " sec-encodeuricomponent-uricomponent", "description": " >encodeURIComponent.name is \"encodeURIComponent\".\n", "info": " |encodeURIComponent (uriComponent)\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/eval/length-non-configurable.js", "info": " The length property of eval does not have the attribute DontDelete", "esid": " sec-eval-x", "description": " Checking use hasOwnProperty, delete"}, {"path": "./test262-main/test/built-ins/eval/name.js", "esid": " sec-eval-x", "description": " >eval.name is \"eval\".\n", "info": " |eval (x)\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/isFinite/length.js", "esid": " sec-isfinite-number", "description": " >The length property of isFinite is 1\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/isFinite/name.js", "esid": " sec-isfinite-number", "description": " >isFinite.name is \"isFinite\".\n", "info": " |isFinite (number)\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/isFinite/return-abrupt-from-tonumber-number-symbol.js", "esid": " sec-isfinite-number", "description": " >Throws a TypeError if number is a Symbol\n", "info": " |isFinite (number)\n\n1. Let num be ? ToNumber(number).\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/isNaN/length.js", "esid": " sec-isnan-number", "description": " >The length property of isNaN is 1\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/isNaN/name.js", "esid": " sec-isnan-number", "description": " >isNaN.name is \"isNaN\".\n", "info": " |isNaN (number)\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/isNaN/return-abrupt-from-tonumber-number-symbol.js", "esid": " sec-isnan-number", "description": " >Throws a TypeError if number is a Symbol\n", "info": " |isNaN (number)\n\n1. Let num be ? ToNumber(number).\n", "features": ["Symbol"]}, {"path": "./test262-main/test/built-ins/parseFloat/S15.1.2.3_A7.2.js", "info": " The length property of parseFloat does not have the attribute DontDelete", "esid": " sec-parsefloat-string", "description": " Checking use hasOwnProperty, delete"}, {"path": "./test262-main/test/built-ins/parseFloat/name.js", "esid": " sec-parsefloat-string", "description": " >parseFloat.name is \"parseFloat\".\n", "info": " |parseFloat (string)\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/built-ins/parseInt/S15.1.2.2_A9.2.js", "info": " The length property of parseInt does not have the attribute DontDelete", "esid": " sec-parseint-string-radix", "description": " Checking use hasOwnProperty, delete"}, {"path": "./test262-main/test/built-ins/parseInt/name.js", "esid": " sec-parseint-string-radix", "description": " >parseInt.name is \"parseInt\".\n", "info": " |parseInt (string , radix)\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/Collator/builtin.js", "version": 5, "esid": " 10.1_L15", "description": " >Tests that Intl.Collator meets the requirements for built-in\nobjects defined by the introduction of chapter 17 of the\nECMAScript Language Specification.\n", "author": " Norbert Lindenberg"}, {"path": "./test262-main/test/intl402/Collator/ignore-invalid-unicode-ext-values.js", "version": 5, "esid": " 10.2.3_b", "description": " >Tests that Intl.Collator does not accept Unicode localeextension\nkeys and values that are not allowed.\n", "author": " Norbert Lindenberg", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/intl402/Collator/instance-proto-and-extensible.js", "version": 5, "esid": " 10.1.3", "description": " >Tests that objects constructed by Intl.Collator have the specified\ninternal properties.\n", "author": " Norbert Lindenberg"}, {"path": "./test262-main/test/intl402/Collator/length.js", "esid": " sec-intl.collator", "description": " >Intl.Collator.length is 0.\n", "info": " |Intl.Collator ( [ locales [ , options ] ] )\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery built-in function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description. Optional parameters\n(which are indicated with brackets: [ ]) or rest parameters (which\nare shown using the form \u00ab...name\u00bb) are not included in the default\nargument count.\nUnless otherwise specified, the length property of a built-in function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/Collator/name.js", "esid": " sec-Intl.Collator", "description": " >Intl.Collator.name is \"Collator\".\n", "info": " |10.1.2 Intl.Collator ([ locales [ , options ]])\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/Collator/numeric-and-caseFirst.js", "version": 5, "esid": " 10.1.1_19_c", "description": " >Tests that the options numeric and caseFirst can beset through\neither the locale or the options.\n", "author": " Norbert Lindenberg"}, {"path": "./test262-main/test/intl402/Collator/prop-desc.js", "esid": " sec-intl.collator-intro", "description": " >\"Collator\" property of Intl.\n", "info": " |Intl.Collator (...)\n\n7 Requirements for Standard Built-in ECMAScript Objects\n\nUnless specified otherwise in this document, the objects, functions, and constructors\ndescribed in this standard are subject to the generic requirements and restrictions\nspecified for standard built-in ECMAScript objects in the ECMAScript 2018 Language\nSpecification, 9th edition, clause 17, or successor.\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the\nattributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true }\nunless otherwise specified.\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/Collator/prototype/builtin.js", "version": 5, "esid": " 10.3_L15", "description": " >Tests that Intl.Collator.prototype meets the requirements for\nbuilt-in objects defined by the introduction of chapter 17 of the\nECMAScript Language Specification.\n", "author": " Norbert Lindenberg"}, {"path": "./test262-main/test/intl402/Collator/prototype/compare/bound-to-collator-instance.js", "version": 5, "esid": " 10.3.2_1_c", "description": " Tests that compare function is bound to its Intl.Collator.", "author": " Norbert Lindenberg", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/intl402/Collator/prototype/compare/builtin.js", "version": 5, "esid": " 10.3.2_L15", "description": " >Tests that the getter for Intl.Collator.prototype.compare meets\nthe requirements for built-in objects defined by the introduction\nof chapter 17 of the ECMAScript Language Specification.\n", "author": " Norbert Lindenberg", "includes": ["isConstructor.js"], "features": ["Reflect.construct"]}, {"path": "./test262-main/test/intl402/Collator/prototype/compare/canonically-equivalent-strings.js", "version": 5, "esid": " 10.3.2_CS_a", "description": " >Tests that the function returned by\nIntl.Collator.prototype.comparereturns 0 when comparing Strings\nthat are considered canonically equivalentby the Unicode\nstandard.\n", "author": " Norbert Lindenberg"}, {"path": "./test262-main/test/intl402/Collator/prototype/compare/compare-function-builtin.js", "version": 5, "esid": " 10.3.2_1_a_L15", "description": " >Tests that the function returned by\nIntl.Collator.prototype.compare meets the requirements for\nbuilt-in objects defined by the introduction of chapter 17 of the\nECMAScript Language Specification.\n", "author": " Norbert Lindenberg", "includes": ["isConstructor.js"], "features": ["Reflect.construct"]}, {"path": "./test262-main/test/intl402/Collator/prototype/compare/compare-function-length.js", "esid": " sec-intl.collator.prototype.compare", "description": " >The length of the bound Collator compare function is 2.\n", "info": " |get Intl.Collator.prototype.compare\n\n...\n4. If collator.[[BoundCompare]] is undefined, then\na. Let F be a new built-in function object as defined in 10.3.4.\nb. Let bc be BoundFunctionCreate(F, collator, \u00ab \u00bb).\nc. Perform ! DefinePropertyOrThrow(bc, \"length\", PropertyDescriptor {[[Value]]: 2,\n[[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true}).\n...\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/Collator/prototype/compare/compare-function-property-order.js", "esid": " sec-createbuiltinfunction", "description": " Collator bound compare function property order", "info": " |Set order: \"length\", \"name\"\n", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/intl402/Collator/prototype/compare/length.js", "esid": " sec-intl.collator.prototype.compare", "description": " >get Intl.Collator.prototype.compare.length is 0.\n", "info": " |get Intl.Collator.prototype.compare\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery built-in function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description. Optional parameters\n(which are indicated with brackets: [ ]) or rest parameters (which\nare shown using the form \u00ab...name\u00bb) are not included in the default\nargument count.\nUnless otherwise specified, the length property of a built-in function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/Collator/prototype/compare/non-normative-basic.js", "version": 5, "esid": " 10.3.2_CS_b_NN", "description": " >Tests that the compare function isn't entirely unreasonable.This\ntest is not normative.\n", "author": " Norbert Lindenberg", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/intl402/Collator/prototype/compare/non-normative-phonebook.js", "version": 5, "esid": " 10.3.2_CS_c_NN", "description": " >Tests that the compare function supports phonebook sorting if it\nsays it does.This test is not normative.\n", "author": " Norbert Lindenberg", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/intl402/Collator/prototype/compare/non-normative-sensitivity.js", "version": 5, "esid": " 10.3.2_CS_d_NN", "description": " >Tests that the compare function supports different sensitivity\nsettings.This test is not normative.\n", "author": " Norbert Lindenberg", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/intl402/Collator/prototype/compare/prop-desc.js", "esid": " sec-intl.collator.prototype.resolvedoptions", "description": " >\"compare\" property of Intl.Collator.prototype.\n", "info": " |get Intl.Collator.prototype.compare\n\n7 Requirements for Standard Built-in ECMAScript Objects\n\nUnless specified otherwise in this document, the objects, functions, and constructors\ndescribed in this standard are subject to the generic requirements and restrictions\nspecified for standard built-in ECMAScript objects in the ECMAScript 2018 Language\nSpecification, 9th edition, clause 17, or successor.\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery accessor property described in clauses 18 through 26 and in Annex B.2 has the\nattributes { [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\nIf only a get accessor function is described, the set accessor function is the default\nvalue, undefined. If only a set accessor is described the get accessor is the default\nvalue, undefined.\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/Collator/prototype/constructor/prop-desc.js", "esid": " sec-intl.collator.prototype.constructor", "description": " >\"constructor\" property of Intl.Collator.prototype.\n", "info": " |Intl.Collator.prototype.constructor\n\n7 Requirements for Standard Built-in ECMAScript Objects\n\nUnless specified otherwise in this document, the objects, functions, and constructors\ndescribed in this standard are subject to the generic requirements and restrictions\nspecified for standard built-in ECMAScript objects in the ECMAScript 2018 Language\nSpecification, 9th edition, clause 17, or successor.\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the\nattributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true }\nunless otherwise specified.\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/Collator/prototype/constructor/value.js", "version": 5, "esid": " 10.3.1", "description": " >Tests that Intl.Collator.prototype.constructor is the\nIntl.Collator.\n"}, {"path": "./test262-main/test/intl402/Collator/prototype/prop-desc.js", "version": 5, "esid": " 10.2.1", "description": " Tests that Intl.Collator.prototype has the required attributes.", "author": " Norbert Lindenberg", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/Collator/prototype/resolvedOptions/builtin.js", "version": 5, "esid": " 10.3.3_L15", "description": " >Tests that Intl.Collator.prototype.resolvedOptions meets the\nrequirements for built-in objects defined by the introduction of\nchapter 17 of the ECMAScript Language Specification.\n", "author": " Norbert Lindenberg", "includes": ["isConstructor.js"], "features": ["Reflect.construct"]}, {"path": "./test262-main/test/intl402/Collator/prototype/resolvedOptions/length.js", "esid": " sec-intl.collator.prototype.resolvedoptions", "description": " >Intl.Collator.prototype.resolvedOptions.length is 0.\n", "info": " |Intl.Collator.prototype.resolvedOptions ()\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery built-in function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description. Optional parameters\n(which are indicated with brackets: [ ]) or rest parameters (which\nare shown using the form \u00ab...name\u00bb) are not included in the default\nargument count.\nUnless otherwise specified, the length property of a built-in function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/Collator/prototype/resolvedOptions/name.js", "esid": " sec-Intl.Collator.prototype.resolvedOptions", "description": " >Intl.Collator.prototype.resolvedOptions.name is \"resolvedOptions\".\n", "info": " |10.3.5 Intl.Collator.prototype.resolvedOptions ()\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/Collator/prototype/resolvedOptions/prop-desc.js", "esid": " sec-intl.collator.prototype.resolvedoptions", "description": " >\"resolvedOptions\" property of Intl.Collator.prototype.\n", "info": " |Intl.Collator.prototype.resolvedOptions ()\n\n7 Requirements for Standard Built-in ECMAScript Objects\n\nUnless specified otherwise in this document, the objects, functions, and constructors\ndescribed in this standard are subject to the generic requirements and restrictions\nspecified for standard built-in ECMAScript objects in the ECMAScript 2018 Language\nSpecification, 9th edition, clause 17, or successor.\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the\nattributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true }\nunless otherwise specified.\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/Collator/prototype/this-value-not-collator.js", "version": 5, "esid": " 10.3_b", "description": " >Tests that Intl.Collator.prototype functions throw aTypeError if\ncalled on a non-object value or an object that hasn't been\ninitialized as a Collator.\n", "author": " Norbert Lindenberg"}, {"path": "./test262-main/test/intl402/Collator/prototype/toStringTag/toString-removed-tag.js", "esid": " sec-intl.collator.prototype-@@tostringtag", "description": " >Object.prototype.toString doesn't special-case neither Intl.Collator instances nor its prototype.\n", "info": " |Object.prototype.toString ( )\n\n[...]\n14. Else, let builtinTag be \"Object\".\n15. Let tag be ? Get(O, @@toStringTag).\n16. If Type(tag) is not String, set tag to builtinTag.\n17. Return the string-concatenation of \"[object \", tag, and \"]\".\n", "features": ["Symbol.toStringTag"]}, {"path": "./test262-main/test/intl402/Collator/supportedLocalesOf/basic.js", "version": 5, "esid": " 10.2.2_a", "description": " >Tests that Intl.Collator has a supportedLocalesOfproperty, and\nit works as planned.\n"}, {"path": "./test262-main/test/intl402/Collator/supportedLocalesOf/builtin.js", "version": 5, "esid": " 10.2.2_L15", "description": " >Tests that Intl.Collator.supportedLocalesOf meets the\nrequirements for built-in objects defined by the introduction of\nchapter 17 of the ECMAScript Language Specification.\n", "author": " Norbert Lindenberg", "includes": ["isConstructor.js"], "features": ["Reflect.construct"]}, {"path": "./test262-main/test/intl402/Collator/supportedLocalesOf/length.js", "esid": " sec-intl.collator.supportedlocalesof", "description": " >Intl.Collator.supportedLocalesOf.length is 1.\n", "info": " |Intl.Collator.supportedLocalesOf ( locales [ , options ] )\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery built-in function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description. Optional parameters\n(which are indicated with brackets: [ ]) or rest parameters (which\nare shown using the form \u00ab...name\u00bb) are not included in the default\nargument count.\nUnless otherwise specified, the length property of a built-in function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/Collator/supportedLocalesOf/name.js", "esid": " sec-Intl.Collator.supportedLocalesOf", "description": " >Intl.Collator.supportedLocalesOf.name is \"supportedLocalesOf\".\n", "info": " |10.2.2 Intl.Collator.supportedLocalesOf (locales [ , options ])\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/Collator/supportedLocalesOf/prop-desc.js", "esid": " sec-intl.collator.supportedlocalesof", "description": " >\"supportedLocalesOf\" property of Intl.Collator.\n", "info": " |Intl.Collator.supportedLocalesOf ( locales [ , options ] )\n\n7 Requirements for Standard Built-in ECMAScript Objects\n\nUnless specified otherwise in this document, the objects, functions, and constructors\ndescribed in this standard are subject to the generic requirements and restrictions\nspecified for standard built-in ECMAScript objects in the ECMAScript 2018 Language\nSpecification, 9th edition, clause 17, or successor.\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the\nattributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true }\nunless otherwise specified.\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/Collator/unicode-ext-seq-with-attribute.js", "esid": " sec-initializecollator", "description": " >Attributes in Unicode extension subtags should be ignored.\n", "info": " |10.1.1 InitializeCollator ( collator, locales, options )\n...\n15. For each element key of relevantExtensionKeys in List order, do\na. If key is \"co\", then\ni. Let value be r.[[co]].\nii. If value is null, let value be \"default\".\niii. Set collator.[[Collation]] to value.\n...\n\n10.3.5 Intl.Collator.prototype.resolvedOptions ()\nThe function returns a new object whose properties and attributes are set as if constructed\nby an object literal assigning to each of the following properties the value of the\ncorresponding internal slot of this Collator object (see 10.4): ...\n"}, {"path": "./test262-main/test/intl402/Collator/unicode-ext-value-collation.js", "version": 5, "esid": " 10.1.1_19_b", "description": " Tests the special handling of the \"co\" key in Intl.Collator.", "author": " Norbert Lindenberg"}, {"path": "./test262-main/test/intl402/Collator/usage-de.js", "esid": " sec-initializecollator", "description": " Checks the behavior of search and sort in German.", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/intl402/Date/prototype/returns-same-results-as-DateTimeFormat.js", "version": 5, "esid": " 13.3.0_7", "description": " >Tests that Date.prototype.toLocaleString & Co. produces the same\nresults as Intl.DateTimeFormat.\n", "author": " Norbert Lindenberg", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/intl402/Date/prototype/throws-same-exceptions-as-DateTimeFormat.js", "version": 5, "esid": " 13.3.0_6_1", "description": " >Tests that Date.prototype.toLocaleString & Co. throws the same\nexceptions as Intl.DateTimeFormat.\n", "author": " Norbert Lindenberg"}, {"path": "./test262-main/test/intl402/Date/prototype/toLocaleDateString/length.js", "esid": " sup-date.prototype.tolocaledatestring", "description": " >Date.prototype.toLocaleDateString.length is 0.\n", "info": " |Date.prototype.toLocaleDateString ( [ locales [ , options ] ] )\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery built-in function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description. Optional parameters\n(which are indicated with brackets: [ ]) or rest parameters (which\nare shown using the form \u00ab...name\u00bb) are not included in the default\nargument count.\nUnless otherwise specified, the length property of a built-in function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/Date/prototype/toLocaleString/default-options-object-prototype.js", "esid": " sec-todatetimeoptions", "description": " >Monkey-patching Object.prototype does not change the default\noptions for DateTimeFormat as a null prototype is used.\n", "info": " |ToDateTimeOptions ( options, required, defaults )\n\n1. If options is undefined, let options be null; otherwise let options be ? ToObject(options).\n1. Let options be ObjectCreate(options).\n"}, {"path": "./test262-main/test/intl402/Date/prototype/toLocaleString/length.js", "esid": " sup-date.prototype.tolocalestring", "description": " >Date.prototype.toLocaleString.length is 0.\n", "info": " |Date.prototype.toLocaleString ( [ locales [ , options ] ] )\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery built-in function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description. Optional parameters\n(which are indicated with brackets: [ ]) or rest parameters (which\nare shown using the form \u00ab...name\u00bb) are not included in the default\nargument count.\nUnless otherwise specified, the length property of a built-in function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/Date/prototype/toLocaleTimeString/length.js", "esid": " sup-date.prototype.tolocaletimestring", "description": " >Date.prototype.toLocaleTimeString.length is 0.\n", "info": " |Date.prototype.toLocaleTimeString ( [ locales [ , options ] ] )\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery built-in function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description. Optional parameters\n(which are indicated with brackets: [ ]) or rest parameters (which\nare shown using the form \u00ab...name\u00bb) are not included in the default\nargument count.\nUnless otherwise specified, the length property of a built-in function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/builtin.js", "version": 5, "esid": " 12.1_L15", "description": " >Tests that Intl.DateTimeFormat meets the requirements for\nbuilt-in objects defined by the introduction of chapter 17 of the\nECMAScript Language Specification.\n", "author": " Norbert Lindenberg"}, {"path": "./test262-main/test/intl402/DateTimeFormat/constructor-default-value.js", "esid": " sec-initializedatetimeformat", "description": " >Tests that the constructor for Intl.DateTimeFormat uses appropriate default\nvalues for its arguments (locales and options).\n"}, {"path": "./test262-main/test/intl402/DateTimeFormat/constructor-no-instanceof.js", "esid": " sec-Intl.DateTimeFormat.prototype.resolvedOptions", "description": " >Tests that Intl.DateTimeFormat.prototype.resolvedOptions calls\nOrdinaryHasInstance instead of the instanceof operator which includes a\nSymbol.hasInstance lookup and call among other things.\n"}, {"path": "./test262-main/test/intl402/DateTimeFormat/constructor-options-toobject.js", "esid": " sec-initializedatetimeformat", "description": " >Tests that Intl.DateTimeFormat contructor converts the options argument\nto an object using `ToObject` (7.1.13).\n", "info": " |12.1.2 ToDateTimeOptions\n\n1. If options is undefined, let options be null; otherwise let options be ?\nToObject(options).\n"}, {"path": "./test262-main/test/intl402/DateTimeFormat/default-options-object-prototype.js", "esid": " sec-todatetimeoptions", "description": " >Monkey-patching Object.prototype does not change the default\noptions for DateTimeFormat as a null prototype is used.\n", "info": " |ToDateTimeOptions ( options, required, defaults )\n\n1. If options is undefined, let options be null; otherwise let options be ? ToObject(options).\n1. Let options be ObjectCreate(options).\n"}, {"path": "./test262-main/test/intl402/DateTimeFormat/ignore-invalid-unicode-ext-values.js", "version": 5, "esid": " 12.2.3_b", "description": " >Tests that Intl.DateTimeFormat does not accept Unicode locale\nextension keys and values that are not allowed.\n", "author": " Norbert Lindenberg"}, {"path": "./test262-main/test/intl402/DateTimeFormat/instance-proto-and-extensible.js", "version": 5, "esid": " 12.1.3", "description": " >Tests that objects constructed by Intl.DateTimeFormat have the\nspecified internal properties.\n", "author": " Norbert Lindenberg"}, {"path": "./test262-main/test/intl402/DateTimeFormat/length.js", "esid": " sec-intl.datetimeformat", "description": " >Intl.DateTimeFormat.length is 0.\n", "info": " |Intl.DateTimeFormat ( [ locales [ , options ] ] )\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery built-in function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description. Optional parameters\n(which are indicated with brackets: [ ]) or rest parameters (which\nare shown using the form \u00ab...name\u00bb) are not included in the default\nargument count.\nUnless otherwise specified, the length property of a built-in function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/name.js", "esid": " sec-Intl.DateTimeFormat", "description": " >Intl.DateTimeFormat.name is \"DateTimeFormat\".\n", "info": " |12.2.1 Intl.DateTimeFormat ([ locales [ , options ]])\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/prop-desc.js", "esid": " sec-intl.datetimeformat-intro", "description": " >\"DateTimeFormat\" property of Intl.\n", "info": " |Intl.DateTimeFormat (...)\n\n7 Requirements for Standard Built-in ECMAScript Objects\n\nUnless specified otherwise in this document, the objects, functions, and constructors\ndescribed in this standard are subject to the generic requirements and restrictions\nspecified for standard built-in ECMAScript objects in the ECMAScript 2018 Language\nSpecification, 9th edition, clause 17, or successor.\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the\nattributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true }\nunless otherwise specified.\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/builtin.js", "version": 5, "esid": " 12.3_L15", "description": " >Tests that Intl.DateTimeFormat.prototype meets the requirements\nfor built-in objects defined by the introduction of chapter 17 of\nthe ECMAScript Language Specification.\n", "author": " Norbert Lindenberg"}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/constructor/prop-desc.js", "esid": " sec-intl.datetimeformat.prototype.constructor", "description": " >\"constructor\" property of Intl.DateTimeFormat.prototype.\n", "info": " |Intl.DateTimeFormat.prototype.constructor\n\n7 Requirements for Standard Built-in ECMAScript Objects\n\nUnless specified otherwise in this document, the objects, functions, and constructors\ndescribed in this standard are subject to the generic requirements and restrictions\nspecified for standard built-in ECMAScript objects in the ECMAScript 2018 Language\nSpecification, 9th edition, clause 17, or successor.\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the\nattributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true }\nunless otherwise specified.\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/constructor/value.js", "version": 5, "esid": " 12.3.1", "description": " >Tests that Intl.DateTimeFormat.prototype.constructor is the\nIntl.DateTimeFormat.\n", "author": " Roozbeh Pournader"}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/format/bound-to-datetimeformat-instance.js", "version": 5, "esid": " 12.3.2_1_c", "description": " Tests that format function is bound to its Intl.DateTimeFormat.", "author": " Norbert Lindenberg"}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/format/builtin.js", "version": 5, "esid": " 12.3.2_L15", "description": " >Tests that the getter for Intl.DateTimeFormat.prototype.format\nmeets the requirements for built-in objects defined by the\nintroduction of chapter 17 of the ECMAScript Language\nSpecification.\n", "author": " Norbert Lindenberg", "includes": ["isConstructor.js"], "features": ["Reflect.construct"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/format/date-constructor-not-called.js", "esid": " sec-partitiondatetimepattern", "description": " |The Date constructor is not called to convert the input value.\n", "info": " >12.1.5 DateTime Format Functions\n\n...\n3. If date is not provided or is undefined, then\n...\n4. Else,\na. Let x be ? ToNumber(date).\n5. Return FormatDateTime(dtf, x).\n\n12.1.6 PartitionDateTimePattern ( dateTimeFormat, x )\n\n1. Let x be TimeClip(x).\n2. If x is NaN, throw a RangeError exception.\n3. ...\n"}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/format/format-function-builtin.js", "version": 5, "esid": " 12.3.2_1_a_L15", "description": " >Tests that the function returned by\nIntl.DateTimeFormat.prototype.format meets the requirements for\nbuilt-in objects defined by the introduction of chapter 17 of the\nECMAScript Language Specification.\n", "author": " Norbert Lindenberg", "includes": ["isConstructor.js"], "features": ["Reflect.construct"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/format/format-function-property-order.js", "esid": " sec-createbuiltinfunction", "description": " DateTimeFormat bound format function property order", "info": " |Set order: \"length\", \"name\"\n", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/format/length.js", "esid": " sec-intl.datetimeformat.prototype.format", "description": " >get Intl.DateTimeFormat.prototype.format.length is 0.\n", "info": " |get Intl.DateTimeFormat.prototype.format\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery built-in function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description. Optional parameters\n(which are indicated with brackets: [ ]) or rest parameters (which\nare shown using the form \u00ab...name\u00bb) are not included in the default\nargument count.\nUnless otherwise specified, the length property of a built-in function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/format/no-instanceof.js", "esid": " sec-Intl.DateTimeFormat.prototype.resolvedOptions", "description": " >Tests that Intl.DateTimeFormat.prototype.resolvedOptions calls\nOrdinaryHasInstance instead of the instanceof operator which includes a\nSymbol.hasInstance lookup and call among other things.\n"}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/format/proleptic-gregorian-calendar.js", "version": 5, "esid": " 12.3.2_FDT_7_a_iv", "description": " >Tests that format uses a proleptic Gregorian calendar with no year\n0.\n", "author": " Norbert Lindenberg"}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/format/prop-desc.js", "esid": " sec-intl.datetimeformat.prototype.format", "description": " >\"format\" property of Intl.DateTimeFormat.prototype.\n", "info": " |get Intl.DateTimeFormat.prototype.format\n\n7 Requirements for Standard Built-in ECMAScript Objects\n\nUnless specified otherwise in this document, the objects, functions, and constructors\ndescribed in this standard are subject to the generic requirements and restrictions\nspecified for standard built-in ECMAScript objects in the ECMAScript 2018 Language\nSpecification, 9th edition, clause 17, or successor.\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery accessor property described in clauses 18 through 26 and in Annex B.2 has the\nattributes { [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\nIf only a get accessor function is described, the set accessor function is the default\nvalue, undefined. If only a set accessor is described the get accessor is the default\nvalue, undefined.\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/format/throws-value-non-finite.js", "version": 5, "esid": " 12.3.2_FDT_1", "description": " Tests that format handles non-finite values correctly.", "author": " Norbert Lindenberg"}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/formatRange/date-undefined-throws.js", "description": " >Throws a TypeError if startDate or endDate is undefined.\n", "info": " |Intl.DateTimeFormat.prototype.formatRange ( startDate , endDate )\n\n1. Let dtf be this value.\n2. If Type(dtf) is not Object, throw a TypeError exception.\n3. If dtf does not have an [[InitializedDateTimeFormat]] internal slot, throw a TypeError exception.\n4. If startDate is undefined or endDate is undefined, throw a TypeError exception.\n5. Let x be ? ToNumber(startDate).\n6. Let y be ? ToNumber(endDate).\n\n", "features": ["Intl.DateTimeFormat-formatRange"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/formatRange/this-bad-object.js", "description": " >Throws a TypeError if this is not a DateTimeFormat object\n", "features": ["Intl.DateTimeFormat-formatRange"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/formatRange/this-is-not-object-throws.js", "description": " >Throws a TypeError if this is not Object.\n", "info": " |Intl.DateTimeFormat.prototype.formatRange ( startDate , endDate )\n\n1. Let dtf be this value.\n2. If Type(dtf) is not Object, throw a TypeError exception.\n\n", "features": ["Intl.DateTimeFormat-formatRange", "Symbol"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/formatRangeToParts/date-undefined-throws.js", "description": " >Throws a TypeError if startDate or endDate are undefined.\n", "info": " |Intl.DateTimeFormat.prototype.formatRangeToParts ( startDate , endDate )\n\n1. Let dtf be this value.\n2. If Type(dtf) is not Object, throw a TypeError exception.\n3. If dtf does not have an [[InitializedDateTimeFormat]] internal slot, throw a TypeError exception.\n4. If startDate is undefined or endDate is undefined, throw a TypeError exception.\n5. Let x be ? ToNumber(startDate).\n6. Let y be ? ToNumber(endDate).\n\n", "features": ["Intl.DateTimeFormat-formatRange"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/formatRangeToParts/this-bad-object.js", "description": " >Throws a TypeError if this is not a DateTimeFormat object\n", "features": ["Intl.DateTimeFormat-formatRange"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/formatRangeToParts/this-is-not-object-throws.js", "description": " >Throws a TypeError if this is not Object.\n", "info": " |Intl.DateTimeFormat.prototype.formatRangeToParts ( startDate , endDate )\n\n1. Let dtf be this value.\n2. If Type(dtf) is not Object, throw a TypeError exception.\n\n", "features": ["Intl.DateTimeFormat-formatRange", "Symbol"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/formatToParts/this-has-not-internal-throws.js", "description": " >Throws a TypeError if this is not a DateTimeFormat object\n"}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/formatToParts/this-is-not-object-throws.js", "description": " Throws a TypeError if this is not Object", "features": ["Symbol"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/prop-desc.js", "version": 5, "esid": " 12.2.1", "description": " >Tests that Intl.DateTimeFormat.prototype has the required\nattributes.\n", "author": " Norbert Lindenberg", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/resolvedOptions/builtin.js", "version": 5, "esid": " 12.3.3_L15", "description": " >Tests that Intl.DateTimeFormat.prototype.resolvedOptions meets\nthe requirements for built-in objects defined by the introduction\nof chapter 17 of the ECMAScript Language Specification.\n", "author": " Norbert Lindenberg", "includes": ["isConstructor.js"], "features": ["Reflect.construct"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/resolvedOptions/length.js", "esid": " sec-intl.datetimeformat.prototype.resolvedoptions", "description": " >Intl.DateTimeFormat.prototype.resolvedOptions.length is 0.\n", "info": " |Intl.DateTimeFormat.prototype.resolvedOptions ()\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery built-in function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description. Optional parameters\n(which are indicated with brackets: [ ]) or rest parameters (which\nare shown using the form \u00ab...name\u00bb) are not included in the default\nargument count.\nUnless otherwise specified, the length property of a built-in function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/resolvedOptions/name.js", "esid": " sec-Intl.DateTimeFormat.prototype.resolvedOptions", "description": " >Intl.DateTimeFormat.prototype.resolvedOptions.name is \"resolvedOptions\".\n", "info": " |12.4.4 Intl.DateTimeFormat.prototype.resolvedOptions ()\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/resolvedOptions/no-instanceof.js", "esid": " sec-Intl.DateTimeFormat.prototype.resolvedOptions", "description": " >Tests that Intl.DateTimeFormat.prototype.resolvedOptions calls\nOrdinaryHasInstance instead of the instanceof operator which includes a\nSymbol.hasInstance lookup and call among other things.\n"}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/resolvedOptions/prop-desc.js", "esid": " sec-intl.datetimeformat.prototype.resolvedoptions", "description": " >\"resolvedOptions\" property of Intl.DateTimeFormat.prototype.\n", "info": " |Intl.DateTimeFormat.prototype.resolvedOptions ()\n\n7 Requirements for Standard Built-in ECMAScript Objects\n\nUnless specified otherwise in this document, the objects, functions, and constructors\ndescribed in this standard are subject to the generic requirements and restrictions\nspecified for standard built-in ECMAScript objects in the ECMAScript 2018 Language\nSpecification, 9th edition, clause 17, or successor.\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the\nattributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true }\nunless otherwise specified.\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/this-value-not-datetimeformat.js", "version": 5, "esid": " 12.3_b", "description": " >Tests that Intl.DateTimeFormat.prototype functions throw a\nTypeError if called on a non-object value or an object that hasn't\nbeeninitialized as a DateTimeFormat.\n", "author": " Norbert Lindenberg"}, {"path": "./test262-main/test/intl402/DateTimeFormat/prototype/toStringTag/toString-removed-tag.js", "esid": " sec-intl.datetimeformat.prototype-@@tostringtag", "description": " >Object.prototype.toString doesn't special-case neither Intl.DateTimeFormat instances nor its prototype.\n", "info": " |Object.prototype.toString ( )\n\n[...]\n14. Else, let builtinTag be \"Object\".\n15. Let tag be ? Get(O, @@toStringTag).\n16. If Type(tag) is not String, set tag to builtinTag.\n17. Return the string-concatenation of \"[object \", tag, and \"]\".\n", "features": ["Symbol.toStringTag"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/supportedLocalesOf/basic.js", "version": 5, "esid": " 12.2.2_a", "description": " >Tests that Intl.DateTimeFormat has a supportedLocalesOfproperty,\nand it works as planned.\n", "author": " Roozbeh Pournader"}, {"path": "./test262-main/test/intl402/DateTimeFormat/supportedLocalesOf/builtin.js", "version": 5, "esid": " 12.2.2_L15", "description": " >Tests that Intl.DateTimeFormat.supportedLocalesOf meets the\nrequirements for built-in objects defined by the introduction of\nchapter 17 of the ECMAScript Language Specification.\n", "author": " Norbert Lindenberg", "includes": ["isConstructor.js"], "features": ["Reflect.construct"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/supportedLocalesOf/length.js", "esid": " sec-intl.datetimeformat.supportedlocalesof", "description": " >Intl.DateTimeFormat.supportedLocalesOf.length is 1.\n", "info": " |Intl.DateTimeFormat.supportedLocalesOf ( locales [ , options ] )\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery built-in function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description. Optional parameters\n(which are indicated with brackets: [ ]) or rest parameters (which\nare shown using the form \u00ab...name\u00bb) are not included in the default\nargument count.\nUnless otherwise specified, the length property of a built-in function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/supportedLocalesOf/name.js", "esid": " sec-Intl.DateTimeFormat.supportedLocalesOf", "description": " >Intl.DateTimeFormat.supportedLocalesOf.name is \"supportedLocalesOf\".\n", "info": " |12.3.2 Intl.DateTimeFormat.supportedLocalesOf (locales [ , options ])\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/supportedLocalesOf/prop-desc.js", "esid": " sec-intl.datetimeformat.supportedlocalesof", "description": " >\"supportedLocalesOf\" property of Intl.DateTimeFormat.\n", "info": " |Intl.DateTimeFormat.supportedLocalesOf ( locales [ , options ] )\n\n7 Requirements for Standard Built-in ECMAScript Objects\n\nUnless specified otherwise in this document, the objects, functions, and constructors\ndescribed in this standard are subject to the generic requirements and restrictions\nspecified for standard built-in ECMAScript objects in the ECMAScript 2018 Language\nSpecification, 9th edition, clause 17, or successor.\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the\nattributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true }\nunless otherwise specified.\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/DateTimeFormat/timezone-canonicalized.js", "version": 5, "esid": " 6.4_c", "description": " >Tests that additional time zone names, if accepted, are handled\ncorrectly.\n", "author": " Norbert Lindenberg"}, {"path": "./test262-main/test/intl402/DateTimeFormat/timezone-invalid.js", "version": 5, "esid": " 6.4_b", "description": " Tests that invalid time zone names are not accepted.", "author": " Norbert Lindenberg"}, {"path": "./test262-main/test/intl402/DateTimeFormat/timezone-utc.js", "version": 5, "esid": " 6.4_a", "description": " Tests that valid time zone names are accepted.", "author": " Norbert Lindenberg"}, {"path": "./test262-main/test/intl402/DisplayNames/locales-invalid-throws.js", "esid": " sec-Intl.DisplayNames", "description": " >Throws TypeError if locales is not undefined, a string, or an array-like object.\n", "info": " |Intl.DisplayNames ([ locales [ , options ]])\n\n1. If NewTarget is undefined, throw a TypeError exception.\n2. Let displayNames be ? OrdinaryCreateFromConstructor(NewTarget, \"%DisplayNamesPrototype%\",\n\u00ab [[InitializedDisplayNames]], [[Locale]], [[Style]], [[Type]], [[Fallback]], [[Fields]] \u00bb).\n3. Let requestedLocales be ? CanonicalizeLocaleList(locales).\n...\n\nCanonicalizeLocaleList ( locales )\n\n1. If locales is undefined, then\na. Return a new empty List.\n2. Let seen be a new empty List.\n3. If Type(locales) is String, then\na. Let O be CreateArrayFromList(\u00ab locales \u00bb).\n4. Else,\na. Let O be ? ToObject(locales).\n5. Let len be ? ToLength(? Get(O, \"length\")).\n", "features": ["Intl.DisplayNames"]}, {"path": "./test262-main/test/intl402/DisplayNames/options-null-throws.js", "esid": " sec-Intl.DisplayNames", "description": " >Throws TypeError if options is null\n", "info": " |Intl.DisplayNames ([ locales [ , options ]])\n\n1. If NewTarget is undefined, throw a TypeError exception.\n2. Let displayNames be ? OrdinaryCreateFromConstructor(NewTarget, \"%DisplayNamesPrototype%\",\n\u00ab [[InitializedDisplayNames]], [[Locale]], [[Style]], [[Type]], [[Fallback]], [[Fields]] \u00bb).\n...\n4. If options is undefined, then\na. Let options be ObjectCreate(null).\n5. Else\na. Let options be ? ToObject(options).\n...\n", "features": ["Intl.DisplayNames"]}, {"path": "./test262-main/test/intl402/DisplayNames/undefined-newtarget-throws.js", "esid": " sec-Intl.DisplayNames", "description": " >Throws a TypeError if Intl.DisplayNames is called as a function.\n", "info": " |Intl.DisplayNames ([ locales [ , options ]])\n\n1. If NewTarget is undefined, throw a TypeError exception.\n...\n", "features": ["Intl.DisplayNames"]}, {"path": "./test262-main/test/intl402/Intl/builtin.js", "esid": " intl-object", "description": " >Tests that Intl meets the requirements for built-in objects\ndefined by the introduction of chapter 17 of the ECMAScript\nLanguage Specification.\n", "author": " Norbert Lindenberg"}, {"path": "./test262-main/test/intl402/Number/prototype/toLocaleString/length.js", "esid": " sup-number.prototype.tolocalestring", "description": " >Number.prototype.toLocaleString.length is 0.\n", "info": " |Number.prototype.toLocaleString ( [ locales [ , options ] ] )\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery built-in function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description. Optional parameters\n(which are indicated with brackets: [ ]) or rest parameters (which\nare shown using the form \u00ab...name\u00bb) are not included in the default\nargument count.\nUnless otherwise specified, the length property of a built-in function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/Number/prototype/toLocaleString/returns-same-results-as-NumberFormat.js", "version": 5, "esid": " 13.2.1_5", "description": " >Tests that Number.prototype.toLocaleString produces the same\nresults as Intl.NumberFormat.\n", "author": " Norbert Lindenberg", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/intl402/Number/prototype/toLocaleString/throws-same-exceptions-as-NumberFormat.js", "version": 5, "esid": " 13.2.1_4_1", "description": " >Tests that Number.prototype.toLocaleString throws the same\nexceptions as Intl.NumberFormat.\n", "author": " Norbert Lindenberg"}, {"path": "./test262-main/test/intl402/NumberFormat/builtin.js", "version": 5, "esid": " 11.1_L15", "description": " >Tests that Intl.NumberFormat meets the requirements for built-in\nobjects defined by the introduction of chapter 17 of the\nECMAScript Language Specification.\n", "author": " Norbert Lindenberg"}, {"path": "./test262-main/test/intl402/NumberFormat/constructor-default-value.js", "esid": " sec-initializenumberformat", "description": " >Tests that the constructor for Intl.NumberFormat uses appropriate default\nvalues for its arguments (locales and options).\n"}, {"path": "./test262-main/test/intl402/NumberFormat/constructor-locales-arraylike.js", "esid": " sec-initializenumberformat", "description": " >Tests that the Intl.NumberFormat constructor accepts Array-like values for the\nlocales argument and treats them well.\n"}, {"path": "./test262-main/test/intl402/NumberFormat/constructor-locales-string.js", "esid": " sec-initializenumberformat", "description": " >Tests that passing a string value to the Intl.NumberFormat constructor is\nequivalent to passing an Array containing the same string value.\n", "info": " |9.2.1 CanonicalizeLocaleList ( locales )\n\n3 .If Type(locales) is String, then\na. Let O be CreateArrayFromList(\u00ab locales \u00bb).\n"}, {"path": "./test262-main/test/intl402/NumberFormat/constructor-locales-toobject.js", "esid": " sec-initializenumberformat", "description": " >Tests that Intl.NumberFormat contructor converts the locales argument\nto an object using `ToObject` (7.1.13).\n", "info": " |9.2.1 CanonicalizeLocaleList\n\n4.a. Let O be ? ToObject(locales).\n"}, {"path": "./test262-main/test/intl402/NumberFormat/constructor-no-instanceof.js", "esid": " sec-Intl.NumberFormat.prototype.resolvedOptions", "description": " >Tests that Intl.NumberFormat.prototype.resolvedOptions calls\nOrdinaryHasInstance instead of the instanceof operator which includes a\nSymbol.hasInstance lookup and call among other things.\n"}, {"path": "./test262-main/test/intl402/NumberFormat/constructor-options-toobject.js", "esid": " sec-initializenumberformat", "description": " >Tests that Intl.NumberFormat contructor converts the options argument\nto an object using `ToObject` (7.1.13).\n", "info": " |11.1.2 InitializeNumberFormat\n\n3.a. Let options be ? ToObject(options).\n"}, {"path": "./test262-main/test/intl402/NumberFormat/constructor-order.js", "esid": " sec-initializenumberformat", "description": " Checks handling of the unit option with the currency style.", "info": " |SetNumberFormatUnitOptions ( intlObj, options )\n\n5. Let currency be ? GetOption(options, \"currency\", \"string\", undefined, undefined).\n6. If currency is not undefined, then\na. If the result of IsWellFormedCurrencyCode(currency) is false, throw a RangeError exception.\n7. If style is \"currency\" and currency is undefined, throw a TypeError exception.\n...\n10. Let unit be ? GetOption(options, \"unit\", \"string\", undefined, undefined).\n11. If unit is not undefined, then\na. If the result of IsWellFormedUnitIdentifier(unit) is false, throw a RangeError exception.\n12. If style is \"unit\" and unit is undefined, throw a TypeError exception.\n", "features": ["Intl.NumberFormat-unified"]}, {"path": "./test262-main/test/intl402/NumberFormat/currency-code-invalid.js", "version": 5, "esid": " 6.3.1_b", "description": " Tests that invalid currency codes are not accepted.", "author": " Norbert Lindenberg"}, {"path": "./test262-main/test/intl402/NumberFormat/currency-code-well-formed.js", "version": 5, "esid": " 6.3.1_a", "description": " Tests that well-formed currency codes are accepted.", "author": " Norbert Lindenberg"}, {"path": "./test262-main/test/intl402/NumberFormat/default-minimum-singificant-digits.js", "description": " Tests that the default value of minimumSignificantDigits is 1.", "esid": " sec-setnfdigitoptions"}, {"path": "./test262-main/test/intl402/NumberFormat/fraction-digit-options-read-once.js", "esid": " sec-setnfdigitoptions", "description": " >The maximum and minimum fraction digits properties should be read from\nthe options bag exactly once from the NumberFormat constructor.\n", "info": " Regression test for https"}, {"path": "./test262-main/test/intl402/NumberFormat/ignore-invalid-unicode-ext-values.js", "version": 5, "esid": " 11.2.3_b", "description": " >Tests that Intl.NumberFormat does not accept Unicode locale\nextension keys and values that are not allowed.\n", "author": " Norbert Lindenberg"}, {"path": "./test262-main/test/intl402/NumberFormat/instance-proto-and-extensible.js", "version": 5, "esid": " 11.1.3", "description": " >Tests that objects constructed by Intl.NumberFormat have the\nspecified internal properties.\n", "author": " Norbert Lindenberg"}, {"path": "./test262-main/test/intl402/NumberFormat/length.js", "esid": " sec-intl.numberformat", "description": " >Intl.NumberFormat.length is 0.\n", "info": " |Intl.NumberFormat ( [ locales [ , options ] ] )\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery built-in function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description. Optional parameters\n(which are indicated with brackets: [ ]) or rest parameters (which\nare shown using the form \u00ab...name\u00bb) are not included in the default\nargument count.\nUnless otherwise specified, the length property of a built-in function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/NumberFormat/name.js", "esid": " sec-Intl.NumberFormat", "description": " >Intl.NumberFormat.name is \"NumberFormat\".\n", "info": " |11.2.1 Intl.NumberFormat ([ locales [ , options ]])\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/NumberFormat/prop-desc.js", "esid": " sec-intl.numberformat-intro", "description": " >\"NumberFormat\" property of Intl.\n", "info": " |Intl.NumberFormat (...)\n\n7 Requirements for Standard Built-in ECMAScript Objects\n\nUnless specified otherwise in this document, the objects, functions, and constructors\ndescribed in this standard are subject to the generic requirements and restrictions\nspecified for standard built-in ECMAScript objects in the ECMAScript 2018 Language\nSpecification, 9th edition, clause 17, or successor.\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the\nattributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true }\nunless otherwise specified.\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/builtin.js", "version": 5, "esid": " 11.3_L15", "description": " >Tests that Intl.NumberFormat.prototype meets the requirements for\nbuilt-in objects defined by the introduction of chapter 17 of the\nECMAScript Language Specification.\n", "author": " Norbert Lindenberg"}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/constructor/prop-desc.js", "esid": " sec-intl.numberformat.prototype.constructor", "description": " >\"constructor\" property of Intl.NumberFormat.prototype.\n", "info": " |Intl.NumberFormat.prototype.constructor\n\n7 Requirements for Standard Built-in ECMAScript Objects\n\nUnless specified otherwise in this document, the objects, functions, and constructors\ndescribed in this standard are subject to the generic requirements and restrictions\nspecified for standard built-in ECMAScript objects in the ECMAScript 2018 Language\nSpecification, 9th edition, clause 17, or successor.\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the\nattributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true }\nunless otherwise specified.\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/constructor/value.js", "version": 5, "esid": " 11.3.1", "description": " >Tests that Intl.NumberFormat.prototype.constructor is the\nIntl.NumberFormat.\n", "author": " Roozbeh Pournader"}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/bound-to-numberformat-instance.js", "version": 5, "esid": " 11.3.2_1_c", "description": " Tests that format function is bound to its Intl.NumberFormat.", "author": " Norbert Lindenberg"}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/builtin.js", "version": 5, "esid": " 11.3.2_L15", "description": " >Tests that the getter for Intl.NumberFormat.prototype.format\nmeets the requirements for built-in objects defined by the\nintroduction of chapter 17 of the ECMAScript Language\nSpecification.\n", "author": " Norbert Lindenberg", "includes": ["isConstructor.js"], "features": ["Reflect.construct"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/default-value.js", "esid": " sec-number-format-functions", "description": " >Tests that the default value for the argument of\nIntl.NumberFormat.prototype.format (value) is undefined.\n", "info": " |11.1.4 Number Format Functions\n\n3. If value is not provided, let value be undefined.\n4. Let x be ? ToNumber(value).\n"}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/format-function-builtin.js", "version": 5, "esid": " 11.3.2_1_a_L15", "description": " >Tests that the function returned by\nIntl.NumberFormat.prototype.format meets the requirements for\nbuilt-in objects defined by the introduction of chapter 17 of the\nECMAScript Language Specification.\n", "author": " Norbert Lindenberg", "includes": ["isConstructor.js"], "features": ["Reflect.construct"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/format-function-length.js", "esid": " sec-intl.numberformat.prototype.format", "description": " >The length of the bound Number Format function is 1.\n", "info": " |get Intl.NumberFormat.prototype.format\n\n...\n4. If nf.[[BoundFormat]] is undefined, then\na. Let F be a new built-in function object as defined in Number Format Functions (11.1.4).\nb. Let bf be BoundFunctionCreate(F, nf, \u00ab \u00bb).\nc. Perform ! DefinePropertyOrThrow(bf, \"length\", PropertyDescriptor {[[Value]]: 1,\n[[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true}).\n...\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/format-function-property-order.js", "esid": " sec-createbuiltinfunction", "description": " NumberFormat bound format function property order", "info": " |Set order: \"length\", \"name\"\n", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/format-non-finite-numbers.js", "version": 5, "esid": " 11.3.2_FN_2", "description": " >Tests that Intl.NumberFormat.prototype.formathandles NaN,\nInfinity, and -Infinity properly.\n", "author": " Roozbeh Pournader"}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/length.js", "esid": " sec-intl.numberformat.prototype.format", "description": " >get Intl.NumberFormat.prototype.format.length is 0.\n", "info": " |get Intl.NumberFormat.prototype.format\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery built-in function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description. Optional parameters\n(which are indicated with brackets: [ ]) or rest parameters (which\nare shown using the form \u00ab...name\u00bb) are not included in the default\nargument count.\nUnless otherwise specified, the length property of a built-in function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/no-instanceof.js", "esid": " sec-Intl.NumberFormat.prototype.resolvedOptions", "description": " >Tests that Intl.NumberFormat.prototype.resolvedOptions calls\nOrdinaryHasInstance instead of the instanceof operator which includes a\nSymbol.hasInstance lookup and call among other things.\n"}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/percent-formatter.js", "version": 5, "esid": " 11.3.2_FN_3_b", "description": " >Tests that Intl.NumberFormat.prototype.formatformats percent\nvalues properly.\n", "author": " Roozbeh Pournader"}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/prop-desc.js", "esid": " sec-intl.numberformat.prototype.format", "description": " >\"format\" property of Intl.NumberFormat.prototype.\n", "info": " |get Intl.NumberFormat.prototype.format\n\n7 Requirements for Standard Built-in ECMAScript Objects\n\nUnless specified otherwise in this document, the objects, functions, and constructors\ndescribed in this standard are subject to the generic requirements and restrictions\nspecified for standard built-in ECMAScript objects in the ECMAScript 2018 Language\nSpecification, 9th edition, clause 17, or successor.\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery accessor property described in clauses 18 through 26 and in Annex B.2 has the\nattributes { [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\nIf only a get accessor function is described, the set accessor function is the default\nvalue, undefined. If only a set accessor is described the get accessor is the default\nvalue, undefined.\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/this-value-not-numberformat.js", "esid": " sec-intl.numberformat.prototype.format", "description": " >Tests that Intl.NumberFormat.prototype.format throws a TypeError\nif called on a non-object value or an object that hasn't been\ninitialized as a NumberFormat.\n"}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/format/value-arg-coerced-to-number.js", "version": 5, "esid": " 11.3.2_1_a_ii", "description": " >Tests that Intl.NumberFormat.prototype.formatconverts other\ntypes to numbers.\n", "author": " Roozbeh Pournader"}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/formatToParts/this-value-not-numberformat.js", "esid": " sec-Intl.NumberFormat.prototype.formatToParts", "description": " >Tests that Intl.NumberFormat.prototype.formatToParts throws a\nTypeError if called on a non-object value or an object that hasn't\nbeen initialized as a NumberFormat.\n"}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/prop-desc.js", "version": 5, "esid": " 11.2.1", "description": " Tests that Intl.NumberFormat.prototype has the required attributes.", "author": " Norbert Lindenberg", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/resolvedOptions/builtin.js", "version": 5, "esid": " 11.3.3_L15", "description": " >Tests that Intl.NumberFormat.prototype.resolvedOptions meets the\nrequirements for built-in objects defined by the introduction of\nchapter 17 of the ECMAScript Language Specification.\n", "author": " Norbert Lindenberg", "includes": ["isConstructor.js"], "features": ["Reflect.construct"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/resolvedOptions/length.js", "esid": " sec-intl.numberformat.prototype.resolvedoptions", "description": " >Intl.NumberFormat.prototype.resolvedOptions.length is 0.\n", "info": " |Intl.NumberFormat.prototype.resolvedOptions ()\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery built-in function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description. Optional parameters\n(which are indicated with brackets: [ ]) or rest parameters (which\nare shown using the form \u00ab...name\u00bb) are not included in the default\nargument count.\nUnless otherwise specified, the length property of a built-in function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/resolvedOptions/name.js", "esid": " sec-Intl.NumberFormat.prototype.resolvedOptions", "description": " >Intl.NumberFormat.prototype.resolvedOptions.name is \"resolvedOptions\".\n", "info": " |11.4.4 Intl.NumberFormat.prototype.resolvedOptions ()\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/resolvedOptions/no-instanceof.js", "esid": " sec-Intl.NumberFormat.prototype.resolvedOptions", "description": " >Tests that Intl.NumberFormat.prototype.resolvedOptions calls\nOrdinaryHasInstance instead of the instanceof operator which includes a\nSymbol.hasInstance lookup and call among other things.\n"}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/resolvedOptions/prop-desc.js", "esid": " sec-intl.numberformat.prototype.resolvedoptions", "description": " >\"resolvedOptions\" property of Intl.NumberFormat.prototype.\n", "info": " |Intl.NumberFormat.prototype.resolvedOptions ()\n\n7 Requirements for Standard Built-in ECMAScript Objects\n\nUnless specified otherwise in this document, the objects, functions, and constructors\ndescribed in this standard are subject to the generic requirements and restrictions\nspecified for standard built-in ECMAScript objects in the ECMAScript 2018 Language\nSpecification, 9th edition, clause 17, or successor.\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the\nattributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true }\nunless otherwise specified.\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/NumberFormat/prototype/resolvedOptions/this-value-not-numberformat.js", "esid": " sec-Intl.NumberFormat.prototype.resolvedOptions", "description": " >Tests that Intl.NumberFormat.prototype.resolvedOptions throws a\nTypeError if called on a non-object value or an object that hasn't\nbeen initialized as a NumberFormat.\n"}, {"path": "./test262-main/test/intl402/NumberFormat/supportedLocalesOf/basic.js", "version": 5, "esid": " 11.2.2_a", "description": " >Tests that Intl.NumberFormat has a supportedLocalesOfproperty,\nand it works as planned.\n", "author": " Roozbeh Pournader"}, {"path": "./test262-main/test/intl402/NumberFormat/supportedLocalesOf/builtin.js", "version": 5, "esid": " 11.2.2_L15", "description": " >Tests that Intl.NumberFormat.supportedLocalesOf meets the\nrequirements for built-in objects defined by the introduction of\nchapter 17 of the ECMAScript Language Specification.\n", "author": " Norbert Lindenberg", "includes": ["isConstructor.js"], "features": ["Reflect.construct"]}, {"path": "./test262-main/test/intl402/NumberFormat/supportedLocalesOf/length.js", "esid": " sec-intl.numberformat.supportedlocalesof", "description": " >Intl.NumberFormat.supportedLocalesOf.length is 1.\n", "info": " |Intl.NumberFormat.supportedLocalesOf ( locales [ , options ] )\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery built-in function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description. Optional parameters\n(which are indicated with brackets: [ ]) or rest parameters (which\nare shown using the form \u00ab...name\u00bb) are not included in the default\nargument count.\nUnless otherwise specified, the length property of a built-in function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/NumberFormat/supportedLocalesOf/name.js", "esid": " sec-Intl.NumberFormat.supportedLocalesOf", "description": " >Intl.NumberFormat.supportedLocalesOf.name is \"supportedLocalesOf\".\n", "info": " |11.3.2 Intl.NumberFormat.supportedLocalesOf (locales [ , options ])\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/NumberFormat/supportedLocalesOf/prop-desc.js", "esid": " sec-intl.numberformat.supportedlocalesof", "description": " >\"supportedLocalesOf\" property of Intl.NumberFormat.\n", "info": " |Intl.NumberFormat.supportedLocalesOf ( locales [ , options ] )\n\n7 Requirements for Standard Built-in ECMAScript Objects\n\nUnless specified otherwise in this document, the objects, functions, and constructors\ndescribed in this standard are subject to the generic requirements and restrictions\nspecified for standard built-in ECMAScript objects in the ECMAScript 2018 Language\nSpecification, 9th edition, clause 17, or successor.\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the\nattributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true }\nunless otherwise specified.\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/NumberFormat/test-option-currency.js", "version": 5, "esid": " 11.1.1_17", "description": " Tests that the option currency is processed correctly.", "author": " Norbert Lindenberg"}, {"path": "./test262-main/test/intl402/NumberFormat/throws-for-currency-style-without-currency-option.js", "version": 5, "esid": " 11.1.1_19", "description": " >Tests that the currency style can not be used without a specified\ncurrency.\n", "author": " Norbert Lindenberg"}, {"path": "./test262-main/test/intl402/PluralRules/prototype/prototype.js", "esid": " sec-properties-of-intl-pluralrules-prototype-object", "description": " >Tests that Intl.PluralRules.prototype is not an object that has been\ninitialized as an Intl.PluralRules.\n", "author": " Zibi Braniecki"}, {"path": "./test262-main/test/intl402/Segmenter/constructor/constructor/options-null.js", "esid": " sec-intl.Segmenter", "description": " >Throws TypeError if options is null\n", "info": " |Intl.Segmenter ([ locales [ , options ]])\n1. If NewTarget is undefined, throw a TypeError exception.\n3. Let segmenter be ? OrdinaryCreateFromConstructor(NewTarget, \"%Segmenter.prototype%\", internalSlotsList).\n...\n4. If options is undefined, then\na. Let options be ObjectCreate(null).\n5. Else\na. Let options be ? ToObject(options).\n...\n", "features": ["Intl.Segmenter"]}, {"path": "./test262-main/test/intl402/String/prototype/localeCompare/length.js", "esid": " sup-String.prototype.localeCompare", "description": " >String.prototype.localeCompare.length is 1.\n", "info": " |String.prototype.localeCompare ( that [ , locales [ , options ] ] )\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery built-in function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description. Optional parameters\n(which are indicated with brackets: [ ]) or rest parameters (which\nare shown using the form \u00ab...name\u00bb) are not included in the default\nargument count.\nUnless otherwise specified, the length property of a built-in function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/intl402/String/prototype/localeCompare/returns-same-results-as-Collator.js", "version": 5, "esid": " 13.1.1_7", "description": " >Tests that localeCompare produces the same results as\nIntl.Collator.\n", "author": " Norbert Lindenberg", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/intl402/String/prototype/localeCompare/throws-same-exceptions-as-Collator.js", "version": 5, "esid": " 13.1.1_6_1", "description": " >Tests that String.prototype.localeCompare throws the same\nexceptions as Intl.Collator.\n", "author": " Norbert Lindenberg"}, {"path": "./test262-main/test/language/block-scope/shadowing/const-declaration-shadowing-catch-parameter.js", "version": 6, "esid": " 13.1", "description": " >const declaration shadowing catch parameter\n"}, {"path": "./test262-main/test/language/block-scope/shadowing/const-declarations-shadowing-parameter-name-let-const-and-var-variables.js", "version": 6, "esid": " 13.1", "description": " >const declarations shadowing parameter name, let, const and var variables\n"}, {"path": "./test262-main/test/language/computed-property-names/basics/number.js", "version": 6, "esid": " 12.2.5", "description": " >computed property names can be a number\n", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/language/computed-property-names/basics/string.js", "version": 6, "esid": " 12.2.5", "description": " >computed property names can be a string\n", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/language/computed-property-names/basics/symbol.js", "version": 6, "esid": " 12.2.5", "description": " >computed property names can be a symbol\n", "includes": ["compareArray.js"], "features": ["Symbol"]}, {"path": "./test262-main/test/language/computed-property-names/object/accessor/getter-duplicates.js", "version": 6, "esid": " 12.2.5", "description": " >In an object, duplicate computed property getter names produce only a single property of\nthat name, whose value is the value of the last property of that name.\n"}, {"path": "./test262-main/test/language/computed-property-names/object/accessor/getter.js", "version": 6, "esid": " 12.2.5", "description": " >Computed property names for getters\n"}, {"path": "./test262-main/test/language/computed-property-names/object/accessor/setter-duplicates.js", "version": 6, "esid": " 12.2.5", "description": " >In an object, duplicate computed property getter names produce only a single property of\nthat name, whose value is the value of the last property of that name.\n"}, {"path": "./test262-main/test/language/computed-property-names/object/accessor/setter.js", "version": 6, "esid": " 12.2.5", "description": " >In an object, duplicate computed property getter names produce only a single property of\nthat name, whose value is the value of the last property of that name.\n"}, {"path": "./test262-main/test/language/computed-property-names/object/method/generator.js", "version": 6, "esid": " 12.2.5", "description": " >computed property names can be used as the name of a generator method in an object\n", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/language/computed-property-names/object/method/number.js", "version": 6, "esid": " 12.2.5", "description": " >computed property method names can be a number\n", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/language/computed-property-names/object/method/string.js", "version": 6, "esid": " 12.2.5", "description": " >computed property method names can be a string\n", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/language/computed-property-names/object/method/symbol.js", "version": 6, "esid": " 12.2.5", "description": " >computed property method names can be a symbol\n", "includes": ["compareArray.js"], "features": ["Symbol"]}, {"path": "./test262-main/test/language/computed-property-names/object/property/number-duplicates.js", "version": 6, "esid": " 12.2.5", "description": " >computed property names can be numbers\n"}, {"path": "./test262-main/test/language/computed-property-names/to-name-side-effects/numbers-object.js", "version": 6, "esid": " 12.2.5", "description": " >to name side effects numbers\n", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/language/computed-property-names/to-name-side-effects/object.js", "version": 6, "esid": " 12.2.5", "description": " >to name, accessor side effects object literal\n", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/language/destructuring/binding/syntax/array-elements-with-initializer.js", "version": 6, "esid": " 13.3.3", "description": " >The ArrayBindingPattern with an element list with initializers\n", "info": " |Destructuring Binding Patterns - Syntax\n\nArrayBindingPattern[Yield] :\n[ Elisionopt BindingRestElement[?Yield]opt ]\n[ BindingElementList[?Yield] ]\n[ BindingElementList[?Yield] , Elisionopt BindingRestElement[?Yield]opt ]\n\nBindingElementList[Yield] :\nBindingElisionElement[?Yield]\nBindingElementList[?Yield] , BindingElisionElement[?Yield]\n\nBindingElisionElement[Yield] :\nElisionopt BindingElement[?Yield]\n\nBindingElement[Yield ] :\nSingleNameBinding[?Yield]\nBindingPattern[?Yield] Initializer[In, ?Yield]opt\n", "features": ["destructuring-binding"]}, {"path": "./test262-main/test/language/destructuring/binding/syntax/array-elements-with-object-patterns.js", "version": 6, "esid": " 13.3.3", "description": " >The ArrayBindingPattern with Object patterns on the element list\n", "info": " |Destructuring Binding Patterns - Syntax\n\nArrayBindingPattern[Yield] :\n[ Elisionopt BindingRestElement[?Yield]opt ]\n[ BindingElementList[?Yield] ]\n[ BindingElementList[?Yield] , Elisionopt BindingRestElement[?Yield]opt ]\n\nBindingElementList[Yield] :\nBindingElisionElement[?Yield]\nBindingElementList[?Yield] , BindingElisionElement[?Yield]\n\nBindingElisionElement[Yield] :\nElisionopt BindingElement[?Yield]\n\nBindingElement[Yield ] :\nSingleNameBinding[?Yield]\nBindingPattern[?Yield] Initializer[In, ?Yield]opt\n", "features": ["destructuring-binding"]}, {"path": "./test262-main/test/language/destructuring/binding/syntax/array-rest-elements.js", "version": 6, "esid": " 13.3.3", "description": " >Array Binding Pattern with Rest Element\n", "info": " |Destructuring Binding Patterns - Syntax\n\nArrayBindingPattern[Yield] :\n[ Elisionopt BindingRestElement[?Yield]opt ]\n[ BindingElementList[?Yield] ]\n[ BindingElementList[?Yield] , Elisionopt BindingRestElement[?Yield]opt ]\n\nBindingRestElement[Yield] :\n... BindingIdentifier[?Yield]\n", "features": ["destructuring-binding"]}, {"path": "./test262-main/test/language/destructuring/binding/syntax/property-list-bindings-elements.js", "version": 6, "esid": " 13.3.3", "description": " >The ObjectBindingPattern with binding elements\n", "info": " |Destructuring Binding Patterns - Syntax\n\nObjectBindingPattern[Yield] :\n{ }\n{ BindingPropertyList[?Yield] }\n{ BindingPropertyList[?Yield] , }\n\nBindingPropertyList[Yield] :\nBindingProperty[?Yield]\nBindingPropertyList[?Yield] , BindingProperty[?Yield]\n\nBindingProperty[Yield] :\nSingleNameBinding[?Yield]\nPropertyName[?Yield] : BindingElement[?Yield]\n\nBindingElement[Yield ] :\nSingleNameBinding[?Yield]\nBindingPattern[?Yield] Initializer[In, ?Yield]opt\n\nSingleNameBinding[Yield] :\nBindingIdentifier[?Yield] Initializer[In, ?Yield]opt\n\n", "features": ["destructuring-binding"]}, {"path": "./test262-main/test/language/destructuring/binding/syntax/recursive-array-and-object-patterns.js", "version": 6, "esid": " 13.3.3", "description": " >Recursive array and object binding patterns\n", "info": " |Destructuring Binding Patterns - Syntax\n\nBindingPattern[Yield] :\nObjectBindingPattern[?Yield]\nArrayBindingPattern[?Yield]\n", "features": ["destructuring-binding"]}, {"path": "./test262-main/test/language/eval-code/direct/non-definable-global-generator.js", "version": 6, "esid": " 18.2.1.2", "description": " Throws a TypeError if a global generator function cannot be defined.", "info": " |Runtime Semantics: EvalDeclarationInstantiation( body, varEnv, lexEnv, strict)\n\n...\n8. For each d in varDeclarations, in reverse list order do\na. If d is neither a VariableDeclaration or a ForBinding, then\ni. Assert: d is either a FunctionDeclaration or a GeneratorDeclaration.\nii. NOTE If there are multiple FunctionDeclarations for the same name, the last declaration is used.\niii. Let fn be the sole element of the BoundNames of d.\niv. If fn is not an element of declaredFunctionNames, then\n1. If varEnvRec is a global Environment Record, then\na. Let fnDefinable be varEnvRec.CanDeclareGlobalFunction(fn).\nb. ReturnIfAbrupt(fnDefinable).\nc. If fnDefinable is false, throw TypeError exception.\n...\n", "flags": ["noStrict"], "features": ["generators"]}, {"path": "./test262-main/test/language/eval-code/direct/super-call-method.js", "esid": " sec-performeval", "description": " >SuperCall may may only occur in eval code for direct eval within a\nconstructor method\n", "info": " |[...]\n4. Let inMethod be false.\n5. Let inConstructor be false.\n6. If thisEnvRec has a [[HomeObject]] field, then\na. Let inMethod be true.\nb. If thisEnvRec.[[FunctionObject]] has a [[Construct]] field, let\ninConstructor be true.\n7. Let script be the ECMAScript code that is the result of parsing x,\ninterpreted as UTF-16 encoded Unicode text as described in 6.1.4, for the\ngoal symbol Script. If inMethod is false, additional early error rules\nfrom 18.2.1.1.1 are applied. If inConstructor is false, additional early\nerror rules from 18.2.1.1.2 are applied. If the parse fails, throw a\nSyntaxError exception. If any early errors are detected, throw a\nSyntaxError or a ReferenceError exception, depending on the type of the\nerror (but see also clause 16). Parsing and early error detection may be\ninterweaved in an implementation dependent manner.\n\n18.2.1.1.1 Additional Early Error Rules for Eval Outside Methods\n\nScriptBody : StatementList\n\n- It is a Syntax Error if StatementList contains super.\n", "features": ["super"]}, {"path": "./test262-main/test/language/eval-code/indirect/non-definable-global-generator.js", "esid": " 18.2.1.2", "version": 6, "description": " Throws a TypeError if a global generator function cannot be defined.", "info": " |Runtime Semantics: EvalDeclarationInstantiation( body, varEnv, lexEnv, strict)\n\n...\n8. For each d in varDeclarations, in reverse list order do\na. If d is neither a VariableDeclaration or a ForBinding, then\ni. Assert: d is either a FunctionDeclaration or a GeneratorDeclaration.\nii. NOTE If there are multiple FunctionDeclarations for the same name,\nthe last declaration is used.\niii. Let fn be the sole element of the BoundNames of d.\niv. If fn is not an element of declaredFunctionNames, then\n1. If varEnvRec is a global Environment Record, then\na. Let fnDefinable be varEnvRec.CanDeclareGlobalFunction(fn).\nb. ReturnIfAbrupt(fnDefinable).\nc. If fnDefinable is false, throw TypeError exception.\n...\n", "features": ["generators"]}, {"path": "./test262-main/test/language/eval-code/indirect/super-call.js", "esid": " 15.1.1", "version": 6, "description": " >An indirect eval may not contain SuperCall\n", "info": " |- It is a Syntax Error if StatementList Contains super unless the source code\ncontaining super is eval code that is being processed by a direct eval that\nis contained in function code that is not the function code of an\nArrowFunction.\n", "features": ["super"]}, {"path": "./test262-main/test/language/eval-code/indirect/super-prop.js", "esid": " 15.1.1", "version": 6, "description": " >An indirect eval may not contain SuperProperty\n", "info": " |- It is a Syntax Error if StatementList Contains super unless the source code\ncontaining super is eval code that is being processed by a direct eval that\nis contained in function code that is not the function code of an\nArrowFunction.\n", "features": ["super"]}, {"path": "./test262-main/test/language/expressions/addition/order-of-evaluation.js", "esid": " sec-addition-operator-plus-runtime-semantics-evaluation", "description": " Type coercion order of operations for addition operator", "features": ["Symbol"], "info": " |Evaluate lhs\nEvaluate rhs\nToPrimitive(lhs)\nToPrimitive(rhs)\nToNumeric(lhs)\nToNumeric(rhs)\n"}, {"path": "./test262-main/test/language/expressions/addition/symbol-to-string.js", "esid": " 12.7.3", "version": 6, "description": " Symbol value cannot be converted to a String", "info": " |[...]\n7. If Type(lprim) is String or Type(rprim) is String, then\na. Let lstr be ? ToString(lprim).\n", "features": ["Symbol"]}, {"path": "./test262-main/test/language/expressions/array/spread-err-mult-err-expr-throws.js", "description": " Spread operator following other arguments when evaluation throws (Array initializer)", "esid": " sec-runtime-semantics-arrayaccumulation", "features": ["generators"], "flags": ["generated"], "info": " |SpreadElement : ...AssignmentExpression\n\n1. Let spreadRef be the result of evaluating AssignmentExpression.\n2. Let spreadObj be ? GetValue(spreadRef).\n3. Let iterator be ? GetIterator(spreadObj).\n4. Repeat\na. Let next be ? IteratorStep(iterator).\nb. If next is false, return nextIndex.\nc. Let nextValue be ? IteratorValue(next).\nd. Let status be CreateDataProperty(array, ToString(ToUint32(nextIndex)),\nnextValue).\ne. Assert: status is true.\nf. Let nextIndex be nextIndex + 1.\n\n12.3.6.1 Runtime Semantics: ArgumentListEvaluation\n\nArgumentList : ArgumentList , ... AssignmentExpression\n\n1. Let precedingArgs be the result of evaluating ArgumentList.\n2. Let spreadRef be the result of evaluating AssignmentExpression.\n3. Let iterator be GetIterator(GetValue(spreadRef) ).\n4. ReturnIfAbrupt(iterator).\n\n"}, {"path": "./test262-main/test/language/expressions/array/spread-err-mult-err-iter-get-value.js", "description": " Spread operator following other arguments when GetIterator fails (@@iterator function return value) (Array initializer)", "esid": " sec-runtime-semantics-arrayaccumulation", "features": ["Symbol.iterator"], "flags": ["generated"], "info": " |SpreadElement : ...AssignmentExpression\n\n1. Let spreadRef be the result of evaluating AssignmentExpression.\n2. Let spreadObj be ? GetValue(spreadRef).\n3. Let iterator be ? GetIterator(spreadObj).\n4. Repeat\na. Let next be ? IteratorStep(iterator).\nb. If next is false, return nextIndex.\nc. Let nextValue be ? IteratorValue(next).\nd. Let status be CreateDataProperty(array, ToString(ToUint32(nextIndex)),\nnextValue).\ne. Assert: status is true.\nf. Let nextIndex be nextIndex + 1.\n\n12.3.6.1 Runtime Semantics: ArgumentListEvaluation\n\nArgumentList : ArgumentList , ... AssignmentExpression\n\n1. Let precedingArgs be the result of evaluating ArgumentList.\n2. Let spreadRef be the result of evaluating AssignmentExpression.\n3. Let iterator be GetIterator(GetValue(spreadRef) ).\n4. ReturnIfAbrupt(iterator).\n\n7.4.1 GetIterator ( obj, method )\n\n[...]\n2. Let iterator be ? Call(method, obj).\n3. If Type(iterator) is not Object, throw a TypeError exception.\n"}, {"path": "./test262-main/test/language/expressions/array/spread-err-mult-err-itr-get-call.js", "description": " Spread operator following other arguments when GetIterator fails (@@iterator function invocation) (Array initializer)", "esid": " sec-runtime-semantics-arrayaccumulation", "features": ["Symbol.iterator"], "flags": ["generated"], "info": " |SpreadElement : ...AssignmentExpression\n\n1. Let spreadRef be the result of evaluating AssignmentExpression.\n2. Let spreadObj be ? GetValue(spreadRef).\n3. Let iterator be ? GetIterator(spreadObj).\n4. Repeat\na. Let next be ? IteratorStep(iterator).\nb. If next is false, return nextIndex.\nc. Let nextValue be ? IteratorValue(next).\nd. Let status be CreateDataProperty(array, ToString(ToUint32(nextIndex)),\nnextValue).\ne. Assert: status is true.\nf. Let nextIndex be nextIndex + 1.\n\n12.3.6.1 Runtime Semantics: ArgumentListEvaluation\n\nArgumentList : ArgumentList , ... AssignmentExpression\n\n1. Let precedingArgs be the result of evaluating ArgumentList.\n2. Let spreadRef be the result of evaluating AssignmentExpression.\n3. Let iterator be GetIterator(GetValue(spreadRef) ).\n4. ReturnIfAbrupt(iterator).\n\n7.4.1 GetIterator ( obj, method )\n\n[...]\n3. Let iterator be Call(method,obj).\n4. ReturnIfAbrupt(iterator).\n"}, {"path": "./test262-main/test/language/expressions/array/spread-err-mult-err-itr-get-get.js", "description": " Spread operator following other arguments when GetIterator fails (@@iterator property access) (Array initializer)", "esid": " sec-runtime-semantics-arrayaccumulation", "features": ["Symbol.iterator"], "flags": ["generated"], "info": " |SpreadElement : ...AssignmentExpression\n\n1. Let spreadRef be the result of evaluating AssignmentExpression.\n2. Let spreadObj be ? GetValue(spreadRef).\n3. Let iterator be ? GetIterator(spreadObj).\n4. Repeat\na. Let next be ? IteratorStep(iterator).\nb. If next is false, return nextIndex.\nc. Let nextValue be ? IteratorValue(next).\nd. Let status be CreateDataProperty(array, ToString(ToUint32(nextIndex)),\nnextValue).\ne. Assert: status is true.\nf. Let nextIndex be nextIndex + 1.\n\n12.3.6.1 Runtime Semantics: ArgumentListEvaluation\n\nArgumentList : ArgumentList , ... AssignmentExpression\n\n1. Let precedingArgs be the result of evaluating ArgumentList.\n2. Let spreadRef be the result of evaluating AssignmentExpression.\n3. Let iterator be GetIterator(GetValue(spreadRef) ).\n4. ReturnIfAbrupt(iterator).\n\n7.4.1 GetIterator ( obj, method )\n\n1. If method was not passed, then\na. Let method be ? GetMethod(obj, @@iterator).\n"}, {"path": "./test262-main/test/language/expressions/array/spread-err-mult-err-itr-step.js", "description": " Spread operator following other arguments when IteratorStep fails (Array initializer)", "esid": " sec-runtime-semantics-arrayaccumulation", "features": ["Symbol.iterator"], "flags": ["generated"], "info": " |SpreadElement : ...AssignmentExpression\n\n1. Let spreadRef be the result of evaluating AssignmentExpression.\n2. Let spreadObj be ? GetValue(spreadRef).\n3. Let iterator be ? GetIterator(spreadObj).\n4. Repeat\na. Let next be ? IteratorStep(iterator).\nb. If next is false, return nextIndex.\nc. Let nextValue be ? IteratorValue(next).\nd. Let status be CreateDataProperty(array, ToString(ToUint32(nextIndex)),\nnextValue).\ne. Assert: status is true.\nf. Let nextIndex be nextIndex + 1.\n\n12.3.6.1 Runtime Semantics: ArgumentListEvaluation\n\nArgumentList : ArgumentList , ... AssignmentExpression\n\n1. Let precedingArgs be the result of evaluating ArgumentList.\n2. Let spreadRef be the result of evaluating AssignmentExpression.\n3. Let iterator be GetIterator(GetValue(spreadRef) ).\n4. ReturnIfAbrupt(iterator).\n\n7.4.5 IteratorStep ( iterator )\n\n1. Let result be IteratorNext(iterator).\n2. ReturnIfAbrupt(result).\n\n7.4.2 IteratorNext ( iterator, value )\n\n1. If value was not passed, then\na. Let result be Invoke(iterator, \"next\", \u00ab \u00bb).\n[...]\n3. ReturnIfAbrupt(result).\n"}, {"path": "./test262-main/test/language/expressions/array/spread-err-mult-err-itr-value.js", "description": " Spread operator following other arguments when IteratorValue fails (Array initializer)", "esid": " sec-runtime-semantics-arrayaccumulation", "features": ["Symbol.iterator"], "flags": ["generated"], "info": " |SpreadElement : ...AssignmentExpression\n\n1. Let spreadRef be the result of evaluating AssignmentExpression.\n2. Let spreadObj be ? GetValue(spreadRef).\n3. Let iterator be ? GetIterator(spreadObj).\n4. Repeat\na. Let next be ? IteratorStep(iterator).\nb. If next is false, return nextIndex.\nc. Let nextValue be ? IteratorValue(next).\nd. Let status be CreateDataProperty(array, ToString(ToUint32(nextIndex)),\nnextValue).\ne. Assert: status is true.\nf. Let nextIndex be nextIndex + 1.\n\n12.3.6.1 Runtime Semantics: ArgumentListEvaluation\n\nArgumentList : ArgumentList , ... AssignmentExpression\n\n1. Let precedingArgs be the result of evaluating ArgumentList.\n2. Let spreadRef be the result of evaluating AssignmentExpression.\n3. Let iterator be GetIterator(GetValue(spreadRef) ).\n4. ReturnIfAbrupt(iterator).\n\n7.4.4 IteratorValue ( iterResult )\n\n1. Assert: Type(iterResult) is Object.\n2. Return Get(iterResult, \"value\").\n\n7.3.1 Get (O, P)\n\n[...]\n3. Return O.[[Get]](P, O).\n"}, {"path": "./test262-main/test/language/expressions/array/spread-err-sngl-err-expr-throws.js", "description": " Spread operator applied to the only argument when evaluation throws (Array initializer)", "esid": " sec-runtime-semantics-arrayaccumulation", "features": ["generators"], "flags": ["generated"], "info": " |SpreadElement : ...AssignmentExpression\n\n1. Let spreadRef be the result of evaluating AssignmentExpression.\n2. Let spreadObj be ? GetValue(spreadRef).\n3. Let iterator be ? GetIterator(spreadObj).\n4. Repeat\na. Let next be ? IteratorStep(iterator).\nb. If next is false, return nextIndex.\nc. Let nextValue be ? IteratorValue(next).\nd. Let status be CreateDataProperty(array, ToString(ToUint32(nextIndex)),\nnextValue).\ne. Assert: status is true.\nf. Let nextIndex be nextIndex + 1.\n\n12.3.6.1 Runtime Semantics: ArgumentListEvaluation\n\nArgumentList : ... AssignmentExpression\n\n1. Let list be an empty List.\n2. Let spreadRef be the result of evaluating AssignmentExpression.\n3. Let spreadObj be GetValue(spreadRef).\n4. Let iterator be GetIterator(spreadObj).\n5. ReturnIfAbrupt(iterator).\n"}, {"path": "./test262-main/test/language/expressions/array/spread-err-sngl-err-itr-get-call.js", "description": " Spread operator applied to the only argument when GetIterator fails (@@iterator function invocation) (Array initializer)", "esid": " sec-runtime-semantics-arrayaccumulation", "features": ["Symbol.iterator"], "flags": ["generated"], "info": " |SpreadElement : ...AssignmentExpression\n\n1. Let spreadRef be the result of evaluating AssignmentExpression.\n2. Let spreadObj be ? GetValue(spreadRef).\n3. Let iterator be ? GetIterator(spreadObj).\n4. Repeat\na. Let next be ? IteratorStep(iterator).\nb. If next is false, return nextIndex.\nc. Let nextValue be ? IteratorValue(next).\nd. Let status be CreateDataProperty(array, ToString(ToUint32(nextIndex)),\nnextValue).\ne. Assert: status is true.\nf. Let nextIndex be nextIndex + 1.\n\n12.3.6.1 Runtime Semantics: ArgumentListEvaluation\n\nArgumentList : ... AssignmentExpression\n\n1. Let list be an empty List.\n2. Let spreadRef be the result of evaluating AssignmentExpression.\n3. Let spreadObj be GetValue(spreadRef).\n4. Let iterator be GetIterator(spreadObj).\n5. ReturnIfAbrupt(iterator).\n\n7.4.1 GetIterator ( obj, method )\n\n[...]\n3. Let iterator be Call(method,obj).\n4. ReturnIfAbrupt(iterator).\n"}, {"path": "./test262-main/test/language/expressions/array/spread-err-sngl-err-itr-get-get.js", "description": " Spread operator applied to the only argument when GetIterator fails (@@iterator property access) (Array initializer)", "esid": " sec-runtime-semantics-arrayaccumulation", "features": ["Symbol.iterator"], "flags": ["generated"], "info": " |SpreadElement : ...AssignmentExpression\n\n1. Let spreadRef be the result of evaluating AssignmentExpression.\n2. Let spreadObj be ? GetValue(spreadRef).\n3. Let iterator be ? GetIterator(spreadObj).\n4. Repeat\na. Let next be ? IteratorStep(iterator).\nb. If next is false, return nextIndex.\nc. Let nextValue be ? IteratorValue(next).\nd. Let status be CreateDataProperty(array, ToString(ToUint32(nextIndex)),\nnextValue).\ne. Assert: status is true.\nf. Let nextIndex be nextIndex + 1.\n\n12.3.6.1 Runtime Semantics: ArgumentListEvaluation\n\nArgumentList : ... AssignmentExpression\n\n1. Let list be an empty List.\n2. Let spreadRef be the result of evaluating AssignmentExpression.\n3. Let spreadObj be GetValue(spreadRef).\n4. Let iterator be GetIterator(spreadObj).\n5. ReturnIfAbrupt(iterator).\n\n7.4.1 GetIterator ( obj, method )\n\n1. If method was not passed, then\na. Let method be ? GetMethod(obj, @@iterator).\n"}, {"path": "./test262-main/test/language/expressions/array/spread-err-sngl-err-itr-get-value.js", "description": " Spread operator applied to the only argument when GetIterator fails (@@iterator function return value) (Array initializer)", "esid": " sec-runtime-semantics-arrayaccumulation", "features": ["Symbol.iterator"], "flags": ["generated"], "info": " |SpreadElement : ...AssignmentExpression\n\n1. Let spreadRef be the result of evaluating AssignmentExpression.\n2. Let spreadObj be ? GetValue(spreadRef).\n3. Let iterator be ? GetIterator(spreadObj).\n4. Repeat\na. Let next be ? IteratorStep(iterator).\nb. If next is false, return nextIndex.\nc. Let nextValue be ? IteratorValue(next).\nd. Let status be CreateDataProperty(array, ToString(ToUint32(nextIndex)),\nnextValue).\ne. Assert: status is true.\nf. Let nextIndex be nextIndex + 1.\n\n12.3.6.1 Runtime Semantics: ArgumentListEvaluation\n\nArgumentList : ... AssignmentExpression\n\n1. Let list be an empty List.\n2. Let spreadRef be the result of evaluating AssignmentExpression.\n3. Let spreadObj be GetValue(spreadRef).\n4. Let iterator be GetIterator(spreadObj).\n5. ReturnIfAbrupt(iterator).\n\n7.4.1 GetIterator ( obj, method )\n\n[...]\n2. Let iterator be ? Call(method, obj).\n3. If Type(iterator) is not Object, throw a TypeError exception.\n"}, {"path": "./test262-main/test/language/expressions/array/spread-err-sngl-err-itr-step.js", "description": " Spread operator applied to the only argument when IteratorStep fails (Array initializer)", "esid": " sec-runtime-semantics-arrayaccumulation", "features": ["Symbol.iterator"], "flags": ["generated"], "info": " |SpreadElement : ...AssignmentExpression\n\n1. Let spreadRef be the result of evaluating AssignmentExpression.\n2. Let spreadObj be ? GetValue(spreadRef).\n3. Let iterator be ? GetIterator(spreadObj).\n4. Repeat\na. Let next be ? IteratorStep(iterator).\nb. If next is false, return nextIndex.\nc. Let nextValue be ? IteratorValue(next).\nd. Let status be CreateDataProperty(array, ToString(ToUint32(nextIndex)),\nnextValue).\ne. Assert: status is true.\nf. Let nextIndex be nextIndex + 1.\n\n12.3.6.1 Runtime Semantics: ArgumentListEvaluation\n\nArgumentList : ... AssignmentExpression\n\n1. Let list be an empty List.\n2. Let spreadRef be the result of evaluating AssignmentExpression.\n3. Let spreadObj be GetValue(spreadRef).\n4. Let iterator be GetIterator(spreadObj).\n5. ReturnIfAbrupt(iterator).\n6. Repeat\na. Let next be IteratorStep(iterator).\nb. ReturnIfAbrupt(next).\n\n7.4.5 IteratorStep ( iterator )\n\n1. Let result be IteratorNext(iterator).\n2. ReturnIfAbrupt(result).\n\n7.4.2 IteratorNext ( iterator, value )\n\n1. If value was not passed, then\na. Let result be Invoke(iterator, \"next\", \u00ab \u00bb).\n[...]\n3. ReturnIfAbrupt(result).\n"}, {"path": "./test262-main/test/language/expressions/array/spread-err-sngl-err-itr-value.js", "description": " Spread operator applied to the only argument when IteratorValue fails (Array initializer)", "esid": " sec-runtime-semantics-arrayaccumulation", "features": ["Symbol.iterator"], "flags": ["generated"], "info": " |SpreadElement : ...AssignmentExpression\n\n1. Let spreadRef be the result of evaluating AssignmentExpression.\n2. Let spreadObj be ? GetValue(spreadRef).\n3. Let iterator be ? GetIterator(spreadObj).\n4. Repeat\na. Let next be ? IteratorStep(iterator).\nb. If next is false, return nextIndex.\nc. Let nextValue be ? IteratorValue(next).\nd. Let status be CreateDataProperty(array, ToString(ToUint32(nextIndex)),\nnextValue).\ne. Assert: status is true.\nf. Let nextIndex be nextIndex + 1.\n\n12.3.6.1 Runtime Semantics: ArgumentListEvaluation\n\nArgumentList : ... AssignmentExpression\n\n1. Let list be an empty List.\n2. Let spreadRef be the result of evaluating AssignmentExpression.\n3. Let spreadObj be GetValue(spreadRef).\n4. Let iterator be GetIterator(spreadObj).\n5. ReturnIfAbrupt(iterator).\n6. Repeat\na. Let next be IteratorStep(iterator).\nb. ReturnIfAbrupt(next).\nc. If next is false, return list.\nd. Let nextArg be IteratorValue(next).\ne. ReturnIfAbrupt(nextArg).\n\n7.4.4 IteratorValue ( iterResult )\n\n1. Assert: Type(iterResult) is Object.\n2. Return Get(iterResult, \"value\").\n\n7.3.1 Get (O, P)\n\n[...]\n3. Return O.[[Get]](P, O).\n"}, {"path": "./test262-main/test/language/expressions/array/spread-mult-iter.js", "description": " Spread operator following other arguments with a valid iterator (Array initializer)", "esid": " sec-runtime-semantics-arrayaccumulation", "features": ["Symbol.iterator"], "flags": ["generated"], "info": " |SpreadElement : ...AssignmentExpression\n\n1. Let spreadRef be the result of evaluating AssignmentExpression.\n2. Let spreadObj be ? GetValue(spreadRef).\n3. Let iterator be ? GetIterator(spreadObj).\n4. Repeat\na. Let next be ? IteratorStep(iterator).\nb. If next is false, return nextIndex.\nc. Let nextValue be ? IteratorValue(next).\nd. Let status be CreateDataProperty(array, ToString(ToUint32(nextIndex)),\nnextValue).\ne. Assert: status is true.\nf. Let nextIndex be nextIndex + 1.\n\n12.3.6.1 Runtime Semantics: ArgumentListEvaluation\n\nArgumentList : ... AssignmentExpression\n\n1. Let list be an empty List.\n2. Let spreadRef be the result of evaluating AssignmentExpression.\n3. Let spreadObj be GetValue(spreadRef).\n4. Let iterator be GetIterator(spreadObj).\n5. ReturnIfAbrupt(iterator).\n6. Repeat\na. Let next be IteratorStep(iterator).\nb. ReturnIfAbrupt(next).\nc. If next is false, return list.\nd. Let nextArg be IteratorValue(next).\ne. ReturnIfAbrupt(nextArg).\nf. Append nextArg as the last element of list.\n"}, {"path": "./test262-main/test/language/expressions/array/spread-sngl-iter.js", "description": " Spread operator applied to the only argument with a valid iterator (Array initializer)", "esid": " sec-runtime-semantics-arrayaccumulation", "features": ["Symbol.iterator"], "flags": ["generated"], "info": " |SpreadElement : ...AssignmentExpression\n\n1. Let spreadRef be the result of evaluating AssignmentExpression.\n2. Let spreadObj be ? GetValue(spreadRef).\n3. Let iterator be ? GetIterator(spreadObj).\n4. Repeat\na. Let next be ? IteratorStep(iterator).\nb. If next is false, return nextIndex.\nc. Let nextValue be ? IteratorValue(next).\nd. Let status be CreateDataProperty(array, ToString(ToUint32(nextIndex)),\nnextValue).\ne. Assert: status is true.\nf. Let nextIndex be nextIndex + 1.\n\n12.3.6.1 Runtime Semantics: ArgumentListEvaluation\n\nArgumentList : ... AssignmentExpression\n\n1. Let list be an empty List.\n2. Let spreadRef be the result of evaluating AssignmentExpression.\n3. Let spreadObj be GetValue(spreadRef).\n4. Let iterator be GetIterator(spreadObj).\n5. ReturnIfAbrupt(iterator).\n6. Repeat\na. Let next be IteratorStep(iterator).\nb. ReturnIfAbrupt(next).\nc. If next is false, return list.\nd. Let nextArg be IteratorValue(next).\ne. ReturnIfAbrupt(nextArg).\nf. Append nextArg as the last element of list.\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/ary-init-iter-get-err-array-prototype.js", "description": " Abrupt completion returned by GetIterator (arrow function expression)", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\nRuntime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iteratorRecord be ? GetIterator(value).\n\nGetIterator ( obj [ , hint [ , method ] ] )\n\n[...]\n4. Let iterator be ? Call(method, obj).\n\nCall ( F, V [ , argumentsList ] )\n\n[...]\n2. If IsCallable(F) is false, throw a TypeError exception.\n\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/ary-init-iter-get-err.js", "description": " Abrupt completion returned by GetIterator (arrow function expression)", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iterator be GetIterator(value).\n2. ReturnIfAbrupt(iterator).\n\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/ary-init-iter-no-close.js", "description": " Iterator is not closed when exhausted by pattern evaluation (arrow function expression)", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n[...]\n4. If iteratorRecord.[[done]] is false, return ? IteratorClose(iterator,\nresult).\n[...]\n\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/ary-ptrn-elem-ary-elem-init.js", "description": " BindingElement with array binding pattern and initializer is used (arrow function expression)", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/ary-ptrn-elem-ary-elem-iter.js", "description": " BindingElement with array binding pattern and initializer is not used (arrow function expression)", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\n[...]\ne. Else,\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/ary-ptrn-elem-ary-elision-init.js", "description": " BindingElement with array binding pattern and initializer is used (arrow function expression)", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/ary-ptrn-elem-ary-elision-iter.js", "description": " BindingElement with array binding pattern and initializer is not used (arrow function expression)", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\n[...]\ne. Else,\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/ary-ptrn-elem-ary-empty-init.js", "description": " BindingElement with array binding pattern and initializer is used (arrow function expression)", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/ary-ptrn-elem-ary-empty-iter.js", "description": " BindingElement with array binding pattern and initializer is not used (arrow function expression)", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\n[...]\ne. Else,\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/ary-ptrn-elem-ary-rest-init.js", "description": " BindingElement with array binding pattern and initializer is used (arrow function expression)", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/ary-ptrn-elem-ary-rest-iter.js", "description": " BindingElement with array binding pattern and initializer is not used (arrow function expression)", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\n[...]\ne. Else,\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/ary-ptrn-elem-id-init-exhausted.js", "description": " Destructuring initializer with an exhausted iterator (arrow function expression)", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n5. If iteratorRecord.[[done]] is true, let v be undefined.\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/ary-ptrn-elem-id-init-hole.js", "description": " Destructuring initializer with a \"hole\" (arrow function expression)", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nSingleNameBinding : BindingIdentifier Initializeropt\n[...] 6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\n[...]\n7. If environment is undefined, return PutValue(lhs, v). 8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/ary-ptrn-elem-id-init-skipped.js", "description": " Destructuring initializer is not evaluated when value is not `undefined` (arrow function expression)", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/ary-ptrn-elem-id-init-throws.js", "description": " Destructuring initializer returns an abrupt completion (arrow function expression)", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/ary-ptrn-elem-id-init-undef.js", "description": " Destructuring initializer with an undefined value (arrow function expression)", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/ary-ptrn-elem-id-init-unresolvable.js", "description": " Destructuring initializer is an unresolvable reference (arrow function expression)", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/ary-ptrn-elem-id-iter-step-err.js", "description": " Error forwarding when IteratorStep returns an abrupt completion (arrow function expression)", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/ary-ptrn-elem-id-iter-val-array-prototype.js", "description": " Array destructuring uses overriden Array.prototype[Symbol.iterator] (arrow function expression)", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\nRuntime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializer_opt\n\n1. Let bindingId be StringValue of BindingIdentifier.\n2. Let lhs be ? ResolveBinding(bindingId, environment).\n3. If iteratorRecord.[[Done]] is false, then\na. Let next be IteratorStep(iteratorRecord).\nb. If next is an abrupt completion, set iteratorRecord.[[Done]] to true.\nc. ReturnIfAbrupt(next).\nd. If next is false, set iteratorRecord.[[Done]] to true.\ne. Else,\ni. Let v be IteratorValue(next).\nii. If v is an abrupt completion, set iteratorRecord.[[Done]] to true.\niii. ReturnIfAbrupt(v).\n[...]\n7. Return InitializeReferencedBinding(lhs, v).\n\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/ary-ptrn-elem-id-iter-val-err.js", "description": " Error forwarding when IteratorValue returns an abrupt completion (arrow function expression)", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\nd. If next is false, set iteratorRecord.[[done]] to true.\ne. Else,\ni. Let v be IteratorValue(next).\nii. If v is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\niii. ReturnIfAbrupt(v).\n\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/ary-ptrn-elem-obj-id-init.js", "description": " BindingElement with object binding pattern and initializer is used (arrow function expression)", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/ary-ptrn-elem-obj-id.js", "description": " BindingElement with object binding pattern and initializer is not used (arrow function expression)", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/ary-ptrn-elem-obj-prop-id-init.js", "description": " BindingElement with object binding pattern and initializer is used (arrow function expression)", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/ary-ptrn-elem-obj-prop-id.js", "description": " BindingElement with object binding pattern and initializer is not used (arrow function expression)", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/ary-ptrn-elision-exhausted.js", "description": " Elision accepts exhausted iterator (arrow function expression)", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ Elision ]\n\n1. Return the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with iteratorRecord\nas the argument.\n\n12.14.5.3 Runtime Semantics: IteratorDestructuringAssignmentEvaluation\n\nElision : ,\n\n1. If iteratorRecord.[[done]] is false, then\n[...]\n2. Return NormalCompletion(empty).\n\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/ary-ptrn-elision-step-err.js", "description": " Elision advances iterator and forwards abrupt completions (arrow function expression)", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ Elision ]\n\n1. Return the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with iteratorRecord\nas the argument.\n\n12.14.5.3 Runtime Semantics: IteratorDestructuringAssignmentEvaluation\n\nElision : ,\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/ary-ptrn-elision.js", "description": " Elision advances iterator (arrow function expression)", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ Elision ]\n\n1. Return the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with iteratorRecord\nas the argument.\n\n12.14.5.3 Runtime Semantics: IteratorDestructuringAssignmentEvaluation\n\nElision : ,\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\nd. If next is false, set iteratorRecord.[[done]] to true.\n2. Return NormalCompletion(empty).\n\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/ary-ptrn-empty.js", "description": " No iteration occurs for an \"empty\" array binding pattern (arrow function expression)", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ ]\n\n1. Return NormalCompletion(empty).\n\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/ary-ptrn-rest-id-direct.js", "description": " Lone rest element (direct binding) (arrow function expression)", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "includes": ["compareArray.js"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\nRuntime Semantics: IteratorBindingInitialization\n\nBindingRestElement : ... BindingIdentifier\n\n[...]\n2. Let A be ! ArrayCreate(0).\n3. Let n be 0.\n4. Repeat,\n[...]\nf. Perform ! CreateDataPropertyOrThrow(A, ! ToString(n), nextValue).\ng. Set n to n + 1.\n\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/ary-ptrn-rest-id-elision-next-err.js", "description": " Rest element following elision elements (arrow function expression)", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nArrayBindingPattern : [ Elisionopt BindingRestElement ]\n1. If Elision is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with\niteratorRecord as the argument.\nb. ReturnIfAbrupt(status).\n2. Return the result of performing IteratorBindingInitialization for\nBindingRestElement with iteratorRecord and environment as arguments.\n\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/ary-ptrn-rest-id-elision.js", "description": " Rest element following elision elements (arrow function expression)", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nArrayBindingPattern : [ Elisionopt BindingRestElement ]\n1. If Elision is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with\niteratorRecord as the argument.\nb. ReturnIfAbrupt(status).\n2. Return the result of performing IteratorBindingInitialization for\nBindingRestElement with iteratorRecord and environment as arguments.\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/ary-ptrn-rest-id-exhausted.js", "description": " RestElement applied to an exhausted iterator (arrow function expression)", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\n[...]\nb. If iteratorRecord.[[done]] is true, then\ni. If environment is undefined, return PutValue(lhs, A).\nii. Return InitializeReferencedBinding(lhs, A).\n\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/ary-ptrn-rest-id-iter-step-err.js", "description": " Error forwarding when IteratorStep returns an abrupt completion (arrow function expression)", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\na. If iteratorRecord.[[done]] is false,\ni. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nii. If next is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\niii. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/ary-ptrn-rest-id-iter-val-err.js", "description": " Error forwarding when IteratorValue returns an abrupt completion (arrow function expression)", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\n[...]\nc. Let nextValue be IteratorValue(next).\nd. If nextValue is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\ne. ReturnIfAbrupt(nextValue).\n\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/ary-ptrn-rest-id.js", "description": " Lone rest element (arrow function expression)", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n[...] 3. Let A be ArrayCreate(0). [...] 5. Repeat\n[...]\nf. Let status be CreateDataProperty(A, ToString (n), nextValue).\n[...]\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/obj-ptrn-prop-ary-init.js", "description": " Object binding pattern with \"nested\" array binding pattern using initializer (arrow function expression)", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/obj-ptrn-prop-ary-value-null.js", "description": " Object binding pattern with \"nested\" array binding pattern taking the `null` value (arrow function expression)", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/obj-ptrn-prop-ary.js", "description": " Object binding pattern with \"nested\" array binding pattern not using initializer (arrow function expression)", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/obj-ptrn-prop-eval-err.js", "description": " Evaluation of property name returns an abrupt completion (arrow function expression)", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingProperty : PropertyName : BindingElement\n\n1. Let P be the result of evaluating PropertyName\n2. ReturnIfAbrupt(P).\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/obj-ptrn-prop-id-get-value-err.js", "description": " Error thrown when accessing the corresponding property of the value object (arrow function expression)", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. Let v be GetV(value, propertyName).\n2. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/obj-ptrn-prop-id-init-skipped.js", "description": " Destructuring initializer is not evaluated when value is not `undefined` (arrow function expression)", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/obj-ptrn-prop-id-init-throws.js", "description": " Error thrown when evaluating the initializer (arrow function expression)", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/obj-ptrn-prop-id-init-unresolvable.js", "description": " Destructuring initializer is an unresolvable reference (arrow function expression)", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/obj-ptrn-prop-id-init.js", "description": " Binding as specified via property name, identifier, and initializer (arrow function expression)", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/obj-ptrn-prop-obj-init.js", "description": " Object binding pattern with \"nested\" object binding pattern using initializer (arrow function expression)", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/obj-ptrn-prop-obj-value-null.js", "description": " Object binding pattern with \"nested\" object binding pattern taking the `null` value (arrow function expression)", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/obj-ptrn-prop-obj-value-undef.js", "description": " Object binding pattern with \"nested\" object binding pattern taking the `null` value (arrow function expression)", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/dstr/obj-ptrn-prop-obj.js", "description": " Object binding pattern with \"nested\" object binding pattern not using initializer (arrow function expression)", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n[...]\n4. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/forbidden-ext/b1/arrow-function-forbidden-ext-direct-access-prop-arguments.js", "description": " Forbidden extension, f.arguments (arrow function expression)", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["arrow-function"], "flags": ["generated", "noStrict"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n\nECMAScript function objects defined using syntactic constructors in strict mode code must\nnot be created with own properties named \"caller\" or \"arguments\". Such own properties also\nmust not be created for function objects defined using an ArrowFunction, MethodDefinition,\nGeneratorDeclaration, GeneratorExpression, AsyncGeneratorDeclaration, AsyncGeneratorExpression,\nClassDeclaration, ClassExpression, AsyncFunctionDeclaration, AsyncFunctionExpression, or\nAsyncArrowFunction regardless of whether the definition is contained in strict mode code.\nBuilt-in functions, strict functions created using the Function constructor, generator functions\ncreated using the Generator constructor, async functions created using the AsyncFunction\nconstructor, and functions created using the bind method also must not be created with such own\nproperties.\n\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/forbidden-ext/b1/arrow-function-forbidden-ext-direct-access-prop-caller.js", "description": " Forbidden extension, o.caller (arrow function expression)", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "features": ["arrow-function"], "flags": ["generated", "noStrict"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n\nECMAScript function objects defined using syntactic constructors in strict mode code must\nnot be created with own properties named \"caller\" or \"arguments\". Such own properties also\nmust not be created for function objects defined using an ArrowFunction, MethodDefinition,\nGeneratorDeclaration, GeneratorExpression, AsyncGeneratorDeclaration, AsyncGeneratorExpression,\nClassDeclaration, ClassExpression, AsyncFunctionDeclaration, AsyncFunctionExpression, or\nAsyncArrowFunction regardless of whether the definition is contained in strict mode code.\nBuilt-in functions, strict functions created using the Function constructor, generator functions\ncreated using the Generator constructor, async functions created using the AsyncFunction\nconstructor, and functions created using the bind method also must not be created with such own\nproperties.\n\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/forbidden-ext/b2/arrow-function-forbidden-ext-indirect-access-own-prop-caller-get.js", "description": " Forbidden extension, o.caller (arrow function expression)", "esid": " sec-arrow-definitions-runtime-semantics-evaluation", "features": ["arrow-function"], "flags": ["generated", "noStrict"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n\nIf an implementation extends any function object with an own property named \"caller\" the value of\nthat property, as observed using [[Get]] or [[GetOwnProperty]], must not be a strict function\nobject. If it is an accessor property, the function that is the value of the property's [[Get]]\nattribute must never return a strict function when called.\n\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/forbidden-ext/b2/arrow-function-forbidden-ext-indirect-access-own-prop-caller-value.js", "description": " Forbidden extension, o.caller (arrow function expression)", "esid": " sec-arrow-definitions-runtime-semantics-evaluation", "features": ["arrow-function"], "flags": ["generated", "noStrict"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n\nIf an implementation extends any function object with an own property named \"caller\" the value of\nthat property, as observed using [[Get]] or [[GetOwnProperty]], must not be a strict function\nobject. If it is an accessor property, the function that is the value of the property's [[Get]]\nattribute must never return a strict function when called.\n\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/forbidden-ext/b2/arrow-function-forbidden-ext-indirect-access-prop-caller.js", "description": " Forbidden extension, o.caller (arrow function expression)", "esid": " sec-arrow-definitions-runtime-semantics-evaluation", "features": ["arrow-function"], "flags": ["generated", "noStrict"], "info": " |ArrowFunction : ArrowParameters => ConciseBody\n\n\nIf an implementation extends any function object with an own property named \"caller\" the value of\nthat property, as observed using [[Get]] or [[GetOwnProperty]], must not be a strict function\nobject. If it is an accessor property, the function that is the value of the property's [[Get]]\nattribute must never return a strict function when called.\n\n"}, {"path": "./test262-main/test/language/expressions/arrow-function/length-dflt.js", "version": 6, "esid": " 14.1.6", "description": " >Default parameters' effect on function length\n", "info": " |Function length is counted by the non initialized parameters in the left.\n\n9.2.4 FunctionInitialize (F, kind, ParameterList, Body, Scope)\n\n[...]\n2. Let len be the ExpectedArgumentCount of ParameterList.\n3. Perform ! DefinePropertyOrThrow(F, \"length\", PropertyDescriptor{[[Value]]:\nlen, [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true}).\n[...]\n\nFormalsList : FormalParameter\n\n1. If HasInitializer of FormalParameter is true return 0\n2. Return 1.\n\nFormalsList : FormalsList , FormalParameter\n\n1. Let count be the ExpectedArgumentCount of FormalsList.\n2. If HasInitializer of FormalsList is true or HasInitializer of\nFormalParameter is true, return count.\n3. Return count+1.\n", "features": ["default-parameters"], "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/language/expressions/arrow-function/name.js", "esid": " sec-arrow-function-definitions-runtime-semantics-evaluation", "description": " Assignment of function `name` attribute", "info": " |ArrowFunction : ArrowParameters => ConciseBody \n\n1. Let scope be the LexicalEnvironment of the running execution context.\n2. Let parameters be CoveredFormalsList of ArrowParameters.\n3. Let closure be FunctionCreate(Arrow, parameters, ConciseBody, scope, \"\").\n...\n5. Return closure.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-elem-init-assignment.js", "description": " If the Initializer is present and v is undefined, the Initializer should be evaluated and the result assigned to the target reference. (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-elem-init-evaluation.js", "description": " The Initializer should only be evaluated if v is undefined. (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-elem-init-in.js", "description": " The Initializer in an AssignmentElement may be an `in` expression. (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-elem-init-order.js", "description": " Initializer values should be assigned in left-to-right order. (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-elem-init-simple-no-strict.js", "description": " Identifiers that appear as the DestructuringAssignmentTarget in an AssignmentElement should take on the iterated value corresponding to their position in the ArrayAssignmentPattern. (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated", "noStrict"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-elem-init-yield-expr.js", "description": " When a `yield` token appears within the Initializer of an AssignmentElement within a generator function body, it behaves as a YieldExpression. (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-elem-iter-get-err.js", "description": " Abrupt completion returned from GetIterator (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nArrayAssignmentPattern : [ AssignmentElementList ]\n\n1. Let iterator be GetIterator(value).\n2. ReturnIfAbrupt(iterator).\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-elem-iter-nrml-close-skip.js", "description": " IteratorClose is not called when assignment evaluation has exhausted the iterator (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nArrayAssignmentPattern : [ AssignmentElementList ]\n\n[...]\n5. If iteratorRecord.[[done]] is false, return IteratorClose(iterator, result).\n6. Return result.\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-elem-iter-thrw-close-skip.js", "description": " IteratorClose is not called when iteration produces an abrupt completion (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nArrayAssignmentPattern : [ AssignmentElementList ]\n\n[...]\n5. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nresult).\n6. Return result.\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-elem-nested-array-yield-expr.js", "description": " When a `yield` token appears within the DestructuringAssignmentTarget of a nested destructuring assignment and within a generator function body, it behaves as a YieldExpression. (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-elem-put-obj-literal-prop-ref-init-active.js", "description": " The DestructuringAssignmentTarget of an AssignmentElement can extend to LHSExpressions if it is neither an ObjectLiteral nor an ArrayLiteral and its AssignmentTargetTyp is simple. Using MemberExpression (ObjLiteral + identifier) with activated initializer. (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nSyntax\n\nAssignmentPattern : ArrayAssignmentPattern\nArrayAssignmentPattern : [ AssignmentElementList ]\nAssignmentElementList : AssignmentElisionElement\nAssignmentElisionElement : Elision_opt AssignmentElement\nAssignmentElement : DestructuringAssignmentTarget Initializer_opt\nDestructuringAssignmentTarget : LeftHandSideExpression\n\nStatic Semantics: Early Errors\n\nDestructuringAssignmentTarget : LeftHandSideExpression\n\n- It is a Syntax Error if LeftHandSideExpression is either an ObjectLiteral or an ArrayLiteral and if LeftHandSideExpression is not covering an AssignmentPattern.\n- It is a Syntax Error if LeftHandSideExpression is neither an ObjectLiteral nor an ArrayLiteral and AssignmentTargetType(LeftHandSideExpression) is not simple.\n\nRuntime Semantics: DestructuringAssignmentEvaluation\nArrayAssignmentPattern : [ AssignmentElementList ]\n\n1. Let iteratorRecord be ? GetIterator(value).\n2. Let result be IteratorDestructuringAssignmentEvaluation of AssignmentElementList with argument iteratorRecord.\n3. If iteratorRecord.[[Done]] is false, return ? IteratorClose(iteratorRecord, result).\n4. Return result.\n\nRuntime Semantics: IteratorDestructuringAssignmentEvaluation\nAssignmentElement : DestructuringAssignmentTarget Initializer\n\n1. If DestructuringAssignmentTarget is neither an ObjectLiteral nor an ArrayLiteral, then\na. Let lref be the result of evaluating DestructuringAssignmentTarget.\n...\n7. Return ? PutValue(lref, v).\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-elem-put-obj-literal-prop-ref-init.js", "description": " The DestructuringAssignmentTarget of an AssignmentElement can extend to LHSExpressions if it is neither an ObjectLiteral nor an ArrayLiteral and its AssignmentTargetTyp is simple. Using MemberExpression (ObjLiteral + identifier) with initializer. (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nSyntax\n\nAssignmentPattern : ArrayAssignmentPattern\nArrayAssignmentPattern : [ AssignmentElementList ]\nAssignmentElementList : AssignmentElisionElement\nAssignmentElisionElement : Elision_opt AssignmentElement\nAssignmentElement : DestructuringAssignmentTarget Initializer_opt\nDestructuringAssignmentTarget : LeftHandSideExpression\n\nStatic Semantics: Early Errors\n\nDestructuringAssignmentTarget : LeftHandSideExpression\n\n- It is a Syntax Error if LeftHandSideExpression is either an ObjectLiteral or an ArrayLiteral and if LeftHandSideExpression is not covering an AssignmentPattern.\n- It is a Syntax Error if LeftHandSideExpression is neither an ObjectLiteral nor an ArrayLiteral and AssignmentTargetType(LeftHandSideExpression) is not simple.\n\nRuntime Semantics: DestructuringAssignmentEvaluation\nArrayAssignmentPattern : [ AssignmentElementList ]\n\n1. Let iteratorRecord be ? GetIterator(value).\n2. Let result be IteratorDestructuringAssignmentEvaluation of AssignmentElementList with argument iteratorRecord.\n3. If iteratorRecord.[[Done]] is false, return ? IteratorClose(iteratorRecord, result).\n4. Return result.\n\nRuntime Semantics: IteratorDestructuringAssignmentEvaluation\nAssignmentElement : DestructuringAssignmentTarget Initializer\n\n1. If DestructuringAssignmentTarget is neither an ObjectLiteral nor an ArrayLiteral, then\na. Let lref be the result of evaluating DestructuringAssignmentTarget.\n...\n7. Return ? PutValue(lref, v).\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-elem-put-unresolvable-strict.js", "description": " In strict mode, if the the assignment target is an unresolvable reference, a ReferenceError should be thrown. (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated", "onlyStrict"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-elem-target-yield-expr.js", "description": " When a `yield` token appears within the DestructuringAssignmentTarget of an AssignmentElement within a generator function body, it behaves as a YieldExpression. (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-elem-trlg-iter-elision-iter-abpt.js", "description": " Abrupt completion returned during evaluation of elision (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nArrayAssignmentPattern :\n[ AssignmentElementList , Elisionopt AssignmentRestElementopt ]\n\n[...]\n6. If Elision is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with\niteratorRecord as the argument.\nb. If status is an abrupt completion, then\ni. If iteratorRecord.[[done]] is false, return\nIteratorClose(iterator, status).\nii. Return Completion(status).\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-elem-trlg-iter-elision-iter-nrml-close-skip.js", "description": " IteratorClose not invoked when elision exhausts the iterator (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nArrayAssignmentPattern :\n[ AssignmentElementList , Elisionopt AssignmentRestElementopt ]\n\n[...]\n6. If Elision is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with\niteratorRecord as the argument.\nb. If status is an abrupt completion, then\n[...]\n8. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nstatus).\n9. Return Completion(status).\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-elem-trlg-iter-get-err.js", "description": " Abrupt completion returned from GetIterator (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nArrayAssignmentPattern :\n[ AssignmentElementList , Elisionopt AssignmentRestElementopt ]\n\n1. Let iterator be GetIterator(value).\n2. ReturnIfAbrupt(iterator).\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-elem-trlg-iter-list-nrml-close-skip.js", "description": " IteratorClose is not invoked when evaluation of AssignmentElementList exhausts the iterator (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nArrayAssignmentPattern :\n[ AssignmentElementList , Elisionopt AssignmentRestElementopt ]\n\n[...]\n3. Let iteratorRecord be Record {[[iterator]]: iterator, [[done]]: false}.\n4. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentElementList using\niteratorRecord as the argument.\n5. If status is an abrupt completion, then\na. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nstatus).\nb. Return Completion(status).\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-elem-trlg-iter-list-thrw-close-skip.js", "description": " IteratorClose is not invoked when evaluation of AssignmentElementList returns an abrupt completion and the iterator has been marked as \"done\" (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nArrayAssignmentPattern :\n[ AssignmentElementList , Elisionopt AssignmentRestElementopt ]\n\n[...]\n3. Let iteratorRecord be Record {[[iterator]]: iterator, [[done]]: false}.\n4. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentElementList using\niteratorRecord as the argument.\n5. If status is an abrupt completion, then\na. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nstatus).\nb. Return Completion(status).\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-elem-trlg-iter-rest-nrml-close-skip.js", "description": " IteratorClose is not called when rest element evaluation has exhausted the iterator (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nArrayAssignmentPattern :\n[ AssignmentElementList , Elisionopt AssignmentRestElementopt ]\n\n[...]\n7. If AssignmentRestElement is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentRestElement\nwith iteratorRecord as the argument.\n8. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nstatus).\n9. Return Completion(status).\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-elem-trlg-iter-rest-thrw-close-skip.js", "description": " Abrupt completion returned during iteration for rest element (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nArrayAssignmentPattern :\n[ AssignmentElementList , Elisionopt AssignmentRestElementopt ]\n\n[...]\n7. If AssignmentRestElement is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentRestElement\nwith iteratorRecord as the argument.\n8. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nstatus).\n9. Return Completion(status).\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-elision-iter-abpt.js", "description": " IteratorClose is not called when iteration produces an abrupt completion (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nArrayAssignmentPattern : [ Elision ]\n\n1. Let iterator be GetIterator(value).\n[...]\n5. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nresult).\n[...]\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-elision-iter-get-err.js", "description": " Abrupt completion returned from GetIterator (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nArrayAssignmentPattern : [ Elision ]\n\n1. Let iterator be GetIterator(value).\n2. ReturnIfAbrupt(iterator).\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-elision-iter-nrml-close-skip.js", "description": " IteratorClose is not called when iteration has exhausted the iterator (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nArrayAssignmentPattern : [ Elision ]\n\n1. Let iterator be GetIterator(value).\n[...]\n5. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nresult).\n[...]\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-elision-val-bool.js", "description": " An ArrayAssignmentPattern containing only Elisions requires iterable values and throws for boolean values. (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-elision-val-num.js", "description": " An ArrayAssignmentPattern containing only Elisions requires iterable values and throws for number values. (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-elision-val-symbol.js", "description": " An ArrayAssignmentPattern containing only Elisions requires iterable values and throws for symbol values. (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-empty-iter-get-err.js", "description": " Abrupt completion returned from GetIterator (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nArrayAssignmentPattern : [ ]\n\n1. Let iterator be GetIterator(value).\n2. ReturnIfAbrupt(iterator).\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-empty-val-bool.js", "description": " An ArrayAssignmentPattern without an AssignmentElementList requires iterable values and throws for boolean values (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-empty-val-null.js", "description": " An ArrayAssignmentPattern without an AssignmentElementList requires iterable values and throws for `null`. (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-empty-val-num.js", "description": " An ArrayAssignmentPattern without an AssignmentElementList requires iterable values and throws for number values. (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-empty-val-symbol.js", "description": " An ArrayAssignmentPattern without an AssignmentElementList requires iterable values and throws for Symbol values. (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-empty-val-undef.js", "description": " An ArrayAssignmentPattern without an AssignmentElementList requires iterable values and throws for `undefined`. (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-iteration.js", "description": " Value iteration only proceeds for the number of elements in the ArrayAssignmentPattern. (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-rest-after-element.js", "description": " An AssignmentRestElement following an AssignmentElement consumes all remaining iterable values. (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-rest-after-elision.js", "description": " An AssignmentRestElement following an elision consumes all remaining iterable values. (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-rest-elision-iter-abpt.js", "description": " IteratorClose is not called when assignment evaluation produces an abrupt completion (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nArrayAssignmentPattern : [ Elisionopt AssignmentRestElement ]\n\n[...]\n4. If Elision is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with\niteratorRecord as the argument.\nb. If status is an abrupt completion, then\ni. If iteratorRecord.[[done]] is false, return\nIteratorClose(iterator, status).\nii. Return Completion(status).\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-rest-elision.js", "description": " ArrayAssignmentPattern may include elisions at any position preceding a AssignmentRestElement in a AssignmentElementList. (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-rest-iter-get-err.js", "description": " Abrupt completion returned from GetIterator (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nArrayAssignmentPattern : [ Elisionopt AssignmentRestElement ]\n\n1. Let iterator be GetIterator(value).\n2. ReturnIfAbrupt(iterator).\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-rest-iter-nrml-close-skip.js", "description": " IteratorClose is not called when assignment evaluation has exhausted the iterator (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nArrayAssignmentPattern : [ Elisionopt AssignmentRestElement ]\n\n[...]\n5. Let result be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentRestElement with\niteratorRecord as the argument\n6. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nresult).\n7. Return result.\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-rest-iter-thrw-close-skip.js", "description": " IteratorClose is not called when iteration produces an abrupt completion (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nArrayAssignmentPattern : [ Elisionopt AssignmentRestElement ]\n\n[...]\n5. Let result be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentRestElement with\niteratorRecord as the argument\n6. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nresult).\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-rest-iteration.js", "description": " In the presense of an AssignmentRestElement, value iteration exhausts the iterable value; (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-rest-lref.js", "description": " Reference is evaluated during assignment (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nArrayAssignmentPattern : [ Elisionopt AssignmentRestElement ]\n\n[...]\n5. Let result be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentRestElement with\niteratorRecord as the argument\n6. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nresult).\n\nAssignmentRestElement[Yield] : ... DestructuringAssignmentTarget\n\n1. If DestructuringAssignmentTarget is neither an ObjectLiteral nor an\nArrayLiteral, then\na. Let lref be the result of evaluating DestructuringAssignmentTarget.\nb. ReturnIfAbrupt(lref).\n[...]\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-rest-put-prop-ref-no-get.js", "description": " If the DestructuringAssignmentTarget of an AssignmentElement is a PropertyReference, it should not be evaluated. (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-rest-put-prop-ref-user-err-iter-close-skip.js", "description": " IteratorClose is not called when value assignment produces an abrupt completion. (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nArrayAssignmentPattern : [ Elisionopt AssignmentRestElement ]\n\n[...]\n5. Let result be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentRestElement with\niteratorRecord as the argument\n6. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nresult).\n\nAssignmentRestElement[Yield] : ... DestructuringAssignmentTarget\n\n[...]\n4. Repeat while iteratorRecord.[[done]] is false\n[...]\nd. If next is false, set iteratorRecord.[[done]] to true.\n[...]\n5. If DestructuringAssignmentTarget is neither an ObjectLiteral nor an\nArrayLiteral, then\na. Return PutValue(lref, A).\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-rest-put-prop-ref-user-err.js", "description": " Any error raised as a result of setting the value should be forwarded to the runtime. (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-rest-put-prop-ref.js", "description": " The DestructuringAssignmentTarget of an AssignmentElement may be a PropertyReference. (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-rest-put-unresolvable-no-strict.js", "description": " Outside of strict mode, if the the assignment target is an unresolvable reference, a new `var` binding should be created in the environment record. (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated", "noStrict"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-rest-put-unresolvable-strict.js", "description": " In strict mode, if the the assignment target is an unresolvable reference, a ReferenceError should be thrown. (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated", "onlyStrict"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/array-rest-yield-expr.js", "description": " When a `yield` token appears within the DestructuringAssignmentTarget of an AssignmentRestElement and within the body of a generator function, it should behave as a YieldExpression. (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/obj-empty-symbol.js", "description": " An ObjectAssignmentPattern without an AssignmentPropertyList requires an object-coercible value (symbol value) (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/obj-id-put-unresolvable-strict.js", "description": " In strict mode, if the the assignment target is an unresolvable reference, a ReferenceError should be thrown. (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated", "onlyStrict"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/obj-prop-elem-init-assignment-missing.js", "description": " If the Initializer is present and v is undefined, the Initializer should be evaluated and the result assigned to the target reference (non-existent property) (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/obj-prop-elem-init-assignment-null.js", "description": " If the Initializer is present and v is not undefined, the Initializer should be evaluated and the result assigned to the target reference (null value) (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/obj-prop-elem-init-assignment-truthy.js", "description": " If the Initializer is present and v is not undefined, the Initializer should be evaluated and the result assigned to the target reference (truthy value) (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/obj-prop-elem-init-assignment-undef.js", "description": " If the Initializer is present and v is undefined, the Initializer should be evaluated and the result assigned to the target reference (undefined value) (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/obj-prop-elem-init-evaluation.js", "description": " The Initializer should only be evaluated if v is undefined. (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/obj-prop-elem-init-in.js", "description": " The Initializer in an AssignmentElement may be an `in` expression. (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/obj-prop-elem-init-yield-expr.js", "description": " When a `yield` token appears within the Initializer of an AssignmentElement and within a generator function body, it should behave as a YieldExpression. (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/obj-prop-elem-target-obj-literal-prop-ref-init-active.js", "description": " The DestructuringAssignmentTarget of an AssignmentElement can extend to LHSExpressions if it is neither an ObjectLiteral nor an ArrayLiteral and its AssignmentTargetTyp is simple. Using MemberExpression (ObjLiteral + identifier) with active initializer. (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nSyntax\n\nAssignmentPattern : ObjectAssignmentPattern\nObjectAssignmentPattern : { AssignmentPropertyList }\nAssignmentPropertyList : AssignmentProperty\nAssignmentProperty : PropertyName : AssignmentElement\nAssignmentElement : DestructuringAssignmentTarget Initializer_opt\nDestructuringAssignmentTarget : LeftHandSideExpression\n\nStatic Semantics: Early Errors\n\nDestructuringAssignmentTarget : LeftHandSideExpression\n\n- It is a Syntax Error if LeftHandSideExpression is either an ObjectLiteral or an ArrayLiteral and if LeftHandSideExpression is not covering an AssignmentPattern.\n- It is a Syntax Error if LeftHandSideExpression is neither an ObjectLiteral nor an ArrayLiteral and AssignmentTargetType(LeftHandSideExpression) is not simple.\n\nRuntime Semantics: DestructuringAssignmentEvaluation\nObjectAssignmentPattern : { AssignmentPropertyList }\n\n1. Perform ? RequireObjectCoercible(value).\n2. Perform ? PropertyDestructuringAssignmentEvaluation for AssignmentPropertyList using value as the argument.\n3. Return NormalCompletion(empty).\n\nRuntime Semantics: PropertyDestructuringAssignmentEvaluation\n\nAssignmentProperty : PropertyName : AssignmentElement\n\n1. Let name be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(name).\n3. Perform ? KeyedDestructuringAssignmentEvaluation of AssignmentElement with value and name as the arguments.\n4. Return a new List containing name.\n\nRuntime Semantics: KeyedDestructuringAssignmentEvaluation\n\nAssignmentElement : DestructuringAssignmentTarget Initializer\n\n1. If DestructuringAssignmentTarget is neither an ObjectLiteral nor an ArrayLiteral, then\na. Let lref be the result of evaluating DestructuringAssignmentTarget.\n...\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/obj-prop-elem-target-obj-literal-prop-ref-init.js", "description": " The DestructuringAssignmentTarget of an AssignmentElement can extend to LHSExpressions if it is neither an ObjectLiteral nor an ArrayLiteral and its AssignmentTargetTyp is simple. Using MemberExpression (ObjLiteral + identifier) with initializer. (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nSyntax\n\nAssignmentPattern : ObjectAssignmentPattern\nObjectAssignmentPattern : { AssignmentPropertyList }\nAssignmentPropertyList : AssignmentProperty\nAssignmentProperty : PropertyName : AssignmentElement\nAssignmentElement : DestructuringAssignmentTarget Initializer_opt\nDestructuringAssignmentTarget : LeftHandSideExpression\n\nStatic Semantics: Early Errors\n\nDestructuringAssignmentTarget : LeftHandSideExpression\n\n- It is a Syntax Error if LeftHandSideExpression is either an ObjectLiteral or an ArrayLiteral and if LeftHandSideExpression is not covering an AssignmentPattern.\n- It is a Syntax Error if LeftHandSideExpression is neither an ObjectLiteral nor an ArrayLiteral and AssignmentTargetType(LeftHandSideExpression) is not simple.\n\nRuntime Semantics: DestructuringAssignmentEvaluation\nObjectAssignmentPattern : { AssignmentPropertyList }\n\n1. Perform ? RequireObjectCoercible(value).\n2. Perform ? PropertyDestructuringAssignmentEvaluation for AssignmentPropertyList using value as the argument.\n3. Return NormalCompletion(empty).\n\nRuntime Semantics: PropertyDestructuringAssignmentEvaluation\n\nAssignmentProperty : PropertyName : AssignmentElement\n\n1. Let name be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(name).\n3. Perform ? KeyedDestructuringAssignmentEvaluation of AssignmentElement with value and name as the arguments.\n4. Return a new List containing name.\n\nRuntime Semantics: KeyedDestructuringAssignmentEvaluation\n\nAssignmentElement : DestructuringAssignmentTarget Initializer\n\n1. If DestructuringAssignmentTarget is neither an ObjectLiteral nor an ArrayLiteral, then\na. Let lref be the result of evaluating DestructuringAssignmentTarget.\n...\n\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/obj-prop-elem-target-yield-expr.js", "description": " When a `yield` token appears within the DestructuringAssignmentTarget of an AssignmentElement and within a generator function body, it should behave as a YieldExpression. (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/obj-prop-name-evaluation-error.js", "description": " Any error raised as a result of evaluating PropertyName should be forwarded to the runtime. (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/obj-prop-name-evaluation.js", "description": " PropertyName of an AssignmentProperty may be a ComputedPropertyName. (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/obj-prop-nested-array-yield-expr.js", "description": " When a `yield` token appears within the Initializer of a nested destructuring assignment and within a generator function body, it should behave as a YieldExpression. (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/dstr/obj-prop-put-unresolvable-strict.js", "description": " In strict mode, if the the assignment target is an unresolvable reference, a ReferenceError should be thrown. (AssignmentExpression)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated", "onlyStrict"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/expressions/assignment/fn-name-lhs-cover.js", "esid": " sec-assignment-operators-runtime-semantics-evaluation", "description": " Left-hand side as a CoverParenthesizedExpression", "info": " |AssignmentExpression[In, Yield, Await] :\nLeftHandSideExpression[?Yield, ?Await] = AssignmentExpression[?In, ?Yield, ?Await]\n\n1. If LeftHandSideExpression is neither an ObjectLiteral nor an\nArrayLiteral, then\n[...]\nc. If IsAnonymousFunctionDefinition(AssignmentExpression) and\nIsIdentifierRef of LeftHandSideExpression are both true, then\ni. Let rval be NamedEvaluation of AssignmentExpression with argument\nGetReferencedName(lref).\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/language/expressions/assignment/fn-name-lhs-member.js", "esid": " sec-assignment-operators-runtime-semantics-evaluation", "description": " Left-hand side as a MemberExpression", "info": " |AssignmentExpression[In, Yield, Await] :\nLeftHandSideExpression[?Yield, ?Await] = AssignmentExpression[?In, ?Yield, ?Await]\n\n1. If LeftHandSideExpression is neither an ObjectLiteral nor an\nArrayLiteral, then\n[...]\nc. If IsAnonymousFunctionDefinition(AssignmentExpression) and\nIsIdentifierRef of LeftHandSideExpression are both true, then\ni. Let rval be NamedEvaluation of AssignmentExpression with argument\nGetReferencedName(lref).\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/language/expressions/assignmenttargettype/simple-complex-callexpression-expression.js", "description": " Static Semantics AssignmentTargetType, Return simple (Simple Direct assignment)", "flags": ["generated"], "info": " |CallExpression [ Expression ]\nStatic Semantics AssignmentTargetType, Return simple\n\n"}, {"path": "./test262-main/test/language/expressions/assignmenttargettype/simple-complex-callexpression.identifiername.js", "description": " Static Semantics AssignmentTargetType, Return simple (Simple Direct assignment)", "flags": ["generated"], "info": " |CallExpression . IdentifierName\nStatic Semantics AssignmentTargetType, Return simple\n\n"}, {"path": "./test262-main/test/language/expressions/assignmenttargettype/simple-complex-memberexpression-expression.js", "description": " Static Semantics AssignmentTargetType, Return simple (Simple Direct assignment)", "flags": ["generated"], "info": " |MemberExpression [ Expression ]\nStatic Semantics AssignmentTargetType, Return simple\n\n"}, {"path": "./test262-main/test/language/expressions/assignmenttargettype/simple-complex-memberexpression.identifiername.js", "description": " Static Semantics AssignmentTargetType, Return simple (Simple Direct assignment)", "flags": ["generated"], "info": " |MemberExpression . IdentifierName\nStatic Semantics AssignmentTargetType, Return simple\n\n"}, {"path": "./test262-main/test/language/expressions/await/await-in-generator.js", "author": " Brian Terlson <brian.terlson@microsoft.com>", "esid": " pending", "description": " >Await in a generator is an identifier\n", "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/bitwise-and/order-of-evaluation.js", "esid": " sec-binary-bitwise-operators-runtime-semantics-evaluation", "description": " Type coercion order of operations for bitwise-and operator", "features": ["Symbol"], "info": " |Evaluate lhs\nEvaluate rhs\nToNumeric(lhs)\nToNumeric(rhs)\n"}, {"path": "./test262-main/test/language/expressions/bitwise-or/order-of-evaluation.js", "esid": " sec-binary-bitwise-operators-runtime-semantics-evaluation", "description": " Type coercion order of operations for bitwise-or operator", "features": ["Symbol"], "info": " |Evaluate lhs\nEvaluate rhs\nToNumeric(lhs)\nToNumeric(rhs)\n"}, {"path": "./test262-main/test/language/expressions/bitwise-xor/order-of-evaluation.js", "esid": " sec-binary-bitwise-operators-runtime-semantics-evaluation", "description": " Type coercion order of operations for bitwise-xor operator", "features": ["Symbol"], "info": " |Evaluate lhs\nEvaluate rhs\nToNumeric(lhs)\nToNumeric(rhs)\n"}, {"path": "./test262-main/test/language/expressions/call/eval-first-arg.js", "info": " |If the eval function is called with some argument, then use a first\nargument\n", "version": 5, "esid": " 15.1.2.1_A1.2_T1", "description": " eval(\"x = 1\", \"x = 2\"), x equal 1, not 2"}, {"path": "./test262-main/test/language/expressions/call/eval-spread-empty-leading.js", "esid": " sec-function-calls-runtime-semantics-evaluation", "description": " >Direct eval call with empty leading spread.\n", "info": " |12.3.4.1 Runtime Semantics: Evaluation\n...\n3. If Type(ref) is Reference and IsPropertyReference(ref) is false and GetReferencedName(ref) is \"eval\", then\na. If SameValue(func, %eval%) is true, then\ni. Let argList be ? ArgumentListEvaluation(Arguments).\nii. If argList has no elements, return undefined.\niii. Let evalText be the first element of argList.\n...\n\n", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/language/expressions/call/eval-spread-empty-trailing.js", "esid": " sec-function-calls-runtime-semantics-evaluation", "description": " >Direct eval call with empty trailing spread.\n", "info": " |12.3.4.1 Runtime Semantics: Evaluation\n...\n3. If Type(ref) is Reference and IsPropertyReference(ref) is false and GetReferencedName(ref) is \"eval\", then\na. If SameValue(func, %eval%) is true, then\ni. Let argList be ? ArgumentListEvaluation(Arguments).\nii. If argList has no elements, return undefined.\niii. Let evalText be the first element of argList.\n...\n\n", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/language/expressions/call/eval-spread-empty.js", "esid": " sec-function-calls-runtime-semantics-evaluation", "description": " >Direct eval call with empty spread.\n", "info": " |12.3.4.1 Runtime Semantics: Evaluation\n...\n3. If Type(ref) is Reference and IsPropertyReference(ref) is false and GetReferencedName(ref) is \"eval\", then\na. If SameValue(func, %eval%) is true, then\ni. Let argList be ? ArgumentListEvaluation(Arguments).\nii. If argList has no elements, return undefined.\n...\n\n", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/language/expressions/call/eval-spread.js", "esid": " sec-function-calls-runtime-semantics-evaluation", "description": " >Direct eval call with spread.\n", "info": " |12.3.4.1 Runtime Semantics: Evaluation\n...\n3. If Type(ref) is Reference and IsPropertyReference(ref) is false and GetReferencedName(ref) is \"eval\", then\na. If SameValue(func, %eval%) is true, then\ni. Let argList be ? ArgumentListEvaluation(Arguments).\nii. If argList has no elements, return undefined.\niii. Let evalText be the first element of argList.\n...\n\n", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/language/expressions/call/spread-err-mult-err-expr-throws.js", "description": " Spread operator following other arguments when evaluation throws (CallExpression)", "esid": " sec-function-calls-runtime-semantics-evaluation", "features": ["generators"], "flags": ["generated"], "info": " |CallExpression : MemberExpression Arguments\n\n[...]\n9. Return EvaluateDirectCall(func, thisValue, Arguments, tailCall).\n\n12.3.4.3 Runtime Semantics: EvaluateDirectCall\n\n1. Let argList be ArgumentListEvaluation(arguments).\n[...]\n6. Let result be Call(func, thisValue, argList).\n[...]\n\n12.3.6.1 Runtime Semantics: ArgumentListEvaluation\n\nArgumentList : ArgumentList , ... AssignmentExpression\n\n1. Let precedingArgs be the result of evaluating ArgumentList.\n2. Let spreadRef be the result of evaluating AssignmentExpression.\n3. Let iterator be GetIterator(GetValue(spreadRef) ).\n4. ReturnIfAbrupt(iterator).\n\n"}, {"path": "./test262-main/test/language/expressions/call/spread-err-mult-err-iter-get-value.js", "description": " Spread operator following other arguments when GetIterator fails (@@iterator function return value) (CallExpression)", "esid": " sec-function-calls-runtime-semantics-evaluation", "features": ["Symbol.iterator"], "flags": ["generated"], "info": " |CallExpression : MemberExpression Arguments\n\n[...]\n9. Return EvaluateDirectCall(func, thisValue, Arguments, tailCall).\n\n12.3.4.3 Runtime Semantics: EvaluateDirectCall\n\n1. Let argList be ArgumentListEvaluation(arguments).\n[...]\n6. Let result be Call(func, thisValue, argList).\n[...]\n\n12.3.6.1 Runtime Semantics: ArgumentListEvaluation\n\nArgumentList : ArgumentList , ... AssignmentExpression\n\n1. Let precedingArgs be the result of evaluating ArgumentList.\n2. Let spreadRef be the result of evaluating AssignmentExpression.\n3. Let iterator be GetIterator(GetValue(spreadRef) ).\n4. ReturnIfAbrupt(iterator).\n\n7.4.1 GetIterator ( obj, method )\n\n[...]\n2. Let iterator be ? Call(method, obj).\n3. If Type(iterator) is not Object, throw a TypeError exception.\n"}, {"path": "./test262-main/test/language/expressions/call/spread-err-mult-err-itr-get-call.js", "description": " Spread operator following other arguments when GetIterator fails (@@iterator function invocation) (CallExpression)", "esid": " sec-function-calls-runtime-semantics-evaluation", "features": ["Symbol.iterator"], "flags": ["generated"], "info": " |CallExpression : MemberExpression Arguments\n\n[...]\n9. Return EvaluateDirectCall(func, thisValue, Arguments, tailCall).\n\n12.3.4.3 Runtime Semantics: EvaluateDirectCall\n\n1. Let argList be ArgumentListEvaluation(arguments).\n[...]\n6. Let result be Call(func, thisValue, argList).\n[...]\n\n12.3.6.1 Runtime Semantics: ArgumentListEvaluation\n\nArgumentList : ArgumentList , ... AssignmentExpression\n\n1. Let precedingArgs be the result of evaluating ArgumentList.\n2. Let spreadRef be the result of evaluating AssignmentExpression.\n3. Let iterator be GetIterator(GetValue(spreadRef) ).\n4. ReturnIfAbrupt(iterator).\n\n7.4.1 GetIterator ( obj, method )\n\n[...]\n3. Let iterator be Call(method,obj).\n4. ReturnIfAbrupt(iterator).\n"}, {"path": "./test262-main/test/language/expressions/call/spread-err-mult-err-itr-get-get.js", "description": " Spread operator following other arguments when GetIterator fails (@@iterator property access) (CallExpression)", "esid": " sec-function-calls-runtime-semantics-evaluation", "features": ["Symbol.iterator"], "flags": ["generated"], "info": " |CallExpression : MemberExpression Arguments\n\n[...]\n9. Return EvaluateDirectCall(func, thisValue, Arguments, tailCall).\n\n12.3.4.3 Runtime Semantics: EvaluateDirectCall\n\n1. Let argList be ArgumentListEvaluation(arguments).\n[...]\n6. Let result be Call(func, thisValue, argList).\n[...]\n\n12.3.6.1 Runtime Semantics: ArgumentListEvaluation\n\nArgumentList : ArgumentList , ... AssignmentExpression\n\n1. Let precedingArgs be the result of evaluating ArgumentList.\n2. Let spreadRef be the result of evaluating AssignmentExpression.\n3. Let iterator be GetIterator(GetValue(spreadRef) ).\n4. ReturnIfAbrupt(iterator).\n\n7.4.1 GetIterator ( obj, method )\n\n1. If method was not passed, then\na. Let method be ? GetMethod(obj, @@iterator).\n"}, {"path": "./test262-main/test/language/expressions/call/spread-err-mult-err-itr-step.js", "description": " Spread operator following other arguments when IteratorStep fails (CallExpression)", "esid": " sec-function-calls-runtime-semantics-evaluation", "features": ["Symbol.iterator"], "flags": ["generated"], "info": " |CallExpression : MemberExpression Arguments\n\n[...]\n9. Return EvaluateDirectCall(func, thisValue, Arguments, tailCall).\n\n12.3.4.3 Runtime Semantics: EvaluateDirectCall\n\n1. Let argList be ArgumentListEvaluation(arguments).\n[...]\n6. Let result be Call(func, thisValue, argList).\n[...]\n\n12.3.6.1 Runtime Semantics: ArgumentListEvaluation\n\nArgumentList : ArgumentList , ... AssignmentExpression\n\n1. Let precedingArgs be the result of evaluating ArgumentList.\n2. Let spreadRef be the result of evaluating AssignmentExpression.\n3. Let iterator be GetIterator(GetValue(spreadRef) ).\n4. ReturnIfAbrupt(iterator).\n\n7.4.5 IteratorStep ( iterator )\n\n1. Let result be IteratorNext(iterator).\n2. ReturnIfAbrupt(result).\n\n7.4.2 IteratorNext ( iterator, value )\n\n1. If value was not passed, then\na. Let result be Invoke(iterator, \"next\", \u00ab \u00bb).\n[...]\n3. ReturnIfAbrupt(result).\n"}, {"path": "./test262-main/test/language/expressions/call/spread-err-mult-err-itr-value.js", "description": " Spread operator following other arguments when IteratorValue fails (CallExpression)", "esid": " sec-function-calls-runtime-semantics-evaluation", "features": ["Symbol.iterator"], "flags": ["generated"], "info": " |CallExpression : MemberExpression Arguments\n\n[...]\n9. Return EvaluateDirectCall(func, thisValue, Arguments, tailCall).\n\n12.3.4.3 Runtime Semantics: EvaluateDirectCall\n\n1. Let argList be ArgumentListEvaluation(arguments).\n[...]\n6. Let result be Call(func, thisValue, argList).\n[...]\n\n12.3.6.1 Runtime Semantics: ArgumentListEvaluation\n\nArgumentList : ArgumentList , ... AssignmentExpression\n\n1. Let precedingArgs be the result of evaluating ArgumentList.\n2. Let spreadRef be the result of evaluating AssignmentExpression.\n3. Let iterator be GetIterator(GetValue(spreadRef) ).\n4. ReturnIfAbrupt(iterator).\n\n7.4.4 IteratorValue ( iterResult )\n\n1. Assert: Type(iterResult) is Object.\n2. Return Get(iterResult, \"value\").\n\n7.3.1 Get (O, P)\n\n[...]\n3. Return O.[[Get]](P, O).\n"}, {"path": "./test262-main/test/language/expressions/call/spread-err-mult-err-unresolvable.js", "description": " Spread operator following other arguments when reference is unresolvable (CallExpression)", "esid": " sec-function-calls-runtime-semantics-evaluation", "flags": ["generated"], "info": " |CallExpression : MemberExpression Arguments\n\n[...]\n9. Return EvaluateDirectCall(func, thisValue, Arguments, tailCall).\n\n12.3.4.3 Runtime Semantics: EvaluateDirectCall\n\n1. Let argList be ArgumentListEvaluation(arguments).\n[...]\n6. Let result be Call(func, thisValue, argList).\n[...]\n\n12.3.6.1 Runtime Semantics: ArgumentListEvaluation\n\nArgumentList : ArgumentList , ... AssignmentExpression\n\n1. Let precedingArgs be the result of evaluating ArgumentList.\n2. Let spreadRef be the result of evaluating AssignmentExpression.\n3. Let iterator be GetIterator(GetValue(spreadRef) ).\n4. ReturnIfAbrupt(iterator).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/expressions/call/spread-err-sngl-err-expr-throws.js", "description": " Spread operator applied to the only argument when evaluation throws (CallExpression)", "esid": " sec-function-calls-runtime-semantics-evaluation", "features": ["generators"], "flags": ["generated"], "info": " |CallExpression : MemberExpression Arguments\n\n[...]\n9. Return EvaluateDirectCall(func, thisValue, Arguments, tailCall).\n\n12.3.4.3 Runtime Semantics: EvaluateDirectCall\n\n1. Let argList be ArgumentListEvaluation(arguments).\n[...]\n6. Let result be Call(func, thisValue, argList).\n[...]\n\n12.3.6.1 Runtime Semantics: ArgumentListEvaluation\n\nArgumentList : ... AssignmentExpression\n\n1. Let list be an empty List.\n2. Let spreadRef be the result of evaluating AssignmentExpression.\n3. Let spreadObj be GetValue(spreadRef).\n4. Let iterator be GetIterator(spreadObj).\n5. ReturnIfAbrupt(iterator).\n"}, {"path": "./test262-main/test/language/expressions/call/spread-err-sngl-err-itr-get-call.js", "description": " Spread operator applied to the only argument when GetIterator fails (@@iterator function invocation) (CallExpression)", "esid": " sec-function-calls-runtime-semantics-evaluation", "features": ["Symbol.iterator"], "flags": ["generated"], "info": " |CallExpression : MemberExpression Arguments\n\n[...]\n9. Return EvaluateDirectCall(func, thisValue, Arguments, tailCall).\n\n12.3.4.3 Runtime Semantics: EvaluateDirectCall\n\n1. Let argList be ArgumentListEvaluation(arguments).\n[...]\n6. Let result be Call(func, thisValue, argList).\n[...]\n\n12.3.6.1 Runtime Semantics: ArgumentListEvaluation\n\nArgumentList : ... AssignmentExpression\n\n1. Let list be an empty List.\n2. Let spreadRef be the result of evaluating AssignmentExpression.\n3. Let spreadObj be GetValue(spreadRef).\n4. Let iterator be GetIterator(spreadObj).\n5. ReturnIfAbrupt(iterator).\n\n7.4.1 GetIterator ( obj, method )\n\n[...]\n3. Let iterator be Call(method,obj).\n4. ReturnIfAbrupt(iterator).\n"}, {"path": "./test262-main/test/language/expressions/call/spread-err-sngl-err-itr-get-get.js", "description": " Spread operator applied to the only argument when GetIterator fails (@@iterator property access) (CallExpression)", "esid": " sec-function-calls-runtime-semantics-evaluation", "features": ["Symbol.iterator"], "flags": ["generated"], "info": " |CallExpression : MemberExpression Arguments\n\n[...]\n9. Return EvaluateDirectCall(func, thisValue, Arguments, tailCall).\n\n12.3.4.3 Runtime Semantics: EvaluateDirectCall\n\n1. Let argList be ArgumentListEvaluation(arguments).\n[...]\n6. Let result be Call(func, thisValue, argList).\n[...]\n\n12.3.6.1 Runtime Semantics: ArgumentListEvaluation\n\nArgumentList : ... AssignmentExpression\n\n1. Let list be an empty List.\n2. Let spreadRef be the result of evaluating AssignmentExpression.\n3. Let spreadObj be GetValue(spreadRef).\n4. Let iterator be GetIterator(spreadObj).\n5. ReturnIfAbrupt(iterator).\n\n7.4.1 GetIterator ( obj, method )\n\n1. If method was not passed, then\na. Let method be ? GetMethod(obj, @@iterator).\n"}, {"path": "./test262-main/test/language/expressions/call/spread-err-sngl-err-itr-get-value.js", "description": " Spread operator applied to the only argument when GetIterator fails (@@iterator function return value) (CallExpression)", "esid": " sec-function-calls-runtime-semantics-evaluation", "features": ["Symbol.iterator"], "flags": ["generated"], "info": " |CallExpression : MemberExpression Arguments\n\n[...]\n9. Return EvaluateDirectCall(func, thisValue, Arguments, tailCall).\n\n12.3.4.3 Runtime Semantics: EvaluateDirectCall\n\n1. Let argList be ArgumentListEvaluation(arguments).\n[...]\n6. Let result be Call(func, thisValue, argList).\n[...]\n\n12.3.6.1 Runtime Semantics: ArgumentListEvaluation\n\nArgumentList : ... AssignmentExpression\n\n1. Let list be an empty List.\n2. Let spreadRef be the result of evaluating AssignmentExpression.\n3. Let spreadObj be GetValue(spreadRef).\n4. Let iterator be GetIterator(spreadObj).\n5. ReturnIfAbrupt(iterator).\n\n7.4.1 GetIterator ( obj, method )\n\n[...]\n2. Let iterator be ? Call(method, obj).\n3. If Type(iterator) is not Object, throw a TypeError exception.\n"}, {"path": "./test262-main/test/language/expressions/call/spread-err-sngl-err-itr-step.js", "description": " Spread operator applied to the only argument when IteratorStep fails (CallExpression)", "esid": " sec-function-calls-runtime-semantics-evaluation", "features": ["Symbol.iterator"], "flags": ["generated"], "info": " |CallExpression : MemberExpression Arguments\n\n[...]\n9. Return EvaluateDirectCall(func, thisValue, Arguments, tailCall).\n\n12.3.4.3 Runtime Semantics: EvaluateDirectCall\n\n1. Let argList be ArgumentListEvaluation(arguments).\n[...]\n6. Let result be Call(func, thisValue, argList).\n[...]\n\n12.3.6.1 Runtime Semantics: ArgumentListEvaluation\n\nArgumentList : ... AssignmentExpression\n\n1. Let list be an empty List.\n2. Let spreadRef be the result of evaluating AssignmentExpression.\n3. Let spreadObj be GetValue(spreadRef).\n4. Let iterator be GetIterator(spreadObj).\n5. ReturnIfAbrupt(iterator).\n6. Repeat\na. Let next be IteratorStep(iterator).\nb. ReturnIfAbrupt(next).\n\n7.4.5 IteratorStep ( iterator )\n\n1. Let result be IteratorNext(iterator).\n2. ReturnIfAbrupt(result).\n\n7.4.2 IteratorNext ( iterator, value )\n\n1. If value was not passed, then\na. Let result be Invoke(iterator, \"next\", \u00ab \u00bb).\n[...]\n3. ReturnIfAbrupt(result).\n"}, {"path": "./test262-main/test/language/expressions/call/spread-err-sngl-err-itr-value.js", "description": " Spread operator applied to the only argument when IteratorValue fails (CallExpression)", "esid": " sec-function-calls-runtime-semantics-evaluation", "features": ["Symbol.iterator"], "flags": ["generated"], "info": " |CallExpression : MemberExpression Arguments\n\n[...]\n9. Return EvaluateDirectCall(func, thisValue, Arguments, tailCall).\n\n12.3.4.3 Runtime Semantics: EvaluateDirectCall\n\n1. Let argList be ArgumentListEvaluation(arguments).\n[...]\n6. Let result be Call(func, thisValue, argList).\n[...]\n\n12.3.6.1 Runtime Semantics: ArgumentListEvaluation\n\nArgumentList : ... AssignmentExpression\n\n1. Let list be an empty List.\n2. Let spreadRef be the result of evaluating AssignmentExpression.\n3. Let spreadObj be GetValue(spreadRef).\n4. Let iterator be GetIterator(spreadObj).\n5. ReturnIfAbrupt(iterator).\n6. Repeat\na. Let next be IteratorStep(iterator).\nb. ReturnIfAbrupt(next).\nc. If next is false, return list.\nd. Let nextArg be IteratorValue(next).\ne. ReturnIfAbrupt(nextArg).\n\n7.4.4 IteratorValue ( iterResult )\n\n1. Assert: Type(iterResult) is Object.\n2. Return Get(iterResult, \"value\").\n\n7.3.1 Get (O, P)\n\n[...]\n3. Return O.[[Get]](P, O).\n"}, {"path": "./test262-main/test/language/expressions/call/spread-err-sngl-err-unresolvable.js", "description": " Spread operator applied to the only argument when reference is unresolvable (CallExpression)", "esid": " sec-function-calls-runtime-semantics-evaluation", "flags": ["generated"], "info": " |CallExpression : MemberExpression Arguments\n\n[...]\n9. Return EvaluateDirectCall(func, thisValue, Arguments, tailCall).\n\n12.3.4.3 Runtime Semantics: EvaluateDirectCall\n\n1. Let argList be ArgumentListEvaluation(arguments).\n[...]\n6. Let result be Call(func, thisValue, argList).\n[...]\n\n12.3.6.1 Runtime Semantics: ArgumentListEvaluation\n\nArgumentList : ... AssignmentExpression\n\n1. Let list be an empty List.\n2. Let spreadRef be the result of evaluating AssignmentExpression.\n3. Let spreadObj be GetValue(spreadRef).\n4. Let iterator be GetIterator(spreadObj).\n5. ReturnIfAbrupt(iterator).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/expressions/call/spread-mult-empty.js", "description": " Spread operator following other arguments when no iteration occurs (CallExpression)", "esid": " sec-function-calls-runtime-semantics-evaluation", "flags": ["generated"], "info": " |CallExpression : MemberExpression Arguments\n\n[...]\n9. Return EvaluateDirectCall(func, thisValue, Arguments, tailCall).\n\n12.3.4.3 Runtime Semantics: EvaluateDirectCall\n\n1. Let argList be ArgumentListEvaluation(arguments).\n[...]\n6. Let result be Call(func, thisValue, argList).\n[...]\n\n12.3.6.1 Runtime Semantics: ArgumentListEvaluation\n\nArgumentList : ArgumentList , ... AssignmentExpression\n\n1. Let precedingArgs be the result of evaluating ArgumentList.\n2. Let spreadRef be the result of evaluating AssignmentExpression.\n3. Let iterator be GetIterator(GetValue(spreadRef) ).\n4. ReturnIfAbrupt(iterator).\n5. Repeat\na. Let next be IteratorStep(iterator).\nb. ReturnIfAbrupt(next).\nc. If next is false, return precedingArgs.\n"}, {"path": "./test262-main/test/language/expressions/call/spread-mult-expr.js", "description": " Spread operator applied to AssignmentExpression following other elements (CallExpression)", "esid": " sec-function-calls-runtime-semantics-evaluation", "flags": ["generated"], "info": " |CallExpression : MemberExpression Arguments\n\n[...]\n9. Return EvaluateDirectCall(func, thisValue, Arguments, tailCall).\n\n12.3.4.3 Runtime Semantics: EvaluateDirectCall\n\n1. Let argList be ArgumentListEvaluation(arguments).\n[...]\n6. Let result be Call(func, thisValue, argList).\n[...]\n\n12.3.6.1 Runtime Semantics: ArgumentListEvaluation\n\nArgumentList : ArgumentList , ... AssignmentExpression\n\n1. Let precedingArgs be the result of evaluating ArgumentList.\n2. Let spreadRef be the result of evaluating AssignmentExpression.\n3. Let iterator be GetIterator(GetValue(spreadRef) ).\n4. ReturnIfAbrupt(iterator).\n5. Repeat\na. Let next be IteratorStep(iterator).\nb. ReturnIfAbrupt(next).\nc. If next is false, return precedingArgs.\n"}, {"path": "./test262-main/test/language/expressions/call/spread-mult-iter.js", "description": " Spread operator following other arguments with a valid iterator (CallExpression)", "esid": " sec-function-calls-runtime-semantics-evaluation", "features": ["Symbol.iterator"], "flags": ["generated"], "info": " |CallExpression : MemberExpression Arguments\n\n[...]\n9. Return EvaluateDirectCall(func, thisValue, Arguments, tailCall).\n\n12.3.4.3 Runtime Semantics: EvaluateDirectCall\n\n1. Let argList be ArgumentListEvaluation(arguments).\n[...]\n6. Let result be Call(func, thisValue, argList).\n[...]\n\n12.3.6.1 Runtime Semantics: ArgumentListEvaluation\n\nArgumentList : ... AssignmentExpression\n\n1. Let list be an empty List.\n2. Let spreadRef be the result of evaluating AssignmentExpression.\n3. Let spreadObj be GetValue(spreadRef).\n4. Let iterator be GetIterator(spreadObj).\n5. ReturnIfAbrupt(iterator).\n6. Repeat\na. Let next be IteratorStep(iterator).\nb. ReturnIfAbrupt(next).\nc. If next is false, return list.\nd. Let nextArg be IteratorValue(next).\ne. ReturnIfAbrupt(nextArg).\nf. Append nextArg as the last element of list.\n"}, {"path": "./test262-main/test/language/expressions/call/spread-mult-literal.js", "description": " Spread operator applied to AssignmentExpression following other elements (CallExpression)", "esid": " sec-function-calls-runtime-semantics-evaluation", "flags": ["generated"], "info": " |CallExpression : MemberExpression Arguments\n\n[...]\n9. Return EvaluateDirectCall(func, thisValue, Arguments, tailCall).\n\n12.3.4.3 Runtime Semantics: EvaluateDirectCall\n\n1. Let argList be ArgumentListEvaluation(arguments).\n[...]\n6. Let result be Call(func, thisValue, argList).\n[...]\n\n12.3.6.1 Runtime Semantics: ArgumentListEvaluation\n\nArgumentList : ArgumentList , ... AssignmentExpression\n\n1. Let precedingArgs be the result of evaluating ArgumentList.\n2. Let spreadRef be the result of evaluating AssignmentExpression.\n3. Let iterator be GetIterator(GetValue(spreadRef) ).\n4. ReturnIfAbrupt(iterator).\n5. Repeat\na. Let next be IteratorStep(iterator).\nb. ReturnIfAbrupt(next).\nc. If next is false, return precedingArgs.\n"}, {"path": "./test262-main/test/language/expressions/call/spread-sngl-empty.js", "description": " Spread operator applied to the only argument when no iteration occurs (CallExpression)", "esid": " sec-function-calls-runtime-semantics-evaluation", "flags": ["generated"], "info": " |CallExpression : MemberExpression Arguments\n\n[...]\n9. Return EvaluateDirectCall(func, thisValue, Arguments, tailCall).\n\n12.3.4.3 Runtime Semantics: EvaluateDirectCall\n\n1. Let argList be ArgumentListEvaluation(arguments).\n[...]\n6. Let result be Call(func, thisValue, argList).\n[...]\n\n12.3.6.1 Runtime Semantics: ArgumentListEvaluation\n\nArgumentList : ... AssignmentExpression\n\n1. Let list be an empty List.\n2. Let spreadRef be the result of evaluating AssignmentExpression.\n3. Let spreadObj be GetValue(spreadRef).\n4. Let iterator be GetIterator(spreadObj).\n5. ReturnIfAbrupt(iterator).\n6. Repeat\na. Let next be IteratorStep(iterator).\nb. ReturnIfAbrupt(next).\nc. If next is false, return list.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/call/spread-sngl-expr.js", "description": " Spread operator applied to AssignmentExpression as only element (CallExpression)", "esid": " sec-function-calls-runtime-semantics-evaluation", "flags": ["generated"], "info": " |CallExpression : MemberExpression Arguments\n\n[...]\n9. Return EvaluateDirectCall(func, thisValue, Arguments, tailCall).\n\n12.3.4.3 Runtime Semantics: EvaluateDirectCall\n\n1. Let argList be ArgumentListEvaluation(arguments).\n[...]\n6. Let result be Call(func, thisValue, argList).\n[...]\n\n12.3.6.1 Runtime Semantics: ArgumentListEvaluation\n\nArgumentList : ... AssignmentExpression\n\n1. Let list be an empty List.\n2. Let spreadRef be the result of evaluating AssignmentExpression.\n3. Let spreadObj be GetValue(spreadRef).\n4. Let iterator be GetIterator(spreadObj).\n5. ReturnIfAbrupt(iterator).\n6. Repeat\na. Let next be IteratorStep(iterator).\nb. ReturnIfAbrupt(next).\nc. If next is false, return list.\nd. Let nextArg be IteratorValue(next).\ne. ReturnIfAbrupt(nextArg).\nf. Append nextArg as the last element of list.\n"}, {"path": "./test262-main/test/language/expressions/call/spread-sngl-iter.js", "description": " Spread operator applied to the only argument with a valid iterator (CallExpression)", "esid": " sec-function-calls-runtime-semantics-evaluation", "features": ["Symbol.iterator"], "flags": ["generated"], "info": " |CallExpression : MemberExpression Arguments\n\n[...]\n9. Return EvaluateDirectCall(func, thisValue, Arguments, tailCall).\n\n12.3.4.3 Runtime Semantics: EvaluateDirectCall\n\n1. Let argList be ArgumentListEvaluation(arguments).\n[...]\n6. Let result be Call(func, thisValue, argList).\n[...]\n\n12.3.6.1 Runtime Semantics: ArgumentListEvaluation\n\nArgumentList : ... AssignmentExpression\n\n1. Let list be an empty List.\n2. Let spreadRef be the result of evaluating AssignmentExpression.\n3. Let spreadObj be GetValue(spreadRef).\n4. Let iterator be GetIterator(spreadObj).\n5. ReturnIfAbrupt(iterator).\n6. Repeat\na. Let next be IteratorStep(iterator).\nb. ReturnIfAbrupt(next).\nc. If next is false, return list.\nd. Let nextArg be IteratorValue(next).\ne. ReturnIfAbrupt(nextArg).\nf. Append nextArg as the last element of list.\n"}, {"path": "./test262-main/test/language/expressions/call/spread-sngl-literal.js", "description": " Spread operator applied to array literal as only element (CallExpression)", "esid": " sec-function-calls-runtime-semantics-evaluation", "flags": ["generated"], "info": " |CallExpression : MemberExpression Arguments\n\n[...]\n9. Return EvaluateDirectCall(func, thisValue, Arguments, tailCall).\n\n12.3.4.3 Runtime Semantics: EvaluateDirectCall\n\n1. Let argList be ArgumentListEvaluation(arguments).\n[...]\n6. Let result be Call(func, thisValue, argList).\n[...]\n\n12.3.6.1 Runtime Semantics: ArgumentListEvaluation\n\nArgumentList : ... AssignmentExpression\n\n1. Let list be an empty List.\n2. Let spreadRef be the result of evaluating AssignmentExpression.\n3. Let spreadObj be GetValue(spreadRef).\n4. Let iterator be GetIterator(spreadObj).\n5. ReturnIfAbrupt(iterator).\n6. Repeat\na. Let next be IteratorStep(iterator).\nb. ReturnIfAbrupt(next).\nc. If next is false, return list.\nd. Let nextArg be IteratorValue(next).\ne. ReturnIfAbrupt(nextArg).\nf. Append nextArg as the last element of list.\n"}, {"path": "./test262-main/test/language/expressions/conditional/symbol-conditional-evaluation.js", "version": 6, "esid": " 12.12.3", "description": " >Conditional Symbol evaluation\n", "features": ["Symbol"]}, {"path": "./test262-main/test/language/expressions/division/order-of-evaluation.js", "esid": " sec-multiplicative-operators-runtime-semantics-evaluation", "description": " Type coercion order of operations for division operator", "features": ["Symbol"], "info": " |Evaluate lhs\nEvaluate rhs\nToNumeric(lhs)\nToNumeric(rhs)\n"}, {"path": "./test262-main/test/language/expressions/equals/symbol-abstract-equality-comparison.js", "version": 6, "esid": " 7.2.12", "description": " >Abstract Equality Comparison: Symbol\n", "features": ["Symbol"]}, {"path": "./test262-main/test/language/expressions/equals/symbol-strict-equality-comparison.js", "version": 6, "esid": " 7.2.13", "description": " >Strict Equality Comparison: Symbol\n", "features": ["Symbol"]}, {"path": "./test262-main/test/language/expressions/function/arguments-with-arguments-fn.js", "esid": " 9.2.12", "version": 6, "description": " >Arguments object is created even when the body contains a lexically-scoped\nbinding named \"arguments\"\n", "info": " |[...]\n19. Else if \"arguments\" is an element of parameterNames, then\na. Let argumentsObjectNeeded be false.\n20. Else if hasParameterExpressions is false, then\na. If \"arguments\" is an element of functionNames or if \"arguments\" is an\nelement of lexicalNames, then\ni. Let argumentsObjectNeeded be false.\n[...]\n", "flags": ["noStrict"]}, {"path": "./test262-main/test/language/expressions/function/dstr/ary-init-iter-get-err-array-prototype.js", "description": " Abrupt completion returned by GetIterator (function expression)", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\nRuntime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iteratorRecord be ? GetIterator(value).\n\nGetIterator ( obj [ , hint [ , method ] ] )\n\n[...]\n4. Let iterator be ? Call(method, obj).\n\nCall ( F, V [ , argumentsList ] )\n\n[...]\n2. If IsCallable(F) is false, throw a TypeError exception.\n\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/ary-init-iter-get-err.js", "description": " Abrupt completion returned by GetIterator (function expression)", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iterator be GetIterator(value).\n2. ReturnIfAbrupt(iterator).\n\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/ary-init-iter-no-close.js", "description": " Iterator is not closed when exhausted by pattern evaluation (function expression)", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n[...]\n4. If iteratorRecord.[[done]] is false, return ? IteratorClose(iterator,\nresult).\n[...]\n\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/ary-ptrn-elem-ary-elem-init.js", "description": " BindingElement with array binding pattern and initializer is used (function expression)", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/ary-ptrn-elem-ary-elem-iter.js", "description": " BindingElement with array binding pattern and initializer is not used (function expression)", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\n[...]\ne. Else,\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/ary-ptrn-elem-ary-elision-init.js", "description": " BindingElement with array binding pattern and initializer is used (function expression)", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/ary-ptrn-elem-ary-elision-iter.js", "description": " BindingElement with array binding pattern and initializer is not used (function expression)", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\n[...]\ne. Else,\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/ary-ptrn-elem-ary-empty-init.js", "description": " BindingElement with array binding pattern and initializer is used (function expression)", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/ary-ptrn-elem-ary-empty-iter.js", "description": " BindingElement with array binding pattern and initializer is not used (function expression)", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\n[...]\ne. Else,\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/ary-ptrn-elem-ary-rest-init.js", "description": " BindingElement with array binding pattern and initializer is used (function expression)", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/ary-ptrn-elem-ary-rest-iter.js", "description": " BindingElement with array binding pattern and initializer is not used (function expression)", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\n[...]\ne. Else,\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/ary-ptrn-elem-id-init-exhausted.js", "description": " Destructuring initializer with an exhausted iterator (function expression)", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n5. If iteratorRecord.[[done]] is true, let v be undefined.\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/ary-ptrn-elem-id-init-hole.js", "description": " Destructuring initializer with a \"hole\" (function expression)", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nSingleNameBinding : BindingIdentifier Initializeropt\n[...] 6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\n[...]\n7. If environment is undefined, return PutValue(lhs, v). 8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/ary-ptrn-elem-id-init-skipped.js", "description": " Destructuring initializer is not evaluated when value is not `undefined` (function expression)", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/ary-ptrn-elem-id-init-throws.js", "description": " Destructuring initializer returns an abrupt completion (function expression)", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/ary-ptrn-elem-id-init-undef.js", "description": " Destructuring initializer with an undefined value (function expression)", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/ary-ptrn-elem-id-init-unresolvable.js", "description": " Destructuring initializer is an unresolvable reference (function expression)", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/ary-ptrn-elem-id-iter-step-err.js", "description": " Error forwarding when IteratorStep returns an abrupt completion (function expression)", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/ary-ptrn-elem-id-iter-val-array-prototype.js", "description": " Array destructuring uses overriden Array.prototype[Symbol.iterator] (function expression)", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\nRuntime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializer_opt\n\n1. Let bindingId be StringValue of BindingIdentifier.\n2. Let lhs be ? ResolveBinding(bindingId, environment).\n3. If iteratorRecord.[[Done]] is false, then\na. Let next be IteratorStep(iteratorRecord).\nb. If next is an abrupt completion, set iteratorRecord.[[Done]] to true.\nc. ReturnIfAbrupt(next).\nd. If next is false, set iteratorRecord.[[Done]] to true.\ne. Else,\ni. Let v be IteratorValue(next).\nii. If v is an abrupt completion, set iteratorRecord.[[Done]] to true.\niii. ReturnIfAbrupt(v).\n[...]\n7. Return InitializeReferencedBinding(lhs, v).\n\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/ary-ptrn-elem-id-iter-val-err.js", "description": " Error forwarding when IteratorValue returns an abrupt completion (function expression)", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\nd. If next is false, set iteratorRecord.[[done]] to true.\ne. Else,\ni. Let v be IteratorValue(next).\nii. If v is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\niii. ReturnIfAbrupt(v).\n\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/ary-ptrn-elem-obj-id-init.js", "description": " BindingElement with object binding pattern and initializer is used (function expression)", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/ary-ptrn-elem-obj-id.js", "description": " BindingElement with object binding pattern and initializer is not used (function expression)", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/ary-ptrn-elem-obj-prop-id-init.js", "description": " BindingElement with object binding pattern and initializer is used (function expression)", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/ary-ptrn-elem-obj-prop-id.js", "description": " BindingElement with object binding pattern and initializer is not used (function expression)", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/ary-ptrn-elision-exhausted.js", "description": " Elision accepts exhausted iterator (function expression)", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ Elision ]\n\n1. Return the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with iteratorRecord\nas the argument.\n\n12.14.5.3 Runtime Semantics: IteratorDestructuringAssignmentEvaluation\n\nElision : ,\n\n1. If iteratorRecord.[[done]] is false, then\n[...]\n2. Return NormalCompletion(empty).\n\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/ary-ptrn-elision-step-err.js", "description": " Elision advances iterator and forwards abrupt completions (function expression)", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ Elision ]\n\n1. Return the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with iteratorRecord\nas the argument.\n\n12.14.5.3 Runtime Semantics: IteratorDestructuringAssignmentEvaluation\n\nElision : ,\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/ary-ptrn-elision.js", "description": " Elision advances iterator (function expression)", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ Elision ]\n\n1. Return the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with iteratorRecord\nas the argument.\n\n12.14.5.3 Runtime Semantics: IteratorDestructuringAssignmentEvaluation\n\nElision : ,\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\nd. If next is false, set iteratorRecord.[[done]] to true.\n2. Return NormalCompletion(empty).\n\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/ary-ptrn-empty.js", "description": " No iteration occurs for an \"empty\" array binding pattern (function expression)", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ ]\n\n1. Return NormalCompletion(empty).\n\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/ary-ptrn-rest-id-direct.js", "description": " Lone rest element (direct binding) (function expression)", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "includes": ["compareArray.js"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\nRuntime Semantics: IteratorBindingInitialization\n\nBindingRestElement : ... BindingIdentifier\n\n[...]\n2. Let A be ! ArrayCreate(0).\n3. Let n be 0.\n4. Repeat,\n[...]\nf. Perform ! CreateDataPropertyOrThrow(A, ! ToString(n), nextValue).\ng. Set n to n + 1.\n\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/ary-ptrn-rest-id-elision-next-err.js", "description": " Rest element following elision elements (function expression)", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nArrayBindingPattern : [ Elisionopt BindingRestElement ]\n1. If Elision is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with\niteratorRecord as the argument.\nb. ReturnIfAbrupt(status).\n2. Return the result of performing IteratorBindingInitialization for\nBindingRestElement with iteratorRecord and environment as arguments.\n\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/ary-ptrn-rest-id-elision.js", "description": " Rest element following elision elements (function expression)", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nArrayBindingPattern : [ Elisionopt BindingRestElement ]\n1. If Elision is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with\niteratorRecord as the argument.\nb. ReturnIfAbrupt(status).\n2. Return the result of performing IteratorBindingInitialization for\nBindingRestElement with iteratorRecord and environment as arguments.\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/ary-ptrn-rest-id-exhausted.js", "description": " RestElement applied to an exhausted iterator (function expression)", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\n[...]\nb. If iteratorRecord.[[done]] is true, then\ni. If environment is undefined, return PutValue(lhs, A).\nii. Return InitializeReferencedBinding(lhs, A).\n\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/ary-ptrn-rest-id-iter-step-err.js", "description": " Error forwarding when IteratorStep returns an abrupt completion (function expression)", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\na. If iteratorRecord.[[done]] is false,\ni. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nii. If next is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\niii. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/ary-ptrn-rest-id-iter-val-err.js", "description": " Error forwarding when IteratorValue returns an abrupt completion (function expression)", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\n[...]\nc. Let nextValue be IteratorValue(next).\nd. If nextValue is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\ne. ReturnIfAbrupt(nextValue).\n\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/ary-ptrn-rest-id.js", "description": " Lone rest element (function expression)", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n[...] 3. Let A be ArrayCreate(0). [...] 5. Repeat\n[...]\nf. Let status be CreateDataProperty(A, ToString (n), nextValue).\n[...]\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/obj-ptrn-prop-ary-init.js", "description": " Object binding pattern with \"nested\" array binding pattern using initializer (function expression)", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/obj-ptrn-prop-ary-value-null.js", "description": " Object binding pattern with \"nested\" array binding pattern taking the `null` value (function expression)", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/obj-ptrn-prop-ary.js", "description": " Object binding pattern with \"nested\" array binding pattern not using initializer (function expression)", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/obj-ptrn-prop-eval-err.js", "description": " Evaluation of property name returns an abrupt completion (function expression)", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingProperty : PropertyName : BindingElement\n\n1. Let P be the result of evaluating PropertyName\n2. ReturnIfAbrupt(P).\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/obj-ptrn-prop-id-get-value-err.js", "description": " Error thrown when accessing the corresponding property of the value object (function expression)", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. Let v be GetV(value, propertyName).\n2. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/obj-ptrn-prop-id-init-skipped.js", "description": " Destructuring initializer is not evaluated when value is not `undefined` (function expression)", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/obj-ptrn-prop-id-init-throws.js", "description": " Error thrown when evaluating the initializer (function expression)", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/obj-ptrn-prop-id-init-unresolvable.js", "description": " Destructuring initializer is an unresolvable reference (function expression)", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/obj-ptrn-prop-id-init.js", "description": " Binding as specified via property name, identifier, and initializer (function expression)", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/obj-ptrn-prop-obj-init.js", "description": " Object binding pattern with \"nested\" object binding pattern using initializer (function expression)", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/obj-ptrn-prop-obj-value-null.js", "description": " Object binding pattern with \"nested\" object binding pattern taking the `null` value (function expression)", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/obj-ptrn-prop-obj-value-undef.js", "description": " Object binding pattern with \"nested\" object binding pattern taking the `null` value (function expression)", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/expressions/function/dstr/obj-ptrn-prop-obj.js", "description": " Object binding pattern with \"nested\" object binding pattern not using initializer (function expression)", "esid": " sec-function-definitions-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/expressions/function/forbidden-ext/b1/func-expr-strict-forbidden-ext-direct-access-prop-arguments.js", "description": " Forbidden extension, f.arguments (function expression)", "esid": " sec-function-definitions-runtime-semantics-evaluation", "flags": ["generated", "noStrict"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\nECMAScript function objects defined using syntactic constructors in strict mode code must\nnot be created with own properties named \"caller\" or \"arguments\". Such own properties also\nmust not be created for function objects defined using an ArrowFunction, MethodDefinition,\nGeneratorDeclaration, GeneratorExpression, AsyncGeneratorDeclaration, AsyncGeneratorExpression,\nClassDeclaration, ClassExpression, AsyncFunctionDeclaration, AsyncFunctionExpression, or\nAsyncArrowFunction regardless of whether the definition is contained in strict mode code.\nBuilt-in functions, strict functions created using the Function constructor, generator functions\ncreated using the Generator constructor, async functions created using the AsyncFunction\nconstructor, and functions created using the bind method also must not be created with such own\nproperties.\n\n"}, {"path": "./test262-main/test/language/expressions/function/forbidden-ext/b1/func-expr-strict-forbidden-ext-direct-access-prop-caller.js", "description": " Forbidden extension, o.caller (function expression)", "esid": " sec-function-definitions-runtime-semantics-evaluation", "flags": ["generated", "noStrict"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\nECMAScript function objects defined using syntactic constructors in strict mode code must\nnot be created with own properties named \"caller\" or \"arguments\". Such own properties also\nmust not be created for function objects defined using an ArrowFunction, MethodDefinition,\nGeneratorDeclaration, GeneratorExpression, AsyncGeneratorDeclaration, AsyncGeneratorExpression,\nClassDeclaration, ClassExpression, AsyncFunctionDeclaration, AsyncFunctionExpression, or\nAsyncArrowFunction regardless of whether the definition is contained in strict mode code.\nBuilt-in functions, strict functions created using the Function constructor, generator functions\ncreated using the Generator constructor, async functions created using the AsyncFunction\nconstructor, and functions created using the bind method also must not be created with such own\nproperties.\n\n"}, {"path": "./test262-main/test/language/expressions/function/forbidden-ext/b2/func-expr-forbidden-ext-indirect-access-own-prop-caller-get.js", "description": " Forbidden extension, o.caller (function expression)", "esid": " sec-definitions-runtime-semantics-evaluation", "flags": ["generated", "noStrict"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\nIf an implementation extends any function object with an own property named \"caller\" the value of\nthat property, as observed using [[Get]] or [[GetOwnProperty]], must not be a strict function\nobject. If it is an accessor property, the function that is the value of the property's [[Get]]\nattribute must never return a strict function when called.\n\n"}, {"path": "./test262-main/test/language/expressions/function/forbidden-ext/b2/func-expr-forbidden-ext-indirect-access-own-prop-caller-value.js", "description": " Forbidden extension, o.caller (function expression)", "esid": " sec-definitions-runtime-semantics-evaluation", "flags": ["generated", "noStrict"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\nIf an implementation extends any function object with an own property named \"caller\" the value of\nthat property, as observed using [[Get]] or [[GetOwnProperty]], must not be a strict function\nobject. If it is an accessor property, the function that is the value of the property's [[Get]]\nattribute must never return a strict function when called.\n\n"}, {"path": "./test262-main/test/language/expressions/function/forbidden-ext/b2/func-expr-forbidden-ext-indirect-access-prop-caller.js", "description": " Forbidden extension, o.caller (function expression)", "esid": " sec-definitions-runtime-semantics-evaluation", "flags": ["generated", "noStrict"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\nIf an implementation extends any function object with an own property named \"caller\" the value of\nthat property, as observed using [[Get]] or [[GetOwnProperty]], must not be a strict function\nobject. If it is an accessor property, the function that is the value of the property's [[Get]]\nattribute must never return a strict function when called.\n\n"}, {"path": "./test262-main/test/language/expressions/function/length-dflt.js", "version": 6, "esid": " 14.1.6", "description": " >Default parameters' effect on function length\n", "info": " |Function length is counted by the non initialized parameters in the left.\n\n9.2.4 FunctionInitialize (F, kind, ParameterList, Body, Scope)\n\n[...]\n2. Let len be the ExpectedArgumentCount of ParameterList.\n3. Perform ! DefinePropertyOrThrow(F, \"length\", PropertyDescriptor{[[Value]]:\nlen, [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true}).\n[...]\n\nFormalsList : FormalParameter\n\n1. If HasInitializer of FormalParameter is true return 0\n2. Return 1.\n\nFormalsList : FormalsList , FormalParameter\n\n1. Let count be the ExpectedArgumentCount of FormalsList.\n2. If HasInitializer of FormalsList is true or HasInitializer of\nFormalParameter is true, return count.\n3. Return count+1.\n", "features": ["default-parameters"], "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/language/expressions/function/name.js", "esid": " sec-function-definitions-runtime-semantics-evaluation", "description": " Assignment of function `name` attribute", "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n1. Let scope be the LexicalEnvironment of the running execution context.\n2. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, \"\").\n...\n5. Return closure.\n\nFunctionExpression : function BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n1. Let scope be the running execution context's LexicalEnvironment.\n2. Let funcEnv be NewDeclarativeEnvironment(scope).\n3. Let envRec be funcEnv's EnvironmentRecord.\n4. Let name be StringValue of BindingIdentifier.\n5. Perform envRec.CreateImmutableBinding(name, false).\n6. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nfuncEnv, name).\n...\n10. Return closure.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/language/expressions/function/params-dflt-ref-arguments.js", "description": " Referencing the arguments object from a default parameter (function expression)", "esid": " 14.1.20", "version": 6, "features": ["default-parameters"], "info": " |FunctionExpression : function ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let closure be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n14.1.19 Runtime Semantics: IteratorBindingInitialization\n\nFormalsList : FormalsList , FormalParameter\n\n1. Let status be the result of performing IteratorBindingInitialization for\nFormalsList using iteratorRecord and environment as the arguments.\n2. ReturnIfAbrupt(status).\n3. Return the result of performing IteratorBindingInitialization for\nFormalParameter using iteratorRecord and environment as the arguments.\n"}, {"path": "./test262-main/test/language/expressions/generators/arguments-with-arguments-fn.js", "esid": " 9.2.12", "version": 6, "description": " >Arguments object is created even when the body contains a lexically-scoped\nbinding named \"arguments\"\n", "info": " |[...]\n19. Else if \"arguments\" is an element of parameterNames, then\na. Let argumentsObjectNeeded be false.\n20. Else if hasParameterExpressions is false, then\na. If \"arguments\" is an element of functionNames or if \"arguments\" is an\nelement of lexicalNames, then\ni. Let argumentsObjectNeeded be false.\n[...]\n", "flags": ["noStrict"], "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/generators/default-proto.js", "esid": " 14.4.11", "version": 6, "description": " Intrinsic default prototype of GeneratorFunctions", "info": " |1. Let G be ? OrdinaryCreateFromConstructor(functionObject,\n\"%GeneratorPrototype%\", \u00ab [[GeneratorState]], [[GeneratorContext]] \u00bb).\n[...]\n\n9.1.13 OrdinaryCreateFromConstructor\n\n[...]\n2. Let proto be ? GetPrototypeFromConstructor(constructor,\nintrinsicDefaultProto).\n3. Return ObjectCreate(proto, internalSlotsList).\n\n9.1.14 GetPrototypeFromConstructor\n\n[...]\n3. Let proto be ? Get(constructor, \"prototype\").\n4. If Type(proto) is not Object, then\na. Let realm be ? GetFunctionRealm(constructor).\nb. Let proto be realm's intrinsic object named intrinsicDefaultProto.\n[...]\n", "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/generators/dflt-params-abrupt.js", "description": " Abrupt completion returned by evaluation of initializer (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["default-parameters", "generators"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n\n14.1.19 Runtime Semantics: IteratorBindingInitialization\n\nFormalsList : FormalsList , FormalParameter\n\n1. Let status be the result of performing IteratorBindingInitialization for\nFormalsList using iteratorRecord and environment as the arguments.\n2. ReturnIfAbrupt(status).\n3. Return the result of performing IteratorBindingInitialization for\nFormalParameter using iteratorRecord and environment as the arguments.\n\n"}, {"path": "./test262-main/test/language/expressions/generators/dflt-params-arg-val-not-undefined.js", "description": " Use of initializer when argument value is not `undefined` (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["default-parameters", "generators"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n\n14.1.19 Runtime Semantics: IteratorBindingInitialization\n\nFormalsList : FormalsList , FormalParameter\n\n[...]\n23. Let iteratorRecord be Record {[[Iterator]]:\nCreateListIterator(argumentsList), [[Done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\na. Perform ? IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n"}, {"path": "./test262-main/test/language/expressions/generators/dflt-params-arg-val-undefined.js", "description": " Use of initializer when argument value is `undefined` (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["default-parameters", "generators"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n\n14.1.19 Runtime Semantics: IteratorBindingInitialization\n\nFormalsList : FormalsList , FormalParameter\n\n[...]\n23. Let iteratorRecord be Record {[[Iterator]]:\nCreateListIterator(argumentsList), [[Done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\na. Perform ? IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n"}, {"path": "./test262-main/test/language/expressions/generators/dflt-params-ref-prior.js", "description": " Referencing a parameter that occurs earlier in the ParameterList (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["default-parameters", "generators"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n\n14.1.19 Runtime Semantics: IteratorBindingInitialization\n\nFormalsList : FormalsList , FormalParameter\n\n1. Let status be the result of performing IteratorBindingInitialization for\nFormalsList using iteratorRecord and environment as the arguments.\n2. ReturnIfAbrupt(status).\n3. Return the result of performing IteratorBindingInitialization for\nFormalParameter using iteratorRecord and environment as the arguments.\n\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/ary-init-iter-get-err-array-prototype.js", "description": " Abrupt completion returned by GetIterator (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\nRuntime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iteratorRecord be ? GetIterator(value).\n\nGetIterator ( obj [ , hint [ , method ] ] )\n\n[...]\n4. Let iterator be ? Call(method, obj).\n\nCall ( F, V [ , argumentsList ] )\n\n[...]\n2. If IsCallable(F) is false, throw a TypeError exception.\n\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/ary-init-iter-get-err.js", "description": " Abrupt completion returned by GetIterator (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iterator be GetIterator(value).\n2. ReturnIfAbrupt(iterator).\n\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/ary-init-iter-no-close.js", "description": " Iterator is not closed when exhausted by pattern evaluation (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n[...]\n4. If iteratorRecord.[[done]] is false, return ? IteratorClose(iterator,\nresult).\n[...]\n\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/ary-name-iter-val.js", "description": " SingleNameBinding with normal value iteration (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\nd. If next is false, set iteratorRecord.[[done]] to true.\ne. Else,\n[...]\ni. Let v be IteratorValue(next).\nii. If v is an abrupt completion, set\niteratorRecord.[[done]] to true.\niii. ReturnIfAbrupt(v).\n5. If iteratorRecord.[[done]] is true, let v be undefined.\n[...]\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/ary-ptrn-elem-ary-elem-init.js", "description": " BindingElement with array binding pattern and initializer is used (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/ary-ptrn-elem-ary-elem-iter.js", "description": " BindingElement with array binding pattern and initializer is not used (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\n[...]\ne. Else,\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/ary-ptrn-elem-ary-elision-init.js", "description": " BindingElement with array binding pattern and initializer is used (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/ary-ptrn-elem-ary-elision-iter.js", "description": " BindingElement with array binding pattern and initializer is not used (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\n[...]\ne. Else,\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/ary-ptrn-elem-ary-empty-init.js", "description": " BindingElement with array binding pattern and initializer is used (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/ary-ptrn-elem-ary-empty-iter.js", "description": " BindingElement with array binding pattern and initializer is not used (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\n[...]\ne. Else,\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/ary-ptrn-elem-ary-rest-init.js", "description": " BindingElement with array binding pattern and initializer is used (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/ary-ptrn-elem-ary-rest-iter.js", "description": " BindingElement with array binding pattern and initializer is not used (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\n[...]\ne. Else,\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/ary-ptrn-elem-ary-val-null.js", "description": " Nested array destructuring with a null value (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. If iteratorRecord.[[done]] is false, then\n[...]\ne. Else\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iterator be GetIterator(value).\n2. ReturnIfAbrupt(iterator).\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/ary-ptrn-elem-id-init-exhausted.js", "description": " Destructuring initializer with an exhausted iterator (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n5. If iteratorRecord.[[done]] is true, let v be undefined.\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/ary-ptrn-elem-id-init-hole.js", "description": " Destructuring initializer with a \"hole\" (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nSingleNameBinding : BindingIdentifier Initializeropt\n[...] 6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\n[...]\n7. If environment is undefined, return PutValue(lhs, v). 8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/ary-ptrn-elem-id-init-skipped.js", "description": " Destructuring initializer is not evaluated when value is not `undefined` (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/ary-ptrn-elem-id-init-throws.js", "description": " Destructuring initializer returns an abrupt completion (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/ary-ptrn-elem-id-init-undef.js", "description": " Destructuring initializer with an undefined value (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/ary-ptrn-elem-id-init-unresolvable.js", "description": " Destructuring initializer is an unresolvable reference (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/ary-ptrn-elem-id-iter-complete.js", "description": " SingleNameBinding when value iteration completes (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\nd. If next is false, set iteratorRecord.[[done]] to true.\ne. Else,\n[...]\n5. If iteratorRecord.[[done]] is true, let v be undefined.\n[...]\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/ary-ptrn-elem-id-iter-done.js", "description": " SingleNameBinding when value iteration was completed previously (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\n[...]\n5. If iteratorRecord.[[done]] is true, let v be undefined.\n[...]\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/ary-ptrn-elem-id-iter-step-err.js", "description": " Error forwarding when IteratorStep returns an abrupt completion (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/ary-ptrn-elem-id-iter-val-array-prototype.js", "description": " Array destructuring uses overriden Array.prototype[Symbol.iterator] (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\nRuntime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializer_opt\n\n1. Let bindingId be StringValue of BindingIdentifier.\n2. Let lhs be ? ResolveBinding(bindingId, environment).\n3. If iteratorRecord.[[Done]] is false, then\na. Let next be IteratorStep(iteratorRecord).\nb. If next is an abrupt completion, set iteratorRecord.[[Done]] to true.\nc. ReturnIfAbrupt(next).\nd. If next is false, set iteratorRecord.[[Done]] to true.\ne. Else,\ni. Let v be IteratorValue(next).\nii. If v is an abrupt completion, set iteratorRecord.[[Done]] to true.\niii. ReturnIfAbrupt(v).\n[...]\n7. Return InitializeReferencedBinding(lhs, v).\n\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/ary-ptrn-elem-id-iter-val-err.js", "description": " Error forwarding when IteratorValue returns an abrupt completion (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\nd. If next is false, set iteratorRecord.[[done]] to true.\ne. Else,\ni. Let v be IteratorValue(next).\nii. If v is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\niii. ReturnIfAbrupt(v).\n\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/ary-ptrn-elem-id-iter-val.js", "description": " SingleNameBinding when value iteration was completed previously (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\nd. If next is false, set iteratorRecord.[[done]] to true.\ne. Else,\n[...]\ni. Let v be IteratorValue(next).\nii. If v is an abrupt completion, set\niteratorRecord.[[done]] to true.\niii. ReturnIfAbrupt(v).\n5. If iteratorRecord.[[done]] is true, let v be undefined.\n[...]\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/ary-ptrn-elem-obj-id-init.js", "description": " BindingElement with object binding pattern and initializer is used (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/ary-ptrn-elem-obj-id.js", "description": " BindingElement with object binding pattern and initializer is not used (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/ary-ptrn-elem-obj-prop-id-init.js", "description": " BindingElement with object binding pattern and initializer is used (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/ary-ptrn-elem-obj-prop-id.js", "description": " BindingElement with object binding pattern and initializer is not used (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/ary-ptrn-elem-obj-val-null.js", "description": " Nested object destructuring with a null value (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. If iteratorRecord.[[done]] is false, then\n[...]\ne. Else\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ObjectBindingPattern\n\n1. Let valid be RequireObjectCoercible(value).\n2. ReturnIfAbrupt(valid).\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/ary-ptrn-elem-obj-val-undef.js", "description": " Nested object destructuring with a value of `undefined` (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. If iteratorRecord.[[done]] is false, then\n[...]\ne. Else\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ObjectBindingPattern\n\n1. Let valid be RequireObjectCoercible(value).\n2. ReturnIfAbrupt(valid).\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/ary-ptrn-elision-exhausted.js", "description": " Elision accepts exhausted iterator (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ Elision ]\n\n1. Return the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with iteratorRecord\nas the argument.\n\n12.14.5.3 Runtime Semantics: IteratorDestructuringAssignmentEvaluation\n\nElision : ,\n\n1. If iteratorRecord.[[done]] is false, then\n[...]\n2. Return NormalCompletion(empty).\n\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/ary-ptrn-elision-step-err.js", "description": " Elision advances iterator and forwards abrupt completions (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ Elision ]\n\n1. Return the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with iteratorRecord\nas the argument.\n\n12.14.5.3 Runtime Semantics: IteratorDestructuringAssignmentEvaluation\n\nElision : ,\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/ary-ptrn-elision.js", "description": " Elision advances iterator (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ Elision ]\n\n1. Return the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with iteratorRecord\nas the argument.\n\n12.14.5.3 Runtime Semantics: IteratorDestructuringAssignmentEvaluation\n\nElision : ,\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\nd. If next is false, set iteratorRecord.[[done]] to true.\n2. Return NormalCompletion(empty).\n\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/ary-ptrn-empty.js", "description": " No iteration occurs for an \"empty\" array binding pattern (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ ]\n\n1. Return NormalCompletion(empty).\n\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/ary-ptrn-rest-id-direct.js", "description": " Lone rest element (direct binding) (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "includes": ["compareArray.js"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\nRuntime Semantics: IteratorBindingInitialization\n\nBindingRestElement : ... BindingIdentifier\n\n[...]\n2. Let A be ! ArrayCreate(0).\n3. Let n be 0.\n4. Repeat,\n[...]\nf. Perform ! CreateDataPropertyOrThrow(A, ! ToString(n), nextValue).\ng. Set n to n + 1.\n\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/ary-ptrn-rest-id-elision-next-err.js", "description": " Rest element following elision elements (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nArrayBindingPattern : [ Elisionopt BindingRestElement ]\n1. If Elision is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with\niteratorRecord as the argument.\nb. ReturnIfAbrupt(status).\n2. Return the result of performing IteratorBindingInitialization for\nBindingRestElement with iteratorRecord and environment as arguments.\n\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/ary-ptrn-rest-id-elision.js", "description": " Rest element following elision elements (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nArrayBindingPattern : [ Elisionopt BindingRestElement ]\n1. If Elision is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with\niteratorRecord as the argument.\nb. ReturnIfAbrupt(status).\n2. Return the result of performing IteratorBindingInitialization for\nBindingRestElement with iteratorRecord and environment as arguments.\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/ary-ptrn-rest-id-exhausted.js", "description": " RestElement applied to an exhausted iterator (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\n[...]\nb. If iteratorRecord.[[done]] is true, then\ni. If environment is undefined, return PutValue(lhs, A).\nii. Return InitializeReferencedBinding(lhs, A).\n\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/ary-ptrn-rest-id-iter-step-err.js", "description": " Error forwarding when IteratorStep returns an abrupt completion (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\na. If iteratorRecord.[[done]] is false,\ni. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nii. If next is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\niii. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/ary-ptrn-rest-id-iter-val-err.js", "description": " Error forwarding when IteratorValue returns an abrupt completion (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\n[...]\nc. Let nextValue be IteratorValue(next).\nd. If nextValue is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\ne. ReturnIfAbrupt(nextValue).\n\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/ary-ptrn-rest-id.js", "description": " Lone rest element (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n[...] 3. Let A be ArrayCreate(0). [...] 5. Repeat\n[...]\nf. Let status be CreateDataProperty(A, ToString (n), nextValue).\n[...]\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/obj-ptrn-empty.js", "description": " No property access occurs for an \"empty\" object binding pattern (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\nRuntime Semantics: BindingInitialization\n\nObjectBindingPattern : { }\n\n1. Return NormalCompletion(empty).\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/obj-ptrn-id-get-value-err.js", "description": " Error thrown when accessing the corresponding property of the value object (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. Let v be GetV(value, propertyName).\n5. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/obj-ptrn-id-trailing-comma.js", "description": " Trailing comma is allowed following BindingPropertyList (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3 Destructuring Binding Patterns\n\nObjectBindingPattern[Yield] :\n{ }\n{ BindingPropertyList[?Yield] }\n{ BindingPropertyList[?Yield] , }\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/obj-ptrn-prop-ary-init.js", "description": " Object binding pattern with \"nested\" array binding pattern using initializer (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/obj-ptrn-prop-ary-trailing-comma.js", "description": " Trailing comma is allowed following BindingPropertyList (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3 Destructuring Binding Patterns\n\nObjectBindingPattern[Yield] :\n{ }\n{ BindingPropertyList[?Yield] }\n{ BindingPropertyList[?Yield] , }\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/obj-ptrn-prop-ary-value-null.js", "description": " Object binding pattern with \"nested\" array binding pattern taking the `null` value (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/obj-ptrn-prop-ary.js", "description": " Object binding pattern with \"nested\" array binding pattern not using initializer (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/obj-ptrn-prop-eval-err.js", "description": " Evaluation of property name returns an abrupt completion (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingProperty : PropertyName : BindingElement\n\n1. Let P be the result of evaluating PropertyName\n2. ReturnIfAbrupt(P).\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/obj-ptrn-prop-id-get-value-err.js", "description": " Error thrown when accessing the corresponding property of the value object (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. Let v be GetV(value, propertyName).\n2. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/obj-ptrn-prop-id-init-skipped.js", "description": " Destructuring initializer is not evaluated when value is not `undefined` (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/obj-ptrn-prop-id-init-throws.js", "description": " Error thrown when evaluating the initializer (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/obj-ptrn-prop-id-init-unresolvable.js", "description": " Destructuring initializer is an unresolvable reference (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/obj-ptrn-prop-id-init.js", "description": " Binding as specified via property name, identifier, and initializer (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/obj-ptrn-prop-id-trailing-comma.js", "description": " Trailing comma is allowed following BindingPropertyList (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3 Destructuring Binding Patterns\n\nObjectBindingPattern[Yield] :\n{ }\n{ BindingPropertyList[?Yield] }\n{ BindingPropertyList[?Yield] , }\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/obj-ptrn-prop-id.js", "description": " Binding as specified via property name and identifier (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/obj-ptrn-prop-obj-init.js", "description": " Object binding pattern with \"nested\" object binding pattern using initializer (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/obj-ptrn-prop-obj-value-null.js", "description": " Object binding pattern with \"nested\" object binding pattern taking the `null` value (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/obj-ptrn-prop-obj-value-undef.js", "description": " Object binding pattern with \"nested\" object binding pattern taking the `null` value (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/expressions/generators/dstr/obj-ptrn-prop-obj.js", "description": " Object binding pattern with \"nested\" object binding pattern not using initializer (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/expressions/generators/forbidden-ext/b1/gen-func-expr-forbidden-ext-direct-access-prop-arguments.js", "description": " Forbidden extension, f.arguments (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators"], "flags": ["generated", "noStrict"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n\nECMAScript function objects defined using syntactic constructors in strict mode code must\nnot be created with own properties named \"caller\" or \"arguments\". Such own properties also\nmust not be created for function objects defined using an ArrowFunction, MethodDefinition,\nGeneratorDeclaration, GeneratorExpression, AsyncGeneratorDeclaration, AsyncGeneratorExpression,\nClassDeclaration, ClassExpression, AsyncFunctionDeclaration, AsyncFunctionExpression, or\nAsyncArrowFunction regardless of whether the definition is contained in strict mode code.\nBuilt-in functions, strict functions created using the Function constructor, generator functions\ncreated using the Generator constructor, async functions created using the AsyncFunction\nconstructor, and functions created using the bind method also must not be created with such own\nproperties.\n\n"}, {"path": "./test262-main/test/language/expressions/generators/forbidden-ext/b1/gen-func-expr-forbidden-ext-direct-access-prop-caller.js", "description": " Forbidden extension, o.caller (generator function expression)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators"], "flags": ["generated", "noStrict"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n\nECMAScript function objects defined using syntactic constructors in strict mode code must\nnot be created with own properties named \"caller\" or \"arguments\". Such own properties also\nmust not be created for function objects defined using an ArrowFunction, MethodDefinition,\nGeneratorDeclaration, GeneratorExpression, AsyncGeneratorDeclaration, AsyncGeneratorExpression,\nClassDeclaration, ClassExpression, AsyncFunctionDeclaration, AsyncFunctionExpression, or\nAsyncArrowFunction regardless of whether the definition is contained in strict mode code.\nBuilt-in functions, strict functions created using the Function constructor, generator functions\ncreated using the Generator constructor, async functions created using the AsyncFunction\nconstructor, and functions created using the bind method also must not be created with such own\nproperties.\n\n"}, {"path": "./test262-main/test/language/expressions/generators/forbidden-ext/b2/gen-func-expr-forbidden-ext-indirect-access-own-prop-caller-get.js", "description": " Forbidden extension, o.caller (generator function expression)", "esid": " sec-generator-definitions-runtime-semantics-evaluation", "features": ["generators"], "flags": ["generated", "noStrict"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n\nIf an implementation extends any function object with an own property named \"caller\" the value of\nthat property, as observed using [[Get]] or [[GetOwnProperty]], must not be a strict function\nobject. If it is an accessor property, the function that is the value of the property's [[Get]]\nattribute must never return a strict function when called.\n\n"}, {"path": "./test262-main/test/language/expressions/generators/forbidden-ext/b2/gen-func-expr-forbidden-ext-indirect-access-own-prop-caller-value.js", "description": " Forbidden extension, o.caller (generator function expression)", "esid": " sec-generator-definitions-runtime-semantics-evaluation", "features": ["generators"], "flags": ["generated", "noStrict"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n\nIf an implementation extends any function object with an own property named \"caller\" the value of\nthat property, as observed using [[Get]] or [[GetOwnProperty]], must not be a strict function\nobject. If it is an accessor property, the function that is the value of the property's [[Get]]\nattribute must never return a strict function when called.\n\n"}, {"path": "./test262-main/test/language/expressions/generators/forbidden-ext/b2/gen-func-expr-forbidden-ext-indirect-access-prop-caller.js", "description": " Forbidden extension, o.caller (generator function expression)", "esid": " sec-generator-definitions-runtime-semantics-evaluation", "features": ["generators"], "flags": ["generated", "noStrict"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n\nIf an implementation extends any function object with an own property named \"caller\" the value of\nthat property, as observed using [[Get]] or [[GetOwnProperty]], must not be a strict function\nobject. If it is an accessor property, the function that is the value of the property's [[Get]]\nattribute must never return a strict function when called.\n\n"}, {"path": "./test262-main/test/language/expressions/generators/generator-created-after-decl-inst.js", "esid": " sec-generator-function-definitions-runtime-semantics-evaluatebody", "description": " >The generator object is created after FunctionDeclarationInstantiation.\n", "info": " |14.4.10 Runtime Semantics: EvaluateBody\n\n1. Perform ? FunctionDeclarationInstantiation(functionObject, argumentsList).\n2. Let G be ? OrdinaryCreateFromConstructor(functionObject, \"%GeneratorPrototype%\",\n\u00ab [[GeneratorState]], [[GeneratorContext]] \u00bb).\n3. Perform GeneratorStart(G, FunctionBody).\n...\n\n", "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/generators/has-instance.js", "description": " >A Generator object is an instance of a generator function.\n", "version": 6, "esid": " 25.3", "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/generators/length-dflt.js", "version": 6, "esid": " 14.1.6", "description": " >Default parameters' effect on function length\n", "info": " |Function length is counted by the non initialized parameters in the left.\n\n9.2.4 FunctionInitialize (F, kind, ParameterList, Body, Scope)\n\n[...]\n2. Let len be the ExpectedArgumentCount of ParameterList.\n3. Perform ! DefinePropertyOrThrow(F, \"length\", PropertyDescriptor{[[Value]]:\nlen, [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true}).\n[...]\n\nFormalsList : FormalParameter\n\n1. If HasInitializer of FormalParameter is true return 0\n2. Return 1.\n\nFormalsList : FormalsList , FormalParameter\n\n1. Let count be the ExpectedArgumentCount of FormalsList.\n2. If HasInitializer of FormalsList is true or HasInitializer of\nFormalParameter is true, return count.\n3. Return count+1.\n", "features": ["generators", "default-parameters"], "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/language/expressions/generators/length-property-descriptor.js", "description": " >Generator objects should define a `length` property.\n", "includes": ["propertyHelper.js"], "version": 6, "esid": " 25.2.4", "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/generators/name.js", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "description": " Assignment of function `name` attribute", "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n1. Let scope be the LexicalEnvironment of the running execution context.\n2. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, \"\").\n...\n6. Return closure.\n\nGeneratorExpression : function * BindingIdentifier ( FormalParameters ) { GeneratorBody }\n\n1. Let scope be the running execution context's LexicalEnvironment.\n2. Let funcEnv be NewDeclarativeEnvironment(scope).\n3. Let envRec be funcEnv's EnvironmentRecord.\n4. Let name be StringValue of BindingIdentifier.\n5. Perform envRec.CreateImmutableBinding(name, false).\n6. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, funcEnv, name).\n...\n11. Return closure.\n", "includes": ["propertyHelper.js"], "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/generators/named-no-strict-reassign-fn-name-in-body-in-arrow.js", "description": " Reassignment of function name is silently ignored in non-strict mode code. (named generator function expression in non-strict mode code)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators"], "flags": ["generated", "noStrict"], "info": " |GeneratorExpression : function * BindingIdentifier ( FormalParameters ) { GeneratorBody }\n\n"}, {"path": "./test262-main/test/language/expressions/generators/named-no-strict-reassign-fn-name-in-body-in-eval.js", "description": " Reassignment of function name is silently ignored in non-strict mode code. (named generator function expression in non-strict mode code)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators"], "flags": ["generated", "noStrict"], "info": " |GeneratorExpression : function * BindingIdentifier ( FormalParameters ) { GeneratorBody }\n\n"}, {"path": "./test262-main/test/language/expressions/generators/named-no-strict-reassign-fn-name-in-body.js", "description": " Reassignment of function name is silently ignored in non-strict mode code. (named generator function expression in non-strict mode code)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators"], "flags": ["generated", "noStrict"], "info": " |GeneratorExpression : function * BindingIdentifier ( FormalParameters ) { GeneratorBody }\n\n"}, {"path": "./test262-main/test/language/expressions/generators/named-strict-error-reassign-fn-name-in-body-in-arrow.js", "description": " Reassignment of function name is silently ignored in non-strict mode code. (named generator function expression in strict mode code)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators"], "flags": ["generated", "onlyStrict"], "info": " |GeneratorExpression : function * BindingIdentifier ( FormalParameters ) { GeneratorBody }\n\n"}, {"path": "./test262-main/test/language/expressions/generators/named-strict-error-reassign-fn-name-in-body-in-eval.js", "description": " Reassignment of function name is silently ignored in non-strict mode code. (named generator function expression in strict mode code)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators"], "flags": ["generated", "onlyStrict"], "info": " |GeneratorExpression : function * BindingIdentifier ( FormalParameters ) { GeneratorBody }\n\n"}, {"path": "./test262-main/test/language/expressions/generators/named-strict-error-reassign-fn-name-in-body.js", "description": " Reassignment of function name is silently ignored in non-strict mode code. (named generator function expression in strict mode code)", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "features": ["generators"], "flags": ["generated", "onlyStrict"], "info": " |GeneratorExpression : function * BindingIdentifier ( FormalParameters ) { GeneratorBody }\n\n"}, {"path": "./test262-main/test/language/expressions/generators/named-yield-spread-arr-multiple.js", "description": " Use yield value in a array spread position (Named generator expression)", "esid": " prod-GeneratorExpression", "features": ["generators"], "flags": ["generated"], "includes": ["compareArray.js"], "info": " |14.4 Generator Function Definitions\n\nGeneratorExpression:\nfunction * BindingIdentifier opt ( FormalParameters ) { GeneratorBody }\n\n\nArray Initializer\n\nSpreadElement[Yield, Await]:\n...AssignmentExpression[+In, ?Yield, ?Await]\n\n"}, {"path": "./test262-main/test/language/expressions/generators/named-yield-spread-arr-single.js", "description": " Use yield value in a array spread position (Named generator expression)", "esid": " prod-GeneratorExpression", "features": ["generators"], "flags": ["generated"], "info": " |14.4 Generator Function Definitions\n\nGeneratorExpression:\nfunction * BindingIdentifier opt ( FormalParameters ) { GeneratorBody }\n\n\nArray Initializer\n\nSpreadElement[Yield, Await]:\n...AssignmentExpression[+In, ?Yield, ?Await]\n"}, {"path": "./test262-main/test/language/expressions/generators/no-name.js", "info": " |Generator can be declared with GeneratorExpression syntax\n", "version": 6, "esid": " 14.4", "author": " Sam Mikes", "description": " can create generator function expressions (no name)", "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/generators/no-yield.js", "description": " >Generators declared with GeneratorExpression syntax do not require a\n`yield` expression.\n", "version": 6, "esid": " 14.4", "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/generators/params-dflt-args-unmapped.js", "description": " Referencing the arguments object from a default parameter (generator function expression)", "esid": " 14.4.14", "version": 6, "features": ["generators", "default-parameters"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n14.1.19 Runtime Semantics: IteratorBindingInitialization\n\nFormalsList : FormalsList , FormalParameter\n\n1. Let status be the result of performing IteratorBindingInitialization for\nFormalsList using iteratorRecord and environment as the arguments.\n2. ReturnIfAbrupt(status).\n3. Return the result of performing IteratorBindingInitialization for\nFormalParameter using iteratorRecord and environment as the arguments. \n"}, {"path": "./test262-main/test/language/expressions/generators/params-dflt-ref-arguments.js", "description": " Referencing the arguments object from a default parameter (generator function expression)", "esid": " 14.4.14", "version": 6, "features": ["generators", "default-parameters"], "info": " |GeneratorExpression : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n3. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n14.1.19 Runtime Semantics: IteratorBindingInitialization\n\nFormalsList : FormalsList , FormalParameter\n\n1. Let status be the result of performing IteratorBindingInitialization for\nFormalsList using iteratorRecord and environment as the arguments.\n2. ReturnIfAbrupt(status).\n3. Return the result of performing IteratorBindingInitialization for\nFormalParameter using iteratorRecord and environment as the arguments.\n"}, {"path": "./test262-main/test/language/expressions/generators/prototype-own-properties.js", "version": 6, "esid": " 25.2.4.2", "description": " >The `prototype` property of GeneratorFunction instances are created as\nplain objects with no \"own\" properties.\n", "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/generators/prototype-property-descriptor.js", "description": " >Generator objects should define a `prototype` property.\n", "includes": ["propertyHelper.js"], "version": 6, "esid": " 25.2.4", "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/generators/prototype-relation-to-function.js", "description": " >The value of the [[Prototype]] internal slot of the GeneratorFunction\nprototype object is the FunctionPrototype intrinsic object.\n", "version": 6, "esid": " 25.2.2.2", "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/generators/prototype-typeof.js", "version": 6, "esid": " 25.2.4.2", "description": " >Whenever a GeneratorFunction instance is created another ordinary object is\nalso created and is the initial value of the generator function\u2019s prototype\nproperty.\n", "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/generators/prototype-uniqueness.js", "description": " >GeneratorFunction instances are created with a unique prototype object.\n", "version": 6, "esid": " 25.2.1", "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/generators/prototype-value.js", "description": " >Generator instances directly inherit properties from the object that is the\nvalue of the prototype property of the Generator function that created the\ninstance.\n", "version": 6, "esid": " 25.3", "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/generators/return.js", "description": " >`return` is a valid statement within generator function bodies.\n", "version": 6, "esid": " 14.4", "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/generators/scope-name-var-close.js", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "description": " Removal of variable environment for the BindingIdentifier", "info": " |[...]\n2. Let scope be the running execution context's LexicalEnvironment.\n3. Let funcEnv be NewDeclarativeEnvironment(scope).\n4. Let envRec be funcEnv's EnvironmentRecord.\n5. Let name be StringValue of BindingIdentifier.\n6. Perform envRec.CreateImmutableBinding(name, false).\n7. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, funcEnv, strict).\n[...]\n", "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/generators/scope-name-var-open-non-strict.js", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "description": " >Creation of new variable environment for the BindingIdentifier\nparameter\n", "info": " |[...]\n2. Let scope be the running execution context's LexicalEnvironment.\n3. Let funcEnv be NewDeclarativeEnvironment(scope).\n4. Let envRec be funcEnv's EnvironmentRecord.\n5. Let name be StringValue of BindingIdentifier.\n6. Perform envRec.CreateImmutableBinding(name, false).\n7. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, funcEnv, strict).\n[...]\n", "flags": ["noStrict"], "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/generators/scope-name-var-open-strict.js", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "description": " >Creation of new variable environment for the BindingIdentifier\nparameter\n", "info": " |[...]\n2. Let scope be the running execution context's LexicalEnvironment.\n3. Let funcEnv be NewDeclarativeEnvironment(scope).\n4. Let envRec be funcEnv's EnvironmentRecord.\n5. Let name be StringValue of BindingIdentifier.\n6. Perform envRec.CreateImmutableBinding(name, false).\n7. Let closure be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, funcEnv, strict).\n[...]\n", "flags": ["onlyStrict"], "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/generators/scope-param-elem-var-close.js", "esid": " sec-functiondeclarationinstantiation", "description": " >sloppy direct evals in params introduce vars\n", "info": " |[...]\n20. Else,\na. NOTE: A separate Environment Record is needed to ensure that bindings created by direct eval calls in the formal parameter list are outside the environment where parameters are declared.\nb. Let calleeEnv be the LexicalEnvironment of calleeContext.\nc. Let env be NewDeclarativeEnvironment(calleeEnv).\nd. Let envRec be env's EnvironmentRecord.\n[...]\n", "flags": ["noStrict"], "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/generators/scope-param-elem-var-open.js", "esid": " sec-functiondeclarationinstantiation", "description": " >sloppy direct evals in params introduce vars\n", "info": " |[...]\n20. Else,\na. NOTE: A separate Environment Record is needed to ensure that bindings created by direct eval calls in the formal parameter list are outside the environment where parameters are declared.\nb. Let calleeEnv be the LexicalEnvironment of calleeContext.\nc. Let env be NewDeclarativeEnvironment(calleeEnv).\nd. Let envRec be env's EnvironmentRecord.\n[...]\n", "flags": ["noStrict"], "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/generators/scope-paramsbody-var-close.js", "esid": " sec-functiondeclarationinstantiation", "description": " >Disposal of variable environment for the function body\n", "info": " |[...]\n26. If hasParameterExpressions is false, then\n[...]\n27. Else,\na. NOTE A separate Environment Record is needed to ensure that closures\ncreated by expressions in the formal parameter list do not have\nvisibility of declarations in the function body.\nb. Let varEnv be NewDeclarativeEnvironment(env).\nc. Let varEnvRec be varEnv's EnvironmentRecord.\nd. Set the VariableEnvironment of calleeContext to varEnv.\ne. Let instantiatedVarNames be a new empty List.\n[...]\n", "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/generators/yield-as-literal-property-name.js", "description": " >`yield` may be used as a literal property name in an object literal\nwithin generator function bodies.\n", "version": 6, "esid": " 12.1.1", "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/generators/yield-as-property-name.js", "description": " >`yield` may be used as a literal property name in an object literal\nwithin generator function bodies.\n", "version": 6, "esid": " 12.1.1", "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/generators/yield-as-statement.js", "description": " >`yield` is a valid statement within generator function bodies.\n", "version": 6, "esid": " 14.4", "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/generators/yield-as-yield-operand.js", "description": " >`yield` expressions may be used as the right-hand-side of other `yield`\nexpressions.\n", "version": 6, "esid": " 14.4", "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/generators/yield-newline.js", "description": " >Newlines terminate `yield` expressions.\n", "version": 6, "esid": " 14.4", "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/generators/yield-spread-arr-multiple.js", "description": " Use yield value in a array spread position (Unnamed generator expression)", "esid": " prod-GeneratorExpression", "features": ["generators"], "flags": ["generated"], "includes": ["compareArray.js"], "info": " |14.4 Generator Function Definitions\n\nGeneratorExpression:\nfunction * BindingIdentifier opt ( FormalParameters ) { GeneratorBody }\n\n\nArray Initializer\n\nSpreadElement[Yield, Await]:\n...AssignmentExpression[+In, ?Yield, ?Await]\n\n"}, {"path": "./test262-main/test/language/expressions/generators/yield-spread-arr-single.js", "description": " Use yield value in a array spread position (Unnamed generator expression)", "esid": " prod-GeneratorExpression", "features": ["generators"], "flags": ["generated"], "info": " |14.4 Generator Function Definitions\n\nGeneratorExpression:\nfunction * BindingIdentifier opt ( FormalParameters ) { GeneratorBody }\n\n\nArray Initializer\n\nSpreadElement[Yield, Await]:\n...AssignmentExpression[+In, ?Yield, ?Await]\n"}, {"path": "./test262-main/test/language/expressions/generators/yield-star-before-newline.js", "description": " >The right-hand side of a `yield *` expression may appear on a new line.\n", "version": 6, "esid": " 14.4", "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/import.meta/syntax/goal-generator-params-or-body.js", "esid": " sec-left-hand-side-expressions-static-semantics-early-errors", "description": " >An Syntax Error is thrown when the syntactic goal symbol is GeneratorBody or FormalParameters.\n", "info": " |It is an early Syntax Error if Module is not the syntactic goal symbol.\n", "features": ["import.meta", "generators"]}, {"path": "./test262-main/test/language/expressions/instanceof/symbol-hasinstance-not-callable.js", "version": 6, "esid": " 12.9.4", "description": " >Error thrown when constructor's @@hasInstance property is defined but not callable\n", "info": " |1. If Type(C) is not Object, throw a TypeError exception.\n2. Let instOfHandler be GetMethod(C,@@hasInstance).\n3. ReturnIfAbrupt(instOfHandler).\n4. If instOfHandler is not undefined, then\na. Return ToBoolean(Call(instOfHandler, C, \u00abO\u00bb)).\n5. If IsCallable(C) is false, throw a TypeError exception.\n", "features": ["Symbol.hasInstance"]}, {"path": "./test262-main/test/language/expressions/left-shift/order-of-evaluation.js", "esid": " sec-left-shift-operator-runtime-semantics-evaluation", "description": " Type coercion order of operations for left-shift operator", "features": ["Symbol"], "info": " |Evaluate lhs\nEvaluate rhs\nToNumeric(lhs)\nToNumeric(rhs)\n"}, {"path": "./test262-main/test/language/expressions/logical-and/symbol-logical-and-evaluation.js", "version": 6, "esid": " 12.12.3", "description": " >\"Logical AND\" Symbol evaluation\n", "features": ["Symbol"]}, {"path": "./test262-main/test/language/expressions/logical-not/symbol-logical-not-evaluation.js", "version": 6, "esid": " 12.5.12.1", "description": " >\"Logical Not\" coercion operation on Symbols\n", "features": ["Symbol"]}, {"path": "./test262-main/test/language/expressions/logical-or/symbol-logical-or-evaluation.js", "version": 6, "esid": " 12.12.3", "description": " >\"Logical OR\" Symbol evaluation\n", "features": ["Symbol"]}, {"path": "./test262-main/test/language/expressions/modulus/order-of-evaluation.js", "esid": " sec-multiplicative-operators-runtime-semantics-evaluation", "description": " Type coercion order of operations for modulus operator", "features": ["Symbol"], "info": " |Evaluate lhs\nEvaluate rhs\nToNumeric(lhs)\nToNumeric(rhs)\n"}, {"path": "./test262-main/test/language/expressions/multiplication/order-of-evaluation.js", "esid": " sec-multiplicative-operators-runtime-semantics-evaluation", "description": " Type coercion order of operations for multiplication operator", "features": ["Symbol"], "info": " |Evaluate lhs\nEvaluate rhs\nToNumeric(lhs)\nToNumeric(rhs)\n"}, {"path": "./test262-main/test/language/expressions/new/spread-err-mult-err-expr-throws.js", "description": " Spread operator following other arguments when evaluation throws (`new` operator)", "esid": " sec-new-operator-runtime-semantics-evaluation", "features": ["generators"], "flags": ["generated"], "info": " |MemberExpression : new MemberExpression Arguments\n\n1. Return EvaluateNew(MemberExpression, Arguments).\n\n12.3.3.1.1 Runtime Semantics: EvaluateNew\n\n6. If arguments is empty, let argList be an empty List.\n7. Else,\na. Let argList be ArgumentListEvaluation of arguments.\n[...]\n\n12.3.6.1 Runtime Semantics: ArgumentListEvaluation\n\nArgumentList : ArgumentList , ... AssignmentExpression\n\n1. Let precedingArgs be the result of evaluating ArgumentList.\n2. Let spreadRef be the result of evaluating AssignmentExpression.\n3. Let iterator be GetIterator(GetValue(spreadRef) ).\n4. ReturnIfAbrupt(iterator).\n\n"}, {"path": "./test262-main/test/language/expressions/new/spread-err-mult-err-iter-get-value.js", "description": " Spread operator following other arguments when GetIterator fails (@@iterator function return value) (`new` operator)", "esid": " sec-new-operator-runtime-semantics-evaluation", "features": ["Symbol.iterator"], "flags": ["generated"], "info": " |MemberExpression : new MemberExpression Arguments\n\n1. Return EvaluateNew(MemberExpression, Arguments).\n\n12.3.3.1.1 Runtime Semantics: EvaluateNew\n\n6. If arguments is empty, let argList be an empty List.\n7. Else,\na. Let argList be ArgumentListEvaluation of arguments.\n[...]\n\n12.3.6.1 Runtime Semantics: ArgumentListEvaluation\n\nArgumentList : ArgumentList , ... AssignmentExpression\n\n1. Let precedingArgs be the result of evaluating ArgumentList.\n2. Let spreadRef be the result of evaluating AssignmentExpression.\n3. Let iterator be GetIterator(GetValue(spreadRef) ).\n4. ReturnIfAbrupt(iterator).\n\n7.4.1 GetIterator ( obj, method )\n\n[...]\n2. Let iterator be ? Call(method, obj).\n3. If Type(iterator) is not Object, throw a TypeError exception.\n"}, {"path": "./test262-main/test/language/expressions/new/spread-err-mult-err-itr-get-call.js", "description": " Spread operator following other arguments when GetIterator fails (@@iterator function invocation) (`new` operator)", "esid": " sec-new-operator-runtime-semantics-evaluation", "features": ["Symbol.iterator"], "flags": ["generated"], "info": " |MemberExpression : new MemberExpression Arguments\n\n1. Return EvaluateNew(MemberExpression, Arguments).\n\n12.3.3.1.1 Runtime Semantics: EvaluateNew\n\n6. If arguments is empty, let argList be an empty List.\n7. Else,\na. Let argList be ArgumentListEvaluation of arguments.\n[...]\n\n12.3.6.1 Runtime Semantics: ArgumentListEvaluation\n\nArgumentList : ArgumentList , ... AssignmentExpression\n\n1. Let precedingArgs be the result of evaluating ArgumentList.\n2. Let spreadRef be the result of evaluating AssignmentExpression.\n3. Let iterator be GetIterator(GetValue(spreadRef) ).\n4. ReturnIfAbrupt(iterator).\n\n7.4.1 GetIterator ( obj, method )\n\n[...]\n3. Let iterator be Call(method,obj).\n4. ReturnIfAbrupt(iterator).\n"}, {"path": "./test262-main/test/language/expressions/new/spread-err-mult-err-itr-get-get.js", "description": " Spread operator following other arguments when GetIterator fails (@@iterator property access) (`new` operator)", "esid": " sec-new-operator-runtime-semantics-evaluation", "features": ["Symbol.iterator"], "flags": ["generated"], "info": " |MemberExpression : new MemberExpression Arguments\n\n1. Return EvaluateNew(MemberExpression, Arguments).\n\n12.3.3.1.1 Runtime Semantics: EvaluateNew\n\n6. If arguments is empty, let argList be an empty List.\n7. Else,\na. Let argList be ArgumentListEvaluation of arguments.\n[...]\n\n12.3.6.1 Runtime Semantics: ArgumentListEvaluation\n\nArgumentList : ArgumentList , ... AssignmentExpression\n\n1. Let precedingArgs be the result of evaluating ArgumentList.\n2. Let spreadRef be the result of evaluating AssignmentExpression.\n3. Let iterator be GetIterator(GetValue(spreadRef) ).\n4. ReturnIfAbrupt(iterator).\n\n7.4.1 GetIterator ( obj, method )\n\n1. If method was not passed, then\na. Let method be ? GetMethod(obj, @@iterator).\n"}, {"path": "./test262-main/test/language/expressions/new/spread-err-mult-err-itr-step.js", "description": " Spread operator following other arguments when IteratorStep fails (`new` operator)", "esid": " sec-new-operator-runtime-semantics-evaluation", "features": ["Symbol.iterator"], "flags": ["generated"], "info": " |MemberExpression : new MemberExpression Arguments\n\n1. Return EvaluateNew(MemberExpression, Arguments).\n\n12.3.3.1.1 Runtime Semantics: EvaluateNew\n\n6. If arguments is empty, let argList be an empty List.\n7. Else,\na. Let argList be ArgumentListEvaluation of arguments.\n[...]\n\n12.3.6.1 Runtime Semantics: ArgumentListEvaluation\n\nArgumentList : ArgumentList , ... AssignmentExpression\n\n1. Let precedingArgs be the result of evaluating ArgumentList.\n2. Let spreadRef be the result of evaluating AssignmentExpression.\n3. Let iterator be GetIterator(GetValue(spreadRef) ).\n4. ReturnIfAbrupt(iterator).\n\n7.4.5 IteratorStep ( iterator )\n\n1. Let result be IteratorNext(iterator).\n2. ReturnIfAbrupt(result).\n\n7.4.2 IteratorNext ( iterator, value )\n\n1. If value was not passed, then\na. Let result be Invoke(iterator, \"next\", \u00ab \u00bb).\n[...]\n3. ReturnIfAbrupt(result).\n"}, {"path": "./test262-main/test/language/expressions/new/spread-err-mult-err-itr-value.js", "description": " Spread operator following other arguments when IteratorValue fails (`new` operator)", "esid": " sec-new-operator-runtime-semantics-evaluation", "features": ["Symbol.iterator"], "flags": ["generated"], "info": " |MemberExpression : new MemberExpression Arguments\n\n1. Return EvaluateNew(MemberExpression, Arguments).\n\n12.3.3.1.1 Runtime Semantics: EvaluateNew\n\n6. If arguments is empty, let argList be an empty List.\n7. Else,\na. Let argList be ArgumentListEvaluation of arguments.\n[...]\n\n12.3.6.1 Runtime Semantics: ArgumentListEvaluation\n\nArgumentList : ArgumentList , ... AssignmentExpression\n\n1. Let precedingArgs be the result of evaluating ArgumentList.\n2. Let spreadRef be the result of evaluating AssignmentExpression.\n3. Let iterator be GetIterator(GetValue(spreadRef) ).\n4. ReturnIfAbrupt(iterator).\n\n7.4.4 IteratorValue ( iterResult )\n\n1. Assert: Type(iterResult) is Object.\n2. Return Get(iterResult, \"value\").\n\n7.3.1 Get (O, P)\n\n[...]\n3. Return O.[[Get]](P, O).\n"}, {"path": "./test262-main/test/language/expressions/new/spread-err-mult-err-unresolvable.js", "description": " Spread operator following other arguments when reference is unresolvable (`new` operator)", "esid": " sec-new-operator-runtime-semantics-evaluation", "flags": ["generated"], "info": " |MemberExpression : new MemberExpression Arguments\n\n1. Return EvaluateNew(MemberExpression, Arguments).\n\n12.3.3.1.1 Runtime Semantics: EvaluateNew\n\n6. If arguments is empty, let argList be an empty List.\n7. Else,\na. Let argList be ArgumentListEvaluation of arguments.\n[...]\n\n12.3.6.1 Runtime Semantics: ArgumentListEvaluation\n\nArgumentList : ArgumentList , ... AssignmentExpression\n\n1. Let precedingArgs be the result of evaluating ArgumentList.\n2. Let spreadRef be the result of evaluating AssignmentExpression.\n3. Let iterator be GetIterator(GetValue(spreadRef) ).\n4. ReturnIfAbrupt(iterator).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/expressions/new/spread-err-sngl-err-expr-throws.js", "description": " Spread operator applied to the only argument when evaluation throws (`new` operator)", "esid": " sec-new-operator-runtime-semantics-evaluation", "features": ["generators"], "flags": ["generated"], "info": " |MemberExpression : new MemberExpression Arguments\n\n1. Return EvaluateNew(MemberExpression, Arguments).\n\n12.3.3.1.1 Runtime Semantics: EvaluateNew\n\n6. If arguments is empty, let argList be an empty List.\n7. Else,\na. Let argList be ArgumentListEvaluation of arguments.\n[...]\n\n12.3.6.1 Runtime Semantics: ArgumentListEvaluation\n\nArgumentList : ... AssignmentExpression\n\n1. Let list be an empty List.\n2. Let spreadRef be the result of evaluating AssignmentExpression.\n3. Let spreadObj be GetValue(spreadRef).\n4. Let iterator be GetIterator(spreadObj).\n5. ReturnIfAbrupt(iterator).\n"}, {"path": "./test262-main/test/language/expressions/new/spread-err-sngl-err-itr-get-call.js", "description": " Spread operator applied to the only argument when GetIterator fails (@@iterator function invocation) (`new` operator)", "esid": " sec-new-operator-runtime-semantics-evaluation", "features": ["Symbol.iterator"], "flags": ["generated"], "info": " |MemberExpression : new MemberExpression Arguments\n\n1. Return EvaluateNew(MemberExpression, Arguments).\n\n12.3.3.1.1 Runtime Semantics: EvaluateNew\n\n6. If arguments is empty, let argList be an empty List.\n7. Else,\na. Let argList be ArgumentListEvaluation of arguments.\n[...]\n\n12.3.6.1 Runtime Semantics: ArgumentListEvaluation\n\nArgumentList : ... AssignmentExpression\n\n1. Let list be an empty List.\n2. Let spreadRef be the result of evaluating AssignmentExpression.\n3. Let spreadObj be GetValue(spreadRef).\n4. Let iterator be GetIterator(spreadObj).\n5. ReturnIfAbrupt(iterator).\n\n7.4.1 GetIterator ( obj, method )\n\n[...]\n3. Let iterator be Call(method,obj).\n4. ReturnIfAbrupt(iterator).\n"}, {"path": "./test262-main/test/language/expressions/new/spread-err-sngl-err-itr-get-get.js", "description": " Spread operator applied to the only argument when GetIterator fails (@@iterator property access) (`new` operator)", "esid": " sec-new-operator-runtime-semantics-evaluation", "features": ["Symbol.iterator"], "flags": ["generated"], "info": " |MemberExpression : new MemberExpression Arguments\n\n1. Return EvaluateNew(MemberExpression, Arguments).\n\n12.3.3.1.1 Runtime Semantics: EvaluateNew\n\n6. If arguments is empty, let argList be an empty List.\n7. Else,\na. Let argList be ArgumentListEvaluation of arguments.\n[...]\n\n12.3.6.1 Runtime Semantics: ArgumentListEvaluation\n\nArgumentList : ... AssignmentExpression\n\n1. Let list be an empty List.\n2. Let spreadRef be the result of evaluating AssignmentExpression.\n3. Let spreadObj be GetValue(spreadRef).\n4. Let iterator be GetIterator(spreadObj).\n5. ReturnIfAbrupt(iterator).\n\n7.4.1 GetIterator ( obj, method )\n\n1. If method was not passed, then\na. Let method be ? GetMethod(obj, @@iterator).\n"}, {"path": "./test262-main/test/language/expressions/new/spread-err-sngl-err-itr-get-value.js", "description": " Spread operator applied to the only argument when GetIterator fails (@@iterator function return value) (`new` operator)", "esid": " sec-new-operator-runtime-semantics-evaluation", "features": ["Symbol.iterator"], "flags": ["generated"], "info": " |MemberExpression : new MemberExpression Arguments\n\n1. Return EvaluateNew(MemberExpression, Arguments).\n\n12.3.3.1.1 Runtime Semantics: EvaluateNew\n\n6. If arguments is empty, let argList be an empty List.\n7. Else,\na. Let argList be ArgumentListEvaluation of arguments.\n[...]\n\n12.3.6.1 Runtime Semantics: ArgumentListEvaluation\n\nArgumentList : ... AssignmentExpression\n\n1. Let list be an empty List.\n2. Let spreadRef be the result of evaluating AssignmentExpression.\n3. Let spreadObj be GetValue(spreadRef).\n4. Let iterator be GetIterator(spreadObj).\n5. ReturnIfAbrupt(iterator).\n\n7.4.1 GetIterator ( obj, method )\n\n[...]\n2. Let iterator be ? Call(method, obj).\n3. If Type(iterator) is not Object, throw a TypeError exception.\n"}, {"path": "./test262-main/test/language/expressions/new/spread-err-sngl-err-itr-step.js", "description": " Spread operator applied to the only argument when IteratorStep fails (`new` operator)", "esid": " sec-new-operator-runtime-semantics-evaluation", "features": ["Symbol.iterator"], "flags": ["generated"], "info": " |MemberExpression : new MemberExpression Arguments\n\n1. Return EvaluateNew(MemberExpression, Arguments).\n\n12.3.3.1.1 Runtime Semantics: EvaluateNew\n\n6. If arguments is empty, let argList be an empty List.\n7. Else,\na. Let argList be ArgumentListEvaluation of arguments.\n[...]\n\n12.3.6.1 Runtime Semantics: ArgumentListEvaluation\n\nArgumentList : ... AssignmentExpression\n\n1. Let list be an empty List.\n2. Let spreadRef be the result of evaluating AssignmentExpression.\n3. Let spreadObj be GetValue(spreadRef).\n4. Let iterator be GetIterator(spreadObj).\n5. ReturnIfAbrupt(iterator).\n6. Repeat\na. Let next be IteratorStep(iterator).\nb. ReturnIfAbrupt(next).\n\n7.4.5 IteratorStep ( iterator )\n\n1. Let result be IteratorNext(iterator).\n2. ReturnIfAbrupt(result).\n\n7.4.2 IteratorNext ( iterator, value )\n\n1. If value was not passed, then\na. Let result be Invoke(iterator, \"next\", \u00ab \u00bb).\n[...]\n3. ReturnIfAbrupt(result).\n"}, {"path": "./test262-main/test/language/expressions/new/spread-err-sngl-err-itr-value.js", "description": " Spread operator applied to the only argument when IteratorValue fails (`new` operator)", "esid": " sec-new-operator-runtime-semantics-evaluation", "features": ["Symbol.iterator"], "flags": ["generated"], "info": " |MemberExpression : new MemberExpression Arguments\n\n1. Return EvaluateNew(MemberExpression, Arguments).\n\n12.3.3.1.1 Runtime Semantics: EvaluateNew\n\n6. If arguments is empty, let argList be an empty List.\n7. Else,\na. Let argList be ArgumentListEvaluation of arguments.\n[...]\n\n12.3.6.1 Runtime Semantics: ArgumentListEvaluation\n\nArgumentList : ... AssignmentExpression\n\n1. Let list be an empty List.\n2. Let spreadRef be the result of evaluating AssignmentExpression.\n3. Let spreadObj be GetValue(spreadRef).\n4. Let iterator be GetIterator(spreadObj).\n5. ReturnIfAbrupt(iterator).\n6. Repeat\na. Let next be IteratorStep(iterator).\nb. ReturnIfAbrupt(next).\nc. If next is false, return list.\nd. Let nextArg be IteratorValue(next).\ne. ReturnIfAbrupt(nextArg).\n\n7.4.4 IteratorValue ( iterResult )\n\n1. Assert: Type(iterResult) is Object.\n2. Return Get(iterResult, \"value\").\n\n7.3.1 Get (O, P)\n\n[...]\n3. Return O.[[Get]](P, O).\n"}, {"path": "./test262-main/test/language/expressions/new/spread-err-sngl-err-unresolvable.js", "description": " Spread operator applied to the only argument when reference is unresolvable (`new` operator)", "esid": " sec-new-operator-runtime-semantics-evaluation", "flags": ["generated"], "info": " |MemberExpression : new MemberExpression Arguments\n\n1. Return EvaluateNew(MemberExpression, Arguments).\n\n12.3.3.1.1 Runtime Semantics: EvaluateNew\n\n6. If arguments is empty, let argList be an empty List.\n7. Else,\na. Let argList be ArgumentListEvaluation of arguments.\n[...]\n\n12.3.6.1 Runtime Semantics: ArgumentListEvaluation\n\nArgumentList : ... AssignmentExpression\n\n1. Let list be an empty List.\n2. Let spreadRef be the result of evaluating AssignmentExpression.\n3. Let spreadObj be GetValue(spreadRef).\n4. Let iterator be GetIterator(spreadObj).\n5. ReturnIfAbrupt(iterator).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/expressions/new/spread-mult-empty.js", "description": " Spread operator following other arguments when no iteration occurs (`new` operator)", "esid": " sec-new-operator-runtime-semantics-evaluation", "flags": ["generated"], "info": " |MemberExpression : new MemberExpression Arguments\n\n1. Return EvaluateNew(MemberExpression, Arguments).\n\n12.3.3.1.1 Runtime Semantics: EvaluateNew\n\n6. If arguments is empty, let argList be an empty List.\n7. Else,\na. Let argList be ArgumentListEvaluation of arguments.\n[...]\n\n12.3.6.1 Runtime Semantics: ArgumentListEvaluation\n\nArgumentList : ArgumentList , ... AssignmentExpression\n\n1. Let precedingArgs be the result of evaluating ArgumentList.\n2. Let spreadRef be the result of evaluating AssignmentExpression.\n3. Let iterator be GetIterator(GetValue(spreadRef) ).\n4. ReturnIfAbrupt(iterator).\n5. Repeat\na. Let next be IteratorStep(iterator).\nb. ReturnIfAbrupt(next).\nc. If next is false, return precedingArgs.\n"}, {"path": "./test262-main/test/language/expressions/new/spread-mult-expr.js", "description": " Spread operator applied to AssignmentExpression following other elements (`new` operator)", "esid": " sec-new-operator-runtime-semantics-evaluation", "flags": ["generated"], "info": " |MemberExpression : new MemberExpression Arguments\n\n1. Return EvaluateNew(MemberExpression, Arguments).\n\n12.3.3.1.1 Runtime Semantics: EvaluateNew\n\n6. If arguments is empty, let argList be an empty List.\n7. Else,\na. Let argList be ArgumentListEvaluation of arguments.\n[...]\n\n12.3.6.1 Runtime Semantics: ArgumentListEvaluation\n\nArgumentList : ArgumentList , ... AssignmentExpression\n\n1. Let precedingArgs be the result of evaluating ArgumentList.\n2. Let spreadRef be the result of evaluating AssignmentExpression.\n3. Let iterator be GetIterator(GetValue(spreadRef) ).\n4. ReturnIfAbrupt(iterator).\n5. Repeat\na. Let next be IteratorStep(iterator).\nb. ReturnIfAbrupt(next).\nc. If next is false, return precedingArgs.\n"}, {"path": "./test262-main/test/language/expressions/new/spread-mult-iter.js", "description": " Spread operator following other arguments with a valid iterator (`new` operator)", "esid": " sec-new-operator-runtime-semantics-evaluation", "features": ["Symbol.iterator"], "flags": ["generated"], "info": " |MemberExpression : new MemberExpression Arguments\n\n1. Return EvaluateNew(MemberExpression, Arguments).\n\n12.3.3.1.1 Runtime Semantics: EvaluateNew\n\n6. If arguments is empty, let argList be an empty List.\n7. Else,\na. Let argList be ArgumentListEvaluation of arguments.\n[...]\n\n12.3.6.1 Runtime Semantics: ArgumentListEvaluation\n\nArgumentList : ... AssignmentExpression\n\n1. Let list be an empty List.\n2. Let spreadRef be the result of evaluating AssignmentExpression.\n3. Let spreadObj be GetValue(spreadRef).\n4. Let iterator be GetIterator(spreadObj).\n5. ReturnIfAbrupt(iterator).\n6. Repeat\na. Let next be IteratorStep(iterator).\nb. ReturnIfAbrupt(next).\nc. If next is false, return list.\nd. Let nextArg be IteratorValue(next).\ne. ReturnIfAbrupt(nextArg).\nf. Append nextArg as the last element of list.\n"}, {"path": "./test262-main/test/language/expressions/new/spread-mult-literal.js", "description": " Spread operator applied to AssignmentExpression following other elements (`new` operator)", "esid": " sec-new-operator-runtime-semantics-evaluation", "flags": ["generated"], "info": " |MemberExpression : new MemberExpression Arguments\n\n1. Return EvaluateNew(MemberExpression, Arguments).\n\n12.3.3.1.1 Runtime Semantics: EvaluateNew\n\n6. If arguments is empty, let argList be an empty List.\n7. Else,\na. Let argList be ArgumentListEvaluation of arguments.\n[...]\n\n12.3.6.1 Runtime Semantics: ArgumentListEvaluation\n\nArgumentList : ArgumentList , ... AssignmentExpression\n\n1. Let precedingArgs be the result of evaluating ArgumentList.\n2. Let spreadRef be the result of evaluating AssignmentExpression.\n3. Let iterator be GetIterator(GetValue(spreadRef) ).\n4. ReturnIfAbrupt(iterator).\n5. Repeat\na. Let next be IteratorStep(iterator).\nb. ReturnIfAbrupt(next).\nc. If next is false, return precedingArgs.\n"}, {"path": "./test262-main/test/language/expressions/new/spread-sngl-empty.js", "description": " Spread operator applied to the only argument when no iteration occurs (`new` operator)", "esid": " sec-new-operator-runtime-semantics-evaluation", "flags": ["generated"], "info": " |MemberExpression : new MemberExpression Arguments\n\n1. Return EvaluateNew(MemberExpression, Arguments).\n\n12.3.3.1.1 Runtime Semantics: EvaluateNew\n\n6. If arguments is empty, let argList be an empty List.\n7. Else,\na. Let argList be ArgumentListEvaluation of arguments.\n[...]\n\n12.3.6.1 Runtime Semantics: ArgumentListEvaluation\n\nArgumentList : ... AssignmentExpression\n\n1. Let list be an empty List.\n2. Let spreadRef be the result of evaluating AssignmentExpression.\n3. Let spreadObj be GetValue(spreadRef).\n4. Let iterator be GetIterator(spreadObj).\n5. ReturnIfAbrupt(iterator).\n6. Repeat\na. Let next be IteratorStep(iterator).\nb. ReturnIfAbrupt(next).\nc. If next is false, return list.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/new/spread-sngl-expr.js", "description": " Spread operator applied to AssignmentExpression as only element (`new` operator)", "esid": " sec-new-operator-runtime-semantics-evaluation", "flags": ["generated"], "info": " |MemberExpression : new MemberExpression Arguments\n\n1. Return EvaluateNew(MemberExpression, Arguments).\n\n12.3.3.1.1 Runtime Semantics: EvaluateNew\n\n6. If arguments is empty, let argList be an empty List.\n7. Else,\na. Let argList be ArgumentListEvaluation of arguments.\n[...]\n\n12.3.6.1 Runtime Semantics: ArgumentListEvaluation\n\nArgumentList : ... AssignmentExpression\n\n1. Let list be an empty List.\n2. Let spreadRef be the result of evaluating AssignmentExpression.\n3. Let spreadObj be GetValue(spreadRef).\n4. Let iterator be GetIterator(spreadObj).\n5. ReturnIfAbrupt(iterator).\n6. Repeat\na. Let next be IteratorStep(iterator).\nb. ReturnIfAbrupt(next).\nc. If next is false, return list.\nd. Let nextArg be IteratorValue(next).\ne. ReturnIfAbrupt(nextArg).\nf. Append nextArg as the last element of list.\n"}, {"path": "./test262-main/test/language/expressions/new/spread-sngl-iter.js", "description": " Spread operator applied to the only argument with a valid iterator (`new` operator)", "esid": " sec-new-operator-runtime-semantics-evaluation", "features": ["Symbol.iterator"], "flags": ["generated"], "info": " |MemberExpression : new MemberExpression Arguments\n\n1. Return EvaluateNew(MemberExpression, Arguments).\n\n12.3.3.1.1 Runtime Semantics: EvaluateNew\n\n6. If arguments is empty, let argList be an empty List.\n7. Else,\na. Let argList be ArgumentListEvaluation of arguments.\n[...]\n\n12.3.6.1 Runtime Semantics: ArgumentListEvaluation\n\nArgumentList : ... AssignmentExpression\n\n1. Let list be an empty List.\n2. Let spreadRef be the result of evaluating AssignmentExpression.\n3. Let spreadObj be GetValue(spreadRef).\n4. Let iterator be GetIterator(spreadObj).\n5. ReturnIfAbrupt(iterator).\n6. Repeat\na. Let next be IteratorStep(iterator).\nb. ReturnIfAbrupt(next).\nc. If next is false, return list.\nd. Let nextArg be IteratorValue(next).\ne. ReturnIfAbrupt(nextArg).\nf. Append nextArg as the last element of list.\n"}, {"path": "./test262-main/test/language/expressions/new/spread-sngl-literal.js", "description": " Spread operator applied to array literal as only element (`new` operator)", "esid": " sec-new-operator-runtime-semantics-evaluation", "flags": ["generated"], "info": " |MemberExpression : new MemberExpression Arguments\n\n1. Return EvaluateNew(MemberExpression, Arguments).\n\n12.3.3.1.1 Runtime Semantics: EvaluateNew\n\n6. If arguments is empty, let argList be an empty List.\n7. Else,\na. Let argList be ArgumentListEvaluation of arguments.\n[...]\n\n12.3.6.1 Runtime Semantics: ArgumentListEvaluation\n\nArgumentList : ... AssignmentExpression\n\n1. Let list be an empty List.\n2. Let spreadRef be the result of evaluating AssignmentExpression.\n3. Let spreadObj be GetValue(spreadRef).\n4. Let iterator be GetIterator(spreadObj).\n5. ReturnIfAbrupt(iterator).\n6. Repeat\na. Let next be IteratorStep(iterator).\nb. ReturnIfAbrupt(next).\nc. If next is false, return list.\nd. Let nextArg be IteratorValue(next).\ne. ReturnIfAbrupt(nextArg).\nf. Append nextArg as the last element of list.\n"}, {"path": "./test262-main/test/language/expressions/object/11.1.5_4-4-b-1.js", "version": 5, "esid": " 11.1.5_4-4-b-1", "description": " >Object literal - No SyntaxError if a data property definition is\nfollowed by get accessor definition with the same name\n"}, {"path": "./test262-main/test/language/expressions/object/__proto__-duplicate-computed.js", "esid": " B.3.1", "version": 6, "description": " >The syntax error for duplicate `__proto__` property is not valid if the duplicate is a\nComputedPropertyName\n", "info": " |B.3.1__proto__ Property Names in Object Initializers\n\nIt is a Syntax Error if PropertyNameList of PropertyDefinitionList contains any duplicate\nentries for\"__proto__\" and at least two of those entries were obtained from productions of\nthe form\nPropertyDefinition : PropertyName : AssignmentExpression .\n\n12.2.6.6 Static Semantics: PropertyNameList\n\n...\n3. Append PropName of PropertyDefinition to the end of list.\n...\n\n12.2.6.5 Static Semantics: PropName\n\nComputedPropertyName : [ AssignmentExpression ]\n1. Return empty.\n"}, {"path": "./test262-main/test/language/expressions/object/__proto__-permitted-dup-shorthand.js", "esid": " sec-object-initializer", "description": " Permitted duplicate `__proto__` property (shorthand)", "info": " |Annex B defines an early error for duplicate PropertyName of `__proto__`,\nbut this does not apply to properties created from other productions.\n\nB.3.1 __proto__ Property Names in Object Initializers\n\nIt is a Syntax Error if PropertyNameList of PropertyDefinitionList contains\nany duplicate entries for \"__proto__\" and at least two of those entries\nwere obtained from productions of the form\nPropertyDefinition : PropertyName : AssignmentExpression .\n"}, {"path": "./test262-main/test/language/expressions/object/__proto__-poisoned-object-prototype.js", "esid": " sec-__proto__-property-names-in-object-initializers", "description": " >The value of the `__proto__` property key is assigned to the [[Prototype]].\nObject.prototype.__proto__ setter should not be called.\n", "info": " |__proto__ Property Names in Object Initializers\n\nPropertyDefinition : PropertyName : AssignmentExpression\n\n[...]\n7. If isProtoSetter is true, then\na. If Type(propValue) is either Object or Null, then\ni. Return object.[[SetPrototypeOf]](propValue).\n"}, {"path": "./test262-main/test/language/expressions/object/__proto__-value-non-object.js", "esid": " B.3.1", "version": 6, "description": " >The value of the `__proto__` property key is not assigned to the\n[[Prototype]] internal slot, nor to a property named \"__proto__\" (non-Object,\nnon-null value)\n", "info": " |...\n6. If propKey is the String value \"__proto__\" and if\nIsComputedPropertyKey(propKey) is false, then\na. If Type(propValue) is either Object or Null, then\n[...]\nb. Return NormalCompletion(empty).\n", "features": ["Symbol"]}, {"path": "./test262-main/test/language/expressions/object/accessor-name-computed-err-evaluation.js", "description": " Abrupt completion when evaluating expression (Object initializer)", "esid": " sec-object-initializer-runtime-semantics-evaluation", "flags": ["generated"], "info": " |ObjectLiteral :\n{ PropertyDefinitionList }\n{ PropertyDefinitionList , }\n\n1. Let obj be ObjectCreate(%ObjectPrototype%).\n2. Let status be the result of performing PropertyDefinitionEvaluation of\nPropertyDefinitionList with arguments obj and true.\n\n12.2.6.7 Runtime Semantics: Evaluation\n\nComputedPropertyName : [ AssignmentExpression ]\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let propName be ? GetValue(exprValue).\n"}, {"path": "./test262-main/test/language/expressions/object/accessor-name-computed-err-to-prop-key.js", "description": " Abrupt completion when coercing to property key value (Object initializer)", "esid": " sec-object-initializer-runtime-semantics-evaluation", "flags": ["generated"], "info": " |ObjectLiteral :\n{ PropertyDefinitionList }\n{ PropertyDefinitionList , }\n\n1. Let obj be ObjectCreate(%ObjectPrototype%).\n2. Let status be the result of performing PropertyDefinitionEvaluation of\nPropertyDefinitionList with arguments obj and true.\n\n12.2.6.7 Runtime Semantics: Evaluation\n\n[...]\n\nComputedPropertyName : [ AssignmentExpression ]\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let propName be ? GetValue(exprValue).\n3. Return ? ToPropertyKey(propName).\n\n7.1.14 ToPropertyKey\n\n1. Let key be ? ToPrimitive(argument, hint String).\n\n7.1.1 ToPrimitive\n\n[...]\n7. Return ? OrdinaryToPrimitive(input, hint).\n\n7.1.1.1 OrdinaryToPrimitive\n\n5. For each name in methodNames in List order, do\n[...]\n6. Throw a TypeError exception.\n"}, {"path": "./test262-main/test/language/expressions/object/accessor-name-computed-err-unresolvable.js", "description": " Abrupt completion when resolving reference value (Object initializer)", "esid": " sec-object-initializer-runtime-semantics-evaluation", "flags": ["generated"], "info": " |ObjectLiteral :\n{ PropertyDefinitionList }\n{ PropertyDefinitionList , }\n\n1. Let obj be ObjectCreate(%ObjectPrototype%).\n2. Let status be the result of performing PropertyDefinitionEvaluation of\nPropertyDefinitionList with arguments obj and true.\n\n12.2.6.7 Runtime Semantics: Evaluation\n\n[...]\n\nComputedPropertyName : [ AssignmentExpression ]\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let propName be ? GetValue(exprValue).\n"}, {"path": "./test262-main/test/language/expressions/object/accessor-name-computed-in.js", "esid": " 12.2.6.8", "version": 6, "description": " >AssignmentExpression may contain `in` keyword regardless of outer context\n", "info": " |12.2.6.7 Runtime Semantics: Evaluation\n\n[...]\n\nComputedPropertyName : [ AssignmentExpression ]\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let propName be ? GetValue(exprValue).\n3. Return ? ToPropertyKey(propName).\n"}, {"path": "./test262-main/test/language/expressions/object/accessor-name-computed-yield-expr.js", "esid": " 12.2.6.8", "version": 6, "description": " >The `yield` keyword behaves as a YieldExpression within a generator function\n", "info": " |12.2.6.7 Runtime Semantics: Evaluation\n\n[...]\n\nComputedPropertyName : [ AssignmentExpression ]\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let propName be ? GetValue(exprValue).\n3. Return ? ToPropertyKey(propName).\n", "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/object/accessor-name-computed.js", "description": " Computed values as accessor property names (AssignmentExpression) (Object initializer)", "esid": " sec-object-initializer-runtime-semantics-evaluation", "flags": ["generated"], "info": " |ObjectLiteral :\n{ PropertyDefinitionList }\n{ PropertyDefinitionList , }\n\n1. Let obj be ObjectCreate(%ObjectPrototype%).\n2. Let status be the result of performing PropertyDefinitionEvaluation of\nPropertyDefinitionList with arguments obj and true.\n\n12.2.6.7 Runtime Semantics: Evaluation\n\n[...]\n\nComputedPropertyName : [ AssignmentExpression ]\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let propName be ? GetValue(exprValue).\n3. Return ? ToPropertyKey(propName).\n"}, {"path": "./test262-main/test/language/expressions/object/accessor-name-literal-numeric-binary.js", "description": " Computed values as accessor property names (numeric literal in binary notation) (Object initializer)", "esid": " sec-object-initializer-runtime-semantics-evaluation", "flags": ["generated"], "info": " |ObjectLiteral :\n{ PropertyDefinitionList }\n{ PropertyDefinitionList , }\n\n1. Let obj be ObjectCreate(%ObjectPrototype%).\n2. Let status be the result of performing PropertyDefinitionEvaluation of\nPropertyDefinitionList with arguments obj and true.\n\n12.2.6.7 Runtime Semantics: Evaluation\n\n[...]\n\nComputedPropertyName : [ AssignmentExpression ]\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let propName be ? GetValue(exprValue).\n3. Return ? ToPropertyKey(propName).\n"}, {"path": "./test262-main/test/language/expressions/object/accessor-name-literal-numeric-exponent.js", "description": " Computed values as accessor property names (numeric literal in exponent notation) (Object initializer)", "esid": " sec-object-initializer-runtime-semantics-evaluation", "flags": ["generated"], "info": " |ObjectLiteral :\n{ PropertyDefinitionList }\n{ PropertyDefinitionList , }\n\n1. Let obj be ObjectCreate(%ObjectPrototype%).\n2. Let status be the result of performing PropertyDefinitionEvaluation of\nPropertyDefinitionList with arguments obj and true.\n\n12.2.6.7 Runtime Semantics: Evaluation\n\n[...]\n\nComputedPropertyName : [ AssignmentExpression ]\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let propName be ? GetValue(exprValue).\n3. Return ? ToPropertyKey(propName).\n"}, {"path": "./test262-main/test/language/expressions/object/accessor-name-literal-numeric-hex.js", "description": " Computed values as accessor property names (numeric literal in hexadecimal notation) (Object initializer)", "esid": " sec-object-initializer-runtime-semantics-evaluation", "flags": ["generated"], "info": " |ObjectLiteral :\n{ PropertyDefinitionList }\n{ PropertyDefinitionList , }\n\n1. Let obj be ObjectCreate(%ObjectPrototype%).\n2. Let status be the result of performing PropertyDefinitionEvaluation of\nPropertyDefinitionList with arguments obj and true.\n\n12.2.6.7 Runtime Semantics: Evaluation\n\n[...]\n\nComputedPropertyName : [ AssignmentExpression ]\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let propName be ? GetValue(exprValue).\n3. Return ? ToPropertyKey(propName).\n"}, {"path": "./test262-main/test/language/expressions/object/accessor-name-literal-numeric-leading-decimal.js", "description": " Computed values as accessor property names (numeric literal with leading decimal point) (Object initializer)", "esid": " sec-object-initializer-runtime-semantics-evaluation", "flags": ["generated"], "info": " |ObjectLiteral :\n{ PropertyDefinitionList }\n{ PropertyDefinitionList , }\n\n1. Let obj be ObjectCreate(%ObjectPrototype%).\n2. Let status be the result of performing PropertyDefinitionEvaluation of\nPropertyDefinitionList with arguments obj and true.\n\n12.2.6.7 Runtime Semantics: Evaluation\n\n[...]\n\nComputedPropertyName : [ AssignmentExpression ]\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let propName be ? GetValue(exprValue).\n3. Return ? ToPropertyKey(propName).\n"}, {"path": "./test262-main/test/language/expressions/object/accessor-name-literal-numeric-non-canonical.js", "description": " Computed values as accessor property names (numeric literal with non-canonical representation) (Object initializer)", "esid": " sec-object-initializer-runtime-semantics-evaluation", "flags": ["generated"], "info": " |ObjectLiteral :\n{ PropertyDefinitionList }\n{ PropertyDefinitionList , }\n\n1. Let obj be ObjectCreate(%ObjectPrototype%).\n2. Let status be the result of performing PropertyDefinitionEvaluation of\nPropertyDefinitionList with arguments obj and true.\n\n12.2.6.7 Runtime Semantics: Evaluation\n\n[...]\n\nComputedPropertyName : [ AssignmentExpression ]\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let propName be ? GetValue(exprValue).\n3. Return ? ToPropertyKey(propName).\n"}, {"path": "./test262-main/test/language/expressions/object/accessor-name-literal-numeric-octal.js", "description": " Computed values as accessor property names (numeric literal in octal notation) (Object initializer)", "esid": " sec-object-initializer-runtime-semantics-evaluation", "flags": ["generated"], "info": " |ObjectLiteral :\n{ PropertyDefinitionList }\n{ PropertyDefinitionList , }\n\n1. Let obj be ObjectCreate(%ObjectPrototype%).\n2. Let status be the result of performing PropertyDefinitionEvaluation of\nPropertyDefinitionList with arguments obj and true.\n\n12.2.6.7 Runtime Semantics: Evaluation\n\n[...]\n\nComputedPropertyName : [ AssignmentExpression ]\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let propName be ? GetValue(exprValue).\n3. Return ? ToPropertyKey(propName).\n"}, {"path": "./test262-main/test/language/expressions/object/accessor-name-literal-numeric-zero.js", "description": " Computed values as accessor property names (numeric literal zero) (Object initializer)", "esid": " sec-object-initializer-runtime-semantics-evaluation", "flags": ["generated"], "info": " |ObjectLiteral :\n{ PropertyDefinitionList }\n{ PropertyDefinitionList , }\n\n1. Let obj be ObjectCreate(%ObjectPrototype%).\n2. Let status be the result of performing PropertyDefinitionEvaluation of\nPropertyDefinitionList with arguments obj and true.\n\n12.2.6.7 Runtime Semantics: Evaluation\n\n[...]\n\nComputedPropertyName : [ AssignmentExpression ]\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let propName be ? GetValue(exprValue).\n3. Return ? ToPropertyKey(propName).\n"}, {"path": "./test262-main/test/language/expressions/object/accessor-name-literal-string-char-escape.js", "description": " Computed values as accessor property names (string literal containing a character escape sequence) (Object initializer)", "esid": " sec-object-initializer-runtime-semantics-evaluation", "flags": ["generated"], "info": " |ObjectLiteral :\n{ PropertyDefinitionList }\n{ PropertyDefinitionList , }\n\n1. Let obj be ObjectCreate(%ObjectPrototype%).\n2. Let status be the result of performing PropertyDefinitionEvaluation of\nPropertyDefinitionList with arguments obj and true.\n\n12.2.6.7 Runtime Semantics: Evaluation\n\n[...]\n\nComputedPropertyName : [ AssignmentExpression ]\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let propName be ? GetValue(exprValue).\n3. Return ? ToPropertyKey(propName).\n"}, {"path": "./test262-main/test/language/expressions/object/accessor-name-literal-string-default-escaped.js", "description": " Computed values as accessor property names (string literal 'default' escaped) (Object initializer)", "esid": " sec-object-initializer-runtime-semantics-evaluation", "flags": ["generated"], "info": " |ObjectLiteral :\n{ PropertyDefinitionList }\n{ PropertyDefinitionList , }\n\n1. Let obj be ObjectCreate(%ObjectPrototype%).\n2. Let status be the result of performing PropertyDefinitionEvaluation of\nPropertyDefinitionList with arguments obj and true.\n\n12.2.6.7 Runtime Semantics: Evaluation\n\n[...]\n\nComputedPropertyName : [ AssignmentExpression ]\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let propName be ? GetValue(exprValue).\n3. Return ? ToPropertyKey(propName).\n"}, {"path": "./test262-main/test/language/expressions/object/accessor-name-literal-string-default.js", "description": " Computed values as accessor property names (string literal 'default') (Object initializer)", "esid": " sec-object-initializer-runtime-semantics-evaluation", "flags": ["generated"], "info": " |ObjectLiteral :\n{ PropertyDefinitionList }\n{ PropertyDefinitionList , }\n\n1. Let obj be ObjectCreate(%ObjectPrototype%).\n2. Let status be the result of performing PropertyDefinitionEvaluation of\nPropertyDefinitionList with arguments obj and true.\n\n12.2.6.7 Runtime Semantics: Evaluation\n\n[...]\n\nComputedPropertyName : [ AssignmentExpression ]\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let propName be ? GetValue(exprValue).\n3. Return ? ToPropertyKey(propName).\n"}, {"path": "./test262-main/test/language/expressions/object/accessor-name-literal-string-double-quote.js", "description": " Computed values as accessor property names (string literal using double quotes) (Object initializer)", "esid": " sec-object-initializer-runtime-semantics-evaluation", "flags": ["generated"], "info": " |ObjectLiteral :\n{ PropertyDefinitionList }\n{ PropertyDefinitionList , }\n\n1. Let obj be ObjectCreate(%ObjectPrototype%).\n2. Let status be the result of performing PropertyDefinitionEvaluation of\nPropertyDefinitionList with arguments obj and true.\n\n12.2.6.7 Runtime Semantics: Evaluation\n\n[...]\n\nComputedPropertyName : [ AssignmentExpression ]\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let propName be ? GetValue(exprValue).\n3. Return ? ToPropertyKey(propName).\n"}, {"path": "./test262-main/test/language/expressions/object/accessor-name-literal-string-empty.js", "description": " Computed values as accessor property names (string literal, the empty string) (Object initializer)", "esid": " sec-object-initializer-runtime-semantics-evaluation", "flags": ["generated"], "info": " |ObjectLiteral :\n{ PropertyDefinitionList }\n{ PropertyDefinitionList , }\n\n1. Let obj be ObjectCreate(%ObjectPrototype%).\n2. Let status be the result of performing PropertyDefinitionEvaluation of\nPropertyDefinitionList with arguments obj and true.\n\n12.2.6.7 Runtime Semantics: Evaluation\n\n[...]\n\nComputedPropertyName : [ AssignmentExpression ]\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let propName be ? GetValue(exprValue).\n3. Return ? ToPropertyKey(propName).\n"}, {"path": "./test262-main/test/language/expressions/object/accessor-name-literal-string-hex-escape.js", "description": " Computed values as accessor property names (string literal containing a hexadecimal escape sequence) (Object initializer)", "esid": " sec-object-initializer-runtime-semantics-evaluation", "flags": ["generated"], "info": " |ObjectLiteral :\n{ PropertyDefinitionList }\n{ PropertyDefinitionList , }\n\n1. Let obj be ObjectCreate(%ObjectPrototype%).\n2. Let status be the result of performing PropertyDefinitionEvaluation of\nPropertyDefinitionList with arguments obj and true.\n\n12.2.6.7 Runtime Semantics: Evaluation\n\n[...]\n\nComputedPropertyName : [ AssignmentExpression ]\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let propName be ? GetValue(exprValue).\n3. Return ? ToPropertyKey(propName).\n"}, {"path": "./test262-main/test/language/expressions/object/accessor-name-literal-string-line-continuation.js", "description": " Computed values as accessor property names (string literal containing LineContinuation) (Object initializer)", "esid": " sec-object-initializer-runtime-semantics-evaluation", "flags": ["generated"], "info": " |ObjectLiteral :\n{ PropertyDefinitionList }\n{ PropertyDefinitionList , }\n\n1. Let obj be ObjectCreate(%ObjectPrototype%).\n2. Let status be the result of performing PropertyDefinitionEvaluation of\nPropertyDefinitionList with arguments obj and true.\n\n12.2.6.7 Runtime Semantics: Evaluation\n\n[...]\n\nComputedPropertyName : [ AssignmentExpression ]\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let propName be ? GetValue(exprValue).\n3. Return ? ToPropertyKey(propName).\n"}, {"path": "./test262-main/test/language/expressions/object/accessor-name-literal-string-single-quote.js", "description": " Computed values as accessor property names (string literal using single quotes) (Object initializer)", "esid": " sec-object-initializer-runtime-semantics-evaluation", "flags": ["generated"], "info": " |ObjectLiteral :\n{ PropertyDefinitionList }\n{ PropertyDefinitionList , }\n\n1. Let obj be ObjectCreate(%ObjectPrototype%).\n2. Let status be the result of performing PropertyDefinitionEvaluation of\nPropertyDefinitionList with arguments obj and true.\n\n12.2.6.7 Runtime Semantics: Evaluation\n\n[...]\n\nComputedPropertyName : [ AssignmentExpression ]\n\n1. Let exprValue be the result of evaluating AssignmentExpression.\n2. Let propName be ? GetValue(exprValue).\n3. Return ? ToPropertyKey(propName).\n"}, {"path": "./test262-main/test/language/expressions/object/computed-__proto__.js", "esid": " prod-PropertyDefinition", "description": " >computed __proto__ property key is assigned to an own property\n", "info": " |12.2.6 Object Initializer\n\nPropertyDefinition[Yield, Await] :\nPropertyName[?Yield, ?Await] : AssignmentExpression[+In, ?Yield, ?Await]\n\nPropertyName[Yield, Await] :\nLiteralPropertyName\nComputedPropertyName[?Yield, ?Await]\n\nComputedPropertyName[Yield, Await] :\n[ AssignmentExpression[+In, ?Yield, ?Await] ]\n\nB.3.1__proto__ Property Names in Object Initializers\n\n...\n5. If propKey is the String value \"__proto__\" and if IsComputedPropertyKey(propKey)\nis false, then\na. If Type(propValue) is either Object or Null, then\ni. Return object.[[SetPrototypeOf]](propValue).\nb. Return NormalCompletion(empty).\n", "features": ["Symbol"]}, {"path": "./test262-main/test/language/expressions/object/computed-property-evaluation-order.js", "esid": " sec-object-initializer-runtime-semantics-propertydefinitionevaluation", "description": " >Evaluation of PropertyDefinitionList occurs in order, and each\nPropertyDefinition's PropertyName is evaluated before its\nAssignmentExpression.\n"}, {"path": "./test262-main/test/language/expressions/object/cpn-obj-lit-computed-property-name-from-additive-expression-add.js", "description": " Computed property name from additive expression \"add\" (ComputedPropertyName in ObjectLiteral)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names"], "flags": ["generated"], "info": " |ObjectLiteral:\n{ PropertyDefinitionList }\n\nPropertyDefinitionList:\nPropertyDefinition\n\nPropertyDefinition:\nPropertyName: AssignmentExpression\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/object/cpn-obj-lit-computed-property-name-from-additive-expression-subtract.js", "description": " Computed property name from additive expression \"subtract\" (ComputedPropertyName in ObjectLiteral)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names"], "flags": ["generated"], "info": " |ObjectLiteral:\n{ PropertyDefinitionList }\n\nPropertyDefinitionList:\nPropertyDefinition\n\nPropertyDefinition:\nPropertyName: AssignmentExpression\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/object/cpn-obj-lit-computed-property-name-from-arrow-function-expression.js", "description": " Computed property name from arrow function (ComputedPropertyName in ObjectLiteral)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names"], "flags": ["generated"], "info": " |ObjectLiteral:\n{ PropertyDefinitionList }\n\nPropertyDefinitionList:\nPropertyDefinition\n\nPropertyDefinition:\nPropertyName: AssignmentExpression\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/object/cpn-obj-lit-computed-property-name-from-assignment-expression-assignment.js", "description": " Computed property name from assignment expression (ComputedPropertyName in ObjectLiteral)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names"], "flags": ["generated"], "info": " |ObjectLiteral:\n{ PropertyDefinitionList }\n\nPropertyDefinitionList:\nPropertyDefinition\n\nPropertyDefinition:\nPropertyName: AssignmentExpression\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/object/cpn-obj-lit-computed-property-name-from-assignment-expression-bitwise-or.js", "description": " Computed property name from assignment expression bitwise or (ComputedPropertyName in ObjectLiteral)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names"], "flags": ["generated"], "info": " |ObjectLiteral:\n{ PropertyDefinitionList }\n\nPropertyDefinitionList:\nPropertyDefinition\n\nPropertyDefinition:\nPropertyName: AssignmentExpression\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/object/cpn-obj-lit-computed-property-name-from-condition-expression-false.js", "description": " Computed property name from condition expression (ComputedPropertyName in ObjectLiteral)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names"], "flags": ["generated"], "info": " |ObjectLiteral:\n{ PropertyDefinitionList }\n\nPropertyDefinitionList:\nPropertyDefinition\n\nPropertyDefinition:\nPropertyName: AssignmentExpression\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/object/cpn-obj-lit-computed-property-name-from-condition-expression-true.js", "description": " Computed property name from condition expression (ComputedPropertyName in ObjectLiteral)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names"], "flags": ["generated"], "info": " |ObjectLiteral:\n{ PropertyDefinitionList }\n\nPropertyDefinitionList:\nPropertyDefinition\n\nPropertyDefinition:\nPropertyName: AssignmentExpression\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/object/cpn-obj-lit-computed-property-name-from-decimal-e-notational-literal.js", "description": " Computed property name from decimal e notational literal (ComputedPropertyName in ObjectLiteral)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names"], "flags": ["generated"], "info": " |ObjectLiteral:\n{ PropertyDefinitionList }\n\nPropertyDefinitionList:\nPropertyDefinition\n\nPropertyDefinition:\nPropertyName: AssignmentExpression\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/object/cpn-obj-lit-computed-property-name-from-decimal-literal.js", "description": " Computed property name from decimal literal (ComputedPropertyName in ObjectLiteral)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names"], "flags": ["generated"], "info": " |ObjectLiteral:\n{ PropertyDefinitionList }\n\nPropertyDefinitionList:\nPropertyDefinition\n\nPropertyDefinition:\nPropertyName: AssignmentExpression\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/object/cpn-obj-lit-computed-property-name-from-expression-logical-and.js", "description": " Computed property name from logical and (ComputedPropertyName in ObjectLiteral)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names"], "flags": ["generated"], "info": " |ObjectLiteral:\n{ PropertyDefinitionList }\n\nPropertyDefinitionList:\nPropertyDefinition\n\nPropertyDefinition:\nPropertyName: AssignmentExpression\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/object/cpn-obj-lit-computed-property-name-from-expression-logical-or.js", "description": " Computed property name from logical or (ComputedPropertyName in ObjectLiteral)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names"], "flags": ["generated"], "info": " |ObjectLiteral:\n{ PropertyDefinitionList }\n\nPropertyDefinitionList:\nPropertyDefinition\n\nPropertyDefinition:\nPropertyName: AssignmentExpression\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/object/cpn-obj-lit-computed-property-name-from-function-declaration.js", "description": " Computed property name from function (ComputedPropertyName in ObjectLiteral)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names"], "flags": ["generated"], "info": " |ObjectLiteral:\n{ PropertyDefinitionList }\n\nPropertyDefinitionList:\nPropertyDefinition\n\nPropertyDefinition:\nPropertyName: AssignmentExpression\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/object/cpn-obj-lit-computed-property-name-from-function-expression.js", "description": " Computed property name from function expression (ComputedPropertyName in ObjectLiteral)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names"], "flags": ["generated"], "info": " |ObjectLiteral:\n{ PropertyDefinitionList }\n\nPropertyDefinitionList:\nPropertyDefinition\n\nPropertyDefinition:\nPropertyName: AssignmentExpression\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/object/cpn-obj-lit-computed-property-name-from-generator-function-declaration.js", "description": " Computed property name from generator function (ComputedPropertyName in ObjectLiteral)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names"], "flags": ["generated"], "info": " |ObjectLiteral:\n{ PropertyDefinitionList }\n\nPropertyDefinitionList:\nPropertyDefinition\n\nPropertyDefinition:\nPropertyName: AssignmentExpression\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/object/cpn-obj-lit-computed-property-name-from-identifier.js", "description": " Computed property name from string literal (ComputedPropertyName in ObjectLiteral)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names"], "flags": ["generated"], "info": " |ObjectLiteral:\n{ PropertyDefinitionList }\n\nPropertyDefinitionList:\nPropertyDefinition\n\nPropertyDefinition:\nPropertyName: AssignmentExpression\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/object/cpn-obj-lit-computed-property-name-from-integer-e-notational-literal.js", "description": " Computed property name from numeric literal (ComputedPropertyName in ObjectLiteral)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names"], "flags": ["generated"], "info": " |ObjectLiteral:\n{ PropertyDefinitionList }\n\nPropertyDefinitionList:\nPropertyDefinition\n\nPropertyDefinition:\nPropertyName: AssignmentExpression\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/object/cpn-obj-lit-computed-property-name-from-multiplicative-expression-div.js", "description": " Computed property name from multiplicative expression \"divide\" (ComputedPropertyName in ObjectLiteral)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names"], "flags": ["generated"], "info": " |ObjectLiteral:\n{ PropertyDefinitionList }\n\nPropertyDefinitionList:\nPropertyDefinition\n\nPropertyDefinition:\nPropertyName: AssignmentExpression\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/object/cpn-obj-lit-computed-property-name-from-multiplicative-expression-mult.js", "description": " Computed property name from multiplicative expression \"multiply\" (ComputedPropertyName in ObjectLiteral)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names"], "flags": ["generated"], "info": " |ObjectLiteral:\n{ PropertyDefinitionList }\n\nPropertyDefinitionList:\nPropertyDefinition\n\nPropertyDefinition:\nPropertyName: AssignmentExpression\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/object/cpn-obj-lit-computed-property-name-from-null.js", "description": " Computed property name from condition expression (ComputedPropertyName in ObjectLiteral)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names"], "flags": ["generated"], "info": " |ObjectLiteral:\n{ PropertyDefinitionList }\n\nPropertyDefinitionList:\nPropertyDefinition\n\nPropertyDefinition:\nPropertyName: AssignmentExpression\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/object/cpn-obj-lit-computed-property-name-from-numeric-literal.js", "description": " Computed property name from numeric literal (ComputedPropertyName in ObjectLiteral)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names"], "flags": ["generated"], "info": " |ObjectLiteral:\n{ PropertyDefinitionList }\n\nPropertyDefinitionList:\nPropertyDefinition\n\nPropertyDefinition:\nPropertyName: AssignmentExpression\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/object/cpn-obj-lit-computed-property-name-from-string-literal.js", "description": " Computed property name from string literal (ComputedPropertyName in ObjectLiteral)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names"], "flags": ["generated"], "info": " |ObjectLiteral:\n{ PropertyDefinitionList }\n\nPropertyDefinitionList:\nPropertyDefinition\n\nPropertyDefinition:\nPropertyName: AssignmentExpression\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/object/cpn-obj-lit-computed-property-name-from-yield-expression.js", "description": " Computed property name from yield expression (ComputedPropertyName in ObjectLiteral)", "esid": " prod-ComputedPropertyName", "features": ["computed-property-names"], "flags": ["generated"], "info": " |ObjectLiteral:\n{ PropertyDefinitionList }\n\nPropertyDefinitionList:\nPropertyDefinition\n\nPropertyDefinition:\nPropertyName: AssignmentExpression\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-ary-init-iter-get-err-array-prototype.js", "description": " Abrupt completion returned by GetIterator (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\nRuntime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iteratorRecord be ? GetIterator(value).\n\nGetIterator ( obj [ , hint [ , method ] ] )\n\n[...]\n4. Let iterator be ? Call(method, obj).\n\nCall ( F, V [ , argumentsList ] )\n\n[...]\n2. If IsCallable(F) is false, throw a TypeError exception.\n\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-ary-init-iter-get-err.js", "description": " Abrupt completion returned by GetIterator (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iterator be GetIterator(value).\n2. ReturnIfAbrupt(iterator).\n\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-ary-init-iter-no-close.js", "description": " Iterator is not closed when exhausted by pattern evaluation (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n[...]\n4. If iteratorRecord.[[done]] is false, return ? IteratorClose(iterator,\nresult).\n[...]\n\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-ary-name-iter-val.js", "description": " SingleNameBinding with normal value iteration (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\nd. If next is false, set iteratorRecord.[[done]] to true.\ne. Else,\n[...]\ni. Let v be IteratorValue(next).\nii. If v is an abrupt completion, set\niteratorRecord.[[done]] to true.\niii. ReturnIfAbrupt(v).\n5. If iteratorRecord.[[done]] is true, let v be undefined.\n[...]\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-ary-ptrn-elem-ary-elem-init.js", "description": " BindingElement with array binding pattern and initializer is used (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-ary-ptrn-elem-ary-elem-iter.js", "description": " BindingElement with array binding pattern and initializer is not used (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\n[...]\ne. Else,\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-ary-ptrn-elem-ary-elision-init.js", "description": " BindingElement with array binding pattern and initializer is used (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-ary-ptrn-elem-ary-elision-iter.js", "description": " BindingElement with array binding pattern and initializer is not used (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\n[...]\ne. Else,\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-ary-ptrn-elem-ary-empty-init.js", "description": " BindingElement with array binding pattern and initializer is used (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-ary-ptrn-elem-ary-empty-iter.js", "description": " BindingElement with array binding pattern and initializer is not used (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\n[...]\ne. Else,\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-ary-ptrn-elem-ary-rest-init.js", "description": " BindingElement with array binding pattern and initializer is used (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-ary-ptrn-elem-ary-rest-iter.js", "description": " BindingElement with array binding pattern and initializer is not used (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\n[...]\ne. Else,\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-ary-ptrn-elem-ary-val-null.js", "description": " Nested array destructuring with a null value (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. If iteratorRecord.[[done]] is false, then\n[...]\ne. Else\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iterator be GetIterator(value).\n2. ReturnIfAbrupt(iterator).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-ary-ptrn-elem-id-init-exhausted.js", "description": " Destructuring initializer with an exhausted iterator (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n5. If iteratorRecord.[[done]] is true, let v be undefined.\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-ary-ptrn-elem-id-init-hole.js", "description": " Destructuring initializer with a \"hole\" (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nSingleNameBinding : BindingIdentifier Initializeropt\n[...] 6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\n[...]\n7. If environment is undefined, return PutValue(lhs, v). 8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-ary-ptrn-elem-id-init-skipped.js", "description": " Destructuring initializer is not evaluated when value is not `undefined` (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-ary-ptrn-elem-id-init-throws.js", "description": " Destructuring initializer returns an abrupt completion (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-ary-ptrn-elem-id-init-undef.js", "description": " Destructuring initializer with an undefined value (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-ary-ptrn-elem-id-init-unresolvable.js", "description": " Destructuring initializer is an unresolvable reference (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-ary-ptrn-elem-id-iter-complete.js", "description": " SingleNameBinding when value iteration completes (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\nd. If next is false, set iteratorRecord.[[done]] to true.\ne. Else,\n[...]\n5. If iteratorRecord.[[done]] is true, let v be undefined.\n[...]\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-ary-ptrn-elem-id-iter-done.js", "description": " SingleNameBinding when value iteration was completed previously (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\n[...]\n5. If iteratorRecord.[[done]] is true, let v be undefined.\n[...]\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-ary-ptrn-elem-id-iter-step-err.js", "description": " Error forwarding when IteratorStep returns an abrupt completion (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-ary-ptrn-elem-id-iter-val-array-prototype.js", "description": " Array destructuring uses overriden Array.prototype[Symbol.iterator] (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\nRuntime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializer_opt\n\n1. Let bindingId be StringValue of BindingIdentifier.\n2. Let lhs be ? ResolveBinding(bindingId, environment).\n3. If iteratorRecord.[[Done]] is false, then\na. Let next be IteratorStep(iteratorRecord).\nb. If next is an abrupt completion, set iteratorRecord.[[Done]] to true.\nc. ReturnIfAbrupt(next).\nd. If next is false, set iteratorRecord.[[Done]] to true.\ne. Else,\ni. Let v be IteratorValue(next).\nii. If v is an abrupt completion, set iteratorRecord.[[Done]] to true.\niii. ReturnIfAbrupt(v).\n[...]\n7. Return InitializeReferencedBinding(lhs, v).\n\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-ary-ptrn-elem-id-iter-val-err.js", "description": " Error forwarding when IteratorValue returns an abrupt completion (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\nd. If next is false, set iteratorRecord.[[done]] to true.\ne. Else,\ni. Let v be IteratorValue(next).\nii. If v is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\niii. ReturnIfAbrupt(v).\n\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-ary-ptrn-elem-id-iter-val.js", "description": " SingleNameBinding when value iteration was completed previously (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\nd. If next is false, set iteratorRecord.[[done]] to true.\ne. Else,\n[...]\ni. Let v be IteratorValue(next).\nii. If v is an abrupt completion, set\niteratorRecord.[[done]] to true.\niii. ReturnIfAbrupt(v).\n5. If iteratorRecord.[[done]] is true, let v be undefined.\n[...]\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-ary-ptrn-elem-obj-id-init.js", "description": " BindingElement with object binding pattern and initializer is used (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-ary-ptrn-elem-obj-id.js", "description": " BindingElement with object binding pattern and initializer is not used (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-ary-ptrn-elem-obj-prop-id-init.js", "description": " BindingElement with object binding pattern and initializer is used (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-ary-ptrn-elem-obj-prop-id.js", "description": " BindingElement with object binding pattern and initializer is not used (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-ary-ptrn-elem-obj-val-null.js", "description": " Nested object destructuring with a null value (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. If iteratorRecord.[[done]] is false, then\n[...]\ne. Else\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ObjectBindingPattern\n\n1. Let valid be RequireObjectCoercible(value).\n2. ReturnIfAbrupt(valid).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-ary-ptrn-elem-obj-val-undef.js", "description": " Nested object destructuring with a value of `undefined` (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. If iteratorRecord.[[done]] is false, then\n[...]\ne. Else\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ObjectBindingPattern\n\n1. Let valid be RequireObjectCoercible(value).\n2. ReturnIfAbrupt(valid).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-ary-ptrn-elision-exhausted.js", "description": " Elision accepts exhausted iterator (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ Elision ]\n\n1. Return the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with iteratorRecord\nas the argument.\n\n12.14.5.3 Runtime Semantics: IteratorDestructuringAssignmentEvaluation\n\nElision : ,\n\n1. If iteratorRecord.[[done]] is false, then\n[...]\n2. Return NormalCompletion(empty).\n\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-ary-ptrn-elision-step-err.js", "description": " Elision advances iterator and forwards abrupt completions (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ Elision ]\n\n1. Return the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with iteratorRecord\nas the argument.\n\n12.14.5.3 Runtime Semantics: IteratorDestructuringAssignmentEvaluation\n\nElision : ,\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-ary-ptrn-elision.js", "description": " Elision advances iterator (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ Elision ]\n\n1. Return the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with iteratorRecord\nas the argument.\n\n12.14.5.3 Runtime Semantics: IteratorDestructuringAssignmentEvaluation\n\nElision : ,\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\nd. If next is false, set iteratorRecord.[[done]] to true.\n2. Return NormalCompletion(empty).\n\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-ary-ptrn-empty.js", "description": " No iteration occurs for an \"empty\" array binding pattern (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ ]\n\n1. Return NormalCompletion(empty).\n\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-ary-ptrn-rest-id-direct.js", "description": " Lone rest element (direct binding) (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "includes": ["compareArray.js"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\nRuntime Semantics: IteratorBindingInitialization\n\nBindingRestElement : ... BindingIdentifier\n\n[...]\n2. Let A be ! ArrayCreate(0).\n3. Let n be 0.\n4. Repeat,\n[...]\nf. Perform ! CreateDataPropertyOrThrow(A, ! ToString(n), nextValue).\ng. Set n to n + 1.\n\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-ary-ptrn-rest-id-elision-next-err.js", "description": " Rest element following elision elements (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nArrayBindingPattern : [ Elisionopt BindingRestElement ]\n1. If Elision is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with\niteratorRecord as the argument.\nb. ReturnIfAbrupt(status).\n2. Return the result of performing IteratorBindingInitialization for\nBindingRestElement with iteratorRecord and environment as arguments.\n\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-ary-ptrn-rest-id-elision.js", "description": " Rest element following elision elements (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nArrayBindingPattern : [ Elisionopt BindingRestElement ]\n1. If Elision is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with\niteratorRecord as the argument.\nb. ReturnIfAbrupt(status).\n2. Return the result of performing IteratorBindingInitialization for\nBindingRestElement with iteratorRecord and environment as arguments.\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-ary-ptrn-rest-id-exhausted.js", "description": " RestElement applied to an exhausted iterator (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\n[...]\nb. If iteratorRecord.[[done]] is true, then\ni. If environment is undefined, return PutValue(lhs, A).\nii. Return InitializeReferencedBinding(lhs, A).\n\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-ary-ptrn-rest-id-iter-step-err.js", "description": " Error forwarding when IteratorStep returns an abrupt completion (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\na. If iteratorRecord.[[done]] is false,\ni. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nii. If next is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\niii. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-ary-ptrn-rest-id-iter-val-err.js", "description": " Error forwarding when IteratorValue returns an abrupt completion (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\n[...]\nc. Let nextValue be IteratorValue(next).\nd. If nextValue is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\ne. ReturnIfAbrupt(nextValue).\n\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-ary-ptrn-rest-id.js", "description": " Lone rest element (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n[...] 3. Let A be ArrayCreate(0). [...] 5. Repeat\n[...]\nf. Let status be CreateDataProperty(A, ToString (n), nextValue).\n[...]\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-obj-ptrn-empty.js", "description": " No property access occurs for an \"empty\" object binding pattern (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\nRuntime Semantics: BindingInitialization\n\nObjectBindingPattern : { }\n\n1. Return NormalCompletion(empty).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-obj-ptrn-id-get-value-err.js", "description": " Error thrown when accessing the corresponding property of the value object (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. Let v be GetV(value, propertyName).\n5. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-obj-ptrn-id-trailing-comma.js", "description": " Trailing comma is allowed following BindingPropertyList (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3 Destructuring Binding Patterns\n\nObjectBindingPattern[Yield] :\n{ }\n{ BindingPropertyList[?Yield] }\n{ BindingPropertyList[?Yield] , }\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-obj-ptrn-prop-ary-init.js", "description": " Object binding pattern with \"nested\" array binding pattern using initializer (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-obj-ptrn-prop-ary-trailing-comma.js", "description": " Trailing comma is allowed following BindingPropertyList (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3 Destructuring Binding Patterns\n\nObjectBindingPattern[Yield] :\n{ }\n{ BindingPropertyList[?Yield] }\n{ BindingPropertyList[?Yield] , }\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-obj-ptrn-prop-ary-value-null.js", "description": " Object binding pattern with \"nested\" array binding pattern taking the `null` value (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-obj-ptrn-prop-ary.js", "description": " Object binding pattern with \"nested\" array binding pattern not using initializer (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-obj-ptrn-prop-eval-err.js", "description": " Evaluation of property name returns an abrupt completion (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingProperty : PropertyName : BindingElement\n\n1. Let P be the result of evaluating PropertyName\n2. ReturnIfAbrupt(P).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-obj-ptrn-prop-id-get-value-err.js", "description": " Error thrown when accessing the corresponding property of the value object (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. Let v be GetV(value, propertyName).\n2. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-obj-ptrn-prop-id-init-skipped.js", "description": " Destructuring initializer is not evaluated when value is not `undefined` (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-obj-ptrn-prop-id-init-throws.js", "description": " Error thrown when evaluating the initializer (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-obj-ptrn-prop-id-init-unresolvable.js", "description": " Destructuring initializer is an unresolvable reference (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-obj-ptrn-prop-id-init.js", "description": " Binding as specified via property name, identifier, and initializer (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-obj-ptrn-prop-id-trailing-comma.js", "description": " Trailing comma is allowed following BindingPropertyList (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3 Destructuring Binding Patterns\n\nObjectBindingPattern[Yield] :\n{ }\n{ BindingPropertyList[?Yield] }\n{ BindingPropertyList[?Yield] , }\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-obj-ptrn-prop-id.js", "description": " Binding as specified via property name and identifier (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-obj-ptrn-prop-obj-init.js", "description": " Object binding pattern with \"nested\" object binding pattern using initializer (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-obj-ptrn-prop-obj-value-null.js", "description": " Object binding pattern with \"nested\" object binding pattern taking the `null` value (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-obj-ptrn-prop-obj-value-undef.js", "description": " Object binding pattern with \"nested\" object binding pattern taking the `null` value (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/gen-meth-obj-ptrn-prop-obj.js", "description": " Object binding pattern with \"nested\" object binding pattern not using initializer (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-ary-init-iter-get-err-array-prototype.js", "description": " Abrupt completion returned by GetIterator (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\nRuntime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iteratorRecord be ? GetIterator(value).\n\nGetIterator ( obj [ , hint [ , method ] ] )\n\n[...]\n4. Let iterator be ? Call(method, obj).\n\nCall ( F, V [ , argumentsList ] )\n\n[...]\n2. If IsCallable(F) is false, throw a TypeError exception.\n\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-ary-init-iter-get-err.js", "description": " Abrupt completion returned by GetIterator (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iterator be GetIterator(value).\n2. ReturnIfAbrupt(iterator).\n\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-ary-init-iter-no-close.js", "description": " Iterator is not closed when exhausted by pattern evaluation (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n[...]\n4. If iteratorRecord.[[done]] is false, return ? IteratorClose(iterator,\nresult).\n[...]\n\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-ary-name-iter-val.js", "description": " SingleNameBinding with normal value iteration (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\nd. If next is false, set iteratorRecord.[[done]] to true.\ne. Else,\n[...]\ni. Let v be IteratorValue(next).\nii. If v is an abrupt completion, set\niteratorRecord.[[done]] to true.\niii. ReturnIfAbrupt(v).\n5. If iteratorRecord.[[done]] is true, let v be undefined.\n[...]\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-ary-ptrn-elem-ary-elem-init.js", "description": " BindingElement with array binding pattern and initializer is used (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-ary-ptrn-elem-ary-elem-iter.js", "description": " BindingElement with array binding pattern and initializer is not used (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\n[...]\ne. Else,\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-ary-ptrn-elem-ary-elision-init.js", "description": " BindingElement with array binding pattern and initializer is used (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-ary-ptrn-elem-ary-elision-iter.js", "description": " BindingElement with array binding pattern and initializer is not used (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\n[...]\ne. Else,\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-ary-ptrn-elem-ary-empty-init.js", "description": " BindingElement with array binding pattern and initializer is used (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-ary-ptrn-elem-ary-empty-iter.js", "description": " BindingElement with array binding pattern and initializer is not used (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\n[...]\ne. Else,\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-ary-ptrn-elem-ary-rest-init.js", "description": " BindingElement with array binding pattern and initializer is used (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-ary-ptrn-elem-ary-rest-iter.js", "description": " BindingElement with array binding pattern and initializer is not used (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\n[...]\ne. Else,\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-ary-ptrn-elem-ary-val-null.js", "description": " Nested array destructuring with a null value (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. If iteratorRecord.[[done]] is false, then\n[...]\ne. Else\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iterator be GetIterator(value).\n2. ReturnIfAbrupt(iterator).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-ary-ptrn-elem-id-init-exhausted.js", "description": " Destructuring initializer with an exhausted iterator (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n5. If iteratorRecord.[[done]] is true, let v be undefined.\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-ary-ptrn-elem-id-init-hole.js", "description": " Destructuring initializer with a \"hole\" (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nSingleNameBinding : BindingIdentifier Initializeropt\n[...] 6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\n[...]\n7. If environment is undefined, return PutValue(lhs, v). 8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-ary-ptrn-elem-id-init-skipped.js", "description": " Destructuring initializer is not evaluated when value is not `undefined` (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-ary-ptrn-elem-id-init-throws.js", "description": " Destructuring initializer returns an abrupt completion (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-ary-ptrn-elem-id-init-undef.js", "description": " Destructuring initializer with an undefined value (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-ary-ptrn-elem-id-init-unresolvable.js", "description": " Destructuring initializer is an unresolvable reference (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-ary-ptrn-elem-id-iter-complete.js", "description": " SingleNameBinding when value iteration completes (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\nd. If next is false, set iteratorRecord.[[done]] to true.\ne. Else,\n[...]\n5. If iteratorRecord.[[done]] is true, let v be undefined.\n[...]\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-ary-ptrn-elem-id-iter-done.js", "description": " SingleNameBinding when value iteration was completed previously (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\n[...]\n5. If iteratorRecord.[[done]] is true, let v be undefined.\n[...]\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-ary-ptrn-elem-id-iter-step-err.js", "description": " Error forwarding when IteratorStep returns an abrupt completion (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-ary-ptrn-elem-id-iter-val-array-prototype.js", "description": " Array destructuring uses overriden Array.prototype[Symbol.iterator] (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\nRuntime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializer_opt\n\n1. Let bindingId be StringValue of BindingIdentifier.\n2. Let lhs be ? ResolveBinding(bindingId, environment).\n3. If iteratorRecord.[[Done]] is false, then\na. Let next be IteratorStep(iteratorRecord).\nb. If next is an abrupt completion, set iteratorRecord.[[Done]] to true.\nc. ReturnIfAbrupt(next).\nd. If next is false, set iteratorRecord.[[Done]] to true.\ne. Else,\ni. Let v be IteratorValue(next).\nii. If v is an abrupt completion, set iteratorRecord.[[Done]] to true.\niii. ReturnIfAbrupt(v).\n[...]\n7. Return InitializeReferencedBinding(lhs, v).\n\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-ary-ptrn-elem-id-iter-val-err.js", "description": " Error forwarding when IteratorValue returns an abrupt completion (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\nd. If next is false, set iteratorRecord.[[done]] to true.\ne. Else,\ni. Let v be IteratorValue(next).\nii. If v is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\niii. ReturnIfAbrupt(v).\n\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-ary-ptrn-elem-id-iter-val.js", "description": " SingleNameBinding when value iteration was completed previously (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\nd. If next is false, set iteratorRecord.[[done]] to true.\ne. Else,\n[...]\ni. Let v be IteratorValue(next).\nii. If v is an abrupt completion, set\niteratorRecord.[[done]] to true.\niii. ReturnIfAbrupt(v).\n5. If iteratorRecord.[[done]] is true, let v be undefined.\n[...]\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-ary-ptrn-elem-obj-id-init.js", "description": " BindingElement with object binding pattern and initializer is used (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-ary-ptrn-elem-obj-id.js", "description": " BindingElement with object binding pattern and initializer is not used (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-ary-ptrn-elem-obj-prop-id-init.js", "description": " BindingElement with object binding pattern and initializer is used (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-ary-ptrn-elem-obj-prop-id.js", "description": " BindingElement with object binding pattern and initializer is not used (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-ary-ptrn-elem-obj-val-null.js", "description": " Nested object destructuring with a null value (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. If iteratorRecord.[[done]] is false, then\n[...]\ne. Else\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ObjectBindingPattern\n\n1. Let valid be RequireObjectCoercible(value).\n2. ReturnIfAbrupt(valid).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-ary-ptrn-elem-obj-val-undef.js", "description": " Nested object destructuring with a value of `undefined` (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. If iteratorRecord.[[done]] is false, then\n[...]\ne. Else\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ObjectBindingPattern\n\n1. Let valid be RequireObjectCoercible(value).\n2. ReturnIfAbrupt(valid).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-ary-ptrn-elision-exhausted.js", "description": " Elision accepts exhausted iterator (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ Elision ]\n\n1. Return the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with iteratorRecord\nas the argument.\n\n12.14.5.3 Runtime Semantics: IteratorDestructuringAssignmentEvaluation\n\nElision : ,\n\n1. If iteratorRecord.[[done]] is false, then\n[...]\n2. Return NormalCompletion(empty).\n\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-ary-ptrn-elision-step-err.js", "description": " Elision advances iterator and forwards abrupt completions (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ Elision ]\n\n1. Return the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with iteratorRecord\nas the argument.\n\n12.14.5.3 Runtime Semantics: IteratorDestructuringAssignmentEvaluation\n\nElision : ,\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-ary-ptrn-elision.js", "description": " Elision advances iterator (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ Elision ]\n\n1. Return the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with iteratorRecord\nas the argument.\n\n12.14.5.3 Runtime Semantics: IteratorDestructuringAssignmentEvaluation\n\nElision : ,\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\nd. If next is false, set iteratorRecord.[[done]] to true.\n2. Return NormalCompletion(empty).\n\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-ary-ptrn-empty.js", "description": " No iteration occurs for an \"empty\" array binding pattern (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ ]\n\n1. Return NormalCompletion(empty).\n\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-ary-ptrn-rest-id-direct.js", "description": " Lone rest element (direct binding) (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["destructuring-binding"], "flags": ["generated"], "includes": ["compareArray.js"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\nRuntime Semantics: IteratorBindingInitialization\n\nBindingRestElement : ... BindingIdentifier\n\n[...]\n2. Let A be ! ArrayCreate(0).\n3. Let n be 0.\n4. Repeat,\n[...]\nf. Perform ! CreateDataPropertyOrThrow(A, ! ToString(n), nextValue).\ng. Set n to n + 1.\n\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-ary-ptrn-rest-id-elision-next-err.js", "description": " Rest element following elision elements (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nArrayBindingPattern : [ Elisionopt BindingRestElement ]\n1. If Elision is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with\niteratorRecord as the argument.\nb. ReturnIfAbrupt(status).\n2. Return the result of performing IteratorBindingInitialization for\nBindingRestElement with iteratorRecord and environment as arguments.\n\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-ary-ptrn-rest-id-elision.js", "description": " Rest element following elision elements (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nArrayBindingPattern : [ Elisionopt BindingRestElement ]\n1. If Elision is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with\niteratorRecord as the argument.\nb. ReturnIfAbrupt(status).\n2. Return the result of performing IteratorBindingInitialization for\nBindingRestElement with iteratorRecord and environment as arguments.\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-ary-ptrn-rest-id-exhausted.js", "description": " RestElement applied to an exhausted iterator (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\n[...]\nb. If iteratorRecord.[[done]] is true, then\ni. If environment is undefined, return PutValue(lhs, A).\nii. Return InitializeReferencedBinding(lhs, A).\n\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-ary-ptrn-rest-id-iter-step-err.js", "description": " Error forwarding when IteratorStep returns an abrupt completion (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\na. If iteratorRecord.[[done]] is false,\ni. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nii. If next is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\niii. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-ary-ptrn-rest-id-iter-val-err.js", "description": " Error forwarding when IteratorValue returns an abrupt completion (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\n[...]\nc. Let nextValue be IteratorValue(next).\nd. If nextValue is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\ne. ReturnIfAbrupt(nextValue).\n\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-ary-ptrn-rest-id.js", "description": " Lone rest element (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n[...] 3. Let A be ArrayCreate(0). [...] 5. Repeat\n[...]\nf. Let status be CreateDataProperty(A, ToString (n), nextValue).\n[...]\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-obj-ptrn-empty.js", "description": " No property access occurs for an \"empty\" object binding pattern (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\nRuntime Semantics: BindingInitialization\n\nObjectBindingPattern : { }\n\n1. Return NormalCompletion(empty).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-obj-ptrn-id-get-value-err.js", "description": " Error thrown when accessing the corresponding property of the value object (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. Let v be GetV(value, propertyName).\n5. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-obj-ptrn-id-trailing-comma.js", "description": " Trailing comma is allowed following BindingPropertyList (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3 Destructuring Binding Patterns\n\nObjectBindingPattern[Yield] :\n{ }\n{ BindingPropertyList[?Yield] }\n{ BindingPropertyList[?Yield] , }\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-obj-ptrn-prop-ary-init.js", "description": " Object binding pattern with \"nested\" array binding pattern using initializer (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-obj-ptrn-prop-ary-trailing-comma.js", "description": " Trailing comma is allowed following BindingPropertyList (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3 Destructuring Binding Patterns\n\nObjectBindingPattern[Yield] :\n{ }\n{ BindingPropertyList[?Yield] }\n{ BindingPropertyList[?Yield] , }\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-obj-ptrn-prop-ary-value-null.js", "description": " Object binding pattern with \"nested\" array binding pattern taking the `null` value (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-obj-ptrn-prop-ary.js", "description": " Object binding pattern with \"nested\" array binding pattern not using initializer (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-obj-ptrn-prop-eval-err.js", "description": " Evaluation of property name returns an abrupt completion (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingProperty : PropertyName : BindingElement\n\n1. Let P be the result of evaluating PropertyName\n2. ReturnIfAbrupt(P).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-obj-ptrn-prop-id-get-value-err.js", "description": " Error thrown when accessing the corresponding property of the value object (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. Let v be GetV(value, propertyName).\n2. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-obj-ptrn-prop-id-init-skipped.js", "description": " Destructuring initializer is not evaluated when value is not `undefined` (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-obj-ptrn-prop-id-init-throws.js", "description": " Error thrown when evaluating the initializer (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-obj-ptrn-prop-id-init-unresolvable.js", "description": " Destructuring initializer is an unresolvable reference (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-obj-ptrn-prop-id-init.js", "description": " Binding as specified via property name, identifier, and initializer (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-obj-ptrn-prop-id-trailing-comma.js", "description": " Trailing comma is allowed following BindingPropertyList (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3 Destructuring Binding Patterns\n\nObjectBindingPattern[Yield] :\n{ }\n{ BindingPropertyList[?Yield] }\n{ BindingPropertyList[?Yield] , }\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-obj-ptrn-prop-id.js", "description": " Binding as specified via property name and identifier (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-obj-ptrn-prop-obj-init.js", "description": " Object binding pattern with \"nested\" object binding pattern using initializer (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-obj-ptrn-prop-obj-value-null.js", "description": " Object binding pattern with \"nested\" object binding pattern taking the `null` value (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-obj-ptrn-prop-obj-value-undef.js", "description": " Object binding pattern with \"nested\" object binding pattern taking the `null` value (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/expressions/object/dstr/meth-obj-ptrn-prop-obj.js", "description": " Object binding pattern with \"nested\" object binding pattern not using initializer (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/expressions/object/ident-name-method-def-break-escaped.js", "description": " break is a valid identifier name, using escape (MethodDefinition)", "esid": " prod-PropertyDefinition", "flags": ["generated"], "info": " |ObjectLiteral :\n{ PropertyDefinitionList }\n{ PropertyDefinitionList , }\n\nPropertyDefinitionList:\nPropertyDefinition\nPropertyDefinitionList , PropertyDefinition\n\nPropertyDefinition:\nMethodDefinition\n...\n\nMethodDefinition:\nPropertyName ( UniqueFormalParameters ){ FunctionBody }\n\nPropertyName:\nLiteralPropertyName\n...\n\nLiteralPropertyName:\nIdentifierName\n...\n\nReserved Words\n\nA reserved word is an IdentifierName that cannot be used as an Identifier.\n"}, {"path": "./test262-main/test/language/expressions/object/ident-name-method-def-case-escaped.js", "description": " case is a valid identifier name, using escape (MethodDefinition)", "esid": " prod-PropertyDefinition", "flags": ["generated"], "info": " |ObjectLiteral :\n{ PropertyDefinitionList }\n{ PropertyDefinitionList , }\n\nPropertyDefinitionList:\nPropertyDefinition\nPropertyDefinitionList , PropertyDefinition\n\nPropertyDefinition:\nMethodDefinition\n...\n\nMethodDefinition:\nPropertyName ( UniqueFormalParameters ){ FunctionBody }\n\nPropertyName:\nLiteralPropertyName\n...\n\nLiteralPropertyName:\nIdentifierName\n...\n\nReserved Words\n\nA reserved word is an IdentifierName that cannot be used as an Identifier.\n"}, {"path": "./test262-main/test/language/expressions/object/ident-name-method-def-catch-escaped.js", "description": " catch is a valid identifier name, using escape (MethodDefinition)", "esid": " prod-PropertyDefinition", "flags": ["generated"], "info": " |ObjectLiteral :\n{ PropertyDefinitionList }\n{ PropertyDefinitionList , }\n\nPropertyDefinitionList:\nPropertyDefinition\nPropertyDefinitionList , PropertyDefinition\n\nPropertyDefinition:\nMethodDefinition\n...\n\nMethodDefinition:\nPropertyName ( UniqueFormalParameters ){ FunctionBody }\n\nPropertyName:\nLiteralPropertyName\n...\n\nLiteralPropertyName:\nIdentifierName\n...\n\nReserved Words\n\nA reserved word is an IdentifierName that cannot be used as an Identifier.\n"}, {"path": "./test262-main/test/language/expressions/object/ident-name-method-def-class-escaped.js", "description": " class is a valid identifier name, using escape (MethodDefinition)", "esid": " prod-PropertyDefinition", "flags": ["generated"], "info": " |ObjectLiteral :\n{ PropertyDefinitionList }\n{ PropertyDefinitionList , }\n\nPropertyDefinitionList:\nPropertyDefinition\nPropertyDefinitionList , PropertyDefinition\n\nPropertyDefinition:\nMethodDefinition\n...\n\nMethodDefinition:\nPropertyName ( UniqueFormalParameters ){ FunctionBody }\n\nPropertyName:\nLiteralPropertyName\n...\n\nLiteralPropertyName:\nIdentifierName\n...\n\nReserved Words\n\nA reserved word is an IdentifierName that cannot be used as an Identifier.\n"}, {"path": "./test262-main/test/language/expressions/object/ident-name-method-def-const-escaped.js", "description": " const is a valid identifier name, using escape (MethodDefinition)", "esid": " prod-PropertyDefinition", "flags": ["generated"], "info": " |ObjectLiteral :\n{ PropertyDefinitionList }\n{ PropertyDefinitionList , }\n\nPropertyDefinitionList:\nPropertyDefinition\nPropertyDefinitionList , PropertyDefinition\n\nPropertyDefinition:\nMethodDefinition\n...\n\nMethodDefinition:\nPropertyName ( UniqueFormalParameters ){ FunctionBody }\n\nPropertyName:\nLiteralPropertyName\n...\n\nLiteralPropertyName:\nIdentifierName\n...\n\nReserved Words\n\nA reserved word is an IdentifierName that cannot be used as an Identifier.\n"}, {"path": "./test262-main/test/language/expressions/object/ident-name-method-def-continue-escaped.js", "description": " continue is a valid identifier name, using escape (MethodDefinition)", "esid": " prod-PropertyDefinition", "flags": ["generated"], "info": " |ObjectLiteral :\n{ PropertyDefinitionList }\n{ PropertyDefinitionList , }\n\nPropertyDefinitionList:\nPropertyDefinition\nPropertyDefinitionList , PropertyDefinition\n\nPropertyDefinition:\nMethodDefinition\n...\n\nMethodDefinition:\nPropertyName ( UniqueFormalParameters ){ FunctionBody }\n\nPropertyName:\nLiteralPropertyName\n...\n\nLiteralPropertyName:\nIdentifierName\n...\n\nReserved Words\n\nA reserved word is an IdentifierName that cannot be used as an Identifier.\n"}, {"path": "./test262-main/test/language/expressions/object/ident-name-method-def-debugger-escaped.js", "description": " debugger is a valid identifier name, using escape (MethodDefinition)", "esid": " prod-PropertyDefinition", "flags": ["generated"], "info": " |ObjectLiteral :\n{ PropertyDefinitionList }\n{ PropertyDefinitionList , }\n\nPropertyDefinitionList:\nPropertyDefinition\nPropertyDefinitionList , PropertyDefinition\n\nPropertyDefinition:\nMethodDefinition\n...\n\nMethodDefinition:\nPropertyName ( UniqueFormalParameters ){ FunctionBody }\n\nPropertyName:\nLiteralPropertyName\n...\n\nLiteralPropertyName:\nIdentifierName\n...\n\nReserved Words\n\nA reserved word is an IdentifierName that cannot be used as an Identifier.\n"}, {"path": "./test262-main/test/language/expressions/object/ident-name-method-def-default-escaped.js", "description": " default is a valid identifier name, using escape (MethodDefinition)", "esid": " prod-PropertyDefinition", "flags": ["generated"], "info": " |ObjectLiteral :\n{ PropertyDefinitionList }\n{ PropertyDefinitionList , }\n\nPropertyDefinitionList:\nPropertyDefinition\nPropertyDefinitionList , PropertyDefinition\n\nPropertyDefinition:\nMethodDefinition\n...\n\nMethodDefinition:\nPropertyName ( UniqueFormalParameters ){ FunctionBody }\n\nPropertyName:\nLiteralPropertyName\n...\n\nLiteralPropertyName:\nIdentifierName\n...\n\nReserved Words\n\nA reserved word is an IdentifierName that cannot be used as an Identifier.\n"}, {"path": "./test262-main/test/language/expressions/object/ident-name-method-def-default.js", "description": " default is a valid identifier name (MethodDefinition)", "esid": " prod-PropertyDefinition", "flags": ["generated"], "info": " |ObjectLiteral :\n{ PropertyDefinitionList }\n{ PropertyDefinitionList , }\n\nPropertyDefinitionList:\nPropertyDefinition\nPropertyDefinitionList , PropertyDefinition\n\nPropertyDefinition:\nMethodDefinition\n...\n\nMethodDefinition:\nPropertyName ( UniqueFormalParameters ){ FunctionBody }\n\nPropertyName:\nLiteralPropertyName\n...\n\nLiteralPropertyName:\nIdentifierName\n...\n\nReserved Words\n\nA reserved word is an IdentifierName that cannot be used as an Identifier.\n"}, {"path": "./test262-main/test/language/expressions/object/ident-name-method-def-delete-escaped.js", "description": " delete is a valid identifier name, using escape (MethodDefinition)", "esid": " prod-PropertyDefinition", "flags": ["generated"], "info": " |ObjectLiteral :\n{ PropertyDefinitionList }\n{ PropertyDefinitionList , }\n\nPropertyDefinitionList:\nPropertyDefinition\nPropertyDefinitionList , PropertyDefinition\n\nPropertyDefinition:\nMethodDefinition\n...\n\nMethodDefinition:\nPropertyName ( UniqueFormalParameters ){ FunctionBody }\n\nPropertyName:\nLiteralPropertyName\n...\n\nLiteralPropertyName:\nIdentifierName\n...\n\nReserved Words\n\nA reserved word is an IdentifierName that cannot be used as an Identifier.\n"}, {"path": "./test262-main/test/language/expressions/object/ident-name-method-def-do-escaped.js", "description": " do is a valid identifier name, using escape (MethodDefinition)", "esid": " prod-PropertyDefinition", "flags": ["generated"], "info": " |ObjectLiteral :\n{ PropertyDefinitionList }\n{ PropertyDefinitionList , }\n\nPropertyDefinitionList:\nPropertyDefinition\nPropertyDefinitionList , PropertyDefinition\n\nPropertyDefinition:\nMethodDefinition\n...\n\nMethodDefinition:\nPropertyName ( UniqueFormalParameters ){ FunctionBody }\n\nPropertyName:\nLiteralPropertyName\n...\n\nLiteralPropertyName:\nIdentifierName\n...\n\nReserved Words\n\nA reserved word is an IdentifierName that cannot be used as an Identifier.\n"}, {"path": "./test262-main/test/language/expressions/object/ident-name-method-def-else-escaped.js", "description": " else is a valid identifier name, using escape (MethodDefinition)", "esid": " prod-PropertyDefinition", "flags": ["generated"], "info": " |ObjectLiteral :\n{ PropertyDefinitionList }\n{ PropertyDefinitionList , }\n\nPropertyDefinitionList:\nPropertyDefinition\nPropertyDefinitionList , PropertyDefinition\n\nPropertyDefinition:\nMethodDefinition\n...\n\nMethodDefinition:\nPropertyName ( UniqueFormalParameters ){ FunctionBody }\n\nPropertyName:\nLiteralPropertyName\n...\n\nLiteralPropertyName:\nIdentifierName\n...\n\nReserved Words\n\nA reserved word is an IdentifierName that cannot be used as an Identifier.\n"}, {"path": "./test262-main/test/language/expressions/object/ident-name-method-def-enum-escaped.js", "description": " enum is a valid identifier name, using escape (MethodDefinition)", "esid": " prod-PropertyDefinition", "flags": ["generated"], "info": " |ObjectLiteral :\n{ PropertyDefinitionList }\n{ PropertyDefinitionList , }\n\nPropertyDefinitionList:\nPropertyDefinition\nPropertyDefinitionList , PropertyDefinition\n\nPropertyDefinition:\nMethodDefinition\n...\n\nMethodDefinition:\nPropertyName ( UniqueFormalParameters ){ FunctionBody }\n\nPropertyName:\nLiteralPropertyName\n...\n\nLiteralPropertyName:\nIdentifierName\n...\n\nReserved Words\n\nA reserved word is an IdentifierName that cannot be used as an Identifier.\n"}, {"path": "./test262-main/test/language/expressions/object/ident-name-method-def-export-escaped.js", "description": " export is a valid identifier name, using escape (MethodDefinition)", "esid": " prod-PropertyDefinition", "flags": ["generated"], "info": " |ObjectLiteral :\n{ PropertyDefinitionList }\n{ PropertyDefinitionList , }\n\nPropertyDefinitionList:\nPropertyDefinition\nPropertyDefinitionList , PropertyDefinition\n\nPropertyDefinition:\nMethodDefinition\n...\n\nMethodDefinition:\nPropertyName ( UniqueFormalParameters ){ FunctionBody }\n\nPropertyName:\nLiteralPropertyName\n...\n\nLiteralPropertyName:\nIdentifierName\n...\n\nReserved Words\n\nA reserved word is an IdentifierName that cannot be used as an Identifier.\n"}, {"path": "./test262-main/test/language/expressions/object/ident-name-method-def-extends-escaped.js", "description": " extends is a valid identifier name, using escape (MethodDefinition)", "esid": " prod-PropertyDefinition", "flags": ["generated"], "info": " |ObjectLiteral :\n{ PropertyDefinitionList }\n{ PropertyDefinitionList , }\n\nPropertyDefinitionList:\nPropertyDefinition\nPropertyDefinitionList , PropertyDefinition\n\nPropertyDefinition:\nMethodDefinition\n...\n\nMethodDefinition:\nPropertyName ( UniqueFormalParameters ){ FunctionBody }\n\nPropertyName:\nLiteralPropertyName\n...\n\nLiteralPropertyName:\nIdentifierName\n...\n\nReserved Words\n\nA reserved word is an IdentifierName that cannot be used as an Identifier.\n"}, {"path": "./test262-main/test/language/expressions/object/ident-name-method-def-extends.js", "description": " extends is a valid identifier name (MethodDefinition)", "esid": " prod-PropertyDefinition", "flags": ["generated"], "info": " |ObjectLiteral :\n{ PropertyDefinitionList }\n{ PropertyDefinitionList , }\n\nPropertyDefinitionList:\nPropertyDefinition\nPropertyDefinitionList , PropertyDefinition\n\nPropertyDefinition:\nMethodDefinition\n...\n\nMethodDefinition:\nPropertyName ( UniqueFormalParameters ){ FunctionBody }\n\nPropertyName:\nLiteralPropertyName\n...\n\nLiteralPropertyName:\nIdentifierName\n...\n\nReserved Words\n\nA reserved word is an IdentifierName that cannot be used as an Identifier.\n"}, {"path": "./test262-main/test/language/expressions/object/ident-name-method-def-finally-escaped.js", "description": " finally is a valid identifier name, using escape (MethodDefinition)", "esid": " prod-PropertyDefinition", "flags": ["generated"], "info": " |ObjectLiteral :\n{ PropertyDefinitionList }\n{ PropertyDefinitionList , }\n\nPropertyDefinitionList:\nPropertyDefinition\nPropertyDefinitionList , PropertyDefinition\n\nPropertyDefinition:\nMethodDefinition\n...\n\nMethodDefinition:\nPropertyName ( UniqueFormalParameters ){ FunctionBody }\n\nPropertyName:\nLiteralPropertyName\n...\n\nLiteralPropertyName:\nIdentifierName\n...\n\nReserved Words\n\nA reserved word is an IdentifierName that cannot be used as an Identifier.\n"}, {"path": "./test262-main/test/language/expressions/object/ident-name-method-def-for-escaped.js", "description": " for is a valid identifier name, using escape (MethodDefinition)", "esid": " prod-PropertyDefinition", "flags": ["generated"], "info": " |ObjectLiteral :\n{ PropertyDefinitionList }\n{ PropertyDefinitionList , }\n\nPropertyDefinitionList:\nPropertyDefinition\nPropertyDefinitionList , PropertyDefinition\n\nPropertyDefinition:\nMethodDefinition\n...\n\nMethodDefinition:\nPropertyName ( UniqueFormalParameters ){ FunctionBody }\n\nPropertyName:\nLiteralPropertyName\n...\n\nLiteralPropertyName:\nIdentifierName\n...\n\nReserved Words\n\nA reserved word is an IdentifierName that cannot be used as an Identifier.\n"}, {"path": "./test262-main/test/language/expressions/object/ident-name-method-def-function-escaped.js", "description": " function is a valid identifier name, using escape (MethodDefinition)", "esid": " prod-PropertyDefinition", "flags": ["generated"], "info": " |ObjectLiteral :\n{ PropertyDefinitionList }\n{ PropertyDefinitionList , }\n\nPropertyDefinitionList:\nPropertyDefinition\nPropertyDefinitionList , PropertyDefinition\n\nPropertyDefinition:\nMethodDefinition\n...\n\nMethodDefinition:\nPropertyName ( UniqueFormalParameters ){ FunctionBody }\n\nPropertyName:\nLiteralPropertyName\n...\n\nLiteralPropertyName:\nIdentifierName\n...\n\nReserved Words\n\nA reserved word is an IdentifierName that cannot be used as an Identifier.\n"}, {"path": "./test262-main/test/language/expressions/object/ident-name-method-def-if-escaped.js", "description": " if is a valid identifier name, using escape (MethodDefinition)", "esid": " prod-PropertyDefinition", "flags": ["generated"], "info": " |ObjectLiteral :\n{ PropertyDefinitionList }\n{ PropertyDefinitionList , }\n\nPropertyDefinitionList:\nPropertyDefinition\nPropertyDefinitionList , PropertyDefinition\n\nPropertyDefinition:\nMethodDefinition\n...\n\nMethodDefinition:\nPropertyName ( UniqueFormalParameters ){ FunctionBody }\n\nPropertyName:\nLiteralPropertyName\n...\n\nLiteralPropertyName:\nIdentifierName\n...\n\nReserved Words\n\nA reserved word is an IdentifierName that cannot be used as an Identifier.\n"}, {"path": "./test262-main/test/language/expressions/object/ident-name-method-def-implements-escaped.js", "description": " implements is a valid identifier name, using escape (MethodDefinition)", "esid": " prod-PropertyDefinition", "flags": ["generated"], "info": " |ObjectLiteral :\n{ PropertyDefinitionList }\n{ PropertyDefinitionList , }\n\nPropertyDefinitionList:\nPropertyDefinition\nPropertyDefinitionList , PropertyDefinition\n\nPropertyDefinition:\nMethodDefinition\n...\n\nMethodDefinition:\nPropertyName ( UniqueFormalParameters ){ FunctionBody }\n\nPropertyName:\nLiteralPropertyName\n...\n\nLiteralPropertyName:\nIdentifierName\n...\n\nReserved Words\n\nA reserved word is an IdentifierName that cannot be used as an Identifier.\n"}, {"path": "./test262-main/test/language/expressions/object/ident-name-method-def-import-escaped.js", "description": " import is a valid identifier name, using escape (MethodDefinition)", "esid": " prod-PropertyDefinition", "flags": ["generated"], "info": " |ObjectLiteral :\n{ PropertyDefinitionList }\n{ PropertyDefinitionList , }\n\nPropertyDefinitionList:\nPropertyDefinition\nPropertyDefinitionList , PropertyDefinition\n\nPropertyDefinition:\nMethodDefinition\n...\n\nMethodDefinition:\nPropertyName ( UniqueFormalParameters ){ FunctionBody }\n\nPropertyName:\nLiteralPropertyName\n...\n\nLiteralPropertyName:\nIdentifierName\n...\n\nReserved Words\n\nA reserved word is an IdentifierName that cannot be used as an Identifier.\n"}, {"path": "./test262-main/test/language/expressions/object/ident-name-method-def-in-escaped.js", "description": " in is a valid identifier name, using escape (MethodDefinition)", "esid": " prod-PropertyDefinition", "flags": ["generated"], "info": " |ObjectLiteral :\n{ PropertyDefinitionList }\n{ PropertyDefinitionList , }\n\nPropertyDefinitionList:\nPropertyDefinition\nPropertyDefinitionList , PropertyDefinition\n\nPropertyDefinition:\nMethodDefinition\n...\n\nMethodDefinition:\nPropertyName ( UniqueFormalParameters ){ FunctionBody }\n\nPropertyName:\nLiteralPropertyName\n...\n\nLiteralPropertyName:\nIdentifierName\n...\n\nReserved Words\n\nA reserved word is an IdentifierName that cannot be used as an Identifier.\n"}, {"path": "./test262-main/test/language/expressions/object/ident-name-method-def-instanceof-escaped.js", "description": " instanceof is a valid identifier name, using escape (MethodDefinition)", "esid": " prod-PropertyDefinition", "flags": ["generated"], "info": " |ObjectLiteral :\n{ PropertyDefinitionList }\n{ PropertyDefinitionList , }\n\nPropertyDefinitionList:\nPropertyDefinition\nPropertyDefinitionList , PropertyDefinition\n\nPropertyDefinition:\nMethodDefinition\n...\n\nMethodDefinition:\nPropertyName ( UniqueFormalParameters ){ FunctionBody }\n\nPropertyName:\nLiteralPropertyName\n...\n\nLiteralPropertyName:\nIdentifierName\n...\n\nReserved Words\n\nA reserved word is an IdentifierName that cannot be used as an Identifier.\n"}, {"path": "./test262-main/test/language/expressions/object/ident-name-method-def-interface-escaped.js", "description": " interface is a valid identifier name, using escape (MethodDefinition)", "esid": " prod-PropertyDefinition", "flags": ["generated"], "info": " |ObjectLiteral :\n{ PropertyDefinitionList }\n{ PropertyDefinitionList , }\n\nPropertyDefinitionList:\nPropertyDefinition\nPropertyDefinitionList , PropertyDefinition\n\nPropertyDefinition:\nMethodDefinition\n...\n\nMethodDefinition:\nPropertyName ( UniqueFormalParameters ){ FunctionBody }\n\nPropertyName:\nLiteralPropertyName\n...\n\nLiteralPropertyName:\nIdentifierName\n...\n\nReserved Words\n\nA reserved word is an IdentifierName that cannot be used as an Identifier.\n"}, {"path": "./test262-main/test/language/expressions/object/ident-name-method-def-let-escaped.js", "description": " let is a valid identifier name, using escape (MethodDefinition)", "esid": " prod-PropertyDefinition", "flags": ["generated"], "info": " |ObjectLiteral :\n{ PropertyDefinitionList }\n{ PropertyDefinitionList , }\n\nPropertyDefinitionList:\nPropertyDefinition\nPropertyDefinitionList , PropertyDefinition\n\nPropertyDefinition:\nMethodDefinition\n...\n\nMethodDefinition:\nPropertyName ( UniqueFormalParameters ){ FunctionBody }\n\nPropertyName:\nLiteralPropertyName\n...\n\nLiteralPropertyName:\nIdentifierName\n...\n\nReserved Words\n\nA reserved word is an IdentifierName that cannot be used as an Identifier.\n"}, {"path": "./test262-main/test/language/expressions/object/ident-name-method-def-new-escaped.js", "description": " new is a valid identifier name, using escape (MethodDefinition)", "esid": " prod-PropertyDefinition", "flags": ["generated"], "info": " |ObjectLiteral :\n{ PropertyDefinitionList }\n{ PropertyDefinitionList , }\n\nPropertyDefinitionList:\nPropertyDefinition\nPropertyDefinitionList , PropertyDefinition\n\nPropertyDefinition:\nMethodDefinition\n...\n\nMethodDefinition:\nPropertyName ( UniqueFormalParameters ){ FunctionBody }\n\nPropertyName:\nLiteralPropertyName\n...\n\nLiteralPropertyName:\nIdentifierName\n...\n\nReserved Words\n\nA reserved word is an IdentifierName that cannot be used as an Identifier.\n"}, {"path": "./test262-main/test/language/expressions/object/ident-name-method-def-package-escaped.js", "description": " package is a valid identifier name, using escape (MethodDefinition)", "esid": " prod-PropertyDefinition", "flags": ["generated"], "info": " |ObjectLiteral :\n{ PropertyDefinitionList }\n{ PropertyDefinitionList , }\n\nPropertyDefinitionList:\nPropertyDefinition\nPropertyDefinitionList , PropertyDefinition\n\nPropertyDefinition:\nMethodDefinition\n...\n\nMethodDefinition:\nPropertyName ( UniqueFormalParameters ){ FunctionBody }\n\nPropertyName:\nLiteralPropertyName\n...\n\nLiteralPropertyName:\nIdentifierName\n...\n\nReserved Words\n\nA reserved word is an IdentifierName that cannot be used as an Identifier.\n"}, {"path": "./test262-main/test/language/expressions/object/ident-name-method-def-private-escaped.js", "description": " private is a valid identifier name, using escape (MethodDefinition)", "esid": " prod-PropertyDefinition", "flags": ["generated"], "info": " |ObjectLiteral :\n{ PropertyDefinitionList }\n{ PropertyDefinitionList , }\n\nPropertyDefinitionList:\nPropertyDefinition\nPropertyDefinitionList , PropertyDefinition\n\nPropertyDefinition:\nMethodDefinition\n...\n\nMethodDefinition:\nPropertyName ( UniqueFormalParameters ){ FunctionBody }\n\nPropertyName:\nLiteralPropertyName\n...\n\nLiteralPropertyName:\nIdentifierName\n...\n\nReserved Words\n\nA reserved word is an IdentifierName that cannot be used as an Identifier.\n"}, {"path": "./test262-main/test/language/expressions/object/ident-name-method-def-protected-escaped.js", "description": " protected is a valid identifier name, using escape (MethodDefinition)", "esid": " prod-PropertyDefinition", "flags": ["generated"], "info": " |ObjectLiteral :\n{ PropertyDefinitionList }\n{ PropertyDefinitionList , }\n\nPropertyDefinitionList:\nPropertyDefinition\nPropertyDefinitionList , PropertyDefinition\n\nPropertyDefinition:\nMethodDefinition\n...\n\nMethodDefinition:\nPropertyName ( UniqueFormalParameters ){ FunctionBody }\n\nPropertyName:\nLiteralPropertyName\n...\n\nLiteralPropertyName:\nIdentifierName\n...\n\nReserved Words\n\nA reserved word is an IdentifierName that cannot be used as an Identifier.\n"}, {"path": "./test262-main/test/language/expressions/object/ident-name-method-def-public-escaped.js", "description": " public is a valid identifier name, using escape (MethodDefinition)", "esid": " prod-PropertyDefinition", "flags": ["generated"], "info": " |ObjectLiteral :\n{ PropertyDefinitionList }\n{ PropertyDefinitionList , }\n\nPropertyDefinitionList:\nPropertyDefinition\nPropertyDefinitionList , PropertyDefinition\n\nPropertyDefinition:\nMethodDefinition\n...\n\nMethodDefinition:\nPropertyName ( UniqueFormalParameters ){ FunctionBody }\n\nPropertyName:\nLiteralPropertyName\n...\n\nLiteralPropertyName:\nIdentifierName\n...\n\nReserved Words\n\nA reserved word is an IdentifierName that cannot be used as an Identifier.\n"}, {"path": "./test262-main/test/language/expressions/object/ident-name-method-def-return-escaped.js", "description": " return is a valid identifier name, using escape (MethodDefinition)", "esid": " prod-PropertyDefinition", "flags": ["generated"], "info": " |ObjectLiteral :\n{ PropertyDefinitionList }\n{ PropertyDefinitionList , }\n\nPropertyDefinitionList:\nPropertyDefinition\nPropertyDefinitionList , PropertyDefinition\n\nPropertyDefinition:\nMethodDefinition\n...\n\nMethodDefinition:\nPropertyName ( UniqueFormalParameters ){ FunctionBody }\n\nPropertyName:\nLiteralPropertyName\n...\n\nLiteralPropertyName:\nIdentifierName\n...\n\nReserved Words\n\nA reserved word is an IdentifierName that cannot be used as an Identifier.\n"}, {"path": "./test262-main/test/language/expressions/object/ident-name-method-def-static-escaped.js", "description": " static is a valid identifier name, using escape (MethodDefinition)", "esid": " prod-PropertyDefinition", "flags": ["generated"], "info": " |ObjectLiteral :\n{ PropertyDefinitionList }\n{ PropertyDefinitionList , }\n\nPropertyDefinitionList:\nPropertyDefinition\nPropertyDefinitionList , PropertyDefinition\n\nPropertyDefinition:\nMethodDefinition\n...\n\nMethodDefinition:\nPropertyName ( UniqueFormalParameters ){ FunctionBody }\n\nPropertyName:\nLiteralPropertyName\n...\n\nLiteralPropertyName:\nIdentifierName\n...\n\nReserved Words\n\nA reserved word is an IdentifierName that cannot be used as an Identifier.\n"}, {"path": "./test262-main/test/language/expressions/object/ident-name-method-def-super-escaped.js", "description": " super is a valid identifier name, using escape (MethodDefinition)", "esid": " prod-PropertyDefinition", "flags": ["generated"], "info": " |ObjectLiteral :\n{ PropertyDefinitionList }\n{ PropertyDefinitionList , }\n\nPropertyDefinitionList:\nPropertyDefinition\nPropertyDefinitionList , PropertyDefinition\n\nPropertyDefinition:\nMethodDefinition\n...\n\nMethodDefinition:\nPropertyName ( UniqueFormalParameters ){ FunctionBody }\n\nPropertyName:\nLiteralPropertyName\n...\n\nLiteralPropertyName:\nIdentifierName\n...\n\nReserved Words\n\nA reserved word is an IdentifierName that cannot be used as an Identifier.\n"}, {"path": "./test262-main/test/language/expressions/object/ident-name-method-def-switch-escaped.js", "description": " switch is a valid identifier name, using escape (MethodDefinition)", "esid": " prod-PropertyDefinition", "flags": ["generated"], "info": " |ObjectLiteral :\n{ PropertyDefinitionList }\n{ PropertyDefinitionList , }\n\nPropertyDefinitionList:\nPropertyDefinition\nPropertyDefinitionList , PropertyDefinition\n\nPropertyDefinition:\nMethodDefinition\n...\n\nMethodDefinition:\nPropertyName ( UniqueFormalParameters ){ FunctionBody }\n\nPropertyName:\nLiteralPropertyName\n...\n\nLiteralPropertyName:\nIdentifierName\n...\n\nReserved Words\n\nA reserved word is an IdentifierName that cannot be used as an Identifier.\n"}, {"path": "./test262-main/test/language/expressions/object/ident-name-method-def-this-escaped.js", "description": " this is a valid identifier name, using escape (MethodDefinition)", "esid": " prod-PropertyDefinition", "flags": ["generated"], "info": " |ObjectLiteral :\n{ PropertyDefinitionList }\n{ PropertyDefinitionList , }\n\nPropertyDefinitionList:\nPropertyDefinition\nPropertyDefinitionList , PropertyDefinition\n\nPropertyDefinition:\nMethodDefinition\n...\n\nMethodDefinition:\nPropertyName ( UniqueFormalParameters ){ FunctionBody }\n\nPropertyName:\nLiteralPropertyName\n...\n\nLiteralPropertyName:\nIdentifierName\n...\n\nReserved Words\n\nA reserved word is an IdentifierName that cannot be used as an Identifier.\n"}, {"path": "./test262-main/test/language/expressions/object/ident-name-method-def-throw-escaped.js", "description": " throw is a valid identifier name, using escape (MethodDefinition)", "esid": " prod-PropertyDefinition", "flags": ["generated"], "info": " |ObjectLiteral :\n{ PropertyDefinitionList }\n{ PropertyDefinitionList , }\n\nPropertyDefinitionList:\nPropertyDefinition\nPropertyDefinitionList , PropertyDefinition\n\nPropertyDefinition:\nMethodDefinition\n...\n\nMethodDefinition:\nPropertyName ( UniqueFormalParameters ){ FunctionBody }\n\nPropertyName:\nLiteralPropertyName\n...\n\nLiteralPropertyName:\nIdentifierName\n...\n\nReserved Words\n\nA reserved word is an IdentifierName that cannot be used as an Identifier.\n"}, {"path": "./test262-main/test/language/expressions/object/ident-name-method-def-try-escaped.js", "description": " try is a valid identifier name, using escape (MethodDefinition)", "esid": " prod-PropertyDefinition", "flags": ["generated"], "info": " |ObjectLiteral :\n{ PropertyDefinitionList }\n{ PropertyDefinitionList , }\n\nPropertyDefinitionList:\nPropertyDefinition\nPropertyDefinitionList , PropertyDefinition\n\nPropertyDefinition:\nMethodDefinition\n...\n\nMethodDefinition:\nPropertyName ( UniqueFormalParameters ){ FunctionBody }\n\nPropertyName:\nLiteralPropertyName\n...\n\nLiteralPropertyName:\nIdentifierName\n...\n\nReserved Words\n\nA reserved word is an IdentifierName that cannot be used as an Identifier.\n"}, {"path": "./test262-main/test/language/expressions/object/ident-name-method-def-typeof-escaped.js", "description": " typeof is a valid identifier name, using escape (MethodDefinition)", "esid": " prod-PropertyDefinition", "flags": ["generated"], "info": " |ObjectLiteral :\n{ PropertyDefinitionList }\n{ PropertyDefinitionList , }\n\nPropertyDefinitionList:\nPropertyDefinition\nPropertyDefinitionList , PropertyDefinition\n\nPropertyDefinition:\nMethodDefinition\n...\n\nMethodDefinition:\nPropertyName ( UniqueFormalParameters ){ FunctionBody }\n\nPropertyName:\nLiteralPropertyName\n...\n\nLiteralPropertyName:\nIdentifierName\n...\n\nReserved Words\n\nA reserved word is an IdentifierName that cannot be used as an Identifier.\n"}, {"path": "./test262-main/test/language/expressions/object/ident-name-method-def-var-escaped.js", "description": " var is a valid identifier name, using escape (MethodDefinition)", "esid": " prod-PropertyDefinition", "flags": ["generated"], "info": " |ObjectLiteral :\n{ PropertyDefinitionList }\n{ PropertyDefinitionList , }\n\nPropertyDefinitionList:\nPropertyDefinition\nPropertyDefinitionList , PropertyDefinition\n\nPropertyDefinition:\nMethodDefinition\n...\n\nMethodDefinition:\nPropertyName ( UniqueFormalParameters ){ FunctionBody }\n\nPropertyName:\nLiteralPropertyName\n...\n\nLiteralPropertyName:\nIdentifierName\n...\n\nReserved Words\n\nA reserved word is an IdentifierName that cannot be used as an Identifier.\n"}, {"path": "./test262-main/test/language/expressions/object/ident-name-method-def-void-escaped.js", "description": " void is a valid identifier name, using escape (MethodDefinition)", "esid": " prod-PropertyDefinition", "flags": ["generated"], "info": " |ObjectLiteral :\n{ PropertyDefinitionList }\n{ PropertyDefinitionList , }\n\nPropertyDefinitionList:\nPropertyDefinition\nPropertyDefinitionList , PropertyDefinition\n\nPropertyDefinition:\nMethodDefinition\n...\n\nMethodDefinition:\nPropertyName ( UniqueFormalParameters ){ FunctionBody }\n\nPropertyName:\nLiteralPropertyName\n...\n\nLiteralPropertyName:\nIdentifierName\n...\n\nReserved Words\n\nA reserved word is an IdentifierName that cannot be used as an Identifier.\n"}, {"path": "./test262-main/test/language/expressions/object/ident-name-method-def-while-escaped.js", "description": " while is a valid identifier name, using escape (MethodDefinition)", "esid": " prod-PropertyDefinition", "flags": ["generated"], "info": " |ObjectLiteral :\n{ PropertyDefinitionList }\n{ PropertyDefinitionList , }\n\nPropertyDefinitionList:\nPropertyDefinition\nPropertyDefinitionList , PropertyDefinition\n\nPropertyDefinition:\nMethodDefinition\n...\n\nMethodDefinition:\nPropertyName ( UniqueFormalParameters ){ FunctionBody }\n\nPropertyName:\nLiteralPropertyName\n...\n\nLiteralPropertyName:\nIdentifierName\n...\n\nReserved Words\n\nA reserved word is an IdentifierName that cannot be used as an Identifier.\n"}, {"path": "./test262-main/test/language/expressions/object/ident-name-method-def-with-escaped.js", "description": " with is a valid identifier name, using escape (MethodDefinition)", "esid": " prod-PropertyDefinition", "flags": ["generated"], "info": " |ObjectLiteral :\n{ PropertyDefinitionList }\n{ PropertyDefinitionList , }\n\nPropertyDefinitionList:\nPropertyDefinition\nPropertyDefinitionList , PropertyDefinition\n\nPropertyDefinition:\nMethodDefinition\n...\n\nMethodDefinition:\nPropertyName ( UniqueFormalParameters ){ FunctionBody }\n\nPropertyName:\nLiteralPropertyName\n...\n\nLiteralPropertyName:\nIdentifierName\n...\n\nReserved Words\n\nA reserved word is an IdentifierName that cannot be used as an Identifier.\n"}, {"path": "./test262-main/test/language/expressions/object/method-definition/computed-property-name-yield-expression.js", "description": " >When the `yield` keyword occurs within the PropertyName of a\nnon-generator MethodDefinition within a generator function, it behaves as a\nYieldExpression.\n", "info": " |ComputedPropertyName:\n[ AssignmentExpression ]\n\nAssignmentExpression[In, Yield, Await]:\n[+Yield]YieldExpression[?In, ?Await]\n\n", "features": ["computed-property-names", "generators"], "flags": ["noStrict"]}, {"path": "./test262-main/test/language/expressions/object/method-definition/forbidden-ext/b1/gen-meth-forbidden-ext-direct-access-prop-arguments.js", "description": " Forbidden extension, f.arguments (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators"], "flags": ["generated", "noStrict"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n\nECMAScript function objects defined using syntactic constructors in strict mode code must\nnot be created with own properties named \"caller\" or \"arguments\". Such own properties also\nmust not be created for function objects defined using an ArrowFunction, MethodDefinition,\nGeneratorDeclaration, GeneratorExpression, AsyncGeneratorDeclaration, AsyncGeneratorExpression,\nClassDeclaration, ClassExpression, AsyncFunctionDeclaration, AsyncFunctionExpression, or\nAsyncArrowFunction regardless of whether the definition is contained in strict mode code.\nBuilt-in functions, strict functions created using the Function constructor, generator functions\ncreated using the Generator constructor, async functions created using the AsyncFunction\nconstructor, and functions created using the bind method also must not be created with such own\nproperties.\n\n"}, {"path": "./test262-main/test/language/expressions/object/method-definition/forbidden-ext/b1/gen-meth-forbidden-ext-direct-access-prop-caller.js", "description": " Forbidden extension, o.caller (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators"], "flags": ["generated", "noStrict"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n\nECMAScript function objects defined using syntactic constructors in strict mode code must\nnot be created with own properties named \"caller\" or \"arguments\". Such own properties also\nmust not be created for function objects defined using an ArrowFunction, MethodDefinition,\nGeneratorDeclaration, GeneratorExpression, AsyncGeneratorDeclaration, AsyncGeneratorExpression,\nClassDeclaration, ClassExpression, AsyncFunctionDeclaration, AsyncFunctionExpression, or\nAsyncArrowFunction regardless of whether the definition is contained in strict mode code.\nBuilt-in functions, strict functions created using the Function constructor, generator functions\ncreated using the Generator constructor, async functions created using the AsyncFunction\nconstructor, and functions created using the bind method also must not be created with such own\nproperties.\n\n"}, {"path": "./test262-main/test/language/expressions/object/method-definition/forbidden-ext/b1/meth-forbidden-ext-direct-access-prop-arguments.js", "description": " Forbidden extension, f.arguments (method)", "esid": " sec-runtime-semantics-definemethod", "flags": ["generated", "noStrict"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\nECMAScript function objects defined using syntactic constructors in strict mode code must\nnot be created with own properties named \"caller\" or \"arguments\". Such own properties also\nmust not be created for function objects defined using an ArrowFunction, MethodDefinition,\nGeneratorDeclaration, GeneratorExpression, AsyncGeneratorDeclaration, AsyncGeneratorExpression,\nClassDeclaration, ClassExpression, AsyncFunctionDeclaration, AsyncFunctionExpression, or\nAsyncArrowFunction regardless of whether the definition is contained in strict mode code.\nBuilt-in functions, strict functions created using the Function constructor, generator functions\ncreated using the Generator constructor, async functions created using the AsyncFunction\nconstructor, and functions created using the bind method also must not be created with such own\nproperties.\n\n"}, {"path": "./test262-main/test/language/expressions/object/method-definition/forbidden-ext/b1/meth-forbidden-ext-direct-access-prop-caller.js", "description": " Forbidden extension, o.caller (method)", "esid": " sec-runtime-semantics-definemethod", "flags": ["generated", "noStrict"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\nECMAScript function objects defined using syntactic constructors in strict mode code must\nnot be created with own properties named \"caller\" or \"arguments\". Such own properties also\nmust not be created for function objects defined using an ArrowFunction, MethodDefinition,\nGeneratorDeclaration, GeneratorExpression, AsyncGeneratorDeclaration, AsyncGeneratorExpression,\nClassDeclaration, ClassExpression, AsyncFunctionDeclaration, AsyncFunctionExpression, or\nAsyncArrowFunction regardless of whether the definition is contained in strict mode code.\nBuilt-in functions, strict functions created using the Function constructor, generator functions\ncreated using the Generator constructor, async functions created using the AsyncFunction\nconstructor, and functions created using the bind method also must not be created with such own\nproperties.\n\n"}, {"path": "./test262-main/test/language/expressions/object/method-definition/forbidden-ext/b2/gen-meth-forbidden-ext-indirect-access-own-prop-caller-get.js", "description": " Forbidden extension, o.caller (generator method)", "esid": " sec-generator-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators"], "flags": ["generated", "noStrict"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n\nIf an implementation extends any function object with an own property named \"caller\" the value of\nthat property, as observed using [[Get]] or [[GetOwnProperty]], must not be a strict function\nobject. If it is an accessor property, the function that is the value of the property's [[Get]]\nattribute must never return a strict function when called.\n\n"}, {"path": "./test262-main/test/language/expressions/object/method-definition/forbidden-ext/b2/gen-meth-forbidden-ext-indirect-access-own-prop-caller-value.js", "description": " Forbidden extension, o.caller (generator method)", "esid": " sec-generator-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators"], "flags": ["generated", "noStrict"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n\nIf an implementation extends any function object with an own property named \"caller\" the value of\nthat property, as observed using [[Get]] or [[GetOwnProperty]], must not be a strict function\nobject. If it is an accessor property, the function that is the value of the property's [[Get]]\nattribute must never return a strict function when called.\n\n"}, {"path": "./test262-main/test/language/expressions/object/method-definition/forbidden-ext/b2/gen-meth-forbidden-ext-indirect-access-prop-caller.js", "description": " Forbidden extension, o.caller (generator method)", "esid": " sec-generator-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["generators"], "flags": ["generated", "noStrict"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n\nIf an implementation extends any function object with an own property named \"caller\" the value of\nthat property, as observed using [[Get]] or [[GetOwnProperty]], must not be a strict function\nobject. If it is an accessor property, the function that is the value of the property's [[Get]]\nattribute must never return a strict function when called.\n\n"}, {"path": "./test262-main/test/language/expressions/object/method-definition/forbidden-ext/b2/meth-forbidden-ext-indirect-access-own-prop-caller-get.js", "description": " Forbidden extension, o.caller (method)", "esid": " sec-runtime-semantics-definemethod", "flags": ["generated", "noStrict"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\nIf an implementation extends any function object with an own property named \"caller\" the value of\nthat property, as observed using [[Get]] or [[GetOwnProperty]], must not be a strict function\nobject. If it is an accessor property, the function that is the value of the property's [[Get]]\nattribute must never return a strict function when called.\n\n"}, {"path": "./test262-main/test/language/expressions/object/method-definition/forbidden-ext/b2/meth-forbidden-ext-indirect-access-own-prop-caller-value.js", "description": " Forbidden extension, o.caller (method)", "esid": " sec-runtime-semantics-definemethod", "flags": ["generated", "noStrict"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\nIf an implementation extends any function object with an own property named \"caller\" the value of\nthat property, as observed using [[Get]] or [[GetOwnProperty]], must not be a strict function\nobject. If it is an accessor property, the function that is the value of the property's [[Get]]\nattribute must never return a strict function when called.\n\n"}, {"path": "./test262-main/test/language/expressions/object/method-definition/forbidden-ext/b2/meth-forbidden-ext-indirect-access-prop-caller.js", "description": " Forbidden extension, o.caller (method)", "esid": " sec-runtime-semantics-definemethod", "flags": ["generated", "noStrict"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\nIf an implementation extends any function object with an own property named \"caller\" the value of\nthat property, as observed using [[Get]] or [[GetOwnProperty]], must not be a strict function\nobject. If it is an accessor property, the function that is the value of the property's [[Get]]\nattribute must never return a strict function when called.\n\n"}, {"path": "./test262-main/test/language/expressions/object/method-definition/gen-meth-dflt-params-abrupt.js", "description": " Abrupt completion returned by evaluation of initializer (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["default-parameters", "generators"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n\n14.1.19 Runtime Semantics: IteratorBindingInitialization\n\nFormalsList : FormalsList , FormalParameter\n\n1. Let status be the result of performing IteratorBindingInitialization for\nFormalsList using iteratorRecord and environment as the arguments.\n2. ReturnIfAbrupt(status).\n3. Return the result of performing IteratorBindingInitialization for\nFormalParameter using iteratorRecord and environment as the arguments.\n\n"}, {"path": "./test262-main/test/language/expressions/object/method-definition/gen-meth-dflt-params-arg-val-not-undefined.js", "description": " Use of initializer when argument value is not `undefined` (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["default-parameters", "generators"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n\n14.1.19 Runtime Semantics: IteratorBindingInitialization\n\nFormalsList : FormalsList , FormalParameter\n\n[...]\n23. Let iteratorRecord be Record {[[Iterator]]:\nCreateListIterator(argumentsList), [[Done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\na. Perform ? IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n"}, {"path": "./test262-main/test/language/expressions/object/method-definition/gen-meth-dflt-params-arg-val-undefined.js", "description": " Use of initializer when argument value is `undefined` (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["default-parameters", "generators"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n\n14.1.19 Runtime Semantics: IteratorBindingInitialization\n\nFormalsList : FormalsList , FormalParameter\n\n[...]\n23. Let iteratorRecord be Record {[[Iterator]]:\nCreateListIterator(argumentsList), [[Done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\na. Perform ? IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n"}, {"path": "./test262-main/test/language/expressions/object/method-definition/gen-meth-dflt-params-ref-prior.js", "description": " Referencing a parameter that occurs earlier in the ParameterList (generator method)", "esid": " sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "features": ["default-parameters", "generators"], "flags": ["generated"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n\n14.1.19 Runtime Semantics: IteratorBindingInitialization\n\nFormalsList : FormalsList , FormalParameter\n\n1. Let status be the result of performing IteratorBindingInitialization for\nFormalsList using iteratorRecord and environment as the arguments.\n2. ReturnIfAbrupt(status).\n3. Return the result of performing IteratorBindingInitialization for\nFormalParameter using iteratorRecord and environment as the arguments.\n\n"}, {"path": "./test262-main/test/language/expressions/object/method-definition/gen-yield-spread-arr-multiple.js", "description": " Use yield value in a array spread position (Generator method)", "esid": " prod-GeneratorMethod", "features": ["generators"], "flags": ["generated"], "includes": ["compareArray.js"], "info": " |14.4 Generator Function Definitions\n\nGeneratorMethod[Yield, Await]:\n* PropertyName[?Yield, ?Await] ( UniqueFormalParameters[+Yield, ~Await] ) { GeneratorBody }\n\n\nArray Initializer\n\nSpreadElement[Yield, Await]:\n...AssignmentExpression[+In, ?Yield, ?Await]\n\n"}, {"path": "./test262-main/test/language/expressions/object/method-definition/gen-yield-spread-arr-single.js", "description": " Use yield value in a array spread position (Generator method)", "esid": " prod-GeneratorMethod", "features": ["generators"], "flags": ["generated"], "info": " |14.4 Generator Function Definitions\n\nGeneratorMethod[Yield, Await]:\n* PropertyName[?Yield, ?Await] ( UniqueFormalParameters[+Yield, ~Await] ) { GeneratorBody }\n\n\nArray Initializer\n\nSpreadElement[Yield, Await]:\n...AssignmentExpression[+In, ?Yield, ?Await]\n"}, {"path": "./test262-main/test/language/expressions/object/method-definition/generator-invoke-fn-no-strict.js", "description": " >In the absence of the \"use strict\" directive, generator functions declared\nas methods obey \"global\" ThisMode semantics.\n", "version": 6, "esid": " 14.4.13", "flags": ["noStrict"], "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/object/method-definition/generator-invoke-fn-strict.js", "description": " >In the presence of the \"use strict\" directive, generator functions declared\nas methods obey \"strict\" ThisMode semantics.\n", "version": 6, "esid": " 14.4.13", "flags": ["noStrict"], "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/object/method-definition/generator-length-dflt.js", "version": 6, "esid": " 14.1.6", "description": " >Default parameters' effect on function length\n", "info": " |Function length is counted by the non initialized parameters in the left.\n\n9.2.4 FunctionInitialize (F, kind, ParameterList, Body, Scope)\n\n[...]\n2. Let len be the ExpectedArgumentCount of ParameterList.\n3. Perform ! DefinePropertyOrThrow(F, \"length\", PropertyDescriptor{[[Value]]:\nlen, [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true}).\n[...]\n\nFormalsList : FormalParameter\n\n1. If HasInitializer of FormalParameter is true return 0\n2. Return 1.\n\nFormalsList : FormalsList , FormalParameter\n\n1. Let count be the ExpectedArgumentCount of FormalsList.\n2. If HasInitializer of FormalsList is true or HasInitializer of\nFormalParameter is true, return count.\n3. Return count+1.\n", "features": ["generators", "default-parameters"], "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/language/expressions/object/method-definition/generator-length.js", "description": " >Generator functions declared as methods have a `length` property that\ndescribes the number of formal parameters.\n", "version": 6, "esid": " 14.4.13", "includes": ["propertyHelper.js"], "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/object/method-definition/generator-name-prop-string.js", "description": " >Generator functions declared as methods are assigned a `name` property\naccording to the string value of their property name.\n", "version": 6, "esid": " 14.4.13", "includes": ["propertyHelper.js"], "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/object/method-definition/generator-no-yield.js", "description": " >Generators declared with GeneratorMethod syntax do not require a\n`yield` expression.\nfeatures: [generators]\nes6id: 14.4\n", "features": ["generators"], "version": 6, "esid": " 14.4"}, {"path": "./test262-main/test/language/expressions/object/method-definition/generator-params.js", "description": " >Generator functions declared as methods honor their declared formal\nparameters.\n", "version": 6, "esid": " 14.4.13", "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/object/method-definition/generator-prop-name-eval-error.js", "description": " >Errors thrown during method definition are forwarded to the runtime.\n", "version": 6, "esid": " 14.4.13", "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/object/method-definition/generator-property-desc.js", "description": " >Generator functions declared as methods are defined as enumerable,\nwritable, configurable properties on the initialized object.\n", "version": 6, "esid": " 14.4.13", "includes": ["propertyHelper.js"], "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/object/method-definition/generator-prototype-prop.js", "description": " >Generator functions declared as methods define a `prototype` property.\n", "version": 6, "esid": " 14.4.13", "includes": ["propertyHelper.js"], "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/object/method-definition/generator-prototype.js", "description": " >The prototype of generator functions declared as methods is the\nGenerator Prototype.\n", "version": 6, "esid": " 14.4.13", "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/object/method-definition/generator-return.js", "description": " >`return` is a valid statement within generator function bodies.\nfeatures: [generators]\nes6id: 14.4\n", "features": ["generators"], "version": 6, "esid": " 14.4"}, {"path": "./test262-main/test/language/expressions/object/method-definition/meth-dflt-params-abrupt.js", "description": " Abrupt completion returned by evaluation of initializer (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["default-parameters"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n14.1.19 Runtime Semantics: IteratorBindingInitialization\n\nFormalsList : FormalsList , FormalParameter\n\n1. Let status be the result of performing IteratorBindingInitialization for\nFormalsList using iteratorRecord and environment as the arguments.\n2. ReturnIfAbrupt(status).\n3. Return the result of performing IteratorBindingInitialization for\nFormalParameter using iteratorRecord and environment as the arguments.\n\n"}, {"path": "./test262-main/test/language/expressions/object/method-definition/meth-dflt-params-arg-val-not-undefined.js", "description": " Use of initializer when argument value is not `undefined` (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["default-parameters"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n14.1.19 Runtime Semantics: IteratorBindingInitialization\n\nFormalsList : FormalsList , FormalParameter\n\n[...]\n23. Let iteratorRecord be Record {[[Iterator]]:\nCreateListIterator(argumentsList), [[Done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\na. Perform ? IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n"}, {"path": "./test262-main/test/language/expressions/object/method-definition/meth-dflt-params-arg-val-undefined.js", "description": " Use of initializer when argument value is `undefined` (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["default-parameters"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n14.1.19 Runtime Semantics: IteratorBindingInitialization\n\nFormalsList : FormalsList , FormalParameter\n\n[...]\n23. Let iteratorRecord be Record {[[Iterator]]:\nCreateListIterator(argumentsList), [[Done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\na. Perform ? IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n"}, {"path": "./test262-main/test/language/expressions/object/method-definition/meth-dflt-params-ref-prior.js", "description": " Referencing a parameter that occurs earlier in the ParameterList (method)", "esid": " sec-runtime-semantics-definemethod", "features": ["default-parameters"], "flags": ["generated"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n14.1.19 Runtime Semantics: IteratorBindingInitialization\n\nFormalsList : FormalsList , FormalParameter\n\n1. Let status be the result of performing IteratorBindingInitialization for\nFormalsList using iteratorRecord and environment as the arguments.\n2. ReturnIfAbrupt(status).\n3. Return the result of performing IteratorBindingInitialization for\nFormalParameter using iteratorRecord and environment as the arguments.\n\n"}, {"path": "./test262-main/test/language/expressions/object/method-definition/name-invoke-fn-no-strict.js", "description": " >In the absence of the \"use strict\" directive, functions declared as methods\nobey \"global\" ThisMode semantics.\n", "version": 6, "esid": " 14.3.8", "flags": ["noStrict"]}, {"path": "./test262-main/test/language/expressions/object/method-definition/name-invoke-fn-strict.js", "description": " >In the presence of the \"use strict\" directive, functions declared as\nmethods obey \"strict\" ThisMode semantics.\n", "version": 6, "esid": " 14.3.8", "flags": ["noStrict"]}, {"path": "./test262-main/test/language/expressions/object/method-definition/name-length-dflt.js", "version": 6, "esid": " 14.1.6", "description": " >Default parameters' effect on function length\n", "info": " |Function length is counted by the non initialized parameters in the left.\n\n9.2.4 FunctionInitialize (F, kind, ParameterList, Body, Scope)\n\n[...]\n2. Let len be the ExpectedArgumentCount of ParameterList.\n3. Perform ! DefinePropertyOrThrow(F, \"length\", PropertyDescriptor{[[Value]]:\nlen, [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true}).\n[...]\n\nFormalsList : FormalParameter\n\n1. If HasInitializer of FormalParameter is true return 0\n2. Return 1.\n\nFormalsList : FormalsList , FormalParameter\n\n1. Let count be the ExpectedArgumentCount of FormalsList.\n2. If HasInitializer of FormalsList is true or HasInitializer of\nFormalParameter is true, return count.\n3. Return count+1.\n", "features": ["default-parameters"], "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/language/expressions/object/method-definition/name-length.js", "description": " >Functions declared as methods have a `length` property that describes the\nnumber of formal parameters.\n", "version": 6, "esid": " 14.3.8", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/language/expressions/object/method-definition/name-name-prop-string.js", "description": " >Functions declared as methods are assigned a `name` property according to\nthe string value of their property name.\n", "version": 6, "esid": " 14.3.8", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/language/expressions/object/method-definition/name-params.js", "description": " >Functions declared as methods honor their declared formal parameters.\n", "version": 6, "esid": " 14.3.8"}, {"path": "./test262-main/test/language/expressions/object/method-definition/name-prop-name-eval-error.js", "description": " >Errors thrown during method definition are forwarded to the runtime.\n", "version": 6, "esid": " 14.3.8"}, {"path": "./test262-main/test/language/expressions/object/method-definition/name-property-desc.js", "description": " >Functions declared as methods are defined as enumerable, writable,\nconfigurable properties on the initialized object.\n", "version": 6, "esid": " 14.3.8", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/language/expressions/object/method-definition/name-prototype.js", "description": " >The prototype of functions declared as methods is the Function prototype.\n", "version": 6, "esid": " 14.3.8"}, {"path": "./test262-main/test/language/expressions/object/method-definition/params-dflt-gen-meth-args-unmapped.js", "description": " Referencing the arguments object from a default parameter (generator method)", "esid": " 14.4.13", "version": 6, "features": ["generators", "default-parameters"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n14.1.19 Runtime Semantics: IteratorBindingInitialization\n\nFormalsList : FormalsList , FormalParameter\n\n1. Let status be the result of performing IteratorBindingInitialization for\nFormalsList using iteratorRecord and environment as the arguments.\n2. ReturnIfAbrupt(status).\n3. Return the result of performing IteratorBindingInitialization for\nFormalParameter using iteratorRecord and environment as the arguments.\n"}, {"path": "./test262-main/test/language/expressions/object/method-definition/params-dflt-gen-meth-ref-arguments.js", "description": " Referencing the arguments object from a default parameter (generator method)", "esid": " 14.4.13", "version": 6, "features": ["generators", "default-parameters"], "info": " |GeneratorMethod :\n* PropertyName ( StrictFormalParameters ) { GeneratorBody }\n\n1. Let propKey be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(propKey).\n3. If the function code for this GeneratorMethod is strict mode code,\nlet strict be true. Otherwise let strict be false.\n4. Let scope be the running execution context's LexicalEnvironment.\n5. Let closure be GeneratorFunctionCreate(Method,\nStrictFormalParameters, GeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n14.1.19 Runtime Semantics: IteratorBindingInitialization\n\nFormalsList : FormalsList , FormalParameter\n\n1. Let status be the result of performing IteratorBindingInitialization for\nFormalsList using iteratorRecord and environment as the arguments.\n2. ReturnIfAbrupt(status).\n3. Return the result of performing IteratorBindingInitialization for\nFormalParameter using iteratorRecord and environment as the arguments.\n"}, {"path": "./test262-main/test/language/expressions/object/method-definition/params-dflt-meth-args-unmapped.js", "description": " Referencing the arguments object from a default parameter (method)", "esid": " 14.3.8", "version": 6, "features": ["default-parameters"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n14.1.19 Runtime Semantics: IteratorBindingInitialization\n\nFormalsList : FormalsList , FormalParameter\n\n1. Let status be the result of performing IteratorBindingInitialization for\nFormalsList using iteratorRecord and environment as the arguments.\n2. ReturnIfAbrupt(status).\n3. Return the result of performing IteratorBindingInitialization for\nFormalParameter using iteratorRecord and environment as the arguments. \n"}, {"path": "./test262-main/test/language/expressions/object/method-definition/params-dflt-meth-ref-arguments.js", "description": " Referencing the arguments object from a default parameter (method)", "esid": " 14.3.8", "version": 6, "features": ["default-parameters"], "info": " |MethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\n[...]\n6. Let closure be FunctionCreate(kind, StrictFormalParameters,\nFunctionBody, scope, strict). If functionPrototype was passed as a\nparameter then pass its value as the functionPrototype optional argument\nof FunctionCreate.\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n14.1.19 Runtime Semantics: IteratorBindingInitialization\n\nFormalsList : FormalsList , FormalParameter\n\n1. Let status be the result of performing IteratorBindingInitialization for\nFormalsList using iteratorRecord and environment as the arguments.\n2. ReturnIfAbrupt(status).\n3. Return the result of performing IteratorBindingInitialization for\nFormalParameter using iteratorRecord and environment as the arguments.\n"}, {"path": "./test262-main/test/language/expressions/object/method-definition/yield-as-generator-method-binding-identifier.js", "description": " >`yield` is a valid BindingIdentifier for GeneratorMethods\nfeatures: [generators]\nes6id: 12.1.1\n", "features": ["generators"], "version": 6, "esid": " 12.1.1"}, {"path": "./test262-main/test/language/expressions/object/method-definition/yield-as-literal-property-name.js", "description": " >`yield` may be used as a literal property name in an object literal\nwithin generator function bodies.\nfeatures: [generators]\nes6id: 12.1.1\n", "features": ["generators"], "version": 6, "esid": " 12.1.1"}, {"path": "./test262-main/test/language/expressions/object/method-definition/yield-as-property-name.js", "description": " >`yield` may be used as a literal property name in an object literal\nwithin generator function bodies.\nfeatures: [generators]\nes6id: 12.1.1\n", "features": ["generators"], "version": 6, "esid": " 12.1.1"}, {"path": "./test262-main/test/language/expressions/object/method-definition/yield-as-statement.js", "description": " >`yield` is a valid statement within generator function bodies.\nfeatures: [generators]\nes6id: 14.4\n", "features": ["generators"], "version": 6, "esid": " 14.4"}, {"path": "./test262-main/test/language/expressions/object/method-definition/yield-as-yield-operand.js", "description": " >`yield` expressions may be used as the right-hand-side of other `yield`\nexpressions.\nfeatures: [generators]\nes6id: 14.4\n", "features": ["generators"], "version": 6, "esid": " 14.4"}, {"path": "./test262-main/test/language/expressions/object/method-definition/yield-newline.js", "description": " >Newlines terminate `yield` expressions.\nfeatures: [generators]\nes6id: 14.4\n", "features": ["generators"], "version": 6, "esid": " 14.4"}, {"path": "./test262-main/test/language/expressions/object/method-definition/yield-return.js", "info": " |Generator can be declared with GeneratorMethod syntax\n", "features": ["generators"], "version": 6, "esid": " 14.4", "author": " Sam Mikes", "description": " can declare generator methods"}, {"path": "./test262-main/test/language/expressions/object/method-definition/yield-star-before-newline.js", "description": " >The right-hand side of a `yield *` expression may appear on a new line.\nfeatures: [generators]\nes6id: 14.4\n", "features": ["generators"], "version": 6, "esid": " 14.4"}, {"path": "./test262-main/test/language/expressions/object/not-defined.js", "version": 6, "esid": " 12.2.5", "description": " >Throws when IdentifierReference is undefined\n"}, {"path": "./test262-main/test/language/expressions/object/prop-def-id-eval-error-2.js", "version": 6, "esid": " 12.2.5.9", "description": " >Errors thrown during IdentifierReference evaluation are forwarded to the\nruntime.\n", "flags": ["noStrict"], "features": ["Proxy"]}, {"path": "./test262-main/test/language/expressions/object/prop-def-id-get-error.js", "version": 6, "esid": " 12.2.5.9", "description": " >Errors thrown during IdentifierReference value retrieval are forwarded to\nthe runtime.\n"}, {"path": "./test262-main/test/language/expressions/object/prop-def-id-valid.js", "version": 6, "esid": " 12.2.5.9", "description": " >When a valid IdentifierReference appears in an object initializer, a new\ndata property is created. The property name is the string value of the\nidentifier, the property value is the value of the identifier, and the\nproperty is enumerable, writable, and configurable.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/language/expressions/object/prop-dup-data-set.js", "version": 5, "esid": " 11.1.5_4-4-b-2", "description": " >Object literal - No SyntaxError if a data property definition is\nfollowed by set accessor definition with the same name\n"}, {"path": "./test262-main/test/language/expressions/object/prop-dup-get-data.js", "version": 5, "esid": " 11.1.5_4-4-c-1", "description": " >Object literal - No SyntaxError if a get accessor property definition\nis followed by a data property definition with the same name\n"}, {"path": "./test262-main/test/language/expressions/object/prop-dup-get-get.js", "version": 5, "esid": " 11.1.5_4-4-d-1", "description": " Object literal - No SyntaxError for duplicate property name (get,get)"}, {"path": "./test262-main/test/language/expressions/object/prop-dup-get-set-get.js", "version": 5, "esid": " 11.1.5_4-4-d-3", "description": " >Object literal - No SyntaxError for duplicate property name\n(get,set,get)\n"}, {"path": "./test262-main/test/language/expressions/object/prop-dup-set-data.js", "version": 5, "esid": " 11.1.5_4-4-c-2", "description": " >Object literal - No SyntaxError if a set accessor property definition\nis followed by a data property definition with the same name\n"}, {"path": "./test262-main/test/language/expressions/object/prop-dup-set-get-set.js", "version": 5, "esid": " 11.1.5_4-4-d-4", "description": " >Object literal - No SyntaxError for duplicate property name\n(set,get,set)\n"}, {"path": "./test262-main/test/language/expressions/object/prop-dup-set-set.js", "version": 5, "esid": " 11.1.5_4-4-d-2", "description": " Object literal - No SyntaxError for duplicate property name (set,set)"}, {"path": "./test262-main/test/language/expressions/object/properties-names-eval-arguments.js", "version": 6, "esid": " 12.2.5", "description": " >property names `eval` and `arguments`\n"}, {"path": "./test262-main/test/language/expressions/object/scope-gen-meth-param-elem-var-close.js", "esid": " sec-functiondeclarationinstantiation", "description": " >sloppy direct evals in params introduce vars\n", "info": " |[...]\n20. Else,\na. NOTE: A separate Environment Record is needed to ensure that bindings created by direct eval calls in the formal parameter list are outside the environment where parameters are declared.\nb. Let calleeEnv be the LexicalEnvironment of calleeContext.\nc. Let env be NewDeclarativeEnvironment(calleeEnv).\nd. Let envRec be env's EnvironmentRecord.\n[...]\n", "flags": ["noStrict"], "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/object/scope-gen-meth-param-elem-var-open.js", "esid": " sec-functiondeclarationinstantiation", "description": " >sloppy direct evals in params introduce vars\n", "info": " |[...]\n20. Else,\na. NOTE: A separate Environment Record is needed to ensure that bindings created by direct eval calls in the formal parameter list are outside the environment where parameters are declared.\nb. Let calleeEnv be the LexicalEnvironment of calleeContext.\nc. Let env be NewDeclarativeEnvironment(calleeEnv).\nd. Let envRec be env's EnvironmentRecord.\n[...]\n", "flags": ["noStrict"], "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/object/scope-gen-meth-paramsbody-var-close.js", "esid": " sec-functiondeclarationinstantiation", "description": " >Disposal of variable environment for the function body\n", "info": " |[...]\n26. If hasParameterExpressions is false, then\n[...]\n27. Else,\na. NOTE A separate Environment Record is needed to ensure that closures\ncreated by expressions in the formal parameter list do not have\nvisibility of declarations in the function body.\nb. Let varEnv be NewDeclarativeEnvironment(env).\nc. Let varEnvRec be varEnv's EnvironmentRecord.\nd. Set the VariableEnvironment of calleeContext to varEnv.\ne. Let instantiatedVarNames be a new empty List.\n[...]\n", "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/object/scope-meth-param-elem-var-close.js", "esid": " sec-functiondeclarationinstantiation", "description": " >sloppy direct evals in params introduce vars\n", "info": " |[...]\n20. Else,\na. NOTE: A separate Environment Record is needed to ensure that bindings created by direct eval calls in the formal parameter list are outside the environment where parameters are declared.\nb. Let calleeEnv be the LexicalEnvironment of calleeContext.\nc. Let env be NewDeclarativeEnvironment(calleeEnv).\nd. Let envRec be env's EnvironmentRecord.\n[...]\n", "flags": ["noStrict"]}, {"path": "./test262-main/test/language/expressions/object/scope-meth-param-elem-var-open.js", "esid": " sec-functiondeclarationinstantiation", "description": " >sloppy direct evals in params introduce vars\n", "info": " |[...]\n20. Else,\na. NOTE: A separate Environment Record is needed to ensure that bindings created by direct eval calls in the formal parameter list are outside the environment where parameters are declared.\nb. Let calleeEnv be the LexicalEnvironment of calleeContext.\nc. Let env be NewDeclarativeEnvironment(calleeEnv).\nd. Let envRec be env's EnvironmentRecord.\n[...]\n", "flags": ["noStrict"]}, {"path": "./test262-main/test/language/expressions/object/scope-meth-paramsbody-var-close.js", "esid": " sec-functiondeclarationinstantiation", "description": " >Disposal of variable environment for the function body\n", "info": " |[...]\n26. If hasParameterExpressions is false, then\n[...]\n27. Else,\na. NOTE A separate Environment Record is needed to ensure that closures\ncreated by expressions in the formal parameter list do not have\nvisibility of declarations in the function body.\nb. Let varEnv be NewDeclarativeEnvironment(env).\nc. Let varEnvRec be varEnv's EnvironmentRecord.\nd. Set the VariableEnvironment of calleeContext to varEnv.\ne. Let instantiatedVarNames be a new empty List.\n[...]\n"}, {"path": "./test262-main/test/language/expressions/object/setter-length-dflt.js", "version": 6, "esid": " 14.1.6", "description": " >Default parameters' effect on function length\n", "info": " |Function length is counted by the non initialized parameters in the left.\n\n9.2.4 FunctionInitialize (F, kind, ParameterList, Body, Scope)\n\n[...]\n2. Let len be the ExpectedArgumentCount of ParameterList.\n3. Perform ! DefinePropertyOrThrow(F, \"length\", PropertyDescriptor{[[Value]]:\nlen, [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true}).\n[...]\n\nFormalsList : FormalParameter\n\n1. If HasInitializer of FormalParameter is true return 0\n2. Return 1.\n\nFormalsList : FormalsList , FormalParameter\n\n1. Let count be the ExpectedArgumentCount of FormalsList.\n2. If HasInitializer of FormalsList is true or HasInitializer of\nFormalParameter is true, return count.\n3. Return count+1.\n", "features": ["default-parameters"], "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/language/expressions/right-shift/order-of-evaluation.js", "esid": " sec-signed-right-shift-operator-runtime-semantics-evaluation", "description": " Type coercion order of operations for right-shift operator", "features": ["Symbol"], "info": " |Evaluate lhs\nEvaluate rhs\nToNumeric(lhs)\nToNumeric(rhs)\n"}, {"path": "./test262-main/test/language/expressions/subtraction/order-of-evaluation.js", "esid": " sec-subtraction-operator-minus-runtime-semantics-evaluation", "description": " Type coercion order of operations for subtraction operator", "features": ["Symbol"], "info": " |Evaluate lhs\nEvaluate rhs\nToNumeric(lhs)\nToNumeric(rhs)\n"}, {"path": "./test262-main/test/language/expressions/tagged-template/cache-different-functions-same-site.js", "esid": " sec-gettemplateobject", "description": " Templates are cached by source location inside a function", "info": " >1. For each element _e_ of _templateRegistry_, do\n1. If _e_.[[Site]] is the same Parse Node as _templateLiteral_, then\n1. Return _e_.[[Array]].\n"}, {"path": "./test262-main/test/language/expressions/tagged-template/cache-differing-expressions-eval.js", "esid": " sec-gettemplateobject", "description": " Template caching using distinct expressions within `eval`", "info": " >1. For each element _e_ of _templateRegistry_, do\n1. If _e_.[[Site]] is the same Parse Node as _templateLiteral_, then\n1. Return _e_.[[Array]].\n"}, {"path": "./test262-main/test/language/expressions/tagged-template/cache-differing-expressions-new-function.js", "esid": " sec-gettemplateobject", "description": " Template caching using distinct expressions within `new Function`", "info": " >1. For each element _e_ of _templateRegistry_, do\n1. If _e_.[[Site]] is the same Parse Node as _templateLiteral_, then\n1. Return _e_.[[Array]].\n"}, {"path": "./test262-main/test/language/expressions/tagged-template/cache-differing-expressions.js", "esid": " sec-gettemplateobject", "description": " Template caching using distinct expressions", "info": " >1. For each element _e_ of _templateRegistry_, do\n1. If _e_.[[Site]] is the same Parse Node as _templateLiteral_, then\n1. Return _e_.[[Array]].\n"}, {"path": "./test262-main/test/language/expressions/tagged-template/cache-differing-raw-strings.js", "esid": " sec-gettemplateobject", "description": " Templates are cached according to their site", "info": " >1. For each element _e_ of _templateRegistry_, do\n1. If _e_.[[Site]] is the same Parse Node as _templateLiteral_, then\n1. Return _e_.[[Array]].\n"}, {"path": "./test262-main/test/language/expressions/tagged-template/cache-differing-string-count.js", "esid": " sec-gettemplateobject", "description": " Templates are cached according to the site", "info": " >1. For each element _e_ of _templateRegistry_, do\n1. If _e_.[[Site]] is the same Parse Node as _templateLiteral_, then\n1. Return _e_.[[Array]].\n"}, {"path": "./test262-main/test/language/expressions/tagged-template/cache-eval-inner-function.js", "esid": " sec-gettemplateobject", "description": " Templates are cached by source location inside a function", "info": " >Each time eval is called, it is a different site. However, a loop within\nthe eval is considered the same site. This is a regression test for an\nissue that Caitlin Potter faced in implementations of the new template\ncaching semantics in both V8 and JSC.\n\n1. For each element _e_ of _templateRegistry_, do\n1. If _e_.[[Site]] is the same Parse Node as _templateLiteral_, then\n1. Return _e_.[[Array]].\n"}, {"path": "./test262-main/test/language/expressions/tagged-template/cache-identical-source-eval.js", "esid": " sec-gettemplateobject", "description": " Templates are cached by site, even using identical expressions within `eval`", "info": " >1. For each element _e_ of _templateRegistry_, do\n1. If _e_.[[Site]] is the same Parse Node as _templateLiteral_, then\n1. Return _e_.[[Array]].\n"}, {"path": "./test262-main/test/language/expressions/tagged-template/cache-identical-source-new-function.js", "esid": " sec-gettemplateobject", "description": " Template caching is by site, using identical expressions within `new Function`", "info": " >1. For each element _e_ of _templateRegistry_, do\n1. If _e_.[[Site]] is the same Parse Node as _templateLiteral_, then\n1. Return _e_.[[Array]].\n"}, {"path": "./test262-main/test/language/expressions/tagged-template/cache-identical-source.js", "esid": " sec-gettemplateobject", "description": " Templates are cached by site, even when using identical expressions", "info": " >1. For each element _e_ of _templateRegistry_, do\n1. If _e_.[[Site]] is the same Parse Node as _templateLiteral_, then\n1. Return _e_.[[Array]].\n"}, {"path": "./test262-main/test/language/expressions/tagged-template/cache-same-site-top-level.js", "esid": " sec-gettemplateobject", "description": " Templates are cached by source location inside a function", "info": " >1. For each element _e_ of _templateRegistry_, do\n1. If _e_.[[Site]] is the same Parse Node as _templateLiteral_, then\n1. Return _e_.[[Array]].\n"}, {"path": "./test262-main/test/language/expressions/tagged-template/cache-same-site.js", "esid": " sec-gettemplateobject", "description": " Templates are cached by source location inside a function", "info": " >1. For each element _e_ of _templateRegistry_, do\n1. If _e_.[[Site]] is the same Parse Node as _templateLiteral_, then\n1. Return _e_.[[Array]].\n"}, {"path": "./test262-main/test/language/expressions/tagged-template/call-expression-argument-list-evaluation.js", "version": 6, "esid": " 12.3.7", "description": " Argument list evalution for call expresions", "info": " |A tagged template is a function call where the arguments of the call are\nderived from a TemplateLiteral. The actual arguments include a template\nobject and the values produced by evaluating the expressions embedded\nwithin the TemplateLiteral.\n"}, {"path": "./test262-main/test/language/expressions/tagged-template/call-expression-context-no-strict.js", "version": 6, "esid": " 12.3.7", "description": " Invocation context for call expressions", "info": " |A tagged template is a function call where the arguments of the call are\nderived from a TemplateLiteral. The actual arguments include a template\nobject and the values produced by evaluating the expressions embedded\nwithin the TemplateLiteral.\n", "flags": ["noStrict"]}, {"path": "./test262-main/test/language/expressions/tagged-template/call-expression-context-strict.js", "version": 6, "esid": " 12.3.7", "description": " Invocation context for call expressions", "info": " |A tagged template is a function call where the arguments of the call are\nderived from a TemplateLiteral. The actual arguments include a template\nobject and the values produced by evaluating the expressions embedded\nwithin the TemplateLiteral.\n", "flags": ["onlyStrict"]}, {"path": "./test262-main/test/language/expressions/tagged-template/chained-application.js", "version": 6, "esid": " 12.3.7", "description": " >Tagged templates may be chained and are applied in a left-to-right order.\n"}, {"path": "./test262-main/test/language/expressions/tagged-template/constructor-invocation.js", "version": 6, "esid": " 12.3.7", "description": " >Tagged template application takes precedence over `new` invocation.\n"}, {"path": "./test262-main/test/language/expressions/tagged-template/member-expression-argument-list-evaluation.js", "version": 6, "esid": " 12.3.7", "description": " Argument list evalution for member expresions", "info": " |A tagged template is a function call where the arguments of the call are\nderived from a TemplateLiteral. The actual arguments include a template\nobject and the values produced by evaluating the expressions embedded\nwithin the TemplateLiteral.\n"}, {"path": "./test262-main/test/language/expressions/tagged-template/member-expression-context.js", "version": 6, "esid": " 12.3.7", "description": " Invocation context for member expressions", "info": " |A tagged template is a function call where the arguments of the call are\nderived from a TemplateLiteral. The actual arguments include a template\nobject and the values produced by evaluating the expressions embedded\nwithin the TemplateLiteral.\n"}, {"path": "./test262-main/test/language/expressions/tagged-template/template-object-frozen-non-strict.js", "version": 6, "esid": " 12.3.7", "description": " Template objects are frozen (as demonstrated outside of strict mode)", "info": " |The first argument to a tagged template should be frozen and define a `raw`\nproperty that is also frozen.\n", "flags": ["noStrict"]}, {"path": "./test262-main/test/language/expressions/tagged-template/template-object-frozen-strict.js", "version": 6, "esid": " 12.3.7", "description": " Template objects are frozen (as demonstrated within strict mode)", "info": " |The first argument to a tagged template should be frozen and define a `raw`\nproperty that is also frozen.\n", "flags": ["onlyStrict"]}, {"path": "./test262-main/test/language/expressions/tagged-template/template-object-template-map.js", "esid": " sec-gettemplateobject", "description": " >Template objects are canonicalized separately for each realm using its Realm Record's [[TemplateMap]]. Each [[Site]] value is a Parse Node that is a TemplateLiteral\n", "info": " |Let rawStrings be TemplateStrings of templateLiteral with argument true.\nLet realm be the current Realm Record.\nLet templateRegistry be realm.[[TemplateMap]].\nFor each element e of templateRegistry, do\nIf e.[[Site]] is the same Parse Node as templateLiteral, then\nReturn e.[[Array]].\n\n"}, {"path": "./test262-main/test/language/expressions/tagged-template/template-object.js", "esid": " sec-gettemplateobject", "description": " Properties of the template object", "info": " |The first argument to a tagged template should be a template object as\ndefined by the GetTemplateObject abstract operation.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/language/expressions/template-literal/evaluation-order.js", "version": 6, "esid": " 12.2.8", "description": " Expressions should be evaluated in left-to-right order."}, {"path": "./test262-main/test/language/expressions/template-literal/literal-expr-abrupt.js", "version": 6, "esid": " 12.2.8.5", "description": " Abrupt completion when evaluating expression of TemplateLiteral", "info": " |TemplateLiteral : TemplateHead Expression TemplateSpans\n\n1. Let head be the TV of TemplateHead as defined in 11.8.6.\n2. Let sub be the result of evaluating Expression.\n3. Let middle be ToString(sub).\n4. ReturnIfAbrupt(middle).\n"}, {"path": "./test262-main/test/language/expressions/template-literal/literal-expr-function.js", "version": 6, "esid": " 12.2.8.5", "description": " Function invocation in expression position of TemplateLiteral", "info": " |TemplateLiteral : TemplateHead Expression TemplateSpans\n\n1. Let head be the TV of TemplateHead as defined in 11.8.6.\n2. Let sub be the result of evaluating Expression.\n3. Let middle be ToString(sub).\n"}, {"path": "./test262-main/test/language/expressions/template-literal/literal-expr-member-expr.js", "version": 6, "esid": " 12.2.8.5", "description": " MemberExpression in expression position of TemplateLiteral", "info": " |TemplateLiteral : TemplateHead Expression TemplateSpans\n\n1. Let head be the TV of TemplateHead as defined in 11.8.6.\n2. Let sub be the result of evaluating Expression.\n3. Let middle be ToString(sub).\n"}, {"path": "./test262-main/test/language/expressions/template-literal/literal-expr-method.js", "version": 6, "esid": " 12.2.8.5", "description": " Method invocation in expression position of TemplateLiteral", "info": " |TemplateLiteral : TemplateHead Expression TemplateSpans\n\n1. Let head be the TV of TemplateHead as defined in 11.8.6.\n2. Let sub be the result of evaluating Expression.\n3. Let middle be ToString(sub).\n"}, {"path": "./test262-main/test/language/expressions/template-literal/literal-expr-obj.js", "version": 6, "esid": " 12.2.8.5", "description": " Object reference in expression position of TemplateLiteral", "info": " |TemplateLiteral : TemplateHead Expression TemplateSpans\n\n1. Let head be the TV of TemplateHead as defined in 11.8.6.\n2. Let sub be the result of evaluating Expression.\n3. Let middle be ToString(sub).\n"}, {"path": "./test262-main/test/language/expressions/template-literal/literal-expr-primitive.js", "version": 6, "esid": " 12.2.8.5", "description": " Primitive value in expression position of TemplateLiteral", "info": " |TemplateLiteral : TemplateHead Expression TemplateSpans\n\n1. Let head be the TV of TemplateHead as defined in 11.8.6.\n2. Let sub be the result of evaluating Expression.\n3. Let middle be ToString(sub).\n"}, {"path": "./test262-main/test/language/expressions/template-literal/literal-expr-template.js", "version": 6, "esid": " 12.2.8.5", "description": " Template literal in expression position of TemplateLiteral", "info": " |TemplateLiteral : TemplateHead Expression TemplateSpans\n\n1. Let head be the TV of TemplateHead as defined in 11.8.6.\n2. Let sub be the result of evaluating Expression.\n3. Let middle be ToString(sub).\n"}, {"path": "./test262-main/test/language/expressions/template-literal/literal-expr-tostr-error.js", "version": 6, "esid": " 12.2.8.5", "description": " Abrupt completion when converting expression value of TemplateLiteral", "info": " |TemplateLiteral : TemplateHead Expression TemplateSpans\n\n1. Let head be the TV of TemplateHead as defined in 11.8.6.\n2. Let sub be the result of evaluating Expression.\n3. Let middle be ToString(sub).\n4. ReturnIfAbrupt(middle).\n"}, {"path": "./test262-main/test/language/expressions/template-literal/middle-list-many-expr-abrupt.js", "version": 6, "esid": " 12.2.8.5", "description": " Abrupt completion when evaluating expression of TemplateMiddleList", "info": " |TemplateMiddleList : TemplateMiddleList TemplateMiddle Expression\n\n1. Let rest be the result of evaluating TemplateMiddleList .\n2. ReturnIfAbrupt(rest).\n3. Let middle be the TV of TemplateMiddle as defined in 11.8.6.\n4. Let sub be the result of evaluating Expression.\n5. Let last be ToString(sub).\n6. ReturnIfAbrupt(last).\n"}, {"path": "./test262-main/test/language/expressions/template-literal/middle-list-many-expr-function.js", "version": 6, "esid": " 12.2.8.5", "description": " Function invocation in expression position of TemplateMiddleList", "info": " |TemplateMiddleList : TemplateMiddleList TemplateMiddle Expression\n\n1. Let rest be the result of evaluating TemplateMiddleList .\n2. ReturnIfAbrupt(rest).\n3. Let middle be the TV of TemplateMiddle as defined in 11.8.6.\n4. Let sub be the result of evaluating Expression.\n5. Let last be ToString(sub).\n"}, {"path": "./test262-main/test/language/expressions/template-literal/middle-list-many-expr-member-expr.js", "version": 6, "esid": " 12.2.8.5", "description": " MemberExpression in expression position of TemplateMiddleList", "info": " |TemplateMiddleList : TemplateMiddleList TemplateMiddle Expression\n\n1. Let rest be the result of evaluating TemplateMiddleList .\n2. ReturnIfAbrupt(rest).\n3. Let middle be the TV of TemplateMiddle as defined in 11.8.6.\n4. Let sub be the result of evaluating Expression.\n5. Let last be ToString(sub).\n"}, {"path": "./test262-main/test/language/expressions/template-literal/middle-list-many-expr-method.js", "version": 6, "esid": " 12.2.8.5", "description": " Method invocation in expression position of TemplateMiddleList", "info": " |TemplateMiddleList : TemplateMiddleList TemplateMiddle Expression\n\n1. Let rest be the result of evaluating TemplateMiddleList .\n2. ReturnIfAbrupt(rest).\n3. Let middle be the TV of TemplateMiddle as defined in 11.8.6.\n4. Let sub be the result of evaluating Expression.\n5. Let last be ToString(sub).\n"}, {"path": "./test262-main/test/language/expressions/template-literal/middle-list-many-expr-obj.js", "version": 6, "esid": " 12.2.8.5", "description": " Object reference in expression position of TemplateMiddleList", "info": " |TemplateMiddleList : TemplateMiddleList TemplateMiddle Expression\n\n1. Let rest be the result of evaluating TemplateMiddleList .\n2. ReturnIfAbrupt(rest).\n3. Let middle be the TV of TemplateMiddle as defined in 11.8.6.\n4. Let sub be the result of evaluating Expression.\n5. Let last be ToString(sub).\n"}, {"path": "./test262-main/test/language/expressions/template-literal/middle-list-many-expr-primitive.js", "version": 6, "esid": " 12.2.8.5", "description": " Primitive value in expression position of TemplateMiddleList", "info": " |TemplateMiddleList : TemplateMiddleList TemplateMiddle Expression\n\n1. Let rest be the result of evaluating TemplateMiddleList .\n2. ReturnIfAbrupt(rest).\n3. Let middle be the TV of TemplateMiddle as defined in 11.8.6.\n4. Let sub be the result of evaluating Expression.\n5. Let last be ToString(sub).\n"}, {"path": "./test262-main/test/language/expressions/template-literal/middle-list-many-expr-template.js", "version": 6, "esid": " 12.2.8.5", "description": " Template literal in expression position of TemplateMiddleList", "info": " |TemplateMiddleList : TemplateMiddleList TemplateMiddle Expression\n\n1. Let rest be the result of evaluating TemplateMiddleList .\n2. ReturnIfAbrupt(rest).\n3. Let middle be the TV of TemplateMiddle as defined in 11.8.6.\n4. Let sub be the result of evaluating Expression.\n5. Let last be ToString(sub).\n"}, {"path": "./test262-main/test/language/expressions/template-literal/middle-list-many-expr-tostr-error.js", "version": 6, "esid": " 12.2.8.5", "description": " Abrupt completion when converting expression value of TemplateMiddleList", "info": " |TemplateMiddleList : TemplateMiddleList TemplateMiddle Expression\n\n1. Let rest be the result of evaluating TemplateMiddleList .\n2. ReturnIfAbrupt(rest).\n3. Let middle be the TV of TemplateMiddle as defined in 11.8.6.\n4. Let sub be the result of evaluating Expression.\n5. Let last be ToString(sub).\n6. ReturnIfAbrupt(last).\n"}, {"path": "./test262-main/test/language/expressions/template-literal/middle-list-one-expr-abrupt.js", "version": 6, "esid": " 12.2.8.5", "description": " Abrupt completion when evaluating expression of TemplateMiddleList", "info": " |TemplateMiddleList : TemplateMiddle Expression\n\n1. Let head be the TV of TemplateMiddle as defined in 11.8.6.\n2. Let sub be the result of evaluating Expression.\n3. Let middle be ToString(sub).\n4. ReturnIfAbrupt(middle).\n"}, {"path": "./test262-main/test/language/expressions/template-literal/middle-list-one-expr-function.js", "version": 6, "esid": " 12.2.8.5", "description": " Function invocation in expression position of TemplateMiddleList", "info": " |TemplateMiddleList : TemplateMiddle Expression\n\n1. Let head be the TV of TemplateMiddle as defined in 11.8.6.\n2. Let sub be the result of evaluating Expression.\n3. Let middle be ToString(sub).\n"}, {"path": "./test262-main/test/language/expressions/template-literal/middle-list-one-expr-member-expr.js", "version": 6, "esid": " 12.2.8.5", "description": " MemberExpression in expression position of TemplateMiddleList", "info": " |TemplateMiddleList : TemplateMiddle Expression\n\n1. Let head be the TV of TemplateMiddle as defined in 11.8.6.\n2. Let sub be the result of evaluating Expression.\n3. Let middle be ToString(sub).\n4. ReturnIfAbrupt(middle).\n"}, {"path": "./test262-main/test/language/expressions/template-literal/middle-list-one-expr-method.js", "version": 6, "esid": " 12.2.8.5", "description": " Method invocation in expression position of TemplateMiddleList", "info": " |TemplateMiddleList : TemplateMiddle Expression\n\n1. Let head be the TV of TemplateMiddle as defined in 11.8.6.\n2. Let sub be the result of evaluating Expression.\n3. Let middle be ToString(sub).\n4. ReturnIfAbrupt(middle).\n"}, {"path": "./test262-main/test/language/expressions/template-literal/middle-list-one-expr-obj.js", "version": 6, "esid": " 12.2.8.5", "description": " Object reference in expression position of TemplateMiddleList", "info": " |TemplateMiddleList : TemplateMiddle Expression\n\n1. Let head be the TV of TemplateMiddle as defined in 11.8.6.\n2. Let sub be the result of evaluating Expression.\n3. Let middle be ToString(sub).\n4. ReturnIfAbrupt(middle).\n"}, {"path": "./test262-main/test/language/expressions/template-literal/middle-list-one-expr-primitive.js", "version": 6, "esid": " 12.2.8.5", "description": " Primitive value in expression position of TemplateMiddleList", "info": " |TemplateMiddleList : TemplateMiddle Expression\n\n1. Let head be the TV of TemplateMiddle as defined in 11.8.6.\n2. Let sub be the result of evaluating Expression.\n3. Let middle be ToString(sub).\n"}, {"path": "./test262-main/test/language/expressions/template-literal/middle-list-one-expr-template.js", "version": 6, "esid": " 12.2.8.5", "description": " Template literal in expression position of TemplateMiddleList", "info": " |TemplateMiddleList : TemplateMiddle Expression\n\n1. Let head be the TV of TemplateMiddle as defined in 11.8.6.\n2. Let sub be the result of evaluating Expression.\n3. Let middle be ToString(sub).\n"}, {"path": "./test262-main/test/language/expressions/template-literal/middle-list-one-expr-tostr-error.js", "version": 6, "esid": " 12.2.8.5", "description": " Abrupt completion when converting expression value of TemplateMiddleList", "info": " |TemplateMiddleList : TemplateMiddle Expression\n\n1. Let head be the TV of TemplateMiddle as defined in 11.8.6.\n2. Let sub be the result of evaluating Expression.\n3. Let middle be ToString(sub).\n4. ReturnIfAbrupt(middle).\n"}, {"path": "./test262-main/test/language/expressions/template-literal/mongolian-vowel-separator-eval.js", "esid": " sec-unicode-format-control-characters", "description": " >Mongolian Vowel Separator can appear in template literals (eval code).\n", "info": " |11.1 Unicode Format-Control Characters\n\nThe Unicode format-control characters (i.e., the characters in category \u201cCf\u201d\nin the Unicode Character Database such as LEFT-TO-RIGHT MARK or RIGHT-TO-LEFT\nMARK) are control codes used to control the formatting of a range of text in\nthe absence of higher-level protocols for this (such as mark-up languages).\n\nIt is useful to allow format-control characters in source text to facilitate\nediting and display. All format control characters may be used within comments,\nand within string literals, template literals, and regular expression literals.\n", "features": ["u180e"]}, {"path": "./test262-main/test/language/expressions/template-literal/mongolian-vowel-separator.js", "esid": " sec-unicode-format-control-characters", "description": " >Mongolian Vowel Separator can appear in template literals.\n", "info": " |11.1 Unicode Format-Control Characters\n\nThe Unicode format-control characters (i.e., the characters in category \u201cCf\u201d\nin the Unicode Character Database such as LEFT-TO-RIGHT MARK or RIGHT-TO-LEFT\nMARK) are control codes used to control the formatting of a range of text in\nthe absence of higher-level protocols for this (such as mark-up languages).\n\nIt is useful to allow format-control characters in source text to facilitate\nediting and display. All format control characters may be used within comments,\nand within string literals, template literals, and regular expression literals.\n", "features": ["u180e"]}, {"path": "./test262-main/test/language/expressions/template-literal/no-sub.js", "version": 6, "esid": " 12.2.8.5", "description": " Evaluation of NoSubstitutionTemplate", "info": " |12.2.8.5 Runtime Semantics: Evaluation\nTemplateLiteral : NoSubstitutionTemplate\n\n1. Return the string value whose code units are the elements of the TV of\nNoSubstitutionTemplate as defined in 11.8.6.\n"}, {"path": "./test262-main/test/language/expressions/template-literal/tv-character-escape-sequence.js", "version": 6, "esid": " 11.8.6.1", "description": " Template values of character escape sequences", "info": " |The TV of TemplateCharacter :: \\ EscapeSequence is the SV of\nEscapeSequence.\nThe TRV of TemplateCharacter :: \\ EscapeSequence is the sequence consisting\nof the code unit value 0x005C followed by the code units of TRV of\nEscapeSequence.\nThe TRV of CharacterEscapeSequence :: SingleEscapeCharacter is the TRV of\nthe SingleEscapeCharacter.\nThe TRV of CharacterEscapeSequence :: NonEscapeCharacter is the SV of the\nNonEscapeCharacter.\n"}, {"path": "./test262-main/test/language/expressions/template-literal/tv-hex-escape-sequence.js", "version": 6, "esid": " 11.8.6.1", "description": " Template values of hex escape sequences", "info": " |The TV of TemplateCharacter :: \\ EscapeSequence is the SV of\nEscapeSequence.\nThe SV of UnicodeEscapeSequence :: u{ HexDigits } is the UTF16Encoding\n(10.1.1) of the MV of HexDigits.\nThe TRV of UnicodeEscapeSequence :: u{ HexDigits } is the sequence\nconsisting of code unit value 0x0075 followed by code unit value 0x007B\nfollowed by TRV of HexDigits followed by code unit value 0x007D.\n"}, {"path": "./test262-main/test/language/expressions/template-literal/tv-line-continuation.js", "version": 6, "esid": " 11.8.6.1", "description": " Template values of line continuations", "info": " |The TV of LineContinuation :: \\ LineTerminatorSequence is the empty code\nunit sequence.\nThe TRV of LineContinuation :: \\ LineTerminatorSequence is the sequence\nconsisting of the code unit value 0x005C followed by the code units of TRV\nof LineTerminatorSequence.\n"}, {"path": "./test262-main/test/language/expressions/template-literal/tv-line-terminator-sequence.js", "version": 6, "esid": " 11.8.6.1", "description": " Template values of line terminator sequences", "info": " |The TV of TemplateCharacter :: LineTerminatorSequence is the TRV of\nLineTerminatorSequence.\nThe TRV of LineTerminatorSequence :: <LF> is the code unit value 0x000A.\nThe TRV of LineTerminatorSequence :: <CR> is the code unit value 0x000A.\nThe TRV of LineTerminatorSequence :: <LS> is the code unit value 0x2028.\nThe TRV of LineTerminatorSequence :: <PS> is the code unit value 0x2029.\nThe TRV of LineTerminatorSequence :: <CR><LF> is the sequence consisting of\nthe code unit value 0x000A.\n"}, {"path": "./test262-main/test/language/expressions/template-literal/tv-no-substitution.js", "version": 6, "esid": " 11.8.6.1", "description": " Template values of templates without substitution patterns", "info": " |The TV and TRV of NoSubstitutionTemplate :: `` is the empty code unit\nsequence.\nThe TV of NoSubstitutionTemplate :: ` TemplateCharacters ` is the TV of\nTemplateCharacters.\nThe TRV of NoSubstitutionTemplate :: ` TemplateCharacters ` is the TRV of\nTemplateCharacters.\n"}, {"path": "./test262-main/test/language/expressions/template-literal/tv-null-character-escape-sequence.js", "version": 6, "esid": " 11.8.6.1", "description": " Template values of the null character escape sequence", "info": " |The TV of TemplateCharacter :: \\ EscapeSequence is the SV of\nEscapeSequence.\nThe TRV of EscapeSequence :: 0 is the code unit value 0x0030.\n"}, {"path": "./test262-main/test/language/expressions/template-literal/tv-template-character.js", "version": 6, "esid": " 11.8.6.1", "description": " Template values of single characters", "info": " |The TV of TemplateCharacters :: TemplateCharacter is the TV of\nTemplateCharacter.\nThe TV of TemplateCharacter :: SourceCharacter but not one of ` or \\ or $\nor LineTerminator is the UTF16Encoding (10.1.1) of the code point value of\nSourceCharacter.\nThe TV of TemplateCharacter :: $ is the code unit value 0x0024.\n\nThe TRV of TemplateCharacters :: TemplateCharacter is the TRV of\nTemplateCharacter.\nThe TRV of TemplateCharacter :: SourceCharacter but not one of ` or \\ or $\nor LineTerminator is the UTF16Encoding (10.1.1) of the code point value of\nSourceCharacter.\nThe TRV of TemplateCharacter :: $ is the code unit value 0x0024.\n"}, {"path": "./test262-main/test/language/expressions/template-literal/tv-template-characters.js", "version": 6, "esid": " 11.8.6.1", "description": " Template values of multiple template characters", "info": " |The TV of TemplateCharacters :: TemplateCharacter TemplateCharacters is a\nsequence consisting of the code units in the TV of TemplateCharacter\nfollowed by all the code units in the TV of TemplateCharacters in order.\nThe TRV of TemplateCharacters :: TemplateCharacter TemplateCharacters is a\nsequence consisting of the code units in the TRV of TemplateCharacter\nfollowed by all the code units in the TRV of TemplateCharacters, in order.\n"}, {"path": "./test262-main/test/language/expressions/template-literal/tv-template-head.js", "version": 6, "esid": " 11.8.6.1", "description": " Template values of the template head pattern", "info": " |The TV and TRV of TemplateHead :: `${ is the empty code unit sequence.\nThe TV of TemplateHead :: ` TemplateCharacters ${ is the TV of\nTemplateCharacters.\nThe TRV of TemplateHead :: ` TemplateCharacters ${ is the TRV of\nTemplateCharacters.\n"}, {"path": "./test262-main/test/language/expressions/template-literal/tv-template-middle.js", "version": 6, "esid": " 11.8.6.1", "description": " Template values of the template middle pattern", "info": " |The TV and TRV of TemplateMiddle :: }${ is the empty code unit sequence.\nThe TRV of TemplateMiddle :: } TemplateCharacters ${ is the TRV of\nTemplateCharacters.\n"}, {"path": "./test262-main/test/language/expressions/template-literal/tv-template-tail.js", "version": 6, "esid": " 11.8.6.1", "description": " Template values of the template tail pattern", "info": " |The TV and TRV of TemplateTail :: }` is the empty code unit sequence.\nThe TV of TemplateTail :: } TemplateCharacters ` is the TV of\nTemplateCharacters.\nThe TRV of TemplateTail :: } TemplateCharacters ` is the TRV of\nTemplateCharacters.\n"}, {"path": "./test262-main/test/language/expressions/template-literal/tv-zwnbsp.js", "version": 6, "esid": " 11.1.8.6.1", "description": " Template values of the zero width no-break space character", "info": " |The zero width no-break space format-control character may be used within\ntemplate literals.\n"}, {"path": "./test262-main/test/language/expressions/typeof/get-value.js", "esid": " sec-typeof-operator-runtime-semantics-evaluation", "description": " Operator \"typeof\" uses GetValue", "info": " |The typeof Operator\n\nRuntime Semantics: Evaluation\n\n...\nSet val to ? GetValue(val).\n...\n\n"}, {"path": "./test262-main/test/language/expressions/typeof/proxy.js", "description": " |The typeof operator on an proxy should match the typeof value the proxy wraps,\neven if the proxy is later revoked.\n", "esid": " sec-typeof-operator", "info": " |The typeof Operator\n\nRuntime Semantics: Evaluation\n\n...\nReturn a String according to Table 35.\n\n#table-35\n\nObject (does not implement [[Call]]) \"object\"\nObject (implements [[Call]]) \"function\"\n\n\nProxyCreate ( target, handler )\n...\n7. If IsCallable(target) is true, then\na. Set P.[[Call]] as specified in 9.5.12.\n...\n", "features": ["Proxy"]}, {"path": "./test262-main/test/language/expressions/typeof/symbol.js", "esid": " sec-typeof-operator-runtime-semantics-evaluation", "description": " typeof Symbol() and Object(Symbol)", "info": " |The typeof Operator\n\nRuntime Semantics: Evaluation\n\n...\nReturn a String according to Table 35.\n\n#table-35\n\nSymbol \"symbol\"\nObject(Symbol()) \"object\"\n\n", "features": ["Symbol"]}, {"path": "./test262-main/test/language/expressions/unsigned-right-shift/order-of-evaluation.js", "esid": " sec-unsigned-right-shift-operator-runtime-semantics-evaluation", "description": " Type coercion order of operations for unsigned-right-shift operator", "features": ["Symbol"], "info": " |Evaluate lhs\nEvaluate rhs\nToNumeric(lhs)\nToNumeric(rhs)\n"}, {"path": "./test262-main/test/language/expressions/yield/arguments-object-attributes.js", "version": 6, "esid": " 25.2", "description": " >Attributes of the `arguments` object are valid yield expression operands.\n", "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/yield/captured-free-vars.js", "version": 6, "esid": " 25.2", "description": " >Free variables captured within the GeneratorFunction closure are valid\nyield expression operands.\n", "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/yield/formal-parameters-after-reassignment-non-strict.js", "version": 6, "esid": " 25.2", "description": " >Formal parameters are valid yield expression operands.\n", "flags": ["noStrict"], "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/yield/formal-parameters-after-reassignment-strict.js", "version": 6, "esid": " 25.2", "description": " >Formal parameters are valid yield expression operands.\n", "flags": ["onlyStrict"], "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/yield/formal-parameters.js", "version": 6, "esid": " 25.2", "description": " >Formal parameters are valid yield expression operands.\n", "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/yield/from-catch.js", "version": 6, "esid": " 25.2", "description": " >The behavior of `yield` expressions should not be affected when they appear\nwithin the `catch` block of `try` statements.\n", "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/yield/from-try.js", "version": 6, "esid": " 25.2", "description": " >The behavior of `yield` expressions should not be affected when they appear\nwithin the `try` block of `try` statements.\n", "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/yield/from-with.js", "version": 6, "esid": " 25.2", "description": " >The operand to a `yield` expression should honor the semantics of the\n`with` statement.\n", "flags": ["noStrict"], "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/yield/in-rltn-expr.js", "esid": " 14.4", "version": 6, "description": " >YieldExpression contextually recognizes the `in` keyword as part of a\nRelationalExpression\n", "info": " |Syntax\n\nyield [no LineTerminator here] AssignmentExpression[?In, +Yield]\n", "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/yield/iter-value-specified.js", "version": 6, "esid": " 25.2", "description": " >When the `next` method of a generator-produced iterable is invoked without\nan argument, the corresponding `yield` expression should be evaluated as\n`undefined`.\n", "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/yield/iter-value-unspecified.js", "version": 6, "esid": " 25.2", "description": " >When the `next` method of a generator-produced iterable is invoked without\nan argument, the corresponding `yield` expression should be evaluated as\n`undefined`.\n", "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/yield/rhs-iter.js", "esid": " 14.4.14", "version": 6, "description": " >Iteration protocol is not initiated for non-delegating YieldExpression\n", "info": " |YieldExpression:yieldAssignmentExpression\n\n1. Let exprRef be the result of evaluating AssignmentExpression.\n2. Let value be ? GetValue(exprRef).\n3. Return ? GeneratorYield(CreateIterResultObject(value, false)).\n", "features": ["generators", "Symbol.iterator"]}, {"path": "./test262-main/test/language/expressions/yield/rhs-regexp.js", "esid": " 14.4", "version": 6, "description": " >YieldExpression accepts a regular expression literal as its right-hand side\n", "info": " |The syntactic context immediately following yield requires use of the\nInputElementRegExpOrTemplateTail lexical goal.\n", "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/yield/rhs-template-middle.js", "esid": " 14.4", "version": 6, "description": " YieldExpression may be followed by a TemplateMiddle construct", "info": " |The syntactic context immediately following yield requires use of the\nInputElementRegExpOrTemplateTail lexical goal.\n", "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/yield/rhs-unresolvable.js", "esid": " 14.4.14", "version": 6, "description": " GetValue invoked on Reference value", "info": " |YieldExpression : yield AssignmentExpression\n\n1. Let exprRef be the result of evaluating AssignmentExpression.\n2. Let value be ? GetValue(exprRef).\n", "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/yield/rhs-yield.js", "version": 6, "esid": " 25.2", "description": " >Yield expressions are valid yield expression operands.\n", "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/yield/star-array.js", "version": 6, "esid": " 25.2", "description": " >When an array is the operand of a `yield *` expression, the generator\nshould produce an iterator that visits each element in order.\n", "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/yield/star-in-rltn-expr.js", "esid": " 14.4", "version": 6, "description": " >YieldExpression contextually recognizes the `in` keyword as part of a\nRelationalExpression\n", "info": " |Syntax\n\nyield [no LineTerminator here] AssignmentExpression[?In, +Yield]\n", "features": ["generators", "Symbol.iterator"]}, {"path": "./test262-main/test/language/expressions/yield/star-iterable.js", "version": 6, "esid": " 25.2", "description": " >When an iterator is the operand of a `yield *` expression, the generator\nshould produce an iterator that visits each iterated item.\n", "features": ["generators", "Symbol.iterator"]}, {"path": "./test262-main/test/language/expressions/yield/star-rhs-iter-get-call-err.js", "esid": " 14.4.14", "version": 6, "description": " Abrupt completion returned when invoking the @@iterator method", "info": " |YieldExpression : yield * AssignmentExpression\n\n1. Let exprRef be the result of evaluating AssignmentExpression.\n2. Let value be ? GetValue(exprRef).\n3. Let iterator be ? GetIterator(value).\n\n7.4.1 GetIterator\n\n1. If method was not passed, then\na. Let method be ? GetMethod(obj, @@iterator).\n2. Let iterator be ? Call(method, obj).\n", "features": ["generators", "Symbol.iterator"]}, {"path": "./test262-main/test/language/expressions/yield/star-rhs-iter-get-call-non-obj.js", "esid": " 14.4.14", "version": 6, "description": " TypeError thrown when @@iterator method returns a non-object value", "info": " |YieldExpression : yield * AssignmentExpression\n\n1. Let exprRef be the result of evaluating AssignmentExpression.\n2. Let value be ? GetValue(exprRef).\n3. Let iterator be ? GetIterator(value).\n\n7.4.1 GetIterator\n\n1. If method was not passed, then\na. Let method be ? GetMethod(obj, @@iterator).\n2. Let iterator be ? Call(method, obj).\n3. If Type(iterator) is not Object, throw a TypeError exception.\n", "features": ["generators", "Symbol.iterator"]}, {"path": "./test262-main/test/language/expressions/yield/star-rhs-iter-get-get-err.js", "esid": " 14.4.14", "version": 6, "description": " Abrupt completion returned when accessing the @@iterator property", "info": " |YieldExpression : yield * AssignmentExpression\n\n1. Let exprRef be the result of evaluating AssignmentExpression.\n2. Let value be ? GetValue(exprRef).\n3. Let iterator be ? GetIterator(value).\n\n7.4.1 GetIterator\n\n1. If method was not passed, then\na. Let method be ? GetMethod(obj, @@iterator).\n", "features": ["generators", "Symbol.iterator"]}, {"path": "./test262-main/test/language/expressions/yield/star-rhs-iter-nrml-next-call-err.js", "esid": " 14.4.14", "version": 6, "description": " Abrupt completion returned when invoking iterator `next` method", "info": " |YieldExpression : yield * AssignmentExpression\n\n1. Let exprRef be the result of evaluating AssignmentExpression.\n2. Let value be ? GetValue(exprRef).\n3. Let iterator be ? GetIterator(value).\n4. Let received be NormalCompletion(undefined).\n5. Repeat\na. If received.[[Type]] is normal, then\ni. Let innerResult be ? IteratorNext(iterator, received.[[Value]]).\n\n7.4.2 IteratorNext\n\n1. If value was not passed, then\n[...]\n2. Else,\na. Let result be ? Invoke(iterator, \"next\", \u00ab value \u00bb).\n", "features": ["generators", "Symbol.iterator"]}, {"path": "./test262-main/test/language/expressions/yield/star-rhs-iter-nrml-next-get-err.js", "esid": " 14.4.14", "version": 6, "description": " Abrupt completion returned when accessing iterator `next` method", "info": " |YieldExpression : yield * AssignmentExpression\n\n1. Let exprRef be the result of evaluating AssignmentExpression.\n2. Let value be ? GetValue(exprRef).\n3. Let iterator be ? GetIterator(value).\n4. Let received be NormalCompletion(undefined).\n5. Repeat\na. If received.[[Type]] is normal, then\ni. Let innerResult be ? IteratorNext(iterator, received.[[Value]]).\n\n7.4.2 IteratorNext\n\n1. If value was not passed, then\n[...]\n2. Else,\na. Let result be ? Invoke(iterator, \"next\", \u00ab value \u00bb).\n", "features": ["generators", "Symbol.iterator"]}, {"path": "./test262-main/test/language/expressions/yield/star-rhs-iter-nrml-next-invoke.js", "esid": " 14.4.14", "version": 6, "description": " Invocation of iterator `next` method", "info": " |YieldExpression : yield * AssignmentExpression\n\n1. Let exprRef be the result of evaluating AssignmentExpression.\n2. Let value be ? GetValue(exprRef).\n3. Let iterator be ? GetIterator(value).\n4. Let received be NormalCompletion(undefined).\n5. Repeat\na. If received.[[Type]] is normal, then\ni. Let innerResult be ? IteratorNext(iterator, received.[[Value]]).\n\n7.4.2 IteratorNext\n\n1. If value was not passed, then\n[...]\n2. Else,\na. Let result be ? Invoke(iterator, \"next\", \u00ab value \u00bb).\n[...]\n", "features": ["generators", "Symbol.iterator"]}, {"path": "./test262-main/test/language/expressions/yield/star-rhs-iter-nrml-res-done-err.js", "esid": " 14.4.14", "version": 6, "description": " >Abrupt completion returned when accessing `done` property of iteration result\n", "info": " |YieldExpression : yield * AssignmentExpression\n\n1. Let exprRef be the result of evaluating AssignmentExpression.\n2. Let value be ? GetValue(exprRef).\n3. Let iterator be ? GetIterator(value).\n4. Let received be NormalCompletion(undefined).\n5. Repeat\na. If received.[[Type]] is normal, then\ni. Let innerResult be ? IteratorNext(iterator, received.[[Value]]).\nii. Let done be ? IteratorComplete(innerResult).\n\n7.4.3 IteratorComplete\n\n1. Assert: Type(iterResult) is Object.\n2. Return ToBoolean(? Get(iterResult, \"done\")).\n", "features": ["generators", "Symbol.iterator"]}, {"path": "./test262-main/test/language/expressions/yield/star-rhs-iter-nrml-res-done-no-value.js", "esid": " 14.4.14", "version": 6, "description": " >`value` property is not accessed when iteration is incomplete\n", "info": " |YieldExpression : yield * AssignmentExpression\n\n1. Let exprRef be the result of evaluating AssignmentExpression.\n2. Let value be ? GetValue(exprRef).\n3. Let iterator be ? GetIterator(value).\n4. Let received be NormalCompletion(undefined).\n5. Repeat\na. If received.[[Type]] is normal, then\ni. Let innerResult be ? IteratorNext(iterator, received.[[Value]]).\nii. Let done be ? IteratorComplete(innerResult).\niii. If done is true, then\n1. Return ? IteratorValue(innerResult).\n", "features": ["generators", "Symbol.iterator"]}, {"path": "./test262-main/test/language/expressions/yield/star-rhs-iter-nrml-res-value-err.js", "esid": " 14.4.14", "version": 6, "description": " >Abrupt completion returned when accessing `value` property of iteration\nresult\n", "info": " |YieldExpression : yield * AssignmentExpression\n\n1. Let exprRef be the result of evaluating AssignmentExpression.\n2. Let value be ? GetValue(exprRef).\n3. Let iterator be ? GetIterator(value).\n4. Let received be NormalCompletion(undefined).\n5. Repeat\na. If received.[[Type]] is normal, then\ni. Let innerResult be ? IteratorNext(iterator, received.[[Value]]).\nii. Let done be ? IteratorComplete(innerResult).\niii. If done is true, then\n1. Return ? IteratorValue(innerResult).\n\n7.4.4 IteratorValue\n\n1. Assert: Type(iterResult) is Object.\n2. Return ? Get(iterResult, \"value\").\n", "features": ["generators", "Symbol.iterator"]}, {"path": "./test262-main/test/language/expressions/yield/star-rhs-iter-nrml-res-value-final.js", "esid": " 14.4.14", "version": 6, "description": " Value received from invocation of generator's `next` method", "info": " |YieldExpression : yield * AssignmentExpression\n\n1. Let exprRef be the result of evaluating AssignmentExpression.\n2. Let value be ? GetValue(exprRef).\n3. Let iterator be ? GetIterator(value).\n4. Let received be NormalCompletion(undefined).\n5. Repeat\na. If received.[[Type]] is normal, then\ni. Let innerResult be ? IteratorNext(iterator, received.[[Value]]).\nii. Let done be ? IteratorComplete(innerResult).\niii. If done is true, then\n1. Return ? IteratorValue(innerResult).\n\n7.4.4 IteratorValue\n\n1. Assert: Type(iterResult) is Object.\n2. Return ? Get(iterResult, \"value\").\n", "features": ["generators", "Symbol.iterator"]}, {"path": "./test262-main/test/language/expressions/yield/star-rhs-iter-thrw-res-done-err.js", "esid": " 14.4.14", "version": 6, "description": " >Abrupt completion returned when accessing `done` property of iteration result\n", "info": " |YieldExpression : yield * AssignmentExpression\n\n1. Let exprRef be the result of evaluating AssignmentExpression.\n2. Let value be ? GetValue(exprRef).\n3. Let iterator be ? GetIterator(value).\n4. Let received be NormalCompletion(undefined).\n5. Repeat\na. If received.[[Type]] is normal, then\n[...]\nb. Else if received.[[Type]] is throw, then\ni. Let throw be ? GetMethod(iterator, \"throw\").\nii. If throw is not undefined, then\n1. Let innerResult be ? Call(throw, iterator, \u00ab received.[[Value]]\n\u00bb).\n2. NOTE: Exceptions from the inner iterator throw method are\npropagated. Normal completions from an inner throw method are\nprocessed similarly to an inner next.\n3. If Type(innerResult) is not Object, throw a TypeError exception.\n4. Let done be ? IteratorComplete(innerResult).\n\n7.4.3 IteratorComplete\n\n1. Assert: Type(iterResult) is Object.\n2. Return ToBoolean(? Get(iterResult, \"done\")).\n", "features": ["generators", "Symbol.iterator"]}, {"path": "./test262-main/test/language/expressions/yield/star-rhs-iter-thrw-res-done-no-value.js", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "description": " >`value` property is not accessed when iteration is complete\n", "info": " |YieldExpression : yield * AssignmentExpression\n\n1. Let exprRef be the result of evaluating AssignmentExpression.\n2. Let value be ? GetValue(exprRef).\n3. Let iterator be ? GetIterator(value).\n4. Let received be NormalCompletion(undefined).\n5. Repeat\na. If received.[[Type]] is normal, then\n[...]\nb. Else if received.[[Type]] is throw, then\ni. Let throw be ? GetMethod(iterator, \"throw\").\nii. If throw is not undefined, then\n1. Let innerResult be ? Call(throw, iterator, \u00ab received.[[Value]]\n\u00bb).\n2. NOTE: Exceptions from the inner iterator throw method are\npropagated. Normal completions from an inner throw method are\nprocessed similarly to an inner next.\n3. If Type(innerResult) is not Object, throw a TypeError exception.\n4. Let done be ? IteratorComplete(innerResult).\n5. If done is true, then\na. Return ? IteratorValue(innerResult).\n\n7.4.3 IteratorComplete\n\n1. Assert: Type(iterResult) is Object.\n2. Return ToBoolean(? Get(iterResult, \"done\")).\n", "features": ["generators", "Symbol.iterator"]}, {"path": "./test262-main/test/language/expressions/yield/star-rhs-iter-thrw-res-value-err.js", "esid": " 14.4.14", "version": 6, "description": " >Abrupt completion returned when accessing `value` property of iteration\nresult\n", "info": " |YieldExpression : yield * AssignmentExpression\n\n1. Let exprRef be the result of evaluating AssignmentExpression.\n2. Let value be ? GetValue(exprRef).\n3. Let iterator be ? GetIterator(value).\n4. Let received be NormalCompletion(undefined).\n5. Repeat\na. If received.[[Type]] is normal, then\n[...]\nb. Else if received.[[Type]] is throw, then\ni. Let throw be ? GetMethod(iterator, \"throw\").\nii. If throw is not undefined, then\n1. Let innerResult be ? Call(throw, iterator, \u00ab received.[[Value]]\n\u00bb).\n2. NOTE: Exceptions from the inner iterator throw method are\npropagated. Normal completions from an inner throw method are\nprocessed similarly to an inner next.\n3. If Type(innerResult) is not Object, throw a TypeError exception.\n4. Let done be ? IteratorComplete(innerResult).\n5. If done is true, then\na. Return ? IteratorValue(innerResult).\n\n7.4.4 IteratorValue\n\n1. Assert: Type(iterResult) is Object.\n2. Return ? Get(iterResult, \"value\").\n", "features": ["generators", "Symbol.iterator"]}, {"path": "./test262-main/test/language/expressions/yield/star-rhs-iter-thrw-res-value-final.js", "esid": " sec-generator-function-definitions-runtime-semantics-evaluation", "description": " Value received from invocation of generator's `throw` method", "info": " |YieldExpression : yield * AssignmentExpression\n\n1. Let exprRef be the result of evaluating AssignmentExpression.\n2. Let value be ? GetValue(exprRef).\n3. Let iterator be ? GetIterator(value).\n4. Let received be NormalCompletion(undefined).\n5. Repeat\na. If received.[[Type]] is normal, then\n[...]\nb. Else if received.[[Type]] is throw, then\ni. Let throw be ? GetMethod(iterator, \"throw\").\nii. If throw is not undefined, then\n1. Let innerResult be ? Call(throw, iterator, \u00ab received.[[Value]]\n\u00bb).\n2. NOTE: Exceptions from the inner iterator throw method are\npropagated. Normal completions from an inner throw method are\nprocessed similarly to an inner next.\n3. If Type(innerResult) is not Object, throw a TypeError exception.\n4. Let done be ? IteratorComplete(innerResult).\n5. If done is true, then\n[...]\n6. Let received be GeneratorYield(innerResult).\n", "features": ["generators", "Symbol.iterator"]}, {"path": "./test262-main/test/language/expressions/yield/star-rhs-iter-thrw-thrw-call-err.js", "esid": " 14.4.14", "version": 6, "description": " Abrupt completion returned when invoking iterator `throw` method", "info": " |YieldExpression : yield * AssignmentExpression\n\n1. Let exprRef be the result of evaluating AssignmentExpression.\n2. Let value be ? GetValue(exprRef).\n3. Let iterator be ? GetIterator(value).\n4. Let received be NormalCompletion(undefined).\n5. Repeat\na. If received.[[Type]] is normal, then\n[...]\nb. Else if received.[[Type]] is throw, then\ni. Let throw be ? GetMethod(iterator, \"throw\").\nii. If throw is not undefined, then\n1. Let innerResult be ? Call(throw, iterator, \u00ab received.[[Value]]\n\u00bb).\n", "features": ["generators", "Symbol.iterator"]}, {"path": "./test262-main/test/language/expressions/yield/star-rhs-iter-thrw-thrw-get-err.js", "esid": " 14.4.14", "version": 6, "description": " Abrupt completion returned when accessing iterator `throw` method", "info": " |YieldExpression : yield * AssignmentExpression\n\n1. Let exprRef be the result of evaluating AssignmentExpression.\n2. Let value be ? GetValue(exprRef).\n3. Let iterator be ? GetIterator(value).\n4. Let received be NormalCompletion(undefined).\n5. Repeat\na. If received.[[Type]] is normal, then\n[...]\nb. Else if received.[[Type]] is throw, then\ni. Let throw be ? GetMethod(iterator, \"throw\").\n", "features": ["generators", "Symbol.iterator"]}, {"path": "./test262-main/test/language/expressions/yield/star-rhs-iter-thrw-thrw-invoke.js", "esid": " 14.4.14", "version": 6, "description": " Invocation of iterator `throw` method", "info": " |YieldExpression : yield * AssignmentExpression\n\n1. Let exprRef be the result of evaluating AssignmentExpression.\n2. Let value be ? GetValue(exprRef).\n3. Let iterator be ? GetIterator(value).\n4. Let received be NormalCompletion(undefined).\n5. Repeat\na. If received.[[Type]] is normal, then\n[...]\nb. Else if received.[[Type]] is throw, then\ni. Let throw be ? GetMethod(iterator, \"throw\").\nii. If throw is not undefined, then\n1. Let innerResult be ? Call(throw, iterator, \u00ab received.[[Value]]\n\u00bb).\n[...]\n", "features": ["generators", "Symbol.iterator"]}, {"path": "./test262-main/test/language/expressions/yield/star-rhs-unresolvable.js", "esid": " 14.4.14", "version": 6, "description": " GetValue invoked on Reference value", "info": " |YieldExpression : yield * AssignmentExpression\n\n1. Let exprRef be the result of evaluating AssignmentExpression.\n2. Let value be ? GetValue(exprRef).\n", "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/yield/star-string.js", "version": 6, "esid": " 25.2", "description": " >When a string is the operand of a `yield *` expression, the generator\nshould produce an iterator that visits each character in order.\n", "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/yield/then-return.js", "version": 6, "esid": " 25.2", "description": " >When a generator body contains a yield statement followed by a return\nstatement, it should produce an iterator that visits the yieled value and\ncompletes on the returned value.\n", "features": ["generators"]}, {"path": "./test262-main/test/language/expressions/yield/within-for.js", "version": 6, "esid": " 25.2", "description": " >`yield` expressions should suspend `for` loop iteration.\n", "features": ["generators"]}, {"path": "./test262-main/test/language/function-code/eval-param-env-with-computed-key.js", "esid": " sec-functiondeclarationinstantiation", "description": " >sloppy direct evals in params introduce vars\n", "info": " |[...]\n20. Else,\na. NOTE: A separate Environment Record is needed to ensure that bindings created by direct eval calls in the formal parameter list are outside the environment where parameters are declared.\nb. Let calleeEnv be the LexicalEnvironment of calleeContext.\nc. Let env be NewDeclarativeEnvironment(calleeEnv).\nd. Let envRec be env's EnvironmentRecord.\n[...]\n", "flags": ["noStrict"]}, {"path": "./test262-main/test/language/function-code/eval-param-env-with-prop-initializer.js", "esid": " sec-functiondeclarationinstantiation", "description": " >sloppy direct evals in params introduce vars\n", "info": " |[...]\n20. Else,\na. NOTE: A separate Environment Record is needed to ensure that bindings created by direct eval calls in the formal parameter list are outside the environment where parameters are declared.\nb. Let calleeEnv be the LexicalEnvironment of calleeContext.\nc. Let env be NewDeclarativeEnvironment(calleeEnv).\nd. Let envRec be env's EnvironmentRecord.\n[...]\n", "flags": ["noStrict"]}, {"path": "./test262-main/test/language/identifier-resolution/unscopables.js", "version": 6, "esid": " 8.1.1.4.1", "description": " >`Symbol.unscopables` is not referenced when finding bindings in global scope\n", "info": " |1. Let envRec be the global Environment Record for which the method was\ninvoked.\n2. Let DclRec be envRec.[[DeclarativeRecord]].\n3. If DclRec.HasBinding(N) is true, return true.\n4. Let ObjRec be envRec.[[ObjectRecord]].\n5. Return ObjRec.HasBinding(N).\n", "features": ["Symbol.unscopables"]}, {"path": "./test262-main/test/language/literals/numeric/binary.js", "version": 6, "esid": " 11.8.3.1", "description": " Mathematical value of valid binary integer literals", "info": " |The MV of BinaryIntegerLiteral :: 0b BinaryDigits is the MV of\nBinaryDigits.\nThe MV of BinaryIntegerLiteral :: 0B BinaryDigits is the MV of\nBinaryDigits.\nThe MV of BinaryDigits :: BinaryDigit is the MV of BinaryDigit.\nThe MV of BinaryDigits :: BinaryDigits BinaryDigit is (the MV of\nBinaryDigits \u00d7 2) plus the MV of BinaryDigit.\n"}, {"path": "./test262-main/test/language/literals/numeric/octal.js", "version": 6, "esid": " 11.8.3.1", "description": " Mathematical value of valid octal integer literals", "info": " |The MV of StrNumericLiteral ::: OctalIntegerLiteral is the MV of\nOctalIntegerLiteral.\nThe MV of OctalIntegerLiteral :: 0o OctalDigits is the MV of OctalDigits.\nThe MV of OctalIntegerLiteral :: 0O OctalDigits is the MV of OctalDigits.\nThe MV of OctalDigits :: OctalDigit is the MV of OctalDigit.\nThe MV of OctalDigits :: OctalDigits OctalDigit is (the MV of OctalDigits \u00d7\n8) plus the MV of OctalDigit.\n"}, {"path": "./test262-main/test/language/rest-parameters/arrow-function.js", "version": 6, "esid": " 14.1", "description": " >arrow functions\n", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/language/statementList/eval-block-regexp-literal-flags.js", "description": " Regular Expression Literal with Flags (Eval production of StatementList starting with a BlockStatement)", "esid": " prod-StatementList", "flags": ["generated"], "info": " |StatementList:\nStatementListItem\nStatementList StatementListItem\n\nStatementListItem:\nStatement\nDeclaration\n\nStatement:\nBlockStatement\n\nBlockStatement:\nBlock\n\nBlock:\n{ StatementList_opt }\n\nStatement:\nBlockStatement\nVariableStatement\nEmptyStatement\nExpressionStatement\n...\n\nExpressionStatement[Yield, Await]:\n[lookahead \u2209 { {, function, async [no LineTerminator here] function, class, let [ }]\nExpression ;\n\nRegularExpressionLiteral ::\n/ RegularExpressionBody / RegularExpressionFlags\n"}, {"path": "./test262-main/test/language/statementList/eval-block-regexp-literal.js", "description": " Regular Expression Literal (Eval production of StatementList starting with a BlockStatement)", "esid": " prod-StatementList", "flags": ["generated"], "info": " |StatementList:\nStatementListItem\nStatementList StatementListItem\n\nStatementListItem:\nStatement\nDeclaration\n\nStatement:\nBlockStatement\n\nBlockStatement:\nBlock\n\nBlock:\n{ StatementList_opt }\n\nStatement:\nBlockStatement\nVariableStatement\nEmptyStatement\nExpressionStatement\n...\n\nExpressionStatement[Yield, Await]:\n[lookahead \u2209 { {, function, async [no LineTerminator here] function, class, let [ }]\nExpression ;\n\nRegularExpressionLiteral ::\n/ RegularExpressionBody / RegularExpressionFlags\n"}, {"path": "./test262-main/test/language/statementList/eval-fn-regexp-literal-flags.js", "description": " Regular Expression Literal with Flags (Eval production of StatementList starting with a Function Declaration)", "esid": " prod-StatementList", "flags": ["generated"], "info": " |StatementList:\nStatementListItem\nStatementList StatementListItem\n\nStatementListItem:\nStatement\nDeclaration\n\nDeclaration:\nHoistableDeclaration\n\nFunctionDeclaration:\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\nStatement:\nBlockStatement\nVariableStatement\nEmptyStatement\nExpressionStatement\n...\n\nExpressionStatement[Yield, Await]:\n[lookahead \u2209 { {, function, async [no LineTerminator here] function, class, let [ }]\nExpression ;\n\nRegularExpressionLiteral ::\n/ RegularExpressionBody / RegularExpressionFlags\n"}, {"path": "./test262-main/test/language/statementList/eval-fn-regexp-literal.js", "description": " Regular Expression Literal (Eval production of StatementList starting with a Function Declaration)", "esid": " prod-StatementList", "flags": ["generated"], "info": " |StatementList:\nStatementListItem\nStatementList StatementListItem\n\nStatementListItem:\nStatement\nDeclaration\n\nDeclaration:\nHoistableDeclaration\n\nFunctionDeclaration:\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\nStatement:\nBlockStatement\nVariableStatement\nEmptyStatement\nExpressionStatement\n...\n\nExpressionStatement[Yield, Await]:\n[lookahead \u2209 { {, function, async [no LineTerminator here] function, class, let [ }]\nExpression ;\n\nRegularExpressionLiteral ::\n/ RegularExpressionBody / RegularExpressionFlags\n"}, {"path": "./test262-main/test/language/statements/const/block-local-closure-get-before-initialization.js", "version": 6, "esid": " 13.1", "description": " >const: block local closure [[Get]] before initialization.\n(TDZ, Temporal Dead Zone)\n"}, {"path": "./test262-main/test/language/statements/const/block-local-use-before-initialization-in-declaration-statement.js", "version": 6, "esid": " 13.1", "description": " >const: block local use before initialization in declaration statement.\n(TDZ, Temporal Dead Zone)\n"}, {"path": "./test262-main/test/language/statements/const/block-local-use-before-initialization-in-prior-statement.js", "version": 6, "esid": " 13.1", "description": " >const: block local use before initialization in prior statement.\n(TDZ, Temporal Dead Zone)\n"}, {"path": "./test262-main/test/language/statements/const/dstr/ary-init-iter-get-err-array-prototype.js", "description": " Abrupt completion returned by GetIterator (`const` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\nRuntime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iteratorRecord be ? GetIterator(value).\n\nGetIterator ( obj [ , hint [ , method ] ] )\n\n[...]\n4. Let iterator be ? Call(method, obj).\n\nCall ( F, V [ , argumentsList ] )\n\n[...]\n2. If IsCallable(F) is false, throw a TypeError exception.\n\n"}, {"path": "./test262-main/test/language/statements/const/dstr/ary-init-iter-get-err.js", "description": " Abrupt completion returned by GetIterator (`const` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iterator be GetIterator(value).\n2. ReturnIfAbrupt(iterator).\n\n"}, {"path": "./test262-main/test/language/statements/const/dstr/ary-init-iter-no-close.js", "description": " Iterator is not closed when exhausted by pattern evaluation (`const` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n[...]\n4. If iteratorRecord.[[done]] is false, return ? IteratorClose(iterator,\nresult).\n[...]\n\n"}, {"path": "./test262-main/test/language/statements/const/dstr/ary-ptrn-elem-ary-elem-init.js", "description": " BindingElement with array binding pattern and initializer is used (`const` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/const/dstr/ary-ptrn-elem-ary-elem-iter.js", "description": " BindingElement with array binding pattern and initializer is not used (`const` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\n[...]\ne. Else,\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/const/dstr/ary-ptrn-elem-ary-elision-init.js", "description": " BindingElement with array binding pattern and initializer is used (`const` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n"}, {"path": "./test262-main/test/language/statements/const/dstr/ary-ptrn-elem-ary-elision-iter.js", "description": " BindingElement with array binding pattern and initializer is not used (`const` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\n[...]\ne. Else,\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n"}, {"path": "./test262-main/test/language/statements/const/dstr/ary-ptrn-elem-ary-empty-init.js", "description": " BindingElement with array binding pattern and initializer is used (`const` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n"}, {"path": "./test262-main/test/language/statements/const/dstr/ary-ptrn-elem-ary-empty-iter.js", "description": " BindingElement with array binding pattern and initializer is not used (`const` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\n[...]\ne. Else,\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/const/dstr/ary-ptrn-elem-ary-rest-init.js", "description": " BindingElement with array binding pattern and initializer is used (`const` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/const/dstr/ary-ptrn-elem-ary-rest-iter.js", "description": " BindingElement with array binding pattern and initializer is not used (`const` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\n[...]\ne. Else,\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/const/dstr/ary-ptrn-elem-id-init-exhausted.js", "description": " Destructuring initializer with an exhausted iterator (`const` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n5. If iteratorRecord.[[done]] is true, let v be undefined.\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/const/dstr/ary-ptrn-elem-id-init-hole.js", "description": " Destructuring initializer with a \"hole\" (`const` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nSingleNameBinding : BindingIdentifier Initializeropt\n[...] 6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\n[...]\n7. If environment is undefined, return PutValue(lhs, v). 8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/const/dstr/ary-ptrn-elem-id-init-skipped.js", "description": " Destructuring initializer is not evaluated when value is not `undefined` (`const` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/const/dstr/ary-ptrn-elem-id-init-throws.js", "description": " Destructuring initializer returns an abrupt completion (`const` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/statements/const/dstr/ary-ptrn-elem-id-init-undef.js", "description": " Destructuring initializer with an undefined value (`const` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/const/dstr/ary-ptrn-elem-id-init-unresolvable.js", "description": " Destructuring initializer is an unresolvable reference (`const` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/statements/const/dstr/ary-ptrn-elem-id-iter-step-err.js", "description": " Error forwarding when IteratorStep returns an abrupt completion (`const` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/statements/const/dstr/ary-ptrn-elem-id-iter-val-array-prototype.js", "description": " Array destructuring uses overriden Array.prototype[Symbol.iterator] (`const` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\nRuntime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializer_opt\n\n1. Let bindingId be StringValue of BindingIdentifier.\n2. Let lhs be ? ResolveBinding(bindingId, environment).\n3. If iteratorRecord.[[Done]] is false, then\na. Let next be IteratorStep(iteratorRecord).\nb. If next is an abrupt completion, set iteratorRecord.[[Done]] to true.\nc. ReturnIfAbrupt(next).\nd. If next is false, set iteratorRecord.[[Done]] to true.\ne. Else,\ni. Let v be IteratorValue(next).\nii. If v is an abrupt completion, set iteratorRecord.[[Done]] to true.\niii. ReturnIfAbrupt(v).\n[...]\n7. Return InitializeReferencedBinding(lhs, v).\n\n"}, {"path": "./test262-main/test/language/statements/const/dstr/ary-ptrn-elem-id-iter-val-err.js", "description": " Error forwarding when IteratorValue returns an abrupt completion (`const` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\nd. If next is false, set iteratorRecord.[[done]] to true.\ne. Else,\ni. Let v be IteratorValue(next).\nii. If v is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\niii. ReturnIfAbrupt(v).\n\n"}, {"path": "./test262-main/test/language/statements/const/dstr/ary-ptrn-elem-obj-id-init.js", "description": " BindingElement with object binding pattern and initializer is used (`const` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/const/dstr/ary-ptrn-elem-obj-id.js", "description": " BindingElement with object binding pattern and initializer is not used (`const` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/const/dstr/ary-ptrn-elem-obj-prop-id-init.js", "description": " BindingElement with object binding pattern and initializer is used (`const` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/const/dstr/ary-ptrn-elem-obj-prop-id.js", "description": " BindingElement with object binding pattern and initializer is not used (`const` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/const/dstr/ary-ptrn-elision-exhausted.js", "description": " Elision accepts exhausted iterator (`const` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ Elision ]\n\n1. Return the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with iteratorRecord\nas the argument.\n\n12.14.5.3 Runtime Semantics: IteratorDestructuringAssignmentEvaluation\n\nElision : ,\n\n1. If iteratorRecord.[[done]] is false, then\n[...]\n2. Return NormalCompletion(empty).\n\n"}, {"path": "./test262-main/test/language/statements/const/dstr/ary-ptrn-elision-step-err.js", "description": " Elision advances iterator and forwards abrupt completions (`const` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ Elision ]\n\n1. Return the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with iteratorRecord\nas the argument.\n\n12.14.5.3 Runtime Semantics: IteratorDestructuringAssignmentEvaluation\n\nElision : ,\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/statements/const/dstr/ary-ptrn-elision.js", "description": " Elision advances iterator (`const` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ Elision ]\n\n1. Return the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with iteratorRecord\nas the argument.\n\n12.14.5.3 Runtime Semantics: IteratorDestructuringAssignmentEvaluation\n\nElision : ,\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\nd. If next is false, set iteratorRecord.[[done]] to true.\n2. Return NormalCompletion(empty).\n\n"}, {"path": "./test262-main/test/language/statements/const/dstr/ary-ptrn-empty.js", "description": " No iteration occurs for an \"empty\" array binding pattern (`const` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ ]\n\n1. Return NormalCompletion(empty).\n\n"}, {"path": "./test262-main/test/language/statements/const/dstr/ary-ptrn-rest-id-direct.js", "description": " Lone rest element (direct binding) (`const` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "includes": ["compareArray.js"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\nRuntime Semantics: IteratorBindingInitialization\n\nBindingRestElement : ... BindingIdentifier\n\n[...]\n2. Let A be ! ArrayCreate(0).\n3. Let n be 0.\n4. Repeat,\n[...]\nf. Perform ! CreateDataPropertyOrThrow(A, ! ToString(n), nextValue).\ng. Set n to n + 1.\n\n"}, {"path": "./test262-main/test/language/statements/const/dstr/ary-ptrn-rest-id-elision-next-err.js", "description": " Rest element following elision elements (`const` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nArrayBindingPattern : [ Elisionopt BindingRestElement ]\n1. If Elision is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with\niteratorRecord as the argument.\nb. ReturnIfAbrupt(status).\n2. Return the result of performing IteratorBindingInitialization for\nBindingRestElement with iteratorRecord and environment as arguments.\n\n"}, {"path": "./test262-main/test/language/statements/const/dstr/ary-ptrn-rest-id-elision.js", "description": " Rest element following elision elements (`const` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nArrayBindingPattern : [ Elisionopt BindingRestElement ]\n1. If Elision is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with\niteratorRecord as the argument.\nb. ReturnIfAbrupt(status).\n2. Return the result of performing IteratorBindingInitialization for\nBindingRestElement with iteratorRecord and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/const/dstr/ary-ptrn-rest-id-exhausted.js", "description": " RestElement applied to an exhausted iterator (`const` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\n[...]\nb. If iteratorRecord.[[done]] is true, then\ni. If environment is undefined, return PutValue(lhs, A).\nii. Return InitializeReferencedBinding(lhs, A).\n\n"}, {"path": "./test262-main/test/language/statements/const/dstr/ary-ptrn-rest-id-iter-step-err.js", "description": " Error forwarding when IteratorStep returns an abrupt completion (`const` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\na. If iteratorRecord.[[done]] is false,\ni. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nii. If next is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\niii. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/statements/const/dstr/ary-ptrn-rest-id-iter-val-err.js", "description": " Error forwarding when IteratorValue returns an abrupt completion (`const` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\n[...]\nc. Let nextValue be IteratorValue(next).\nd. If nextValue is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\ne. ReturnIfAbrupt(nextValue).\n\n"}, {"path": "./test262-main/test/language/statements/const/dstr/ary-ptrn-rest-id.js", "description": " Lone rest element (`const` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n[...] 3. Let A be ArrayCreate(0). [...] 5. Repeat\n[...]\nf. Let status be CreateDataProperty(A, ToString (n), nextValue).\n[...]\n"}, {"path": "./test262-main/test/language/statements/const/dstr/obj-ptrn-prop-ary-init.js", "description": " Object binding pattern with \"nested\" array binding pattern using initializer (`const` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/const/dstr/obj-ptrn-prop-ary-value-null.js", "description": " Object binding pattern with \"nested\" array binding pattern taking the `null` value (`const` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/const/dstr/obj-ptrn-prop-ary.js", "description": " Object binding pattern with \"nested\" array binding pattern not using initializer (`const` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/const/dstr/obj-ptrn-prop-eval-err.js", "description": " Evaluation of property name returns an abrupt completion (`const` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingProperty : PropertyName : BindingElement\n\n1. Let P be the result of evaluating PropertyName\n2. ReturnIfAbrupt(P).\n"}, {"path": "./test262-main/test/language/statements/const/dstr/obj-ptrn-prop-id-get-value-err.js", "description": " Error thrown when accessing the corresponding property of the value object (`const` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. Let v be GetV(value, propertyName).\n2. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/statements/const/dstr/obj-ptrn-prop-id-init-skipped.js", "description": " Destructuring initializer is not evaluated when value is not `undefined` (`const` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n"}, {"path": "./test262-main/test/language/statements/const/dstr/obj-ptrn-prop-id-init-throws.js", "description": " Error thrown when evaluating the initializer (`const` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/statements/const/dstr/obj-ptrn-prop-id-init-unresolvable.js", "description": " Destructuring initializer is an unresolvable reference (`const` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/statements/const/dstr/obj-ptrn-prop-id-init.js", "description": " Binding as specified via property name, identifier, and initializer (`const` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/const/dstr/obj-ptrn-prop-obj-init.js", "description": " Object binding pattern with \"nested\" object binding pattern using initializer (`const` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/const/dstr/obj-ptrn-prop-obj-value-null.js", "description": " Object binding pattern with \"nested\" object binding pattern taking the `null` value (`const` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/const/dstr/obj-ptrn-prop-obj-value-undef.js", "description": " Object binding pattern with \"nested\" object binding pattern taking the `null` value (`const` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/const/dstr/obj-ptrn-prop-obj.js", "description": " Object binding pattern with \"nested\" object binding pattern not using initializer (`const` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/const/function-local-closure-get-before-initialization.js", "version": 6, "esid": " 13.1", "description": " >const: function local closure [[Get]] before initialization.\n(TDZ, Temporal Dead Zone)\n"}, {"path": "./test262-main/test/language/statements/const/function-local-use-before-initialization-in-declaration-statement.js", "version": 6, "esid": " 13.1", "description": " >const: function local use before initialization in declaration statement.\n(TDZ, Temporal Dead Zone)\n"}, {"path": "./test262-main/test/language/statements/const/function-local-use-before-initialization-in-prior-statement.js", "version": 6, "esid": " 13.1", "description": " >const: function local use before initialization in prior statement.\n(TDZ, Temporal Dead Zone)\n"}, {"path": "./test262-main/test/language/statements/const/syntax/const-outer-inner-let-bindings.js", "version": 6, "esid": " 13.1", "description": " >outer const binding unchanged by for-loop const binding\n"}, {"path": "./test262-main/test/language/statements/const/syntax/const.js", "version": 6, "esid": " 13.1", "description": " >global and block scope const\n"}, {"path": "./test262-main/test/language/statements/for/dstr/const-ary-init-iter-get-err-array-prototype.js", "description": " Abrupt completion returned by GetIterator (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\nRuntime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iteratorRecord be ? GetIterator(value).\n\nGetIterator ( obj [ , hint [ , method ] ] )\n\n[...]\n4. Let iterator be ? Call(method, obj).\n\nCall ( F, V [ , argumentsList ] )\n\n[...]\n2. If IsCallable(F) is false, throw a TypeError exception.\n\n"}, {"path": "./test262-main/test/language/statements/for/dstr/const-ary-init-iter-get-err.js", "description": " Abrupt completion returned by GetIterator (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iterator be GetIterator(value).\n2. ReturnIfAbrupt(iterator).\n\n"}, {"path": "./test262-main/test/language/statements/for/dstr/const-ary-init-iter-no-close.js", "description": " Iterator is not closed when exhausted by pattern evaluation (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n[...]\n4. If iteratorRecord.[[done]] is false, return ? IteratorClose(iterator,\nresult).\n[...]\n\n"}, {"path": "./test262-main/test/language/statements/for/dstr/const-ary-ptrn-elem-ary-elem-init.js", "description": " BindingElement with array binding pattern and initializer is used (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/const-ary-ptrn-elem-ary-elem-iter.js", "description": " BindingElement with array binding pattern and initializer is not used (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\n[...]\ne. Else,\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/const-ary-ptrn-elem-ary-elision-init.js", "description": " BindingElement with array binding pattern and initializer is used (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n"}, {"path": "./test262-main/test/language/statements/for/dstr/const-ary-ptrn-elem-ary-elision-iter.js", "description": " BindingElement with array binding pattern and initializer is not used (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\n[...]\ne. Else,\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n"}, {"path": "./test262-main/test/language/statements/for/dstr/const-ary-ptrn-elem-ary-empty-init.js", "description": " BindingElement with array binding pattern and initializer is used (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n"}, {"path": "./test262-main/test/language/statements/for/dstr/const-ary-ptrn-elem-ary-empty-iter.js", "description": " BindingElement with array binding pattern and initializer is not used (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\n[...]\ne. Else,\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/const-ary-ptrn-elem-ary-rest-init.js", "description": " BindingElement with array binding pattern and initializer is used (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/const-ary-ptrn-elem-ary-rest-iter.js", "description": " BindingElement with array binding pattern and initializer is not used (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\n[...]\ne. Else,\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/const-ary-ptrn-elem-id-init-exhausted.js", "description": " Destructuring initializer with an exhausted iterator (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n5. If iteratorRecord.[[done]] is true, let v be undefined.\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/for/dstr/const-ary-ptrn-elem-id-init-hole.js", "description": " Destructuring initializer with a \"hole\" (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nSingleNameBinding : BindingIdentifier Initializeropt\n[...] 6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\n[...]\n7. If environment is undefined, return PutValue(lhs, v). 8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/for/dstr/const-ary-ptrn-elem-id-init-skipped.js", "description": " Destructuring initializer is not evaluated when value is not `undefined` (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/for/dstr/const-ary-ptrn-elem-id-init-throws.js", "description": " Destructuring initializer returns an abrupt completion (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/statements/for/dstr/const-ary-ptrn-elem-id-init-undef.js", "description": " Destructuring initializer with an undefined value (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/for/dstr/const-ary-ptrn-elem-id-init-unresolvable.js", "description": " Destructuring initializer is an unresolvable reference (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/const-ary-ptrn-elem-id-iter-step-err.js", "description": " Error forwarding when IteratorStep returns an abrupt completion (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/statements/for/dstr/const-ary-ptrn-elem-id-iter-val-array-prototype.js", "description": " Array destructuring uses overriden Array.prototype[Symbol.iterator] (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\nRuntime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializer_opt\n\n1. Let bindingId be StringValue of BindingIdentifier.\n2. Let lhs be ? ResolveBinding(bindingId, environment).\n3. If iteratorRecord.[[Done]] is false, then\na. Let next be IteratorStep(iteratorRecord).\nb. If next is an abrupt completion, set iteratorRecord.[[Done]] to true.\nc. ReturnIfAbrupt(next).\nd. If next is false, set iteratorRecord.[[Done]] to true.\ne. Else,\ni. Let v be IteratorValue(next).\nii. If v is an abrupt completion, set iteratorRecord.[[Done]] to true.\niii. ReturnIfAbrupt(v).\n[...]\n7. Return InitializeReferencedBinding(lhs, v).\n\n"}, {"path": "./test262-main/test/language/statements/for/dstr/const-ary-ptrn-elem-id-iter-val-err.js", "description": " Error forwarding when IteratorValue returns an abrupt completion (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\nd. If next is false, set iteratorRecord.[[done]] to true.\ne. Else,\ni. Let v be IteratorValue(next).\nii. If v is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\niii. ReturnIfAbrupt(v).\n\n"}, {"path": "./test262-main/test/language/statements/for/dstr/const-ary-ptrn-elem-obj-id-init.js", "description": " BindingElement with object binding pattern and initializer is used (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/const-ary-ptrn-elem-obj-id.js", "description": " BindingElement with object binding pattern and initializer is not used (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/const-ary-ptrn-elem-obj-prop-id-init.js", "description": " BindingElement with object binding pattern and initializer is used (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/const-ary-ptrn-elem-obj-prop-id.js", "description": " BindingElement with object binding pattern and initializer is not used (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/const-ary-ptrn-elision-exhausted.js", "description": " Elision accepts exhausted iterator (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ Elision ]\n\n1. Return the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with iteratorRecord\nas the argument.\n\n12.14.5.3 Runtime Semantics: IteratorDestructuringAssignmentEvaluation\n\nElision : ,\n\n1. If iteratorRecord.[[done]] is false, then\n[...]\n2. Return NormalCompletion(empty).\n\n"}, {"path": "./test262-main/test/language/statements/for/dstr/const-ary-ptrn-elision-step-err.js", "description": " Elision advances iterator and forwards abrupt completions (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ Elision ]\n\n1. Return the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with iteratorRecord\nas the argument.\n\n12.14.5.3 Runtime Semantics: IteratorDestructuringAssignmentEvaluation\n\nElision : ,\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/statements/for/dstr/const-ary-ptrn-elision.js", "description": " Elision advances iterator (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ Elision ]\n\n1. Return the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with iteratorRecord\nas the argument.\n\n12.14.5.3 Runtime Semantics: IteratorDestructuringAssignmentEvaluation\n\nElision : ,\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\nd. If next is false, set iteratorRecord.[[done]] to true.\n2. Return NormalCompletion(empty).\n\n"}, {"path": "./test262-main/test/language/statements/for/dstr/const-ary-ptrn-empty.js", "description": " No iteration occurs for an \"empty\" array binding pattern (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ ]\n\n1. Return NormalCompletion(empty).\n\n"}, {"path": "./test262-main/test/language/statements/for/dstr/const-ary-ptrn-rest-id-direct.js", "description": " Lone rest element (direct binding) (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "includes": ["compareArray.js"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\nRuntime Semantics: IteratorBindingInitialization\n\nBindingRestElement : ... BindingIdentifier\n\n[...]\n2. Let A be ! ArrayCreate(0).\n3. Let n be 0.\n4. Repeat,\n[...]\nf. Perform ! CreateDataPropertyOrThrow(A, ! ToString(n), nextValue).\ng. Set n to n + 1.\n\n"}, {"path": "./test262-main/test/language/statements/for/dstr/const-ary-ptrn-rest-id-elision-next-err.js", "description": " Rest element following elision elements (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nArrayBindingPattern : [ Elisionopt BindingRestElement ]\n1. If Elision is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with\niteratorRecord as the argument.\nb. ReturnIfAbrupt(status).\n2. Return the result of performing IteratorBindingInitialization for\nBindingRestElement with iteratorRecord and environment as arguments.\n\n"}, {"path": "./test262-main/test/language/statements/for/dstr/const-ary-ptrn-rest-id-elision.js", "description": " Rest element following elision elements (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nArrayBindingPattern : [ Elisionopt BindingRestElement ]\n1. If Elision is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with\niteratorRecord as the argument.\nb. ReturnIfAbrupt(status).\n2. Return the result of performing IteratorBindingInitialization for\nBindingRestElement with iteratorRecord and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/const-ary-ptrn-rest-id-exhausted.js", "description": " RestElement applied to an exhausted iterator (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\n[...]\nb. If iteratorRecord.[[done]] is true, then\ni. If environment is undefined, return PutValue(lhs, A).\nii. Return InitializeReferencedBinding(lhs, A).\n\n"}, {"path": "./test262-main/test/language/statements/for/dstr/const-ary-ptrn-rest-id-iter-close.js", "description": " The iterator is properly consumed by the destructuring pattern (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/const-ary-ptrn-rest-id-iter-step-err.js", "description": " Error forwarding when IteratorStep returns an abrupt completion (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\na. If iteratorRecord.[[done]] is false,\ni. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nii. If next is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\niii. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/statements/for/dstr/const-ary-ptrn-rest-id-iter-val-err.js", "description": " Error forwarding when IteratorValue returns an abrupt completion (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\n[...]\nc. Let nextValue be IteratorValue(next).\nd. If nextValue is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\ne. ReturnIfAbrupt(nextValue).\n\n"}, {"path": "./test262-main/test/language/statements/for/dstr/const-ary-ptrn-rest-id.js", "description": " Lone rest element (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n[...] 3. Let A be ArrayCreate(0). [...] 5. Repeat\n[...]\nf. Let status be CreateDataProperty(A, ToString (n), nextValue).\n[...]\n"}, {"path": "./test262-main/test/language/statements/for/dstr/const-obj-ptrn-prop-ary-init.js", "description": " Object binding pattern with \"nested\" array binding pattern using initializer (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/const-obj-ptrn-prop-ary-value-null.js", "description": " Object binding pattern with \"nested\" array binding pattern taking the `null` value (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/const-obj-ptrn-prop-ary.js", "description": " Object binding pattern with \"nested\" array binding pattern not using initializer (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/const-obj-ptrn-prop-eval-err.js", "description": " Evaluation of property name returns an abrupt completion (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingProperty : PropertyName : BindingElement\n\n1. Let P be the result of evaluating PropertyName\n2. ReturnIfAbrupt(P).\n"}, {"path": "./test262-main/test/language/statements/for/dstr/const-obj-ptrn-prop-id-get-value-err.js", "description": " Error thrown when accessing the corresponding property of the value object (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. Let v be GetV(value, propertyName).\n2. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/statements/for/dstr/const-obj-ptrn-prop-id-init-skipped.js", "description": " Destructuring initializer is not evaluated when value is not `undefined` (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n"}, {"path": "./test262-main/test/language/statements/for/dstr/const-obj-ptrn-prop-id-init-throws.js", "description": " Error thrown when evaluating the initializer (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/statements/for/dstr/const-obj-ptrn-prop-id-init-unresolvable.js", "description": " Destructuring initializer is an unresolvable reference (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/const-obj-ptrn-prop-id-init.js", "description": " Binding as specified via property name, identifier, and initializer (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/for/dstr/const-obj-ptrn-prop-obj-init.js", "description": " Object binding pattern with \"nested\" object binding pattern using initializer (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/const-obj-ptrn-prop-obj-value-null.js", "description": " Object binding pattern with \"nested\" object binding pattern taking the `null` value (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/const-obj-ptrn-prop-obj-value-undef.js", "description": " Object binding pattern with \"nested\" object binding pattern taking the `null` value (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/const-obj-ptrn-prop-obj.js", "description": " Object binding pattern with \"nested\" object binding pattern not using initializer (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/let-ary-init-iter-get-err-array-prototype.js", "description": " Abrupt completion returned by GetIterator (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\nRuntime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iteratorRecord be ? GetIterator(value).\n\nGetIterator ( obj [ , hint [ , method ] ] )\n\n[...]\n4. Let iterator be ? Call(method, obj).\n\nCall ( F, V [ , argumentsList ] )\n\n[...]\n2. If IsCallable(F) is false, throw a TypeError exception.\n\n"}, {"path": "./test262-main/test/language/statements/for/dstr/let-ary-init-iter-get-err.js", "description": " Abrupt completion returned by GetIterator (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iterator be GetIterator(value).\n2. ReturnIfAbrupt(iterator).\n\n"}, {"path": "./test262-main/test/language/statements/for/dstr/let-ary-init-iter-no-close.js", "description": " Iterator is not closed when exhausted by pattern evaluation (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n[...]\n4. If iteratorRecord.[[done]] is false, return ? IteratorClose(iterator,\nresult).\n[...]\n\n"}, {"path": "./test262-main/test/language/statements/for/dstr/let-ary-ptrn-elem-ary-elem-init.js", "description": " BindingElement with array binding pattern and initializer is used (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/let-ary-ptrn-elem-ary-elem-iter.js", "description": " BindingElement with array binding pattern and initializer is not used (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\n[...]\ne. Else,\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/let-ary-ptrn-elem-ary-elision-init.js", "description": " BindingElement with array binding pattern and initializer is used (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n"}, {"path": "./test262-main/test/language/statements/for/dstr/let-ary-ptrn-elem-ary-elision-iter.js", "description": " BindingElement with array binding pattern and initializer is not used (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\n[...]\ne. Else,\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n"}, {"path": "./test262-main/test/language/statements/for/dstr/let-ary-ptrn-elem-ary-empty-init.js", "description": " BindingElement with array binding pattern and initializer is used (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n"}, {"path": "./test262-main/test/language/statements/for/dstr/let-ary-ptrn-elem-ary-empty-iter.js", "description": " BindingElement with array binding pattern and initializer is not used (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\n[...]\ne. Else,\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/let-ary-ptrn-elem-ary-rest-init.js", "description": " BindingElement with array binding pattern and initializer is used (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/let-ary-ptrn-elem-ary-rest-iter.js", "description": " BindingElement with array binding pattern and initializer is not used (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\n[...]\ne. Else,\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/let-ary-ptrn-elem-id-init-exhausted.js", "description": " Destructuring initializer with an exhausted iterator (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n5. If iteratorRecord.[[done]] is true, let v be undefined.\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/for/dstr/let-ary-ptrn-elem-id-init-hole.js", "description": " Destructuring initializer with a \"hole\" (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nSingleNameBinding : BindingIdentifier Initializeropt\n[...] 6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\n[...]\n7. If environment is undefined, return PutValue(lhs, v). 8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/for/dstr/let-ary-ptrn-elem-id-init-skipped.js", "description": " Destructuring initializer is not evaluated when value is not `undefined` (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/for/dstr/let-ary-ptrn-elem-id-init-throws.js", "description": " Destructuring initializer returns an abrupt completion (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/statements/for/dstr/let-ary-ptrn-elem-id-init-undef.js", "description": " Destructuring initializer with an undefined value (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/for/dstr/let-ary-ptrn-elem-id-init-unresolvable.js", "description": " Destructuring initializer is an unresolvable reference (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/let-ary-ptrn-elem-id-iter-step-err.js", "description": " Error forwarding when IteratorStep returns an abrupt completion (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/statements/for/dstr/let-ary-ptrn-elem-id-iter-val-array-prototype.js", "description": " Array destructuring uses overriden Array.prototype[Symbol.iterator] (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\nRuntime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializer_opt\n\n1. Let bindingId be StringValue of BindingIdentifier.\n2. Let lhs be ? ResolveBinding(bindingId, environment).\n3. If iteratorRecord.[[Done]] is false, then\na. Let next be IteratorStep(iteratorRecord).\nb. If next is an abrupt completion, set iteratorRecord.[[Done]] to true.\nc. ReturnIfAbrupt(next).\nd. If next is false, set iteratorRecord.[[Done]] to true.\ne. Else,\ni. Let v be IteratorValue(next).\nii. If v is an abrupt completion, set iteratorRecord.[[Done]] to true.\niii. ReturnIfAbrupt(v).\n[...]\n7. Return InitializeReferencedBinding(lhs, v).\n\n"}, {"path": "./test262-main/test/language/statements/for/dstr/let-ary-ptrn-elem-id-iter-val-err.js", "description": " Error forwarding when IteratorValue returns an abrupt completion (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\nd. If next is false, set iteratorRecord.[[done]] to true.\ne. Else,\ni. Let v be IteratorValue(next).\nii. If v is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\niii. ReturnIfAbrupt(v).\n\n"}, {"path": "./test262-main/test/language/statements/for/dstr/let-ary-ptrn-elem-obj-id-init.js", "description": " BindingElement with object binding pattern and initializer is used (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/let-ary-ptrn-elem-obj-id.js", "description": " BindingElement with object binding pattern and initializer is not used (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/let-ary-ptrn-elem-obj-prop-id-init.js", "description": " BindingElement with object binding pattern and initializer is used (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/let-ary-ptrn-elem-obj-prop-id.js", "description": " BindingElement with object binding pattern and initializer is not used (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/let-ary-ptrn-elision-exhausted.js", "description": " Elision accepts exhausted iterator (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ Elision ]\n\n1. Return the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with iteratorRecord\nas the argument.\n\n12.14.5.3 Runtime Semantics: IteratorDestructuringAssignmentEvaluation\n\nElision : ,\n\n1. If iteratorRecord.[[done]] is false, then\n[...]\n2. Return NormalCompletion(empty).\n\n"}, {"path": "./test262-main/test/language/statements/for/dstr/let-ary-ptrn-elision-step-err.js", "description": " Elision advances iterator and forwards abrupt completions (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ Elision ]\n\n1. Return the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with iteratorRecord\nas the argument.\n\n12.14.5.3 Runtime Semantics: IteratorDestructuringAssignmentEvaluation\n\nElision : ,\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/statements/for/dstr/let-ary-ptrn-elision.js", "description": " Elision advances iterator (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ Elision ]\n\n1. Return the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with iteratorRecord\nas the argument.\n\n12.14.5.3 Runtime Semantics: IteratorDestructuringAssignmentEvaluation\n\nElision : ,\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\nd. If next is false, set iteratorRecord.[[done]] to true.\n2. Return NormalCompletion(empty).\n\n"}, {"path": "./test262-main/test/language/statements/for/dstr/let-ary-ptrn-empty.js", "description": " No iteration occurs for an \"empty\" array binding pattern (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ ]\n\n1. Return NormalCompletion(empty).\n\n"}, {"path": "./test262-main/test/language/statements/for/dstr/let-ary-ptrn-rest-id-direct.js", "description": " Lone rest element (direct binding) (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "includes": ["compareArray.js"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\nRuntime Semantics: IteratorBindingInitialization\n\nBindingRestElement : ... BindingIdentifier\n\n[...]\n2. Let A be ! ArrayCreate(0).\n3. Let n be 0.\n4. Repeat,\n[...]\nf. Perform ! CreateDataPropertyOrThrow(A, ! ToString(n), nextValue).\ng. Set n to n + 1.\n\n"}, {"path": "./test262-main/test/language/statements/for/dstr/let-ary-ptrn-rest-id-elision-next-err.js", "description": " Rest element following elision elements (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nArrayBindingPattern : [ Elisionopt BindingRestElement ]\n1. If Elision is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with\niteratorRecord as the argument.\nb. ReturnIfAbrupt(status).\n2. Return the result of performing IteratorBindingInitialization for\nBindingRestElement with iteratorRecord and environment as arguments.\n\n"}, {"path": "./test262-main/test/language/statements/for/dstr/let-ary-ptrn-rest-id-elision.js", "description": " Rest element following elision elements (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nArrayBindingPattern : [ Elisionopt BindingRestElement ]\n1. If Elision is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with\niteratorRecord as the argument.\nb. ReturnIfAbrupt(status).\n2. Return the result of performing IteratorBindingInitialization for\nBindingRestElement with iteratorRecord and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/let-ary-ptrn-rest-id-exhausted.js", "description": " RestElement applied to an exhausted iterator (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\n[...]\nb. If iteratorRecord.[[done]] is true, then\ni. If environment is undefined, return PutValue(lhs, A).\nii. Return InitializeReferencedBinding(lhs, A).\n\n"}, {"path": "./test262-main/test/language/statements/for/dstr/let-ary-ptrn-rest-id-iter-close.js", "description": " The iterator is properly consumed by the destructuring pattern (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/let-ary-ptrn-rest-id-iter-step-err.js", "description": " Error forwarding when IteratorStep returns an abrupt completion (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\na. If iteratorRecord.[[done]] is false,\ni. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nii. If next is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\niii. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/statements/for/dstr/let-ary-ptrn-rest-id-iter-val-err.js", "description": " Error forwarding when IteratorValue returns an abrupt completion (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\n[...]\nc. Let nextValue be IteratorValue(next).\nd. If nextValue is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\ne. ReturnIfAbrupt(nextValue).\n\n"}, {"path": "./test262-main/test/language/statements/for/dstr/let-ary-ptrn-rest-id.js", "description": " Lone rest element (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n[...] 3. Let A be ArrayCreate(0). [...] 5. Repeat\n[...]\nf. Let status be CreateDataProperty(A, ToString (n), nextValue).\n[...]\n"}, {"path": "./test262-main/test/language/statements/for/dstr/let-obj-ptrn-prop-ary-init.js", "description": " Object binding pattern with \"nested\" array binding pattern using initializer (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/let-obj-ptrn-prop-ary-value-null.js", "description": " Object binding pattern with \"nested\" array binding pattern taking the `null` value (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/let-obj-ptrn-prop-ary.js", "description": " Object binding pattern with \"nested\" array binding pattern not using initializer (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/let-obj-ptrn-prop-eval-err.js", "description": " Evaluation of property name returns an abrupt completion (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingProperty : PropertyName : BindingElement\n\n1. Let P be the result of evaluating PropertyName\n2. ReturnIfAbrupt(P).\n"}, {"path": "./test262-main/test/language/statements/for/dstr/let-obj-ptrn-prop-id-get-value-err.js", "description": " Error thrown when accessing the corresponding property of the value object (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. Let v be GetV(value, propertyName).\n2. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/statements/for/dstr/let-obj-ptrn-prop-id-init-skipped.js", "description": " Destructuring initializer is not evaluated when value is not `undefined` (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n"}, {"path": "./test262-main/test/language/statements/for/dstr/let-obj-ptrn-prop-id-init-throws.js", "description": " Error thrown when evaluating the initializer (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/statements/for/dstr/let-obj-ptrn-prop-id-init-unresolvable.js", "description": " Destructuring initializer is an unresolvable reference (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/let-obj-ptrn-prop-id-init.js", "description": " Binding as specified via property name, identifier, and initializer (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/for/dstr/let-obj-ptrn-prop-obj-init.js", "description": " Object binding pattern with \"nested\" object binding pattern using initializer (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/let-obj-ptrn-prop-obj-value-null.js", "description": " Object binding pattern with \"nested\" object binding pattern taking the `null` value (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/let-obj-ptrn-prop-obj-value-undef.js", "description": " Object binding pattern with \"nested\" object binding pattern taking the `null` value (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/let-obj-ptrn-prop-obj.js", "description": " Object binding pattern with \"nested\" object binding pattern not using initializer (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LexicalDeclaration Expressionopt ; Expressionopt ) Statement\n\n[...]\n7. Let forDcl be the result of evaluating LexicalDeclaration.\n[...]\n\nLexicalDeclaration : LetOrConst BindingList ;\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return NormalCompletion(empty).\n\nBindingList : BindingList , LexicalBinding\n\n1. Let next be the result of evaluating BindingList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating LexicalBinding.\n\nLexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context\u2019s LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/var-ary-init-iter-get-err-array-prototype.js", "description": " Abrupt completion returned by GetIterator (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var VariableDeclarationList ; Expressionopt ; Expressionopt ) Statement\n\n1. Let varDcl be the result of evaluating VariableDeclarationList.\n[...]\n\n13.3.2.4 Runtime Semantics: Evaluation\n\nVariableDeclarationList : VariableDeclarationList , VariableDeclaration\n\n1. Let next be the result of evaluating VariableDeclarationList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating VariableDeclaration.\n\nVariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing rval and undefined as arguments.\n\nRuntime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iteratorRecord be ? GetIterator(value).\n\nGetIterator ( obj [ , hint [ , method ] ] )\n\n[...]\n4. Let iterator be ? Call(method, obj).\n\nCall ( F, V [ , argumentsList ] )\n\n[...]\n2. If IsCallable(F) is false, throw a TypeError exception.\n\n"}, {"path": "./test262-main/test/language/statements/for/dstr/var-ary-init-iter-get-err.js", "description": " Abrupt completion returned by GetIterator (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var VariableDeclarationList ; Expressionopt ; Expressionopt ) Statement\n\n1. Let varDcl be the result of evaluating VariableDeclarationList.\n[...]\n\n13.3.2.4 Runtime Semantics: Evaluation\n\nVariableDeclarationList : VariableDeclarationList , VariableDeclaration\n\n1. Let next be the result of evaluating VariableDeclarationList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating VariableDeclaration.\n\nVariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing rval and undefined as arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iterator be GetIterator(value).\n2. ReturnIfAbrupt(iterator).\n\n"}, {"path": "./test262-main/test/language/statements/for/dstr/var-ary-init-iter-no-close.js", "description": " Iterator is not closed when exhausted by pattern evaluation (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var VariableDeclarationList ; Expressionopt ; Expressionopt ) Statement\n\n1. Let varDcl be the result of evaluating VariableDeclarationList.\n[...]\n\n13.3.2.4 Runtime Semantics: Evaluation\n\nVariableDeclarationList : VariableDeclarationList , VariableDeclaration\n\n1. Let next be the result of evaluating VariableDeclarationList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating VariableDeclaration.\n\nVariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing rval and undefined as arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n[...]\n4. If iteratorRecord.[[done]] is false, return ? IteratorClose(iterator,\nresult).\n[...]\n\n"}, {"path": "./test262-main/test/language/statements/for/dstr/var-ary-ptrn-elem-ary-elem-init.js", "description": " BindingElement with array binding pattern and initializer is used (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var VariableDeclarationList ; Expressionopt ; Expressionopt ) Statement\n\n1. Let varDcl be the result of evaluating VariableDeclarationList.\n[...]\n\n13.3.2.4 Runtime Semantics: Evaluation\n\nVariableDeclarationList : VariableDeclarationList , VariableDeclaration\n\n1. Let next be the result of evaluating VariableDeclarationList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating VariableDeclaration.\n\nVariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing rval and undefined as arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/var-ary-ptrn-elem-ary-elem-iter.js", "description": " BindingElement with array binding pattern and initializer is not used (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var VariableDeclarationList ; Expressionopt ; Expressionopt ) Statement\n\n1. Let varDcl be the result of evaluating VariableDeclarationList.\n[...]\n\n13.3.2.4 Runtime Semantics: Evaluation\n\nVariableDeclarationList : VariableDeclarationList , VariableDeclaration\n\n1. Let next be the result of evaluating VariableDeclarationList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating VariableDeclaration.\n\nVariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing rval and undefined as arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\n[...]\ne. Else,\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/var-ary-ptrn-elem-ary-elision-init.js", "description": " BindingElement with array binding pattern and initializer is used (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var VariableDeclarationList ; Expressionopt ; Expressionopt ) Statement\n\n1. Let varDcl be the result of evaluating VariableDeclarationList.\n[...]\n\n13.3.2.4 Runtime Semantics: Evaluation\n\nVariableDeclarationList : VariableDeclarationList , VariableDeclaration\n\n1. Let next be the result of evaluating VariableDeclarationList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating VariableDeclaration.\n\nVariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing rval and undefined as arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n"}, {"path": "./test262-main/test/language/statements/for/dstr/var-ary-ptrn-elem-ary-elision-iter.js", "description": " BindingElement with array binding pattern and initializer is not used (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var VariableDeclarationList ; Expressionopt ; Expressionopt ) Statement\n\n1. Let varDcl be the result of evaluating VariableDeclarationList.\n[...]\n\n13.3.2.4 Runtime Semantics: Evaluation\n\nVariableDeclarationList : VariableDeclarationList , VariableDeclaration\n\n1. Let next be the result of evaluating VariableDeclarationList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating VariableDeclaration.\n\nVariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing rval and undefined as arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\n[...]\ne. Else,\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n"}, {"path": "./test262-main/test/language/statements/for/dstr/var-ary-ptrn-elem-ary-empty-init.js", "description": " BindingElement with array binding pattern and initializer is used (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var VariableDeclarationList ; Expressionopt ; Expressionopt ) Statement\n\n1. Let varDcl be the result of evaluating VariableDeclarationList.\n[...]\n\n13.3.2.4 Runtime Semantics: Evaluation\n\nVariableDeclarationList : VariableDeclarationList , VariableDeclaration\n\n1. Let next be the result of evaluating VariableDeclarationList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating VariableDeclaration.\n\nVariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing rval and undefined as arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n"}, {"path": "./test262-main/test/language/statements/for/dstr/var-ary-ptrn-elem-ary-empty-iter.js", "description": " BindingElement with array binding pattern and initializer is not used (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var VariableDeclarationList ; Expressionopt ; Expressionopt ) Statement\n\n1. Let varDcl be the result of evaluating VariableDeclarationList.\n[...]\n\n13.3.2.4 Runtime Semantics: Evaluation\n\nVariableDeclarationList : VariableDeclarationList , VariableDeclaration\n\n1. Let next be the result of evaluating VariableDeclarationList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating VariableDeclaration.\n\nVariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing rval and undefined as arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\n[...]\ne. Else,\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/var-ary-ptrn-elem-ary-rest-init.js", "description": " BindingElement with array binding pattern and initializer is used (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var VariableDeclarationList ; Expressionopt ; Expressionopt ) Statement\n\n1. Let varDcl be the result of evaluating VariableDeclarationList.\n[...]\n\n13.3.2.4 Runtime Semantics: Evaluation\n\nVariableDeclarationList : VariableDeclarationList , VariableDeclaration\n\n1. Let next be the result of evaluating VariableDeclarationList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating VariableDeclaration.\n\nVariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing rval and undefined as arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/var-ary-ptrn-elem-ary-rest-iter.js", "description": " BindingElement with array binding pattern and initializer is not used (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var VariableDeclarationList ; Expressionopt ; Expressionopt ) Statement\n\n1. Let varDcl be the result of evaluating VariableDeclarationList.\n[...]\n\n13.3.2.4 Runtime Semantics: Evaluation\n\nVariableDeclarationList : VariableDeclarationList , VariableDeclaration\n\n1. Let next be the result of evaluating VariableDeclarationList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating VariableDeclaration.\n\nVariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing rval and undefined as arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\n[...]\ne. Else,\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/var-ary-ptrn-elem-id-init-exhausted.js", "description": " Destructuring initializer with an exhausted iterator (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var VariableDeclarationList ; Expressionopt ; Expressionopt ) Statement\n\n1. Let varDcl be the result of evaluating VariableDeclarationList.\n[...]\n\n13.3.2.4 Runtime Semantics: Evaluation\n\nVariableDeclarationList : VariableDeclarationList , VariableDeclaration\n\n1. Let next be the result of evaluating VariableDeclarationList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating VariableDeclaration.\n\nVariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing rval and undefined as arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n5. If iteratorRecord.[[done]] is true, let v be undefined.\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/for/dstr/var-ary-ptrn-elem-id-init-hole.js", "description": " Destructuring initializer with a \"hole\" (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var VariableDeclarationList ; Expressionopt ; Expressionopt ) Statement\n\n1. Let varDcl be the result of evaluating VariableDeclarationList.\n[...]\n\n13.3.2.4 Runtime Semantics: Evaluation\n\nVariableDeclarationList : VariableDeclarationList , VariableDeclaration\n\n1. Let next be the result of evaluating VariableDeclarationList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating VariableDeclaration.\n\nVariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing rval and undefined as arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nSingleNameBinding : BindingIdentifier Initializeropt\n[...] 6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\n[...]\n7. If environment is undefined, return PutValue(lhs, v). 8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/for/dstr/var-ary-ptrn-elem-id-init-skipped.js", "description": " Destructuring initializer is not evaluated when value is not `undefined` (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var VariableDeclarationList ; Expressionopt ; Expressionopt ) Statement\n\n1. Let varDcl be the result of evaluating VariableDeclarationList.\n[...]\n\n13.3.2.4 Runtime Semantics: Evaluation\n\nVariableDeclarationList : VariableDeclarationList , VariableDeclaration\n\n1. Let next be the result of evaluating VariableDeclarationList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating VariableDeclaration.\n\nVariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing rval and undefined as arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/for/dstr/var-ary-ptrn-elem-id-init-throws.js", "description": " Destructuring initializer returns an abrupt completion (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var VariableDeclarationList ; Expressionopt ; Expressionopt ) Statement\n\n1. Let varDcl be the result of evaluating VariableDeclarationList.\n[...]\n\n13.3.2.4 Runtime Semantics: Evaluation\n\nVariableDeclarationList : VariableDeclarationList , VariableDeclaration\n\n1. Let next be the result of evaluating VariableDeclarationList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating VariableDeclaration.\n\nVariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing rval and undefined as arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/statements/for/dstr/var-ary-ptrn-elem-id-init-undef.js", "description": " Destructuring initializer with an undefined value (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var VariableDeclarationList ; Expressionopt ; Expressionopt ) Statement\n\n1. Let varDcl be the result of evaluating VariableDeclarationList.\n[...]\n\n13.3.2.4 Runtime Semantics: Evaluation\n\nVariableDeclarationList : VariableDeclarationList , VariableDeclaration\n\n1. Let next be the result of evaluating VariableDeclarationList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating VariableDeclaration.\n\nVariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing rval and undefined as arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/for/dstr/var-ary-ptrn-elem-id-init-unresolvable.js", "description": " Destructuring initializer is an unresolvable reference (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var VariableDeclarationList ; Expressionopt ; Expressionopt ) Statement\n\n1. Let varDcl be the result of evaluating VariableDeclarationList.\n[...]\n\n13.3.2.4 Runtime Semantics: Evaluation\n\nVariableDeclarationList : VariableDeclarationList , VariableDeclaration\n\n1. Let next be the result of evaluating VariableDeclarationList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating VariableDeclaration.\n\nVariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing rval and undefined as arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/var-ary-ptrn-elem-id-iter-step-err.js", "description": " Error forwarding when IteratorStep returns an abrupt completion (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var VariableDeclarationList ; Expressionopt ; Expressionopt ) Statement\n\n1. Let varDcl be the result of evaluating VariableDeclarationList.\n[...]\n\n13.3.2.4 Runtime Semantics: Evaluation\n\nVariableDeclarationList : VariableDeclarationList , VariableDeclaration\n\n1. Let next be the result of evaluating VariableDeclarationList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating VariableDeclaration.\n\nVariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing rval and undefined as arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/statements/for/dstr/var-ary-ptrn-elem-id-iter-val-array-prototype.js", "description": " Array destructuring uses overriden Array.prototype[Symbol.iterator] (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var VariableDeclarationList ; Expressionopt ; Expressionopt ) Statement\n\n1. Let varDcl be the result of evaluating VariableDeclarationList.\n[...]\n\n13.3.2.4 Runtime Semantics: Evaluation\n\nVariableDeclarationList : VariableDeclarationList , VariableDeclaration\n\n1. Let next be the result of evaluating VariableDeclarationList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating VariableDeclaration.\n\nVariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing rval and undefined as arguments.\n\nRuntime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializer_opt\n\n1. Let bindingId be StringValue of BindingIdentifier.\n2. Let lhs be ? ResolveBinding(bindingId, environment).\n3. If iteratorRecord.[[Done]] is false, then\na. Let next be IteratorStep(iteratorRecord).\nb. If next is an abrupt completion, set iteratorRecord.[[Done]] to true.\nc. ReturnIfAbrupt(next).\nd. If next is false, set iteratorRecord.[[Done]] to true.\ne. Else,\ni. Let v be IteratorValue(next).\nii. If v is an abrupt completion, set iteratorRecord.[[Done]] to true.\niii. ReturnIfAbrupt(v).\n[...]\n7. Return InitializeReferencedBinding(lhs, v).\n\n"}, {"path": "./test262-main/test/language/statements/for/dstr/var-ary-ptrn-elem-id-iter-val-err.js", "description": " Error forwarding when IteratorValue returns an abrupt completion (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var VariableDeclarationList ; Expressionopt ; Expressionopt ) Statement\n\n1. Let varDcl be the result of evaluating VariableDeclarationList.\n[...]\n\n13.3.2.4 Runtime Semantics: Evaluation\n\nVariableDeclarationList : VariableDeclarationList , VariableDeclaration\n\n1. Let next be the result of evaluating VariableDeclarationList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating VariableDeclaration.\n\nVariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing rval and undefined as arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\nd. If next is false, set iteratorRecord.[[done]] to true.\ne. Else,\ni. Let v be IteratorValue(next).\nii. If v is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\niii. ReturnIfAbrupt(v).\n\n"}, {"path": "./test262-main/test/language/statements/for/dstr/var-ary-ptrn-elem-obj-id-init.js", "description": " BindingElement with object binding pattern and initializer is used (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var VariableDeclarationList ; Expressionopt ; Expressionopt ) Statement\n\n1. Let varDcl be the result of evaluating VariableDeclarationList.\n[...]\n\n13.3.2.4 Runtime Semantics: Evaluation\n\nVariableDeclarationList : VariableDeclarationList , VariableDeclaration\n\n1. Let next be the result of evaluating VariableDeclarationList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating VariableDeclaration.\n\nVariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing rval and undefined as arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/var-ary-ptrn-elem-obj-id.js", "description": " BindingElement with object binding pattern and initializer is not used (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var VariableDeclarationList ; Expressionopt ; Expressionopt ) Statement\n\n1. Let varDcl be the result of evaluating VariableDeclarationList.\n[...]\n\n13.3.2.4 Runtime Semantics: Evaluation\n\nVariableDeclarationList : VariableDeclarationList , VariableDeclaration\n\n1. Let next be the result of evaluating VariableDeclarationList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating VariableDeclaration.\n\nVariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing rval and undefined as arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/var-ary-ptrn-elem-obj-prop-id-init.js", "description": " BindingElement with object binding pattern and initializer is used (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var VariableDeclarationList ; Expressionopt ; Expressionopt ) Statement\n\n1. Let varDcl be the result of evaluating VariableDeclarationList.\n[...]\n\n13.3.2.4 Runtime Semantics: Evaluation\n\nVariableDeclarationList : VariableDeclarationList , VariableDeclaration\n\n1. Let next be the result of evaluating VariableDeclarationList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating VariableDeclaration.\n\nVariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing rval and undefined as arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/var-ary-ptrn-elem-obj-prop-id.js", "description": " BindingElement with object binding pattern and initializer is not used (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var VariableDeclarationList ; Expressionopt ; Expressionopt ) Statement\n\n1. Let varDcl be the result of evaluating VariableDeclarationList.\n[...]\n\n13.3.2.4 Runtime Semantics: Evaluation\n\nVariableDeclarationList : VariableDeclarationList , VariableDeclaration\n\n1. Let next be the result of evaluating VariableDeclarationList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating VariableDeclaration.\n\nVariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing rval and undefined as arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/var-ary-ptrn-elision-exhausted.js", "description": " Elision accepts exhausted iterator (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var VariableDeclarationList ; Expressionopt ; Expressionopt ) Statement\n\n1. Let varDcl be the result of evaluating VariableDeclarationList.\n[...]\n\n13.3.2.4 Runtime Semantics: Evaluation\n\nVariableDeclarationList : VariableDeclarationList , VariableDeclaration\n\n1. Let next be the result of evaluating VariableDeclarationList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating VariableDeclaration.\n\nVariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing rval and undefined as arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ Elision ]\n\n1. Return the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with iteratorRecord\nas the argument.\n\n12.14.5.3 Runtime Semantics: IteratorDestructuringAssignmentEvaluation\n\nElision : ,\n\n1. If iteratorRecord.[[done]] is false, then\n[...]\n2. Return NormalCompletion(empty).\n\n"}, {"path": "./test262-main/test/language/statements/for/dstr/var-ary-ptrn-elision-step-err.js", "description": " Elision advances iterator and forwards abrupt completions (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var VariableDeclarationList ; Expressionopt ; Expressionopt ) Statement\n\n1. Let varDcl be the result of evaluating VariableDeclarationList.\n[...]\n\n13.3.2.4 Runtime Semantics: Evaluation\n\nVariableDeclarationList : VariableDeclarationList , VariableDeclaration\n\n1. Let next be the result of evaluating VariableDeclarationList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating VariableDeclaration.\n\nVariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing rval and undefined as arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ Elision ]\n\n1. Return the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with iteratorRecord\nas the argument.\n\n12.14.5.3 Runtime Semantics: IteratorDestructuringAssignmentEvaluation\n\nElision : ,\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/statements/for/dstr/var-ary-ptrn-elision.js", "description": " Elision advances iterator (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var VariableDeclarationList ; Expressionopt ; Expressionopt ) Statement\n\n1. Let varDcl be the result of evaluating VariableDeclarationList.\n[...]\n\n13.3.2.4 Runtime Semantics: Evaluation\n\nVariableDeclarationList : VariableDeclarationList , VariableDeclaration\n\n1. Let next be the result of evaluating VariableDeclarationList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating VariableDeclaration.\n\nVariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing rval and undefined as arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ Elision ]\n\n1. Return the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with iteratorRecord\nas the argument.\n\n12.14.5.3 Runtime Semantics: IteratorDestructuringAssignmentEvaluation\n\nElision : ,\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\nd. If next is false, set iteratorRecord.[[done]] to true.\n2. Return NormalCompletion(empty).\n\n"}, {"path": "./test262-main/test/language/statements/for/dstr/var-ary-ptrn-empty.js", "description": " No iteration occurs for an \"empty\" array binding pattern (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var VariableDeclarationList ; Expressionopt ; Expressionopt ) Statement\n\n1. Let varDcl be the result of evaluating VariableDeclarationList.\n[...]\n\n13.3.2.4 Runtime Semantics: Evaluation\n\nVariableDeclarationList : VariableDeclarationList , VariableDeclaration\n\n1. Let next be the result of evaluating VariableDeclarationList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating VariableDeclaration.\n\nVariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing rval and undefined as arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ ]\n\n1. Return NormalCompletion(empty).\n\n"}, {"path": "./test262-main/test/language/statements/for/dstr/var-ary-ptrn-rest-id-direct.js", "description": " Lone rest element (direct binding) (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "includes": ["compareArray.js"], "info": " |IterationStatement :\nfor ( var VariableDeclarationList ; Expressionopt ; Expressionopt ) Statement\n\n1. Let varDcl be the result of evaluating VariableDeclarationList.\n[...]\n\n13.3.2.4 Runtime Semantics: Evaluation\n\nVariableDeclarationList : VariableDeclarationList , VariableDeclaration\n\n1. Let next be the result of evaluating VariableDeclarationList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating VariableDeclaration.\n\nVariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing rval and undefined as arguments.\n\nRuntime Semantics: IteratorBindingInitialization\n\nBindingRestElement : ... BindingIdentifier\n\n[...]\n2. Let A be ! ArrayCreate(0).\n3. Let n be 0.\n4. Repeat,\n[...]\nf. Perform ! CreateDataPropertyOrThrow(A, ! ToString(n), nextValue).\ng. Set n to n + 1.\n\n"}, {"path": "./test262-main/test/language/statements/for/dstr/var-ary-ptrn-rest-id-elision-next-err.js", "description": " Rest element following elision elements (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var VariableDeclarationList ; Expressionopt ; Expressionopt ) Statement\n\n1. Let varDcl be the result of evaluating VariableDeclarationList.\n[...]\n\n13.3.2.4 Runtime Semantics: Evaluation\n\nVariableDeclarationList : VariableDeclarationList , VariableDeclaration\n\n1. Let next be the result of evaluating VariableDeclarationList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating VariableDeclaration.\n\nVariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing rval and undefined as arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nArrayBindingPattern : [ Elisionopt BindingRestElement ]\n1. If Elision is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with\niteratorRecord as the argument.\nb. ReturnIfAbrupt(status).\n2. Return the result of performing IteratorBindingInitialization for\nBindingRestElement with iteratorRecord and environment as arguments.\n\n"}, {"path": "./test262-main/test/language/statements/for/dstr/var-ary-ptrn-rest-id-elision.js", "description": " Rest element following elision elements (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var VariableDeclarationList ; Expressionopt ; Expressionopt ) Statement\n\n1. Let varDcl be the result of evaluating VariableDeclarationList.\n[...]\n\n13.3.2.4 Runtime Semantics: Evaluation\n\nVariableDeclarationList : VariableDeclarationList , VariableDeclaration\n\n1. Let next be the result of evaluating VariableDeclarationList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating VariableDeclaration.\n\nVariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing rval and undefined as arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nArrayBindingPattern : [ Elisionopt BindingRestElement ]\n1. If Elision is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with\niteratorRecord as the argument.\nb. ReturnIfAbrupt(status).\n2. Return the result of performing IteratorBindingInitialization for\nBindingRestElement with iteratorRecord and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/var-ary-ptrn-rest-id-exhausted.js", "description": " RestElement applied to an exhausted iterator (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var VariableDeclarationList ; Expressionopt ; Expressionopt ) Statement\n\n1. Let varDcl be the result of evaluating VariableDeclarationList.\n[...]\n\n13.3.2.4 Runtime Semantics: Evaluation\n\nVariableDeclarationList : VariableDeclarationList , VariableDeclaration\n\n1. Let next be the result of evaluating VariableDeclarationList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating VariableDeclaration.\n\nVariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing rval and undefined as arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\n[...]\nb. If iteratorRecord.[[done]] is true, then\ni. If environment is undefined, return PutValue(lhs, A).\nii. Return InitializeReferencedBinding(lhs, A).\n\n"}, {"path": "./test262-main/test/language/statements/for/dstr/var-ary-ptrn-rest-id-iter-close.js", "description": " The iterator is properly consumed by the destructuring pattern (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var VariableDeclarationList ; Expressionopt ; Expressionopt ) Statement\n\n1. Let varDcl be the result of evaluating VariableDeclarationList.\n[...]\n\n13.3.2.4 Runtime Semantics: Evaluation\n\nVariableDeclarationList : VariableDeclarationList , VariableDeclaration\n\n1. Let next be the result of evaluating VariableDeclarationList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating VariableDeclaration.\n\nVariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing rval and undefined as arguments.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/var-ary-ptrn-rest-id-iter-step-err.js", "description": " Error forwarding when IteratorStep returns an abrupt completion (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var VariableDeclarationList ; Expressionopt ; Expressionopt ) Statement\n\n1. Let varDcl be the result of evaluating VariableDeclarationList.\n[...]\n\n13.3.2.4 Runtime Semantics: Evaluation\n\nVariableDeclarationList : VariableDeclarationList , VariableDeclaration\n\n1. Let next be the result of evaluating VariableDeclarationList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating VariableDeclaration.\n\nVariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing rval and undefined as arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\na. If iteratorRecord.[[done]] is false,\ni. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nii. If next is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\niii. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/statements/for/dstr/var-ary-ptrn-rest-id-iter-val-err.js", "description": " Error forwarding when IteratorValue returns an abrupt completion (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var VariableDeclarationList ; Expressionopt ; Expressionopt ) Statement\n\n1. Let varDcl be the result of evaluating VariableDeclarationList.\n[...]\n\n13.3.2.4 Runtime Semantics: Evaluation\n\nVariableDeclarationList : VariableDeclarationList , VariableDeclaration\n\n1. Let next be the result of evaluating VariableDeclarationList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating VariableDeclaration.\n\nVariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing rval and undefined as arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\n[...]\nc. Let nextValue be IteratorValue(next).\nd. If nextValue is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\ne. ReturnIfAbrupt(nextValue).\n\n"}, {"path": "./test262-main/test/language/statements/for/dstr/var-ary-ptrn-rest-id.js", "description": " Lone rest element (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var VariableDeclarationList ; Expressionopt ; Expressionopt ) Statement\n\n1. Let varDcl be the result of evaluating VariableDeclarationList.\n[...]\n\n13.3.2.4 Runtime Semantics: Evaluation\n\nVariableDeclarationList : VariableDeclarationList , VariableDeclaration\n\n1. Let next be the result of evaluating VariableDeclarationList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating VariableDeclaration.\n\nVariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing rval and undefined as arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n[...] 3. Let A be ArrayCreate(0). [...] 5. Repeat\n[...]\nf. Let status be CreateDataProperty(A, ToString (n), nextValue).\n[...]\n"}, {"path": "./test262-main/test/language/statements/for/dstr/var-obj-ptrn-prop-ary-init.js", "description": " Object binding pattern with \"nested\" array binding pattern using initializer (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var VariableDeclarationList ; Expressionopt ; Expressionopt ) Statement\n\n1. Let varDcl be the result of evaluating VariableDeclarationList.\n[...]\n\n13.3.2.4 Runtime Semantics: Evaluation\n\nVariableDeclarationList : VariableDeclarationList , VariableDeclaration\n\n1. Let next be the result of evaluating VariableDeclarationList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating VariableDeclaration.\n\nVariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing rval and undefined as arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/var-obj-ptrn-prop-ary-value-null.js", "description": " Object binding pattern with \"nested\" array binding pattern taking the `null` value (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var VariableDeclarationList ; Expressionopt ; Expressionopt ) Statement\n\n1. Let varDcl be the result of evaluating VariableDeclarationList.\n[...]\n\n13.3.2.4 Runtime Semantics: Evaluation\n\nVariableDeclarationList : VariableDeclarationList , VariableDeclaration\n\n1. Let next be the result of evaluating VariableDeclarationList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating VariableDeclaration.\n\nVariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing rval and undefined as arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/var-obj-ptrn-prop-ary.js", "description": " Object binding pattern with \"nested\" array binding pattern not using initializer (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var VariableDeclarationList ; Expressionopt ; Expressionopt ) Statement\n\n1. Let varDcl be the result of evaluating VariableDeclarationList.\n[...]\n\n13.3.2.4 Runtime Semantics: Evaluation\n\nVariableDeclarationList : VariableDeclarationList , VariableDeclaration\n\n1. Let next be the result of evaluating VariableDeclarationList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating VariableDeclaration.\n\nVariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing rval and undefined as arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/var-obj-ptrn-prop-eval-err.js", "description": " Evaluation of property name returns an abrupt completion (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var VariableDeclarationList ; Expressionopt ; Expressionopt ) Statement\n\n1. Let varDcl be the result of evaluating VariableDeclarationList.\n[...]\n\n13.3.2.4 Runtime Semantics: Evaluation\n\nVariableDeclarationList : VariableDeclarationList , VariableDeclaration\n\n1. Let next be the result of evaluating VariableDeclarationList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating VariableDeclaration.\n\nVariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing rval and undefined as arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingProperty : PropertyName : BindingElement\n\n1. Let P be the result of evaluating PropertyName\n2. ReturnIfAbrupt(P).\n"}, {"path": "./test262-main/test/language/statements/for/dstr/var-obj-ptrn-prop-id-get-value-err.js", "description": " Error thrown when accessing the corresponding property of the value object (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var VariableDeclarationList ; Expressionopt ; Expressionopt ) Statement\n\n1. Let varDcl be the result of evaluating VariableDeclarationList.\n[...]\n\n13.3.2.4 Runtime Semantics: Evaluation\n\nVariableDeclarationList : VariableDeclarationList , VariableDeclaration\n\n1. Let next be the result of evaluating VariableDeclarationList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating VariableDeclaration.\n\nVariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing rval and undefined as arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. Let v be GetV(value, propertyName).\n2. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/statements/for/dstr/var-obj-ptrn-prop-id-init-skipped.js", "description": " Destructuring initializer is not evaluated when value is not `undefined` (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var VariableDeclarationList ; Expressionopt ; Expressionopt ) Statement\n\n1. Let varDcl be the result of evaluating VariableDeclarationList.\n[...]\n\n13.3.2.4 Runtime Semantics: Evaluation\n\nVariableDeclarationList : VariableDeclarationList , VariableDeclaration\n\n1. Let next be the result of evaluating VariableDeclarationList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating VariableDeclaration.\n\nVariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing rval and undefined as arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n"}, {"path": "./test262-main/test/language/statements/for/dstr/var-obj-ptrn-prop-id-init-throws.js", "description": " Error thrown when evaluating the initializer (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var VariableDeclarationList ; Expressionopt ; Expressionopt ) Statement\n\n1. Let varDcl be the result of evaluating VariableDeclarationList.\n[...]\n\n13.3.2.4 Runtime Semantics: Evaluation\n\nVariableDeclarationList : VariableDeclarationList , VariableDeclaration\n\n1. Let next be the result of evaluating VariableDeclarationList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating VariableDeclaration.\n\nVariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing rval and undefined as arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/statements/for/dstr/var-obj-ptrn-prop-id-init-unresolvable.js", "description": " Destructuring initializer is an unresolvable reference (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var VariableDeclarationList ; Expressionopt ; Expressionopt ) Statement\n\n1. Let varDcl be the result of evaluating VariableDeclarationList.\n[...]\n\n13.3.2.4 Runtime Semantics: Evaluation\n\nVariableDeclarationList : VariableDeclarationList , VariableDeclaration\n\n1. Let next be the result of evaluating VariableDeclarationList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating VariableDeclaration.\n\nVariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing rval and undefined as arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/var-obj-ptrn-prop-id-init.js", "description": " Binding as specified via property name, identifier, and initializer (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var VariableDeclarationList ; Expressionopt ; Expressionopt ) Statement\n\n1. Let varDcl be the result of evaluating VariableDeclarationList.\n[...]\n\n13.3.2.4 Runtime Semantics: Evaluation\n\nVariableDeclarationList : VariableDeclarationList , VariableDeclaration\n\n1. Let next be the result of evaluating VariableDeclarationList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating VariableDeclaration.\n\nVariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing rval and undefined as arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/for/dstr/var-obj-ptrn-prop-obj-init.js", "description": " Object binding pattern with \"nested\" object binding pattern using initializer (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var VariableDeclarationList ; Expressionopt ; Expressionopt ) Statement\n\n1. Let varDcl be the result of evaluating VariableDeclarationList.\n[...]\n\n13.3.2.4 Runtime Semantics: Evaluation\n\nVariableDeclarationList : VariableDeclarationList , VariableDeclaration\n\n1. Let next be the result of evaluating VariableDeclarationList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating VariableDeclaration.\n\nVariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing rval and undefined as arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/var-obj-ptrn-prop-obj-value-null.js", "description": " Object binding pattern with \"nested\" object binding pattern taking the `null` value (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var VariableDeclarationList ; Expressionopt ; Expressionopt ) Statement\n\n1. Let varDcl be the result of evaluating VariableDeclarationList.\n[...]\n\n13.3.2.4 Runtime Semantics: Evaluation\n\nVariableDeclarationList : VariableDeclarationList , VariableDeclaration\n\n1. Let next be the result of evaluating VariableDeclarationList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating VariableDeclaration.\n\nVariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing rval and undefined as arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/var-obj-ptrn-prop-obj-value-undef.js", "description": " Object binding pattern with \"nested\" object binding pattern taking the `null` value (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var VariableDeclarationList ; Expressionopt ; Expressionopt ) Statement\n\n1. Let varDcl be the result of evaluating VariableDeclarationList.\n[...]\n\n13.3.2.4 Runtime Semantics: Evaluation\n\nVariableDeclarationList : VariableDeclarationList , VariableDeclaration\n\n1. Let next be the result of evaluating VariableDeclarationList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating VariableDeclaration.\n\nVariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing rval and undefined as arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/for/dstr/var-obj-ptrn-prop-obj.js", "description": " Object binding pattern with \"nested\" object binding pattern not using initializer (for statement)", "esid": " sec-for-statement-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var VariableDeclarationList ; Expressionopt ; Expressionopt ) Statement\n\n1. Let varDcl be the result of evaluating VariableDeclarationList.\n[...]\n\n13.3.2.4 Runtime Semantics: Evaluation\n\nVariableDeclarationList : VariableDeclarationList , VariableDeclaration\n\n1. Let next be the result of evaluating VariableDeclarationList.\n2. ReturnIfAbrupt(next).\n3. Return the result of evaluating VariableDeclaration.\n\nVariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing rval and undefined as arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/for-in/order-after-define-property.js", "esid": " sec-enumerate-object-properties", "description": " >Property names are returned in ascending chronological order of creation\nthat is unaffected by [[DefineOwnProperty]].\n", "info": " |EnumerateObjectProperties ( O )\n\nEnumerateObjectProperties must obtain the own property keys of the target object\nby calling its [[OwnPropertyKeys]] internal method. Property attributes of the\ntarget object must be obtained by calling its [[GetOwnProperty]] internal method.\n\nOrdinaryOwnPropertyKeys ( O )\n\n[...]\n3. For each own property key P of O that is a String but is not an array index,\nin ascending chronological order of property creation, do\na. Add P as the last element of keys.\n[...]\n5. Return keys.\n", "includes": ["compareArray.js"]}, {"path": "./test262-main/test/language/statements/for-in/order-enumerable-shadowed.js", "esid": " sec-enumerate-object-properties", "description": " Enumerable properties the prototype which are shadowed by non-enumerable properties on the object are not enumerated", "features": ["for-in-order"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/language/statements/for-in/order-property-added.js", "esid": " sec-enumerate-object-properties", "description": " Properties added to the object during iteration are not enumerated", "features": ["for-in-order"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/language/statements/for-in/order-property-on-prototype.js", "esid": " sec-enumerate-object-properties", "description": " Properties on the prototype are enumerated after properties on the object", "features": ["for-in-order"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/language/statements/for-in/order-simple-object.js", "esid": " sec-enumerate-object-properties", "description": " Property enumeration order for simple objects", "features": ["for-in-order"], "includes": ["compareArray.js"]}, {"path": "./test262-main/test/language/statements/for-of/Array.prototype.Symbol.iterator.js", "description": " >The method should return a valid iterator that can be traversed using a\n`for...of` loop.\n", "version": 6, "esid": " 22.1.3.30", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/language/statements/for-of/Array.prototype.entries.js", "description": " >The method should return a valid iterator that can be traversed using a\n`for...of` loop.\nes6id: 22.1.3.4\n", "version": 6, "esid": " 22.1.3.4"}, {"path": "./test262-main/test/language/statements/for-of/Array.prototype.keys.js", "description": " >The method should return a valid iterator that can be traversed using a\n`for...of` loop.\nes6id: 22.1.3.13\n", "version": 6, "esid": " 22.1.3.13"}, {"path": "./test262-main/test/language/statements/for-of/break-from-catch.js", "version": 6, "esid": " 13.6.4.13 S5.n", "description": " >Control flow during body evaluation should honor `break` statements within\nthe `catch` block of `try` statements.\n", "features": ["generators"]}, {"path": "./test262-main/test/language/statements/for-of/break-from-finally.js", "version": 6, "esid": " 13.6.4.13 S5.n", "description": " >Control flow during body evaluation should honor `break` statements within\n`finally` blocks.\n", "features": ["generators"]}, {"path": "./test262-main/test/language/statements/for-of/break-from-try.js", "version": 6, "esid": " 13.6.4.13 S5.n", "description": " >Control flow during body evaluation should honor `break` statements within\n`try` blocks.\n", "features": ["generators"]}, {"path": "./test262-main/test/language/statements/for-of/break-label-from-catch.js", "version": 6, "esid": " 13.6.4.13 S5.n", "description": " >Control flow during body evaluation should honor `break` statements within\n`try` blocks.\n", "features": ["generators"]}, {"path": "./test262-main/test/language/statements/for-of/break-label-from-finally.js", "version": 6, "esid": " 13.6.4.13 S5.n", "description": " >Control flow during body evaluation should honor `break` statements within\n`try` blocks.\n", "features": ["generators"]}, {"path": "./test262-main/test/language/statements/for-of/break-label-from-try.js", "version": 6, "esid": " 13.6.4.13 S5.n", "description": " >Control flow during body evaluation should honor `break` statements within\n`try` blocks.\n", "features": ["generators"]}, {"path": "./test262-main/test/language/statements/for-of/break-label.js", "version": 6, "esid": " 13.6.4.13 S5.n", "description": " >Control flow during body evaluation should honor labeled `break`\nstatements.\n", "features": ["generators"]}, {"path": "./test262-main/test/language/statements/for-of/break.js", "version": 6, "esid": " 13.6.4.13 S5.n", "description": " >Control flow during body evaluation should honor `break` statements.\n", "features": ["generators"]}, {"path": "./test262-main/test/language/statements/for-of/continue-from-catch.js", "version": 6, "esid": " 13.6.4.13 S5.n", "description": " >Control flow during body evaluation should honor `continue` statements\nwithin the `catch` block of `try` statements.\n", "features": ["generators"]}, {"path": "./test262-main/test/language/statements/for-of/continue-from-finally.js", "version": 6, "esid": " 13.6.4.13 S5.n", "description": " >Control flow during body evaluation should honor `continue` statements\nwithin the `finally` block of `try` statements.\n", "features": ["generators"]}, {"path": "./test262-main/test/language/statements/for-of/continue-from-try.js", "version": 6, "esid": " 13.6.4.13 S5.n", "description": " >Control flow during body evaluation should honor `continue` statements\nwithin `try` blocks.\n", "features": ["generators"]}, {"path": "./test262-main/test/language/statements/for-of/continue-label-from-catch.js", "version": 6, "esid": " 13.6.4.13 S5.n", "description": " >Control flow during body evaluation should honor `continue` statements\nwithin the `catch` block of `try` statements.\n", "features": ["generators"]}, {"path": "./test262-main/test/language/statements/for-of/continue-label-from-finally.js", "version": 6, "esid": " 13.6.4.13 S5.n", "description": " >Control flow during body evaluation should honor `continue` statements\nwithin the `finally` block of `try` statements.\n", "features": ["generators"]}, {"path": "./test262-main/test/language/statements/for-of/continue-label-from-try.js", "version": 6, "esid": " 13.6.4.13 S5.n", "description": " >Control flow during body evaluation should honor `continue` statements\nwithin `try` blocks.\n", "features": ["generators"]}, {"path": "./test262-main/test/language/statements/for-of/continue-label.js", "version": 6, "esid": " 13.6.4.13 S5.n", "description": " >Control flow during body evaluation should honor labeled `continue`\nstatements.\n", "features": ["generators"]}, {"path": "./test262-main/test/language/statements/for-of/continue.js", "version": 6, "esid": " 13.6.4.13 S5.n", "description": " >Control flow during body evaluation should honor `continue` statements.\n", "features": ["generators"]}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-elem-init-assignment.js", "description": " If the Initializer is present and v is undefined, the Initializer should be evaluated and the result assigned to the target reference. (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-elem-init-evaluation.js", "description": " The Initializer should only be evaluated if v is undefined. (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-elem-init-in.js", "description": " The Initializer in an AssignmentElement may be an `in` expression. (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-elem-init-order.js", "description": " Initializer values should be assigned in left-to-right order. (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-elem-init-simple-no-strict.js", "description": " Identifiers that appear as the DestructuringAssignmentTarget in an AssignmentElement should take on the iterated value corresponding to their position in the ArrayAssignmentPattern. (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated", "noStrict"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-elem-init-yield-expr.js", "description": " When a `yield` token appears within the Initializer of an AssignmentElement within a generator function body, it behaves as a YieldExpression. (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-elem-iter-get-err.js", "description": " Abrupt completion returned from GetIterator (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nArrayAssignmentPattern : [ AssignmentElementList ]\n\n1. Let iterator be GetIterator(value).\n2. ReturnIfAbrupt(iterator).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-elem-iter-nrml-close-skip.js", "description": " IteratorClose is not called when assignment evaluation has exhausted the iterator (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nArrayAssignmentPattern : [ AssignmentElementList ]\n\n[...]\n5. If iteratorRecord.[[done]] is false, return IteratorClose(iterator, result).\n6. Return result.\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-elem-iter-thrw-close-skip.js", "description": " IteratorClose is not called when iteration produces an abrupt completion (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nArrayAssignmentPattern : [ AssignmentElementList ]\n\n[...]\n5. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nresult).\n6. Return result.\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-elem-nested-array-yield-expr.js", "description": " When a `yield` token appears within the DestructuringAssignmentTarget of a nested destructuring assignment and within a generator function body, it behaves as a YieldExpression. (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-elem-put-obj-literal-prop-ref-init-active.js", "description": " The DestructuringAssignmentTarget of an AssignmentElement can extend to LHSExpressions if it is neither an ObjectLiteral nor an ArrayLiteral and its AssignmentTargetTyp is simple. Using MemberExpression (ObjLiteral + identifier) with activated initializer. (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nSyntax\n\nAssignmentPattern : ArrayAssignmentPattern\nArrayAssignmentPattern : [ AssignmentElementList ]\nAssignmentElementList : AssignmentElisionElement\nAssignmentElisionElement : Elision_opt AssignmentElement\nAssignmentElement : DestructuringAssignmentTarget Initializer_opt\nDestructuringAssignmentTarget : LeftHandSideExpression\n\nStatic Semantics: Early Errors\n\nDestructuringAssignmentTarget : LeftHandSideExpression\n\n- It is a Syntax Error if LeftHandSideExpression is either an ObjectLiteral or an ArrayLiteral and if LeftHandSideExpression is not covering an AssignmentPattern.\n- It is a Syntax Error if LeftHandSideExpression is neither an ObjectLiteral nor an ArrayLiteral and AssignmentTargetType(LeftHandSideExpression) is not simple.\n\nRuntime Semantics: DestructuringAssignmentEvaluation\nArrayAssignmentPattern : [ AssignmentElementList ]\n\n1. Let iteratorRecord be ? GetIterator(value).\n2. Let result be IteratorDestructuringAssignmentEvaluation of AssignmentElementList with argument iteratorRecord.\n3. If iteratorRecord.[[Done]] is false, return ? IteratorClose(iteratorRecord, result).\n4. Return result.\n\nRuntime Semantics: IteratorDestructuringAssignmentEvaluation\nAssignmentElement : DestructuringAssignmentTarget Initializer\n\n1. If DestructuringAssignmentTarget is neither an ObjectLiteral nor an ArrayLiteral, then\na. Let lref be the result of evaluating DestructuringAssignmentTarget.\n...\n7. Return ? PutValue(lref, v).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-elem-put-obj-literal-prop-ref-init.js", "description": " The DestructuringAssignmentTarget of an AssignmentElement can extend to LHSExpressions if it is neither an ObjectLiteral nor an ArrayLiteral and its AssignmentTargetTyp is simple. Using MemberExpression (ObjLiteral + identifier) with initializer. (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nSyntax\n\nAssignmentPattern : ArrayAssignmentPattern\nArrayAssignmentPattern : [ AssignmentElementList ]\nAssignmentElementList : AssignmentElisionElement\nAssignmentElisionElement : Elision_opt AssignmentElement\nAssignmentElement : DestructuringAssignmentTarget Initializer_opt\nDestructuringAssignmentTarget : LeftHandSideExpression\n\nStatic Semantics: Early Errors\n\nDestructuringAssignmentTarget : LeftHandSideExpression\n\n- It is a Syntax Error if LeftHandSideExpression is either an ObjectLiteral or an ArrayLiteral and if LeftHandSideExpression is not covering an AssignmentPattern.\n- It is a Syntax Error if LeftHandSideExpression is neither an ObjectLiteral nor an ArrayLiteral and AssignmentTargetType(LeftHandSideExpression) is not simple.\n\nRuntime Semantics: DestructuringAssignmentEvaluation\nArrayAssignmentPattern : [ AssignmentElementList ]\n\n1. Let iteratorRecord be ? GetIterator(value).\n2. Let result be IteratorDestructuringAssignmentEvaluation of AssignmentElementList with argument iteratorRecord.\n3. If iteratorRecord.[[Done]] is false, return ? IteratorClose(iteratorRecord, result).\n4. Return result.\n\nRuntime Semantics: IteratorDestructuringAssignmentEvaluation\nAssignmentElement : DestructuringAssignmentTarget Initializer\n\n1. If DestructuringAssignmentTarget is neither an ObjectLiteral nor an ArrayLiteral, then\na. Let lref be the result of evaluating DestructuringAssignmentTarget.\n...\n7. Return ? PutValue(lref, v).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-elem-put-unresolvable-strict.js", "description": " In strict mode, if the the assignment target is an unresolvable reference, a ReferenceError should be thrown. (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated", "onlyStrict"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-elem-target-yield-expr.js", "description": " When a `yield` token appears within the DestructuringAssignmentTarget of an AssignmentElement within a generator function body, it behaves as a YieldExpression. (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-elem-trlg-iter-elision-iter-abpt.js", "description": " Abrupt completion returned during evaluation of elision (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nArrayAssignmentPattern :\n[ AssignmentElementList , Elisionopt AssignmentRestElementopt ]\n\n[...]\n6. If Elision is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with\niteratorRecord as the argument.\nb. If status is an abrupt completion, then\ni. If iteratorRecord.[[done]] is false, return\nIteratorClose(iterator, status).\nii. Return Completion(status).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-elem-trlg-iter-elision-iter-nrml-close-skip.js", "description": " IteratorClose not invoked when elision exhausts the iterator (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nArrayAssignmentPattern :\n[ AssignmentElementList , Elisionopt AssignmentRestElementopt ]\n\n[...]\n6. If Elision is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with\niteratorRecord as the argument.\nb. If status is an abrupt completion, then\n[...]\n8. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nstatus).\n9. Return Completion(status).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-elem-trlg-iter-get-err.js", "description": " Abrupt completion returned from GetIterator (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nArrayAssignmentPattern :\n[ AssignmentElementList , Elisionopt AssignmentRestElementopt ]\n\n1. Let iterator be GetIterator(value).\n2. ReturnIfAbrupt(iterator).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-elem-trlg-iter-list-nrml-close-skip.js", "description": " IteratorClose is not invoked when evaluation of AssignmentElementList exhausts the iterator (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nArrayAssignmentPattern :\n[ AssignmentElementList , Elisionopt AssignmentRestElementopt ]\n\n[...]\n3. Let iteratorRecord be Record {[[iterator]]: iterator, [[done]]: false}.\n4. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentElementList using\niteratorRecord as the argument.\n5. If status is an abrupt completion, then\na. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nstatus).\nb. Return Completion(status).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-elem-trlg-iter-list-thrw-close-skip.js", "description": " IteratorClose is not invoked when evaluation of AssignmentElementList returns an abrupt completion and the iterator has been marked as \"done\" (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nArrayAssignmentPattern :\n[ AssignmentElementList , Elisionopt AssignmentRestElementopt ]\n\n[...]\n3. Let iteratorRecord be Record {[[iterator]]: iterator, [[done]]: false}.\n4. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentElementList using\niteratorRecord as the argument.\n5. If status is an abrupt completion, then\na. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nstatus).\nb. Return Completion(status).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-elem-trlg-iter-rest-nrml-close-skip.js", "description": " IteratorClose is not called when rest element evaluation has exhausted the iterator (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nArrayAssignmentPattern :\n[ AssignmentElementList , Elisionopt AssignmentRestElementopt ]\n\n[...]\n7. If AssignmentRestElement is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentRestElement\nwith iteratorRecord as the argument.\n8. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nstatus).\n9. Return Completion(status).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-elem-trlg-iter-rest-thrw-close-skip.js", "description": " Abrupt completion returned during iteration for rest element (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nArrayAssignmentPattern :\n[ AssignmentElementList , Elisionopt AssignmentRestElementopt ]\n\n[...]\n7. If AssignmentRestElement is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentRestElement\nwith iteratorRecord as the argument.\n8. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nstatus).\n9. Return Completion(status).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-elision-iter-abpt.js", "description": " IteratorClose is not called when iteration produces an abrupt completion (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nArrayAssignmentPattern : [ Elision ]\n\n1. Let iterator be GetIterator(value).\n[...]\n5. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nresult).\n[...]\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-elision-iter-get-err.js", "description": " Abrupt completion returned from GetIterator (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nArrayAssignmentPattern : [ Elision ]\n\n1. Let iterator be GetIterator(value).\n2. ReturnIfAbrupt(iterator).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-elision-iter-nrml-close-skip.js", "description": " IteratorClose is not called when iteration has exhausted the iterator (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nArrayAssignmentPattern : [ Elision ]\n\n1. Let iterator be GetIterator(value).\n[...]\n5. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nresult).\n[...]\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-elision-val-bool.js", "description": " An ArrayAssignmentPattern containing only Elisions requires iterable values and throws for boolean values. (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-elision-val-num.js", "description": " An ArrayAssignmentPattern containing only Elisions requires iterable values and throws for number values. (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-elision-val-symbol.js", "description": " An ArrayAssignmentPattern containing only Elisions requires iterable values and throws for symbol values. (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-empty-iter-get-err.js", "description": " Abrupt completion returned from GetIterator (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nArrayAssignmentPattern : [ ]\n\n1. Let iterator be GetIterator(value).\n2. ReturnIfAbrupt(iterator).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-empty-val-bool.js", "description": " An ArrayAssignmentPattern without an AssignmentElementList requires iterable values and throws for boolean values (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-empty-val-null.js", "description": " An ArrayAssignmentPattern without an AssignmentElementList requires iterable values and throws for `null`. (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-empty-val-num.js", "description": " An ArrayAssignmentPattern without an AssignmentElementList requires iterable values and throws for number values. (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-empty-val-symbol.js", "description": " An ArrayAssignmentPattern without an AssignmentElementList requires iterable values and throws for Symbol values. (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-empty-val-undef.js", "description": " An ArrayAssignmentPattern without an AssignmentElementList requires iterable values and throws for `undefined`. (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-iteration.js", "description": " Value iteration only proceeds for the number of elements in the ArrayAssignmentPattern. (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-rest-after-element.js", "description": " An AssignmentRestElement following an AssignmentElement consumes all remaining iterable values. (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-rest-after-elision.js", "description": " An AssignmentRestElement following an elision consumes all remaining iterable values. (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-rest-elision-iter-abpt.js", "description": " IteratorClose is not called when assignment evaluation produces an abrupt completion (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nArrayAssignmentPattern : [ Elisionopt AssignmentRestElement ]\n\n[...]\n4. If Elision is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with\niteratorRecord as the argument.\nb. If status is an abrupt completion, then\ni. If iteratorRecord.[[done]] is false, return\nIteratorClose(iterator, status).\nii. Return Completion(status).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-rest-elision.js", "description": " ArrayAssignmentPattern may include elisions at any position preceding a AssignmentRestElement in a AssignmentElementList. (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-rest-iter-get-err.js", "description": " Abrupt completion returned from GetIterator (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nArrayAssignmentPattern : [ Elisionopt AssignmentRestElement ]\n\n1. Let iterator be GetIterator(value).\n2. ReturnIfAbrupt(iterator).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-rest-iter-nrml-close-skip.js", "description": " IteratorClose is not called when assignment evaluation has exhausted the iterator (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nArrayAssignmentPattern : [ Elisionopt AssignmentRestElement ]\n\n[...]\n5. Let result be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentRestElement with\niteratorRecord as the argument\n6. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nresult).\n7. Return result.\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-rest-iter-thrw-close-skip.js", "description": " IteratorClose is not called when iteration produces an abrupt completion (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nArrayAssignmentPattern : [ Elisionopt AssignmentRestElement ]\n\n[...]\n5. Let result be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentRestElement with\niteratorRecord as the argument\n6. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nresult).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-rest-iteration.js", "description": " In the presense of an AssignmentRestElement, value iteration exhausts the iterable value; (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-rest-lref.js", "description": " Reference is evaluated during assignment (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nArrayAssignmentPattern : [ Elisionopt AssignmentRestElement ]\n\n[...]\n5. Let result be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentRestElement with\niteratorRecord as the argument\n6. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nresult).\n\nAssignmentRestElement[Yield] : ... DestructuringAssignmentTarget\n\n1. If DestructuringAssignmentTarget is neither an ObjectLiteral nor an\nArrayLiteral, then\na. Let lref be the result of evaluating DestructuringAssignmentTarget.\nb. ReturnIfAbrupt(lref).\n[...]\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-rest-put-prop-ref-no-get.js", "description": " If the DestructuringAssignmentTarget of an AssignmentElement is a PropertyReference, it should not be evaluated. (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-rest-put-prop-ref-user-err-iter-close-skip.js", "description": " IteratorClose is not called when value assignment produces an abrupt completion. (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nArrayAssignmentPattern : [ Elisionopt AssignmentRestElement ]\n\n[...]\n5. Let result be the result of performing\nIteratorDestructuringAssignmentEvaluation of AssignmentRestElement with\niteratorRecord as the argument\n6. If iteratorRecord.[[done]] is false, return IteratorClose(iterator,\nresult).\n\nAssignmentRestElement[Yield] : ... DestructuringAssignmentTarget\n\n[...]\n4. Repeat while iteratorRecord.[[done]] is false\n[...]\nd. If next is false, set iteratorRecord.[[done]] to true.\n[...]\n5. If DestructuringAssignmentTarget is neither an ObjectLiteral nor an\nArrayLiteral, then\na. Return PutValue(lref, A).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-rest-put-prop-ref-user-err.js", "description": " Any error raised as a result of setting the value should be forwarded to the runtime. (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-rest-put-prop-ref.js", "description": " The DestructuringAssignmentTarget of an AssignmentElement may be a PropertyReference. (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-rest-put-unresolvable-no-strict.js", "description": " Outside of strict mode, if the the assignment target is an unresolvable reference, a new `var` binding should be created in the environment record. (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated", "noStrict"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-rest-put-unresolvable-strict.js", "description": " In strict mode, if the the assignment target is an unresolvable reference, a ReferenceError should be thrown. (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated", "onlyStrict"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/array-rest-yield-expr.js", "description": " When a `yield` token appears within the DestructuringAssignmentTarget of an AssignmentRestElement and within the body of a generator function, it should behave as a YieldExpression. (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/let-ary-init-iter-get-err-array-prototype.js", "description": " Abrupt completion returned by GetIterator (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( ForDeclaration of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForDeclaration, Statement, keyResult,\nlexicalBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n[...]\niii. Else,\n1. Assert: lhsKind is lexicalBinding.\n2. Assert: lhs is a ForDeclaration.\n3. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and iterationEnv as arguments.\n[...]\n\nRuntime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iteratorRecord be ? GetIterator(value).\n\nGetIterator ( obj [ , hint [ , method ] ] )\n\n[...]\n4. Let iterator be ? Call(method, obj).\n\nCall ( F, V [ , argumentsList ] )\n\n[...]\n2. If IsCallable(F) is false, throw a TypeError exception.\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/let-ary-init-iter-get-err.js", "description": " Abrupt completion returned by GetIterator (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( ForDeclaration of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForDeclaration, Statement, keyResult,\nlexicalBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n[...]\niii. Else,\n1. Assert: lhsKind is lexicalBinding.\n2. Assert: lhs is a ForDeclaration.\n3. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and iterationEnv as arguments.\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iterator be GetIterator(value).\n2. ReturnIfAbrupt(iterator).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/let-ary-init-iter-no-close.js", "description": " Iterator is not closed when exhausted by pattern evaluation (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( ForDeclaration of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForDeclaration, Statement, keyResult,\nlexicalBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n[...]\niii. Else,\n1. Assert: lhsKind is lexicalBinding.\n2. Assert: lhs is a ForDeclaration.\n3. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and iterationEnv as arguments.\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n[...]\n4. If iteratorRecord.[[done]] is false, return ? IteratorClose(iterator,\nresult).\n[...]\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/let-ary-ptrn-elem-id-iter-step-err.js", "description": " Error forwarding when IteratorStep returns an abrupt completion (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( ForDeclaration of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForDeclaration, Statement, keyResult,\nlexicalBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n[...]\niii. Else,\n1. Assert: lhsKind is lexicalBinding.\n2. Assert: lhs is a ForDeclaration.\n3. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and iterationEnv as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/let-ary-ptrn-elem-id-iter-val-array-prototype.js", "description": " Array destructuring uses overriden Array.prototype[Symbol.iterator] (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( ForDeclaration of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForDeclaration, Statement, keyResult,\nlexicalBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n[...]\niii. Else,\n1. Assert: lhsKind is lexicalBinding.\n2. Assert: lhs is a ForDeclaration.\n3. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and iterationEnv as arguments.\n[...]\n\nRuntime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializer_opt\n\n1. Let bindingId be StringValue of BindingIdentifier.\n2. Let lhs be ? ResolveBinding(bindingId, environment).\n3. If iteratorRecord.[[Done]] is false, then\na. Let next be IteratorStep(iteratorRecord).\nb. If next is an abrupt completion, set iteratorRecord.[[Done]] to true.\nc. ReturnIfAbrupt(next).\nd. If next is false, set iteratorRecord.[[Done]] to true.\ne. Else,\ni. Let v be IteratorValue(next).\nii. If v is an abrupt completion, set iteratorRecord.[[Done]] to true.\niii. ReturnIfAbrupt(v).\n[...]\n7. Return InitializeReferencedBinding(lhs, v).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/let-ary-ptrn-elem-id-iter-val-err.js", "description": " Error forwarding when IteratorValue returns an abrupt completion (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( ForDeclaration of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForDeclaration, Statement, keyResult,\nlexicalBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n[...]\niii. Else,\n1. Assert: lhsKind is lexicalBinding.\n2. Assert: lhs is a ForDeclaration.\n3. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and iterationEnv as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\nd. If next is false, set iteratorRecord.[[done]] to true.\ne. Else,\ni. Let v be IteratorValue(next).\nii. If v is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\niii. ReturnIfAbrupt(v).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/let-ary-ptrn-elision-exhausted.js", "description": " Elision accepts exhausted iterator (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( ForDeclaration of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForDeclaration, Statement, keyResult,\nlexicalBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n[...]\niii. Else,\n1. Assert: lhsKind is lexicalBinding.\n2. Assert: lhs is a ForDeclaration.\n3. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and iterationEnv as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ Elision ]\n\n1. Return the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with iteratorRecord\nas the argument.\n\n12.14.5.3 Runtime Semantics: IteratorDestructuringAssignmentEvaluation\n\nElision : ,\n\n1. If iteratorRecord.[[done]] is false, then\n[...]\n2. Return NormalCompletion(empty).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/let-ary-ptrn-elision-step-err.js", "description": " Elision advances iterator and forwards abrupt completions (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( ForDeclaration of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForDeclaration, Statement, keyResult,\nlexicalBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n[...]\niii. Else,\n1. Assert: lhsKind is lexicalBinding.\n2. Assert: lhs is a ForDeclaration.\n3. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and iterationEnv as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ Elision ]\n\n1. Return the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with iteratorRecord\nas the argument.\n\n12.14.5.3 Runtime Semantics: IteratorDestructuringAssignmentEvaluation\n\nElision : ,\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/let-ary-ptrn-elision.js", "description": " Elision advances iterator (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( ForDeclaration of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForDeclaration, Statement, keyResult,\nlexicalBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n[...]\niii. Else,\n1. Assert: lhsKind is lexicalBinding.\n2. Assert: lhs is a ForDeclaration.\n3. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and iterationEnv as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ Elision ]\n\n1. Return the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with iteratorRecord\nas the argument.\n\n12.14.5.3 Runtime Semantics: IteratorDestructuringAssignmentEvaluation\n\nElision : ,\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\nd. If next is false, set iteratorRecord.[[done]] to true.\n2. Return NormalCompletion(empty).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/let-ary-ptrn-empty.js", "description": " No iteration occurs for an \"empty\" array binding pattern (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( ForDeclaration of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForDeclaration, Statement, keyResult,\nlexicalBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n[...]\niii. Else,\n1. Assert: lhsKind is lexicalBinding.\n2. Assert: lhs is a ForDeclaration.\n3. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and iterationEnv as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ ]\n\n1. Return NormalCompletion(empty).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/let-ary-ptrn-rest-id-direct.js", "description": " Lone rest element (direct binding) (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "includes": ["compareArray.js"], "info": " |IterationStatement :\nfor ( ForDeclaration of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForDeclaration, Statement, keyResult,\nlexicalBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n[...]\niii. Else,\n1. Assert: lhsKind is lexicalBinding.\n2. Assert: lhs is a ForDeclaration.\n3. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and iterationEnv as arguments.\n[...]\n\nRuntime Semantics: IteratorBindingInitialization\n\nBindingRestElement : ... BindingIdentifier\n\n[...]\n2. Let A be ! ArrayCreate(0).\n3. Let n be 0.\n4. Repeat,\n[...]\nf. Perform ! CreateDataPropertyOrThrow(A, ! ToString(n), nextValue).\ng. Set n to n + 1.\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/let-ary-ptrn-rest-id-elision-next-err.js", "description": " Rest element following elision elements (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( ForDeclaration of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForDeclaration, Statement, keyResult,\nlexicalBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n[...]\niii. Else,\n1. Assert: lhsKind is lexicalBinding.\n2. Assert: lhs is a ForDeclaration.\n3. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and iterationEnv as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nArrayBindingPattern : [ Elisionopt BindingRestElement ]\n1. If Elision is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with\niteratorRecord as the argument.\nb. ReturnIfAbrupt(status).\n2. Return the result of performing IteratorBindingInitialization for\nBindingRestElement with iteratorRecord and environment as arguments.\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/let-ary-ptrn-rest-id-elision.js", "description": " Rest element following elision elements (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( ForDeclaration of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForDeclaration, Statement, keyResult,\nlexicalBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n[...]\niii. Else,\n1. Assert: lhsKind is lexicalBinding.\n2. Assert: lhs is a ForDeclaration.\n3. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and iterationEnv as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nArrayBindingPattern : [ Elisionopt BindingRestElement ]\n1. If Elision is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with\niteratorRecord as the argument.\nb. ReturnIfAbrupt(status).\n2. Return the result of performing IteratorBindingInitialization for\nBindingRestElement with iteratorRecord and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/let-ary-ptrn-rest-id-exhausted.js", "description": " RestElement applied to an exhausted iterator (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( ForDeclaration of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForDeclaration, Statement, keyResult,\nlexicalBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n[...]\niii. Else,\n1. Assert: lhsKind is lexicalBinding.\n2. Assert: lhs is a ForDeclaration.\n3. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and iterationEnv as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\n[...]\nb. If iteratorRecord.[[done]] is true, then\ni. If environment is undefined, return PutValue(lhs, A).\nii. Return InitializeReferencedBinding(lhs, A).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/let-ary-ptrn-rest-id-iter-close.js", "description": " The iterator is properly consumed by the destructuring pattern (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( ForDeclaration of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForDeclaration, Statement, keyResult,\nlexicalBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n[...]\niii. Else,\n1. Assert: lhsKind is lexicalBinding.\n2. Assert: lhs is a ForDeclaration.\n3. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and iterationEnv as arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/let-ary-ptrn-rest-id-iter-step-err.js", "description": " Error forwarding when IteratorStep returns an abrupt completion (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( ForDeclaration of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForDeclaration, Statement, keyResult,\nlexicalBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n[...]\niii. Else,\n1. Assert: lhsKind is lexicalBinding.\n2. Assert: lhs is a ForDeclaration.\n3. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and iterationEnv as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\na. If iteratorRecord.[[done]] is false,\ni. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nii. If next is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\niii. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/let-ary-ptrn-rest-id-iter-val-err.js", "description": " Error forwarding when IteratorValue returns an abrupt completion (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( ForDeclaration of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForDeclaration, Statement, keyResult,\nlexicalBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n[...]\niii. Else,\n1. Assert: lhsKind is lexicalBinding.\n2. Assert: lhs is a ForDeclaration.\n3. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and iterationEnv as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\n[...]\nc. Let nextValue be IteratorValue(next).\nd. If nextValue is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\ne. ReturnIfAbrupt(nextValue).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/let-ary-ptrn-rest-id.js", "description": " Lone rest element (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( ForDeclaration of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForDeclaration, Statement, keyResult,\nlexicalBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n[...]\niii. Else,\n1. Assert: lhsKind is lexicalBinding.\n2. Assert: lhs is a ForDeclaration.\n3. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and iterationEnv as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n[...] 3. Let A be ArrayCreate(0). [...] 5. Repeat\n[...]\nf. Let status be CreateDataProperty(A, ToString (n), nextValue).\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/obj-empty-symbol.js", "description": " An ObjectAssignmentPattern without an AssignmentPropertyList requires an object-coercible value (symbol value) (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/obj-id-put-unresolvable-strict.js", "description": " In strict mode, if the the assignment target is an unresolvable reference, a ReferenceError should be thrown. (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated", "onlyStrict"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/obj-prop-elem-init-assignment-missing.js", "description": " If the Initializer is present and v is undefined, the Initializer should be evaluated and the result assigned to the target reference (non-existent property) (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/obj-prop-elem-init-assignment-null.js", "description": " If the Initializer is present and v is not undefined, the Initializer should be evaluated and the result assigned to the target reference (null value) (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/obj-prop-elem-init-assignment-truthy.js", "description": " If the Initializer is present and v is not undefined, the Initializer should be evaluated and the result assigned to the target reference (truthy value) (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/obj-prop-elem-init-assignment-undef.js", "description": " If the Initializer is present and v is undefined, the Initializer should be evaluated and the result assigned to the target reference (undefined value) (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/obj-prop-elem-init-evaluation.js", "description": " The Initializer should only be evaluated if v is undefined. (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/obj-prop-elem-init-in.js", "description": " The Initializer in an AssignmentElement may be an `in` expression. (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/obj-prop-elem-init-yield-expr.js", "description": " When a `yield` token appears within the Initializer of an AssignmentElement and within a generator function body, it should behave as a YieldExpression. (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/obj-prop-elem-target-obj-literal-prop-ref-init-active.js", "description": " The DestructuringAssignmentTarget of an AssignmentElement can extend to LHSExpressions if it is neither an ObjectLiteral nor an ArrayLiteral and its AssignmentTargetTyp is simple. Using MemberExpression (ObjLiteral + identifier) with active initializer. (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nSyntax\n\nAssignmentPattern : ObjectAssignmentPattern\nObjectAssignmentPattern : { AssignmentPropertyList }\nAssignmentPropertyList : AssignmentProperty\nAssignmentProperty : PropertyName : AssignmentElement\nAssignmentElement : DestructuringAssignmentTarget Initializer_opt\nDestructuringAssignmentTarget : LeftHandSideExpression\n\nStatic Semantics: Early Errors\n\nDestructuringAssignmentTarget : LeftHandSideExpression\n\n- It is a Syntax Error if LeftHandSideExpression is either an ObjectLiteral or an ArrayLiteral and if LeftHandSideExpression is not covering an AssignmentPattern.\n- It is a Syntax Error if LeftHandSideExpression is neither an ObjectLiteral nor an ArrayLiteral and AssignmentTargetType(LeftHandSideExpression) is not simple.\n\nRuntime Semantics: DestructuringAssignmentEvaluation\nObjectAssignmentPattern : { AssignmentPropertyList }\n\n1. Perform ? RequireObjectCoercible(value).\n2. Perform ? PropertyDestructuringAssignmentEvaluation for AssignmentPropertyList using value as the argument.\n3. Return NormalCompletion(empty).\n\nRuntime Semantics: PropertyDestructuringAssignmentEvaluation\n\nAssignmentProperty : PropertyName : AssignmentElement\n\n1. Let name be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(name).\n3. Perform ? KeyedDestructuringAssignmentEvaluation of AssignmentElement with value and name as the arguments.\n4. Return a new List containing name.\n\nRuntime Semantics: KeyedDestructuringAssignmentEvaluation\n\nAssignmentElement : DestructuringAssignmentTarget Initializer\n\n1. If DestructuringAssignmentTarget is neither an ObjectLiteral nor an ArrayLiteral, then\na. Let lref be the result of evaluating DestructuringAssignmentTarget.\n...\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/obj-prop-elem-target-obj-literal-prop-ref-init.js", "description": " The DestructuringAssignmentTarget of an AssignmentElement can extend to LHSExpressions if it is neither an ObjectLiteral nor an ArrayLiteral and its AssignmentTargetTyp is simple. Using MemberExpression (ObjLiteral + identifier) with initializer. (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n\nSyntax\n\nAssignmentPattern : ObjectAssignmentPattern\nObjectAssignmentPattern : { AssignmentPropertyList }\nAssignmentPropertyList : AssignmentProperty\nAssignmentProperty : PropertyName : AssignmentElement\nAssignmentElement : DestructuringAssignmentTarget Initializer_opt\nDestructuringAssignmentTarget : LeftHandSideExpression\n\nStatic Semantics: Early Errors\n\nDestructuringAssignmentTarget : LeftHandSideExpression\n\n- It is a Syntax Error if LeftHandSideExpression is either an ObjectLiteral or an ArrayLiteral and if LeftHandSideExpression is not covering an AssignmentPattern.\n- It is a Syntax Error if LeftHandSideExpression is neither an ObjectLiteral nor an ArrayLiteral and AssignmentTargetType(LeftHandSideExpression) is not simple.\n\nRuntime Semantics: DestructuringAssignmentEvaluation\nObjectAssignmentPattern : { AssignmentPropertyList }\n\n1. Perform ? RequireObjectCoercible(value).\n2. Perform ? PropertyDestructuringAssignmentEvaluation for AssignmentPropertyList using value as the argument.\n3. Return NormalCompletion(empty).\n\nRuntime Semantics: PropertyDestructuringAssignmentEvaluation\n\nAssignmentProperty : PropertyName : AssignmentElement\n\n1. Let name be the result of evaluating PropertyName.\n2. ReturnIfAbrupt(name).\n3. Perform ? KeyedDestructuringAssignmentEvaluation of AssignmentElement with value and name as the arguments.\n4. Return a new List containing name.\n\nRuntime Semantics: KeyedDestructuringAssignmentEvaluation\n\nAssignmentElement : DestructuringAssignmentTarget Initializer\n\n1. If DestructuringAssignmentTarget is neither an ObjectLiteral nor an ArrayLiteral, then\na. Let lref be the result of evaluating DestructuringAssignmentTarget.\n...\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/obj-prop-elem-target-yield-expr.js", "description": " When a `yield` token appears within the DestructuringAssignmentTarget of an AssignmentElement and within a generator function body, it should behave as a YieldExpression. (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/obj-prop-name-evaluation-error.js", "description": " Any error raised as a result of evaluating PropertyName should be forwarded to the runtime. (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/obj-prop-name-evaluation.js", "description": " PropertyName of an AssignmentProperty may be a ComputedPropertyName. (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/obj-prop-nested-array-yield-expr.js", "description": " When a `yield` token appears within the Initializer of a nested destructuring assignment and within a generator function body, it should behave as a YieldExpression. (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/obj-prop-put-unresolvable-strict.js", "description": " In strict mode, if the the assignment target is an unresolvable reference, a ReferenceError should be thrown. (For..of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated", "onlyStrict"], "info": " |IterationStatement :\nfor ( LeftHandSideExpression of AssignmentExpression ) Statement\n\n1. Let keyResult be the result of performing ? ForIn/OfHeadEvaluation(\u00ab \u00bb,\nAssignmentExpression, iterate).\n2. Return ? ForIn/OfBodyEvaluation(LeftHandSideExpression, Statement,\nkeyResult, assignment, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n4. If destructuring is true and if lhsKind is assignment, then\na. Assert: lhs is a LeftHandSideExpression.\nb. Let assignmentPattern be the parse of the source text corresponding to\nlhs using AssignmentPattern as the goal symbol.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/var-ary-init-iter-get-err-array-prototype.js", "description": " Abrupt completion returned by GetIterator (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var ForBinding of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForBinding, Statement, keyResult,\nvarBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n1. Assert: lhs is a ForBinding.\n2. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and undefined as the arguments.\n[...]\n\nRuntime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iteratorRecord be ? GetIterator(value).\n\nGetIterator ( obj [ , hint [ , method ] ] )\n\n[...]\n4. Let iterator be ? Call(method, obj).\n\nCall ( F, V [ , argumentsList ] )\n\n[...]\n2. If IsCallable(F) is false, throw a TypeError exception.\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/var-ary-init-iter-get-err.js", "description": " Abrupt completion returned by GetIterator (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var ForBinding of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForBinding, Statement, keyResult,\nvarBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n1. Assert: lhs is a ForBinding.\n2. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and undefined as the arguments.\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iterator be GetIterator(value).\n2. ReturnIfAbrupt(iterator).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/var-ary-init-iter-no-close.js", "description": " Iterator is not closed when exhausted by pattern evaluation (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var ForBinding of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForBinding, Statement, keyResult,\nvarBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n1. Assert: lhs is a ForBinding.\n2. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and undefined as the arguments.\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n[...]\n4. If iteratorRecord.[[done]] is false, return ? IteratorClose(iterator,\nresult).\n[...]\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/var-ary-ptrn-elem-id-iter-step-err.js", "description": " Error forwarding when IteratorStep returns an abrupt completion (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var ForBinding of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForBinding, Statement, keyResult,\nvarBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n1. Assert: lhs is a ForBinding.\n2. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and undefined as the arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/var-ary-ptrn-elem-id-iter-val-array-prototype.js", "description": " Array destructuring uses overriden Array.prototype[Symbol.iterator] (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var ForBinding of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForBinding, Statement, keyResult,\nvarBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n1. Assert: lhs is a ForBinding.\n2. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and undefined as the arguments.\n[...]\n\nRuntime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializer_opt\n\n1. Let bindingId be StringValue of BindingIdentifier.\n2. Let lhs be ? ResolveBinding(bindingId, environment).\n3. If iteratorRecord.[[Done]] is false, then\na. Let next be IteratorStep(iteratorRecord).\nb. If next is an abrupt completion, set iteratorRecord.[[Done]] to true.\nc. ReturnIfAbrupt(next).\nd. If next is false, set iteratorRecord.[[Done]] to true.\ne. Else,\ni. Let v be IteratorValue(next).\nii. If v is an abrupt completion, set iteratorRecord.[[Done]] to true.\niii. ReturnIfAbrupt(v).\n[...]\n7. Return InitializeReferencedBinding(lhs, v).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/var-ary-ptrn-elem-id-iter-val-err.js", "description": " Error forwarding when IteratorValue returns an abrupt completion (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var ForBinding of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForBinding, Statement, keyResult,\nvarBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n1. Assert: lhs is a ForBinding.\n2. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and undefined as the arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\nd. If next is false, set iteratorRecord.[[done]] to true.\ne. Else,\ni. Let v be IteratorValue(next).\nii. If v is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\niii. ReturnIfAbrupt(v).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/var-ary-ptrn-elision-exhausted.js", "description": " Elision accepts exhausted iterator (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var ForBinding of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForBinding, Statement, keyResult,\nvarBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n1. Assert: lhs is a ForBinding.\n2. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and undefined as the arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ Elision ]\n\n1. Return the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with iteratorRecord\nas the argument.\n\n12.14.5.3 Runtime Semantics: IteratorDestructuringAssignmentEvaluation\n\nElision : ,\n\n1. If iteratorRecord.[[done]] is false, then\n[...]\n2. Return NormalCompletion(empty).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/var-ary-ptrn-elision-step-err.js", "description": " Elision advances iterator and forwards abrupt completions (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var ForBinding of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForBinding, Statement, keyResult,\nvarBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n1. Assert: lhs is a ForBinding.\n2. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and undefined as the arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ Elision ]\n\n1. Return the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with iteratorRecord\nas the argument.\n\n12.14.5.3 Runtime Semantics: IteratorDestructuringAssignmentEvaluation\n\nElision : ,\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/var-ary-ptrn-elision.js", "description": " Elision advances iterator (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var ForBinding of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForBinding, Statement, keyResult,\nvarBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n1. Assert: lhs is a ForBinding.\n2. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and undefined as the arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ Elision ]\n\n1. Return the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with iteratorRecord\nas the argument.\n\n12.14.5.3 Runtime Semantics: IteratorDestructuringAssignmentEvaluation\n\nElision : ,\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\nd. If next is false, set iteratorRecord.[[done]] to true.\n2. Return NormalCompletion(empty).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/var-ary-ptrn-empty.js", "description": " No iteration occurs for an \"empty\" array binding pattern (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var ForBinding of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForBinding, Statement, keyResult,\nvarBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n1. Assert: lhs is a ForBinding.\n2. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and undefined as the arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ ]\n\n1. Return NormalCompletion(empty).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/var-ary-ptrn-rest-id-direct.js", "description": " Lone rest element (direct binding) (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "includes": ["compareArray.js"], "info": " |IterationStatement :\nfor ( var ForBinding of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForBinding, Statement, keyResult,\nvarBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n1. Assert: lhs is a ForBinding.\n2. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and undefined as the arguments.\n[...]\n\nRuntime Semantics: IteratorBindingInitialization\n\nBindingRestElement : ... BindingIdentifier\n\n[...]\n2. Let A be ! ArrayCreate(0).\n3. Let n be 0.\n4. Repeat,\n[...]\nf. Perform ! CreateDataPropertyOrThrow(A, ! ToString(n), nextValue).\ng. Set n to n + 1.\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/var-ary-ptrn-rest-id-elision-next-err.js", "description": " Rest element following elision elements (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var ForBinding of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForBinding, Statement, keyResult,\nvarBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n1. Assert: lhs is a ForBinding.\n2. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and undefined as the arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nArrayBindingPattern : [ Elisionopt BindingRestElement ]\n1. If Elision is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with\niteratorRecord as the argument.\nb. ReturnIfAbrupt(status).\n2. Return the result of performing IteratorBindingInitialization for\nBindingRestElement with iteratorRecord and environment as arguments.\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/var-ary-ptrn-rest-id-elision.js", "description": " Rest element following elision elements (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var ForBinding of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForBinding, Statement, keyResult,\nvarBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n1. Assert: lhs is a ForBinding.\n2. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and undefined as the arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nArrayBindingPattern : [ Elisionopt BindingRestElement ]\n1. If Elision is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with\niteratorRecord as the argument.\nb. ReturnIfAbrupt(status).\n2. Return the result of performing IteratorBindingInitialization for\nBindingRestElement with iteratorRecord and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/var-ary-ptrn-rest-id-exhausted.js", "description": " RestElement applied to an exhausted iterator (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var ForBinding of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForBinding, Statement, keyResult,\nvarBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n1. Assert: lhs is a ForBinding.\n2. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and undefined as the arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\n[...]\nb. If iteratorRecord.[[done]] is true, then\ni. If environment is undefined, return PutValue(lhs, A).\nii. Return InitializeReferencedBinding(lhs, A).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/var-ary-ptrn-rest-id-iter-close.js", "description": " The iterator is properly consumed by the destructuring pattern (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var ForBinding of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForBinding, Statement, keyResult,\nvarBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n1. Assert: lhs is a ForBinding.\n2. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and undefined as the arguments.\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/var-ary-ptrn-rest-id-iter-step-err.js", "description": " Error forwarding when IteratorStep returns an abrupt completion (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var ForBinding of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForBinding, Statement, keyResult,\nvarBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n1. Assert: lhs is a ForBinding.\n2. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and undefined as the arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\na. If iteratorRecord.[[done]] is false,\ni. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nii. If next is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\niii. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/var-ary-ptrn-rest-id-iter-val-err.js", "description": " Error forwarding when IteratorValue returns an abrupt completion (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var ForBinding of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForBinding, Statement, keyResult,\nvarBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n1. Assert: lhs is a ForBinding.\n2. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and undefined as the arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\n[...]\nc. Let nextValue be IteratorValue(next).\nd. If nextValue is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\ne. ReturnIfAbrupt(nextValue).\n\n"}, {"path": "./test262-main/test/language/statements/for-of/dstr/var-ary-ptrn-rest-id.js", "description": " Lone rest element (for-of statement)", "esid": " sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |IterationStatement :\nfor ( var ForBinding of AssignmentExpression ) Statement\n\n[...]\n3. Return ForIn/OfBodyEvaluation(ForBinding, Statement, keyResult,\nvarBinding, labelSet).\n\n13.7.5.13 Runtime Semantics: ForIn/OfBodyEvaluation\n\n[...]\n3. Let destructuring be IsDestructuring of lhs.\n[...]\n5. Repeat\n[...]\nh. If destructuring is false, then\n[...]\ni. Else\ni. If lhsKind is assignment, then\n[...]\nii. Else if lhsKind is varBinding, then\n1. Assert: lhs is a ForBinding.\n2. Let status be the result of performing BindingInitialization\nfor lhs passing nextValue and undefined as the arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n[...] 3. Let A be ArrayCreate(0). [...] 5. Repeat\n[...]\nf. Let status be CreateDataProperty(A, ToString (n), nextValue).\n[...]\n"}, {"path": "./test262-main/test/language/statements/for-of/generator-next-error.js", "version": 6, "esid": " 13.6.4.13 S5.g", "description": " >If `nextResult` is an abrupt completion as per IteratorStep (ES6 7.4.5),\nreturn the completion.\n", "features": ["generators"]}, {"path": "./test262-main/test/language/statements/for-of/generator.js", "version": 6, "esid": " 13.6.4.13", "description": " >Generator function should return valid iterable objects.\n", "features": ["generators"]}, {"path": "./test262-main/test/language/statements/for-of/generic-iterable.js", "version": 6, "esid": " 13.6.4.13", "description": " >Generic objects with `@@iterator` protocols should function as iterables.\n", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/language/statements/for-of/iterator-as-proxy.js", "version": 6, "esid": " 13.6.4.13", "description": " >Iterators that are implemented as proxies should behave identically to\nnon-proxy versions.\n", "features": ["Proxy", "Symbol.iterator"]}, {"path": "./test262-main/test/language/statements/for-of/iterator-close-throw-get-method-abrupt.js", "esid": " sec-iteratorclose", "description": " >If retrieving an iterator's `return` method generates an error while\nclosing the iterator with throw completion, this error should be suppressed.\n", "info": " |IteratorClose ( iteratorRecord, completion )\n\n[...]\n4. Let innerResult be GetMethod(iterator, \"return\").\n5. If innerResult.[[Type]] is normal,\n[...]\n6. If completion.[[Type]] is throw, return Completion(completion).\n7. If innerResult.[[Type]] is throw, return Completion(innerResult).\n\nGetMethod ( V, P )\n\n[...]\n2. Let func be ? GetV(V, P).\n", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/language/statements/for-of/iterator-close-throw-get-method-non-callable.js", "esid": " sec-iteratorclose", "description": " >If retrieving an iterator's `return` method generates an error while\nclosing the iterator with throw completion, this error should be suppressed.\n", "info": " |IteratorClose ( iteratorRecord, completion )\n\n[...]\n4. Let innerResult be GetMethod(iterator, \"return\").\n5. If innerResult.[[Type]] is normal,\n[...]\n6. If completion.[[Type]] is throw, return Completion(completion).\n7. If innerResult.[[Type]] is throw, return Completion(innerResult).\n\nGetMethod ( V, P )\n\n[...]\n2. Let func be ? GetV(V, P).\n3. If func is either undefined or null, return undefined.\n4. If IsCallable(func) is false, throw a TypeError exception.\n", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/language/statements/for-of/iterator-next-error.js", "version": 6, "esid": " 13.6.4.13 S5.d", "description": " >If `nextResult` is an abrupt completion as per IteratorStep (ES6 7.4.5),\nreturn the completion.\n", "info": " |[...]\n5. Repeat\na. Let nextResult be ? IteratorStep(iterator).\n", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/language/statements/for-of/iterator-next-result-done-attr.js", "version": 6, "esid": " 7.4.3", "description": " >The `done` value of iteration result objects should be interpreted as\nincomplete as per `ToBoolean` (7.1.2).\n", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/language/statements/for-of/iterator-next-result-value-attr-error.js", "version": 6, "esid": " 13.6.4.13 S5.g", "description": " >If `nextValue` is an abrupt completion as per IteratorValue (ES6 7.4.4),\nreturn the completion.\n", "info": " |[...]\n5. Repeat\na. Let nextResult be ? IteratorStep(iterator).\nb. If nextResult is false, return NormalCompletion(V).\nc. Let nextValue be ? IteratorValue(nextResult).\n", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/language/statements/for-of/iterator-next-result-value-attr.js", "version": 6, "esid": " 13.6.4.13 S5.f", "description": " >The `value` of iteration result objects should be retrieved using the Get\nabstract operation.\n", "features": ["Symbol.iterator"]}, {"path": "./test262-main/test/language/statements/for-of/nested.js", "version": 6, "esid": " 13.6.4.13", "description": " >Nested statements should operate independently.\n", "features": ["generators"]}, {"path": "./test262-main/test/language/statements/for-of/return-from-catch.js", "version": 6, "esid": " 13.6.4.13", "description": " >Control flow during body evaluation should honor `return` statements within\nthe `catch` block of `try` statements.\n", "features": ["generators"]}, {"path": "./test262-main/test/language/statements/for-of/return-from-finally.js", "version": 6, "esid": " 13.6.4.13", "description": " >Control flow during body evaluation should honor `return` statements within\nthe `finally` block of `try` statements.\n", "features": ["generators"]}, {"path": "./test262-main/test/language/statements/for-of/return-from-try.js", "version": 6, "esid": " 13.6.4.13", "description": " >Control flow during body evaluation should honor `return` statements within\n`try` blocks.\n", "features": ["generators"]}, {"path": "./test262-main/test/language/statements/for-of/return.js", "version": 6, "esid": " 13.6.4.13", "description": " >Control flow during body evaluation should honor `return` statements.\n", "features": ["generators"]}, {"path": "./test262-main/test/language/statements/for-of/string-astral.js", "description": " String traversal using for..of (astral symbols)", "info": " |String literals should be able to be traversed using a `for...of` loop. The\nloop body should execute once for each astral symbol.\n", "version": 6, "esid": " 13.6.4"}, {"path": "./test262-main/test/language/statements/for-of/throw-from-catch.js", "version": 6, "esid": " 13.6.4.13", "description": " >Control flow during body evaluation should honor `throw` statements within\nthe `catch` block of `try` statements.\n", "features": ["generators"]}, {"path": "./test262-main/test/language/statements/for-of/throw-from-finally.js", "version": 6, "esid": " 13.6.4.13", "description": " >Control flow during body evaluation should honor `throw` statements within\nthe `finally` block of `try` statements.\n", "features": ["generators"]}, {"path": "./test262-main/test/language/statements/for-of/throw.js", "version": 6, "esid": " 13.6.4.13", "description": " >Control flow during body evaluation should honor `throw` statements.\n", "features": ["generators"]}, {"path": "./test262-main/test/language/statements/for-of/yield-from-catch.js", "version": 6, "esid": " 13.6.4.13", "description": " >Control flow during body evaluation should honor `yield` statements within\nthe `catch` block of `try` statements.\n", "features": ["generators"]}, {"path": "./test262-main/test/language/statements/for-of/yield-from-finally.js", "version": 6, "esid": " 13.6.4.13", "description": " >Control flow during body evaluation should honor `yield` statements within\nthe `finally` block of `try` statements.\n", "features": ["generators"]}, {"path": "./test262-main/test/language/statements/for-of/yield-from-try.js", "version": 6, "esid": " 13.6.4.13", "description": " >Control flow during body evaluation should honor `yield` statements within\n`try` blocks.\n", "features": ["generators"]}, {"path": "./test262-main/test/language/statements/for-of/yield-star-from-catch.js", "version": 6, "esid": " 13.6.4.13", "description": " >Control flow during body evaluation should honor `yield *` statements\nwithin the `catch` block of `try` statements.\n", "features": ["generators"]}, {"path": "./test262-main/test/language/statements/for-of/yield-star-from-finally.js", "version": 6, "esid": " 13.6.4.13", "description": " >Control flow during body evaluation should honor `yield *` statements\nwithin the `finally` block of `try` statements.\n", "features": ["generators"]}, {"path": "./test262-main/test/language/statements/for-of/yield-star-from-try.js", "version": 6, "esid": " 13.6.4.13", "description": " >Control flow during body evaluation should honor `yield *` statements\nwithin `try` blocks.\n", "features": ["generators"]}, {"path": "./test262-main/test/language/statements/for-of/yield-star.js", "version": 6, "esid": " 13.6.4.13", "description": " >Control flow during body evaluation should honor `yield *` statements.\n", "features": ["generators"]}, {"path": "./test262-main/test/language/statements/for-of/yield.js", "version": 6, "esid": " 13.6.4.13", "description": " >Control flow during body evaluation should honor `yield` statements.\n", "features": ["generators"]}, {"path": "./test262-main/test/language/statements/function/13.2-15-1.js", "version": 5, "esid": " 13.2-15-1", "description": " >Function Object has length as its own property and does not invoke\nthe setter defined on Function.prototype.length (Step 15)\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/language/statements/function/13.2-30-s.js", "description": " >Functions created using Function.prototype.bind() do not have own\nproperties \"caller\" or \"arguments\", but inherit them from\n%FunctionPrototype%.\n"}, {"path": "./test262-main/test/language/statements/function/arguments-with-arguments-fn.js", "esid": " 9.2.12", "version": 6, "description": " >Arguments object is created even when the body contains a lexically-scoped\nbinding named \"arguments\"\n", "info": " |[...]\n19. Else if \"arguments\" is an element of parameterNames, then\na. Let argumentsObjectNeeded be false.\n20. Else if hasParameterExpressions is false, then\na. If \"arguments\" is an element of functionNames or if \"arguments\" is an\nelement of lexicalNames, then\ni. Let argumentsObjectNeeded be false.\n[...]\n", "flags": ["noStrict"]}, {"path": "./test262-main/test/language/statements/function/dstr/ary-init-iter-get-err-array-prototype.js", "description": " Abrupt completion returned by GetIterator (function declaration)", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\nRuntime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iteratorRecord be ? GetIterator(value).\n\nGetIterator ( obj [ , hint [ , method ] ] )\n\n[...]\n4. Let iterator be ? Call(method, obj).\n\nCall ( F, V [ , argumentsList ] )\n\n[...]\n2. If IsCallable(F) is false, throw a TypeError exception.\n\n"}, {"path": "./test262-main/test/language/statements/function/dstr/ary-init-iter-get-err.js", "description": " Abrupt completion returned by GetIterator (function declaration)", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iterator be GetIterator(value).\n2. ReturnIfAbrupt(iterator).\n\n"}, {"path": "./test262-main/test/language/statements/function/dstr/ary-init-iter-no-close.js", "description": " Iterator is not closed when exhausted by pattern evaluation (function declaration)", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n[...]\n4. If iteratorRecord.[[done]] is false, return ? IteratorClose(iterator,\nresult).\n[...]\n\n"}, {"path": "./test262-main/test/language/statements/function/dstr/ary-ptrn-elem-ary-elem-init.js", "description": " BindingElement with array binding pattern and initializer is used (function declaration)", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/function/dstr/ary-ptrn-elem-ary-elem-iter.js", "description": " BindingElement with array binding pattern and initializer is not used (function declaration)", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\n[...]\ne. Else,\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/function/dstr/ary-ptrn-elem-ary-elision-init.js", "description": " BindingElement with array binding pattern and initializer is used (function declaration)", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n"}, {"path": "./test262-main/test/language/statements/function/dstr/ary-ptrn-elem-ary-elision-iter.js", "description": " BindingElement with array binding pattern and initializer is not used (function declaration)", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\n[...]\ne. Else,\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n"}, {"path": "./test262-main/test/language/statements/function/dstr/ary-ptrn-elem-ary-empty-init.js", "description": " BindingElement with array binding pattern and initializer is used (function declaration)", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n"}, {"path": "./test262-main/test/language/statements/function/dstr/ary-ptrn-elem-ary-empty-iter.js", "description": " BindingElement with array binding pattern and initializer is not used (function declaration)", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\n[...]\ne. Else,\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/function/dstr/ary-ptrn-elem-ary-rest-init.js", "description": " BindingElement with array binding pattern and initializer is used (function declaration)", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/function/dstr/ary-ptrn-elem-ary-rest-iter.js", "description": " BindingElement with array binding pattern and initializer is not used (function declaration)", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\n[...]\ne. Else,\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/function/dstr/ary-ptrn-elem-id-init-exhausted.js", "description": " Destructuring initializer with an exhausted iterator (function declaration)", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n5. If iteratorRecord.[[done]] is true, let v be undefined.\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/function/dstr/ary-ptrn-elem-id-init-hole.js", "description": " Destructuring initializer with a \"hole\" (function declaration)", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nSingleNameBinding : BindingIdentifier Initializeropt\n[...] 6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\n[...]\n7. If environment is undefined, return PutValue(lhs, v). 8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/function/dstr/ary-ptrn-elem-id-init-skipped.js", "description": " Destructuring initializer is not evaluated when value is not `undefined` (function declaration)", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/function/dstr/ary-ptrn-elem-id-init-throws.js", "description": " Destructuring initializer returns an abrupt completion (function declaration)", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/statements/function/dstr/ary-ptrn-elem-id-init-undef.js", "description": " Destructuring initializer with an undefined value (function declaration)", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/function/dstr/ary-ptrn-elem-id-init-unresolvable.js", "description": " Destructuring initializer is an unresolvable reference (function declaration)", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/statements/function/dstr/ary-ptrn-elem-id-iter-step-err.js", "description": " Error forwarding when IteratorStep returns an abrupt completion (function declaration)", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/statements/function/dstr/ary-ptrn-elem-id-iter-val-array-prototype.js", "description": " Array destructuring uses overriden Array.prototype[Symbol.iterator] (function declaration)", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\nRuntime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializer_opt\n\n1. Let bindingId be StringValue of BindingIdentifier.\n2. Let lhs be ? ResolveBinding(bindingId, environment).\n3. If iteratorRecord.[[Done]] is false, then\na. Let next be IteratorStep(iteratorRecord).\nb. If next is an abrupt completion, set iteratorRecord.[[Done]] to true.\nc. ReturnIfAbrupt(next).\nd. If next is false, set iteratorRecord.[[Done]] to true.\ne. Else,\ni. Let v be IteratorValue(next).\nii. If v is an abrupt completion, set iteratorRecord.[[Done]] to true.\niii. ReturnIfAbrupt(v).\n[...]\n7. Return InitializeReferencedBinding(lhs, v).\n\n"}, {"path": "./test262-main/test/language/statements/function/dstr/ary-ptrn-elem-id-iter-val-err.js", "description": " Error forwarding when IteratorValue returns an abrupt completion (function declaration)", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\nd. If next is false, set iteratorRecord.[[done]] to true.\ne. Else,\ni. Let v be IteratorValue(next).\nii. If v is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\niii. ReturnIfAbrupt(v).\n\n"}, {"path": "./test262-main/test/language/statements/function/dstr/ary-ptrn-elem-obj-id-init.js", "description": " BindingElement with object binding pattern and initializer is used (function declaration)", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/function/dstr/ary-ptrn-elem-obj-id.js", "description": " BindingElement with object binding pattern and initializer is not used (function declaration)", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/function/dstr/ary-ptrn-elem-obj-prop-id-init.js", "description": " BindingElement with object binding pattern and initializer is used (function declaration)", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/function/dstr/ary-ptrn-elem-obj-prop-id.js", "description": " BindingElement with object binding pattern and initializer is not used (function declaration)", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/function/dstr/ary-ptrn-elision-exhausted.js", "description": " Elision accepts exhausted iterator (function declaration)", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ Elision ]\n\n1. Return the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with iteratorRecord\nas the argument.\n\n12.14.5.3 Runtime Semantics: IteratorDestructuringAssignmentEvaluation\n\nElision : ,\n\n1. If iteratorRecord.[[done]] is false, then\n[...]\n2. Return NormalCompletion(empty).\n\n"}, {"path": "./test262-main/test/language/statements/function/dstr/ary-ptrn-elision-step-err.js", "description": " Elision advances iterator and forwards abrupt completions (function declaration)", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ Elision ]\n\n1. Return the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with iteratorRecord\nas the argument.\n\n12.14.5.3 Runtime Semantics: IteratorDestructuringAssignmentEvaluation\n\nElision : ,\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/statements/function/dstr/ary-ptrn-elision.js", "description": " Elision advances iterator (function declaration)", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ Elision ]\n\n1. Return the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with iteratorRecord\nas the argument.\n\n12.14.5.3 Runtime Semantics: IteratorDestructuringAssignmentEvaluation\n\nElision : ,\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\nd. If next is false, set iteratorRecord.[[done]] to true.\n2. Return NormalCompletion(empty).\n\n"}, {"path": "./test262-main/test/language/statements/function/dstr/ary-ptrn-empty.js", "description": " No iteration occurs for an \"empty\" array binding pattern (function declaration)", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ ]\n\n1. Return NormalCompletion(empty).\n\n"}, {"path": "./test262-main/test/language/statements/function/dstr/ary-ptrn-rest-id-direct.js", "description": " Lone rest element (direct binding) (function declaration)", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["destructuring-binding"], "flags": ["generated"], "includes": ["compareArray.js"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\nRuntime Semantics: IteratorBindingInitialization\n\nBindingRestElement : ... BindingIdentifier\n\n[...]\n2. Let A be ! ArrayCreate(0).\n3. Let n be 0.\n4. Repeat,\n[...]\nf. Perform ! CreateDataPropertyOrThrow(A, ! ToString(n), nextValue).\ng. Set n to n + 1.\n\n"}, {"path": "./test262-main/test/language/statements/function/dstr/ary-ptrn-rest-id-elision-next-err.js", "description": " Rest element following elision elements (function declaration)", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nArrayBindingPattern : [ Elisionopt BindingRestElement ]\n1. If Elision is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with\niteratorRecord as the argument.\nb. ReturnIfAbrupt(status).\n2. Return the result of performing IteratorBindingInitialization for\nBindingRestElement with iteratorRecord and environment as arguments.\n\n"}, {"path": "./test262-main/test/language/statements/function/dstr/ary-ptrn-rest-id-elision.js", "description": " Rest element following elision elements (function declaration)", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nArrayBindingPattern : [ Elisionopt BindingRestElement ]\n1. If Elision is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with\niteratorRecord as the argument.\nb. ReturnIfAbrupt(status).\n2. Return the result of performing IteratorBindingInitialization for\nBindingRestElement with iteratorRecord and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/function/dstr/ary-ptrn-rest-id-exhausted.js", "description": " RestElement applied to an exhausted iterator (function declaration)", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\n[...]\nb. If iteratorRecord.[[done]] is true, then\ni. If environment is undefined, return PutValue(lhs, A).\nii. Return InitializeReferencedBinding(lhs, A).\n\n"}, {"path": "./test262-main/test/language/statements/function/dstr/ary-ptrn-rest-id-iter-step-err.js", "description": " Error forwarding when IteratorStep returns an abrupt completion (function declaration)", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\na. If iteratorRecord.[[done]] is false,\ni. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nii. If next is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\niii. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/statements/function/dstr/ary-ptrn-rest-id-iter-val-err.js", "description": " Error forwarding when IteratorValue returns an abrupt completion (function declaration)", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\n[...]\nc. Let nextValue be IteratorValue(next).\nd. If nextValue is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\ne. ReturnIfAbrupt(nextValue).\n\n"}, {"path": "./test262-main/test/language/statements/function/dstr/ary-ptrn-rest-id.js", "description": " Lone rest element (function declaration)", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n[...] 3. Let A be ArrayCreate(0). [...] 5. Repeat\n[...]\nf. Let status be CreateDataProperty(A, ToString (n), nextValue).\n[...]\n"}, {"path": "./test262-main/test/language/statements/function/dstr/obj-ptrn-prop-ary-init.js", "description": " Object binding pattern with \"nested\" array binding pattern using initializer (function declaration)", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/function/dstr/obj-ptrn-prop-ary-value-null.js", "description": " Object binding pattern with \"nested\" array binding pattern taking the `null` value (function declaration)", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/function/dstr/obj-ptrn-prop-ary.js", "description": " Object binding pattern with \"nested\" array binding pattern not using initializer (function declaration)", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/function/dstr/obj-ptrn-prop-eval-err.js", "description": " Evaluation of property name returns an abrupt completion (function declaration)", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingProperty : PropertyName : BindingElement\n\n1. Let P be the result of evaluating PropertyName\n2. ReturnIfAbrupt(P).\n"}, {"path": "./test262-main/test/language/statements/function/dstr/obj-ptrn-prop-id-get-value-err.js", "description": " Error thrown when accessing the corresponding property of the value object (function declaration)", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. Let v be GetV(value, propertyName).\n2. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/statements/function/dstr/obj-ptrn-prop-id-init-skipped.js", "description": " Destructuring initializer is not evaluated when value is not `undefined` (function declaration)", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n"}, {"path": "./test262-main/test/language/statements/function/dstr/obj-ptrn-prop-id-init-throws.js", "description": " Error thrown when evaluating the initializer (function declaration)", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/statements/function/dstr/obj-ptrn-prop-id-init-unresolvable.js", "description": " Destructuring initializer is an unresolvable reference (function declaration)", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/statements/function/dstr/obj-ptrn-prop-id-init.js", "description": " Binding as specified via property name, identifier, and initializer (function declaration)", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/function/dstr/obj-ptrn-prop-obj-init.js", "description": " Object binding pattern with \"nested\" object binding pattern using initializer (function declaration)", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/function/dstr/obj-ptrn-prop-obj-value-null.js", "description": " Object binding pattern with \"nested\" object binding pattern taking the `null` value (function declaration)", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/function/dstr/obj-ptrn-prop-obj-value-undef.js", "description": " Object binding pattern with \"nested\" object binding pattern taking the `null` value (function declaration)", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/function/dstr/obj-ptrn-prop-obj.js", "description": " Object binding pattern with \"nested\" object binding pattern not using initializer (function declaration)", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/function/forbidden-ext/b1/cls-expr-meth-forbidden-ext-direct-access-prop-arguments.js", "description": " Forbidden extension, f.arguments (function declaration)", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "flags": ["generated", "noStrict"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\nECMAScript function objects defined using syntactic constructors in strict mode code must\nnot be created with own properties named \"caller\" or \"arguments\". Such own properties also\nmust not be created for function objects defined using an ArrowFunction, MethodDefinition,\nGeneratorDeclaration, GeneratorExpression, AsyncGeneratorDeclaration, AsyncGeneratorExpression,\nClassDeclaration, ClassExpression, AsyncFunctionDeclaration, AsyncFunctionExpression, or\nAsyncArrowFunction regardless of whether the definition is contained in strict mode code.\nBuilt-in functions, strict functions created using the Function constructor, generator functions\ncreated using the Generator constructor, async functions created using the AsyncFunction\nconstructor, and functions created using the bind method also must not be created with such own\nproperties.\n\n"}, {"path": "./test262-main/test/language/statements/function/forbidden-ext/b1/cls-expr-meth-forbidden-ext-direct-access-prop-caller.js", "description": " Forbidden extension, o.caller (function declaration)", "esid": " sec-function-definitions-runtime-semantics-instantiatefunctionobject", "flags": ["generated", "noStrict"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\nECMAScript function objects defined using syntactic constructors in strict mode code must\nnot be created with own properties named \"caller\" or \"arguments\". Such own properties also\nmust not be created for function objects defined using an ArrowFunction, MethodDefinition,\nGeneratorDeclaration, GeneratorExpression, AsyncGeneratorDeclaration, AsyncGeneratorExpression,\nClassDeclaration, ClassExpression, AsyncFunctionDeclaration, AsyncFunctionExpression, or\nAsyncArrowFunction regardless of whether the definition is contained in strict mode code.\nBuilt-in functions, strict functions created using the Function constructor, generator functions\ncreated using the Generator constructor, async functions created using the AsyncFunction\nconstructor, and functions created using the bind method also must not be created with such own\nproperties.\n\n"}, {"path": "./test262-main/test/language/statements/function/forbidden-ext/b2/func-decl-forbidden-ext-indirect-access-own-prop-caller-get.js", "description": " Forbidden extension, o.caller (function declaration)", "esid": " sec-definitions-runtime-semantics-instantiatefunctionobject", "flags": ["generated", "noStrict"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\nIf an implementation extends any function object with an own property named \"caller\" the value of\nthat property, as observed using [[Get]] or [[GetOwnProperty]], must not be a strict function\nobject. If it is an accessor property, the function that is the value of the property's [[Get]]\nattribute must never return a strict function when called.\n\n"}, {"path": "./test262-main/test/language/statements/function/forbidden-ext/b2/func-decl-forbidden-ext-indirect-access-own-prop-caller-value.js", "description": " Forbidden extension, o.caller (function declaration)", "esid": " sec-definitions-runtime-semantics-instantiatefunctionobject", "flags": ["generated", "noStrict"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\nIf an implementation extends any function object with an own property named \"caller\" the value of\nthat property, as observed using [[Get]] or [[GetOwnProperty]], must not be a strict function\nobject. If it is an accessor property, the function that is the value of the property's [[Get]]\nattribute must never return a strict function when called.\n\n"}, {"path": "./test262-main/test/language/statements/function/forbidden-ext/b2/func-decl-forbidden-ext-indirect-access-prop-caller.js", "description": " Forbidden extension, o.caller (function declaration)", "esid": " sec-definitions-runtime-semantics-instantiatefunctionobject", "flags": ["generated", "noStrict"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\nIf an implementation extends any function object with an own property named \"caller\" the value of\nthat property, as observed using [[Get]] or [[GetOwnProperty]], must not be a strict function\nobject. If it is an accessor property, the function that is the value of the property's [[Get]]\nattribute must never return a strict function when called.\n\n"}, {"path": "./test262-main/test/language/statements/function/length-dflt.js", "version": 6, "esid": " 14.1.6", "description": " >Default parameters' effect on function length\n", "info": " |Function length is counted by the non initialized parameters in the left.\n\n9.2.4 FunctionInitialize (F, kind, ParameterList, Body, Scope)\n\n[...]\n2. Let len be the ExpectedArgumentCount of ParameterList.\n3. Perform ! DefinePropertyOrThrow(F, \"length\", PropertyDescriptor{[[Value]]:\nlen, [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true}).\n[...]\n\nFormalsList : FormalParameter\n\n1. If HasInitializer of FormalParameter is true return 0\n2. Return 1.\n\nFormalsList : FormalsList , FormalParameter\n\n1. Let count be the ExpectedArgumentCount of FormalsList.\n2. If HasInitializer of FormalsList is true or HasInitializer of\nFormalParameter is true, return count.\n3. Return count+1.\n", "features": ["default-parameters"], "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/language/statements/function/name.js", "version": 6, "esid": " 14.1.19", "description": " Assignment of function `name` attribute", "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n1. Let name be StringValue of BindingIdentifier.\n2. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody, scope, strict).\n3. Perform MakeConstructor(F).\n4. Perform SetFunctionName(F, name).\n5. Return F.\n", "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/language/statements/function/params-dflt-ref-arguments.js", "description": " Referencing the arguments object from a default parameter (function declaration)", "esid": " 14.1.19", "version": 6, "features": ["default-parameters"], "info": " |FunctionDeclaration :\nfunction BindingIdentifier ( FormalParameters ) { FunctionBody }\n\n[...]\n3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody,\nscope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n14.1.19 Runtime Semantics: IteratorBindingInitialization\n\nFormalsList : FormalsList , FormalParameter\n\n1. Let status be the result of performing IteratorBindingInitialization for\nFormalsList using iteratorRecord and environment as the arguments.\n2. ReturnIfAbrupt(status).\n3. Return the result of performing IteratorBindingInitialization for\nFormalParameter using iteratorRecord and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/generators/arguments-with-arguments-fn.js", "esid": " 9.2.12", "version": 6, "description": " >Arguments object is created even when the body contains a lexically-scoped\nbinding named \"arguments\"\n", "info": " |[...]\n19. Else if \"arguments\" is an element of parameterNames, then\na. Let argumentsObjectNeeded be false.\n20. Else if hasParameterExpressions is false, then\na. If \"arguments\" is an element of functionNames or if \"arguments\" is an\nelement of lexicalNames, then\ni. Let argumentsObjectNeeded be false.\n[...]\n", "flags": ["noStrict"], "features": ["generators"]}, {"path": "./test262-main/test/language/statements/generators/cptn-decl.js", "esid": " sec-statement-semantics-runtime-semantics-evaluation", "description": " Generator declaration completion value is empty.", "info": " |GeneratorDeclaration[Yield, Await, Default]:\n\nfunction * BindingIdentifier[?Yield, ?Await] ( FormalParameters[+Yield, ~Await] ) { GeneratorBody }\n\nHoistableDeclaration : GeneratorDeclaration\n\n1. Return NormalCompletion(empty).\n", "features": ["generators"]}, {"path": "./test262-main/test/language/statements/generators/declaration.js", "info": " |Generator can be declared with GeneratorDeclaration syntax\n", "version": 6, "esid": " 14.4", "author": " Sam Mikes", "description": " can declare generator functions", "features": ["generators"]}, {"path": "./test262-main/test/language/statements/generators/default-proto.js", "esid": " 14.4.11", "version": 6, "description": " Intrinsic default prototype of GeneratorFunctions", "info": " |1. Let G be ? OrdinaryCreateFromConstructor(functionObject,\n\"%GeneratorPrototype%\", \u00ab [[GeneratorState]], [[GeneratorContext]] \u00bb).\n[...]\n\n9.1.13 OrdinaryCreateFromConstructor\n\n[...]\n2. Let proto be ? GetPrototypeFromConstructor(constructor,\nintrinsicDefaultProto).\n3. Return ObjectCreate(proto, internalSlotsList).\n\n9.1.14 GetPrototypeFromConstructor\n\n[...]\n3. Let proto be ? Get(constructor, \"prototype\").\n4. If Type(proto) is not Object, then\na. Let realm be ? GetFunctionRealm(constructor).\nb. Let proto be realm's intrinsic object named intrinsicDefaultProto.\n[...]\n", "features": ["generators"]}, {"path": "./test262-main/test/language/statements/generators/dflt-params-abrupt.js", "description": " Abrupt completion returned by evaluation of initializer (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["default-parameters", "generators"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n\n14.1.19 Runtime Semantics: IteratorBindingInitialization\n\nFormalsList : FormalsList , FormalParameter\n\n1. Let status be the result of performing IteratorBindingInitialization for\nFormalsList using iteratorRecord and environment as the arguments.\n2. ReturnIfAbrupt(status).\n3. Return the result of performing IteratorBindingInitialization for\nFormalParameter using iteratorRecord and environment as the arguments.\n\n"}, {"path": "./test262-main/test/language/statements/generators/dflt-params-arg-val-not-undefined.js", "description": " Use of initializer when argument value is not `undefined` (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["default-parameters", "generators"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n\n14.1.19 Runtime Semantics: IteratorBindingInitialization\n\nFormalsList : FormalsList , FormalParameter\n\n[...]\n23. Let iteratorRecord be Record {[[Iterator]]:\nCreateListIterator(argumentsList), [[Done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\na. Perform ? IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n"}, {"path": "./test262-main/test/language/statements/generators/dflt-params-arg-val-undefined.js", "description": " Use of initializer when argument value is `undefined` (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["default-parameters", "generators"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n\n14.1.19 Runtime Semantics: IteratorBindingInitialization\n\nFormalsList : FormalsList , FormalParameter\n\n[...]\n23. Let iteratorRecord be Record {[[Iterator]]:\nCreateListIterator(argumentsList), [[Done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\na. Perform ? IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n"}, {"path": "./test262-main/test/language/statements/generators/dflt-params-ref-prior.js", "description": " Referencing a parameter that occurs earlier in the ParameterList (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["default-parameters", "generators"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n\n14.1.19 Runtime Semantics: IteratorBindingInitialization\n\nFormalsList : FormalsList , FormalParameter\n\n1. Let status be the result of performing IteratorBindingInitialization for\nFormalsList using iteratorRecord and environment as the arguments.\n2. ReturnIfAbrupt(status).\n3. Return the result of performing IteratorBindingInitialization for\nFormalParameter using iteratorRecord and environment as the arguments.\n\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/ary-init-iter-get-err-array-prototype.js", "description": " Abrupt completion returned by GetIterator (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\nRuntime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iteratorRecord be ? GetIterator(value).\n\nGetIterator ( obj [ , hint [ , method ] ] )\n\n[...]\n4. Let iterator be ? Call(method, obj).\n\nCall ( F, V [ , argumentsList ] )\n\n[...]\n2. If IsCallable(F) is false, throw a TypeError exception.\n\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/ary-init-iter-get-err.js", "description": " Abrupt completion returned by GetIterator (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iterator be GetIterator(value).\n2. ReturnIfAbrupt(iterator).\n\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/ary-init-iter-no-close.js", "description": " Iterator is not closed when exhausted by pattern evaluation (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n[...]\n4. If iteratorRecord.[[done]] is false, return ? IteratorClose(iterator,\nresult).\n[...]\n\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/ary-name-iter-val.js", "description": " SingleNameBinding with normal value iteration (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\nd. If next is false, set iteratorRecord.[[done]] to true.\ne. Else,\n[...]\ni. Let v be IteratorValue(next).\nii. If v is an abrupt completion, set\niteratorRecord.[[done]] to true.\niii. ReturnIfAbrupt(v).\n5. If iteratorRecord.[[done]] is true, let v be undefined.\n[...]\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/ary-ptrn-elem-ary-elem-init.js", "description": " BindingElement with array binding pattern and initializer is used (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/ary-ptrn-elem-ary-elem-iter.js", "description": " BindingElement with array binding pattern and initializer is not used (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\n[...]\ne. Else,\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/ary-ptrn-elem-ary-elision-init.js", "description": " BindingElement with array binding pattern and initializer is used (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/ary-ptrn-elem-ary-elision-iter.js", "description": " BindingElement with array binding pattern and initializer is not used (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\n[...]\ne. Else,\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/ary-ptrn-elem-ary-empty-init.js", "description": " BindingElement with array binding pattern and initializer is used (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/ary-ptrn-elem-ary-empty-iter.js", "description": " BindingElement with array binding pattern and initializer is not used (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\n[...]\ne. Else,\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/ary-ptrn-elem-ary-rest-init.js", "description": " BindingElement with array binding pattern and initializer is used (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/ary-ptrn-elem-ary-rest-iter.js", "description": " BindingElement with array binding pattern and initializer is not used (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\n[...]\ne. Else,\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/ary-ptrn-elem-ary-val-null.js", "description": " Nested array destructuring with a null value (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. If iteratorRecord.[[done]] is false, then\n[...]\ne. Else\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iterator be GetIterator(value).\n2. ReturnIfAbrupt(iterator).\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/ary-ptrn-elem-id-init-exhausted.js", "description": " Destructuring initializer with an exhausted iterator (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n5. If iteratorRecord.[[done]] is true, let v be undefined.\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/ary-ptrn-elem-id-init-hole.js", "description": " Destructuring initializer with a \"hole\" (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nSingleNameBinding : BindingIdentifier Initializeropt\n[...] 6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\n[...]\n7. If environment is undefined, return PutValue(lhs, v). 8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/ary-ptrn-elem-id-init-skipped.js", "description": " Destructuring initializer is not evaluated when value is not `undefined` (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/ary-ptrn-elem-id-init-throws.js", "description": " Destructuring initializer returns an abrupt completion (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/ary-ptrn-elem-id-init-undef.js", "description": " Destructuring initializer with an undefined value (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/ary-ptrn-elem-id-init-unresolvable.js", "description": " Destructuring initializer is an unresolvable reference (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/ary-ptrn-elem-id-iter-complete.js", "description": " SingleNameBinding when value iteration completes (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\nd. If next is false, set iteratorRecord.[[done]] to true.\ne. Else,\n[...]\n5. If iteratorRecord.[[done]] is true, let v be undefined.\n[...]\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/ary-ptrn-elem-id-iter-done.js", "description": " SingleNameBinding when value iteration was completed previously (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\n[...]\n5. If iteratorRecord.[[done]] is true, let v be undefined.\n[...]\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/ary-ptrn-elem-id-iter-step-err.js", "description": " Error forwarding when IteratorStep returns an abrupt completion (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/ary-ptrn-elem-id-iter-val-array-prototype.js", "description": " Array destructuring uses overriden Array.prototype[Symbol.iterator] (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\nRuntime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializer_opt\n\n1. Let bindingId be StringValue of BindingIdentifier.\n2. Let lhs be ? ResolveBinding(bindingId, environment).\n3. If iteratorRecord.[[Done]] is false, then\na. Let next be IteratorStep(iteratorRecord).\nb. If next is an abrupt completion, set iteratorRecord.[[Done]] to true.\nc. ReturnIfAbrupt(next).\nd. If next is false, set iteratorRecord.[[Done]] to true.\ne. Else,\ni. Let v be IteratorValue(next).\nii. If v is an abrupt completion, set iteratorRecord.[[Done]] to true.\niii. ReturnIfAbrupt(v).\n[...]\n7. Return InitializeReferencedBinding(lhs, v).\n\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/ary-ptrn-elem-id-iter-val-err.js", "description": " Error forwarding when IteratorValue returns an abrupt completion (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\nd. If next is false, set iteratorRecord.[[done]] to true.\ne. Else,\ni. Let v be IteratorValue(next).\nii. If v is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\niii. ReturnIfAbrupt(v).\n\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/ary-ptrn-elem-id-iter-val.js", "description": " SingleNameBinding when value iteration was completed previously (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\nd. If next is false, set iteratorRecord.[[done]] to true.\ne. Else,\n[...]\ni. Let v be IteratorValue(next).\nii. If v is an abrupt completion, set\niteratorRecord.[[done]] to true.\niii. ReturnIfAbrupt(v).\n5. If iteratorRecord.[[done]] is true, let v be undefined.\n[...]\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/ary-ptrn-elem-obj-id-init.js", "description": " BindingElement with object binding pattern and initializer is used (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/ary-ptrn-elem-obj-id.js", "description": " BindingElement with object binding pattern and initializer is not used (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/ary-ptrn-elem-obj-prop-id-init.js", "description": " BindingElement with object binding pattern and initializer is used (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/ary-ptrn-elem-obj-prop-id.js", "description": " BindingElement with object binding pattern and initializer is not used (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/ary-ptrn-elem-obj-val-null.js", "description": " Nested object destructuring with a null value (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. If iteratorRecord.[[done]] is false, then\n[...]\ne. Else\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ObjectBindingPattern\n\n1. Let valid be RequireObjectCoercible(value).\n2. ReturnIfAbrupt(valid).\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/ary-ptrn-elem-obj-val-undef.js", "description": " Nested object destructuring with a value of `undefined` (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. If iteratorRecord.[[done]] is false, then\n[...]\ne. Else\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ObjectBindingPattern\n\n1. Let valid be RequireObjectCoercible(value).\n2. ReturnIfAbrupt(valid).\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/ary-ptrn-elision-exhausted.js", "description": " Elision accepts exhausted iterator (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ Elision ]\n\n1. Return the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with iteratorRecord\nas the argument.\n\n12.14.5.3 Runtime Semantics: IteratorDestructuringAssignmentEvaluation\n\nElision : ,\n\n1. If iteratorRecord.[[done]] is false, then\n[...]\n2. Return NormalCompletion(empty).\n\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/ary-ptrn-elision-step-err.js", "description": " Elision advances iterator and forwards abrupt completions (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ Elision ]\n\n1. Return the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with iteratorRecord\nas the argument.\n\n12.14.5.3 Runtime Semantics: IteratorDestructuringAssignmentEvaluation\n\nElision : ,\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/ary-ptrn-elision.js", "description": " Elision advances iterator (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ Elision ]\n\n1. Return the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with iteratorRecord\nas the argument.\n\n12.14.5.3 Runtime Semantics: IteratorDestructuringAssignmentEvaluation\n\nElision : ,\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\nd. If next is false, set iteratorRecord.[[done]] to true.\n2. Return NormalCompletion(empty).\n\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/ary-ptrn-empty.js", "description": " No iteration occurs for an \"empty\" array binding pattern (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ ]\n\n1. Return NormalCompletion(empty).\n\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/ary-ptrn-rest-id-direct.js", "description": " Lone rest element (direct binding) (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "includes": ["compareArray.js"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\nRuntime Semantics: IteratorBindingInitialization\n\nBindingRestElement : ... BindingIdentifier\n\n[...]\n2. Let A be ! ArrayCreate(0).\n3. Let n be 0.\n4. Repeat,\n[...]\nf. Perform ! CreateDataPropertyOrThrow(A, ! ToString(n), nextValue).\ng. Set n to n + 1.\n\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/ary-ptrn-rest-id-elision-next-err.js", "description": " Rest element following elision elements (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nArrayBindingPattern : [ Elisionopt BindingRestElement ]\n1. If Elision is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with\niteratorRecord as the argument.\nb. ReturnIfAbrupt(status).\n2. Return the result of performing IteratorBindingInitialization for\nBindingRestElement with iteratorRecord and environment as arguments.\n\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/ary-ptrn-rest-id-elision.js", "description": " Rest element following elision elements (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nArrayBindingPattern : [ Elisionopt BindingRestElement ]\n1. If Elision is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with\niteratorRecord as the argument.\nb. ReturnIfAbrupt(status).\n2. Return the result of performing IteratorBindingInitialization for\nBindingRestElement with iteratorRecord and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/ary-ptrn-rest-id-exhausted.js", "description": " RestElement applied to an exhausted iterator (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\n[...]\nb. If iteratorRecord.[[done]] is true, then\ni. If environment is undefined, return PutValue(lhs, A).\nii. Return InitializeReferencedBinding(lhs, A).\n\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/ary-ptrn-rest-id-iter-step-err.js", "description": " Error forwarding when IteratorStep returns an abrupt completion (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\na. If iteratorRecord.[[done]] is false,\ni. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nii. If next is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\niii. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/ary-ptrn-rest-id-iter-val-err.js", "description": " Error forwarding when IteratorValue returns an abrupt completion (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\n[...]\nc. Let nextValue be IteratorValue(next).\nd. If nextValue is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\ne. ReturnIfAbrupt(nextValue).\n\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/ary-ptrn-rest-id.js", "description": " Lone rest element (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n[...] 3. Let A be ArrayCreate(0). [...] 5. Repeat\n[...]\nf. Let status be CreateDataProperty(A, ToString (n), nextValue).\n[...]\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/obj-ptrn-empty.js", "description": " No property access occurs for an \"empty\" object binding pattern (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\nRuntime Semantics: BindingInitialization\n\nObjectBindingPattern : { }\n\n1. Return NormalCompletion(empty).\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/obj-ptrn-id-get-value-err.js", "description": " Error thrown when accessing the corresponding property of the value object (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. Let v be GetV(value, propertyName).\n5. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/obj-ptrn-id-trailing-comma.js", "description": " Trailing comma is allowed following BindingPropertyList (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3 Destructuring Binding Patterns\n\nObjectBindingPattern[Yield] :\n{ }\n{ BindingPropertyList[?Yield] }\n{ BindingPropertyList[?Yield] , }\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/obj-ptrn-prop-ary-init.js", "description": " Object binding pattern with \"nested\" array binding pattern using initializer (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/obj-ptrn-prop-ary-trailing-comma.js", "description": " Trailing comma is allowed following BindingPropertyList (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3 Destructuring Binding Patterns\n\nObjectBindingPattern[Yield] :\n{ }\n{ BindingPropertyList[?Yield] }\n{ BindingPropertyList[?Yield] , }\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/obj-ptrn-prop-ary-value-null.js", "description": " Object binding pattern with \"nested\" array binding pattern taking the `null` value (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/obj-ptrn-prop-ary.js", "description": " Object binding pattern with \"nested\" array binding pattern not using initializer (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/obj-ptrn-prop-eval-err.js", "description": " Evaluation of property name returns an abrupt completion (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingProperty : PropertyName : BindingElement\n\n1. Let P be the result of evaluating PropertyName\n2. ReturnIfAbrupt(P).\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/obj-ptrn-prop-id-get-value-err.js", "description": " Error thrown when accessing the corresponding property of the value object (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. Let v be GetV(value, propertyName).\n2. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/obj-ptrn-prop-id-init-skipped.js", "description": " Destructuring initializer is not evaluated when value is not `undefined` (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/obj-ptrn-prop-id-init-throws.js", "description": " Error thrown when evaluating the initializer (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/obj-ptrn-prop-id-init-unresolvable.js", "description": " Destructuring initializer is an unresolvable reference (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/obj-ptrn-prop-id-init.js", "description": " Binding as specified via property name, identifier, and initializer (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/obj-ptrn-prop-id-trailing-comma.js", "description": " Trailing comma is allowed following BindingPropertyList (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3 Destructuring Binding Patterns\n\nObjectBindingPattern[Yield] :\n{ }\n{ BindingPropertyList[?Yield] }\n{ BindingPropertyList[?Yield] , }\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/obj-ptrn-prop-id.js", "description": " Binding as specified via property name and identifier (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/obj-ptrn-prop-obj-init.js", "description": " Object binding pattern with \"nested\" object binding pattern using initializer (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/obj-ptrn-prop-obj-value-null.js", "description": " Object binding pattern with \"nested\" object binding pattern taking the `null` value (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/obj-ptrn-prop-obj-value-undef.js", "description": " Object binding pattern with \"nested\" object binding pattern taking the `null` value (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/generators/dstr/obj-ptrn-prop-obj.js", "description": " Object binding pattern with \"nested\" object binding pattern not using initializer (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/generators/forbidden-ext/b1/gen-func-decl-forbidden-ext-direct-access-prop-arguments.js", "description": " Forbidden extension, f.arguments (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators"], "flags": ["generated", "noStrict"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n\nECMAScript function objects defined using syntactic constructors in strict mode code must\nnot be created with own properties named \"caller\" or \"arguments\". Such own properties also\nmust not be created for function objects defined using an ArrowFunction, MethodDefinition,\nGeneratorDeclaration, GeneratorExpression, AsyncGeneratorDeclaration, AsyncGeneratorExpression,\nClassDeclaration, ClassExpression, AsyncFunctionDeclaration, AsyncFunctionExpression, or\nAsyncArrowFunction regardless of whether the definition is contained in strict mode code.\nBuilt-in functions, strict functions created using the Function constructor, generator functions\ncreated using the Generator constructor, async functions created using the AsyncFunction\nconstructor, and functions created using the bind method also must not be created with such own\nproperties.\n\n"}, {"path": "./test262-main/test/language/statements/generators/forbidden-ext/b1/gen-func-decl-forbidden-ext-direct-access-prop-caller.js", "description": " Forbidden extension, o.caller (generator function declaration)", "esid": " sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators"], "flags": ["generated", "noStrict"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n\nECMAScript function objects defined using syntactic constructors in strict mode code must\nnot be created with own properties named \"caller\" or \"arguments\". Such own properties also\nmust not be created for function objects defined using an ArrowFunction, MethodDefinition,\nGeneratorDeclaration, GeneratorExpression, AsyncGeneratorDeclaration, AsyncGeneratorExpression,\nClassDeclaration, ClassExpression, AsyncFunctionDeclaration, AsyncFunctionExpression, or\nAsyncArrowFunction regardless of whether the definition is contained in strict mode code.\nBuilt-in functions, strict functions created using the Function constructor, generator functions\ncreated using the Generator constructor, async functions created using the AsyncFunction\nconstructor, and functions created using the bind method also must not be created with such own\nproperties.\n\n"}, {"path": "./test262-main/test/language/statements/generators/forbidden-ext/b2/gen-func-decl-forbidden-ext-indirect-access-own-prop-caller-get.js", "description": " Forbidden extension, o.caller (generator function declaration)", "esid": " sec-generator-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators"], "flags": ["generated", "noStrict"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n\nIf an implementation extends any function object with an own property named \"caller\" the value of\nthat property, as observed using [[Get]] or [[GetOwnProperty]], must not be a strict function\nobject. If it is an accessor property, the function that is the value of the property's [[Get]]\nattribute must never return a strict function when called.\n\n"}, {"path": "./test262-main/test/language/statements/generators/forbidden-ext/b2/gen-func-decl-forbidden-ext-indirect-access-own-prop-caller-value.js", "description": " Forbidden extension, o.caller (generator function declaration)", "esid": " sec-generator-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators"], "flags": ["generated", "noStrict"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n\nIf an implementation extends any function object with an own property named \"caller\" the value of\nthat property, as observed using [[Get]] or [[GetOwnProperty]], must not be a strict function\nobject. If it is an accessor property, the function that is the value of the property's [[Get]]\nattribute must never return a strict function when called.\n\n"}, {"path": "./test262-main/test/language/statements/generators/forbidden-ext/b2/gen-func-decl-forbidden-ext-indirect-access-prop-caller.js", "description": " Forbidden extension, o.caller (generator function declaration)", "esid": " sec-generator-definitions-runtime-semantics-instantiatefunctionobject", "features": ["generators"], "flags": ["generated", "noStrict"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n\nIf an implementation extends any function object with an own property named \"caller\" the value of\nthat property, as observed using [[Get]] or [[GetOwnProperty]], must not be a strict function\nobject. If it is an accessor property, the function that is the value of the property's [[Get]]\nattribute must never return a strict function when called.\n\n"}, {"path": "./test262-main/test/language/statements/generators/generator-created-after-decl-inst.js", "esid": " sec-generator-function-definitions-runtime-semantics-evaluatebody", "description": " >The generator object is created after FunctionDeclarationInstantiation.\n", "info": " |14.4.10 Runtime Semantics: EvaluateBody\n\n1. Perform ? FunctionDeclarationInstantiation(functionObject, argumentsList).\n2. Let G be ? OrdinaryCreateFromConstructor(functionObject, \"%GeneratorPrototype%\",\n\u00ab [[GeneratorState]], [[GeneratorContext]] \u00bb).\n3. Perform GeneratorStart(G, FunctionBody).\n...\n\n", "features": ["generators"]}, {"path": "./test262-main/test/language/statements/generators/has-instance.js", "description": " >A Generator object is an instance of a generator function.\n", "version": 6, "esid": " 25.3", "features": ["generators"]}, {"path": "./test262-main/test/language/statements/generators/length-dflt.js", "version": 6, "esid": " 14.1.6", "description": " >Default parameters' effect on function length\n", "info": " |Function length is counted by the non initialized parameters in the left.\n\n9.2.4 FunctionInitialize (F, kind, ParameterList, Body, Scope)\n\n[...]\n2. Let len be the ExpectedArgumentCount of ParameterList.\n3. Perform ! DefinePropertyOrThrow(F, \"length\", PropertyDescriptor{[[Value]]:\nlen, [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true}).\n[...]\n\nFormalsList : FormalParameter\n\n1. If HasInitializer of FormalParameter is true return 0\n2. Return 1.\n\nFormalsList : FormalsList , FormalParameter\n\n1. Let count be the ExpectedArgumentCount of FormalsList.\n2. If HasInitializer of FormalsList is true or HasInitializer of\nFormalParameter is true, return count.\n3. Return count+1.\n", "features": ["generators", "default-parameters"], "includes": ["propertyHelper.js"]}, {"path": "./test262-main/test/language/statements/generators/length-property-descriptor.js", "description": " >Generator functions should define a `length` property.\n", "includes": ["propertyHelper.js"], "version": 6, "esid": " 25.2.4", "features": ["generators"]}, {"path": "./test262-main/test/language/statements/generators/name.js", "description": " Assignment of function `name` attribute", "version": 6, "esid": " 14.4.12", "info": " |GeneratorDeclaration :\nfunction * BindingIdentifier ( FormalParameters ) { GeneratorBody }\n\n[...]\n6. Perform SetFunctionName(F, name).\n", "includes": ["propertyHelper.js"], "features": ["generators"]}, {"path": "./test262-main/test/language/statements/generators/no-yield.js", "description": " >Generators declared with GeneratorDeclaration syntax do not require a\n`yield` expression.\n", "version": 6, "esid": " 14.4", "features": ["generators"]}, {"path": "./test262-main/test/language/statements/generators/params-dflt-args-unmapped.js", "description": " Referencing the arguments object from a default parameter (generator function declaration)", "esid": " 14.4.12", "version": 6, "features": ["generators", "default-parameters"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n14.1.19 Runtime Semantics: IteratorBindingInitialization\n\nFormalsList : FormalsList , FormalParameter\n\n1. Let status be the result of performing IteratorBindingInitialization for\nFormalsList using iteratorRecord and environment as the arguments.\n2. ReturnIfAbrupt(status).\n3. Return the result of performing IteratorBindingInitialization for\nFormalParameter using iteratorRecord and environment as the arguments. \n"}, {"path": "./test262-main/test/language/statements/generators/params-dflt-ref-arguments.js", "description": " Referencing the arguments object from a default parameter (generator function declaration)", "esid": " 14.4.12", "version": 6, "features": ["generators", "default-parameters"], "info": " |GeneratorDeclaration : function * ( FormalParameters ) { GeneratorBody }\n\n[...]\n2. Let F be GeneratorFunctionCreate(Normal, FormalParameters,\nGeneratorBody, scope, strict).\n[...]\n\n9.2.1 [[Call]] ( thisArgument, argumentsList)\n\n[...]\n7. Let result be OrdinaryCallEvaluateBody(F, argumentsList).\n[...]\n\n9.2.1.3 OrdinaryCallEvaluateBody ( F, argumentsList )\n\n1. Let status be FunctionDeclarationInstantiation(F, argumentsList).\n[...]\n\n9.2.12 FunctionDeclarationInstantiation(func, argumentsList)\n\n[...]\n23. Let iteratorRecord be Record {[[iterator]]:\nCreateListIterator(argumentsList), [[done]]: false}.\n24. If hasDuplicates is true, then\n[...]\n25. Else,\nb. Let formalStatus be IteratorBindingInitialization for formals with\niteratorRecord and env as arguments.\n[...]\n\n14.1.19 Runtime Semantics: IteratorBindingInitialization\n\nFormalsList : FormalsList , FormalParameter\n\n1. Let status be the result of performing IteratorBindingInitialization for\nFormalsList using iteratorRecord and environment as the arguments.\n2. ReturnIfAbrupt(status).\n3. Return the result of performing IteratorBindingInitialization for\nFormalParameter using iteratorRecord and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/generators/prototype-own-properties.js", "version": 6, "esid": " 25.2.4.2", "description": " >The `prototype` property of GeneratorFunction instances are created as\nplain objects with no \"own\" properties.\n", "features": ["generators"]}, {"path": "./test262-main/test/language/statements/generators/prototype-property-descriptor.js", "description": " >Generator objects should define a `prototype` property.\n", "includes": ["propertyHelper.js"], "version": 6, "esid": " 25.2.4", "features": ["generators"]}, {"path": "./test262-main/test/language/statements/generators/prototype-relation-to-function.js", "description": " >The value of the [[Prototype]] internal slot of the GeneratorFunction\nprototype object is the FunctionPrototype intrinsic object.\n", "version": 6, "esid": " 25.2.2.2", "features": ["generators"]}, {"path": "./test262-main/test/language/statements/generators/prototype-typeof.js", "version": 6, "esid": " 25.2.4.2", "description": " >Whenever a GeneratorFunction instance is created another ordinary object is\nalso created and is the initial value of the generator function\u2019s prototype\nproperty.\n", "features": ["generators"]}, {"path": "./test262-main/test/language/statements/generators/prototype-uniqueness.js", "description": " >GeneratorFunction instances are created with a unique prototype object.\n", "version": 6, "esid": " 25.2.1", "features": ["generators"]}, {"path": "./test262-main/test/language/statements/generators/prototype-value.js", "description": " >Generator instances directly inherit properties from the object that is the\nvalue of the prototype property of the Generator function that created the\ninstance.\n", "version": 6, "esid": " 25.3", "features": ["generators"]}, {"path": "./test262-main/test/language/statements/generators/return.js", "description": " >return is a valid statement within generator function bodies.\n", "version": 6, "esid": " 14.4", "features": ["generators"]}, {"path": "./test262-main/test/language/statements/generators/scope-param-elem-var-close.js", "esid": " sec-functiondeclarationinstantiation", "description": " >sloppy direct evals in params introduce vars\n", "info": " |[...]\n20. Else,\na. NOTE: A separate Environment Record is needed to ensure that bindings created by direct eval calls in the formal parameter list are outside the environment where parameters are declared.\nb. Let calleeEnv be the LexicalEnvironment of calleeContext.\nc. Let env be NewDeclarativeEnvironment(calleeEnv).\nd. Let envRec be env's EnvironmentRecord.\n[...]\n", "flags": ["noStrict"], "features": ["generators"]}, {"path": "./test262-main/test/language/statements/generators/scope-param-elem-var-open.js", "esid": " sec-functiondeclarationinstantiation", "description": " >sloppy direct evals in params introduce vars\n", "info": " |[...]\n20. Else,\na. NOTE: A separate Environment Record is needed to ensure that bindings created by direct eval calls in the formal parameter list are outside the environment where parameters are declared.\nb. Let calleeEnv be the LexicalEnvironment of calleeContext.\nc. Let env be NewDeclarativeEnvironment(calleeEnv).\nd. Let envRec be env's EnvironmentRecord.\n[...]\n", "flags": ["noStrict"], "features": ["generators"]}, {"path": "./test262-main/test/language/statements/generators/scope-paramsbody-var-close.js", "esid": " sec-functiondeclarationinstantiation", "description": " >Disposal of variable environment for the function body\n", "info": " |[...]\n26. If hasParameterExpressions is false, then\n[...]\n27. Else,\na. NOTE A separate Environment Record is needed to ensure that closures\ncreated by expressions in the formal parameter list do not have\nvisibility of declarations in the function body.\nb. Let varEnv be NewDeclarativeEnvironment(env).\nc. Let varEnvRec be varEnv's EnvironmentRecord.\nd. Set the VariableEnvironment of calleeContext to varEnv.\ne. Let instantiatedVarNames be a new empty List.\n[...]\n", "features": ["generators"]}, {"path": "./test262-main/test/language/statements/generators/yield-as-literal-property-name.js", "description": " >`yield` may be used as a literal property name in an object literal\nwithin generator function bodies.\n", "version": 6, "esid": " 12.1.1", "features": ["generators"]}, {"path": "./test262-main/test/language/statements/generators/yield-as-property-name.js", "description": " >`yield` may be used as a literal property name in an object literal\nwithin generator function bodies.\n", "version": 6, "esid": " 12.1.1", "features": ["generators"]}, {"path": "./test262-main/test/language/statements/generators/yield-as-statement.js", "description": " >`yield` is a valid statement within generator function bodies.\n", "version": 6, "esid": " 14.4", "features": ["generators"]}, {"path": "./test262-main/test/language/statements/generators/yield-as-yield-operand.js", "description": " >`yield` expressions may be used as the right-hand-side of other `yield`\nexpressions.\n", "version": 6, "esid": " 14.4", "features": ["generators"]}, {"path": "./test262-main/test/language/statements/generators/yield-newline.js", "description": " >Newlines terminate `yield` expressions.\n", "version": 6, "esid": " 14.4", "features": ["generators"]}, {"path": "./test262-main/test/language/statements/generators/yield-spread-arr-multiple.js", "description": " Use yield value in a array spread position (Generator Function declaration)", "esid": " prod-GeneratorDeclaration", "features": ["generators"], "flags": ["generated"], "includes": ["compareArray.js"], "info": " |14.4 Generator Function Definitions\n\nGeneratorDeclaration :\nfunction * BindingIdentifier ( FormalParameters ) { GeneratorBody }\n\n\nArray Initializer\n\nSpreadElement[Yield, Await]:\n...AssignmentExpression[+In, ?Yield, ?Await]\n\n"}, {"path": "./test262-main/test/language/statements/generators/yield-spread-arr-single.js", "description": " Use yield value in a array spread position (Generator Function declaration)", "esid": " prod-GeneratorDeclaration", "features": ["generators"], "flags": ["generated"], "info": " |14.4 Generator Function Definitions\n\nGeneratorDeclaration :\nfunction * BindingIdentifier ( FormalParameters ) { GeneratorBody }\n\n\nArray Initializer\n\nSpreadElement[Yield, Await]:\n...AssignmentExpression[+In, ?Yield, ?Await]\n"}, {"path": "./test262-main/test/language/statements/generators/yield-star-before-newline.js", "description": " >The right-hand side of a `yield *` expression may appear on a new line.\n", "version": 6, "esid": " 14.4", "features": ["generators"]}, {"path": "./test262-main/test/language/statements/let/block-local-closure-get-before-initialization.js", "version": 6, "esid": " 13.1", "description": " >let: block local closure [[Get]] before initialization.\n(TDZ, Temporal Dead Zone)\n"}, {"path": "./test262-main/test/language/statements/let/block-local-closure-set-before-initialization.js", "version": 6, "esid": " 13.1", "description": " >let: block local closure [[Set]] before initialization.\n(TDZ, Temporal Dead Zone)\n"}, {"path": "./test262-main/test/language/statements/let/block-local-use-before-initialization-in-declaration-statement.js", "version": 6, "esid": " 13.1", "description": " >let: block local use before initialization in declaration statement.\n(TDZ, Temporal Dead Zone)\n"}, {"path": "./test262-main/test/language/statements/let/block-local-use-before-initialization-in-prior-statement.js", "version": 6, "esid": " 13.1", "description": " >let: block local use before initialization in prior statement.\n(TDZ, Temporal Dead Zone)\n"}, {"path": "./test262-main/test/language/statements/let/dstr/ary-init-iter-get-err-array-prototype.js", "description": " Abrupt completion returned by GetIterator (`let` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\nRuntime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iteratorRecord be ? GetIterator(value).\n\nGetIterator ( obj [ , hint [ , method ] ] )\n\n[...]\n4. Let iterator be ? Call(method, obj).\n\nCall ( F, V [ , argumentsList ] )\n\n[...]\n2. If IsCallable(F) is false, throw a TypeError exception.\n\n"}, {"path": "./test262-main/test/language/statements/let/dstr/ary-init-iter-get-err.js", "description": " Abrupt completion returned by GetIterator (`let` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iterator be GetIterator(value).\n2. ReturnIfAbrupt(iterator).\n\n"}, {"path": "./test262-main/test/language/statements/let/dstr/ary-init-iter-no-close.js", "description": " Iterator is not closed when exhausted by pattern evaluation (`let` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n[...]\n4. If iteratorRecord.[[done]] is false, return ? IteratorClose(iterator,\nresult).\n[...]\n\n"}, {"path": "./test262-main/test/language/statements/let/dstr/ary-ptrn-elem-ary-elem-init.js", "description": " BindingElement with array binding pattern and initializer is used (`let` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/let/dstr/ary-ptrn-elem-ary-elem-iter.js", "description": " BindingElement with array binding pattern and initializer is not used (`let` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\n[...]\ne. Else,\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/let/dstr/ary-ptrn-elem-ary-elision-init.js", "description": " BindingElement with array binding pattern and initializer is used (`let` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n"}, {"path": "./test262-main/test/language/statements/let/dstr/ary-ptrn-elem-ary-elision-iter.js", "description": " BindingElement with array binding pattern and initializer is not used (`let` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\n[...]\ne. Else,\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n"}, {"path": "./test262-main/test/language/statements/let/dstr/ary-ptrn-elem-ary-empty-init.js", "description": " BindingElement with array binding pattern and initializer is used (`let` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n"}, {"path": "./test262-main/test/language/statements/let/dstr/ary-ptrn-elem-ary-empty-iter.js", "description": " BindingElement with array binding pattern and initializer is not used (`let` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\n[...]\ne. Else,\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/let/dstr/ary-ptrn-elem-ary-rest-init.js", "description": " BindingElement with array binding pattern and initializer is used (`let` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/let/dstr/ary-ptrn-elem-ary-rest-iter.js", "description": " BindingElement with array binding pattern and initializer is not used (`let` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\n[...]\ne. Else,\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/let/dstr/ary-ptrn-elem-id-init-exhausted.js", "description": " Destructuring initializer with an exhausted iterator (`let` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n5. If iteratorRecord.[[done]] is true, let v be undefined.\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/let/dstr/ary-ptrn-elem-id-init-hole.js", "description": " Destructuring initializer with a \"hole\" (`let` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nSingleNameBinding : BindingIdentifier Initializeropt\n[...] 6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\n[...]\n7. If environment is undefined, return PutValue(lhs, v). 8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/let/dstr/ary-ptrn-elem-id-init-skipped.js", "description": " Destructuring initializer is not evaluated when value is not `undefined` (`let` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/let/dstr/ary-ptrn-elem-id-init-throws.js", "description": " Destructuring initializer returns an abrupt completion (`let` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/statements/let/dstr/ary-ptrn-elem-id-init-undef.js", "description": " Destructuring initializer with an undefined value (`let` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/let/dstr/ary-ptrn-elem-id-init-unresolvable.js", "description": " Destructuring initializer is an unresolvable reference (`let` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/statements/let/dstr/ary-ptrn-elem-id-iter-step-err.js", "description": " Error forwarding when IteratorStep returns an abrupt completion (`let` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/statements/let/dstr/ary-ptrn-elem-id-iter-val-array-prototype.js", "description": " Array destructuring uses overriden Array.prototype[Symbol.iterator] (`let` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\nRuntime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializer_opt\n\n1. Let bindingId be StringValue of BindingIdentifier.\n2. Let lhs be ? ResolveBinding(bindingId, environment).\n3. If iteratorRecord.[[Done]] is false, then\na. Let next be IteratorStep(iteratorRecord).\nb. If next is an abrupt completion, set iteratorRecord.[[Done]] to true.\nc. ReturnIfAbrupt(next).\nd. If next is false, set iteratorRecord.[[Done]] to true.\ne. Else,\ni. Let v be IteratorValue(next).\nii. If v is an abrupt completion, set iteratorRecord.[[Done]] to true.\niii. ReturnIfAbrupt(v).\n[...]\n7. Return InitializeReferencedBinding(lhs, v).\n\n"}, {"path": "./test262-main/test/language/statements/let/dstr/ary-ptrn-elem-id-iter-val-err.js", "description": " Error forwarding when IteratorValue returns an abrupt completion (`let` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\nd. If next is false, set iteratorRecord.[[done]] to true.\ne. Else,\ni. Let v be IteratorValue(next).\nii. If v is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\niii. ReturnIfAbrupt(v).\n\n"}, {"path": "./test262-main/test/language/statements/let/dstr/ary-ptrn-elem-obj-id-init.js", "description": " BindingElement with object binding pattern and initializer is used (`let` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/let/dstr/ary-ptrn-elem-obj-id.js", "description": " BindingElement with object binding pattern and initializer is not used (`let` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/let/dstr/ary-ptrn-elem-obj-prop-id-init.js", "description": " BindingElement with object binding pattern and initializer is used (`let` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/let/dstr/ary-ptrn-elem-obj-prop-id.js", "description": " BindingElement with object binding pattern and initializer is not used (`let` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/let/dstr/ary-ptrn-elision-exhausted.js", "description": " Elision accepts exhausted iterator (`let` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ Elision ]\n\n1. Return the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with iteratorRecord\nas the argument.\n\n12.14.5.3 Runtime Semantics: IteratorDestructuringAssignmentEvaluation\n\nElision : ,\n\n1. If iteratorRecord.[[done]] is false, then\n[...]\n2. Return NormalCompletion(empty).\n\n"}, {"path": "./test262-main/test/language/statements/let/dstr/ary-ptrn-elision-step-err.js", "description": " Elision advances iterator and forwards abrupt completions (`let` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ Elision ]\n\n1. Return the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with iteratorRecord\nas the argument.\n\n12.14.5.3 Runtime Semantics: IteratorDestructuringAssignmentEvaluation\n\nElision : ,\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/statements/let/dstr/ary-ptrn-elision.js", "description": " Elision advances iterator (`let` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ Elision ]\n\n1. Return the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with iteratorRecord\nas the argument.\n\n12.14.5.3 Runtime Semantics: IteratorDestructuringAssignmentEvaluation\n\nElision : ,\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\nd. If next is false, set iteratorRecord.[[done]] to true.\n2. Return NormalCompletion(empty).\n\n"}, {"path": "./test262-main/test/language/statements/let/dstr/ary-ptrn-empty.js", "description": " No iteration occurs for an \"empty\" array binding pattern (`let` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ ]\n\n1. Return NormalCompletion(empty).\n\n"}, {"path": "./test262-main/test/language/statements/let/dstr/ary-ptrn-rest-id-direct.js", "description": " Lone rest element (direct binding) (`let` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "includes": ["compareArray.js"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\nRuntime Semantics: IteratorBindingInitialization\n\nBindingRestElement : ... BindingIdentifier\n\n[...]\n2. Let A be ! ArrayCreate(0).\n3. Let n be 0.\n4. Repeat,\n[...]\nf. Perform ! CreateDataPropertyOrThrow(A, ! ToString(n), nextValue).\ng. Set n to n + 1.\n\n"}, {"path": "./test262-main/test/language/statements/let/dstr/ary-ptrn-rest-id-elision-next-err.js", "description": " Rest element following elision elements (`let` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nArrayBindingPattern : [ Elisionopt BindingRestElement ]\n1. If Elision is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with\niteratorRecord as the argument.\nb. ReturnIfAbrupt(status).\n2. Return the result of performing IteratorBindingInitialization for\nBindingRestElement with iteratorRecord and environment as arguments.\n\n"}, {"path": "./test262-main/test/language/statements/let/dstr/ary-ptrn-rest-id-elision.js", "description": " Rest element following elision elements (`let` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nArrayBindingPattern : [ Elisionopt BindingRestElement ]\n1. If Elision is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with\niteratorRecord as the argument.\nb. ReturnIfAbrupt(status).\n2. Return the result of performing IteratorBindingInitialization for\nBindingRestElement with iteratorRecord and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/let/dstr/ary-ptrn-rest-id-exhausted.js", "description": " RestElement applied to an exhausted iterator (`let` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\n[...]\nb. If iteratorRecord.[[done]] is true, then\ni. If environment is undefined, return PutValue(lhs, A).\nii. Return InitializeReferencedBinding(lhs, A).\n\n"}, {"path": "./test262-main/test/language/statements/let/dstr/ary-ptrn-rest-id-iter-step-err.js", "description": " Error forwarding when IteratorStep returns an abrupt completion (`let` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\na. If iteratorRecord.[[done]] is false,\ni. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nii. If next is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\niii. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/statements/let/dstr/ary-ptrn-rest-id-iter-val-err.js", "description": " Error forwarding when IteratorValue returns an abrupt completion (`let` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\n[...]\nc. Let nextValue be IteratorValue(next).\nd. If nextValue is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\ne. ReturnIfAbrupt(nextValue).\n\n"}, {"path": "./test262-main/test/language/statements/let/dstr/ary-ptrn-rest-id.js", "description": " Lone rest element (`let` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n[...] 3. Let A be ArrayCreate(0). [...] 5. Repeat\n[...]\nf. Let status be CreateDataProperty(A, ToString (n), nextValue).\n[...]\n"}, {"path": "./test262-main/test/language/statements/let/dstr/obj-ptrn-prop-ary-init.js", "description": " Object binding pattern with \"nested\" array binding pattern using initializer (`let` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/let/dstr/obj-ptrn-prop-ary-value-null.js", "description": " Object binding pattern with \"nested\" array binding pattern taking the `null` value (`let` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/let/dstr/obj-ptrn-prop-ary.js", "description": " Object binding pattern with \"nested\" array binding pattern not using initializer (`let` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/let/dstr/obj-ptrn-prop-eval-err.js", "description": " Evaluation of property name returns an abrupt completion (`let` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingProperty : PropertyName : BindingElement\n\n1. Let P be the result of evaluating PropertyName\n2. ReturnIfAbrupt(P).\n"}, {"path": "./test262-main/test/language/statements/let/dstr/obj-ptrn-prop-id-get-value-err.js", "description": " Error thrown when accessing the corresponding property of the value object (`let` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. Let v be GetV(value, propertyName).\n2. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/statements/let/dstr/obj-ptrn-prop-id-init-skipped.js", "description": " Destructuring initializer is not evaluated when value is not `undefined` (`let` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n"}, {"path": "./test262-main/test/language/statements/let/dstr/obj-ptrn-prop-id-init-throws.js", "description": " Error thrown when evaluating the initializer (`let` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/statements/let/dstr/obj-ptrn-prop-id-init-unresolvable.js", "description": " Destructuring initializer is an unresolvable reference (`let` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/statements/let/dstr/obj-ptrn-prop-id-init.js", "description": " Binding as specified via property name, identifier, and initializer (`let` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/let/dstr/obj-ptrn-prop-obj-init.js", "description": " Object binding pattern with \"nested\" object binding pattern using initializer (`let` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/let/dstr/obj-ptrn-prop-obj-value-null.js", "description": " Object binding pattern with \"nested\" object binding pattern taking the `null` value (`let` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/let/dstr/obj-ptrn-prop-obj-value-undef.js", "description": " Object binding pattern with \"nested\" object binding pattern taking the `null` value (`let` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/let/dstr/obj-ptrn-prop-obj.js", "description": " Object binding pattern with \"nested\" object binding pattern not using initializer (`let` statement)", "esid": " sec-let-and-const-declarations-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |LexicalBinding : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let value be GetValue(rhs).\n3. ReturnIfAbrupt(value).\n4. Let env be the running execution context's LexicalEnvironment.\n5. Return the result of performing BindingInitialization for BindingPattern\nusing value and env as the arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/let/function-local-closure-get-before-initialization.js", "version": 6, "esid": " 13.1", "description": " >let: function local closure [[Get]] before initialization.\n(TDZ, Temporal Dead Zone)\n"}, {"path": "./test262-main/test/language/statements/let/function-local-closure-set-before-initialization.js", "version": 6, "esid": " 13.1", "description": " >let: function local closure [[Set]] before initialization.\n(TDZ, Temporal Dead Zone)\n"}, {"path": "./test262-main/test/language/statements/let/function-local-use-before-initialization-in-declaration-statement.js", "version": 6, "esid": " 13.1", "description": " >let: function local use before initialization in declaration statement.\n(TDZ, Temporal Dead Zone)\n"}, {"path": "./test262-main/test/language/statements/let/function-local-use-before-initialization-in-prior-statement.js", "version": 6, "esid": " 13.1", "description": " >let: function local use before initialization in prior statement.\n(TDZ, Temporal Dead Zone)\n"}, {"path": "./test262-main/test/language/statements/switch/scope-lex-const.js", "esid": " sec-switch-statement-runtime-semantics-evaluation", "description": " Creation of new lexical environment (into `default` clause)", "info": " |1. Let exprRef be the result of evaluating Expression.\n2. Let switchValue be ? GetValue(exprRef).\n3. Let oldEnv be the running execution context's LexicalEnvironment.\n4. Let blockEnv be NewDeclarativeEnvironment(oldEnv).\n5. Perform BlockDeclarationInstantiation(CaseBlock, blockEnv).\n6. Set the running execution context's LexicalEnvironment to blockEnv.\n7. Let R be the result of performing CaseBlockEvaluation of CaseBlock with\nargument switchValue.\n[...]\n", "negative": {"phase": "runtime", "type": "ReferenceError"}}, {"path": "./test262-main/test/language/statements/try/dstr/ary-init-iter-get-err-array-prototype.js", "description": " Abrupt completion returned by GetIterator (try statement)", "esid": " sec-runtime-semantics-catchclauseevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |Catch : catch ( CatchParameter ) Block\n\n[...]\n5. Let status be the result of performing BindingInitialization for\nCatchParameter passing thrownValue and catchEnv as arguments.\n[...]\n\nRuntime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iteratorRecord be ? GetIterator(value).\n\nGetIterator ( obj [ , hint [ , method ] ] )\n\n[...]\n4. Let iterator be ? Call(method, obj).\n\nCall ( F, V [ , argumentsList ] )\n\n[...]\n2. If IsCallable(F) is false, throw a TypeError exception.\n\n"}, {"path": "./test262-main/test/language/statements/try/dstr/ary-init-iter-get-err.js", "description": " Abrupt completion returned by GetIterator (try statement)", "esid": " sec-runtime-semantics-catchclauseevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |Catch : catch ( CatchParameter ) Block\n\n[...]\n5. Let status be the result of performing BindingInitialization for\nCatchParameter passing thrownValue and catchEnv as arguments.\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iterator be GetIterator(value).\n2. ReturnIfAbrupt(iterator).\n\n"}, {"path": "./test262-main/test/language/statements/try/dstr/ary-init-iter-no-close.js", "description": " Iterator is not closed when exhausted by pattern evaluation (try statement)", "esid": " sec-runtime-semantics-catchclauseevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |Catch : catch ( CatchParameter ) Block\n\n[...]\n5. Let status be the result of performing BindingInitialization for\nCatchParameter passing thrownValue and catchEnv as arguments.\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n[...]\n4. If iteratorRecord.[[done]] is false, return ? IteratorClose(iterator,\nresult).\n[...]\n\n"}, {"path": "./test262-main/test/language/statements/try/dstr/ary-ptrn-elem-ary-elem-init.js", "description": " BindingElement with array binding pattern and initializer is used (try statement)", "esid": " sec-runtime-semantics-catchclauseevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |Catch : catch ( CatchParameter ) Block\n\n[...]\n5. Let status be the result of performing BindingInitialization for\nCatchParameter passing thrownValue and catchEnv as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/try/dstr/ary-ptrn-elem-ary-elem-iter.js", "description": " BindingElement with array binding pattern and initializer is not used (try statement)", "esid": " sec-runtime-semantics-catchclauseevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |Catch : catch ( CatchParameter ) Block\n\n[...]\n5. Let status be the result of performing BindingInitialization for\nCatchParameter passing thrownValue and catchEnv as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\n[...]\ne. Else,\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/try/dstr/ary-ptrn-elem-ary-elision-init.js", "description": " BindingElement with array binding pattern and initializer is used (try statement)", "esid": " sec-runtime-semantics-catchclauseevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |Catch : catch ( CatchParameter ) Block\n\n[...]\n5. Let status be the result of performing BindingInitialization for\nCatchParameter passing thrownValue and catchEnv as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n"}, {"path": "./test262-main/test/language/statements/try/dstr/ary-ptrn-elem-ary-elision-iter.js", "description": " BindingElement with array binding pattern and initializer is not used (try statement)", "esid": " sec-runtime-semantics-catchclauseevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |Catch : catch ( CatchParameter ) Block\n\n[...]\n5. Let status be the result of performing BindingInitialization for\nCatchParameter passing thrownValue and catchEnv as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\n[...]\ne. Else,\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n"}, {"path": "./test262-main/test/language/statements/try/dstr/ary-ptrn-elem-ary-empty-init.js", "description": " BindingElement with array binding pattern and initializer is used (try statement)", "esid": " sec-runtime-semantics-catchclauseevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |Catch : catch ( CatchParameter ) Block\n\n[...]\n5. Let status be the result of performing BindingInitialization for\nCatchParameter passing thrownValue and catchEnv as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n"}, {"path": "./test262-main/test/language/statements/try/dstr/ary-ptrn-elem-ary-empty-iter.js", "description": " BindingElement with array binding pattern and initializer is not used (try statement)", "esid": " sec-runtime-semantics-catchclauseevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |Catch : catch ( CatchParameter ) Block\n\n[...]\n5. Let status be the result of performing BindingInitialization for\nCatchParameter passing thrownValue and catchEnv as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\n[...]\ne. Else,\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/try/dstr/ary-ptrn-elem-ary-rest-init.js", "description": " BindingElement with array binding pattern and initializer is used (try statement)", "esid": " sec-runtime-semantics-catchclauseevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |Catch : catch ( CatchParameter ) Block\n\n[...]\n5. Let status be the result of performing BindingInitialization for\nCatchParameter passing thrownValue and catchEnv as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/try/dstr/ary-ptrn-elem-ary-rest-iter.js", "description": " BindingElement with array binding pattern and initializer is not used (try statement)", "esid": " sec-runtime-semantics-catchclauseevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |Catch : catch ( CatchParameter ) Block\n\n[...]\n5. Let status be the result of performing BindingInitialization for\nCatchParameter passing thrownValue and catchEnv as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\n[...]\ne. Else,\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/try/dstr/ary-ptrn-elem-id-init-exhausted.js", "description": " Destructuring initializer with an exhausted iterator (try statement)", "esid": " sec-runtime-semantics-catchclauseevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |Catch : catch ( CatchParameter ) Block\n\n[...]\n5. Let status be the result of performing BindingInitialization for\nCatchParameter passing thrownValue and catchEnv as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n5. If iteratorRecord.[[done]] is true, let v be undefined.\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/try/dstr/ary-ptrn-elem-id-init-hole.js", "description": " Destructuring initializer with a \"hole\" (try statement)", "esid": " sec-runtime-semantics-catchclauseevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |Catch : catch ( CatchParameter ) Block\n\n[...]\n5. Let status be the result of performing BindingInitialization for\nCatchParameter passing thrownValue and catchEnv as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nSingleNameBinding : BindingIdentifier Initializeropt\n[...] 6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\n[...]\n7. If environment is undefined, return PutValue(lhs, v). 8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/try/dstr/ary-ptrn-elem-id-init-skipped.js", "description": " Destructuring initializer is not evaluated when value is not `undefined` (try statement)", "esid": " sec-runtime-semantics-catchclauseevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |Catch : catch ( CatchParameter ) Block\n\n[...]\n5. Let status be the result of performing BindingInitialization for\nCatchParameter passing thrownValue and catchEnv as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/try/dstr/ary-ptrn-elem-id-init-throws.js", "description": " Destructuring initializer returns an abrupt completion (try statement)", "esid": " sec-runtime-semantics-catchclauseevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |Catch : catch ( CatchParameter ) Block\n\n[...]\n5. Let status be the result of performing BindingInitialization for\nCatchParameter passing thrownValue and catchEnv as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/statements/try/dstr/ary-ptrn-elem-id-init-undef.js", "description": " Destructuring initializer with an undefined value (try statement)", "esid": " sec-runtime-semantics-catchclauseevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |Catch : catch ( CatchParameter ) Block\n\n[...]\n5. Let status be the result of performing BindingInitialization for\nCatchParameter passing thrownValue and catchEnv as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/try/dstr/ary-ptrn-elem-id-init-unresolvable.js", "description": " Destructuring initializer is an unresolvable reference (try statement)", "esid": " sec-runtime-semantics-catchclauseevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |Catch : catch ( CatchParameter ) Block\n\n[...]\n5. Let status be the result of performing BindingInitialization for\nCatchParameter passing thrownValue and catchEnv as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/statements/try/dstr/ary-ptrn-elem-id-iter-step-err.js", "description": " Error forwarding when IteratorStep returns an abrupt completion (try statement)", "esid": " sec-runtime-semantics-catchclauseevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |Catch : catch ( CatchParameter ) Block\n\n[...]\n5. Let status be the result of performing BindingInitialization for\nCatchParameter passing thrownValue and catchEnv as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/statements/try/dstr/ary-ptrn-elem-id-iter-val-array-prototype.js", "description": " Array destructuring uses overriden Array.prototype[Symbol.iterator] (try statement)", "esid": " sec-runtime-semantics-catchclauseevaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |Catch : catch ( CatchParameter ) Block\n\n[...]\n5. Let status be the result of performing BindingInitialization for\nCatchParameter passing thrownValue and catchEnv as arguments.\n[...]\n\nRuntime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializer_opt\n\n1. Let bindingId be StringValue of BindingIdentifier.\n2. Let lhs be ? ResolveBinding(bindingId, environment).\n3. If iteratorRecord.[[Done]] is false, then\na. Let next be IteratorStep(iteratorRecord).\nb. If next is an abrupt completion, set iteratorRecord.[[Done]] to true.\nc. ReturnIfAbrupt(next).\nd. If next is false, set iteratorRecord.[[Done]] to true.\ne. Else,\ni. Let v be IteratorValue(next).\nii. If v is an abrupt completion, set iteratorRecord.[[Done]] to true.\niii. ReturnIfAbrupt(v).\n[...]\n7. Return InitializeReferencedBinding(lhs, v).\n\n"}, {"path": "./test262-main/test/language/statements/try/dstr/ary-ptrn-elem-id-iter-val-err.js", "description": " Error forwarding when IteratorValue returns an abrupt completion (try statement)", "esid": " sec-runtime-semantics-catchclauseevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |Catch : catch ( CatchParameter ) Block\n\n[...]\n5. Let status be the result of performing BindingInitialization for\nCatchParameter passing thrownValue and catchEnv as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\nd. If next is false, set iteratorRecord.[[done]] to true.\ne. Else,\ni. Let v be IteratorValue(next).\nii. If v is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\niii. ReturnIfAbrupt(v).\n\n"}, {"path": "./test262-main/test/language/statements/try/dstr/ary-ptrn-elem-obj-id-init.js", "description": " BindingElement with object binding pattern and initializer is used (try statement)", "esid": " sec-runtime-semantics-catchclauseevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |Catch : catch ( CatchParameter ) Block\n\n[...]\n5. Let status be the result of performing BindingInitialization for\nCatchParameter passing thrownValue and catchEnv as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/try/dstr/ary-ptrn-elem-obj-id.js", "description": " BindingElement with object binding pattern and initializer is not used (try statement)", "esid": " sec-runtime-semantics-catchclauseevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |Catch : catch ( CatchParameter ) Block\n\n[...]\n5. Let status be the result of performing BindingInitialization for\nCatchParameter passing thrownValue and catchEnv as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/try/dstr/ary-ptrn-elem-obj-prop-id-init.js", "description": " BindingElement with object binding pattern and initializer is used (try statement)", "esid": " sec-runtime-semantics-catchclauseevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |Catch : catch ( CatchParameter ) Block\n\n[...]\n5. Let status be the result of performing BindingInitialization for\nCatchParameter passing thrownValue and catchEnv as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/try/dstr/ary-ptrn-elem-obj-prop-id.js", "description": " BindingElement with object binding pattern and initializer is not used (try statement)", "esid": " sec-runtime-semantics-catchclauseevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |Catch : catch ( CatchParameter ) Block\n\n[...]\n5. Let status be the result of performing BindingInitialization for\nCatchParameter passing thrownValue and catchEnv as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/try/dstr/ary-ptrn-elision-exhausted.js", "description": " Elision accepts exhausted iterator (try statement)", "esid": " sec-runtime-semantics-catchclauseevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |Catch : catch ( CatchParameter ) Block\n\n[...]\n5. Let status be the result of performing BindingInitialization for\nCatchParameter passing thrownValue and catchEnv as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ Elision ]\n\n1. Return the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with iteratorRecord\nas the argument.\n\n12.14.5.3 Runtime Semantics: IteratorDestructuringAssignmentEvaluation\n\nElision : ,\n\n1. If iteratorRecord.[[done]] is false, then\n[...]\n2. Return NormalCompletion(empty).\n\n"}, {"path": "./test262-main/test/language/statements/try/dstr/ary-ptrn-elision-step-err.js", "description": " Elision advances iterator and forwards abrupt completions (try statement)", "esid": " sec-runtime-semantics-catchclauseevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |Catch : catch ( CatchParameter ) Block\n\n[...]\n5. Let status be the result of performing BindingInitialization for\nCatchParameter passing thrownValue and catchEnv as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ Elision ]\n\n1. Return the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with iteratorRecord\nas the argument.\n\n12.14.5.3 Runtime Semantics: IteratorDestructuringAssignmentEvaluation\n\nElision : ,\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/statements/try/dstr/ary-ptrn-elision.js", "description": " Elision advances iterator (try statement)", "esid": " sec-runtime-semantics-catchclauseevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |Catch : catch ( CatchParameter ) Block\n\n[...]\n5. Let status be the result of performing BindingInitialization for\nCatchParameter passing thrownValue and catchEnv as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ Elision ]\n\n1. Return the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with iteratorRecord\nas the argument.\n\n12.14.5.3 Runtime Semantics: IteratorDestructuringAssignmentEvaluation\n\nElision : ,\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\nd. If next is false, set iteratorRecord.[[done]] to true.\n2. Return NormalCompletion(empty).\n\n"}, {"path": "./test262-main/test/language/statements/try/dstr/ary-ptrn-empty.js", "description": " No iteration occurs for an \"empty\" array binding pattern (try statement)", "esid": " sec-runtime-semantics-catchclauseevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |Catch : catch ( CatchParameter ) Block\n\n[...]\n5. Let status be the result of performing BindingInitialization for\nCatchParameter passing thrownValue and catchEnv as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ ]\n\n1. Return NormalCompletion(empty).\n\n"}, {"path": "./test262-main/test/language/statements/try/dstr/ary-ptrn-rest-id-direct.js", "description": " Lone rest element (direct binding) (try statement)", "esid": " sec-runtime-semantics-catchclauseevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "includes": ["compareArray.js"], "info": " |Catch : catch ( CatchParameter ) Block\n\n[...]\n5. Let status be the result of performing BindingInitialization for\nCatchParameter passing thrownValue and catchEnv as arguments.\n[...]\n\nRuntime Semantics: IteratorBindingInitialization\n\nBindingRestElement : ... BindingIdentifier\n\n[...]\n2. Let A be ! ArrayCreate(0).\n3. Let n be 0.\n4. Repeat,\n[...]\nf. Perform ! CreateDataPropertyOrThrow(A, ! ToString(n), nextValue).\ng. Set n to n + 1.\n\n"}, {"path": "./test262-main/test/language/statements/try/dstr/ary-ptrn-rest-id-elision-next-err.js", "description": " Rest element following elision elements (try statement)", "esid": " sec-runtime-semantics-catchclauseevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |Catch : catch ( CatchParameter ) Block\n\n[...]\n5. Let status be the result of performing BindingInitialization for\nCatchParameter passing thrownValue and catchEnv as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nArrayBindingPattern : [ Elisionopt BindingRestElement ]\n1. If Elision is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with\niteratorRecord as the argument.\nb. ReturnIfAbrupt(status).\n2. Return the result of performing IteratorBindingInitialization for\nBindingRestElement with iteratorRecord and environment as arguments.\n\n"}, {"path": "./test262-main/test/language/statements/try/dstr/ary-ptrn-rest-id-elision.js", "description": " Rest element following elision elements (try statement)", "esid": " sec-runtime-semantics-catchclauseevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |Catch : catch ( CatchParameter ) Block\n\n[...]\n5. Let status be the result of performing BindingInitialization for\nCatchParameter passing thrownValue and catchEnv as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nArrayBindingPattern : [ Elisionopt BindingRestElement ]\n1. If Elision is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with\niteratorRecord as the argument.\nb. ReturnIfAbrupt(status).\n2. Return the result of performing IteratorBindingInitialization for\nBindingRestElement with iteratorRecord and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/try/dstr/ary-ptrn-rest-id-exhausted.js", "description": " RestElement applied to an exhausted iterator (try statement)", "esid": " sec-runtime-semantics-catchclauseevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |Catch : catch ( CatchParameter ) Block\n\n[...]\n5. Let status be the result of performing BindingInitialization for\nCatchParameter passing thrownValue and catchEnv as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\n[...]\nb. If iteratorRecord.[[done]] is true, then\ni. If environment is undefined, return PutValue(lhs, A).\nii. Return InitializeReferencedBinding(lhs, A).\n\n"}, {"path": "./test262-main/test/language/statements/try/dstr/ary-ptrn-rest-id-iter-step-err.js", "description": " Error forwarding when IteratorStep returns an abrupt completion (try statement)", "esid": " sec-runtime-semantics-catchclauseevaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |Catch : catch ( CatchParameter ) Block\n\n[...]\n5. Let status be the result of performing BindingInitialization for\nCatchParameter passing thrownValue and catchEnv as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\na. If iteratorRecord.[[done]] is false,\ni. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nii. If next is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\niii. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/statements/try/dstr/ary-ptrn-rest-id-iter-val-err.js", "description": " Error forwarding when IteratorValue returns an abrupt completion (try statement)", "esid": " sec-runtime-semantics-catchclauseevaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |Catch : catch ( CatchParameter ) Block\n\n[...]\n5. Let status be the result of performing BindingInitialization for\nCatchParameter passing thrownValue and catchEnv as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\n[...]\nc. Let nextValue be IteratorValue(next).\nd. If nextValue is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\ne. ReturnIfAbrupt(nextValue).\n\n"}, {"path": "./test262-main/test/language/statements/try/dstr/ary-ptrn-rest-id.js", "description": " Lone rest element (try statement)", "esid": " sec-runtime-semantics-catchclauseevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |Catch : catch ( CatchParameter ) Block\n\n[...]\n5. Let status be the result of performing BindingInitialization for\nCatchParameter passing thrownValue and catchEnv as arguments.\n[...]\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n[...] 3. Let A be ArrayCreate(0). [...] 5. Repeat\n[...]\nf. Let status be CreateDataProperty(A, ToString (n), nextValue).\n[...]\n"}, {"path": "./test262-main/test/language/statements/try/dstr/obj-ptrn-prop-ary-init.js", "description": " Object binding pattern with \"nested\" array binding pattern using initializer (try statement)", "esid": " sec-runtime-semantics-catchclauseevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |Catch : catch ( CatchParameter ) Block\n\n[...]\n5. Let status be the result of performing BindingInitialization for\nCatchParameter passing thrownValue and catchEnv as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/try/dstr/obj-ptrn-prop-ary-value-null.js", "description": " Object binding pattern with \"nested\" array binding pattern taking the `null` value (try statement)", "esid": " sec-runtime-semantics-catchclauseevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |Catch : catch ( CatchParameter ) Block\n\n[...]\n5. Let status be the result of performing BindingInitialization for\nCatchParameter passing thrownValue and catchEnv as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/try/dstr/obj-ptrn-prop-ary.js", "description": " Object binding pattern with \"nested\" array binding pattern not using initializer (try statement)", "esid": " sec-runtime-semantics-catchclauseevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |Catch : catch ( CatchParameter ) Block\n\n[...]\n5. Let status be the result of performing BindingInitialization for\nCatchParameter passing thrownValue and catchEnv as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/try/dstr/obj-ptrn-prop-eval-err.js", "description": " Evaluation of property name returns an abrupt completion (try statement)", "esid": " sec-runtime-semantics-catchclauseevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |Catch : catch ( CatchParameter ) Block\n\n[...]\n5. Let status be the result of performing BindingInitialization for\nCatchParameter passing thrownValue and catchEnv as arguments.\n[...]\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingProperty : PropertyName : BindingElement\n\n1. Let P be the result of evaluating PropertyName\n2. ReturnIfAbrupt(P).\n"}, {"path": "./test262-main/test/language/statements/try/dstr/obj-ptrn-prop-id-get-value-err.js", "description": " Error thrown when accessing the corresponding property of the value object (try statement)", "esid": " sec-runtime-semantics-catchclauseevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |Catch : catch ( CatchParameter ) Block\n\n[...]\n5. Let status be the result of performing BindingInitialization for\nCatchParameter passing thrownValue and catchEnv as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. Let v be GetV(value, propertyName).\n2. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/statements/try/dstr/obj-ptrn-prop-id-init-skipped.js", "description": " Destructuring initializer is not evaluated when value is not `undefined` (try statement)", "esid": " sec-runtime-semantics-catchclauseevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |Catch : catch ( CatchParameter ) Block\n\n[...]\n5. Let status be the result of performing BindingInitialization for\nCatchParameter passing thrownValue and catchEnv as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n"}, {"path": "./test262-main/test/language/statements/try/dstr/obj-ptrn-prop-id-init-throws.js", "description": " Error thrown when evaluating the initializer (try statement)", "esid": " sec-runtime-semantics-catchclauseevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |Catch : catch ( CatchParameter ) Block\n\n[...]\n5. Let status be the result of performing BindingInitialization for\nCatchParameter passing thrownValue and catchEnv as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/statements/try/dstr/obj-ptrn-prop-id-init-unresolvable.js", "description": " Destructuring initializer is an unresolvable reference (try statement)", "esid": " sec-runtime-semantics-catchclauseevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |Catch : catch ( CatchParameter ) Block\n\n[...]\n5. Let status be the result of performing BindingInitialization for\nCatchParameter passing thrownValue and catchEnv as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/statements/try/dstr/obj-ptrn-prop-id-init.js", "description": " Binding as specified via property name, identifier, and initializer (try statement)", "esid": " sec-runtime-semantics-catchclauseevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |Catch : catch ( CatchParameter ) Block\n\n[...]\n5. Let status be the result of performing BindingInitialization for\nCatchParameter passing thrownValue and catchEnv as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/try/dstr/obj-ptrn-prop-obj-init.js", "description": " Object binding pattern with \"nested\" object binding pattern using initializer (try statement)", "esid": " sec-runtime-semantics-catchclauseevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |Catch : catch ( CatchParameter ) Block\n\n[...]\n5. Let status be the result of performing BindingInitialization for\nCatchParameter passing thrownValue and catchEnv as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/try/dstr/obj-ptrn-prop-obj-value-null.js", "description": " Object binding pattern with \"nested\" object binding pattern taking the `null` value (try statement)", "esid": " sec-runtime-semantics-catchclauseevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |Catch : catch ( CatchParameter ) Block\n\n[...]\n5. Let status be the result of performing BindingInitialization for\nCatchParameter passing thrownValue and catchEnv as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/try/dstr/obj-ptrn-prop-obj-value-undef.js", "description": " Object binding pattern with \"nested\" object binding pattern taking the `null` value (try statement)", "esid": " sec-runtime-semantics-catchclauseevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |Catch : catch ( CatchParameter ) Block\n\n[...]\n5. Let status be the result of performing BindingInitialization for\nCatchParameter passing thrownValue and catchEnv as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/try/dstr/obj-ptrn-prop-obj.js", "description": " Object binding pattern with \"nested\" object binding pattern not using initializer (try statement)", "esid": " sec-runtime-semantics-catchclauseevaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |Catch : catch ( CatchParameter ) Block\n\n[...]\n5. Let status be the result of performing BindingInitialization for\nCatchParameter passing thrownValue and catchEnv as arguments.\n[...]\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/try/scope-catch-param-lex-open.js", "esid": " sec-runtime-semantics-catchclauseevaluation", "description": " Creation of new lexical environment for `catch` parameter"}, {"path": "./test262-main/test/language/statements/try/scope-catch-param-var-none.js", "esid": " sec-runtime-semantics-catchclauseevaluation", "description": " Retainment of existing variable environment for `catch` parameter", "flags": ["noStrict"]}, {"path": "./test262-main/test/language/statements/variable/dstr/ary-init-iter-get-err-array-prototype.js", "description": " Abrupt completion returned by GetIterator (`var` statement)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nRuntime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iteratorRecord be ? GetIterator(value).\n\nGetIterator ( obj [ , hint [ , method ] ] )\n\n[...]\n4. Let iterator be ? Call(method, obj).\n\nCall ( F, V [ , argumentsList ] )\n\n[...]\n2. If IsCallable(F) is false, throw a TypeError exception.\n\n"}, {"path": "./test262-main/test/language/statements/variable/dstr/ary-init-iter-get-err.js", "description": " Abrupt completion returned by GetIterator (`var` statement)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n1. Let iterator be GetIterator(value).\n2. ReturnIfAbrupt(iterator).\n\n"}, {"path": "./test262-main/test/language/statements/variable/dstr/ary-init-iter-no-close.js", "description": " Iterator is not closed when exhausted by pattern evaluation (`var` statement)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingPattern : ArrayBindingPattern\n\n[...]\n4. If iteratorRecord.[[done]] is false, return ? IteratorClose(iterator,\nresult).\n[...]\n\n"}, {"path": "./test262-main/test/language/statements/variable/dstr/ary-ptrn-elem-ary-elem-init.js", "description": " BindingElement with array binding pattern and initializer is used (`var` statement)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/variable/dstr/ary-ptrn-elem-ary-elem-iter.js", "description": " BindingElement with array binding pattern and initializer is not used (`var` statement)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\n[...]\ne. Else,\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/variable/dstr/ary-ptrn-elem-ary-elision-init.js", "description": " BindingElement with array binding pattern and initializer is used (`var` statement)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n"}, {"path": "./test262-main/test/language/statements/variable/dstr/ary-ptrn-elem-ary-elision-iter.js", "description": " BindingElement with array binding pattern and initializer is not used (`var` statement)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\n[...]\ne. Else,\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n"}, {"path": "./test262-main/test/language/statements/variable/dstr/ary-ptrn-elem-ary-empty-init.js", "description": " BindingElement with array binding pattern and initializer is used (`var` statement)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n\n"}, {"path": "./test262-main/test/language/statements/variable/dstr/ary-ptrn-elem-ary-empty-iter.js", "description": " BindingElement with array binding pattern and initializer is not used (`var` statement)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\n[...]\ne. Else,\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/variable/dstr/ary-ptrn-elem-ary-rest-init.js", "description": " BindingElement with array binding pattern and initializer is used (`var` statement)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/variable/dstr/ary-ptrn-elem-ary-rest-iter.js", "description": " BindingElement with array binding pattern and initializer is not used (`var` statement)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\n[...]\ne. Else,\ni. Let v be IteratorValue(next).\n[...]\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/variable/dstr/ary-ptrn-elem-id-init-exhausted.js", "description": " Destructuring initializer with an exhausted iterator (`var` statement)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n5. If iteratorRecord.[[done]] is true, let v be undefined.\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/variable/dstr/ary-ptrn-elem-id-init-hole.js", "description": " Destructuring initializer with a \"hole\" (`var` statement)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nSingleNameBinding : BindingIdentifier Initializeropt\n[...] 6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\n[...]\n7. If environment is undefined, return PutValue(lhs, v). 8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/variable/dstr/ary-ptrn-elem-id-init-skipped.js", "description": " Destructuring initializer is not evaluated when value is not `undefined` (`var` statement)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/variable/dstr/ary-ptrn-elem-id-init-throws.js", "description": " Destructuring initializer returns an abrupt completion (`var` statement)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/statements/variable/dstr/ary-ptrn-elem-id-init-undef.js", "description": " Destructuring initializer with an undefined value (`var` statement)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\n[...]\n7. If environment is undefined, return PutValue(lhs, v).\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/variable/dstr/ary-ptrn-elem-id-init-unresolvable.js", "description": " Destructuring initializer is an unresolvable reference (`var` statement)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n6. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/statements/variable/dstr/ary-ptrn-elem-id-iter-step-err.js", "description": " Error forwarding when IteratorStep returns an abrupt completion (`var` statement)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/statements/variable/dstr/ary-ptrn-elem-id-iter-val-array-prototype.js", "description": " Array destructuring uses overriden Array.prototype[Symbol.iterator] (`var` statement)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "generators", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nRuntime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializer_opt\n\n1. Let bindingId be StringValue of BindingIdentifier.\n2. Let lhs be ? ResolveBinding(bindingId, environment).\n3. If iteratorRecord.[[Done]] is false, then\na. Let next be IteratorStep(iteratorRecord).\nb. If next is an abrupt completion, set iteratorRecord.[[Done]] to true.\nc. ReturnIfAbrupt(next).\nd. If next is false, set iteratorRecord.[[Done]] to true.\ne. Else,\ni. Let v be IteratorValue(next).\nii. If v is an abrupt completion, set iteratorRecord.[[Done]] to true.\niii. ReturnIfAbrupt(v).\n[...]\n7. Return InitializeReferencedBinding(lhs, v).\n\n"}, {"path": "./test262-main/test/language/statements/variable/dstr/ary-ptrn-elem-id-iter-val-err.js", "description": " Error forwarding when IteratorValue returns an abrupt completion (`var` statement)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n4. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\nd. If next is false, set iteratorRecord.[[done]] to true.\ne. Else,\ni. Let v be IteratorValue(next).\nii. If v is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\niii. ReturnIfAbrupt(v).\n\n"}, {"path": "./test262-main/test/language/statements/variable/dstr/ary-ptrn-elem-obj-id-init.js", "description": " BindingElement with object binding pattern and initializer is used (`var` statement)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/variable/dstr/ary-ptrn-elem-obj-id.js", "description": " BindingElement with object binding pattern and initializer is not used (`var` statement)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/variable/dstr/ary-ptrn-elem-obj-prop-id-init.js", "description": " BindingElement with object binding pattern and initializer is used (`var` statement)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/variable/dstr/ary-ptrn-elem-obj-prop-id.js", "description": " BindingElement with object binding pattern and initializer is not used (`var` statement)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nBindingElement : BindingPatternInitializer opt\n\n[...]\n2. If iteratorRecord.[[done]] is true, let v be undefined.\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be ? GetValue(defaultValue).\n4. Return the result of performing BindingInitialization of BindingPattern\nwith v and environment as the arguments.\n"}, {"path": "./test262-main/test/language/statements/variable/dstr/ary-ptrn-elision-exhausted.js", "description": " Elision accepts exhausted iterator (`var` statement)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ Elision ]\n\n1. Return the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with iteratorRecord\nas the argument.\n\n12.14.5.3 Runtime Semantics: IteratorDestructuringAssignmentEvaluation\n\nElision : ,\n\n1. If iteratorRecord.[[done]] is false, then\n[...]\n2. Return NormalCompletion(empty).\n\n"}, {"path": "./test262-main/test/language/statements/variable/dstr/ary-ptrn-elision-step-err.js", "description": " Elision advances iterator and forwards abrupt completions (`var` statement)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ Elision ]\n\n1. Return the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with iteratorRecord\nas the argument.\n\n12.14.5.3 Runtime Semantics: IteratorDestructuringAssignmentEvaluation\n\nElision : ,\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/statements/variable/dstr/ary-ptrn-elision.js", "description": " Elision advances iterator (`var` statement)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ Elision ]\n\n1. Return the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with iteratorRecord\nas the argument.\n\n12.14.5.3 Runtime Semantics: IteratorDestructuringAssignmentEvaluation\n\nElision : ,\n\n1. If iteratorRecord.[[done]] is false, then\na. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nb. If next is an abrupt completion, set iteratorRecord.[[done]] to true.\nc. ReturnIfAbrupt(next).\nd. If next is false, set iteratorRecord.[[done]] to true.\n2. Return NormalCompletion(empty).\n\n"}, {"path": "./test262-main/test/language/statements/variable/dstr/ary-ptrn-empty.js", "description": " No iteration occurs for an \"empty\" array binding pattern (`var` statement)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\n\nArrayBindingPattern : [ ]\n\n1. Return NormalCompletion(empty).\n\n"}, {"path": "./test262-main/test/language/statements/variable/dstr/ary-ptrn-rest-id-direct.js", "description": " Lone rest element (direct binding) (`var` statement)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "includes": ["compareArray.js"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\nRuntime Semantics: IteratorBindingInitialization\n\nBindingRestElement : ... BindingIdentifier\n\n[...]\n2. Let A be ! ArrayCreate(0).\n3. Let n be 0.\n4. Repeat,\n[...]\nf. Perform ! CreateDataPropertyOrThrow(A, ! ToString(n), nextValue).\ng. Set n to n + 1.\n\n"}, {"path": "./test262-main/test/language/statements/variable/dstr/ary-ptrn-rest-id-elision-next-err.js", "description": " Rest element following elision elements (`var` statement)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nArrayBindingPattern : [ Elisionopt BindingRestElement ]\n1. If Elision is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with\niteratorRecord as the argument.\nb. ReturnIfAbrupt(status).\n2. Return the result of performing IteratorBindingInitialization for\nBindingRestElement with iteratorRecord and environment as arguments.\n\n"}, {"path": "./test262-main/test/language/statements/variable/dstr/ary-ptrn-rest-id-elision.js", "description": " Rest element following elision elements (`var` statement)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nArrayBindingPattern : [ Elisionopt BindingRestElement ]\n1. If Elision is present, then\na. Let status be the result of performing\nIteratorDestructuringAssignmentEvaluation of Elision with\niteratorRecord as the argument.\nb. ReturnIfAbrupt(status).\n2. Return the result of performing IteratorBindingInitialization for\nBindingRestElement with iteratorRecord and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/variable/dstr/ary-ptrn-rest-id-exhausted.js", "description": " RestElement applied to an exhausted iterator (`var` statement)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\n[...]\nb. If iteratorRecord.[[done]] is true, then\ni. If environment is undefined, return PutValue(lhs, A).\nii. Return InitializeReferencedBinding(lhs, A).\n\n"}, {"path": "./test262-main/test/language/statements/variable/dstr/ary-ptrn-rest-id-iter-step-err.js", "description": " Error forwarding when IteratorStep returns an abrupt completion (`var` statement)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["generators", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\na. If iteratorRecord.[[done]] is false,\ni. Let next be IteratorStep(iteratorRecord.[[iterator]]).\nii. If next is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\niii. ReturnIfAbrupt(next).\n\n"}, {"path": "./test262-main/test/language/statements/variable/dstr/ary-ptrn-rest-id-iter-val-err.js", "description": " Error forwarding when IteratorValue returns an abrupt completion (`var` statement)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["Symbol.iterator", "destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n1. Let lhs be ResolveBinding(StringValue of BindingIdentifier,\nenvironment).\n2. ReturnIfAbrupt(lhs). 3. Let A be ArrayCreate(0). 4. Let n=0. 5. Repeat,\n[...]\nc. Let nextValue be IteratorValue(next).\nd. If nextValue is an abrupt completion, set iteratorRecord.[[done]] to\ntrue.\ne. ReturnIfAbrupt(nextValue).\n\n"}, {"path": "./test262-main/test/language/statements/variable/dstr/ary-ptrn-rest-id.js", "description": " Lone rest element (`var` statement)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\n13.3.3.6 Runtime Semantics: IteratorBindingInitialization\nBindingRestElement : ... BindingIdentifier\n[...] 3. Let A be ArrayCreate(0). [...] 5. Repeat\n[...]\nf. Let status be CreateDataProperty(A, ToString (n), nextValue).\n[...]\n"}, {"path": "./test262-main/test/language/statements/variable/dstr/obj-ptrn-prop-ary-init.js", "description": " Object binding pattern with \"nested\" array binding pattern using initializer (`var` statement)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/variable/dstr/obj-ptrn-prop-ary-value-null.js", "description": " Object binding pattern with \"nested\" array binding pattern taking the `null` value (`var` statement)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/variable/dstr/obj-ptrn-prop-ary.js", "description": " Object binding pattern with \"nested\" array binding pattern not using initializer (`var` statement)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/variable/dstr/obj-ptrn-prop-eval-err.js", "description": " Evaluation of property name returns an abrupt completion (`var` statement)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\n13.3.3.5 Runtime Semantics: BindingInitialization\n\nBindingProperty : PropertyName : BindingElement\n\n1. Let P be the result of evaluating PropertyName\n2. ReturnIfAbrupt(P).\n"}, {"path": "./test262-main/test/language/statements/variable/dstr/obj-ptrn-prop-id-get-value-err.js", "description": " Error thrown when accessing the corresponding property of the value object (`var` statement)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n1. Let v be GetV(value, propertyName).\n2. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/statements/variable/dstr/obj-ptrn-prop-id-init-skipped.js", "description": " Destructuring initializer is not evaluated when value is not `undefined` (`var` statement)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n"}, {"path": "./test262-main/test/language/statements/variable/dstr/obj-ptrn-prop-id-init-throws.js", "description": " Error thrown when evaluating the initializer (`var` statement)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n"}, {"path": "./test262-main/test/language/statements/variable/dstr/obj-ptrn-prop-id-init-unresolvable.js", "description": " Destructuring initializer is an unresolvable reference (`var` statement)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nBindingElement : BindingPattern Initializeropt\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n\n6.2.3.1 GetValue (V)\n\n1. ReturnIfAbrupt(V).\n2. If Type(V) is not Reference, return V.\n3. Let base be GetBase(V).\n4. If IsUnresolvableReference(V), throw a ReferenceError exception.\n"}, {"path": "./test262-main/test/language/statements/variable/dstr/obj-ptrn-prop-id-init.js", "description": " Binding as specified via property name, identifier, and initializer (`var` statement)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\nSingleNameBinding : BindingIdentifier Initializeropt\n\n[...]\n8. Return InitializeReferencedBinding(lhs, v).\n"}, {"path": "./test262-main/test/language/statements/variable/dstr/obj-ptrn-prop-obj-init.js", "description": " Object binding pattern with \"nested\" object binding pattern using initializer (`var` statement)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\na. Let defaultValue be the result of evaluating Initializer.\nb. Let v be GetValue(defaultValue).\nc. ReturnIfAbrupt(v).\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/variable/dstr/obj-ptrn-prop-obj-value-null.js", "description": " Object binding pattern with \"nested\" object binding pattern taking the `null` value (`var` statement)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/variable/dstr/obj-ptrn-prop-obj-value-undef.js", "description": " Object binding pattern with \"nested\" object binding pattern taking the `null` value (`var` statement)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/variable/dstr/obj-ptrn-prop-obj.js", "description": " Object binding pattern with \"nested\" object binding pattern not using initializer (`var` statement)", "esid": " sec-variable-statement-runtime-semantics-evaluation", "features": ["destructuring-binding"], "flags": ["generated"], "info": " |VariableDeclaration : BindingPattern Initializer\n\n1. Let rhs be the result of evaluating Initializer.\n2. Let rval be GetValue(rhs).\n3. ReturnIfAbrupt(rval).\n4. Return the result of performing BindingInitialization for\nBindingPattern passing rval and undefined as arguments.\n\n13.3.3.7 Runtime Semantics: KeyedBindingInitialization\n\n[...]\n3. If Initializer is present and v is undefined, then\n[...]\n4. Return the result of performing BindingInitialization for BindingPattern\npassing v and environment as arguments.\n"}, {"path": "./test262-main/test/language/statements/with/binding-not-blocked-by-unscopables-falsey-prop.js", "version": 6, "esid": " 8.1.1.2.1", "description": " >False-coercing `Symbol.unscopables` properties do not block access to object environment record\n", "info": " |[...]\n6. If the withEnvironment flag of envRec is false, return true.\n7. Let unscopables be Get(bindings, @@unscopables).\n8. ReturnIfAbrupt(unscopables).\n9. If Type(unscopables) is Object, then\na. Let blocked be ToBoolean(Get(unscopables, N)).\nb. ReturnIfAbrupt(blocked).\nc. If blocked is true, return false.\n10. Return true.\n\nES6: 13.11.7 (The `with` Statement) Runtime Semantics: Evaluation\n[...]\n6. Set the withEnvironment flag of newEnv\u2019s EnvironmentRecord to true.\n[...]\n", "flags": ["noStrict"], "features": ["Symbol.unscopables"]}, {"path": "./test262-main/test/language/statements/with/binding-not-blocked-by-unscopables-non-obj.js", "version": 6, "esid": " 8.1.1.2.1", "description": " Non-object values of `Symbol.unscopables` property are ignored", "info": " |[...]\n6. If the withEnvironment flag of envRec is false, return true.\n7. Let unscopables be Get(bindings, @@unscopables).\n8. ReturnIfAbrupt(unscopables).\n9. If Type(unscopables) is Object, then\na. Let blocked be ToBoolean(Get(unscopables, N)).\nb. ReturnIfAbrupt(blocked).\nc. If blocked is true, return false.\n10. Return true.\n\nES6: 13.11.7 (The `with` Statement) Runtime Semantics: Evaluation\n[...]\n6. Set the withEnvironment flag of newEnv\u2019s EnvironmentRecord to true.\n[...]\n", "flags": ["noStrict"], "features": ["Symbol.unscopables"]}, {"path": "./test262-main/test/language/statements/with/unscopables-not-referenced-for-undef.js", "esid": " 8.1.2.1", "version": 6, "description": " >`Symbol.unscopables` is not referenced when environment record does not have\nrequested property\n", "info": " |[...]\n2. Let envRec be lex's EnvironmentRecord.\n3. Let exists be ? envRec.HasBinding(name).\n\n8.1.1.2.1 HasBinding\n\n1. Let envRec be the object Environment Record for which the method was\ninvoked.\n2. Let bindings be the binding object for envRec.\n3. Let foundBinding be ? HasProperty(bindings, N).\n4. If foundBinding is false, return false.\n\n13.11.7 (The `with` Statement) Runtime Semantics: Evaluation\n\n[...]\n5. Set the withEnvironment flag of newEnv\u2019s EnvironmentRecord to true.\n[...]\n", "flags": ["noStrict"], "features": ["Symbol.unscopables"]}, {"path": "./test262-main/test/language/types/reference/get-value-prop-base-primitive.js", "esid": " 6.2.3.1", "version": 6, "description": " >When the base of a property reference is primitive, it is coerced to an\nobject during value retrieval\n", "info": " |[...]\n5. If IsPropertyReference(V) is true, then\na. If HasPrimitiveBase(V) is true, then\ni. Assert: In this case, base will never be null or undefined.\nii. Let base be ToObject(base).\nb. Return ? base.[[Get]](GetReferencedName(V), GetThisValue(V)).\n", "features": ["Symbol"]}, {"path": "./test262-main/test/language/types/reference/put-value-prop-base-primitive.js", "esid": " 6.2.3.2", "version": 6, "description": " >When the base of a property reference is primitive, it is coerced to an\nobject during value assignment\n", "info": " |[...]\n6. Else if IsPropertyReference(V) is true, then\na. If HasPrimitiveBase(V) is true, then\ni. Assert: In this case, base will never be null or undefined.\nii. Set base to ToObject(base).\nb. Let succeeded be ? base.[[Set]](GetReferencedName(V), W,\nGetThisValue(V)).\nc. If succeeded is false and IsStrictReference(V) is true, throw a\nTypeError exception.\nd. Return.\n", "features": ["Symbol", "Proxy"]}]