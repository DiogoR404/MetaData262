[
    {
        "path": "test/built-ins/Array/Symbol.species/length.js",
        "version": 6,
        "esid": " 22.1.2.5",
        "description": " >get Array [ @@species ].length is 0.\n",
        "info": " |get Array [ @@species ]\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description, including optional\nparameters. However, rest parameters shown using the form “...name”\nare not included in the default argument count.\n\nUnless otherwise specified, the length property of a built-in Function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n",
        "includes": [
            "propertyHelper.js"
        ],
        "features": [
            "Symbol.species"
        ],
        "built-ins": "Array",
        "Array": "Symbol.species",
        "Symbol.species": "length.js",
        "syntactic_construct": [
            "Identifier",
            "MemberExpression",
            "CallExpression",
            "VariableDeclarator",
            "VariableDeclaration",
            "Literal",
            "ExpressionStatement",
            "Program"
        ],
        "builtIns": {
            "Object": [
                "getOwnPropertyDescriptor"
            ],
            "Array": [],
            "Symbol": [
                "species"
            ]
        },
        "asserts": 1,
        "error": 0,
        "esprima": "supported",
        "lines": 5
    },
    {
        "path": "test/built-ins/AsyncFromSyncIteratorPrototype/next/absent-value-not-passed.js",
        "esid": " sec-%asyncfromsynciteratorprototype%.next",
        "description": " >`next` method does not pass absent `value`.\n",
        "info": " |%AsyncFromSyncIteratorPrototype%.next ( value )\n\n[...]\n5. If value is present, then\n[...]\n6. Else,\na. Let result be IteratorNext(syncIteratorRecord).\n[...]\n",
        "flags": [
            "async"
        ],
        "features": [
            "async-iteration"
        ],
        "built-ins": "AsyncFromSyncIteratorPrototype",
        "AsyncFromSyncIteratorPrototype": "next",
        "next": "absent-value-not-passed.js",
        "version": 9,
        "asserts": 1,
        "error": 0,
        "esprima": "not supported",
        "lines": 14
    },
    {
        "path": "test/built-ins/ShadowRealm/prototype/importValue/import-value.js",
        "esid": " sec-shadowrealm.prototype.importvalue",
        "description": " >ShadowRealm.prototype.importValue can import a value.\n",
        "flags": [
            "async",
            "module"
        ],
        "features": [
            "ShadowRealm"
        ]
    },
    {
        "path": "test/language/eval-code/direct/export.js",
        "description": " The `export` declaration may not appear within eval code",
        "esid": " sec-scripts",
        "flags": [
            "module"
        ],
        "info": " |Eval code is the source text supplied to the built-in eval function. More\nprecisely, if the parameter to the built-in eval function is a String, it\nis treated as an ECMAScript Script. The eval code for a particular\ninvocation of eval is the global code portion of that Script.\n\nA.5 Scripts and Modules\n\nScript:\nScriptBodyopt\n\nScriptBody:\nStatementList\n",
        "language": "eval-code",
        "eval-code": "direct",
        "direct": "export.js",
        "version": 5,
        "syntactic_construct": [
            "Identifier",
            "MemberExpression",
            "Literal",
            "CallExpression",
            "ExpressionStatement",
            "BlockStatement",
            "FunctionExpression",
            "Program"
        ],
        "builtIns": {
            "SyntaxError": []
        },
        "asserts": 1,
        "error": 0,
        "esprima": "supported",
        "lines": 3
    },
    {
        "path": "test/built-ins/Proxy/preventExtensions/trap-is-undefined-target-is-proxy.js",
        "esid": " sec-proxy-object-internal-methods-and-internal-slots-preventextensions",
        "description": " >If \"preventExtensions\" trap is null or undefined, [[PreventExtensions]] call\nis properly forwarded to [[ProxyTarget]] (which is also a Proxy object).\n",
        "info": " |[[PreventExtensions]] ( )\n\n[...]\n4. Let target be O.[[ProxyTarget]].\n5. Let trap be ? GetMethod(handler, \"preventExtensions\").\n6. If trap is undefined, then\na. Return ? target.[[PreventExtensions]]().\n\n[[PreventExtensions]] ( )\n\n1. Return true.\n",
        "features": [
            "Proxy",
            "Reflect"
        ],
        "flags": [
            "module"
        ],
        "built-ins": "Proxy",
        "Proxy": "preventExtensions",
        "preventExtensions": "trap-is-undefined-target-is-proxy.js",
        "asserts": 1,
        "error": 0,
        "esprima": "not supported",
        "lines": 6
    },
    {
        "path": "test/language/expressions/class/cpn-class-expr-accessors-computed-property-name-from-await-expression.js",
        "description": " Computed property name from condition expression (ComputedPropertyName in ClassExpression)",
        "esid": " prod-ComputedPropertyName",
        "features": [
            "computed-property-names",
            "top-level-await"
        ],
        "flags": [
            "generated",
            "async",
            "module"
        ],
        "info": " |ClassExpression:\nclassBindingIdentifier opt ClassTail\n\nClassTail:\nClassHeritage opt { ClassBody opt }\n\nClassBody:\nClassElementList\n\nClassElementList:\nClassElement\n\nClassElement:\nMethodDefinition\n\nMethodDefinition:\nPropertyName ...\nget PropertyName ...\nset PropertyName ...\n\nPropertyName:\nComputedPropertyName\n\nComputedPropertyName:\n[ AssignmentExpression ]\n",
        "language": "expressions",
        "expressions": "class",
        "class": "cpn-class-expr-accessors-computed-property-name-from-await-expression.js",
        "asserts": 8,
        "error": 0,
        "esprima": "not supported",
        "lines": 52
    },
    {
        "path": "test/language/module-code/top-level-await/top-level-ticks.js",
        "esid": " sec-asyncblockstart",
        "description": " >Evaluation of await ticks order\n",
        "info": " |AsyncBlockStart ( promiseCapability, asyncBody, asyncContext )\n\n1. Assert: promiseCapability is a PromiseCapability Record.\n2. Let runningContext be the running execution context.\n3. Set the code evaluation state of asyncContext such that when evaluation is resumed for that execution context the following steps will be performed:\na. Let result be the result of evaluating asyncBody.\n...\n",
        "includes": [
            "compareArray.js"
        ],
        "flags": [
            "module",
            "async"
        ],
        "features": [
            "top-level-await"
        ]
    },
    {
        "path": "test/built-ins/Array/from/proto-from-ctor-realm.js",
        "esid": " 22.1.2.1",
        "version": 6,
        "description": " Default [[Prototype]] value derived from realm of the constructor",
        "info": " |[...]\n5. If usingIterator is not undefined, then\na. If IsConstructor(C) is true, then\ni. Let A be ? Construct(C).\n[...]\n\n9.1.14 GetPrototypeFromConstructor\n\n[...]\n3. Let proto be ? Get(constructor, \"prototype\").\n4. If Type(proto) is not Object, then\na. Let realm be ? GetFunctionRealm(constructor).\nb. Let proto be realm's intrinsic object named intrinsicDefaultProto.\n[...]\n",
        "features": [
            "cross-realm"
        ]
    },
    {
      "path": "test/built-ins/Atomics/waitAsync/undefined-for-timeout.js"
    },
    {
      "path": "test/built-ins/Array/prototype/splice/throws-if-integer-limit-exceeded.js"
    },
    {
      "path": "test/built-ins/Array/prototype/unshift/throws-if-integer-limit-exceeded.js"
    },
    {
      "path": "test/language/statements/const/syntax/const-invalid-assignment-next-expression-for.js"
    },
    {
        "path": "test/built-ins/RegExp/property-escapes/binary-property-with-value-ASCII_-_F-negated.js",
        "author": " Mathias Bynens",
        "description": " >Binary properties with an explicit value must throw in Unicode property\nescapes (even if the value is valid).\n",
        "esid": " sec-static-semantics-unicodematchproperty-p",
        "negative": {
          "phase": "parse",
          "type": "SyntaxError"
        },
        "features": [
          "regexp-unicode-property-escapes"
        ],
        "pathSplit": [
          "test",
          "built-ins",
          "RegExp",
          "property-escapes",
          "binary-property-with-value-ASCII_-_F-negated.js"
        ],
        "syntactic_construct": [
          "Identifier",
          "CallExpression",
          "ExpressionStatement",
          "Literal",
          "Program"
        ],
        "asserts": 0,
        "error": 0,
        "esprima": "supported",
        "lines": 2
      }, {
        "path": "test/built-ins/Date/S15.9.3.1_A5_T1.js"
      }, {
        "path": "test/built-ins/String/prototype/slice/S15.5.4.13_A6.js"
      },{
        "path": "test/language/eval-code/indirect/non-definable-function-with-function.js"
      },{
        "path": "test/built-ins/Array/prototype/lastIndexOf/15.4.4.15-8-b-i-13.js"
      },{
        "path": "test/built-ins/WeakMap/prototype/set/length.js"
      },{
        "path": "test/language/expressions/delete/11.4.1-4.a-10.js"
      },{
        "path": "test/language/comments/hashbang/line-terminator-carriage-return.js"
      },{
        "path": "test/built-ins/ArrayBuffer/prototype/slice/nonconstructor.js"
      },{
        "path": "test/language/line-terminators/comment-multi-lf.js",
        "info": " Multi line comment can contain LINE FEED (U+000A)",
        "esid": " 7.3_A5.1_T2",
        "versionFrontmatter": 5,
        "description": " Insert real LINE FEED into multi line comment",
        "negative": {
            "phase": "runtime",
            "type": "Test262Error"
        },
        "createdOn": "2019-01-01",
        "lastModified": "2019-01-01"
    }
]
