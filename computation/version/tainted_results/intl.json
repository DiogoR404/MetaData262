[{"path":"./test262-main/test/intl402/Array/prototype/toLocaleString/calls-toLocaleString-number-elements.js","esid":" sup-array.prototype.tolocalestring","description":" >Ensure \"toLocaleString\" is called with locale and options on number elements.\n"},{"path":"./test262-main/test/intl402/BigInt/prototype/toLocaleString/builtin.js","esid":" sec-bigint.prototype.tolocalestring","description":" >Tests that BigInt.prototype.toLocaleString meets the requirements\nfor built-in objects defined by the introduction of chapter 17 of\nthe ECMAScript Language Specification.\n","author":" Norbert Lindenberg","includes":["isConstructor.js"],"features":["Reflect.construct","BigInt"]},{"path":"./test262-main/test/intl402/BigInt/prototype/toLocaleString/de-DE.js","esid":" sec-bigint.prototype.tolocalestring","description":" Checks basic behavior for BigInt.prototype.toLocaleString.","features":["BigInt"]},{"path":"./test262-main/test/intl402/BigInt/prototype/toLocaleString/default-options-object-prototype.js","esid":" sec-initializenumberformat","description":" >Monkey-patching Object.prototype does not change the default\noptions for NumberFormat as a null prototype is used.\n","info":" |InitializeNumberFormat ( numberFormat, locales, options )\n\n1. If _options_ is *undefined*, then\n1. Let _options_ be ObjectCreate(*null*).\n","features":["BigInt"]},{"path":"./test262-main/test/intl402/BigInt/prototype/toLocaleString/en-US.js","esid":" sec-bigint.prototype.tolocalestring","description":" Checks basic behavior for BigInt.prototype.toLocaleString.","features":["BigInt"]},{"path":"./test262-main/test/intl402/BigInt/prototype/toLocaleString/length.js","esid":" sec-bigint.prototype.tolocalestring","description":" >BigInt.prototype.toLocaleString.length is 0.\n","info":" |BigInt.prototype.toLocaleString ( [ locales [ , options ] ] )\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery built-in function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description. Optional parameters\n(which are indicated with brackets: [ ]) or rest parameters (which\nare shown using the form «...name») are not included in the default\nargument count.\nUnless otherwise specified, the length property of a built-in function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n\n","includes":["propertyHelper.js"],"features":["BigInt"]},{"path":"./test262-main/test/intl402/BigInt/prototype/toLocaleString/name.js","esid":" sec-bigint.prototype.tolocalestring","description":" >BigInt.prototype.toLocaleString.name is toLocaleString.\n","info":" |BigInt.prototype.toLocaleString ( [ locales [ , options ] ] )\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery built-in function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String. For functions that are specified as properties of objects,\nthe name value is the property name string used to access the function.\n\nUnless otherwise specified, the name property of a built-in function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n\n","includes":["propertyHelper.js"],"features":["BigInt"]},{"path":"./test262-main/test/intl402/BigInt/prototype/toLocaleString/prop-desc.js","esid":" sec-bigint.prototype.tolocalestring","description":" Checks the \"toLocaleString\" property of the BigInt prototype object.","info":" |BigInt.prototype.toLocaleString ( [ locales [ , options ] ] )\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery other data property described in clauses 18 through 26 and in\nAnnex B.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false,\n[[Configurable]]: true } unless otherwise specified.\n\n","includes":["propertyHelper.js"],"features":["BigInt"]},{"path":"./test262-main/test/intl402/BigInt/prototype/toLocaleString/returns-same-results-as-NumberFormat.js","esid":" sec-bigint.prototype.tolocalestring","description":" >Tests that BigInt.prototype.toLocaleString produces the same\nresults as Intl.BigIntFormat.\n","features":["BigInt"]},{"path":"./test262-main/test/intl402/BigInt/prototype/toLocaleString/taint-Intl-NumberFormat.js","esid":" sec-bigint.prototype.tolocalestring","description":" >Tests that Number.prototype.toLocaleString uses the standard\nbuilt-in Intl.NumberFormat constructor.\n","includes":["testIntl.js"],"features":["BigInt"]},{"path":"./test262-main/test/intl402/BigInt/prototype/toLocaleString/this-value-invalid.js","esid":" sec-bigint.prototype.tolocalestring","description":" Tests that toLocaleString handles \"thisBigIntValue\" correctly.","features":["BigInt"]},{"path":"./test262-main/test/intl402/BigInt/prototype/toLocaleString/throws-same-exceptions-as-NumberFormat.js","esid":" sec-bigint.prototype.tolocalestring","description":" >Tests that BigInt.prototype.toLocaleString throws the same\nexceptions as Intl.NumberFormat.\n","features":["BigInt"]},{"path":"./test262-main/test/intl402/Collator/builtin.js","version":5,"esid":" 10.1_L15","description":" >Tests that Intl.Collator meets the requirements for built-in\nobjects defined by the introduction of chapter 17 of the\nECMAScript Language Specification.\n","author":" Norbert Lindenberg"},{"path":"./test262-main/test/intl402/Collator/constructor-options-throwing-getters.js","esid":" sec-initializecollator","description":" Checks the propagation of exceptions from the options for the Collator constructor."},{"path":"./test262-main/test/intl402/Collator/default-options-object-prototype.js","esid":" sec-initializecollator","description":" >Monkey-patching Object.prototype does not change the default\noptions for Collator as a null prototype is used.\n","info":" |InitializeCollator ( collator, locales, options )\n\n1. If _options_ is *undefined*, then\n1. Let _options_ be ObjectCreate(*null*).\n"},{"path":"./test262-main/test/intl402/Collator/ignore-invalid-unicode-ext-values.js","version":5,"esid":" 10.2.3_b","description":" >Tests that Intl.Collator does not accept Unicode localeextension\nkeys and values that are not allowed.\n","author":" Norbert Lindenberg","includes":["compareArray.js"]},{"path":"./test262-main/test/intl402/Collator/instance-proto-and-extensible.js","version":5,"esid":" 10.1.3","description":" >Tests that objects constructed by Intl.Collator have the specified\ninternal properties.\n","author":" Norbert Lindenberg"},{"path":"./test262-main/test/intl402/Collator/legacy-regexp-statics-not-modified.js","version":5,"esid":" 10.1.1_a","description":" >Tests that constructing a Collator doesn't create or modify\nunwanted properties on the RegExp constructor.\n","author":" Norbert Lindenberg","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/Collator/length.js","esid":" sec-intl.collator","description":" >Intl.Collator.length is 0.\n","info":" |Intl.Collator ( [ locales [ , options ] ] )\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery built-in function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description. Optional parameters\n(which are indicated with brackets: [ ]) or rest parameters (which\nare shown using the form «...name») are not included in the default\nargument count.\nUnless otherwise specified, the length property of a built-in function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n\n","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/Collator/missing-unicode-ext-value-defaults-to-true.js","version":5,"esid":" 9.2.5_11_g_ii_2","description":" >Tests that missing Unicode extension values default to true for\nboolean keys.\n","author":" Norbert Lindenberg"},{"path":"./test262-main/test/intl402/Collator/name.js","esid":" sec-Intl.Collator","description":" >Intl.Collator.name is \"Collator\".\n","info":" |10.1.2 Intl.Collator ([ locales [ , options ]])\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/Collator/numeric-and-caseFirst.js","version":5,"esid":" 10.1.1_19_c","description":" >Tests that the options numeric and caseFirst can beset through\neither the locale or the options.\n","author":" Norbert Lindenberg"},{"path":"./test262-main/test/intl402/Collator/prop-desc.js","esid":" sec-intl.collator-intro","description":" >\"Collator\" property of Intl.\n","info":" |Intl.Collator (...)\n\n7 Requirements for Standard Built-in ECMAScript Objects\n\nUnless specified otherwise in this document, the objects, functions, and constructors\ndescribed in this standard are subject to the generic requirements and restrictions\nspecified for standard built-in ECMAScript objects in the ECMAScript 2018 Language\nSpecification, 9th edition, clause 17, or successor.\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the\nattributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true }\nunless otherwise specified.\n\n","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/Collator/proto-from-ctor-realm.js","esid":" sec-intl.collator","description":" Default [[Prototype]] value derived from realm of the NewTarget.","info":" |Intl.Collator ( [ locales [ , options ] ] )\n\n1. If NewTarget is undefined, let newTarget be the active function object, else let newTarget be NewTarget.\n...\n5. Let collator be ? OrdinaryCreateFromConstructor(newTarget, \"%CollatorPrototype%\", internalSlotsList).\n6. Return ? InitializeCollator(collator, locales, options).\n\nOrdinaryCreateFromConstructor ( constructor, intrinsicDefaultProto [ , internalSlotsList ] )\n\n...\n2. Let proto be ? GetPrototypeFromConstructor(constructor, intrinsicDefaultProto).\n3. Return ObjectCreate(proto, internalSlotsList).\n\nGetPrototypeFromConstructor ( constructor, intrinsicDefaultProto )\n\n...\n3. Let proto be ? Get(constructor, 'prototype').\n4. If Type(proto) is not Object, then\na. Let realm be ? GetFunctionRealm(constructor).\nb. Set proto to realm's intrinsic object named intrinsicDefaultProto.\n5. Return proto.\n","features":["cross-realm","Reflect","Symbol"]},{"path":"./test262-main/test/intl402/Collator/prototype/builtin.js","version":5,"esid":" 10.3_L15","description":" >Tests that Intl.Collator.prototype meets the requirements for\nbuilt-in objects defined by the introduction of chapter 17 of the\nECMAScript Language Specification.\n","author":" Norbert Lindenberg"},{"path":"./test262-main/test/intl402/Collator/prototype/compare/bound-to-collator-instance.js","version":5,"esid":" 10.3.2_1_c","description":" Tests that compare function is bound to its Intl.Collator.","author":" Norbert Lindenberg","includes":["compareArray.js"]},{"path":"./test262-main/test/intl402/Collator/prototype/compare/builtin.js","version":5,"esid":" 10.3.2_L15","description":" >Tests that the getter for Intl.Collator.prototype.compare meets\nthe requirements for built-in objects defined by the introduction\nof chapter 17 of the ECMAScript Language Specification.\n","author":" Norbert Lindenberg","includes":["isConstructor.js"],"features":["Reflect.construct"]},{"path":"./test262-main/test/intl402/Collator/prototype/compare/canonically-equivalent-strings.js","version":5,"esid":" 10.3.2_CS_a","description":" >Tests that the function returned by\nIntl.Collator.prototype.comparereturns 0 when comparing Strings\nthat are considered canonically equivalentby the Unicode\nstandard.\n","author":" Norbert Lindenberg"},{"path":"./test262-main/test/intl402/Collator/prototype/compare/compare-function-builtin.js","version":5,"esid":" 10.3.2_1_a_L15","description":" >Tests that the function returned by\nIntl.Collator.prototype.compare meets the requirements for\nbuilt-in objects defined by the introduction of chapter 17 of the\nECMAScript Language Specification.\n","author":" Norbert Lindenberg","includes":["isConstructor.js"],"features":["Reflect.construct"]},{"path":"./test262-main/test/intl402/Collator/prototype/compare/compare-function-length.js","esid":" sec-intl.collator.prototype.compare","description":" >The length of the bound Collator compare function is 2.\n","info":" |get Intl.Collator.prototype.compare\n\n...\n4. If collator.[[BoundCompare]] is undefined, then\na. Let F be a new built-in function object as defined in 10.3.4.\nb. Let bc be BoundFunctionCreate(F, collator, « »).\nc. Perform ! DefinePropertyOrThrow(bc, \"length\", PropertyDescriptor {[[Value]]: 2,\n[[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true}).\n...\n\n","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/Collator/prototype/compare/compare-function-name.js","esid":" sec-Intl.Collator.prototype.compare","description":" >The bound Collator compare function is an anonymous function.\n","info":" |10.3.3 get Intl.Collator.prototype.compare\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in function object, including constructors, has a `name`\nproperty whose value is a String. Functions that are identified as\nanonymous functions use the empty string as the value of the `name`\nproperty.\nUnless otherwise specified, the `name` property of a built-in function\nobject has the attributes { [[Writable]]: *false*, [[Enumerable]]: *false*,\n[[Configurable]]: *true* }.\n","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/Collator/prototype/compare/compare-function-property-order.js","esid":" sec-createbuiltinfunction","description":" Collator bound compare function property order","info":" |Set order: \"length\", \"name\"\n","includes":["compareArray.js"]},{"path":"./test262-main/test/intl402/Collator/prototype/compare/length.js","esid":" sec-intl.collator.prototype.compare","description":" >get Intl.Collator.prototype.compare.length is 0.\n","info":" |get Intl.Collator.prototype.compare\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery built-in function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description. Optional parameters\n(which are indicated with brackets: [ ]) or rest parameters (which\nare shown using the form «...name») are not included in the default\nargument count.\nUnless otherwise specified, the length property of a built-in function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n\n","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/Collator/prototype/compare/name.js","esid":" sec-Intl.Collator.prototype.compare","description":" >get Intl.Collator.prototype.compare.name is \"get compare\".\n","info":" |10.3.3 get Intl.Collator.prototype.compare\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/Collator/prototype/compare/non-normative-basic.js","version":5,"esid":" 10.3.2_CS_b_NN","description":" >Tests that the compare function isn't entirely unreasonable.This\ntest is not normative.\n","author":" Norbert Lindenberg","includes":["compareArray.js"]},{"path":"./test262-main/test/intl402/Collator/prototype/compare/non-normative-phonebook.js","version":5,"esid":" 10.3.2_CS_c_NN","description":" >Tests that the compare function supports phonebook sorting if it\nsays it does.This test is not normative.\n","author":" Norbert Lindenberg","includes":["compareArray.js"]},{"path":"./test262-main/test/intl402/Collator/prototype/compare/non-normative-sensitivity.js","version":5,"esid":" 10.3.2_CS_d_NN","description":" >Tests that the compare function supports different sensitivity\nsettings.This test is not normative.\n","author":" Norbert Lindenberg","includes":["compareArray.js"]},{"path":"./test262-main/test/intl402/Collator/prototype/compare/prop-desc.js","esid":" sec-intl.collator.prototype.resolvedoptions","description":" >\"compare\" property of Intl.Collator.prototype.\n","info":" |get Intl.Collator.prototype.compare\n\n7 Requirements for Standard Built-in ECMAScript Objects\n\nUnless specified otherwise in this document, the objects, functions, and constructors\ndescribed in this standard are subject to the generic requirements and restrictions\nspecified for standard built-in ECMAScript objects in the ECMAScript 2018 Language\nSpecification, 9th edition, clause 17, or successor.\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery accessor property described in clauses 18 through 26 and in Annex B.2 has the\nattributes { [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\nIf only a get accessor function is described, the set accessor function is the default\nvalue, undefined. If only a set accessor is described the get accessor is the default\nvalue, undefined.\n\n","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/Collator/prototype/constructor/prop-desc.js","esid":" sec-intl.collator.prototype.constructor","description":" >\"constructor\" property of Intl.Collator.prototype.\n","info":" |Intl.Collator.prototype.constructor\n\n7 Requirements for Standard Built-in ECMAScript Objects\n\nUnless specified otherwise in this document, the objects, functions, and constructors\ndescribed in this standard are subject to the generic requirements and restrictions\nspecified for standard built-in ECMAScript objects in the ECMAScript 2018 Language\nSpecification, 9th edition, clause 17, or successor.\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the\nattributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true }\nunless otherwise specified.\n\n","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/Collator/prototype/constructor/value.js","version":5,"esid":" 10.3.1","description":" >Tests that Intl.Collator.prototype.constructor is the\nIntl.Collator.\n"},{"path":"./test262-main/test/intl402/Collator/prototype/prop-desc.js","version":5,"esid":" 10.2.1","description":" Tests that Intl.Collator.prototype has the required attributes.","author":" Norbert Lindenberg","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/Collator/prototype/resolvedOptions/basic.js","version":5,"esid":" 10.3.3","description":" >Tests that the object returned by\nIntl.Collator.prototype.resolvedOptionshas the right properties.\n","author":" Norbert Lindenberg","includes":["testIntl.js","propertyHelper.js"]},{"path":"./test262-main/test/intl402/Collator/prototype/resolvedOptions/builtin.js","version":5,"esid":" 10.3.3_L15","description":" >Tests that Intl.Collator.prototype.resolvedOptions meets the\nrequirements for built-in objects defined by the introduction of\nchapter 17 of the ECMAScript Language Specification.\n","author":" Norbert Lindenberg","includes":["isConstructor.js"],"features":["Reflect.construct"]},{"path":"./test262-main/test/intl402/Collator/prototype/resolvedOptions/length.js","esid":" sec-intl.collator.prototype.resolvedoptions","description":" >Intl.Collator.prototype.resolvedOptions.length is 0.\n","info":" |Intl.Collator.prototype.resolvedOptions ()\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery built-in function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description. Optional parameters\n(which are indicated with brackets: [ ]) or rest parameters (which\nare shown using the form «...name») are not included in the default\nargument count.\nUnless otherwise specified, the length property of a built-in function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n\n","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/Collator/prototype/resolvedOptions/name.js","esid":" sec-Intl.Collator.prototype.resolvedOptions","description":" >Intl.Collator.prototype.resolvedOptions.name is \"resolvedOptions\".\n","info":" |10.3.5 Intl.Collator.prototype.resolvedOptions ()\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/Collator/prototype/resolvedOptions/order.js","esid":" sec-intl.collator.prototype.resolvedoptions","description":" Verifies the property order for the object returned by resolvedOptions().","includes":["compareArray.js"]},{"path":"./test262-main/test/intl402/Collator/prototype/resolvedOptions/prop-desc.js","esid":" sec-intl.collator.prototype.resolvedoptions","description":" >\"resolvedOptions\" property of Intl.Collator.prototype.\n","info":" |Intl.Collator.prototype.resolvedOptions ()\n\n7 Requirements for Standard Built-in ECMAScript Objects\n\nUnless specified otherwise in this document, the objects, functions, and constructors\ndescribed in this standard are subject to the generic requirements and restrictions\nspecified for standard built-in ECMAScript objects in the ECMAScript 2018 Language\nSpecification, 9th edition, clause 17, or successor.\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the\nattributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true }\nunless otherwise specified.\n\n","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/Collator/prototype/this-value-collator-prototype.js","esid":" sec-properties-of-the-intl-collator-prototype-object","description":" >Tests that Intl.Collator.prototype is not an object that has been\ninitialized as an Intl.Collator.\n"},{"path":"./test262-main/test/intl402/Collator/prototype/this-value-not-collator.js","version":5,"esid":" 10.3_b","description":" >Tests that Intl.Collator.prototype functions throw aTypeError if\ncalled on a non-object value or an object that hasn't been\ninitialized as a Collator.\n","author":" Norbert Lindenberg"},{"path":"./test262-main/test/intl402/Collator/prototype/toStringTag/toString-changed-tag.js","esid":" sec-intl.collator.prototype-@@tostringtag","description":" >Object.prototype.toString utilizes Intl.Collator.prototype[@@toStringTag].\n","info":" |Object.prototype.toString ( )\n\n[...]\n14. Else, let builtinTag be \"Object\".\n15. Let tag be ? Get(O, @@toStringTag).\n16. If Type(tag) is not String, set tag to builtinTag.\n17. Return the string-concatenation of \"[object \", tag, and \"]\".\n\nIntl.Collator.prototype [ @@toStringTag ]\n\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n","features":["Symbol.toStringTag"]},{"path":"./test262-main/test/intl402/Collator/prototype/toStringTag/toString-removed-tag.js","esid":" sec-intl.collator.prototype-@@tostringtag","description":" >Object.prototype.toString doesn't special-case neither Intl.Collator instances nor its prototype.\n","info":" |Object.prototype.toString ( )\n\n[...]\n14. Else, let builtinTag be \"Object\".\n15. Let tag be ? Get(O, @@toStringTag).\n16. If Type(tag) is not String, set tag to builtinTag.\n17. Return the string-concatenation of \"[object \", tag, and \"]\".\n","features":["Symbol.toStringTag"]},{"path":"./test262-main/test/intl402/Collator/prototype/toStringTag/toString.js","esid":" sec-intl.collator.prototype-@@tostringtag","description":" >Object.prototype.toString utilizes Intl.Collator.prototype[@@toStringTag].\n","info":" |Object.prototype.toString ( )\n\n[...]\n14. Else, let builtinTag be \"Object\".\n15. Let tag be ? Get(O, @@toStringTag).\n16. If Type(tag) is not String, set tag to builtinTag.\n17. Return the string-concatenation of \"[object \", tag, and \"]\".\n\nIntl.Collator.prototype [ @@toStringTag ]\n\nThe initial value of the @@toStringTag property is the String value \"Intl.Collator\".\n","features":["Symbol.toStringTag"]},{"path":"./test262-main/test/intl402/Collator/prototype/toStringTag/toStringTag.js","esid":" sec-intl.collator.prototype-@@tostringtag","description":" >Property descriptor of Intl.Collator.prototype[@@toStringTag].\n","info":" |Intl.Collator.prototype [ @@toStringTag ]\n\nThe initial value of the @@toStringTag property is the String value \"Intl.Collator\".\n\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n","features":["Symbol.toStringTag"],"includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/Collator/subclassing.js","version":5,"esid":" 10.1.2_a","description":" Tests that Intl.Collator can be subclassed.","author":" Norbert Lindenberg","includes":["compareArray.js"]},{"path":"./test262-main/test/intl402/Collator/supportedLocalesOf/basic.js","version":5,"esid":" 10.2.2_a","description":" >Tests that Intl.Collator has a supportedLocalesOfproperty, and\nit works as planned.\n"},{"path":"./test262-main/test/intl402/Collator/supportedLocalesOf/builtin.js","version":5,"esid":" 10.2.2_L15","description":" >Tests that Intl.Collator.supportedLocalesOf meets the\nrequirements for built-in objects defined by the introduction of\nchapter 17 of the ECMAScript Language Specification.\n","author":" Norbert Lindenberg","includes":["isConstructor.js"],"features":["Reflect.construct"]},{"path":"./test262-main/test/intl402/Collator/supportedLocalesOf/length.js","esid":" sec-intl.collator.supportedlocalesof","description":" >Intl.Collator.supportedLocalesOf.length is 1.\n","info":" |Intl.Collator.supportedLocalesOf ( locales [ , options ] )\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery built-in function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description. Optional parameters\n(which are indicated with brackets: [ ]) or rest parameters (which\nare shown using the form «...name») are not included in the default\nargument count.\nUnless otherwise specified, the length property of a built-in function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n\n","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/Collator/supportedLocalesOf/name.js","esid":" sec-Intl.Collator.supportedLocalesOf","description":" >Intl.Collator.supportedLocalesOf.name is \"supportedLocalesOf\".\n","info":" |10.2.2 Intl.Collator.supportedLocalesOf (locales [ , options ])\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/Collator/supportedLocalesOf/prop-desc.js","esid":" sec-intl.collator.supportedlocalesof","description":" >\"supportedLocalesOf\" property of Intl.Collator.\n","info":" |Intl.Collator.supportedLocalesOf ( locales [ , options ] )\n\n7 Requirements for Standard Built-in ECMAScript Objects\n\nUnless specified otherwise in this document, the objects, functions, and constructors\ndescribed in this standard are subject to the generic requirements and restrictions\nspecified for standard built-in ECMAScript objects in the ECMAScript 2018 Language\nSpecification, 9th edition, clause 17, or successor.\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the\nattributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true }\nunless otherwise specified.\n\n","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/Collator/supportedLocalesOf/taint-Object-prototype.js","version":5,"esid":" 10.2.2_b","description":" >Tests that Intl.Collator.supportedLocalesOfdoesn't access\narguments that it's not given.\n","author":" Norbert Lindenberg","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/Collator/taint-Object-prototype.js","version":5,"esid":" 10.1.1_10","description":" >Tests that the behavior of a Record is not affected by\nadversarialchanges to Object.prototype.\n","author":" Norbert Lindenberg","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/Collator/test-option-ignorePunctuation.js","version":5,"esid":" 10.1.1_23","description":" Tests that the option ignorePunctuation is processed correctly.","author":" Norbert Lindenberg","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/Collator/test-option-localeMatcher.js","version":5,"esid":" 10.1.1_11","description":" Tests that the option localeMatcher is processed correctly.","author":" Norbert Lindenberg","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/Collator/test-option-numeric-and-caseFirst.js","version":5,"esid":" 10.1.1_13","description":" >Tests that the options numeric and caseFirst are processed\ncorrectly.\n","author":" Norbert Lindenberg","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/Collator/test-option-sensitivity.js","version":5,"esid":" 10.1.1_20","description":" Tests that the option sensitivity is processed correctly.","author":" Norbert Lindenberg","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/Collator/test-option-usage.js","version":5,"esid":" 10.1.1_6","description":" Tests that the option usage is processed correctly.","author":" Norbert Lindenberg","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/Collator/this-value-ignored.js","version":5,"esid":" 10.1.1_1","description":" Tests that the this-value is ignored in Collator.","author":" Norbert Lindenberg","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/Collator/unicode-ext-seq-in-private-tag.js","esid":" sec-initializecollator","description":" >Unicode extension sequence-like parts are ignored in private-use tags.\n","info":" |10.1.1 InitializeCollator ( collator, locales, options )\n...\n15. For each element key of relevantExtensionKeys in List order, do\na. If key is \"co\", then\ni. Let value be r.[[co]].\nii. If value is null, let value be \"default\".\niii. Set collator.[[Collation]] to value.\n...\n\n10.3.5 Intl.Collator.prototype.resolvedOptions ()\nThe function returns a new object whose properties and attributes are set as if constructed\nby an object literal assigning to each of the following properties the value of the\ncorresponding internal slot of this Collator object (see 10.4): ...\n"},{"path":"./test262-main/test/intl402/Collator/unicode-ext-seq-with-attribute.js","esid":" sec-initializecollator","description":" >Attributes in Unicode extension subtags should be ignored.\n","info":" |10.1.1 InitializeCollator ( collator, locales, options )\n...\n15. For each element key of relevantExtensionKeys in List order, do\na. If key is \"co\", then\ni. Let value be r.[[co]].\nii. If value is null, let value be \"default\".\niii. Set collator.[[Collation]] to value.\n...\n\n10.3.5 Intl.Collator.prototype.resolvedOptions ()\nThe function returns a new object whose properties and attributes are set as if constructed\nby an object literal assigning to each of the following properties the value of the\ncorresponding internal slot of this Collator object (see 10.4): ...\n"},{"path":"./test262-main/test/intl402/Collator/unicode-ext-value-collation.js","version":5,"esid":" 10.1.1_19_b","description":" Tests the special handling of the \"co\" key in Intl.Collator.","author":" Norbert Lindenberg"},{"path":"./test262-main/test/intl402/Collator/usage-de.js","esid":" sec-initializecollator","description":" Checks the behavior of search and sort in German.","includes":["compareArray.js"]},{"path":"./test262-main/test/intl402/Date/prototype/returns-same-results-as-DateTimeFormat.js","version":5,"esid":" 13.3.0_7","description":" >Tests that Date.prototype.toLocaleString & Co. produces the same\nresults as Intl.DateTimeFormat.\n","author":" Norbert Lindenberg","includes":["compareArray.js"]},{"path":"./test262-main/test/intl402/Date/prototype/taint-Intl-DateTimeFormat.js","version":5,"esid":" 13.3.0_6_2","description":" >Tests that Date.prototype.toLocaleString & Co. use the standard\nbuilt-in Intl.DateTimeFormat constructor.\n","author":" Norbert Lindenberg","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/Date/prototype/this-value-invalid-date.js","version":5,"esid":" 13.3.0_2","description":" >Tests that Date.prototype.toLocaleString & Co. handle non-finite\nvalues correctly.\n","author":" Norbert Lindenberg"},{"path":"./test262-main/test/intl402/Date/prototype/this-value-non-date.js","version":5,"esid":" 13.3.0_1","description":" >Tests that Date.prototype.toLocaleString & Co. handle \"this time\nvalue\" correctly.\n","author":" Norbert Lindenberg"},{"path":"./test262-main/test/intl402/Date/prototype/throws-same-exceptions-as-DateTimeFormat.js","version":5,"esid":" 13.3.0_6_1","description":" >Tests that Date.prototype.toLocaleString & Co. throws the same\nexceptions as Intl.DateTimeFormat.\n","author":" Norbert Lindenberg"},{"path":"./test262-main/test/intl402/Date/prototype/toLocaleDateString/builtin.js","version":5,"esid":" 13.3.2_L15","description":" >Tests that Date.prototype.toLocaleDateString meets the\nrequirements for built-in objects defined by the introduction of\nchapter 17 of the ECMAScript Language Specification.\n","author":" Norbert Lindenberg","includes":["isConstructor.js"],"features":["Reflect.construct"]},{"path":"./test262-main/test/intl402/Date/prototype/toLocaleDateString/length.js","esid":" sup-date.prototype.tolocaledatestring","description":" >Date.prototype.toLocaleDateString.length is 0.\n","info":" |Date.prototype.toLocaleDateString ( [ locales [ , options ] ] )\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery built-in function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description. Optional parameters\n(which are indicated with brackets: [ ]) or rest parameters (which\nare shown using the form «...name») are not included in the default\nargument count.\nUnless otherwise specified, the length property of a built-in function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n\n","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/Date/prototype/toLocaleString/builtin.js","version":5,"esid":" 13.3.1_L15","description":" >Tests that Date.prototype.toLocaleString meets the requirements\nfor built-in objects defined by the introduction of chapter 17 of\nthe ECMAScript Language Specification.\n","author":" Norbert Lindenberg","includes":["isConstructor.js"],"features":["Reflect.construct"]},{"path":"./test262-main/test/intl402/Date/prototype/toLocaleString/default-options-object-prototype.js","esid":" sec-todatetimeoptions","description":" >Monkey-patching Object.prototype does not change the default\noptions for DateTimeFormat as a null prototype is used.\n","info":" |ToDateTimeOptions ( options, required, defaults )\n\n1. If options is undefined, let options be null; otherwise let options be ? ToObject(options).\n1. Let options be ObjectCreate(options).\n"},{"path":"./test262-main/test/intl402/Date/prototype/toLocaleString/length.js","esid":" sup-date.prototype.tolocalestring","description":" >Date.prototype.toLocaleString.length is 0.\n","info":" |Date.prototype.toLocaleString ( [ locales [ , options ] ] )\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery built-in function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description. Optional parameters\n(which are indicated with brackets: [ ]) or rest parameters (which\nare shown using the form «...name») are not included in the default\nargument count.\nUnless otherwise specified, the length property of a built-in function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n\n","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/Date/prototype/toLocaleTimeString/builtin.js","version":5,"esid":" 13.3.3_L15","description":" >Tests that Date.prototype.toLocaleTimeString meets the\nrequirements for built-in objects defined by the introduction of\nchapter 17 of the ECMAScript Language Specification.\n","author":" Norbert Lindenberg","includes":["isConstructor.js"],"features":["Reflect.construct"]},{"path":"./test262-main/test/intl402/Date/prototype/toLocaleTimeString/length.js","esid":" sup-date.prototype.tolocaletimestring","description":" >Date.prototype.toLocaleTimeString.length is 0.\n","info":" |Date.prototype.toLocaleTimeString ( [ locales [ , options ] ] )\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery built-in function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description. Optional parameters\n(which are indicated with brackets: [ ]) or rest parameters (which\nare shown using the form «...name») are not included in the default\nargument count.\nUnless otherwise specified, the length property of a built-in function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n\n","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/DateTimeFormat/builtin.js","version":5,"esid":" 12.1_L15","description":" >Tests that Intl.DateTimeFormat meets the requirements for\nbuilt-in objects defined by the introduction of chapter 17 of the\nECMAScript Language Specification.\n","author":" Norbert Lindenberg"},{"path":"./test262-main/test/intl402/DateTimeFormat/casing-numbering-system-calendar-options.js","esid":" sec-initializedatetimeformat","description":" >Tests that the options numberingSystem and calendar are mapped\nto lower case properly.\n","author":" Caio Lima"},{"path":"./test262-main/test/intl402/DateTimeFormat/constructor-calendar-numberingSystem-order.js","esid":" sec-initializedatetimeformat","description":" >Checks the order of getting \"calendar\" and \"numberingSystem\" options in the\nDateTimeFormat is between \"localeMatcher\" and \"hour12\" options.\n","info":" |4. Let _matcher_ be ? GetOption(_options_, `\"localeMatcher\"`, `\"string\"`, &laquo; `\"lookup\"`, `\"best fit\"` &raquo;, `\"best fit\"`).\n...\n6. Let _calendar_ be ? GetOption(_options_, `\"calendar\"`, `\"string\"`, *undefined*, *undefined*).\n...\n9. Let _numberingSystem_ be ? GetOption(_options_, `\"numberingSystem\"`, `\"string\"`, *undefined*, *undefined*).\n...\n12. Let _hour12_ be ? GetOption(_options_, `\"hour12\"`, `\"boolean\"`, *undefined*, *undefined*).\n","includes":["compareArray.js"]},{"path":"./test262-main/test/intl402/DateTimeFormat/constructor-default-value.js","esid":" sec-initializedatetimeformat","description":" >Tests that the constructor for Intl.DateTimeFormat uses appropriate default\nvalues for its arguments (locales and options).\n"},{"path":"./test262-main/test/intl402/DateTimeFormat/constructor-no-instanceof.js","esid":" sec-Intl.DateTimeFormat.prototype.resolvedOptions","description":" >Tests that Intl.DateTimeFormat.prototype.resolvedOptions calls\nOrdinaryHasInstance instead of the instanceof operator which includes a\nSymbol.hasInstance lookup and call among other things.\n"},{"path":"./test262-main/test/intl402/DateTimeFormat/constructor-options-calendar-invalid.js","esid":" sec-initializedatetimeformat","description":" >Checks error cases for the options argument to the DateTimeFormat constructor.\n","info":" |InitializeDateTimeFormat ( dateTimeFormat, locales, options )\n\n...\n7. If calendar is not undefined, then\na. If calendar does not match the Unicode Locale Identifier type nonterminal, throw a RangeError exception.\n"},{"path":"./test262-main/test/intl402/DateTimeFormat/constructor-options-dateStyle-invalid.js","esid":" sec-initializedatetimeformat","description":" >Checks error cases for the options argument to the DateTimeFormat constructor.\n","info":" |InitializeDateTimeFormat ( dateTimeFormat, locales, options )\n\n...\n28. Let dateStyle be ? GetOption(options, \"dateStyle\", \"string\", « \"full\", \"long\", \"medium\", \"short\" », undefined).\n","features":["Intl.DateTimeFormat-datetimestyle"]},{"path":"./test262-main/test/intl402/DateTimeFormat/constructor-options-dateStyle-valid.js","esid":" sec-initializedatetimeformat","description":" >Checks handling of the options argument to the DateTimeFormat constructor.\n","info":" |InitializeDateTimeFormat ( dateTimeFormat, locales, options )\n\n...\n28. Let dateStyle be ? GetOption(options, \"dateStyle\", \"string\", « \"full\", \"long\", \"medium\", \"short\" », undefined).\n29. If dateStyle is not undefined, set dateTimeFormat.[[DateStyle]] to dateStyle.\n","features":["Intl.DateTimeFormat-datetimestyle"]},{"path":"./test262-main/test/intl402/DateTimeFormat/constructor-options-dayPeriod-invalid.js","esid":" sec-initializedatetimeformat","description":" >Checks error cases for the options argument to the DateTimeFormat constructor.\n","info":" |[[DayPeriod]]`\"dayPeriod\"``\"narrow\"`, `\"short\"`, `\"long\"`\nInitializeDateTimeFormat ( dateTimeFormat, locales, options )\n\n...\n","features":["Intl.DateTimeFormat-dayPeriod"]},{"path":"./test262-main/test/intl402/DateTimeFormat/constructor-options-dayPeriod-valid.js","esid":" sec-initializedatetimeformat","description":" >Checks handling of the options argument to the DateTimeFormat constructor.\n","info":" |[[DayPeriod]]`\"dayPeriod\"``\"narrow\"`, `\"short\"`, `\"long\"`\nInitializeDateTimeFormat ( dateTimeFormat, locales, options )\n\n...\n","features":["Intl.DateTimeFormat-dayPeriod"]},{"path":"./test262-main/test/intl402/DateTimeFormat/constructor-options-fractionalSecondDigits-invalid.js","esid":" sec-initializedatetimeformat","description":" >Checks error cases for the options argument to the DateTimeFormat constructor.\n","info":" |InitializeDateTimeFormat ( dateTimeFormat, locales, options )\n23. Let _opt_.[[FractionalSecondDigits]] be ? GetNumberOption(_options_, `\"fractionalSecondDigits\"`, 0, 3, 0).\n\n...\n","features":["Intl.DateTimeFormat-fractionalSecondDigits"]},{"path":"./test262-main/test/intl402/DateTimeFormat/constructor-options-fractionalSecondDigits-valid.js","esid":" sec-initializedatetimeformat","description":" >Checks handling of the options argument to the DateTimeFormat constructor.\n","info":" |InitializeDateTimeFormat ( dateTimeFormat, locales, options )\n23. Let _opt_.[[FractionalSecondDigits]] be ? GetNumberOption(_options_, `\"fractionalSecondDigits\"`, 0, 3, 0).\n","features":["Intl.DateTimeFormat-fractionalSecondDigits"]},{"path":"./test262-main/test/intl402/DateTimeFormat/constructor-options-numberingSystem-invalid.js","esid":" sec-initializedatetimeformat","description":" >Checks error cases for the options argument to the DateTimeFormat constructor.\n","info":" |InitializeDateTimeFormat ( dateTimeFormat, locales, options )\n\n...\n10. If numberingSystem is not undefined, then\na. If numberingSystem does not match the Unicode Locale Identifier type nonterminal, throw a RangeError exception.\n"},{"path":"./test262-main/test/intl402/DateTimeFormat/constructor-options-order-dayPeriod.js","esid":" sec-initializedatetimeformat","description":" Checks the order of getting options of 'dayPeriod' for the DateTimeFormat constructor.","info":" |ToDateTimeOptions ( options, required, defaults )\n4. If required is \"date\" or \"any\", then\na. For each of the property names \"weekday\", \"year\", \"month\", \"day\", \"dayPeriod\" do\n5. If required is \"time\" or \"any\", then\na. For each of the property names \"hour\", \"minute\", \"second\", do\n","includes":["compareArray.js"],"features":["Intl.DateTimeFormat-dayPeriod"]},{"path":"./test262-main/test/intl402/DateTimeFormat/constructor-options-order-fractionalSecondDigits.js","esid":" sec-initializedatetimeformat","description":" Checks the order of getting options of 'fractionalSecondDigits' for the DateTimeFormat constructor.","info":" |ToDateTimeOptions ( options, required, defaults )\n5. If required is \"time\" or \"any\", then\na. For each of the property names \"hour\", \"minute\", \"second\", \"fractionalSecondDigits\", do\n\nInitializeDateTimeFormat ( dateTimeFormat, locales, options )\n2. Let options be ? ToDateTimeOptions(options, \"any\", \"date\").\n4. Let matcher be ? GetOption(options, \"localeMatcher\", \"string\", «\"lookup\", \"best fit\" », \"best fit\").\n22. For each row of Table 5, except the header row, do\na. Let value be ? GetOption(options, prop, \"string\", « the strings given in the Values column of the row », undefined).\n23. Let _opt_.[[FractionalSecondDigits]] be ? GetNumberOption(_options_, `\"fractionalSecondDigits\"`, 0, 3, 0).\n26. Let matcher be ? GetOption(options, \"formatMatcher\", \"string\", «\"basic\", \"best fit\" », \"best fit\").\n","includes":["compareArray.js"],"features":["Intl.DateTimeFormat-fractionalSecondDigits"]},{"path":"./test262-main/test/intl402/DateTimeFormat/constructor-options-order-timedate-style.js","esid":" sec-initializedatetimeformat","description":" Checks the order of getting options for the DateTimeFormat constructor.","includes":["compareArray.js"],"features":["Intl.DateTimeFormat-datetimestyle"]},{"path":"./test262-main/test/intl402/DateTimeFormat/constructor-options-order.js","esid":" sec-initializedatetimeformat","description":" Checks the order of getting options for the DateTimeFormat constructor.","includes":["compareArray.js"]},{"path":"./test262-main/test/intl402/DateTimeFormat/constructor-options-throwing-getters-dayPeriod.js","esid":" sec-initializedatetimeformat","description":" Checks the propagation of exceptions from the options for the DateTimeFormat constructor.","features":["Intl.DateTimeFormat-dayPeriod"]},{"path":"./test262-main/test/intl402/DateTimeFormat/constructor-options-throwing-getters-fractionalSecondDigits.js","esid":" sec-initializedatetimeformat","description":" Checks the propagation of exceptions from the options for the DateTimeFormat constructor.","features":["Intl.DateTimeFormat-fractionalSecondDigits"]},{"path":"./test262-main/test/intl402/DateTimeFormat/constructor-options-throwing-getters-timedate-style.js","esid":" sec-initializedatetimeformat","description":" Checks the propagation of exceptions from the options for the DateTimeFormat constructor.","features":["Intl.DateTimeFormat-datetimestyle"]},{"path":"./test262-main/test/intl402/DateTimeFormat/constructor-options-throwing-getters.js","esid":" sec-initializedatetimeformat","description":" Checks the propagation of exceptions from the options for the DateTimeFormat constructor."},{"path":"./test262-main/test/intl402/DateTimeFormat/constructor-options-timeStyle-invalid.js","esid":" sec-initializedatetimeformat","description":" >Checks error cases for the options argument to the DateTimeFormat constructor.\n","info":" |InitializeDateTimeFormat ( dateTimeFormat, locales, options )\n\n...\n30. Let timeStyle be ? GetOption(options, \"timeStyle\", \"string\", « \"full\", \"long\", \"medium\", \"short\" », undefined).\n","features":["Intl.DateTimeFormat-datetimestyle"]},{"path":"./test262-main/test/intl402/DateTimeFormat/constructor-options-timeStyle-valid.js","esid":" sec-initializedatetimeformat","description":" >Checks handling of the options argument to the DateTimeFormat constructor.\n","info":" |InitializeDateTimeFormat ( dateTimeFormat, locales, options )\n\n...\n30. Let timeStyle be ? GetOption(options, \"timeStyle\", \"string\", « \"full\", \"long\", \"medium\", \"short\" », undefined).\n31. If timeStyle is not undefined, set dateTimeFormat.[[TimeStyle]] to timeStyle.\n","features":["Intl.DateTimeFormat-datetimestyle"]},{"path":"./test262-main/test/intl402/DateTimeFormat/constructor-options-toobject.js","esid":" sec-initializedatetimeformat","description":" >Tests that Intl.DateTimeFormat contructor converts the options argument\nto an object using `ToObject` (7.1.13).\n","info":" |12.1.2 ToDateTimeOptions\n\n1. If options is undefined, let options be null; otherwise let options be ?\nToObject(options).\n"},{"path":"./test262-main/test/intl402/DateTimeFormat/date-time-options.js","version":5,"esid":" 12.1.1_TDTO","description":" >Tests that the set of options for the date and time components is\nprocessed correctly.\n","author":" Norbert Lindenberg","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/DateTimeFormat/default-options-object-prototype.js","esid":" sec-todatetimeoptions","description":" >Monkey-patching Object.prototype does not change the default\noptions for DateTimeFormat as a null prototype is used.\n","info":" |ToDateTimeOptions ( options, required, defaults )\n\n1. If options is undefined, let options be null; otherwise let options be ? ToObject(options).\n1. Let options be ObjectCreate(options).\n"},{"path":"./test262-main/test/intl402/DateTimeFormat/ignore-invalid-unicode-ext-values.js","version":5,"esid":" 12.2.3_b","description":" >Tests that Intl.DateTimeFormat does not accept Unicode locale\nextension keys and values that are not allowed.\n","author":" Norbert Lindenberg"},{"path":"./test262-main/test/intl402/DateTimeFormat/instance-proto-and-extensible.js","version":5,"esid":" 12.1.3","description":" >Tests that objects constructed by Intl.DateTimeFormat have the\nspecified internal properties.\n","author":" Norbert Lindenberg"},{"path":"./test262-main/test/intl402/DateTimeFormat/intl-legacy-constructed-symbol-on-unwrap.js","esid":" sec-unwrapdatetimeformat","description":" >Tests that [[FallbackSymbol]]'s [[Description]] is \"IntlLegacyConstructedSymbol\" if normative optional is implemented.\n","author":" Yusuke Suzuki","features":["intl-normative-optional"]},{"path":"./test262-main/test/intl402/DateTimeFormat/intl-legacy-constructed-symbol.js","esid":" sec-intl.datetimeformat","description":" >Tests that [[FallbackSymbol]]'s [[Description]] is \"IntlLegacyConstructedSymbol\" if normative optional is implemented.\n","author":" Yusuke Suzuki","features":["intl-normative-optional"]},{"path":"./test262-main/test/intl402/DateTimeFormat/legacy-regexp-statics-not-modified.js","version":5,"esid":" 12.1.1_a","description":" >Tests that constructing a DateTimeFormat doesn't create or modify\nunwanted properties on the RegExp constructor.\n","author":" Norbert Lindenberg","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/DateTimeFormat/length.js","esid":" sec-intl.datetimeformat","description":" >Intl.DateTimeFormat.length is 0.\n","info":" |Intl.DateTimeFormat ( [ locales [ , options ] ] )\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery built-in function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description. Optional parameters\n(which are indicated with brackets: [ ]) or rest parameters (which\nare shown using the form «...name») are not included in the default\nargument count.\nUnless otherwise specified, the length property of a built-in function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n\n","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/DateTimeFormat/name.js","esid":" sec-Intl.DateTimeFormat","description":" >Intl.DateTimeFormat.name is \"DateTimeFormat\".\n","info":" |12.2.1 Intl.DateTimeFormat ([ locales [ , options ]])\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/DateTimeFormat/numbering-system-calendar-options.js","esid":" sec-initializedatetimeformat","description":" >Tests that the options numberingSystem and calendar can beset through\neither the locale or the options.\n","author":" Norbert Lindenberg, Daniel Ehrenberg"},{"path":"./test262-main/test/intl402/DateTimeFormat/prop-desc.js","esid":" sec-intl.datetimeformat-intro","description":" >\"DateTimeFormat\" property of Intl.\n","info":" |Intl.DateTimeFormat (...)\n\n7 Requirements for Standard Built-in ECMAScript Objects\n\nUnless specified otherwise in this document, the objects, functions, and constructors\ndescribed in this standard are subject to the generic requirements and restrictions\nspecified for standard built-in ECMAScript objects in the ECMAScript 2018 Language\nSpecification, 9th edition, clause 17, or successor.\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the\nattributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true }\nunless otherwise specified.\n\n","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/DateTimeFormat/proto-from-ctor-realm.js","esid":" sec-intl.datetimeformat","description":" Default [[Prototype]] value derived from realm of the NewTarget.","info":" |Intl.DateTimeFormat ( [ locales [ , options ] ] )\n\n1. If NewTarget is undefined, let newTarget be the active function object, else let newTarget be NewTarget.\n2. Let dateTimeFormat be ? OrdinaryCreateFromConstructor(newTarget, \"%DateTimeFormatPrototype%\", « ... »).\n...\n6. Return dateTimeFormat.\n\nOrdinaryCreateFromConstructor ( constructor, intrinsicDefaultProto [ , internalSlotsList ] )\n\n...\n2. Let proto be ? GetPrototypeFromConstructor(constructor, intrinsicDefaultProto).\n3. Return ObjectCreate(proto, internalSlotsList).\n\nGetPrototypeFromConstructor ( constructor, intrinsicDefaultProto )\n\n...\n3. Let proto be ? Get(constructor, 'prototype').\n4. If Type(proto) is not Object, then\na. Let realm be ? GetFunctionRealm(constructor).\nb. Set proto to realm's intrinsic object named intrinsicDefaultProto.\n5. Return proto.\n","features":["cross-realm","Reflect","Symbol"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/builtin.js","version":5,"esid":" 12.3_L15","description":" >Tests that Intl.DateTimeFormat.prototype meets the requirements\nfor built-in objects defined by the introduction of chapter 17 of\nthe ECMAScript Language Specification.\n","author":" Norbert Lindenberg"},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/constructor/prop-desc.js","esid":" sec-intl.datetimeformat.prototype.constructor","description":" >\"constructor\" property of Intl.DateTimeFormat.prototype.\n","info":" |Intl.DateTimeFormat.prototype.constructor\n\n7 Requirements for Standard Built-in ECMAScript Objects\n\nUnless specified otherwise in this document, the objects, functions, and constructors\ndescribed in this standard are subject to the generic requirements and restrictions\nspecified for standard built-in ECMAScript objects in the ECMAScript 2018 Language\nSpecification, 9th edition, clause 17, or successor.\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the\nattributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true }\nunless otherwise specified.\n\n","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/constructor/value.js","version":5,"esid":" 12.3.1","description":" >Tests that Intl.DateTimeFormat.prototype.constructor is the\nIntl.DateTimeFormat.\n","author":" Roozbeh Pournader"},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/format/bound-to-datetimeformat-instance.js","version":5,"esid":" 12.3.2_1_c","description":" Tests that format function is bound to its Intl.DateTimeFormat.","author":" Norbert Lindenberg"},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/format/builtin.js","version":5,"esid":" 12.3.2_L15","description":" >Tests that the getter for Intl.DateTimeFormat.prototype.format\nmeets the requirements for built-in objects defined by the\nintroduction of chapter 17 of the ECMAScript Language\nSpecification.\n","author":" Norbert Lindenberg","includes":["isConstructor.js"],"features":["Reflect.construct"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/format/date-constructor-not-called.js","esid":" sec-partitiondatetimepattern","description":" |The Date constructor is not called to convert the input value.\n","info":" >12.1.5 DateTime Format Functions\n\n...\n3. If date is not provided or is undefined, then\n...\n4. Else,\na. Let x be ? ToNumber(date).\n5. Return FormatDateTime(dtf, x).\n\n12.1.6 PartitionDateTimePattern ( dateTimeFormat, x )\n\n1. Let x be TimeClip(x).\n2. If x is NaN, throw a RangeError exception.\n3. ...\n"},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/format/dayPeriod-long-en.js","esid":" sec-initializedatetimeformat","description":" Checks basic handling of dayPeriod, long format.","features":["Intl.DateTimeFormat-dayPeriod"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/format/dayPeriod-narrow-en.js","esid":" sec-initializedatetimeformat","description":" Checks basic handling of dayPeriod, narrow format.","features":["Intl.DateTimeFormat-dayPeriod"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/format/dayPeriod-short-en.js","esid":" sec-initializedatetimeformat","description":" Checks basic handling of dayPeriod, short format.","features":["Intl.DateTimeFormat-dayPeriod"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/format/format-function-builtin.js","version":5,"esid":" 12.3.2_1_a_L15","description":" >Tests that the function returned by\nIntl.DateTimeFormat.prototype.format meets the requirements for\nbuilt-in objects defined by the introduction of chapter 17 of the\nECMAScript Language Specification.\n","author":" Norbert Lindenberg","includes":["isConstructor.js"],"features":["Reflect.construct"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/format/format-function-length.js","esid":" sec-intl.datetimeformat.prototype.format","description":" >The length of the bound DateTime Format function is 1.\n","info":" |get Intl.DateTimeFormat.prototype.format\n\n...\n4. If dtf.[[BoundFormat]] is undefined, then\na. Let F be a new built-in function object as defined in DateTime Format Functions (12.1.5).\nb. Let bf be BoundFunctionCreate(F, dft, « »).\nc. Perform ! DefinePropertyOrThrow(bf, \"length\", PropertyDescriptor {[[Value]]: 1,\n[[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true}).\n...\n\n","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/format/format-function-name.js","esid":" sec-Intl.DateTimeFormat.prototype.format","description":" >The bound DateTimeFormat format function is an anonymous function.\n","info":" |12.4.3 get Intl.DateTimeFormat.prototype.compare\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in function object, including constructors, has a `name`\nproperty whose value is a String. Functions that are identified as\nanonymous functions use the empty string as the value of the `name`\nproperty.\nUnless otherwise specified, the `name` property of a built-in function\nobject has the attributes { [[Writable]]: *false*, [[Enumerable]]: *false*,\n[[Configurable]]: *true* }.\n","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/format/format-function-property-order.js","esid":" sec-createbuiltinfunction","description":" DateTimeFormat bound format function property order","info":" |Set order: \"length\", \"name\"\n","includes":["compareArray.js"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/format/fractionalSecondDigits.js","esid":" sec-initializedatetimeformat","description":" Checks basic handling of fractionalSecondDigits.","features":["Intl.DateTimeFormat-fractionalSecondDigits"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/format/length.js","esid":" sec-intl.datetimeformat.prototype.format","description":" >get Intl.DateTimeFormat.prototype.format.length is 0.\n","info":" |get Intl.DateTimeFormat.prototype.format\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery built-in function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description. Optional parameters\n(which are indicated with brackets: [ ]) or rest parameters (which\nare shown using the form «...name») are not included in the default\nargument count.\nUnless otherwise specified, the length property of a built-in function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n\n","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/format/name.js","esid":" sec-Intl.DateTimeFormat.prototype.format","description":" >get Intl.DateTimeFormat.prototype.format.name is \"get format\".\n","info":" |12.4.3 get Intl.DateTimeFormat.prototype.format\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/format/no-instanceof.js","esid":" sec-Intl.DateTimeFormat.prototype.resolvedOptions","description":" >Tests that Intl.DateTimeFormat.prototype.resolvedOptions calls\nOrdinaryHasInstance instead of the instanceof operator which includes a\nSymbol.hasInstance lookup and call among other things.\n"},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/format/proleptic-gregorian-calendar.js","version":5,"esid":" 12.3.2_FDT_7_a_iv","description":" >Tests that format uses a proleptic Gregorian calendar with no year\n0.\n","author":" Norbert Lindenberg"},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/format/prop-desc.js","esid":" sec-intl.datetimeformat.prototype.format","description":" >\"format\" property of Intl.DateTimeFormat.prototype.\n","info":" |get Intl.DateTimeFormat.prototype.format\n\n7 Requirements for Standard Built-in ECMAScript Objects\n\nUnless specified otherwise in this document, the objects, functions, and constructors\ndescribed in this standard are subject to the generic requirements and restrictions\nspecified for standard built-in ECMAScript objects in the ECMAScript 2018 Language\nSpecification, 9th edition, clause 17, or successor.\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery accessor property described in clauses 18 through 26 and in Annex B.2 has the\nattributes { [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\nIf only a get accessor function is described, the set accessor function is the default\nvalue, undefined. If only a set accessor is described the get accessor is the default\nvalue, undefined.\n\n","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/format/related-year-zh.js","esid":" sec-partitiondatetimepattern","description":" >Checks the output of 'relatedYear' and 'yearName' type, and\nthe choice of pattern based on calendar.\n"},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/format/taint-Object-prototype.js","version":5,"esid":" 12.3.2_TLT_2","description":" >Tests that the behavior of a Record is not affected by\nadversarialchanges to Object.prototype.\n","author":" Norbert Lindenberg","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/format/throws-value-non-finite.js","version":5,"esid":" 12.3.2_FDT_1","description":" Tests that format handles non-finite values correctly.","author":" Norbert Lindenberg"},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/format/time-clip-near-time-boundaries.js","esid":" sec-partitiondatetimepattern","description":" |TimeClip is applied when calling Intl.DateTimeFormat.prototype.format.\n","info":" >12.1.6 PartitionDateTimePattern ( dateTimeFormat, x )\n\n1. Let x be TimeClip(x).\n2. If x is NaN, throw a RangeError exception.\n3. ...\n\n20.3.1.15 TimeClip ( time )\n...\n2. If abs(time) > 8.64 × 10^15, return NaN.\n...\n\n","includes":["dateConstants.js"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/format/time-clip-to-integer.js","esid":" sec-partitiondatetimepattern","description":" |TimeClip applies ToInteger on its input value.\n","info":" >12.1.6 PartitionDateTimePattern ( dateTimeFormat, x )\n\n1. Let x be TimeClip(x).\n2. ...\n\n20.3.1.15 TimeClip ( time )\n...\n3. Let clippedTime be ! ToInteger(time).\n4. If clippedTime is -0, set clippedTime to +0.\n5. Return clippedTime.\n"},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/format/timedatestyle-en.js","esid":" sec-date-time-style-pattern","description":" Checks basic handling of timeStyle and dateStyle.","features":["Intl.DateTimeFormat-datetimestyle"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/formatRange/argument-date-string.js","esid":" sec-partitiondatetimerangepattern","description":" >The Date constructor is not called to convert the input value.\n","info":" |Intl.DateTimeFormat.prototype.formatRange ( startDate , endDate )\n\n5. Let x be ? ToNumber(startDate).\n6. Let y be ? ToNumber(endDate).\n8. Return ? FormatDateTimeRange(dtf, x, y).\n\nPartitionDateTimeRangePattern ( dateTimeFormat, x, y )\n\n1. Let x be TimeClip(x).\n2. If x is NaN, throw a RangeError exception.\n3. Let y be TimeClip(y).\n4. If y is NaN, throw a RangeError exception.\n","features":["Intl.DateTimeFormat-formatRange"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/formatRange/argument-near-time-boundaries.js","esid":" sec-partitiondatetimerangepattern","description":" >TimeClip is applied when calling Intl.DateTimeFormat.prototype.formatRange.\n","info":" |PartitionDateTimeRangePattern ( dateTimeFormat, x, y )\n\n1. Let x be TimeClip(x).\n2. If x is NaN, throw a RangeError exception.\n3. Let y be TimeClip(y).\n4. If y is NaN, throw a RangeError exception.\n\nTimeClip ( time )\n...\n2. If abs(time) > 8.64 × 10^15, return NaN.\n...\n\n","includes":["dateConstants.js"],"features":["Intl.DateTimeFormat-formatRange"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/formatRange/argument-to-integer.js","esid":" sec-partitiondatetimerangepattern","description":" >TimeClip applies ToInteger on its input value.\n","info":" |Intl.DateTimeFormat.prototype.formatRange ( startDate , endDate )\n\n5. Let x be ? ToNumber(startDate).\n6. Let y be ? ToNumber(endDate).\n\nTimeClip ( time )\n...\n3. Let clippedTime be ! ToInteger(time).\n4. If clippedTime is -0, set clippedTime to +0.\n5. Return clippedTime.\n","features":["Intl.DateTimeFormat-formatRange"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/formatRange/argument-tonumber-throws.js","description":" >Return abrupt completions from ToNumber(date)\n","info":" |Intl.DateTimeFormat.prototype.formatRange ( startDate , endDate )\n\n5. Let x be ? ToNumber(startDate).\n6. Let y be ? ToNumber(endDate).\n","features":["Symbol,Intl.DateTimeFormat-formatRange"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/formatRange/builtin.js","esid":" sec-ecmascript-standard-built-in-objects","description":" >Tests that the Intl.DateTimeFormat.prototype.formatRange function meets the\nrequirements for built-in objects defined by the ECMAScript Language\nSpecification.\n","includes":["isConstructor.js"],"features":["Reflect.construct,Intl.DateTimeFormat-formatRange"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/formatRange/date-is-infinity-throws.js","description":" >Throws a RangeError if date arg is cast to an Infinity value\n","info":" |Intl.DateTimeFormat.prototype.formatRange ( startDate , endDate )\n\n1. Let dtf be this value.\n2. If Type(dtf) is not Object, throw a TypeError exception.\n3. If dtf does not have an [[InitializedDateTimeFormat]] internal slot, throw a TypeError exception.\n4. If startDate is undefined or endDate is undefined, throw a RangeError exception.\n5. Let x be ? ToNumber(startDate).\n6. Let y be ? ToNumber(endDate).\n7. If x is greater than y, throw a RangeError exception.\n8. Return ? FormatDateTimeRange(dtf, x, y).\n\nFormatDateTimeRange ( dateTimeFormat, x, y )\n\n1. Let parts be ? PartitionDateTimeRangePattern(dateTimeFormat, x, y).\n\nPartitionDateTimeRangePattern ( dateTimeFormat, x, y )\n\n1. Let x be TimeClip(x).\n2. If x is NaN, throw a RangeError exception.\n3. Let y be TimeClip(y).\n4. If y is NaN, throw a RangeError exception.\n\nTimeClip ( time )\n1. If time is not finite, return NaN.\n\n","features":["Intl.DateTimeFormat-formatRange"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/formatRange/date-is-nan-throws.js","description":" >Throws a RangeError if date arg is cast to NaN\n","info":" |Intl.DateTimeFormat.prototype.formatRange ( startDate , endDate )\n\n1. Let dtf be this value.\n2. If Type(dtf) is not Object, throw a TypeError exception.\n3. If dtf does not have an [[InitializedDateTimeFormat]] internal slot, throw a TypeError exception.\n4. If startDate is undefined or endDate is undefined, throw a RangeError exception.\n5. Let x be ? ToNumber(startDate).\n6. Let y be ? ToNumber(endDate).\n7. If x is greater than y, throw a RangeError exception.\n8. Return ? FormatDateTimeRange(dtf, x, y).\n\nFormatDateTimeRange ( dateTimeFormat, x, y )\n\n1. Let parts be ? PartitionDateTimeRangePattern(dateTimeFormat, x, y).\n\nPartitionDateTimeRangePattern ( dateTimeFormat, x, y )\n\n1. Let x be TimeClip(x).\n2. If x is NaN, throw a RangeError exception.\n3. Let y be TimeClip(y).\n4. If y is NaN, throw a RangeError exception.\n\n","features":["Intl.DateTimeFormat-formatRange"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/formatRange/date-same-returns-single-date.js","esid":" sec-partitiondatetimerangepattern","description":" >When startDate is equal to endDate, the output should be a string equal\nto the output of Intl.DateTimeFormat.prototype.format.\n","info":" |Intl.DateTimeFormat.prototype.formatRange ( startDate , endDate )\n\n4. Let x be ? ToNumber(startDate).\n5. Let y be ? ToNumber(endDate).\n6. Return ? FormatDateTimeRange(dtf, x, y).\n\nPartitionDateTimeRangePattern ( dateTimeFormat, x, y )\n\n13. If dateFieldsPracticallyEqual is true, then\na. Let pattern be dateTimeFormat.[[Pattern]].\nb. Let patternParts be PartitionPattern(pattern).\nc. Let result be ? FormatDateTimePattern(dateTimeFormat, patternParts, tm1).\nd. For each r in result do\ni. Set r.[[Source]] to \"shared\".\ne. Return result.\n\n","features":["Intl.DateTimeFormat-formatRange"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/formatRange/date-undefined-throws.js","description":" >Throws a TypeError if startDate or endDate is undefined.\n","info":" |Intl.DateTimeFormat.prototype.formatRange ( startDate , endDate )\n\n1. Let dtf be this value.\n2. If Type(dtf) is not Object, throw a TypeError exception.\n3. If dtf does not have an [[InitializedDateTimeFormat]] internal slot, throw a TypeError exception.\n4. If startDate is undefined or endDate is undefined, throw a TypeError exception.\n5. Let x be ? ToNumber(startDate).\n6. Let y be ? ToNumber(endDate).\n\n","features":["Intl.DateTimeFormat-formatRange"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/formatRange/date-x-greater-than-y-throws.js","description":" >Throws a RangeError if date x is greater than y.\n","info":" |Intl.DateTimeFormat.prototype.formatRange ( startDate , endDate )\n\n4. Let x be ? ToNumber(startDate).\n5. Let y be ? ToNumber(endDate).\n6. Return ? FormatDateTimeRange(dtf, x, y).\n\nPartitionDateTimeRangePattern ( dateTimeFormat, x, y )\n\n1. Let x be TimeClip(x).\n2. If x is NaN, throw a RangeError exception.\n3. Let y be TimeClip(y).\n4. If y is NaN, throw a RangeError exception.\n5. If x is greater than y, throw a RangeError exception.\n\n","features":["Intl.DateTimeFormat-formatRange"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/formatRange/en-US.js","esid":" sec-partitiondatetimerangepattern","description":" Basic tests for the en-US output of formatRange()","info":" |Intl.DateTimeFormat.prototype.formatRange ( startDate , endDate )\n\n8. Return ? FormatDateTimeRange(dtf, x, y).\n","features":["Intl.DateTimeFormat-formatRange"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/formatRange/fractionalSecondDigits.js","esid":" sec-initializedatetimeformat","description":" Checks basic handling of fractionalSecondDigits.","features":["Intl.DateTimeFormat-fractionalSecondDigits","Intl.DateTimeFormat-formatRange"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/formatRange/length.js","description":" Intl.DateTimeFormat.prototype.formatRange.length.","includes":["propertyHelper.js"],"features":["Intl.DateTimeFormat-formatRange"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/formatRange/name.js","description":" Intl.DateTimeFormat.prototype.formatRange.name value and descriptor.","includes":["propertyHelper.js"],"features":["Intl.DateTimeFormat-formatRange"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/formatRange/prop-desc.js","description":" Property type and descriptor.","includes":["propertyHelper.js"],"features":["Intl.DateTimeFormat-formatRange"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/formatRange/this-bad-object.js","description":" >Throws a TypeError if this is not a DateTimeFormat object\n","features":["Intl.DateTimeFormat-formatRange"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/formatRange/this-is-not-object-throws.js","description":" >Throws a TypeError if this is not Object.\n","info":" |Intl.DateTimeFormat.prototype.formatRange ( startDate , endDate )\n\n1. Let dtf be this value.\n2. If Type(dtf) is not Object, throw a TypeError exception.\n\n","features":["Intl.DateTimeFormat-formatRange","Symbol"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/formatRangeToParts/argument-date-string.js","esid":" sec-partitiondatetimerangepattern","description":" >The Date constructor is not called to convert the input value.\n","info":" |Intl.DateTimeFormat.prototype.formatRangeToParts ( startDate , endDate )\n\n5. Let x be ? ToNumber(startDate).\n6. Let y be ? ToNumber(endDate).\n8. Return ? FormatDateTimeRange(dtf, x, y).\n\nPartitionDateTimeRangePattern ( dateTimeFormat, x, y )\n\n1. Let x be TimeClip(x).\n2. If x is NaN, throw a RangeError exception.\n3. Let y be TimeClip(y).\n4. If y is NaN, throw a RangeError exception.\n","features":["Intl.DateTimeFormat-formatRange"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/formatRangeToParts/argument-near-time-boundaries.js","esid":" sec-partitiondatetimerangepattern","description":" >TimeClip is applied when calling Intl.DateTimeFormat.prototype.formatRangeToParts.\n","info":" |PartitionDateTimeRangePattern ( dateTimeFormat, x, y )\n\n1. Let x be TimeClip(x).\n2. If x is NaN, throw a RangeError exception.\n3. Let y be TimeClip(y).\n4. If y is NaN, throw a RangeError exception.\n\nTimeClip ( time )\n...\n2. If abs(time) > 8.64 × 10^15, return NaN.\n...\n\n","includes":["dateConstants.js"],"features":["Intl.DateTimeFormat-formatRange"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/formatRangeToParts/argument-to-integer.js","esid":" sec-partitiondatetimerangepattern","description":" >TimeClip applies ToInteger on its input value.\n","info":" |Intl.DateTimeFormat.prototype.formatRangeToParts ( startDate , endDate )\n\n5. Let x be ? ToNumber(startDate).\n6. Let y be ? ToNumber(endDate).\n\nTimeClip ( time )\n...\n3. Let clippedTime be ! ToInteger(time).\n4. If clippedTime is -0, set clippedTime to +0.\n5. Return clippedTime.\n","features":["Intl.DateTimeFormat-formatRange"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/formatRangeToParts/argument-tonumber-throws.js","description":" >Return abrupt completions from ToNumber(date)\n","info":" |Intl.DateTimeFormat.prototype.formatRangeToParts ( startDate , endDate )\n\n5. Let x be ? ToNumber(startDate).\n6. Let y be ? ToNumber(endDate).\n","features":["Symbol,Intl.DateTimeFormat-formatRange"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/formatRangeToParts/builtin.js","esid":" sec-ecmascript-standard-built-in-objects","description":" >Tests that the Intl.DateTimeFormat.prototype.formatRangeToParts function meets the\nrequirements for built-in objects defined by the ECMAScript Language\nSpecification.\n","includes":["isConstructor.js"],"features":["Reflect.construct,Intl.DateTimeFormat-formatRange"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/formatRangeToParts/date-is-infinity-throws.js","description":" >Throws a RangeError if date arg is cast to an Infinity value\n","info":" |Intl.DateTimeFormat.prototype.formatRangeToParts ( startDate , endDate )\n\n1. Let dtf be this value.\n2. If Type(dtf) is not Object, throw a TypeError exception.\n3. If dtf does not have an [[InitializedDateTimeFormat]] internal slot, throw a TypeError exception.\n4. If startDate is undefined or endDate is undefined, throw a RangeError exception.\n5. Let x be ? ToNumber(startDate).\n6. Let y be ? ToNumber(endDate).\n7. If x is greater than y, throw a RangeError exception.\n8. Return ? FormatDateTimeRangeToParts(dtf, x, y).\n\nFormatDateTimeRangeToParts ( dateTimeFormat, x, y )\n\n1. Let parts be ? PartitionDateTimeRangePattern(dateTimeFormat, x, y).\n\nPartitionDateTimeRangePattern ( dateTimeFormat, x, y )\n1. Let x be TimeClip(x).\n2. If x is NaN, throw a RangeError exception.\n3. Let y be TimeClip(y).\n4. If y is NaN, throw a RangeError exception.\n\nTimeClip ( time )\n1. If time is not finite, return NaN.\n\n","features":["Intl.DateTimeFormat-formatRange"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/formatRangeToParts/date-is-nan-throws.js","description":" >Throws a RangeError if date arg is cast to Nan\n","info":" |Intl.DateTimeFormat.prototype.formatRangeToParts ( startDate , endDate )\n\n1. Let dtf be this value.\n2. If Type(dtf) is not Object, throw a TypeError exception.\n3. If dtf does not have an [[InitializedDateTimeFormat]] internal slot, throw a TypeError exception.\n4. If startDate is undefined or endDate is undefined, throw a RangeError exception.\n5. Let x be ? ToNumber(startDate).\n6. Let y be ? ToNumber(endDate).\n7. If x is greater than y, throw a RangeError exception.\n8. Return ? FormatDateTimeRangeToParts(dtf, x, y).\n\nFormatDateTimeRangeToParts ( dateTimeFormat, x, y )\n\n1. Let parts be ? PartitionDateTimeRangePattern(dateTimeFormat, x, y).\n\nPartitionDateTimeRangePattern ( dateTimeFormat, x, y )\n\n1. Let x be TimeClip(x).\n2. If x is NaN, throw a RangeError exception.\n3. Let y be TimeClip(y).\n4. If y is NaN, throw a RangeError exception.\n\n","features":["Intl.DateTimeFormat-formatRange"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/formatRangeToParts/date-same-returns-single-date.js","esid":" sec-partitiondatetimerangepattern","description":" >When startDate is equal to endDate, the output should be an Array of objects with the\nsame value for the `type` and `value` fields as in the Array returned by\nIntl.DateTimeFormat.prototype.formatToParts.\n","info":" |Intl.DateTimeFormat.prototype.formatRangeToParts ( startDate , endDate )\n\n4. Let x be ? ToNumber(startDate).\n5. Let y be ? ToNumber(endDate).\n6. Return ? FormatDateTimeRange(dtf, x, y).\n\nPartitionDateTimeRangePattern ( dateTimeFormat, x, y )\n\n13. If dateFieldsPracticallyEqual is true, then\na. Let pattern be dateTimeFormat.[[Pattern]].\nb. Let patternParts be PartitionPattern(pattern).\nc. Let result be ? FormatDateTimePattern(dateTimeFormat, patternParts, tm1).\nd. For each r in result do\ni. Set r.[[Source]] to \"shared\".\ne. Return result.\n\n","features":["Intl.DateTimeFormat-formatRange"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/formatRangeToParts/date-undefined-throws.js","description":" >Throws a TypeError if startDate or endDate are undefined.\n","info":" |Intl.DateTimeFormat.prototype.formatRangeToParts ( startDate , endDate )\n\n1. Let dtf be this value.\n2. If Type(dtf) is not Object, throw a TypeError exception.\n3. If dtf does not have an [[InitializedDateTimeFormat]] internal slot, throw a TypeError exception.\n4. If startDate is undefined or endDate is undefined, throw a TypeError exception.\n5. Let x be ? ToNumber(startDate).\n6. Let y be ? ToNumber(endDate).\n\n","features":["Intl.DateTimeFormat-formatRange"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/formatRangeToParts/date-x-greater-than-y-throws.js","description":" >Throws a RangeError if date x is greater than y.\n","info":" |Intl.DateTimeFormat.prototype.formatRangeToParts ( startDate , endDate )\n\n4. Let x be ? ToNumber(startDate).\n5. Let y be ? ToNumber(endDate).\n6. Return ? FormatDateTimeRangeToParts(dtf, x, y).\n\nPartitionDateTimeRangePattern ( dateTimeFormat, x, y )\n\n1. Let x be TimeClip(x).\n2. If x is NaN, throw a RangeError exception.\n3. Let y be TimeClip(y).\n4. If y is NaN, throw a RangeError exception.\n5. If x is greater than y, throw a RangeError exception.\n\n","features":["Intl.DateTimeFormat-formatRange"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/formatRangeToParts/en-US.js","esid":" sec-partitiondatetimerangepattern","description":" Basic tests for the en-US output of formatRangeToParts()","info":" |Intl.DateTimeFormat.prototype.formatRangeToParts ( startDate , endDate )\n\n8. Return ? FormatDateTimeRange(dtf, x, y).\n","features":["Intl.DateTimeFormat-formatRange"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/formatRangeToParts/fractionalSecondDigits.js","esid":" sec-initializedatetimeformat","description":" Checks basic handling of fractionalSecondDigits.","features":["Intl.DateTimeFormat-fractionalSecondDigits","Intl.DateTimeFormat-formatRange"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/formatRangeToParts/length.js","description":" Intl.DateTimeFormat.prototype.formatRangeToParts.length.","includes":["propertyHelper.js"],"features":["Intl.DateTimeFormat-formatRange"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/formatRangeToParts/name.js","description":" Intl.DateTimeFormat.prototype.formatRangeToParts.name value and descriptor.","includes":["propertyHelper.js"],"features":["Intl.DateTimeFormat-formatRange"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/formatRangeToParts/pattern-on-calendar.js","esid":" sec-initializedatetimeformat","description":" >Checks the DateTimeFormat choose different patterns based\non calendar.\n","features":["Intl.DateTimeFormat-formatRange"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/formatRangeToParts/prop-desc.js","description":" Property type and descriptor.","includes":["propertyHelper.js"],"features":["Intl.DateTimeFormat-formatRange"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/formatRangeToParts/this-bad-object.js","description":" >Throws a TypeError if this is not a DateTimeFormat object\n","features":["Intl.DateTimeFormat-formatRange"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/formatRangeToParts/this-is-not-object-throws.js","description":" >Throws a TypeError if this is not Object.\n","info":" |Intl.DateTimeFormat.prototype.formatRangeToParts ( startDate , endDate )\n\n1. Let dtf be this value.\n2. If Type(dtf) is not Object, throw a TypeError exception.\n\n","features":["Intl.DateTimeFormat-formatRange","Symbol"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/formatToParts/date-constructor-not-called.js","esid":" sec-partitiondatetimepattern","description":" |The Date constructor is not called to convert the input value.\n","info":" >12.4.4 Intl.DateTimeFormat.prototype.formatToParts ( date )\n\n...\n4. If date is undefined, then\n...\n5. Else,\na. Let x be ? ToNumber(date).\n5. Return ? FormatDateTimeToParts(dtf, x).\n\n12.1.6 PartitionDateTimePattern ( dateTimeFormat, x )\n\n1. Let x be TimeClip(x).\n2. If x is NaN, throw a RangeError exception.\n3. ...\n"},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/formatToParts/date-is-infinity-throws.js","description":" >Throws a RangeError if date arg is cast to an Infinity value\n","info":" |Intl.DateTimeFormat.prototype.formatToParts ([ date ])\n\n4. If _date_ is not provided or is *undefined*, then\na. Let _x_ be *%Date_now%*().\n5. Else,\na. Let _x_ be ? ToNumber(_date_).\n6. Return ? FormatDateTimeToParts(_dtf_, _x_).\n\nFormatDateTimeToParts(dateTimeFormat, x)\n\n1. Let _parts_ be ? PartitionDateTimePattern(_dateTimeFormat_, _x_).\n\nPartitionDateTimePattern (dateTimeFormat, x)\n\n1. If _x_ is not a finite Number, throw a *RangeError* exception.\n"},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/formatToParts/date-is-nan-throws.js","description":" >Throws a RangeError if date arg is cast to NaN\n","info":" |Intl.DateTimeFormat.prototype.formatToParts ([ date ])\n\n4. If _date_ is not provided or is *undefined*, then\na. Let _x_ be *%Date_now%*().\n5. Else,\na. Let _x_ be ? ToNumber(_date_).\n6. Return ? FormatDateTimeToParts(_dtf_, _x_).\n\nFormatDateTimeToParts(dateTimeFormat, x)\n\n1. Let _parts_ be ? PartitionDateTimePattern(_dateTimeFormat_, _x_).\n\nPartitionDateTimePattern (dateTimeFormat, x)\n\n1. If _x_ is not a finite Number, throw a *RangeError* exception.\n"},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/formatToParts/dayPeriod-long-en.js","esid":" sec-initializedatetimeformat","description":" Checks basic handling of dayPeriod, long format.","features":["Intl.DateTimeFormat-dayPeriod"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/formatToParts/dayPeriod-narrow-en.js","esid":" sec-initializedatetimeformat","description":" Checks basic handling of dayPeriod, narrow format.","features":["Intl.DateTimeFormat-dayPeriod"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/formatToParts/dayPeriod-short-en.js","esid":" sec-initializedatetimeformat","description":" Checks basic handling of dayPeriod, short format.","features":["Intl.DateTimeFormat-dayPeriod"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/formatToParts/formatToParts.js","description":" Property type and descriptor. ","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/formatToParts/fractionalSecondDigits.js","esid":" sec-initializedatetimeformat","description":" Checks basic handling of fractionalSecondDigits.","features":["Intl.DateTimeFormat-fractionalSecondDigits"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/formatToParts/length.js","description":" Intl.DateTimeFormat.prototype.formatToParts.length. ","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/formatToParts/main.js","description":" Tests for existance and behavior of Intl.DateTimeFormat.prototype.formatToParts"},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/formatToParts/name.js","description":" Intl.DateTimeFormat.prototype.formatToParts.name value and descriptor. ","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/formatToParts/pattern-on-calendar.js","esid":" sec-initializedatetimeformat","description":" >Checks the DateTimeFormat choose different patterns based\non calendar.\n"},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/formatToParts/related-year-zh.js","esid":" sec-partitiondatetimepattern","description":" >Checks the output of 'relatedYear' and 'yearName' type, and\nthe choice of pattern based on calendar.\n"},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/formatToParts/related-year.js","esid":" sec-partitiondatetimepattern","description":" >Checks the output of 'relatedYear' and 'yearName' type, and\nthe choose of pattern base on calendar.\n"},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/formatToParts/return-abrupt-tonumber-date.js","description":" >Return abrupt completions from ToNumber(date)\n","info":" |Intl.DateTimeFormat.prototype.formatToParts ([ date ])\n\n4. If _date_ is not provided or is *undefined*, then\na. Let _x_ be *%Date_now%*().\n5. Else,\na. Let _x_ be ? ToNumber(_date_).\n","features":["Symbol"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/formatToParts/this-has-not-internal-throws.js","description":" >Throws a TypeError if this is not a DateTimeFormat object\n"},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/formatToParts/this-is-not-object-throws.js","description":" Throws a TypeError if this is not Object","features":["Symbol"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/formatToParts/time-clip-near-time-boundaries.js","esid":" sec-partitiondatetimepattern","description":" |TimeClip is applied when calling Intl.DateTimeFormat.prototype.formatToParts.\n","info":" >12.1.6 PartitionDateTimePattern ( dateTimeFormat, x )\n\n1. Let x be TimeClip(x).\n2. If x is NaN, throw a RangeError exception.\n3. ...\n\n20.3.1.15 TimeClip ( time )\n...\n2. If abs(time) > 8.64 × 10^15, return NaN.\n...\n\n","includes":["dateConstants.js"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/formatToParts/time-clip-to-integer.js","esid":" sec-partitiondatetimepattern","description":" |TimeClip applies ToInteger on its input value.\n","info":" >12.1.6 PartitionDateTimePattern ( dateTimeFormat, x )\n\n1. Let x be TimeClip(x).\n2. ...\n\n20.3.1.15 TimeClip ( time )\n...\n3. Let clippedTime be ! ToInteger(time).\n4. If clippedTime is -0, set clippedTime to +0.\n5. Return clippedTime.\n"},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/prop-desc.js","version":5,"esid":" 12.2.1","description":" >Tests that Intl.DateTimeFormat.prototype has the required\nattributes.\n","author":" Norbert Lindenberg","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/resolvedOptions/basic.js","version":5,"esid":" 12.3.3","description":" >Tests that the object returned by\nIntl.DateTimeFormat.prototype.resolvedOptionshas the right\nproperties.\n","author":" Norbert Lindenberg","includes":["testIntl.js","propertyHelper.js"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/resolvedOptions/builtin.js","version":5,"esid":" 12.3.3_L15","description":" >Tests that Intl.DateTimeFormat.prototype.resolvedOptions meets\nthe requirements for built-in objects defined by the introduction\nof chapter 17 of the ECMAScript Language Specification.\n","author":" Norbert Lindenberg","includes":["isConstructor.js"],"features":["Reflect.construct"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/resolvedOptions/hourCycle-dateStyle.js","esid":" sec-Intl.DateTimeFormat.prototype.resolvedOptions","description":" >Intl.DateTimeFormat.prototype.resolvedOptions properly\nreflect hourCycle settings when using dateStyle.\n","features":["Intl.DateTimeFormat-datetimestyle"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/resolvedOptions/hourCycle-default.js","esid":" sec-Intl.DateTimeFormat.prototype.resolvedOptions","description":" >Intl.DateTimeFormat.prototype.resolvedOptions properly\nreflect hourCycle settings.\n","info":" |12.4.5 Intl.DateTimeFormat.prototype.resolvedOptions()\n\n12.1.1 InitializeDateTimeFormat ( dateTimeFormat, locales, options )\n29. If dateTimeFormat.[[Hour]] is not undefined, then\na. Let hcDefault be dataLocaleData.[[hourCycle]].\nb. Let hc be dateTimeFormat.[[HourCycle]].\nc. If hc is null, then\ni. Set hc to hcDefault.\nd. If hour12 is not undefined, then\ni. If hour12 is true, then\n1. If hcDefault is \"h11\" or \"h23\", then\na. Set hc to \"h11\".\n2. Else,\na. Set hc to \"h12\".\nii. Else,\n1. Assert: hour12 is false.\n2. If hcDefault is \"h11\" or \"h23\", then\na. Set hc to \"h23\".\n3. Else,\na. Set hc to \"h24\".\ne. Set dateTimeFormat.[[HourCycle]] to hc.\n\n"},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/resolvedOptions/hourCycle-timeStyle.js","esid":" sec-Intl.DateTimeFormat.prototype.resolvedOptions","description":" >Intl.DateTimeFormat.prototype.resolvedOptions properly\nreflect hourCycle settings when using timeStyle.\n","includes":["propertyHelper.js"],"features":["Intl.DateTimeFormat-datetimestyle"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/resolvedOptions/hourCycle.js","esid":" sec-Intl.DateTimeFormat.prototype.resolvedOptions","description":" >Intl.DateTimeFormat.prototype.resolvedOptions properly\nreflect hourCycle settings.\n","info":" |12.4.5 Intl.DateTimeFormat.prototype.resolvedOptions()\n\n","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/resolvedOptions/length.js","esid":" sec-intl.datetimeformat.prototype.resolvedoptions","description":" >Intl.DateTimeFormat.prototype.resolvedOptions.length is 0.\n","info":" |Intl.DateTimeFormat.prototype.resolvedOptions ()\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery built-in function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description. Optional parameters\n(which are indicated with brackets: [ ]) or rest parameters (which\nare shown using the form «...name») are not included in the default\nargument count.\nUnless otherwise specified, the length property of a built-in function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n\n","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/resolvedOptions/name.js","esid":" sec-Intl.DateTimeFormat.prototype.resolvedOptions","description":" >Intl.DateTimeFormat.prototype.resolvedOptions.name is \"resolvedOptions\".\n","info":" |12.4.4 Intl.DateTimeFormat.prototype.resolvedOptions ()\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/resolvedOptions/no-instanceof.js","esid":" sec-Intl.DateTimeFormat.prototype.resolvedOptions","description":" >Tests that Intl.DateTimeFormat.prototype.resolvedOptions calls\nOrdinaryHasInstance instead of the instanceof operator which includes a\nSymbol.hasInstance lookup and call among other things.\n"},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/resolvedOptions/order-dayPeriod.js","esid":" sec-intl.datetimeformat.prototype.resolvedoptions","description":" Verifies the property order for the object returned by resolvedOptions().","includes":["arrayContains.js"],"features":["Intl.DateTimeFormat-dayPeriod"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/resolvedOptions/order-fractionalSecondDigits.js","esid":" sec-intl.datetimeformat.prototype.resolvedoptions","description":" Verifies the property order for the object returned by resolvedOptions().","includes":["arrayContains.js"],"features":["Intl.DateTimeFormat-fractionalSecondDigits"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/resolvedOptions/order-style.js","esid":" sec-intl.datetimeformat.prototype.resolvedoptions","description":" Verifies the property order for the object returned by resolvedOptions().","includes":["arrayContains.js"],"features":["Intl.DateTimeFormat-datetimestyle"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/resolvedOptions/order.js","esid":" sec-intl.datetimeformat.prototype.resolvedoptions","description":" Verifies the property order for the object returned by resolvedOptions().","includes":["arrayContains.js"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/resolvedOptions/prop-desc.js","esid":" sec-intl.datetimeformat.prototype.resolvedoptions","description":" >\"resolvedOptions\" property of Intl.DateTimeFormat.prototype.\n","info":" |Intl.DateTimeFormat.prototype.resolvedOptions ()\n\n7 Requirements for Standard Built-in ECMAScript Objects\n\nUnless specified otherwise in this document, the objects, functions, and constructors\ndescribed in this standard are subject to the generic requirements and restrictions\nspecified for standard built-in ECMAScript objects in the ECMAScript 2018 Language\nSpecification, 9th edition, clause 17, or successor.\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the\nattributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true }\nunless otherwise specified.\n\n","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/resolvedOptions/resolved-locale-with-hc-unicode.js","esid":" sec-Intl.DateTimeFormat.prototype.resolvedOptions","description":" >The resolved locale doesn't include a hc Unicode extension value if the\nhour12 or hourCycle option is also present.\n","info":" |12.1.1 InitializeDateTimeFormat(dateTimeFormat, locales, options)\n...\n6. Let hour12 be ? GetOption(options, \"hour12\", \"boolean\", undefined, undefined).\n7. Let hourCycle be ? GetOption(options, \"hourCycle\", \"string\", « \"h11\", \"h12\", \"h23\", \"h24\" », undefined).\n8. If hour12 is not undefined, then\na. Let hourCycle be null.\n9. Set opt.[[hc]] to hourCycle.\n...\n\n9.2.6 ResolveLocale(availableLocales, requestedLocales, options, relevantExtensionKeys, localeData)\n...\n8. For each element key of relevantExtensionKeys in List order, do\n...\ni. If options has a field [[<key>]], then\ni. Let optionsValue be options.[[<key>]].\nii. Assert: Type(optionsValue) is either String, Undefined, or Null.\niii. If keyLocaleData contains optionsValue, then\n1. If SameValue(optionsValue, value) is false, then\na. Let value be optionsValue.\nb. Let supportedExtensionAddition be \"\".\n...\n"},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/this-value-datetimeformat-prototype.js","esid":" sec-properties-of-intl-datetimeformat-prototype-object","description":" >Tests that Intl.DateTimeFormat.prototype is not an object that has\nbeen initialized as an Intl.DateTimeFormat.\n","author":" Roozbeh Pournader"},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/this-value-not-datetimeformat.js","version":5,"esid":" 12.3_b","description":" >Tests that Intl.DateTimeFormat.prototype functions throw a\nTypeError if called on a non-object value or an object that hasn't\nbeeninitialized as a DateTimeFormat.\n","author":" Norbert Lindenberg"},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/toStringTag/toString-changed-tag.js","esid":" sec-intl.datetimeformat.prototype-@@tostringtag","description":" >Object.prototype.toString utilizes Intl.DateTimeFormat.prototype[@@toStringTag].\n","info":" |Object.prototype.toString ( )\n\n[...]\n14. Else, let builtinTag be \"Object\".\n15. Let tag be ? Get(O, @@toStringTag).\n16. If Type(tag) is not String, set tag to builtinTag.\n17. Return the string-concatenation of \"[object \", tag, and \"]\".\n\nIntl.DateTimeFormat.prototype [ @@toStringTag ]\n\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n","features":["Symbol.toStringTag"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/toStringTag/toString-removed-tag.js","esid":" sec-intl.datetimeformat.prototype-@@tostringtag","description":" >Object.prototype.toString doesn't special-case neither Intl.DateTimeFormat instances nor its prototype.\n","info":" |Object.prototype.toString ( )\n\n[...]\n14. Else, let builtinTag be \"Object\".\n15. Let tag be ? Get(O, @@toStringTag).\n16. If Type(tag) is not String, set tag to builtinTag.\n17. Return the string-concatenation of \"[object \", tag, and \"]\".\n","features":["Symbol.toStringTag"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/toStringTag/toString.js","esid":" sec-intl.datetimeformat.prototype-@@tostringtag","description":" >Object.prototype.toString utilizes Intl.DateTimeFormat.prototype[@@toStringTag].\n","info":" |Object.prototype.toString ( )\n\n[...]\n14. Else, let builtinTag be \"Object\".\n15. Let tag be ? Get(O, @@toStringTag).\n16. If Type(tag) is not String, set tag to builtinTag.\n17. Return the string-concatenation of \"[object \", tag, and \"]\".\n\nIntl.DateTimeFormat.prototype [ @@toStringTag ]\n\nThe initial value of the @@toStringTag property is the String value \"Intl.DateTimeFormat\".\n","features":["Symbol.toStringTag"]},{"path":"./test262-main/test/intl402/DateTimeFormat/prototype/toStringTag/toStringTag.js","esid":" sec-intl.datetimeformat.prototype-@@tostringtag","description":" >Property descriptor of Intl.DateTimeFormat.prototype[@@toStringTag].\n","info":" |Intl.DateTimeFormat.prototype [ @@toStringTag ]\n\nThe initial value of the @@toStringTag property is the String value \"Intl.DateTimeFormat\".\n\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n","features":["Symbol.toStringTag"],"includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/DateTimeFormat/required-date-time-formats.js","version":5,"esid":" 12.2.3_c","description":" >Tests that Intl.DateTimeFormat provides the required date-time\nformat component subsets.\n","author":" Norbert Lindenberg","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/DateTimeFormat/subclassing.js","version":5,"esid":" 12.1.2","description":" Tests that Intl.DateTimeFormat can be subclassed.","author":" Norbert Lindenberg","includes":["compareArray.js"]},{"path":"./test262-main/test/intl402/DateTimeFormat/supportedLocalesOf/basic.js","version":5,"esid":" 12.2.2_a","description":" >Tests that Intl.DateTimeFormat has a supportedLocalesOfproperty,\nand it works as planned.\n","author":" Roozbeh Pournader"},{"path":"./test262-main/test/intl402/DateTimeFormat/supportedLocalesOf/builtin.js","version":5,"esid":" 12.2.2_L15","description":" >Tests that Intl.DateTimeFormat.supportedLocalesOf meets the\nrequirements for built-in objects defined by the introduction of\nchapter 17 of the ECMAScript Language Specification.\n","author":" Norbert Lindenberg","includes":["isConstructor.js"],"features":["Reflect.construct"]},{"path":"./test262-main/test/intl402/DateTimeFormat/supportedLocalesOf/length.js","esid":" sec-intl.datetimeformat.supportedlocalesof","description":" >Intl.DateTimeFormat.supportedLocalesOf.length is 1.\n","info":" |Intl.DateTimeFormat.supportedLocalesOf ( locales [ , options ] )\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery built-in function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description. Optional parameters\n(which are indicated with brackets: [ ]) or rest parameters (which\nare shown using the form «...name») are not included in the default\nargument count.\nUnless otherwise specified, the length property of a built-in function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n\n","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/DateTimeFormat/supportedLocalesOf/name.js","esid":" sec-Intl.DateTimeFormat.supportedLocalesOf","description":" >Intl.DateTimeFormat.supportedLocalesOf.name is \"supportedLocalesOf\".\n","info":" |12.3.2 Intl.DateTimeFormat.supportedLocalesOf (locales [ , options ])\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/DateTimeFormat/supportedLocalesOf/prop-desc.js","esid":" sec-intl.datetimeformat.supportedlocalesof","description":" >\"supportedLocalesOf\" property of Intl.DateTimeFormat.\n","info":" |Intl.DateTimeFormat.supportedLocalesOf ( locales [ , options ] )\n\n7 Requirements for Standard Built-in ECMAScript Objects\n\nUnless specified otherwise in this document, the objects, functions, and constructors\ndescribed in this standard are subject to the generic requirements and restrictions\nspecified for standard built-in ECMAScript objects in the ECMAScript 2018 Language\nSpecification, 9th edition, clause 17, or successor.\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the\nattributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true }\nunless otherwise specified.\n\n","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/DateTimeFormat/supportedLocalesOf/taint-Object-prototype.js","version":5,"esid":" 12.2.2_b","description":" >Tests that Intl.DateTimeFormat.supportedLocalesOfdoesn't access\narguments that it's not given.\n","author":" Norbert Lindenberg","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/DateTimeFormat/taint-Object-prototype-date-time-components.js","version":5,"esid":" 12.1.1_22","description":" >Tests that the behavior of a Record is not affected by\nadversarialchanges to Object.prototype.\n","author":" Norbert Lindenberg","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/DateTimeFormat/taint-Object-prototype-dayPeriod.js","esid":" sec-initializedatetimeformat","description":" >Tests that the behavior of a Record is not affected by\nadversarial changes to Object.prototype.\n","includes":["testIntl.js"],"features":["Intl.DateTimeFormat-dayPeriod"]},{"path":"./test262-main/test/intl402/DateTimeFormat/taint-Object-prototype-fractionalSecondDigits.js","esid":" sec-initializedatetimeformat","description":" >Tests that the behavior of a Record is not affected by\nadversarialchanges to Object.prototype.\n","includes":["testIntl.js"],"features":["Intl.DateTimeFormat-fractionalSecondDigits"]},{"path":"./test262-main/test/intl402/DateTimeFormat/taint-Object-prototype.js","version":5,"esid":" 12.1.1_5","description":" >Tests that the behavior of a Record is not affected by\nadversarialchanges to Object.prototype.\n","author":" Norbert Lindenberg","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/DateTimeFormat/test-option-date-time-components.js","version":5,"esid":" 12.1.1_23","description":" >Tests that the options for the date and time components are\nprocessed correctly.\n","author":" Norbert Lindenberg","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/DateTimeFormat/test-option-formatMatcher.js","version":5,"esid":" 12.1.1_25","description":" Tests that the option formatMatcher is processed correctly.","author":" Norbert Lindenberg","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/DateTimeFormat/test-option-hour12.js","version":5,"esid":" 12.1.1_18","description":" Tests that the option hour12 is processed correctly.","author":" Norbert Lindenberg","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/DateTimeFormat/test-option-localeMatcher.js","version":5,"esid":" 12.1.1_6","description":" Tests that the option localeMatcher is processed correctly.","author":" Norbert Lindenberg","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/DateTimeFormat/this-value-ignored.js","esid":" sec-intl-datetimeformat-constructor","description":" >Tests that the this-value is ignored in DateTimeFormat, if the this-value\nisn't a DateTimeFormat instance.\n","author":" Norbert Lindenberg","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/DateTimeFormat/timezone-canonicalized.js","version":5,"esid":" 6.4_c","description":" >Tests that additional time zone names, if accepted, are handled\ncorrectly.\n","author":" Norbert Lindenberg"},{"path":"./test262-main/test/intl402/DateTimeFormat/timezone-invalid.js","version":5,"esid":" 6.4_b","description":" Tests that invalid time zone names are not accepted.","author":" Norbert Lindenberg"},{"path":"./test262-main/test/intl402/DateTimeFormat/timezone-utc.js","version":5,"esid":" 6.4_a","description":" Tests that valid time zone names are accepted.","author":" Norbert Lindenberg"},{"path":"./test262-main/test/intl402/DisplayNames/ctor-custom-get-prototype-poison-throws.js","esid":" sec-Intl.DisplayNames","description":" >Return abrupt from Get Prototype from a custom NewTarget\n","info":" |Intl.DisplayNames ([ locales [ , options ]])\n\n1. If NewTarget is undefined, throw a TypeError exception.\n2. Let displayNames be ? OrdinaryCreateFromConstructor(NewTarget, \"%DisplayNamesPrototype%\",\n« [[InitializedDisplayNames]], [[Locale]], [[Style]], [[Type]], [[Fallback]], [[Fields]] »).\n...\n\nOrdinaryCreateFromConstructor ( constructor, intrinsicDefaultProto [ , internalSlotsList ] )\n\n...\n2. Let proto be ? GetPrototypeFromConstructor(constructor, intrinsicDefaultProto).\n...\n\nGetPrototypeFromConstructor ( constructor, intrinsicDefaultProto )\n\n3. Let proto be ? Get(constructor, \"prototype\").\n4. If Type(proto) is not Object, then\na. Let realm be ? GetFunctionRealm(constructor).\nb. Set proto to realm's intrinsic object named intrinsicDefaultProto.\n5. Return proto.\n","features":["Intl.DisplayNames","Reflect","Proxy"]},{"path":"./test262-main/test/intl402/DisplayNames/ctor-custom-prototype.js","esid":" sec-Intl.DisplayNames","description":" >Custom Prototype of the returned object based on the NewTarget\n","info":" |Intl.DisplayNames ( locales , options )\n\n1. If NewTarget is undefined, throw a TypeError exception.\n2. Let displayNames be ? OrdinaryCreateFromConstructor(NewTarget, \"%DisplayNamesPrototype%\",\n« [[InitializedDisplayNames]], [[Locale]], [[Style]], [[Type]], [[Fallback]], [[Fields]] »).\n...\n12. Let type be ? GetOption(options, \"type\", \"string\", « \"language\", \"region\", \"script\", \"currency\" », undefined).\n13. If type is undefined, throw a TypeError exception.\n...\n\nOrdinaryCreateFromConstructor ( constructor, intrinsicDefaultProto [ , internalSlotsList ] )\n\n...\n2. Let proto be ? GetPrototypeFromConstructor(constructor, intrinsicDefaultProto).\n...\n\nGetPrototypeFromConstructor ( constructor, intrinsicDefaultProto )\n\n3. Let proto be ? Get(constructor, \"prototype\").\n4. If Type(proto) is not Object, then\na. Let realm be ? GetFunctionRealm(constructor).\nb. Set proto to realm's intrinsic object named intrinsicDefaultProto.\n5. Return proto.\n","features":["Intl.DisplayNames","Reflect"]},{"path":"./test262-main/test/intl402/DisplayNames/ctor-default-prototype.js","esid":" sec-Intl.DisplayNames","description":" >Prototype of the returned object is DisplayNames.prototype\n","info":" |Intl.DisplayNames ( locales , options )\n\n1. If NewTarget is undefined, throw a TypeError exception.\n2. Let displayNames be ? OrdinaryCreateFromConstructor(NewTarget, \"%DisplayNamesPrototype%\",\n« [[InitializedDisplayNames]], [[Locale]], [[Style]], [[Type]], [[Fallback]], [[Fields]] »).\n...\n12. Let type be ? GetOption(options, \"type\", \"string\", « \"language\", \"region\", \"script\", \"currency\" », undefined).\n13. If type is undefined, throw a TypeError exception.\n...\n27. Return displayNames.\n","features":["Intl.DisplayNames"]},{"path":"./test262-main/test/intl402/DisplayNames/instance-extensible.js","esid":" sec-Intl.DisplayNames","description":" >Instance is extensible\n","info":" |Intl.DisplayNames ( locales , options )\n\n1. If NewTarget is undefined, throw a TypeError exception.\n2. Let displayNames be ? OrdinaryCreateFromConstructor(NewTarget, \"%DisplayNamesPrototype%\",\n« [[InitializedDisplayNames]], [[Locale]], [[Style]], [[Type]], [[Fallback]], [[Fields]] »).\n...\n12. Let type be ? GetOption(options, \"type\", \"string\", « \"language\", \"region\", \"script\", \"currency\" », undefined).\n13. If type is undefined, throw a TypeError exception.\n...\n\nOrdinaryCreateFromConstructor ( constructor, intrinsicDefaultProto [ , internalSlotsList ] )\n\n...\n2. Let proto be ? GetPrototypeFromConstructor(constructor, intrinsicDefaultProto).\n3. Return ObjectCreate(proto, internalSlotsList).\n\nObjectCreate ( proto [ , internalSlotsList ] )\n\n...\n2. Let obj be a newly created object with an internal slot for each name in internalSlotsList.\n3. Set obj's essential internal methods to the default ordinary object definitions specified in 9.1.\n4. Set obj.[[Prototype]] to proto.\n5. Set obj.[[Extensible]] to true.\n6. Return obj.\n","features":["Intl.DisplayNames"]},{"path":"./test262-main/test/intl402/DisplayNames/length.js","esid":" sec-Intl.DisplayNames","description":" >Intl.DisplayNames.length is 2.\n","info":" |ECMAScript Standard Built-in Objects:\n\nEvery built-in function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description. Optional parameters\n(which are indicated with brackets: [ ]) or rest parameters (which\nare shown using the form «...name») are not included in the default\nargument count.\n\nUnless otherwise specified, the length property of a built-in function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["Intl.DisplayNames"]},{"path":"./test262-main/test/intl402/DisplayNames/locales-invalid-throws.js","esid":" sec-Intl.DisplayNames","description":" >Throws TypeError if locales is not undefined, a string, or an array-like object.\n","info":" |Intl.DisplayNames ([ locales [ , options ]])\n\n1. If NewTarget is undefined, throw a TypeError exception.\n2. Let displayNames be ? OrdinaryCreateFromConstructor(NewTarget, \"%DisplayNamesPrototype%\",\n« [[InitializedDisplayNames]], [[Locale]], [[Style]], [[Type]], [[Fallback]], [[Fields]] »).\n3. Let requestedLocales be ? CanonicalizeLocaleList(locales).\n...\n\nCanonicalizeLocaleList ( locales )\n\n1. If locales is undefined, then\na. Return a new empty List.\n2. Let seen be a new empty List.\n3. If Type(locales) is String, then\na. Let O be CreateArrayFromList(« locales »).\n4. Else,\na. Let O be ? ToObject(locales).\n5. Let len be ? ToLength(? Get(O, \"length\")).\n","features":["Intl.DisplayNames"]},{"path":"./test262-main/test/intl402/DisplayNames/locales-length-poison-throws.js","esid":" sec-Intl.DisplayNames","description":" >Return abrupt completion from Get Locales length\n","info":" |Intl.DisplayNames ([ locales [ , options ]])\n\n1. If NewTarget is undefined, throw a TypeError exception.\n2. Let displayNames be ? OrdinaryCreateFromConstructor(NewTarget, \"%DisplayNamesPrototype%\",\n« [[InitializedDisplayNames]], [[Locale]], [[Style]], [[Type]], [[Fallback]], [[Fields]] »).\n3. Let requestedLocales be ? CanonicalizeLocaleList(locales).\n...\n\nCanonicalizeLocaleList ( locales )\n\n1. If locales is undefined, then\na. Return a new empty List.\n2. Let seen be a new empty List.\n3. If Type(locales) is String, then\na. Let O be CreateArrayFromList(« locales »).\n4. Else,\na. Let O be ? ToObject(locales).\n5. Let len be ? ToLength(? Get(O, \"length\")).\n","features":["Intl.DisplayNames","Symbol"]},{"path":"./test262-main/test/intl402/DisplayNames/locales-length-tolength-throws.js","esid":" sec-Intl.DisplayNames","description":" >Return abrupt completion from Locales invalid length\n","info":" |Intl.DisplayNames ([ locales [ , options ]])\n\n1. If NewTarget is undefined, throw a TypeError exception.\n2. Let displayNames be ? OrdinaryCreateFromConstructor(NewTarget, \"%DisplayNamesPrototype%\",\n« [[InitializedDisplayNames]], [[Locale]], [[Style]], [[Type]], [[Fallback]], [[Fields]] »).\n3. Let requestedLocales be ? CanonicalizeLocaleList(locales).\n...\n\nCanonicalizeLocaleList ( locales )\n\n1. If locales is undefined, then\na. Return a new empty List.\n2. Let seen be a new empty List.\n3. If Type(locales) is String, then\na. Let O be CreateArrayFromList(« locales »).\n4. Else,\na. Let O be ? ToObject(locales).\n5. Let len be ? ToLength(? Get(O, \"length\")).\n\nToLength ( argument )\n\n1. Let len be ? ToInteger(argument).\n...\n","features":["Intl.DisplayNames","Symbol","BigInt"]},{"path":"./test262-main/test/intl402/DisplayNames/locales-symbol-length.js","esid":" sec-Intl.DisplayNames","description":" >CanonicalizeLocaleList tries to fetch length from Object.\n","info":" |Intl.DisplayNames ( locales , options )\n\n1. If NewTarget is undefined, throw a TypeError exception.\n2. Let displayNames be ? OrdinaryCreateFromConstructor(NewTarget, \"%DisplayNamesPrototype%\",\n« [[InitializedDisplayNames]], [[Locale]], [[Style]], [[Type]], [[Fallback]], [[Fields]] »).\n3. Let requestedLocales be ? CanonicalizeLocaleList(locales).\n...\n12. Let type be ? GetOption(options, \"type\", \"string\", « \"language\", \"region\", \"script\", \"currency\" », undefined).\n13. If type is undefined, throw a TypeError exception.\n...\n\nCanonicalizeLocaleList ( locales )\n\n1. If locales is undefined, then\na. Return a new empty List.\n2. Let seen be a new empty List.\n3. If Type(locales) is String, then\na. Let O be CreateArrayFromList(« locales »).\n4. Else,\na. Let O be ? ToObject(locales).\n5. Let len be ? ToLength(? Get(O, \"length\")).\n","features":["Intl.DisplayNames","Symbol"],"includes":["compareArray.js"]},{"path":"./test262-main/test/intl402/DisplayNames/name.js","esid":" sec-Intl.DisplayNames","description":" >Intl.DisplayNames.name is \"DisplayNames\".\n","info":" |17 ECMAScript Standard Built-in Objects:\n\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value is a\nString.\n\nUnless otherwise specified, the name property of a built-in Function object,\nif it exists, has the attributes { [[Writable]]: false, [[Enumerable]]:\nfalse, [[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["Intl.DisplayNames"]},{"path":"./test262-main/test/intl402/DisplayNames/options-fallback-abrupt-throws.js","esid":" sec-Intl.DisplayNames","description":" >Return abrupt completion from GetOption fallback\n","info":" |Intl.DisplayNames ( locales , options )\n\n1. If NewTarget is undefined, throw a TypeError exception.\n2. Let displayNames be ? OrdinaryCreateFromConstructor(NewTarget, \"%DisplayNamesPrototype%\",\n« [[InitializedDisplayNames]], [[Locale]], [[Style]], [[Type]], [[Fallback]], [[Fields]] »).\n...\n4. Let options be ? ToObject(options).\n...\n12. Let type be ? GetOption(options, \"type\", \"string\", « \"language\", \"region\", \"script\", \"currency\" », undefined).\n13. If type is undefined, throw a TypeError exception.\n...\n15. Let fallback be ? GetOption(options, \"fallback\", \"string\", « \"code\", \"none\" », \"code\").\n...\n\nGetOption ( options, property, type, values, fallback )\n\n1. Let value be ? Get(options, property).\n...\n","features":["Intl.DisplayNames","Symbol"]},{"path":"./test262-main/test/intl402/DisplayNames/options-fallback-invalid-throws.js","esid":" sec-Intl.DisplayNames","description":" >Return abrupt completion from an invalid fallback option\n","info":" |Intl.DisplayNames ( locales , options )\n\n1. If NewTarget is undefined, throw a TypeError exception.\n2. Let displayNames be ? OrdinaryCreateFromConstructor(NewTarget, \"%DisplayNamesPrototype%\",\n« [[InitializedDisplayNames]], [[Locale]], [[Style]], [[Type]], [[Fallback]], [[Fields]] »).\n...\n4. Let options be ? ToObject(options).\n...\n8. Let matcher be ? GetOption(options, \"localeMatcher\", \"string\", « \"lookup\", \"best fit\" », \"best fit\").\n...\n12. Let type be ? GetOption(options, \"type\", \"string\", « \"language\", \"region\", \"script\", \"currency\" », \"language\").\n13. If type is undefined, throw a TypeError exception.\n...\n15. Let fallback be ? GetOption(options, \"fallback\", \"string\", « \"code\", \"none\" », \"code\").\n...\n\nGetOption ( options, property, type, values, fallback )\n\n1. Let value be ? Get(options, property).\n2. If value is not undefined, then\n...\nc. If type is \"string\", then\ni. Let value be ? ToString(value).\nd. If values is not undefined, then\ni. If values does not contain an element equal to value, throw a RangeError exception.\n...\n","features":["Intl.DisplayNames"]},{"path":"./test262-main/test/intl402/DisplayNames/options-fallback-toString-abrupt-throws.js","esid":" sec-Intl.DisplayNames","description":" >Return abrupt completion from GetOption fallback\n","info":" |Intl.DisplayNames ( locales , options )\n\n1. If NewTarget is undefined, throw a TypeError exception.\n2. Let displayNames be ? OrdinaryCreateFromConstructor(NewTarget, \"%DisplayNamesPrototype%\",\n« [[InitializedDisplayNames]], [[Locale]], [[Style]], [[Type]], [[Fallback]], [[Fields]] »).\n...\n4. Let options be ? ToObject(options).\n...\n8. Let matcher be ? GetOption(options, \"localeMatcher\", \"string\", « \"lookup\", \"best fit\" », \"best fit\").\n...\n10. Let style be ? GetOption(options, \"style\", \"string\", « \"narrow\", \"short\", \"long\" », \"long\").\n...\n12. Let type be ? GetOption(options, \"type\", \"string\", « \"language\", \"region\", \"script\", \"currency\" », undefined).\n13. If type is undefined, throw a TypeError exception.\n\nGetOption ( options, property, type, values, fallback )\n\n1. Let value be ? Get(options, property).\n...\n","features":["Intl.DisplayNames","Symbol"]},{"path":"./test262-main/test/intl402/DisplayNames/options-fallback-valid.js","esid":" sec-Intl.DisplayNames","description":" >Valid options for fallback\n","info":" |Intl.DisplayNames ( locales , options )\n\n1. If NewTarget is undefined, throw a TypeError exception.\n2. Let displayNames be ? OrdinaryCreateFromConstructor(NewTarget, \"%DisplayNamesPrototype%\",\n« [[InitializedDisplayNames]], [[Locale]], [[Style]], [[Type]], [[Fallback]], [[Fields]] »).\n...\n4. Let options be ? ToObject(options).\n...\n8. Let matcher be ? GetOption(options, \"localeMatcher\", \"string\", « \"lookup\", \"best fit\" », \"best fit\").\n...\n10. Let style be ? GetOption(options, \"style\", \"string\", « \"narrow\", \"short\", \"long\" », \"long\").\n...\n12. Let type be ? GetOption(options, \"type\", \"string\", « \"language\", \"region\", \"script\", \"currency\" », undefined).\n13. If type is undefined, throw a TypeError exception.\n...\n15. Let fallback be ? GetOption(options, \"fallback\", \"string\", « \"code\", \"none\" », \"code\").\n...\n\nGetOption ( options, property, type, values, fallback )\n\n1. Let value be ? Get(options, property).\n...\n","features":["Intl.DisplayNames"]},{"path":"./test262-main/test/intl402/DisplayNames/options-localeMatcher-abrupt-throws.js","esid":" sec-Intl.DisplayNames","description":" >Return abrupt completion from GetOption localeMatcher\n","info":" |Intl.DisplayNames ([ locales [ , options ]])\n\n1. If NewTarget is undefined, throw a TypeError exception.\n2. Let displayNames be ? OrdinaryCreateFromConstructor(NewTarget, \"%DisplayNamesPrototype%\",\n« [[InitializedDisplayNames]], [[Locale]], [[Style]], [[Type]], [[Fallback]], [[Fields]] »).\n...\n4. If options is undefined, then\na. Let options be ObjectCreate(null).\n5. Else\na. Let options be ? ToObject(options).\n...\n8. Let matcher be ? GetOption(options, \"localeMatcher\", \"string\", « \"lookup\", \"best fit\" », \"best fit\").\n\nGetOption ( options, property, type, values, fallback )\n\n1. Let value be ? Get(options, property).\n...\n","features":["Intl.DisplayNames"]},{"path":"./test262-main/test/intl402/DisplayNames/options-localeMatcher-invalid-throws.js","esid":" sec-Intl.DisplayNames","description":" >Return abrupt completion from an invalid localeMatcher option\n","info":" |Intl.DisplayNames ([ locales [ , options ]])\n\n1. If NewTarget is undefined, throw a TypeError exception.\n2. Let displayNames be ? OrdinaryCreateFromConstructor(NewTarget, \"%DisplayNamesPrototype%\",\n« [[InitializedDisplayNames]], [[Locale]], [[Style]], [[Type]], [[Fallback]], [[Fields]] »).\n...\n4. If options is undefined, then\na. Let options be ObjectCreate(null).\n5. Else\na. Let options be ? ToObject(options).\n...\n8. Let matcher be ? GetOption(options, \"localeMatcher\", \"string\", « \"lookup\", \"best fit\" », \"best fit\").\n\nGetOption ( options, property, type, values, fallback )\n\n1. Let value be ? Get(options, property).\n2. If value is not undefined, then\n...\nc. If type is \"string\", then\ni. Let value be ? ToString(value).\nd. If values is not undefined, then\ni. If values does not contain an element equal to value, throw a RangeError exception.\n...\n","features":["Intl.DisplayNames"]},{"path":"./test262-main/test/intl402/DisplayNames/options-localeMatcher-toString-abrupt-throws.js","esid":" sec-Intl.DisplayNames","description":" >Return abrupt completion from GetOption localeMatcher\n","info":" |Intl.DisplayNames ([ locales [ , options ]])\n\n1. If NewTarget is undefined, throw a TypeError exception.\n2. Let displayNames be ? OrdinaryCreateFromConstructor(NewTarget, \"%DisplayNamesPrototype%\",\n« [[InitializedDisplayNames]], [[Locale]], [[Style]], [[Type]], [[Fallback]], [[Fields]] »).\n...\n4. If options is undefined, then\na. Let options be ObjectCreate(null).\n5. Else\na. Let options be ? ToObject(options).\n...\n8. Let matcher be ? GetOption(options, \"localeMatcher\", \"string\", « \"lookup\", \"best fit\" », \"best fit\").\n\nGetOption ( options, property, type, values, fallback )\n\n1. Let value be ? Get(options, property).\n...\n","features":["Intl.DisplayNames","Symbol"]},{"path":"./test262-main/test/intl402/DisplayNames/options-localeMatcher-valid.js","esid":" sec-Intl.DisplayNames","description":" >Valid options for localeMatcher\n","info":" |Intl.DisplayNames ( locales , options )\n\n1. If NewTarget is undefined, throw a TypeError exception.\n2. Let displayNames be ? OrdinaryCreateFromConstructor(NewTarget, \"%DisplayNamesPrototype%\",\n« [[InitializedDisplayNames]], [[Locale]], [[Style]], [[Type]], [[Fallback]], [[Fields]] »).\n...\n4. Let options be ? ToObject(options).\n...\n8. Let matcher be ? GetOption(options, \"localeMatcher\", \"string\", « \"lookup\", \"best fit\" », \"best fit\").\n...\n10. Let style be ? GetOption(options, \"style\", \"string\", « \"narrow\", \"short\", \"long\" », \"long\").\n...\n12. Let type be ? GetOption(options, \"type\", \"string\", « \"language\", \"region\", \"script\", \"currency\" », undefined).\n13. If type is undefined, throw a TypeError exception.\n...\n15. Let fallback be ? GetOption(options, \"fallback\", \"string\", « \"code\", \"none\" », \"code\").\n...\n\nGetOption ( options, property, type, values, fallback )\n\n1. Let value be ? Get(options, property).\n...\n","features":["Intl.DisplayNames"]},{"path":"./test262-main/test/intl402/DisplayNames/options-null-throws.js","esid":" sec-Intl.DisplayNames","description":" >Throws TypeError if options is null\n","info":" |Intl.DisplayNames ([ locales [ , options ]])\n\n1. If NewTarget is undefined, throw a TypeError exception.\n2. Let displayNames be ? OrdinaryCreateFromConstructor(NewTarget, \"%DisplayNamesPrototype%\",\n« [[InitializedDisplayNames]], [[Locale]], [[Style]], [[Type]], [[Fallback]], [[Fields]] »).\n...\n4. If options is undefined, then\na. Let options be ObjectCreate(null).\n5. Else\na. Let options be ? ToObject(options).\n...\n","features":["Intl.DisplayNames"]},{"path":"./test262-main/test/intl402/DisplayNames/options-random-properties-unchecked.js","esid":" sec-Intl.DisplayNames","description":" >Random options are not checked or used, including case sensitive\n","info":" |Intl.DisplayNames ( locales , options )\n\n1. If NewTarget is undefined, throw a TypeError exception.\n2. Let displayNames be ? OrdinaryCreateFromConstructor(NewTarget, \"%DisplayNamesPrototype%\",\n« [[InitializedDisplayNames]], [[Locale]], [[Style]], [[Type]], [[Fallback]], [[Fields]] »).\n...\n4. Let options be ? ToObject(options).\n...\n7. Let matcher be ? GetOption(options, \"localeMatcher\", \"string\", « \"lookup\", \"best fit\" », \"best fit\").\n...\n10. Let style be ? GetOption(options, \"style\", \"string\", « \"narrow\", \"short\", \"long\" », \"long\").\n...\n12. Let type be ? GetOption(options, \"type\", \"string\", « \"language\", \"region\", \"script\", \"currency\" », undefined).\n13. If type is undefined, throw a TypeError exception.\n...\n15. Let fallback be ? GetOption(options, \"fallback\", \"string\", « \"code\", \"none\" », \"code\").\n...\n\nGetOption ( options, property, type, values, fallback )\n\n1. Let value be ? Get(options, property).\n...\n","features":["Intl.DisplayNames"]},{"path":"./test262-main/test/intl402/DisplayNames/options-style-abrupt-throws.js","esid":" sec-Intl.DisplayNames","description":" >Return abrupt completion from GetOption style\n","info":" |Intl.DisplayNames ([ locales [ , options ]])\n\n1. If NewTarget is undefined, throw a TypeError exception.\n2. Let displayNames be ? OrdinaryCreateFromConstructor(NewTarget, \"%DisplayNamesPrototype%\",\n« [[InitializedDisplayNames]], [[Locale]], [[Style]], [[Type]], [[Fallback]], [[Fields]] »).\n...\n4. If options is undefined, then\na. Let options be ObjectCreate(null).\n5. Else\na. Let options be ? ToObject(options).\n...\n8. Let matcher be ? GetOption(options, \"localeMatcher\", \"string\", « \"lookup\", \"best fit\" », \"best fit\").\n...\n11. Let style be ? GetOption(options, \"style\", \"string\", « \"narrow\", \"short\", \"long\" », \"long\").\n...\n13. Let type be ? GetOption(options, \"type\", \"string\", « \"language\", \"region\", \"script\", \"currency\", \"weekday\", \"month\", \"quarter\", \"dayPeriod\", \"dateTimeField\" », \"language\").\n...\n15. Let fallback be ? GetOption(options, \"fallback\", \"string\", « \"code\", \"none\" », \"code\").\n...\n\nGetOption ( options, property, type, values, fallback )\n\n1. Let value be ? Get(options, property).\n...\n","features":["Intl.DisplayNames"]},{"path":"./test262-main/test/intl402/DisplayNames/options-style-invalid-throws.js","esid":" sec-Intl.DisplayNames","description":" >Return abrupt completion from an invalid style option\n","info":" |Intl.DisplayNames ([ locales [ , options ]])\n\n1. If NewTarget is undefined, throw a TypeError exception.\n2. Let displayNames be ? OrdinaryCreateFromConstructor(NewTarget, \"%DisplayNamesPrototype%\",\n« [[InitializedDisplayNames]], [[Locale]], [[Style]], [[Type]], [[Fallback]], [[Fields]] »).\n...\n4. If options is undefined, then\na. Let options be ObjectCreate(null).\n5. Else\na. Let options be ? ToObject(options).\n...\n8. Let matcher be ? GetOption(options, \"localeMatcher\", \"string\", « \"lookup\", \"best fit\" », \"best fit\").\n...\n11. Let style be ? GetOption(options, \"style\", \"string\", « \"narrow\", \"short\", \"long\" », \"long\").\n...\n\nGetOption ( options, property, type, values, fallback )\n\n1. Let value be ? Get(options, property).\n2. If value is not undefined, then\n...\nc. If type is \"string\", then\ni. Let value be ? ToString(value).\nd. If values is not undefined, then\ni. If values does not contain an element equal to value, throw a RangeError exception.\n...\n","features":["Intl.DisplayNames"]},{"path":"./test262-main/test/intl402/DisplayNames/options-style-toString-abrupt-throws.js","esid":" sec-Intl.DisplayNames","description":" >Return abrupt completion from GetOption style\n","info":" |Intl.DisplayNames ([ locales [ , options ]])\n\n1. If NewTarget is undefined, throw a TypeError exception.\n2. Let displayNames be ? OrdinaryCreateFromConstructor(NewTarget, \"%DisplayNamesPrototype%\",\n« [[InitializedDisplayNames]], [[Locale]], [[Style]], [[Type]], [[Fallback]], [[Fields]] »).\n...\n4. If options is undefined, then\na. Let options be ObjectCreate(null).\n5. Else\na. Let options be ? ToObject(options).\n...\n8. Let matcher be ? GetOption(options, \"localeMatcher\", \"string\", « \"lookup\", \"best fit\" », \"best fit\").\n...\n11. Let style be ? GetOption(options, \"style\", \"string\", « \"narrow\", \"short\", \"long\" », \"long\").\n...\n\nGetOption ( options, property, type, values, fallback )\n\n1. Let value be ? Get(options, property).\n...\n","features":["Intl.DisplayNames","Symbol"]},{"path":"./test262-main/test/intl402/DisplayNames/options-style-valid.js","esid":" sec-Intl.DisplayNames","description":" >Valid options for localeMatcher\n","info":" |Intl.DisplayNames ( locales , options )\n\n1. If NewTarget is undefined, throw a TypeError exception.\n2. Let displayNames be ? OrdinaryCreateFromConstructor(NewTarget, \"%DisplayNamesPrototype%\",\n« [[InitializedDisplayNames]], [[Locale]], [[Style]], [[Type]], [[Fallback]], [[Fields]] »).\n...\n4. Let options be ? ToObject(options).\n...\n10. Let style be ? GetOption(options, \"style\", \"string\", « \"narrow\", \"short\", \"long\" », \"long\").\n...\n12. Let type be ? GetOption(options, \"type\", \"string\", « \"language\", \"region\", \"script\", \"currency\" », undefined).\n13. If type is undefined, throw a TypeError exception.\n...\n\nGetOption ( options, property, type, values, fallback )\n\n1. Let value be ? Get(options, property).\n...\n","features":["Intl.DisplayNames"]},{"path":"./test262-main/test/intl402/DisplayNames/options-type-abrupt-throws.js","esid":" sec-Intl.DisplayNames","description":" >Return abrupt completion from GetOption type\n","info":" |Intl.DisplayNames ([ locales [ , options ]])\n\n1. If NewTarget is undefined, throw a TypeError exception.\n2. Let displayNames be ? OrdinaryCreateFromConstructor(NewTarget, \"%DisplayNamesPrototype%\",\n« [[InitializedDisplayNames]], [[Locale]], [[Style]], [[Type]], [[Fallback]], [[Fields]] »).\n...\n4. If options is undefined, then\na. Let options be ObjectCreate(null).\n5. Else\na. Let options be ? ToObject(options).\n...\n8. Let matcher be ? GetOption(options, \"localeMatcher\", \"string\", « \"lookup\", \"best fit\" », \"best fit\").\n...\n11. Let style be ? GetOption(options, \"style\", \"string\", « \"narrow\", \"short\", \"long\" », \"long\").\n...\n13. Let type be ? GetOption(options, \"type\", \"string\", « \"language\", \"region\", \"script\", \"currency\", \"weekday\", \"month\", \"quarter\", \"dayPeriod\", \"dateTimeField\" », \"language\").\n...\n15. Let fallback be ? GetOption(options, \"fallback\", \"string\", « \"code\", \"none\" », \"code\").\n...\n\nGetOption ( options, property, type, values, fallback )\n\n1. Let value be ? Get(options, property).\n...\n","features":["Intl.DisplayNames"]},{"path":"./test262-main/test/intl402/DisplayNames/options-type-invalid-throws.js","esid":" sec-Intl.DisplayNames","description":" >Return abrupt completion from an invalid type option\n","info":" |Intl.DisplayNames ( locales , options )\n\n1. If NewTarget is undefined, throw a TypeError exception.\n2. Let displayNames be ? OrdinaryCreateFromConstructor(NewTarget, \"%DisplayNamesPrototype%\",\n« [[InitializedDisplayNames]], [[Locale]], [[Style]], [[Type]], [[Fallback]], [[Fields]] »).\n...\n4. Let options be ? ToObject(options).\n...\n8. Let matcher be ? GetOption(options, \"localeMatcher\", \"string\", « \"lookup\", \"best fit\" », \"best fit\").\n...\n10. Let style be ? GetOption(options, \"style\", \"string\", « \"narrow\", \"short\", \"long\" », \"long\").\n...\n12. Let type be ? GetOption(options, \"type\", \"string\", « \"language\", \"region\", \"script\", \"currency\" », undefined).\n13. If type is undefined, throw a TypeError exception.\n...\n15. Let fallback be ? GetOption(options, \"fallback\", \"string\", « \"code\", \"none\" », \"code\").\n...\n\nGetOption ( options, property, type, values, fallback )\n\n1. Let value be ? Get(options, property).\n2. If value is not undefined, then\n...\nc. If type is \"string\", then\ni. Let value be ? ToString(value).\nd. If values is not undefined, then\ni. If values does not contain an element equal to value, throw a RangeError exception.\n...\n","features":["Intl.DisplayNames"]},{"path":"./test262-main/test/intl402/DisplayNames/options-type-toString-abrupt-throws.js","esid":" sec-Intl.DisplayNames","description":" >Return abrupt completion from GetOption type\n","info":" |Intl.DisplayNames ([ locales [ , options ]])\n\n1. If NewTarget is undefined, throw a TypeError exception.\n2. Let displayNames be ? OrdinaryCreateFromConstructor(NewTarget, \"%DisplayNamesPrototype%\",\n« [[InitializedDisplayNames]], [[Locale]], [[Style]], [[Type]], [[Fallback]], [[Fields]] »).\n...\n4. If options is undefined, then\na. Let options be ObjectCreate(null).\n5. Else\na. Let options be ? ToObject(options).\n...\n8. Let matcher be ? GetOption(options, \"localeMatcher\", \"string\", « \"lookup\", \"best fit\" », \"best fit\").\n...\n11. Let style be ? GetOption(options, \"style\", \"string\", « \"narrow\", \"short\", \"long\" », \"long\").\n...\n13. Let type be ? GetOption(options, \"type\", \"string\", « \"language\", \"region\", \"script\", \"currency\", \"weekday\", \"month\", \"quarter\", \"dayPeriod\", \"dateTimeField\" », \"language\").\n...\n15. Let fallback be ? GetOption(options, \"fallback\", \"string\", « \"code\", \"none\" », \"code\").\n...\n\nGetOption ( options, property, type, values, fallback )\n\n1. Let value be ? Get(options, property).\n...\n","features":["Intl.DisplayNames","Symbol"]},{"path":"./test262-main/test/intl402/DisplayNames/options-type-valid.js","esid":" sec-Intl.DisplayNames","description":" >Valid options for localeMatcher\n","info":" |Intl.DisplayNames ( locales , options )\n\n1. If NewTarget is undefined, throw a TypeError exception.\n2. Let displayNames be ? OrdinaryCreateFromConstructor(NewTarget, \"%DisplayNamesPrototype%\",\n« [[InitializedDisplayNames]], [[Locale]], [[Style]], [[Type]], [[Fallback]], [[Fields]] »).\n...\n4. Let options be ? ToObject(options).\n...\n12. Let type be ? GetOption(options, \"type\", \"string\", « \"language\", \"region\", \"script\", \"currency\" », undefined).\n13. If type is undefined, throw a TypeError exception.\n...\n\nGetOption ( options, property, type, values, fallback )\n\n1. Let value be ? Get(options, property).\n...\n","features":["Intl.DisplayNames"]},{"path":"./test262-main/test/intl402/DisplayNames/prop-desc.js","esid":" sec-Intl.DisplayNames","description":" >Property descriptor of Intl.DisplayNames\n","info":" |17 ECMAScript Standard Built-in Objects:\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2\nhas the attributes { [[Writable]]: true, [[Enumerable]]: false,\n[[Configurable]]: true } unless otherwise specified.\n","includes":["propertyHelper.js"],"features":["Intl.DisplayNames"]},{"path":"./test262-main/test/intl402/DisplayNames/proto-from-ctor-realm.js","esid":" sec-Intl.DisplayNames","description":" Default [[Prototype]] value derived from realm of the newTarget","info":" |Intl.DisplayNames ( locales , options )\n\n1. If NewTarget is undefined, throw a TypeError exception.\n2. Let displayNames be ? OrdinaryCreateFromConstructor(NewTarget, \"%DisplayNamesPrototype%\",\n« [[InitializedDisplayNames]], [[Locale]], [[Style]], [[Type]], [[Fallback]], [[Fields]] »).\n...\n12. Let type be ? GetOption(options, \"type\", \"string\", « \"language\", \"region\", \"script\", \"currency\" », undefined).\n13. If type is undefined, throw a TypeError exception.\n\nOrdinaryCreateFromConstructor ( constructor, intrinsicDefaultProto [ , internalSlotsList ] )\n\n...\n2. Let proto be ? GetPrototypeFromConstructor(constructor, intrinsicDefaultProto).\n3. Return ObjectCreate(proto, internalSlotsList).\n\nGetPrototypeFromConstructor ( constructor, intrinsicDefaultProto )\n\n...\n3. Let proto be ? Get(constructor, \"prototype\").\n4. If Type(proto) is not Object, then\na. Let realm be ? GetFunctionRealm(constructor).\nb. Set proto to realm's intrinsic object named intrinsicDefaultProto.\n5. Return proto.\n","features":["Intl.DisplayNames","cross-realm","Reflect"]},{"path":"./test262-main/test/intl402/DisplayNames/proto.js","esid":" sec-Intl.DisplayNames","description":" >The internal prototype of Intl.DisplayNames\n","features":["Intl.DisplayNames"]},{"path":"./test262-main/test/intl402/DisplayNames/prototype/Symbol.toStringTag.js","esid":" sec-intl.DisplayNames.prototype-@@tostringtag","description":" >Property descriptor of DisplayNames.prototype[@@toStringTag]\n","info":" |The initial value of the @@toStringTag property is the string value \"Intl.DisplayNames\".\n\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["Intl.DisplayNames","Symbol.toStringTag"]},{"path":"./test262-main/test/intl402/DisplayNames/prototype/prop-desc.js","esid":" sec-Intl.DisplayNames.prototype","description":" >Property descriptor of Intl.DisplayNames.prototype\n","info":" |The value of Intl.DisplayNames.prototype is %DisplayNamesPrototype%.\n\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\n","includes":["propertyHelper.js"],"features":["Intl.DisplayNames"]},{"path":"./test262-main/test/intl402/DisplayNames/prototype/resolvedOptions/default-option-values.js","esid":" sec-Intl.DisplayNames.prototype.resolvedOptions","description":" >Default values for each option\n","info":" |Intl.DisplayNames.prototype.resolvedOptions ()\n\n1. Let pr be the this value.\n2. If Type(pr) is not Object or pr does not have an [[InitializedDisplayNames]] internal slot,\nthrow a TypeError exception.\n3. Let options be ! ObjectCreate(%ObjectPrototype%).\n4. For each row of Table 6, except the header row, in table order, do\na. Let p be the Property value of the current row.\nb. Let v be the value of pr's internal slot whose name is the Internal Slot value of the current row.\nc. If v is not undefined, then\ni. Perform ! CreateDataPropertyOrThrow(options, p, v).\n6. Return options.\n\nTable 6: Resolved Options of DisplayNames Instances\n\n[[Locale]]: \"locale\"\n[[Style]]: \"style\"\n[[Type]]: \"type\"\n[[Fallback]]: \"fallback\"\n\nIntl.DisplayNames ( locales , options )\n\n...\n7. Let matcher be ? GetOption(options, \"localeMatcher\", \"string\", « \"lookup\", \"best fit\" », \"best fit\").\n...\n9. Let r be ResolveLocale(%DisplayNames%.[[AvailableLocales]], requestedLocales, opt,\n%DisplayNames%.[[RelevantExtensionKeys]]).\n10. Let style be ? GetOption(options, \"style\", \"string\", « \"narrow\", \"short\", \"long\" », \"long\").\n...\n12. Let type be ? GetOption(options, \"type\", \"string\", « \"language\", \"region\", \"script\", \"currency\" », undefined).\n13. If type is undefined, throw a TypeError exception.\n...\n15. Let fallback be ? GetOption(options, \"fallback\", \"string\", « \"code\", \"none\" », \"code\").\n...\n17. Set displayNames.[[Locale]] to the value of r.[[Locale]].\n...\n\nCreateDataProperty ( O, P, V )\n\n...\n3. Let newDesc be the PropertyDescriptor { [[Value]]: V, [[Writable]]: true, [[Enumerable]]: true,\n[[Configurable]]: true }.\n...\n","features":["Intl.DisplayNames"],"includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/DisplayNames/prototype/resolvedOptions/length.js","esid":" sec-Intl.DisplayNames.prototype.resolvedOptions","description":" >Intl.DisplayNames.prototype.resolvedOptions.length is 0.\n","info":" |ECMAScript Standard Built-in Objects:\n\nEvery built-in function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description. Optional parameters\n(which are indicated with brackets: [ ]) or rest parameters (which\nare shown using the form «...name») are not included in the default\nargument count.\n\nUnless otherwise specified, the length property of a built-in function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["Intl.DisplayNames"]},{"path":"./test262-main/test/intl402/DisplayNames/prototype/resolvedOptions/name.js","esid":" sec-Intl.DisplayNames.prototype.resolvedOptions","description":" >Intl.DisplayNames.prototype.resolvedOptions.name is \"resolvedOptions\".\n","info":" |17 ECMAScript Standard Built-in Objects:\n\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value is a\nString.\n\nUnless otherwise specified, the name property of a built-in Function object,\nif it exists, has the attributes { [[Writable]]: false, [[Enumerable]]:\nfalse, [[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["Intl.DisplayNames"]},{"path":"./test262-main/test/intl402/DisplayNames/prototype/resolvedOptions/option-fallback.js","esid":" sec-Intl.DisplayNames.prototype.resolvedOptions","description":" >Values for the fallback option\n","info":" |Intl.DisplayNames.prototype.resolvedOptions ()\n\n1. Let pr be the this value.\n2. If Type(pr) is not Object or pr does not have an [[InitializedDisplayNames]] internal slot,\nthrow a TypeError exception.\n3. Let options be ! ObjectCreate(%ObjectPrototype%).\n4. For each row of Table 6, except the header row, in table order, do\na. Let p be the Property value of the current row.\nb. Let v be the value of pr's internal slot whose name is the Internal Slot value of the current row.\nc. If v is not undefined, then\ni. Perform ! CreateDataPropertyOrThrow(options, p, v).\n6. Return options.\n\nTable 6: Resolved Options of DisplayNames Instances\n\n[[Locale]]: \"locale\"\n[[Style]]: \"style\"\n[[Type]]: \"type\"\n[[Fallback]]: \"fallback\"\n\nIntl.DisplayNames ( locales , options )\n\n...\n10. Let r be ResolveLocale(%DisplayNames%.[[AvailableLocales]], requestedLocales, opt,\n%DisplayNames%.[[RelevantExtensionKeys]]).\n11. Let style be ? GetOption(options, \"style\", \"string\", « \"narrow\", \"short\", \"long\" », \"long\").\n...\n12. Let type be ? GetOption(options, \"type\", \"string\", « \"language\", \"region\", \"script\", \"currency\" », undefined).\n13. If type is undefined, throw a TypeError exception.\n...\n15. Let fallback be ? GetOption(options, \"fallback\", \"string\", « \"code\", \"none\" », \"code\").\n...\n17. Set displayNames.[[Locale]] to the value of r.[[Locale]].\n...\n\nCreateDataProperty ( O, P, V )\n\n...\n3. Let newDesc be the PropertyDescriptor { [[Value]]: V, [[Writable]]: true, [[Enumerable]]: true,\n[[Configurable]]: true }.\n...\n","features":["Intl.DisplayNames"],"includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/DisplayNames/prototype/resolvedOptions/option-style.js","esid":" sec-Intl.DisplayNames.prototype.resolvedOptions","description":" >Values for the style option\n","info":" |Intl.DisplayNames.prototype.resolvedOptions ()\n\n1. Let pr be the this value.\n2. If Type(pr) is not Object or pr does not have an [[InitializedDisplayNames]] internal slot,\nthrow a TypeError exception.\n3. Let options be ! ObjectCreate(%ObjectPrototype%).\n4. For each row of Table 6, except the header row, in table order, do\na. Let p be the Property value of the current row.\nb. Let v be the value of pr's internal slot whose name is the Internal Slot value of the current row.\nc. If v is not undefined, then\ni. Perform ! CreateDataPropertyOrThrow(options, p, v).\n6. Return options.\n\nTable 6: Resolved Options of DisplayNames Instances\n\n[[Locale]]: \"locale\"\n[[Style]]: \"style\"\n[[Type]]: \"type\"\n[[Fallback]]: \"fallback\"\n\nIntl.DisplayNames ( locales , options )\n\n...\n8. Let matcher be ? GetOption(options, \"localeMatcher\", \"string\", « \"lookup\", \"best fit\" », \"best fit\").\n...\n10. Let r be ResolveLocale(%DisplayNames%.[[AvailableLocales]], requestedLocales, opt,\n%DisplayNames%.[[RelevantExtensionKeys]]).\n10. Let style be ? GetOption(options, \"style\", \"string\", « \"narrow\", \"short\", \"long\" », \"long\").\n...\n12. Let type be ? GetOption(options, \"type\", \"string\", « \"language\", \"region\", \"script\", \"currency\" », undefined).\n13. If type is undefined, throw a TypeError exception.\n...\n15. Let fallback be ? GetOption(options, \"fallback\", \"string\", « \"code\", \"none\" », \"code\").\n...\n17. Set displayNames.[[Locale]] to the value of r.[[Locale]].\n...\n\nCreateDataProperty ( O, P, V )\n\n...\n3. Let newDesc be the PropertyDescriptor { [[Value]]: V, [[Writable]]: true, [[Enumerable]]: true,\n[[Configurable]]: true }.\n...\n","features":["Intl.DisplayNames"],"includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/DisplayNames/prototype/resolvedOptions/option-type.js","esid":" sec-Intl.DisplayNames.prototype.resolvedOptions","description":" >Values for the type option\n","info":" |Intl.DisplayNames.prototype.resolvedOptions ()\n\n1. Let pr be the this value.\n2. If Type(pr) is not Object or pr does not have an [[InitializedDisplayNames]] internal slot,\nthrow a TypeError exception.\n3. Let options be ! ObjectCreate(%ObjectPrototype%).\n4. For each row of Table 6, except the header row, in table order, do\na. Let p be the Property value of the current row.\nb. Let v be the value of pr's internal slot whose name is the Internal Slot value of the current row.\nc. If v is not undefined, then\ni. Perform ! CreateDataPropertyOrThrow(options, p, v).\n6. Return options.\n\nTable 6: Resolved Options of DisplayNames Instances\n\n[[Locale]]: \"locale\"\n[[Style]]: \"style\"\n[[Type]]: \"type\"\n[[Fallback]]: \"fallback\"\n\nIntl.DisplayNames ([ locales [ , options ]])\n\n...\n8. Let matcher be ? GetOption(options, \"localeMatcher\", \"string\", « \"lookup\", \"best fit\" », \"best fit\").\n...\n10. Let r be ResolveLocale(%DisplayNames%.[[AvailableLocales]], requestedLocales, opt,\n%DisplayNames%.[[RelevantExtensionKeys]]).\n11. Let style be ? GetOption(options, \"style\", \"string\", « \"narrow\", \"short\", \"long\" », \"long\").\n...\n13. Let type be ? GetOption(options, \"type\", \"string\", « \"language\", \"region\", \"script\", \"currency\"»,\n\"language\").\n...\n15. Let fallback be ? GetOption(options, \"fallback\", \"string\", « \"code\", \"none\" », \"code\").\n...\n17. Set displayNames.[[Locale]] to the value of r.[[Locale]].\n...\n\nCreateDataProperty ( O, P, V )\n\n...\n3. Let newDesc be the PropertyDescriptor { [[Value]]: V, [[Writable]]: true, [[Enumerable]]: true,\n[[Configurable]]: true }.\n...\n","features":["Intl.DisplayNames"],"includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/DisplayNames/prototype/resolvedOptions/prop-desc.js","esid":" sec-Intl.DisplayNames.prototype.resolvedOptions","description":" >Property descriptor of Intl.DisplayNames.prototype.resolvedOptions\n","info":" |17 ECMAScript Standard Built-in Objects:\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2\nhas the attributes { [[Writable]]: true, [[Enumerable]]: false,\n[[Configurable]]: true } unless otherwise specified.\n","includes":["propertyHelper.js"],"features":["Intl.DisplayNames"]},{"path":"./test262-main/test/intl402/DisplayNames/prototype/resolvedOptions/return-object.js","esid":" sec-Intl.DisplayNames.prototype.resolvedOptions","description":" >Returns a new ordinary object on each call, with data properties containing values from internals\n","info":" |Intl.DisplayNames.prototype.resolvedOptions ()\n\n1. Let pr be the this value.\n2. If Type(pr) is not Object or pr does not have an [[InitializedDisplayNames]] internal slot,\nthrow a TypeError exception.\n3. Let options be ! ObjectCreate(%ObjectPrototype%).\n4. For each row of Table 6, except the header row, in table order, do\na. Let p be the Property value of the current row.\nb. Let v be the value of pr's internal slot whose name is the Internal Slot value of the current row.\nc. If v is not undefined, then\ni. Perform ! CreateDataPropertyOrThrow(options, p, v).\n6. Return options.\n\nTable 6: Resolved Options of DisplayNames Instances\n\n[[Locale]]: \"locale\"\n[[Style]]: \"style\"\n[[Type]]: \"type\"\n[[Fallback]]: \"fallback\"\n\nIntl.DisplayNames ( locales , options )\n\n...\n7. Let matcher be ? GetOption(options, \"localeMatcher\", \"string\", « \"lookup\", \"best fit\" », \"best fit\").\n...\n9. Let r be ResolveLocale(%DisplayNames%.[[AvailableLocales]], requestedLocales, opt,\n%DisplayNames%.[[RelevantExtensionKeys]]).\n10. Let style be ? GetOption(options, \"style\", \"string\", « \"narrow\", \"short\", \"long\" », \"long\").\n...\n12. Let type be ? GetOption(options, \"type\", \"string\", « \"language\", \"region\", \"script\", \"currency\" », undefined).\n13. If type is undefined, throw a TypeError exception.\n...\n15. Let fallback be ? GetOption(options, \"fallback\", \"string\", « \"code\", \"none\" », \"code\").\n...\n17. Set displayNames.[[Locale]] to the value of r.[[Locale]].\n...\n\nCreateDataProperty ( O, P, V )\n\n...\n3. Let newDesc be the PropertyDescriptor { [[Value]]: V, [[Writable]]: true, [[Enumerable]]: true,\n[[Configurable]]: true }.\n...\n","features":["Intl.DisplayNames","Reflect"],"includes":["propertyHelper.js","compareArray.js"]},{"path":"./test262-main/test/intl402/DisplayNames/prototype/resolvedOptions/this-not-object-throws.js","esid":" sec-Intl.DisplayNames.prototype.resolvedOptions","description":" >Throws a TypeError if this is not Object.\n","info":" |Intl.DisplayNames.prototype.resolvedOptions ()\n\n1. Let pr be the this value.\n2. If Type(pr) is not Object or pr does not have an [[InitializedDisplayNames]] internal slot,\nthrow a TypeError exception.\n...\n","features":["Intl.DisplayNames","Symbol"]},{"path":"./test262-main/test/intl402/DisplayNames/prototype/resolvedOptions/this-object-lacks-internal-throws.js","esid":" sec-Intl.DisplayNames.prototype.resolvedOptions","description":" >Throws a TypeError if this does not have an [[InitializedDisplayNames]] internal slot.\n","info":" |Intl.DisplayNames.prototype.resolvedOptions ()\n\n1. Let pr be the this value.\n2. If Type(pr) is not Object or pr does not have an [[InitializedDisplayNames]] internal slot,\nthrow a TypeError exception.\n...\n","features":["Intl.DisplayNames"]},{"path":"./test262-main/test/intl402/DisplayNames/undefined-newtarget-throws.js","esid":" sec-Intl.DisplayNames","description":" >Throws a TypeError if Intl.DisplayNames is called as a function.\n","info":" |Intl.DisplayNames ([ locales [ , options ]])\n\n1. If NewTarget is undefined, throw a TypeError exception.\n...\n","features":["Intl.DisplayNames"]},{"path":"./test262-main/test/intl402/Intl/builtin.js","esid":" intl-object","description":" >Tests that Intl meets the requirements for built-in objects\ndefined by the introduction of chapter 17 of the ECMAScript\nLanguage Specification.\n","author":" Norbert Lindenberg"},{"path":"./test262-main/test/intl402/Intl/getCanonicalLocales/Locale-object.js","esid":" sec-intl.getcanonicallocales","description":" Tests for Locale objects in the argument to getCanonicalLocales","info":" |CanonicalizeLocaleList ( locales )\n7. c. iii. If Type(kValue) is Object and kValue has an [[InitializedLocale]] internal slot, then\n1. Let tag be kValue.[[Locale]].\n","includes":["compareArray.js"],"features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Intl/getCanonicalLocales/canonicalized-tags.js","esid":" sec-intl.getcanonicallocales","description":" >Call Intl.getCanonicalLocales function with valid language tags.\n","info":" |8.2.1 Intl.getCanonicalLocales (locales)\n1. Let ll be ? CanonicalizeLocaleList(locales).\n2. Return CreateArrayFromList(ll).\n\n9.2.1 CanonicalizeLocaleList (locales)\n...\n7. Repeat, while k < len\na. Let Pk be ToString(k).\nb. Let kPresent be ? HasProperty(O, Pk).\nc. If kPresent is true, then\ni. Let kValue be ? Get(O, Pk).\n...\niii. Let tag be ? ToString(kValue).\n...\nv. Let canonicalizedTag be CanonicalizeLanguageTag(tag).\nvi. If canonicalizedTag is not an element of seen, append canonicalizedTag as the last element of seen.\n...\n","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/Intl/getCanonicalLocales/canonicalized-unicode-ext-seq.js","esid":" sec-intl.getcanonicallocales","description":" >Implementations are allowed to canonicalize extension subtag sequences.\n","info":" |8.2.1 Intl.getCanonicalLocales (locales)\n1. Let ll be ? CanonicalizeLocaleList(locales).\n2. Return CreateArrayFromList(ll).\n\n9.2.1 CanonicalizeLocaleList (locales)\n...\n7. Repeat, while k < len\n...\nc. If kPresent is true, then\n...\nv. Let canonicalizedTag be CanonicalizeLanguageTag(tag).\n...\n\n6.2.3 CanonicalizeLanguageTag (locale)\nThe specifications for extensions to BCP 47 language tags, such as\nRFC 6067, may include canonicalization rules for the extension subtag\nsequences they define that go beyond the canonicalization rules of\nRFC 5646 section 4.5. Implementations are allowed, but not required,\nto apply these additional rules.\n"},{"path":"./test262-main/test/intl402/Intl/getCanonicalLocales/complex-language-subtag-replacement.js","esid":" sec-intl.getcanonicallocales","description":" >Assert non-simple language subtag replacements work as expected.\n","info":" |8.2.1 Intl.getCanonicalLocales (locales)\n1. Let ll be ? CanonicalizeLocaleList(locales).\n2. Return CreateArrayFromList(ll).\n\n9.2.1 CanonicalizeLocaleList (locales)\n...\n7. Repeat, while k < len\n...\nc. If kPresent is true, then\n...\nvi. Let canonicalizedTag be CanonicalizeUnicodeLocaleId(tag).\n...\n\nUTS 35, §3.2.1 Canonical Unicode Locale Identifiers\n\n- Replace aliases in the unicode_language_id and tlang (if any) using the following process:\n- If the language subtag matches the type attribute of a languageAlias element in\nSupplemental Data, replace the language subtag with the replacement value.\n1. If there are additional subtags in the replacement value, add them to the result,\nbut only if there is no corresponding subtag already in the tag.\n\n","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/Intl/getCanonicalLocales/complex-region-subtag-replacement.js","esid":" sec-intl.getcanonicallocales","description":" >Assert non-simple region subtag replacements work as expected.\n","info":" |8.2.1 Intl.getCanonicalLocales (locales)\n1. Let ll be ? CanonicalizeLocaleList(locales).\n2. Return CreateArrayFromList(ll).\n\n9.2.1 CanonicalizeLocaleList (locales)\n...\n7. Repeat, while k < len\n...\nc. If kPresent is true, then\n...\nvi. Let canonicalizedTag be CanonicalizeUnicodeLocaleId(tag).\n...\n\nUTS 35, §3.2.1 Canonical Unicode Locale Identifiers\n\n- Replace aliases in the unicode_language_id and tlang (if any) using the following process:\n- If the region subtag matches the type attribute of a territoryAlias element in\nSupplemental Data, replace the language subtag with the replacement value, as follows:\n1. If there is a single territory in the replacement, use it.\n2. If there are multiple territories:\n1. Look up the most likely territory for the base language code (and script, if there is one).\n2. If that likely territory is in the list, use it.\n3. Otherwise, use the first territory in the list.\n\n","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/Intl/getCanonicalLocales/descriptor.js","esid":" sec-intl.getcanonicallocales","description":" >Intl.getCanonicalLocales property attributes.\n","info":" |8.2.1 Intl.getCanonicalLocales (locales)\n\n17 ECMAScript Standard Built-in Objects:\nEvery other data property described in clauses 18 through 26 and in\nAnnex B.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false,\n[[Configurable]]: true } unless otherwise specified.\n","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/Intl/getCanonicalLocales/duplicates.js","esid":" sec-intl.getcanonicallocales","description":" Tests the getCanonicalLocales function for duplicate locales scenario.","info":" |8.2.1 Intl.getCanonicalLocales (locales)\n1. Let ll be ? CanonicalizeLocaleList(locales).\n2. Return CreateArrayFromList(ll).\n","includes":["compareArray.js"]},{"path":"./test262-main/test/intl402/Intl/getCanonicalLocales/elements-not-reordered.js","esid":" sec-intl.getcanonicallocales","description":" >Language tags are not reordered.\n","info":" |8.2.1 Intl.getCanonicalLocales (locales)\n1. Let ll be ? CanonicalizeLocaleList(locales).\n2. Return CreateArrayFromList(ll).\n\n9.2.1 CanonicalizeLocaleList (locales)\n...\n7. Repeat, while k < len\n...\nc. If kPresent is true, then\n...\nvi. If canonicalizedTag is not an element of seen, append canonicalizedTag as the last element of seen.\n...\n"},{"path":"./test262-main/test/intl402/Intl/getCanonicalLocales/error-cases.js","esid":" sec-intl.getcanonicallocales","description":" Tests the getCanonicalLocales function for error tags.","info":" |8.2.1 Intl.getCanonicalLocales (locales)\n1. Let ll be ? CanonicalizeLocaleList(locales).\n2. Return CreateArrayFromList(ll).\n","features":["Symbol"]},{"path":"./test262-main/test/intl402/Intl/getCanonicalLocales/get-locale.js","esid":" sec-intl.getcanonicallocales","description":" Test Intl.getCanonicalLocales for step 7.c.i. ","info":" |9.2.1 CanonicalizeLocaleList (locales)\n7. Repeat, while k < len.\nc. If kPresent is true, then\ni. Let kValue be ? Get(O, Pk).\n"},{"path":"./test262-main/test/intl402/Intl/getCanonicalLocales/getCanonicalLocales.js","esid":" sec-intl.getcanonicallocales","description":" Property type and descriptor. ","info":" |8.2.1 Intl.getCanonicalLocales (locales)\n1. Let ll be ? CanonicalizeLocaleList(locales).\n2. Return CreateArrayFromList(ll).\n","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/Intl/getCanonicalLocales/grandfathered.js","esid":" sec-intl.getcanonicallocales","description":" >Verifies canonicalization of specific tags.\n"},{"path":"./test262-main/test/intl402/Intl/getCanonicalLocales/has-property.js","esid":" sec-intl.getcanonicallocales","description":" Test Intl.getCanonicalLocales.name for step 7.b. ","info":" |9.2.1 CanonicalizeLocaleList (locales)\n7. Repeat, while k < len.\nb. Let kPresent be HasProperty(O, Pk).\n","features":["Proxy"]},{"path":"./test262-main/test/intl402/Intl/getCanonicalLocales/invalid-tags.js","esid":" sec-intl.getcanonicallocales","description":" >Throws a RangeError if the language tag is invalid.\n","info":" |8.2.1 Intl.getCanonicalLocales (locales)\n1. Let ll be ? CanonicalizeLocaleList(locales).\n...\n\n9.2.1 CanonicalizeLocaleList (locales)\n...\n7. Repeat, while k < len\n...\nc. If kPresent is true, then\n...\niv. If IsStructurallyValidLanguageTag(tag) is false, throw a RangeError exception.\n...\n","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/Intl/getCanonicalLocales/length.js","esid":" sec-intl.getcanonicallocales","description":" Intl.getCanonicalLocales.length. ","info":" |8.2.1 Intl.getCanonicalLocales (locales)\n1. Let ll be ? CanonicalizeLocaleList(locales).\n2. Return CreateArrayFromList(ll).\n","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/Intl/getCanonicalLocales/locales-is-not-a-string.js","esid":" sec-intl.getcanonicallocales","description":" Tests for scenario where locales is not a string","info":" |8.2.1 Intl.getCanonicalLocales (locales)\n1. Let ll be ? CanonicalizeLocaleList(locales).\n2. Return CreateArrayFromList(ll).\n","includes":["compareArray.js"],"features":["Symbol"]},{"path":"./test262-main/test/intl402/Intl/getCanonicalLocales/main.js","esid":" sec-intl.getcanonicallocales","description":" Tests for existance and behavior of Intl.getCanonicalLocales","info":" |8.2.1 Intl.getCanonicalLocales (locales)\n1. Let ll be ? CanonicalizeLocaleList(locales).\n2. Return CreateArrayFromList(ll).\n","includes":["compareArray.js"]},{"path":"./test262-main/test/intl402/Intl/getCanonicalLocales/name.js","esid":" sec-intl.getcanonicallocales","description":" Intl.getCanonicalLocales.name value and descriptor. ","info":" |8.2.1 Intl.getCanonicalLocales (locales)\n1. Let ll be ? CanonicalizeLocaleList(locales).\n2. Return CreateArrayFromList(ll).\n","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/Intl/getCanonicalLocales/non-iana-canon.js","esid":" sec-intl.getcanonicallocales","description":" >Verifies canonicalization, of specific tags.\n","info":" |ApplyOptionsToTag( tag, options )\n10. Return CanonicalizeLanguageTag(tag).\n"},{"path":"./test262-main/test/intl402/Intl/getCanonicalLocales/overriden-arg-length.js","esid":" sec-intl.getcanonicallocales","description":" Test Intl.getCanonicalLocales for step 5. ","info":" |9.2.1 CanonicalizeLocaleList (locales)\n5. Let len be ? ToLength(? Get(O, \"length\")).\n","includes":["compareArray.js"],"features":["Symbol"]},{"path":"./test262-main/test/intl402/Intl/getCanonicalLocales/overriden-push.js","esid":" sec-intl.getcanonicallocales","description":" Tests the getCanonicalLocales function for overridden Array.push().","info":" |8.2.1 Intl.getCanonicalLocales (locales)\n1. Let ll be ? CanonicalizeLocaleList(locales).\n2. Return CreateArrayFromList(ll).\n","includes":["compareArray.js"]},{"path":"./test262-main/test/intl402/Intl/getCanonicalLocales/preferred-grandfathered.js","esid":" sec-intl.getcanonicallocales","description":" >Call Intl.getCanonicalLocales function with grandfathered language tags.\n","info":" |8.2.1 Intl.getCanonicalLocales (locales)\n1. Let ll be ? CanonicalizeLocaleList(locales).\n2. Return CreateArrayFromList(ll).\n\n9.2.1 CanonicalizeLocaleList (locales)\n...\n7. Repeat, while k < len\n...\nc. If kPresent is true, then\n...\nv. Let canonicalizedTag be CanonicalizeLanguageTag(tag).\n...\n\n6.2.3 CanonicalizeLanguageTag ( locale )\nThe CanonicalizeLanguageTag abstract operation returns the canonical and case-regularized form\nof the locale argument (which must be a String value that is a structurally valid Unicode\nBCP 47 Locale Identifier as verified by the IsStructurallyValidLanguageTag abstract operation).\nA conforming implementation shall take the steps specified in the “BCP 47 Language Tag to\nUnicode BCP 47 Locale Identifier” algorithm, from Unicode Technical Standard #35 LDML\n§ 3.3.1 BCP 47 Language Tag Conversion.\n\n","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/Intl/getCanonicalLocales/preferred-variant.js","esid":" sec-intl.getcanonicallocales","description":" >Call Intl.getCanonicalLocales function with grandfathered language tags.\n","info":" |8.2.1 Intl.getCanonicalLocales (locales)\n1. Let ll be ? CanonicalizeLocaleList(locales).\n2. Return CreateArrayFromList(ll).\n\n9.2.1 CanonicalizeLocaleList (locales)\n...\n7. Repeat, while k < len\n...\nc. If kPresent is true, then\n...\nv. Let canonicalizedTag be CanonicalizeLanguageTag(tag).\n...\n\n6.2.3 CanonicalizeLanguageTag ( locale )\nThe CanonicalizeLanguageTag abstract operation returns the canonical and case-regularized\nform of the locale argument (which must be a String value that is a structurally valid\nBCP 47 language tag as verified by the IsStructurallyValidLanguageTag abstract operation).\nA conforming implementation shall take the steps specified in RFC 5646 section 4.5, or\nsuccessor, to bring the language tag into canonical form, and to regularize the case of\nthe subtags. Furthermore, a conforming implementation shall not take the steps to bring\na language tag into \"extlang form\", nor shall it reorder variant subtags.\n\nThe specifications for extensions to BCP 47 language tags, such as RFC 6067, may include\ncanonicalization rules for the extension subtag sequences they define that go beyond the\ncanonicalization rules of RFC 5646 section 4.5. Implementations are allowed, but not\nrequired, to apply these additional rules.\n\n","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/Intl/getCanonicalLocales/returned-object-is-an-array.js","esid":" sec-intl.getcanonicallocales","description":" Tests that the value returned by getCanonicalLocales is an Array.","info":" |8.2.1 Intl.getCanonicalLocales (locales)\n1. Let ll be ? CanonicalizeLocaleList(locales).\n2. Return CreateArrayFromList(ll).\n"},{"path":"./test262-main/test/intl402/Intl/getCanonicalLocales/returned-object-is-mutable.js","esid":" sec-intl.getcanonicallocales","description":" >Tests that the value returned by getCanonicalLocales is a mutable array.\n","info":" |8.2.1 Intl.getCanonicalLocales (locales)\n1. Let ll be ? CanonicalizeLocaleList(locales).\n2. Return CreateArrayFromList(ll).\n","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/Intl/getCanonicalLocales/to-string.js","esid":" sec-intl.getcanonicallocales","description":" Test Intl.getCanonicalLocales.name for step 7.c.iii ","info":" |9.2.1 CanonicalizeLocaleList (locales)\n7. Repeat, while k < len.\nc. If kPresent is true, then\niii. Let tag be ? ToString(kValue).\n","includes":["compareArray.js"]},{"path":"./test262-main/test/intl402/Intl/getCanonicalLocales/transformed-ext-canonical.js","esid":" sec-intl.getcanonicallocales","description":" >Test canonicalisation within transformed extension subtags.\n","info":" |8.2.1 Intl.getCanonicalLocales (locales)\n1. Let ll be ? CanonicalizeLocaleList(locales).\n2. Return CreateArrayFromList(ll).\n\n9.2.1 CanonicalizeLocaleList (locales)\n...\n7. Repeat, while k < len\n...\nc. If kPresent is true, then\n...\nv. If IsStructurallyValidLanguageTag(tag) is false, throw a RangeError exception.\nvi. Let canonicalizedTag be CanonicalizeUnicodeLocaleId(tag).\n...\n\n","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/Intl/getCanonicalLocales/transformed-ext-invalid.js","esid":" sec-intl.getcanonicallocales","description":" >A RangeError is thrown when a language tag includes an invalid transformed extension subtag.\n","info":" |8.2.1 Intl.getCanonicalLocales (locales)\n1. Let ll be ? CanonicalizeLocaleList(locales).\n2. Return CreateArrayFromList(ll).\n\n9.2.1 CanonicalizeLocaleList (locales)\n...\n7. Repeat, while k < len\n...\nc. If kPresent is true, then\n...\nv. If IsStructurallyValidLanguageTag(tag) is false, throw a RangeError exception.\n...\n\n","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/Intl/getCanonicalLocales/transformed-ext-valid.js","esid":" sec-intl.getcanonicallocales","description":" >No RangeError is thrown when a language tag includes a valid transformed extension subtag.\n","info":" |8.2.1 Intl.getCanonicalLocales (locales)\n1. Let ll be ? CanonicalizeLocaleList(locales).\n2. Return CreateArrayFromList(ll).\n\n9.2.1 CanonicalizeLocaleList (locales)\n...\n7. Repeat, while k < len\n...\nc. If kPresent is true, then\n...\nv. If IsStructurallyValidLanguageTag(tag) is false, throw a RangeError exception.\nvi. Let canonicalizedTag be CanonicalizeUnicodeLocaleId(tag).\n...\n\n","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/Intl/getCanonicalLocales/unicode-ext-canonicalize-calendar.js","esid":" sec-intl.getcanonicallocales","description":" >Test Unicode extension subtag canonicalisation for the \"ca\" extension key.\n","info":" |8.2.1 Intl.getCanonicalLocales (locales)\n1. Let ll be ? CanonicalizeLocaleList(locales).\n2. Return CreateArrayFromList(ll).\n\n9.2.1 CanonicalizeLocaleList (locales)\n...\n7. Repeat, while k < len\n...\nc. If kPresent is true, then\n...\nv. If IsStructurallyValidLanguageTag(tag) is false, throw a RangeError exception.\nvi. Let canonicalizedTag be CanonicalizeUnicodeLocaleId(tag).\n...\n\nUTS 35, §3.2.1 Canonical Unicode Locale Identifiers\nUse the bcp47 data to replace keys, types, tfields, and tvalues by their canonical forms.\nSee Section 3.6.4 U Extension Data Files) and Section 3.7.1 T Extension Data Files. The\naliases are in the alias attribute value, while the canonical is in the name attribute value.\n","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/Intl/getCanonicalLocales/unicode-ext-canonicalize-col-strength.js","esid":" sec-intl.getcanonicallocales","description":" >Test Unicode extension subtag canonicalisation for the \"ks\" extension key.\n","info":" |8.2.1 Intl.getCanonicalLocales (locales)\n1. Let ll be ? CanonicalizeLocaleList(locales).\n2. Return CreateArrayFromList(ll).\n\n9.2.1 CanonicalizeLocaleList (locales)\n...\n7. Repeat, while k < len\n...\nc. If kPresent is true, then\n...\nv. If IsStructurallyValidLanguageTag(tag) is false, throw a RangeError exception.\nvi. Let canonicalizedTag be CanonicalizeUnicodeLocaleId(tag).\n...\n\nUTS 35, §3.2.1 Canonical Unicode Locale Identifiers\nUse the bcp47 data to replace keys, types, tfields, and tvalues by their canonical forms.\nSee Section 3.6.4 U Extension Data Files) and Section 3.7.1 T Extension Data Files. The\naliases are in the alias attribute value, while the canonical is in the name attribute value.\n","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/Intl/getCanonicalLocales/unicode-ext-canonicalize-measurement-system.js","esid":" sec-intl.getcanonicallocales","description":" >Test Unicode extension subtag canonicalisation for the \"ms\" extension key.\n","info":" |8.2.1 Intl.getCanonicalLocales (locales)\n1. Let ll be ? CanonicalizeLocaleList(locales).\n2. Return CreateArrayFromList(ll).\n\n9.2.1 CanonicalizeLocaleList (locales)\n...\n7. Repeat, while k < len\n...\nc. If kPresent is true, then\n...\nv. If IsStructurallyValidLanguageTag(tag) is false, throw a RangeError exception.\nvi. Let canonicalizedTag be CanonicalizeUnicodeLocaleId(tag).\n...\n\nUTS 35, §3.2.1 Canonical Unicode Locale Identifiers\nUse the bcp47 data to replace keys, types, tfields, and tvalues by their canonical forms.\nSee Section 3.6.4 U Extension Data Files) and Section 3.7.1 T Extension Data Files. The\naliases are in the alias attribute value, while the canonical is in the name attribute value.\n","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/Intl/getCanonicalLocales/unicode-ext-canonicalize-region.js","esid":" sec-intl.getcanonicallocales","description":" >Test Unicode extension subtag canonicalisation for the \"rg\" extension key.\n","info":" |8.2.1 Intl.getCanonicalLocales (locales)\n1. Let ll be ? CanonicalizeLocaleList(locales).\n2. Return CreateArrayFromList(ll).\n\n9.2.1 CanonicalizeLocaleList (locales)\n...\n7. Repeat, while k < len\n...\nc. If kPresent is true, then\n...\nv. If IsStructurallyValidLanguageTag(tag) is false, throw a RangeError exception.\nvi. Let canonicalizedTag be CanonicalizeUnicodeLocaleId(tag).\n...\n\nUTS 35, §3.2.1 Canonical Unicode Locale Identifiers\nUse the bcp47 data to replace keys, types, tfields, and tvalues by their canonical forms.\nSee Section 3.6.4 U Extension Data Files) and Section 3.7.1 T Extension Data Files. The\naliases are in the alias attribute value, while the canonical is in the name attribute value.\n\nReplace aliases in special key values:\nIf there is an 'sd' or 'rg' key, replace any subdivision alias in its value in the same way,\nusing subdivisionAlias data.\n","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/Intl/getCanonicalLocales/unicode-ext-canonicalize-subdivision.js","esid":" sec-intl.getcanonicallocales","description":" >Test Unicode extension subtag canonicalisation for the \"sd\" extension key.\n","info":" |8.2.1 Intl.getCanonicalLocales (locales)\n1. Let ll be ? CanonicalizeLocaleList(locales).\n2. Return CreateArrayFromList(ll).\n\n9.2.1 CanonicalizeLocaleList (locales)\n...\n7. Repeat, while k < len\n...\nc. If kPresent is true, then\n...\nv. If IsStructurallyValidLanguageTag(tag) is false, throw a RangeError exception.\nvi. Let canonicalizedTag be CanonicalizeUnicodeLocaleId(tag).\n...\n\nUTS 35, §3.2.1 Canonical Unicode Locale Identifiers\nUse the bcp47 data to replace keys, types, tfields, and tvalues by their canonical forms.\nSee Section 3.6.4 U Extension Data Files) and Section 3.7.1 T Extension Data Files. The\naliases are in the alias attribute value, while the canonical is in the name attribute value.\n\nReplace aliases in special key values:\nIf there is an 'sd' or 'rg' key, replace any subdivision alias in its value in the same way,\nusing subdivisionAlias data.\n","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/Intl/getCanonicalLocales/unicode-ext-canonicalize-timezone.js","esid":" sec-intl.getcanonicallocales","description":" >Test Unicode extension subtag canonicalisation for the \"tz\" extension key.\n","info":" |8.2.1 Intl.getCanonicalLocales (locales)\n1. Let ll be ? CanonicalizeLocaleList(locales).\n2. Return CreateArrayFromList(ll).\n\n9.2.1 CanonicalizeLocaleList (locales)\n...\n7. Repeat, while k < len\n...\nc. If kPresent is true, then\n...\nv. If IsStructurallyValidLanguageTag(tag) is false, throw a RangeError exception.\nvi. Let canonicalizedTag be CanonicalizeUnicodeLocaleId(tag).\n...\n\nUTS 35, §3.2.1 Canonical Unicode Locale Identifiers\nUse the bcp47 data to replace keys, types, tfields, and tvalues by their canonical forms.\nSee Section 3.6.4 U Extension Data Files) and Section 3.7.1 T Extension Data Files. The\naliases are in the alias attribute value, while the canonical is in the name attribute value.\n","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/Intl/getCanonicalLocales/unicode-ext-canonicalize-yes-to-true.js","esid":" sec-intl.getcanonicallocales","description":" >\"kb\", \"kc\", \"kh\", \"kk\", and \"kn\" Unicode extension keys canonicalise \"yes\" to \"true\".\n","info":" |8.2.1 Intl.getCanonicalLocales (locales)\n1. Let ll be ? CanonicalizeLocaleList(locales).\n2. Return CreateArrayFromList(ll).\n\n9.2.1 CanonicalizeLocaleList (locales)\n...\n7. Repeat, while k < len\n...\nc. If kPresent is true, then\n...\nv. If IsStructurallyValidLanguageTag(tag) is false, throw a RangeError exception.\nvi. Let canonicalizedTag be CanonicalizeUnicodeLocaleId(tag).\n...\n\nUTS 35, §3.2.1 Canonical Unicode Locale Identifiers\nUse the bcp47 data to replace keys, types, tfields, and tvalues by their canonical forms.\nSee Section 3.6.4 U Extension Data Files) and Section 3.7.1 T Extension Data Files. The\naliases are in the alias attribute value, while the canonical is in the name attribute value.\n\nUTS 35, §3.2.1 Canonical Unicode Locale Identifiers\nAny type or tfield value \"true\" is removed.\n","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/Intl/getCanonicalLocales/unicode-ext-key-with-digit.js","esid":" sec-intl.getcanonicallocales","description":" >Test Unicode extension subtags where the ukey subtag contains a digit.\n","info":" |8.2.1 Intl.getCanonicalLocales (locales)\n1. Let ll be ? CanonicalizeLocaleList(locales).\n2. Return CreateArrayFromList(ll).\n\n9.2.1 CanonicalizeLocaleList (locales)\n...\n7. Repeat, while k < len\n...\nc. If kPresent is true, then\n...\nv. If IsStructurallyValidLanguageTag(tag) is false, throw a RangeError exception.\nvi. Let canonicalizedTag be CanonicalizeUnicodeLocaleId(tag).\n...\n\n","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/Intl/getCanonicalLocales/weird-cases.js","esid":" sec-intl.getcanonicallocales","description":" Tests the getCanonicalLocales function for weird tags.","info":" |8.2.1 Intl.getCanonicalLocales (locales)\n1. Let ll be ? CanonicalizeLocaleList(locales).\n2. Return CreateArrayFromList(ll).\n","includes":["compareArray.js"]},{"path":"./test262-main/test/intl402/Intl/toStringTag/toString.js","esid":" sec-Intl-toStringTag","description":" >Object.prototype.toString utilizes Intl[@@toStringTag] and doesn't special-case Intl namespace object.\n","info":" |Object.prototype.toString ( )\n\n[...]\n14. Else, let builtinTag be \"Object\".\n15. Let tag be ? Get(O, @@toStringTag).\n16. If Type(tag) is not String, set tag to builtinTag.\n17. Return the string-concatenation of \"[object \", tag, and \"]\".\n\nIntl [ @@toStringTag ]\n\nThe initial value of the @@toStringTag property is the String value \"Intl\".\n","features":["Symbol.toStringTag"]},{"path":"./test262-main/test/intl402/Intl/toStringTag/toStringTag.js","esid":" sec-Intl-toStringTag","description":" >Property descriptor of Intl[@@toStringTag].\n","info":" |Intl [ @@toStringTag ]\n\nThe initial value of the @@toStringTag property is the String value \"Intl\".\n\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n","features":["Symbol.toStringTag"],"includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/ListFormat/constructor/constructor/locales-invalid.js","esid":" sec-Intl.ListFormat","description":" Checks error cases for the locales argument to the ListFormat constructor.","info":" |InitializeListFormat (listFormat, locales, options)\n1. Let _requestedLocales_ be ? CanonicalizeLocaleList(_locales_).\n","includes":["testIntl.js"],"features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/constructor/constructor/locales-valid.js","esid":" sec-Intl.ListFormat","description":" Checks various cases for the locales argument to the ListFormat constructor.","info":" |InitializeListFormat (listFormat, locales, options)\n1. Let _requestedLocales_ be ? CanonicalizeLocaleList(_locales_).\n","features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/constructor/constructor/newtarget-undefined.js","esid":" sec-intl.ListFormat","description":" >Verifies the NewTarget check for Intl.ListFormat.\n","info":" |Intl.ListFormat ([ locales [ , options ]])\n\n1. If NewTarget is undefined, throw a TypeError exception.\n","features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/constructor/constructor/options-invalid.js","esid":" sec-Intl.ListFormat","description":" Checks handling of a null options argument to the ListFormat constructor.","info":" |InitializeListFormat (listFormat, locales, options)\n3. Else\na. Let options be ? ToObject(options).\n","features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/constructor/constructor/options-localeMatcher-invalid.js","esid":" sec-Intl.ListFormat","description":" Checks handling of invalid value for the localeMatcher option to the ListFormat constructor.","info":" |Intl.ListFormat ( [ locales [ , options ] ] )\n12. Let matcher be ? GetOption(options, \"localeMatcher\", \"string\", « \"lookup\", \"best fit\" », \"best fit\").\n","features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/constructor/constructor/options-order.js","esid":" sec-Intl.ListFormat","description":" Checks the order of operations on the options argument to the ListFormat constructor.","info":" |Intl.ListFormat ( [ locales [ , options ] ] )\n7. Let type be GetOption(options, \"type\", \"string\", « \"conjunction\", \"disjunction\", \"unit\" », \"conjunction\").\n9. Let style be GetOption(options, \"style\", \"string\", « \"long\", \"short\", \"narrow\" », \"long\").\n12. Let matcher be ? GetOption(options, \"localeMatcher\", \"string\", « \"lookup\", \"best fit\" », \"best fit\").\n","includes":["compareArray.js"],"features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/constructor/constructor/options-style-invalid.js","esid":" sec-Intl.ListFormat","description":" Checks handling of invalid value for the style option to the ListFormat constructor.","info":" |InitializeListFormat (listFormat, locales, options)\n9. Let s be ? GetOption(options, \"style\", \"string\", «\"long\", \"short\", \"narrow\"», \"long\").\n","features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/constructor/constructor/options-style-valid.js","esid":" sec-Intl.ListFormat","description":" Checks handling of valid values for the style option to the ListFormat constructor.","info":" |InitializeListFormat (listFormat, locales, options)\nInitializeListFormat (listFormat, locales, options)\n12. Let type be ? GetOption(options, \"type\", \"string\", « \"conjunction\",\n\"disjunction\", \"unit\" », \"conjunction\").\n13. Set listFormat.[[Type]] to type.\n14. Let style be ? GetOption(options, \"style\", \"string\", « \"long\", \"short\",\n\"narrow\" », \"long\").\n15. Set listFormat.[[Style]] to style.\n","features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/constructor/constructor/options-throwing-getters.js","esid":" sec-Intl.ListFormat","description":" Checks the propagation of exceptions from the options for the ListFormat constructor.","features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/constructor/constructor/options-toobject-prototype.js","esid":" sec-Intl.ListFormat","description":" Checks handling of non-object option arguments to the ListFormat constructor.","info":" |InitializeListFormat (listFormat, locales, options)\n","features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/constructor/constructor/options-toobject.js","esid":" sec-Intl.ListFormat","description":" Checks handling of non-object option arguments to the ListFormat constructor.","info":" |InitializeListFormat (listFormat, locales, options)\n","features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/constructor/constructor/options-type-invalid.js","esid":" sec-Intl.ListFormat","description":" Checks handling of invalid value for the type option to the ListFormat constructor.","info":" |InitializeListFormat (listFormat, locales, options)\n7. Let type be GetOption(options, \"type\", \"string\", « \"conjunction\", \"disjunction\", \"unit\" », \"conjunction\").\n","features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/constructor/constructor/options-type-valid.js","esid":" sec-Intl.ListFormat","description":" Checks handling of valid values for the style option to the ListFormat constructor.","info":" |InitializeListFormat (listFormat, locales, options)\n7. Let type be GetOption(options, \"type\", \"string\", « \"conjunction\", \"disjunction\", \"unit\" », \"conjunction\").\n8. Set listFormat.[[Type]] to type.\n","features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/constructor/constructor/options-undefined.js","esid":" sec-Intl.ListFormat","description":" Checks handling of non-object option arguments to the ListFormat constructor.","info":" |InitializeListFormat (listFormat, locales, options)\n","features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/constructor/constructor/proto-from-ctor-realm.js","esid":" sec-Intl.ListFormat","description":" Default [[Prototype]] value derived from realm of the NewTarget.","info":" |Intl.ListFormat ( [ locales [ , options ] ] )\n\n1. If NewTarget is undefined, throw a TypeError exception.\n2. Let listFormat be ? OrdinaryCreateFromConstructor(NewTarget, \"%ListFormatPrototype%\", « ... »).\n...\n24. Return listFormat.\n\nOrdinaryCreateFromConstructor ( constructor, intrinsicDefaultProto [ , internalSlotsList ] )\n\n...\n2. Let proto be ? GetPrototypeFromConstructor(constructor, intrinsicDefaultProto).\n3. Return ObjectCreate(proto, internalSlotsList).\n\nGetPrototypeFromConstructor ( constructor, intrinsicDefaultProto )\n\n...\n3. Let proto be ? Get(constructor, 'prototype').\n4. If Type(proto) is not Object, then\na. Let realm be ? GetFunctionRealm(constructor).\nb. Set proto to realm's intrinsic object named intrinsicDefaultProto.\n5. Return proto.\n","features":["Intl.ListFormat","cross-realm","Reflect","Symbol"]},{"path":"./test262-main/test/intl402/ListFormat/constructor/constructor/subclassing.js","esid":" sec-Intl.ListFormat","description":" Checks that ListFormat can be subclassed.","info":" |Intl.ListFormat ( [ locales [ , options ] ] )\n\n2. Let listFormat be ? OrdinaryCreateFromConstructor(NewTarget, \"%ListFormatPrototype%\", « [[InitializedListFormat]], [[Locale]], [[Type]], [[Style]] »).\n\n","features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/constructor/length.js","esid":" sec-Intl.ListFormat","description":" >Checks the \"length\" property of the ListFormat constructor.\n","info":" |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nThe ListFormat constructor is a standard built-in property of the Intl object.\nEvery built-in function object, including constructors, has a length property whose value is an integer. Unless otherwise specified, this value is equal to the largest number of named arguments shown in the subclause headings for the function description. Optional parameters (which are indicated with brackets: [ ]) or rest parameters (which are shown using the form «...name») are not included in the default argument count.\nUnless otherwise specified, the length property of a built-in function object has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/constructor/name.js","esid":" sec-Intl.ListFormat","description":" >Checks the \"name\" property of the ListFormat constructor.\n","info":" |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, that is not identified as an anonymous function has a name property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification.\nUnless otherwise specified, the name property of a built-in function object, if it exists, has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/constructor/prop-desc.js","esid":" sec-Intl.ListFormat","description":" >\"ListFormat\" property of Intl.\n","info":" |Intl.ListFormat (...)\n\n7 Requirements for Standard Built-in ECMAScript Objects\n\nUnless specified otherwise in this document, the objects, functions, and constructors\ndescribed in this standard are subject to the generic requirements and restrictions\nspecified for standard built-in ECMAScript objects in the ECMAScript 2018 Language\nSpecification, 9th edition, clause 17, or successor.\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the\nattributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true }\nunless otherwise specified.\n\n","includes":["propertyHelper.js"],"features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/constructor/prototype.js","esid":" sec-Intl.ListFormat","description":" The prototype of the Intl.ListFormat constructor is %FunctionPrototype%.","info":" |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nUnless otherwise specified every built-in function object has the %FunctionPrototype% object as the initial value of its [[Prototype]] internal slot.\n","features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/constructor/supportedLocalesOf/basic.js","esid":" sec-Intl.ListFormat.supportedLocalesOf","description":" >Tests that Intl.ListFormat has a supportedLocalesOf property,\nand it works as planned.\n","features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/constructor/supportedLocalesOf/branding.js","esid":" sec-Intl.ListFormat.supportedLocalesOf","description":" >Verifies there's no branding check for Intl.ListFormat.supportedLocalesOf().\n","info":" |Intl.ListFormat.supportedLocalesOf ( locales [, options ])\n","features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/constructor/supportedLocalesOf/length.js","esid":" sec-Intl.ListFormat.supportedLocalesOf","description":" >Checks the \"length\" property of Intl.ListFormat.supportedLocalesOf().\n","info":" |The value of the length property of the supportedLocalesOf method is 1.\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, has a length property whose value is an integer.\nUnless otherwise specified, the length property of a built-in function object has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/constructor/supportedLocalesOf/locales-invalid.js","esid":" sec-Intl.ListFormat.supportedLocalesOf","description":" Checks error cases for the locales argument to the supportedLocalesOf function.","info":" |Intl.ListFormat.supportedLocalesOf ( locales [, options ])\n\n2. Let requestedLocales be CanonicalizeLocaleList(locales).\n","includes":["testIntl.js"],"features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/constructor/supportedLocalesOf/name.js","esid":" sec-Intl.ListFormat.supportedLocalesOf","description":" >Checks the \"name\" property of Intl.ListFormat.supportedLocalesOf().\n","info":" |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, that is not identified as an anonymous function has a name property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification.\nUnless otherwise specified, the name property of a built-in function object, if it exists, has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/constructor/supportedLocalesOf/options-localeMatcher-invalid.js","esid":" sec-Intl.ListFormat.supportedLocalesOf","description":" Checks handling of invalid values for the localeMatcher option to the supportedLocalesOf function.","info":" |SupportedLocales ( availableLocales, requestedLocales, options )\n\n1. If options is not undefined, then\nb. Let matcher be ? GetOption(options, \"localeMatcher\", \"string\", «\"lookup\", \"best fit\"», \"best fit\").\n","features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/constructor/supportedLocalesOf/options-null.js","esid":" sec-Intl.ListFormat.supportedLocalesOf","description":" Checks handling of a null options argument to the supportedLocalesOf function.","info":" |SupportedLocales ( availableLocales, requestedLocales, options )\n\n1. If options is not undefined, then\na. Let options be ? ToObject(options).\n","features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/constructor/supportedLocalesOf/options-toobject.js","esid":" sec-Intl.ListFormat.supportedLocalesOf","description":" Checks handling of non-object options arguments to the supportedLocalesOf function.","info":" |SupportedLocales ( availableLocales, requestedLocales, options )\n\n1. If options is not undefined, then\na. Let options be ? ToObject(options).\n","features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/constructor/supportedLocalesOf/options-undefined.js","esid":" sec-Intl.ListFormat.supportedLocalesOf","description":" Checks handling of an undefined options argument to the supportedLocalesOf function.","info":" |SupportedLocales ( availableLocales, requestedLocales, options )\n\n1. If options is not undefined, then\nb. Let matcher be ? GetOption(options, \"localeMatcher\", \"string\", «\"lookup\", \"best fit\"», \"best fit\").\n","features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/constructor/supportedLocalesOf/prop-desc.js","esid":" sec-Intl.ListFormat.supportedLocalesOf","description":" >Checks the \"supportedLocalesOf\" property of the ListFormat prototype object.\n","info":" |Intl.ListFormat.supportedLocalesOf ( locales [, options ])\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\n","includes":["propertyHelper.js"],"features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/constructor/supportedLocalesOf/result-type.js","esid":" sec-Intl.ListFormat.supportedLocalesOf","description":" Verifies the type of the return value of Intl.ListFormat.supportedLocalesOf().","info":" |Intl.ListFormat.supportedLocalesOf ( locales [, options ])\n","includes":["propertyHelper.js"],"features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/instance/extensibility.js","esid":" sec-Intl.ListFormat","description":" Intl.ListFormat instance object extensibility","info":" |17 ECMAScript Standard Built-in Objects:\n\nUnless specified otherwise, the [[Extensible]] internal slot\nof a built-in object initially has the value true.\n","features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/instance/prototype.js","esid":" sec-Intl.ListFormat","description":" Intl.ListFormat instance object is created from %ListFormatPrototype%.","info":" |Intl.ListFormat ([ locales [ , options ]])\n\n2. Let listFormat be ? OrdinaryCreateFromConstructor(NewTarget, \"%ListFormatPrototype%\", « [[InitializedListFormat]], [[Locale]], [[Type]], [[Style]] »).\n","features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/prototype/constructor/prop-desc.js","esid":" sec-Intl.ListFormat.prototype.constructor","description":" Checks the \"constructor\" property of the ListFormat prototype object.","info":" |Intl.ListFormat.prototype.constructor\n\nThe initial value of Intl.ListFormat.prototype.constructor is %ListFormat%.\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\n","includes":["propertyHelper.js"],"features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/prototype/format/branding.js","esid":" sec-Intl.ListFormat.prototype.format","description":" >Verifies the branding check for the \"format\" function of the ListFormat prototype object.\n","info":" |Intl.ListFormat.prototype.format ([ list ])\n\n2. If Type(lf) is not Object, throw a TypeError exception.\n3. If lf does not have an [[InitializedListFormat]] internal slot, throw a TypeError exception.\n","features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/prototype/format/en-us-default.js","esid":" sec-Intl.ListFormat.prototype.format","description":" >Checks the behavior of Intl.ListFormat.prototype.format() in English.\n","features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/prototype/format/en-us-disjunction.js","esid":" sec-Intl.ListFormat.prototype.format","description":" >Checks the behavior of Intl.ListFormat.prototype.format() in English.\n","features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/prototype/format/en-us-narrow.js","esid":" sec-Intl.ListFormat.prototype.format","description":" >Checks the behavior of Intl.ListFormat.prototype.format() in English.\n","features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/prototype/format/en-us-short.js","esid":" sec-Intl.ListFormat.prototype.format","description":" >Checks the behavior of Intl.ListFormat.prototype.format() in English.\n","features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/prototype/format/en-us-unit.js","esid":" sec-Intl.ListFormat.prototype.format","description":" >Checks the behavior of Intl.ListFormat.prototype.format() in English.\n","features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/prototype/format/es-es-long.js","esid":" sec-Intl.ListFormat.prototype.format","description":" >Checks the behavior of Intl.ListFormat.prototype.format() in English.\n","features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/prototype/format/es-es-narrow.js","esid":" sec-Intl.ListFormat.prototype.format","description":" >Checks the behavior of Intl.ListFormat.prototype.format() in English.\n","features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/prototype/format/es-es-short.js","esid":" sec-Intl.ListFormat.prototype.format","description":" >Checks the behavior of Intl.ListFormat.prototype.format() in English.\n","features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/prototype/format/iterable-getiterator-throw.js","esid":" sec-Intl.ListFormat.prototype.format","description":" >Checks the behavior of Abstract Operation StringListFromIterablecalled by Intl.ListFormat.prototype.format() while the GetIterator\nthrows error.\n","info":" |StringListFromIterable\n1. If iterable is undefined, then\na. Return a new empty List.\n2. Let iteratorRecord be ? GetIterator(iterable).\n","features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/prototype/format/iterable-invalid.js","esid":" sec-Intl.ListFormat.prototype.format","description":" >Checks the behavior of Abstract Operation StringListFromIterable\ncalled by Intl.ListFormat.prototype.format().\n","info":" |StringListFromIterable\n1. If iterable is undefined, then\na. Return a new empty List.\n2. Let iteratorRecord be ? GetIterator(iterable).\n3. Let list be a new empty List.\n4. Let next be true.\n5. Repeat, while next is not false\na. Set next to ? IteratorStep(iteratorRecord).\nb. If next is not false, then\ni. Let nextValue be ? IteratorValue(next).\nii. If Type(nextValue) is not String, then\n1. Let error be ThrowCompletion(a newly created TypeError object).\n2. Return ? IteratorClose(iteratorRecord, error).\niii. Append nextValue to the end of the List list.\n6. Return list.\n","features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/prototype/format/iterable-iteratorclose.js","esid":" sec-Intl.ListFormat.prototype.format","description":" >Checks the behavior of Abstract Operation StringListFromIterable\ncalled by Intl.ListFormat.prototype.format() and check the IteratorClose\ncalls return.\n","info":" |StringListFromIterable\n1. If iterable is undefined, then\na. Return a new empty List.\n2. Let iteratorRecord be ? GetIterator(iterable).\n3. Let list be a new empty List.\n4. Let next be true.\n5. Repeat, while next is not false\na. Set next to ? IteratorStep(iteratorRecord).\nb. If next is not false, then\ni. Let nextValue be ? IteratorValue(next).\nii. If Type(nextValue) is not String, then\n1. Let error be ThrowCompletion(a newly created TypeError object).\n2. Return ? IteratorClose(iteratorRecord, error).\niii. Append nextValue to the end of the List list.\n6. Return list.\n","features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/prototype/format/iterable-iteratorstep-throw.js","esid":" sec-Intl.ListFormat.prototype.format","description":" >Checks the behavior of Abstract Operation StringListFromIterable\ncalled by Intl.ListFormat.prototype.format() while iteratorStep throws error.\n","info":" |StringListFromIterable\n1. If iterable is undefined, then\na. Return a new empty List.\n2. Let iteratorRecord be ? GetIterator(iterable).\n3. Let list be a new empty List.\n4. Let next be true.\n5. Repeat, while next is not false\na. Set next to ? IteratorStep(iteratorRecord).\n","features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/prototype/format/iterable-iteratorvalue-throw.js","esid":" sec-Intl.ListFormat.prototype.format","description":" >Checks the behavior of Abstract Operation StringListFromIterable\ncalled by Intl.ListFormat.prototype.format() while iteratorValue throws error.\n","info":" |StringListFromIterable\n1. If iterable is undefined, then\na. Return a new empty List.\n2. Let iteratorRecord be ? GetIterator(iterable).\n3. Let list be a new empty List.\n4. Let next be true.\n5. Repeat, while next is not false\na. Set next to ? IteratorStep(iteratorRecord).\nb. If next is not false, then\ni. Let nextValue be ? IteratorValue(next).\n","features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/prototype/format/iterable-undefined.js","esid":" sec-Intl.ListFormat.prototype.format","description":" >Checks the behavior of Abstract Operation StringListFromIterable\ncalled by Intl.ListFormat.prototype.format(undefined).\n","info":" |StringListFromIterable\n1. If iterable is undefined, then\na. Return a new empty List.\n","features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/prototype/format/iterable.js","esid":" sec-Intl.ListFormat.prototype.format","description":" >Checks the behavior of Abstract Operation StringListFromIterable\ncalled by Intl.ListFormat.prototype.format().\n","info":" |StringListFromIterable\n1. If iterable is undefined, then\na. Return a new empty List.\n2. Let iteratorRecord be ? GetIterator(iterable).\n3. Let list be a new empty List.\n4. Let next be true.\n5. Repeat, while next is not false\na. Set next to ? IteratorStep(iteratorRecord).\nb. If next is not false, then\ni. Let nextValue be ? IteratorValue(next).\nii. If Type(nextValue) is not String, then\n1. Let error be ThrowCompletion(a newly created TypeError object).\n2. Return ? IteratorClose(iteratorRecord, error).\niii. Append nextValue to the end of the List list.\n6. Return list.\n","features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/prototype/format/length.js","esid":" sec-Intl.ListFormat.prototype.format","description":" >Checks the \"length\" property of Intl.ListFormat.prototype.format().\n","info":" |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nThe ListFormat constructor is a standard built-in property of the Intl object.\nEvery built-in function object, including constructors, has a length property whose value is an integer. Unless otherwise specified, this value is equal to the largest number of named arguments shown in the subclause headings for the function description. Optional parameters (which are indicated with brackets: [ ]) or rest parameters (which are shown using the form «...name») are not included in the default argument count.\nUnless otherwise specified, the length property of a built-in function object has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/prototype/format/name.js","esid":" sec-Intl.ListFormat.prototype.format","description":" >Checks the \"name\" property of Intl.ListFormat.prototype.format().\n","info":" |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, that is not identified as an anonymous function has a name property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification.\nUnless otherwise specified, the name property of a built-in function object, if it exists, has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/prototype/format/prop-desc.js","esid":" sec-Intl.ListFormat.prototype.format","description":" >Checks the \"format\" property of the ListFormat prototype object.\n","info":" |Intl.ListFormat.prototype.format ([ list ])\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\n","includes":["propertyHelper.js"],"features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/prototype/formatToParts/branding.js","esid":" sec-Intl.ListFormat.prototype.formatToParts","description":" >Verifies the branding check for the \"formatToParts\" function of the ListFormat prototype object.\n","info":" |Intl.ListFormat.prototype.formatToParts([ list ])\n\n2. If Type(lf) is not Object, throw a TypeError exception.\n3. If lf does not have an [[InitializedListFormat]] internal slot, throw a TypeError exception.\n","features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/prototype/formatToParts/en-us-default.js","esid":" sec-Intl.ListFormat.prototype.formatToParts","description":" >Checks the behavior of Intl.ListFormat.prototype.formatToParts() in English.\n","features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/prototype/formatToParts/en-us-disjunction.js","esid":" sec-Intl.ListFormat.prototype.formatToParts","description":" >Checks the behavior of Intl.ListFormat.prototype.formatToParts() in English.\n","features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/prototype/formatToParts/en-us-narrow.js","esid":" sec-Intl.ListFormat.prototype.formatToParts","description":" >Checks the behavior of Intl.ListFormat.prototype.formatToParts() in English.\n","features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/prototype/formatToParts/en-us-short.js","esid":" sec-Intl.ListFormat.prototype.formatToParts","description":" >Checks the behavior of Intl.ListFormat.prototype.formatToParts() in English.\n","features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/prototype/formatToParts/en-us-unit.js","esid":" sec-Intl.ListFormat.prototype.formatToParts","description":" >Checks the behavior of Intl.ListFormat.prototype.formatToParts() in English.\n","features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/prototype/formatToParts/es-es-long.js","esid":" sec-Intl.ListFormat.prototype.formatToParts","description":" >Checks the behavior of Intl.ListFormat.prototype.formatToParts() in English.\n","features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/prototype/formatToParts/es-es-narrow.js","esid":" sec-Intl.ListFormat.prototype.formatToParts","description":" >Checks the behavior of Intl.ListFormat.prototype.formatToParts() in English.\n","features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/prototype/formatToParts/es-es-short.js","esid":" sec-Intl.ListFormat.prototype.formatToParts","description":" >Checks the behavior of Intl.ListFormat.prototype.formatToParts() in English.\n","features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/prototype/formatToParts/iterable-getiterator-throw.js","esid":" sec-Intl.ListFormat.prototype.format","description":" >Checks the behavior of Abstract Operation StringListFromIterable\ncalled by Intl.ListFormat.prototype.formatToParts() while the GetIterator\nthrows error.\n","info":" |StringListFromIterable\n1. If iterable is undefined, then\na. Return a new empty List.\n2. Let iteratorRecord be ? GetIterator(iterable).\n","features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/prototype/formatToParts/iterable-invalid.js","esid":" sec-Intl.ListFormat.prototype.formatToParts","description":" >Checks the behavior of Abstract Operation StringListFromIterable\ncalled by Intl.ListFormat.prototype.formatToParts().\n","info":" |StringListFromIterable\n1. If iterable is undefined, then\na. Return a new empty List.\n2. Let iteratorRecord be ? GetIterator(iterable).\n3. Let list be a new empty List.\n4. Let next be true.\n5. Repeat, while next is not false\na. Set next to ? IteratorStep(iteratorRecord).\nb. If next is not false, then\ni. Let nextValue be ? IteratorValue(next).\nii. If Type(nextValue) is not String, then\n1. Let error be ThrowCompletion(a newly created TypeError object).\n2. Return ? IteratorClose(iteratorRecord, error).\niii. Append nextValue to the end of the List list.\n6. Return list.\n","features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/prototype/formatToParts/iterable-iteratorclose.js","esid":" sec-Intl.ListFormat.prototype.format","description":" >Checks the behavior of Abstract Operation StringListFromIterable\ncalled by Intl.ListFormat.prototype.formatToParts() and check the IteratorClose\ncalls return.\n","info":" |StringListFromIterable\n1. If iterable is undefined, then\na. Return a new empty List.\n2. Let iteratorRecord be ? GetIterator(iterable).\n3. Let list be a new empty List.\n4. Let next be true.\n5. Repeat, while next is not false\na. Set next to ? IteratorStep(iteratorRecord).\nb. If next is not false, then\ni. Let nextValue be ? IteratorValue(next).\nii. If Type(nextValue) is not String, then\n1. Let error be ThrowCompletion(a newly created TypeError object).\n2. Return ? IteratorClose(iteratorRecord, error).\niii. Append nextValue to the end of the List list.\n6. Return list.\n","features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/prototype/formatToParts/iterable-iteratorstep-throw.js","esid":" sec-Intl.ListFormat.prototype.format","description":" >Checks the behavior of Abstract Operation StringListFromIterable\ncalled by Intl.ListFormat.prototype.formatToParts() while iteratorStep throws error.\n","info":" |StringListFromIterable\n1. If iterable is undefined, then\na. Return a new empty List.\n2. Let iteratorRecord be ? GetIterator(iterable).\n3. Let list be a new empty List.\n4. Let next be true.\n5. Repeat, while next is not false\na. Set next to ? IteratorStep(iteratorRecord).\n","features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/prototype/formatToParts/iterable-iteratorvalue-throw.js","esid":" sec-Intl.ListFormat.prototype.format","description":" >Checks the behavior of Abstract Operation StringListFromIterable\ncalled by Intl.ListFormat.prototype.formatToParts() while iteratorValue throws error.\n","info":" |StringListFromIterable\n1. If iterable is undefined, then\na. Return a new empty List.\n2. Let iteratorRecord be ? GetIterator(iterable).\n3. Let list be a new empty List.\n4. Let next be true.\n5. Repeat, while next is not false\na. Set next to ? IteratorStep(iteratorRecord).\nb. If next is not false, then\ni. Let nextValue be ? IteratorValue(next).\n","features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/prototype/formatToParts/iterable-undefined.js","esid":" sec-Intl.ListFormat.prototype.format","description":" >Checks the behavior of Abstract Operation StringListFromIterable\ncalled by Intl.ListFormat.prototype.formatToParts(undefined).\n","info":" |StringListFromIterable\n1. If iterable is undefined, then\na. Return a new empty List.\n","features":["Intl.ListFormat"],"includes":["compareArray.js"]},{"path":"./test262-main/test/intl402/ListFormat/prototype/formatToParts/iterable.js","esid":" sec-Intl.ListFormat.prototype.formatToParts","description":" >Checks the behavior of Abstract Operation StringListFromIterable\ncalled by Intl.ListFormat.prototype.formatToParts().\n","info":" |StringListFromIterable\n1. If iterable is undefined, then\na. Return a new empty List.\n2. Let iteratorRecord be ? GetIterator(iterable).\n3. Let list be a new empty List.\n4. Let next be true.\n5. Repeat, while next is not false\na. Set next to ? IteratorStep(iteratorRecord).\nb. If next is not false, then\ni. Let nextValue be ? IteratorValue(next).\nii. If Type(nextValue) is not String, then\n1. Let error be ThrowCompletion(a newly created TypeError object).\n2. Return ? IteratorClose(iteratorRecord, error).\niii. Append nextValue to the end of the List list.\n6. Return list.\n","features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/prototype/formatToParts/length.js","esid":" sec-Intl.ListFormat.prototype.formatToParts","description":" >Checks the \"length\" property of Intl.ListFormat.prototype.formatToParts().\n","info":" |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nThe ListFormat constructor is a standard built-in property of the Intl object.\nEvery built-in function object, including constructors, has a length property whose value is an integer. Unless otherwise specified, this value is equal to the largest number of named arguments shown in the subclause headings for the function description. Optional parameters (which are indicated with brackets: [ ]) or rest parameters (which are shown using the form «...name») are not included in the default argument count.\nUnless otherwise specified, the length property of a built-in function object has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/prototype/formatToParts/name.js","esid":" sec-Intl.ListFormat.prototype.formatToParts","description":" >Checks the \"name\" property of Intl.ListFormat.prototype.formatToParts().\n","info":" |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, that is not identified as an anonymous function has a name property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification.\nUnless otherwise specified, the name property of a built-in function object, if it exists, has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/prototype/formatToParts/prop-desc.js","esid":" sec-Intl.ListFormat.prototype.formatToParts","description":" >Checks the \"formatToParts\" property of the ListFormat prototype object.\n","info":" |Intl.ListFormat.prototype.formatToParts ()\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\n","includes":["propertyHelper.js"],"features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/prototype/prop-desc.js","esid":" sec-Intl.ListFormat.prototype","description":" >Checks the \"prototype\" property of the ListFormat constructor.\n","info":" |Intl.ListFormat.prototype\n\nThe value of Intl.ListFormat.prototype is %ListFormatPrototype%.\n\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\n","includes":["propertyHelper.js"],"features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/prototype/resolvedOptions/branding.js","esid":" sec-Intl.ListFormat.prototype.resolvedOptions","description":" Verifies the branding check for the \"resolvedOptions\" function of the ListFormat prototype object.","info":" |Intl.ListFormat.prototype.resolvedOptions()\n\n2. If Type(pr) is not Object, throw a TypeError exception.\n3. If pr does not have an [[InitializedListFormat]] internal slot, throw a TypeError exception.\n","features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/prototype/resolvedOptions/caching.js","esid":" sec-Intl.ListFormat.prototype.resolvedOptions","description":" Verifies that the return value of Intl.ListFormat.prototype.resolvedOptions() is not cached.","info":" |Intl.ListFormat.prototype.resolvedOptions ()\n\n4. Let options be ! ObjectCreate(%ObjectPrototype%).\n","features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/prototype/resolvedOptions/length.js","esid":" sec-Intl.ListFormat.prototype.resolvedOptions","description":" Checks the \"length\" property of Intl.ListFormat.prototype.resolvedOptions().","info":" |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nThe ListFormat constructor is a standard built-in property of the Intl object.\nEvery built-in function object, including constructors, has a length property whose value is an integer. Unless otherwise specified, this value is equal to the largest number of named arguments shown in the subclause headings for the function description. Optional parameters (which are indicated with brackets: [ ]) or rest parameters (which are shown using the form «...name») are not included in the default argument count.\nUnless otherwise specified, the length property of a built-in function object has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/prototype/resolvedOptions/name.js","esid":" sec-Intl.ListFormat.prototype.resolvedOptions","description":" Checks the \"name\" property of Intl.ListFormat.prototype.resolvedOptions().","info":" |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, that is not identified as an anonymous function has a name property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification.\nUnless otherwise specified, the name property of a built-in function object, if it exists, has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/prototype/resolvedOptions/order.js","esid":" sec-Intl.ListFormat.prototype.resolvedOptions","description":" Verifies the property order for the object returned by resolvedOptions().","includes":["compareArray.js"],"features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/prototype/resolvedOptions/prop-desc.js","esid":" sec-Intl.ListFormat.prototype.resolvedOptions","description":" Checks the \"resolvedOptions\" property of the ListFormat prototype object.","info":" |Intl.ListFormat.prototype.resolvedOptions ()\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\n","includes":["propertyHelper.js"],"features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/prototype/resolvedOptions/type.js","esid":" sec-Intl.ListFormat.prototype.resolvedOptions","description":" Checks the properties of the result of Intl.ListFormat.prototype.resolvedOptions().","info":" |Intl.ListFormat.prototype.resolvedOptions ()\n\n4. Let options be ! ObjectCreate(%ObjectPrototype%).\n5. For each row of Table 1, except the header row, do\nd. Perform ! CreateDataPropertyOrThrow(options, p, v).\n","includes":["propertyHelper.js"],"features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/prototype/toStringTag/toString.js","esid":" sec-intl.ListFormat.prototype-@@tostringtag","description":" >Checks Object.prototype.toString with Intl.ListFormat objects.\n","info":" |Intl.ListFormat.prototype[ @@toStringTag ]\n\nThe initial value of the @@toStringTag property is the string value \"Intl.ListFormat\".\n","features":["Intl.ListFormat"]},{"path":"./test262-main/test/intl402/ListFormat/prototype/toStringTag/toStringTag.js","esid":" sec-intl.ListFormat.prototype-@@tostringtag","description":" >Checks the @@toStringTag property of the ListFormat prototype object.\n","info":" |Intl.ListFormat.prototype[ @@toStringTag ]\n\nThe initial value of the @@toStringTag property is the string value \"Intl.ListFormat\".\n\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["Intl.ListFormat","Symbol.toStringTag"]},{"path":"./test262-main/test/intl402/Locale/canonicalize-locale-list-take-locale.js","esid":" sec-intl.locale","description":" >Verifies CanonicalizeLocaleList will take Intl.Locale as locales.\n","info":" |CanonicalizeLocaleList ( locales )\n3. If Type(locales) is String or locales has an [[InitializedLocale]] internal slot, then\na. Let O be CreateArrayFromList(« locales »).\n\nc. iii. If Type(kValue) is Object and kValue has an [[InitializedLocale]] internal slot, then\n1. Let tag be kValue.[[Locale]].\niv. Else,\n1. Let tag be ? ToString(kValue).\n","features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/constructor-apply-options-canonicalizes-twice.js","esid":" sec-apply-options-to-tag","description":" >ApplyOptionsToTag canonicalises the language tag two times.\n","info":" |10.1.1 ApplyOptionsToTag( tag, options )\n\n...\n9. Set tag to CanonicalizeUnicodeLocaleId(tag).\n10. If language is not undefined,\n...\nb. Set tag to tag with the substring corresponding to the unicode_language_subtag\nproduction of the unicode_language_id replaced by the string language.\n...\n13. Return CanonicalizeUnicodeLocaleId(tag).\n","features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/constructor-getter-order.js","esid":" sec-intl.locale","description":" >Checks the order of evaluations of arguments and options for the Locale\nconstructor.\n","features":["Intl.Locale"],"includes":["compareArray.js"]},{"path":"./test262-main/test/intl402/Locale/constructor-locale-object.js","esid":" sec-intl.locale","description":" >Verifies canonicalization of specific tags.\n","info":" |ApplyOptionsToTag( tag, options )\n10. Return CanonicalizeLanguageTag(tag).\n","features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/constructor-newtarget-undefined.js","esid":" sec-intl.locale","description":" >Verifies the NewTarget check for Intl.Locale.\n","info":" |Intl.Locale( tag [, options] )\n\n1. If NewTarget is undefined, throw a TypeError exception.\n","features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/constructor-non-iana-canon.js","esid":" sec-intl.locale","description":" >Verifies canonicalization, minimization and maximization of specific tags.\n","info":" |ApplyOptionsToTag( tag, options )\n10. Return CanonicalizeLanguageTag(tag).\n\nIntl.Locale.prototype.maximize ()\n3. Let maximal be the result of the Add Likely Subtags algorithm applied to loc.[[Locale]].\n\nIntl.Locale.prototype.minimize ()\n3. Let minimal be the result of the Remove Likely Subtags algorithm applied to loc.[[Locale]].\n","features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/constructor-options-calendar-invalid.js","esid":" sec-intl.locale","description":" >Checks error cases for the options argument to the Locale\nconstructor.\n","info":" |Intl.Locale( tag [, options] )\n\n...\n15. If calendar is not undefined, then\na. If calendar does not match the [(3*8alphanum) *(\"-\" (3*8alphanum))] sequence, throw a RangeError exception.\n16. Set opt.[[ca]] to calendar.\n\n","features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/constructor-options-calendar-valid.js","esid":" sec-intl.locale","description":" >Checks error cases for the options argument to the Locale\nconstructor.\n","info":" |Intl.Locale( tag [, options] )\n\n...\n14. Let calendar be ? GetOption(options, \"calendar\", \"string\", undefined, undefined).\n...\n\n","features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/constructor-options-canonicalized.js","esid":" sec-resolvelocale","description":" >Values provided as properties of the options-argument to the Locale\nconstructor are converted to canonical form.\n","info":" |ResolveLocale ( availableLocales, requestedLocales, options, relevantExtensionKeys, localeData )\n\n...\n9.i.iii.1. Let optionsValue be the string optionsValue after performing the algorithm steps to transform Unicode extension values to canonical syntax per Unicode Technical Standard #35 LDML § 3.2.1 Canonical Unicode Locale Identifiers, treating key as ukey and optionsValue as uvalue productions.\n9.i.iii.2. Let optionsValue be the string optionsValue after performing the algorithm steps to replace Unicode extension values with their canonical form per Unicode Technical Standard #35 LDML § 3.2.1 Canonical Unicode Locale Identifiers, treating key as ukey and optionsValue as uvalue productions.\n...\n\n","features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/constructor-options-casefirst-invalid.js","esid":" sec-intl.locale","description":" >Checks error cases for the options argument to the Locale constructor.\n","info":" |Intl.Locale( tag [, options] )\n\n...\n22. Let kf be ? GetOption(options, \"caseFirst\", \"string\", « \"upper\", \"lower\", \"false\" », undefined).\n...\n\nGetOption ( options, property, type, values, fallback )\n...\n2.d. If values is not undefined, then\ni. If values does not contain an element equal to value, throw a RangeError exception.\n...\n","features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/constructor-options-casefirst-valid.js","esid":" sec-intl.locale","description":" >Checks valid cases for the options argument to the Locale constructor.\n","info":" |Intl.Locale( tag [, options] )\n\n...\n22. Let kf be ? GetOption(options, \"caseFirst\", \"string\", « \"upper\", \"lower\", \"false\" », undefined).\n23. Set opt.[[kf]] to kf.\n...\n30. Let r be ! ApplyUnicodeExtensionToTag(tag, opt, relevantExtensionKeys).\n...\n\nApplyUnicodeExtensionToTag( tag, options, relevantExtensionKeys )\n\n...\n8. Let locale be the String value that is tag with all Unicode locale extension sequences removed.\n9. Let newExtension be ! CanonicalizeUnicodeExtension(attributes, keywords).\n10. If newExtension is not the empty String, then\na. Let locale be ! InsertUnicodeExtension(locale, newExtension).\n...\n\nCanonicalizeUnicodeExtension( attributes, keywords )\n...\n4. Repeat for each element entry of keywords in List order,\na. Let keyword be entry.[[Key]].\nb. If entry.[[Value]] is not the empty String, then\ni. Let keyword be the string-concatenation of keyword, \"-\", and entry.[[Value]].\nc. Append keyword to fullKeywords.\n...\n","features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/constructor-options-collation-invalid.js","esid":" sec-intl.locale","description":" >Checks error cases for the options argument to the Locale constructor.\n","info":" |Intl.Locale( tag [, options] )\n\n...\n18. If collation is not undefined, then\na. If collation does not match the [(3*8alphanum) *(\"-\" (3*8alphanum))] sequence, throw a RangeError exception.\n\n","features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/constructor-options-collation-valid.js","esid":" sec-intl.locale","description":" >Checks valid cases for the options argument to the Locale constructor.\n","info":" |Intl.Locale( tag [, options] )\n\n...\n17. Let collation be ? GetOption(options, \"collation\", \"string\", undefined, undefined).\n...\n19. Set opt.[[co]] to collation.\n...\n30. Let r be ! ApplyUnicodeExtensionToTag(tag, opt, relevantExtensionKeys).\n...\n\nApplyUnicodeExtensionToTag( tag, options, relevantExtensionKeys )\n\n...\n8. Let locale be the String value that is tag with all Unicode locale extension sequences removed.\n9. Let newExtension be ! CanonicalizeUnicodeExtension(attributes, keywords).\n10. If newExtension is not the empty String, then\na. Let locale be ! InsertUnicodeExtension(locale, newExtension).\n...\n\nCanonicalizeUnicodeExtension( attributes, keywords )\n...\n4. Repeat for each element entry of keywords in List order,\na. Let keyword be entry.[[Key]].\nb. If entry.[[Value]] is not the empty String, then\ni. Let keyword be the string-concatenation of keyword, \"-\", and entry.[[Value]].\nc. Append keyword to fullKeywords.\n...\n","features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/constructor-options-hourcycle-invalid.js","esid":" sec-intl.locale","description":" >Checks error cases for the options argument to the Locale constructor.\n","info":" |Intl.Locale( tag [, options] )\n\n...\n20. Let hc be ? GetOption(options, \"hourCycle\", \"string\", « \"h11\", \"h12\", \"h23\", \"h24\" », undefined).\n...\n\nGetOption ( options, property, type, values, fallback )\n...\n2.d. If values is not undefined, then\ni. If values does not contain an element equal to value, throw a RangeError exception.\n...\n","features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/constructor-options-hourcycle-valid.js","esid":" sec-intl.locale","description":" >Checks valid cases for the options argument to the Locale constructor.\n","info":" |Intl.Locale( tag [, options] )\n\n...\n20. Let hc be ? GetOption(options, \"hourCycle\", \"string\", « \"h11\", \"h12\", \"h23\", \"h24\" », undefined).\n21. Set opt.[[hc]] to hc.\n...\n30. Let r be ! ApplyUnicodeExtensionToTag(tag, opt, relevantExtensionKeys).\n...\n\nApplyUnicodeExtensionToTag( tag, options, relevantExtensionKeys )\n\n...\n8. Let locale be the String value that is tag with all Unicode locale extension sequences removed.\n9. Let newExtension be ! CanonicalizeUnicodeExtension(attributes, keywords).\n10. If newExtension is not the empty String, then\na. Let locale be ! InsertUnicodeExtension(locale, newExtension).\n...\n\nCanonicalizeUnicodeExtension( attributes, keywords )\n...\n4. Repeat for each element entry of keywords in List order,\na. Let keyword be entry.[[Key]].\nb. If entry.[[Value]] is not the empty String, then\ni. Let keyword be the string-concatenation of keyword, \"-\", and entry.[[Value]].\nc. Append keyword to fullKeywords.\n...\n","features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/constructor-options-language-grandfathered.js","esid":" sec-intl.locale","description":" >Checks error cases for the options argument to the Locale\nconstructor.\n","info":" |ApplyOptionsToTag( tag, options )\n...\n3. Let language be ? GetOption(options, \"language\", \"string\", undefined, undefined).\n4. If language is not undefined, then\na. If language does not match the language production, throw a RangeError exception.\nb. If language matches the grandfathered production, throw a RangeError exception.\n...\n\n","features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/constructor-options-language-invalid.js","esid":" sec-intl.locale","description":" >Checks error cases for the options argument to the Locale\nconstructor.\n","info":" |Intl.Locale( tag [, options] )\n10. If options is undefined, then\n11. Else\na. Let options be ? ToObject(options).\n12. Set tag to ? ApplyOptionsToTag(tag, options).\n\nApplyOptionsToTag( tag, options )\n...\n4. If language is not undefined, then\na. If language does not match the language production, throw a RangeError exception.\n...\n\n","features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/constructor-options-language-valid-undefined.js","esid":" sec-intl.locale","description":" >Verify valid language option values (undefined)\n","info":" |Intl.Locale( tag [, options] )\n10. If options is undefined, then\n11. Else\na. Let options be ? ToObject(options).\n12. Set tag to ? ApplyOptionsToTag(tag, options).\n\nApplyOptionsToTag( tag, options )\n\n2. If IsStructurallyValidLanguageTag(tag) is false, throw a RangeError exception.\n...\n\nIsStructurallyValidLanguageTag ( locale )\n\nThe IsStructurallyValidLanguageTag abstract operation verifies that the\nlocale argument (which must be a String value)\n\nrepresents a well-formed Unicode BCP 47 Locale Identifier\" as specified in\nUnicode Technical Standard 35 section 3.2, or successor,\n\n","features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/constructor-options-language-valid.js","esid":" sec-intl.locale","description":" >Verify valid language option values (various)\n","info":" |Intl.Locale( tag [, options] )\n10. If options is undefined, then\n11. Else\na. Let options be ? ToObject(options).\n12. Set tag to ? ApplyOptionsToTag(tag, options).\n\nApplyOptionsToTag( tag, options )\n...\n2. If IsStructurallyValidLanguageTag(tag) is false, throw a RangeError exception.\n3. Let language be ? GetOption(options, \"language\", \"string\", undefined, undefined).\n4. If language is not undefined, then\na. If language does not match the unicode_language_subtag production, throw a RangeError exception.\n\nIsStructurallyValidLanguageTag ( locale )\n\nThe IsStructurallyValidLanguageTag abstract operation verifies that the\nlocale argument (which must be a String value)\n\nrepresents a well-formed Unicode BCP 47 Locale Identifier\" as specified in\nUnicode Technical Standard 35 section 3.2, or successor,\n\n","features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/constructor-options-numberingsystem-invalid.js","esid":" sec-intl.locale","description":" >Checks error cases for the options argument to the Locale constructor.\n","info":" |Intl.Locale( tag [, options] )\n\n...\n28. If numberingSystem is not undefined, then\na. If numberingSystem does not match the [(3*8alphanum) *(\"-\" (3*8alphanum))] sequence, throw a RangeError exception.\n\n","features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/constructor-options-numberingsystem-valid.js","esid":" sec-intl.locale","description":" >Checks valid cases for the options argument to the Locale constructor.\n","info":" |Intl.Locale( tag [, options] )\n\n...\n27. Let numberingSystem be ? GetOption(options, \"numberingSystem\", \"string\", undefined, undefined).\n...\n29. Set opt.[[nu]] to numberingSystem.\n...\n30. Let r be ! ApplyUnicodeExtensionToTag(tag, opt, relevantExtensionKeys).\n...\n\nApplyUnicodeExtensionToTag( tag, options, relevantExtensionKeys )\n\n...\n8. Let locale be the String value that is tag with all Unicode locale extension sequences removed.\n9. Let newExtension be ! CanonicalizeUnicodeExtension(attributes, keywords).\n10. If newExtension is not the empty String, then\na. Let locale be ! InsertUnicodeExtension(locale, newExtension).\n...\n\nCanonicalizeUnicodeExtension( attributes, keywords )\n...\n4. Repeat for each element entry of keywords in List order,\na. Let keyword be entry.[[Key]].\nb. If entry.[[Value]] is not the empty String, then\ni. Let keyword be the string-concatenation of keyword, \"-\", and entry.[[Value]].\nc. Append keyword to fullKeywords.\n...\n","features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/constructor-options-numeric-undefined.js","esid":" sec-intl.locale","description":" Verifies the behavior of an undefined numeric option to the Locale constructor.","info":" |Intl.Locale( tag [, options] )\n\n...\n24. Let kn be ? GetOption(options, \"numeric\", \"boolean\", undefined, undefined).\n25. If kn is not undefined, set kn to ! ToString(kn).\n...\n30. Let r be ! ApplyUnicodeExtensionToTag(tag, opt, relevantExtensionKeys).\n...\n\nApplyUnicodeExtensionToTag( tag, options, relevantExtensionKeys )\n\n...\n8. Let locale be the String value that is tag with all Unicode locale extension sequences removed.\n9. Let newExtension be ! CanonicalizeUnicodeExtension(attributes, keywords).\n10. If newExtension is not the empty String, then\na. Let locale be ! InsertUnicodeExtension(locale, newExtension).\n...\n\nCanonicalizeUnicodeExtension( attributes, keywords )\n...\n4. Repeat for each element entry of keywords in List order,\na. Let keyword be entry.[[Key]].\nb. If entry.[[Value]] is not the empty String, then\ni. Let keyword be the string-concatenation of keyword, \"-\", and entry.[[Value]].\nc. Append keyword to fullKeywords.\n...\n","features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/constructor-options-numeric-valid.js","esid":" sec-intl.locale","description":" >Checks valid cases for the options argument to the Locale constructor.\n","info":" |Intl.Locale( tag [, options] )\n\n...\n24. Let kn be ? GetOption(options, \"numeric\", \"boolean\", undefined, undefined).\n25. If kn is not undefined, set kn to ! ToString(kn).\n...\n30. Let r be ! ApplyUnicodeExtensionToTag(tag, opt, relevantExtensionKeys).\n...\n\nApplyUnicodeExtensionToTag( tag, options, relevantExtensionKeys )\n\n...\n8. Let locale be the String value that is tag with all Unicode locale extension sequences removed.\n9. Let newExtension be ! CanonicalizeUnicodeExtension(attributes, keywords).\n10. If newExtension is not the empty String, then\na. Let locale be ! InsertUnicodeExtension(locale, newExtension).\n...\n\nCanonicalizeUnicodeExtension( attributes, keywords )\n...\n4. Repeat for each element entry of keywords in List order,\na. Let keyword be entry.[[Key]].\nb. If entry.[[Value]] is not the empty String, then\ni. Let keyword be the string-concatenation of keyword, \"-\", and entry.[[Value]].\nc. Append keyword to fullKeywords.\n...\n","features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/constructor-options-region-invalid.js","esid":" sec-intl.locale","description":" >Checks error cases for the options argument to the Locale\nconstructor.\n","info":" |Intl.Locale( tag [, options] )\n10. If options is undefined, then\n11. Else\na. Let options be ? ToObject(options).\n12. Set tag to ? ApplyOptionsToTag(tag, options).\n\nApplyOptionsToTag( tag, options )\n...\n8. If region is not undefined, then\na. If region does not match the region production, throw a RangeError exception.\n...\n\n","features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/constructor-options-region-valid.js","esid":" sec-intl.locale","description":" >Checks error cases for the options argument to the Locale\nconstructor.\n","info":" |Intl.Locale( tag [, options] )\n10. If options is undefined, then\n11. Else\na. Let options be ? ToObject(options).\n12. Set tag to ? ApplyOptionsToTag(tag, options).\n\nApplyOptionsToTag( tag, options )\n...\n7. Let region be ? GetOption(options, \"region\", \"string\", undefined, undefined).\n...\n9. If tag matches neither the privateuse nor the grandfathered production, then\n...\nd. If region is not undefined, then\ni. If tag does not contain a region production, then\n1. Set tag to the concatenation of the language production of tag, the substring corresponding to the \"-\" script production if present, \"-\", region, and the rest of tag.\nii. Else,\n1. Set tag to tag with the substring corresponding to the region production replaced by the string region.\n\n","features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/constructor-options-script-invalid.js","esid":" sec-intl.locale","description":" >Checks error cases for the options argument to the Locale\nconstructor.\n","info":" |Intl.Locale( tag [, options] )\n10. If options is undefined, then\n11. Else\na. Let options be ? ToObject(options).\n12. Set tag to ? ApplyOptionsToTag(tag, options).\n\nApplyOptionsToTag( tag, options )\n...\n6. If script is not undefined, then\na. If script does not match the script production, throw a RangeError exception.\n...\n\n","features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/constructor-options-script-valid-undefined.js","esid":" sec-intl.locale","description":" >Verify valid script option values (undefined)\n","info":" |Intl.Locale( tag [, options] )\n10. If options is undefined, then\n11. Else\na. Let options be ? ToObject(options).\n12. Set tag to ? ApplyOptionsToTag(tag, options).\n\nApplyOptionsToTag( tag, options )\n...\n5. Let script be ? GetOption(options, \"script\", \"string\", undefined, undefined).\n...\n9. If tag matches neither the privateuse nor the grandfathered production, then\n...\nc. If script is not undefined, then\ni. If tag does not contain a script production, then\n1. Set tag to the concatenation of the language production of tag, \"-\", script, and the rest of tag.\nii. Else,\n1. Set tag to tag with the substring corresponding to the script production replaced by the string script.\n\n\n","features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/constructor-options-script-valid.js","esid":" sec-intl.locale","description":" >Verify valid language option values (various)\n","info":" |Intl.Locale( tag [, options] )\n9. Else,\na. Let tag be ? ToString(tag).\n10. If options is undefined, then\n11. Else\na. Let options be ? ToObject(options).\n12. Set tag to ? ApplyOptionsToTag(tag, options).\n\nApplyOptionsToTag( tag, options )\n...\n5. Let script be ? GetOption(options, \"script\", \"string\", undefined, undefined).\n...\n9. If tag matches neither the privateuse nor the grandfathered production, then\n...\nc. If script is not undefined, then\ni. If tag does not contain a script production, then\n1. Set tag to the concatenation of the language production of tag, \"-\", script, and the rest of tag.\nii. Else,\n1. Set tag to tag with the substring corresponding to the script production replaced by the string script.\n\n\n","features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/constructor-options-throwing-getters.js","esid":" sec-Intl.Locale","description":" Checks the propagation of exceptions from the options for the Locale constructor.","features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/constructor-parse-twice.js","esid":" sec-intl.locale","description":" >Verifies the handling of options with grandfathered tags.\n","info":" |Intl.Locale( tag [, options] )\n12. Set tag to ? ApplyOptionsToTag(tag, options).\n14. Let calendar be ? GetOption(options, \"calendar\", \"string\", undefined, undefined).\n16. Set opt.[[ca]] to calendar.\n30. Let r be ! ApplyUnicodeExtensionToTag(tag, opt, relevantExtensionKeys).\n\nApplyOptionsToTag( tag, options )\n...\n2. If IsStructurallyValidLanguageTag(tag) is false, throw a RangeError exception.\n\nIsStructurallyValidLanguageTag ( locale )\n\nThe IsStructurallyValidLanguageTag abstract operation verifies that the\nlocale argument (which must be a String value)\n\nrepresents a well-formed Unicode BCP 47 Locale Identifier\" as specified in\nUnicode Technical Standard 35 section 3.2, or successor,\n\n","features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/constructor-tag-tostring.js","esid":" sec-intl.locale","description":" >Checks error cases for the string conversion of the locale argument to the\nLocale constructor.\n","info":" |Intl.Locale( tag [, options] )\n\n...\n8. If Type(tag) is Object and tag has an [[InitializedLocale]] internal slot, then\n9. Else,\na. Let tag be ? ToString(tag).\n","features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/constructor-tag.js","esid":" sec-intl.locale","description":" >Verifies canonicalization of specific tags.\n","info":" |ApplyOptionsToTag( tag, options )\n2. If IsStructurallyValidLanguageTag(tag) is false, throw a RangeError exception.\n...\n13. Return CanonicalizeLanguageTag(tag).\n","features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/constructor-unicode-ext-invalid.js","esid":" sec-intl.locale","description":" >Verifies treatment of specific structurally invalid tags.\n","info":" |ApplyOptionsToTag( tag, options )\n2. If IsStructurallyValidLanguageTag(tag) is false, throw a RangeError exception.\n","features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/constructor-unicode-ext-valid.js","esid":" sec-intl.locale","description":" >Verifies canonicalization of specific tags.\n","info":" |ApplyOptionsToTag( tag, options )\n10. Return CanonicalizeLanguageTag(tag).\n","features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/extensions-grandfathered.js","esid":" sec-intl.locale","description":" >Verifies handling of options with grandfathered tags.\n","info":" |ApplyOptionsToTag( tag, options )\n...\n2. If IsStructurallyValidLanguageTag(tag) is false, throw a RangeError exception.\n\nIsStructurallyValidLanguageTag ( locale )\n\nThe IsStructurallyValidLanguageTag abstract operation verifies that the\nlocale argument (which must be a String value)\n\nrepresents a well-formed Unicode BCP 47 Locale Identifier\" as specified in\nUnicode Technical Standard 35 section 3.2, or successor,\n\n","features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/extensions-private.js","esid":" sec-intl.locale","description":" >Verifies handling of options with privateuse tags.\n","info":" |ApplyOptionsToTag( tag, options )\n\n\n...\n9. If tag matches neither the privateuse nor the grandfathered production, then\n...\n\n","features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/function-prototype.js","esid":" sec-intl.locale","description":" >The value of the [[Prototype]] internal slot of the Intl.Locale constructor is the\nintrinsic object %FunctionPrototype%.\n","features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/getters-grandfathered.js","esid":" sec-intl.locale","description":" >Verifies getters with grandfathered tags.\n","info":" |get Intl.Locale.prototype.baseName\n5. Return the substring of locale corresponding to the\nlanguage [\"-\" script] [\"-\" region] *(\"-\" variant)\nsubsequence of theunicode_language_id grammar.\n\nget Intl.Locale.prototype.language\n5. Return the substring of locale corresponding to the\nunicode_language_subtag production.\n\nget Intl.Locale.prototype.script\n6. Return the substring of locale corresponding to the\nunicode_script_subtag production.\n\nget Intl.Locale.prototype.region\n6. Return the substring of locale corresponding to the unicode_region_subtag\nproduction.\n","features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/getters-missing.js","esid":" sec-intl.locale","description":" >Verifies getters with missing tags.\n","info":" |get Intl.Locale.prototype.baseName\n5. Return the substring of locale corresponding to the\nlanguage [\"-\" script] [\"-\" region] *(\"-\" variant)\nsubsequence of the langtag grammar.\n\nget Intl.Locale.prototype.language\n4. Return the substring of locale corresponding to the language production.\n\nget Intl.Locale.prototype.script\n6. If locale does not contain the [\"-\" script] sequence, return undefined.\n7. Return the substring of locale corresponding to the script production.\n\nget Intl.Locale.prototype.region\n6. If locale does not contain the [\"-\" region] sequence, return undefined.\n7. Return the substring of locale corresponding to the region production.\n","features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/getters.js","esid":" sec-intl.locale","description":" >Verifies getters with normal tags.\n","info":" |Intl.Locale.prototype.toString ()\n3. Return loc.[[Locale]].\n\nget Intl.Locale.prototype.baseName\n5. Return the substring of locale corresponding to the\nlanguage [\"-\" script] [\"-\" region] *(\"-\" variant)\nsubsequence of the langtag grammar.\n\nget Intl.Locale.prototype.language\n4. Return the substring of locale corresponding to the language production.\n\nget Intl.Locale.prototype.script\n7. Return the substring of locale corresponding to the script production.\n\nget Intl.Locale.prototype.region\n7. Return the substring of locale corresponding to the region production.\n\nget Intl.Locale.prototype.calendar\n3. Return loc.[[Calendar]].\n\nget Intl.Locale.prototype.collation\n3. Return loc.[[Collation]].\n\nget Intl.Locale.prototype.hourCycle\n3. Return loc.[[HourCycle]].\n\nget Intl.Locale.prototype.caseFirst\nThis property only exists if %Locale%.[[RelevantExtensionKeys]] contains \"kf\".\n3. Return loc.[[CaseFirst]].\n\nget Intl.Locale.prototype.numeric\nThis property only exists if %Locale%.[[RelevantExtensionKeys]] contains \"kn\".\n3. Return loc.[[Numeric]].\n\nget Intl.Locale.prototype.numberingSystem\n3. Return loc.[[NumberingSystem]].\n\n","features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/instance-extensibility.js","esid":" sec-intl.locale","description":" >Intl.Locale instance object extensibility\n","info":" |17 ECMAScript Standard Built-in Objects:\n\nUnless specified otherwise, the [[Extensible]] internal slot\nof a built-in object initially has the value true.\n","features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/instance.js","esid":" sec-intl.locale","description":" >Intl.Locale instance object created from %LocalePrototype%.\n","info":" |Intl.Locale( tag [, options] )\n\n6. Let locale be ?\nOrdinaryCreateFromConstructor(NewTarget, %LocalePrototype%,\ninternalSlotsList).\n","features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/invalid-tag-throws-boolean.js","esid":" sec-intl.locale","description":" >Verifies the type check on the tag argument to Intl.Locale.\n","info":" |Intl.Locale( tag [, options] )\n\n7. If Type(tag) is not String or Object, throw a TypeError exception.\n","features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/invalid-tag-throws-null.js","esid":" sec-intl.locale","description":" >Verifies the type check on the tag argument to Intl.Locale.\n","info":" |Intl.Locale( tag [, options] )\n\n7. If Type(tag) is not String or Object, throw a TypeError exception.\n","features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/invalid-tag-throws-number.js","esid":" sec-intl.locale","description":" >Verifies the type check on the tag argument to Intl.Locale.\n","info":" |Intl.Locale( tag [, options] )\n\n7. If Type(tag) is not String or Object, throw a TypeError exception.\n","features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/invalid-tag-throws-symbol.js","esid":" sec-intl.locale","description":" >Verifies the type check on the tag argument to Intl.Locale.\n","info":" |Intl.Locale( tag [, options] )\n\n7. If Type(tag) is not String or Object, throw a TypeError exception.\n","features":["Intl.Locale","Symbol"]},{"path":"./test262-main/test/intl402/Locale/invalid-tag-throws-undefined.js","esid":" sec-intl.locale","description":" >Verifies the type check on the tag argument to Intl.Locale.\n","info":" |Intl.Locale( tag [, options] )\n\n7. If Type(tag) is not String or Object, throw a TypeError exception.\n","features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/invalid-tag-throws.js","esid":" sec-intl.locale","description":" >Checks error cases for the options argument to the Locale\nconstructor.\n","info":" |Intl.Locale( tag [, options] )\n\n...\n11. Else\na. Let options be ? ToObject(options).\n12. Set tag to ? ApplyOptionsToTag(tag, options).\n...\n\nApplyOptionsToTag( tag, options )\n\n...\n2. If IsStructurallyValidLanguageTag(tag) is false, throw a RangeError exception.\n...\n","includes":["testIntl.js"],"features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/length.js","esid":" sec-intl.locale","description":" >Checks the \"length\" property of the Locale constructor.\n","info":" |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nThe Locale constructor is a standard built-in property of the Intl object.\nEvery built-in function object, including constructors, has a length property whose value is an integer. Unless otherwise specified, this value is equal to the largest number of named arguments shown in the subclause headings for the function description. Optional parameters (which are indicated with brackets: [ ]) or rest parameters (which are shown using the form «...name») are not included in the default argument count.\nUnless otherwise specified, the length property of a built-in function object has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/likely-subtags-grandfathered.js","esid":" sec-intl.locale","description":" >Verifies canonicalization, minimization and maximization of specific tags.\n","info":" |ApplyOptionsToTag( tag, options )\n\n2. If IsStructurallyValidLanguageTag(tag) is false, throw a RangeError exception.\n\n9. Set tag to CanonicalizeLanguageTag(tag).\n\nCanonicalizeLanguageTag( tag )\n\nThe CanonicalizeLanguageTag abstract operation returns the canonical and\ncase-regularized form of the locale argument (which must be a String value\nthat is a structurally valid Unicode BCP 47 Locale Identifier as verified by\nthe IsStructurallyValidLanguageTag abstract operation).\n\nIsStructurallyValidLanguageTag ( locale )\n\nThe IsStructurallyValidLanguageTag abstract operation verifies that the\nlocale argument (which must be a String value)\n\nrepresents a well-formed Unicode BCP 47 Locale Identifier\" as specified in\nUnicode Technical Standard 35 section 3.2, or successor,\n\n\nIntl.Locale.prototype.maximize ()\n3. Let maximal be the result of the Add Likely Subtags algorithm applied to loc.[[Locale]].\n\nIntl.Locale.prototype.minimize ()\n3. Let minimal be the result of the Remove Likely Subtags algorithm applied to loc.[[Locale]].\n","features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/likely-subtags.js","esid":" sec-intl.locale","description":" >Verifies canonicalization, minimization and maximization of specific tags.\n","info":" |Intl.Locale.prototype.maximize ()\n3. Let maximal be the result of the Add Likely Subtags algorithm applied to loc.[[Locale]].\n\nIntl.Locale.prototype.minimize ()\n3. Let minimal be the result of the Remove Likely Subtags algorithm applied to loc.[[Locale]].\n","features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/name.js","esid":" sec-intl.locale","description":" >Checks the \"name\" property of the Locale constructor.\n","info":" |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, that is not identified as an anonymous function has a name property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification.\nUnless otherwise specified, the name property of a built-in function object, if it exists, has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/prop-desc.js","esid":" sec-intl.locale","description":" >\"Locale\" property of Intl.\n","info":" |Intl.Locale (...)\n\n7 Requirements for Standard Built-in ECMAScript Objects\n\nUnless specified otherwise in this document, the objects, functions, and constructors\ndescribed in this standard are subject to the generic requirements and restrictions\nspecified for standard built-in ECMAScript objects in the ECMAScript 2018 Language\nSpecification, 9th edition, clause 17, or successor.\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the\nattributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true }\nunless otherwise specified.\n\n","includes":["propertyHelper.js"],"features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/proto-from-ctor-realm.js","esid":" sec-Intl.Locale","description":" Default [[Prototype]] value derived from realm of the NewTarget.","info":" |Intl.Locale ( tag [ , options] )\n\n...\n6. Let locale be ? OrdinaryCreateFromConstructor(NewTarget, %LocalePrototype%, internalSlotsList).\n...\n38. Return locale.\n\nOrdinaryCreateFromConstructor ( constructor, intrinsicDefaultProto [ , internalSlotsList ] )\n\n...\n2. Let proto be ? GetPrototypeFromConstructor(constructor, intrinsicDefaultProto).\n3. Return ObjectCreate(proto, internalSlotsList).\n\nGetPrototypeFromConstructor ( constructor, intrinsicDefaultProto )\n\n...\n3. Let proto be ? Get(constructor, 'prototype').\n4. If Type(proto) is not Object, then\na. Let realm be ? GetFunctionRealm(constructor).\nb. Set proto to realm's intrinsic object named intrinsicDefaultProto.\n5. Return proto.\n","features":["Intl.Locale","cross-realm","Reflect","Symbol"]},{"path":"./test262-main/test/intl402/Locale/prototype/baseName/branding.js","esid":" sec-Intl.Locale.prototype.baseName","description":" >Verifies the branding check for the \"baseName\" property of the Locale prototype object.\n","info":" |Intl.Locale.prototype.baseName\n\n2. If Type(loc) is not Object or loc does not have an [[InitializedLocale]] internal slot, then\na. Throw a TypeError exception.\n","features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/prototype/baseName/name.js","esid":" sec-intl.locale.prototype.baseName","description":" >Checks the \"name\" property of Intl.Locale.prototype.baseName.\n","info":" |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, that is not identified as an anonymous function has a name property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification. Functions that are specified as get or set accessor functions of built-in properties have \"get \" or \"set \" prepended to the property name string.\nUnless otherwise specified, the name property of a built-in function object, if it exists, has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/prototype/baseName/prop-desc.js","esid":" sec-intl.locale","description":" >Checks the \"baseName\" property of the Locale prototype object.\n","info":" |Intl.Locale.prototype.baseName\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\n\nEvery accessor property described in clauses 18 through 26 and in Annex B.2 has the attributes { [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified. If only a get accessor function is described, the set accessor function is the default value, undefined.\n","includes":["propertyHelper.js"],"features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/prototype/calendar/branding.js","esid":" sec-Intl.Locale.prototype.calendar","description":" >Verifies the branding check for the \"calendar\" property of the Locale prototype object.\n","info":" |Intl.Locale.prototype.calendar\n\n2. If Type(loc) is not Object or loc does not have an [[InitializedLocale]] internal slot, then\na. Throw a TypeError exception.\n","features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/prototype/calendar/name.js","esid":" sec-intl.locale.prototype.calendar","description":" >Checks the \"name\" property of Intl.Locale.prototype.calendar.\n","info":" |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, that is not identified as an anonymous function has a name property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification. Functions that are specified as get or set accessor functions of built-in properties have \"get \" or \"set \" prepended to the property name string.\nUnless otherwise specified, the name property of a built-in function object, if it exists, has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/prototype/calendar/prop-desc.js","esid":" sec-intl.locale","description":" >Checks the \"calendar\" property of the Locale prototype object.\n","info":" |Intl.Locale.prototype.calendar\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\n\nEvery accessor property described in clauses 18 through 26 and in Annex B.2 has the attributes { [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified. If only a get accessor function is described, the set accessor function is the default value, undefined.\n","includes":["propertyHelper.js"],"features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/prototype/caseFirst/branding.js","esid":" sec-Intl.Locale.prototype.caseFirst","description":" >Verifies the branding check for the \"caseFirst\" property of the Locale prototype object.\n","info":" |Intl.Locale.prototype.caseFirst\n\n2. If Type(loc) is not Object or loc does not have an [[InitializedLocale]] internal slot, then\na. Throw a TypeError exception.\n","features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/prototype/caseFirst/name.js","esid":" sec-intl.locale.prototype.caseFirst","description":" >Checks the \"name\" property of Intl.Locale.prototype.caseFirst.\n","info":" |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, that is not identified as an anonymous function has a name property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification. Functions that are specified as get or set accessor functions of built-in properties have \"get \" or \"set \" prepended to the property name string.\nUnless otherwise specified, the name property of a built-in function object, if it exists, has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/prototype/caseFirst/prop-desc.js","esid":" sec-intl.locale","description":" >Checks the \"caseFirst\" property of the Locale prototype object.\n","info":" |Intl.Locale.prototype.caseFirst\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\n\nEvery accessor property described in clauses 18 through 26 and in Annex B.2 has the attributes { [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified. If only a get accessor function is described, the set accessor function is the default value, undefined.\n","includes":["propertyHelper.js"],"features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/prototype/collation/branding.js","esid":" sec-Intl.Locale.prototype.collation","description":" >Verifies the branding check for the \"collation\" property of the Locale prototype object.\n","info":" |Intl.Locale.prototype.collation\n\n2. If Type(loc) is not Object or loc does not have an [[InitializedLocale]] internal slot, then\na. Throw a TypeError exception.\n","features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/prototype/collation/name.js","esid":" sec-intl.locale.prototype.collation","description":" >Checks the \"name\" property of Intl.Locale.prototype.collation.\n","info":" |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, that is not identified as an anonymous function has a name property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification. Functions that are specified as get or set accessor functions of built-in properties have \"get \" or \"set \" prepended to the property name string.\nUnless otherwise specified, the name property of a built-in function object, if it exists, has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/prototype/collation/prop-desc.js","esid":" sec-intl.locale","description":" >Checks the \"collation\" property of the Locale prototype object.\n","info":" |Intl.Locale.prototype.collation\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\n\nEvery accessor property described in clauses 18 through 26 and in Annex B.2 has the attributes { [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified. If only a get accessor function is described, the set accessor function is the default value, undefined.\n","includes":["propertyHelper.js"],"features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/prototype/constructor/prop-desc.js","esid":" sec-intl.locale.prototype.constructor","description":" >Checks the \"constructor\" property of the Locale prototype object.\n","info":" |Intl.Locale.prototype.constructor\n\nThe initial value of Intl.Locale.prototype.constructor is %Locale%.\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\n","includes":["propertyHelper.js"],"features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/prototype/hourCycle/branding.js","esid":" sec-Intl.Locale.prototype.hourCycle","description":" >Verifies the branding check for the \"hourCycle\" property of the Locale prototype object.\n","info":" |Intl.Locale.prototype.hourCycle\n\n2. If Type(loc) is not Object or loc does not have an [[InitializedLocale]] internal slot, then\na. Throw a TypeError exception.\n","features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/prototype/hourCycle/name.js","esid":" sec-intl.locale.prototype.hourCycle","description":" >Checks the \"name\" property of Intl.Locale.prototype.hourCycle.\n","info":" |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, that is not identified as an anonymous function has a name property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification. Functions that are specified as get or set accessor functions of built-in properties have \"get \" or \"set \" prepended to the property name string.\nUnless otherwise specified, the name property of a built-in function object, if it exists, has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/prototype/hourCycle/prop-desc.js","esid":" sec-intl.locale","description":" >Checks the \"hourCycle\" property of the Locale prototype object.\n","info":" |Intl.Locale.prototype.hourCycle\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\n\nEvery accessor property described in clauses 18 through 26 and in Annex B.2 has the attributes { [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified. If only a get accessor function is described, the set accessor function is the default value, undefined.\n","includes":["propertyHelper.js"],"features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/prototype/language/branding.js","esid":" sec-Intl.Locale.prototype.language","description":" >Verifies the branding check for the \"language\" property of the Locale prototype object.\n","info":" |Intl.Locale.prototype.language\n\n2. If Type(loc) is not Object or loc does not have an [[InitializedLocale]] internal slot, then\na. Throw a TypeError exception.\n","features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/prototype/language/name.js","esid":" sec-intl.locale.prototype.language","description":" >Checks the \"name\" property of Intl.Locale.prototype.language.\n","info":" |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, that is not identified as an anonymous function has a name property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification. Functions that are specified as get or set accessor functions of built-in properties have \"get \" or \"set \" prepended to the property name string.\nUnless otherwise specified, the name property of a built-in function object, if it exists, has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/prototype/language/prop-desc.js","esid":" sec-intl.locale","description":" >Checks the \"language\" property of the Locale prototype object.\n","info":" |Intl.Locale.prototype.language\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\n\nEvery accessor property described in clauses 18 through 26 and in Annex B.2 has the attributes { [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified. If only a get accessor function is described, the set accessor function is the default value, undefined.\n","includes":["propertyHelper.js"],"features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/prototype/maximize/branding.js","esid":" sec-Intl.Locale.prototype.maximize","description":" >Verifies the branding check for the \"maximize\" function of the Locale prototype object.\n","info":" |Intl.Locale.prototype.maximize\n\n2. If Type(loc) is not Object or loc does not have an [[InitializedLocale]] internal slot, then\na. Throw a TypeError exception.\n","features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/prototype/maximize/length.js","esid":" sec-intl.locale.prototype.maximize","description":" >Checks the \"length\" property of Intl.Locale.prototype.maximize().\n","info":" |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nThe Locale constructor is a standard built-in property of the Intl object.\nEvery built-in function object, including constructors, has a length property whose value is an integer. Unless otherwise specified, this value is equal to the largest number of named arguments shown in the subclause headings for the function description. Optional parameters (which are indicated with brackets: [ ]) or rest parameters (which are shown using the form «...name») are not included in the default argument count.\nUnless otherwise specified, the length property of a built-in function object has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/prototype/maximize/name.js","esid":" sec-intl.locale.prototype.maximize","description":" >Checks the \"name\" property of Intl.Locale.prototype.maximize().\n","info":" |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, that is not identified as an anonymous function has a name property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification.\nUnless otherwise specified, the name property of a built-in function object, if it exists, has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/prototype/maximize/prop-desc.js","esid":" sec-intl.locale.prototype.maximize","description":" >Checks the \"maximize\" property of the Locale prototype object.\n","info":" |Intl.Locale.prototype.maximize ()\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\n","includes":["propertyHelper.js"],"features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/prototype/minimize/branding.js","esid":" sec-Intl.Locale.prototype.minimize","description":" >Verifies the branding check for the \"minimize\" function of the Locale prototype object.\n","info":" |Intl.Locale.prototype.minimize\n\n2. If Type(loc) is not Object or loc does not have an [[InitializedLocale]] internal slot, then\na. Throw a TypeError exception.\n","features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/prototype/minimize/length.js","esid":" sec-intl.locale.prototype.minimize","description":" >Checks the \"length\" property of Intl.Locale.prototype.minimize().\n","info":" |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nThe Locale constructor is a standard built-in property of the Intl object.\nEvery built-in function object, including constructors, has a length property whose value is an integer. Unless otherwise specified, this value is equal to the largest number of named arguments shown in the subclause headings for the function description. Optional parameters (which are indicated with brackets: [ ]) or rest parameters (which are shown using the form «...name») are not included in the default argument count.\nUnless otherwise specified, the length property of a built-in function object has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/prototype/minimize/name.js","esid":" sec-intl.locale.prototype.minimize","description":" >Checks the \"name\" property of Intl.Locale.prototype.minimize().\n","info":" |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, that is not identified as an anonymous function has a name property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification.\nUnless otherwise specified, the name property of a built-in function object, if it exists, has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/prototype/minimize/prop-desc.js","esid":" sec-intl.locale","description":" >Checks the \"minimize\" property of the Locale prototype object.\n","info":" |Intl.Locale.prototype.minimize ()\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\n","includes":["propertyHelper.js"],"features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/prototype/minimize/removing-likely-subtags-first-adds-likely-subtags.js","esid":" sec-Intl.Locale.prototype.minimize","description":" >The \"Remove Likely Subtags\" algorithm adds likely subtags before processing the locale.\n","info":" |Intl.Locale.prototype.minimize ()\n3. Let minimal be the result of the Remove Likely Subtags algorithm applied to loc.[[Locale]].\nIf an error is signaled, set minimal to loc.[[Locale]].\n\nUTS 35, §4.3 Likely Subtags\nRemove Likely Subtags\n\n1. First get max = AddLikelySubtags(inputLocale). If an error is signaled, return it.\n2. ...\n","features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/prototype/numberingSystem/branding.js","esid":" sec-Intl.Locale.prototype.numberingSystem","description":" >Verifies the branding check for the \"numberingSystem\" property of the Locale prototype object.\n","info":" |Intl.Locale.prototype.numberingSystem\n\n2. If Type(loc) is not Object or loc does not have an [[InitializedLocale]] internal slot, then\na. Throw a TypeError exception.\n","features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/prototype/numberingSystem/name.js","esid":" sec-intl.locale.prototype.numberingSystem","description":" >Checks the \"name\" property of Intl.Locale.prototype.numberingSystem.\n","info":" |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, that is not identified as an anonymous function has a name property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification. Functions that are specified as get or set accessor functions of built-in properties have \"get \" or \"set \" prepended to the property name string.\nUnless otherwise specified, the name property of a built-in function object, if it exists, has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/prototype/numberingSystem/prop-desc.js","esid":" sec-intl.locale","description":" >Checks the \"numberingSystem\" property of the Locale prototype object.\n","info":" |Intl.Locale.prototype.numberingSystem\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\n\nEvery accessor property described in clauses 18 through 26 and in Annex B.2 has the attributes { [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified. If only a get accessor function is described, the set accessor function is the default value, undefined.\n","includes":["propertyHelper.js"],"features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/prototype/numeric/branding.js","esid":" sec-Intl.Locale.prototype.numeric","description":" >Verifies the branding check for the \"numeric\" property of the Locale prototype object.\n","info":" |Intl.Locale.prototype.numeric\n\n2. If Type(loc) is not Object or loc does not have an [[InitializedLocale]] internal slot, then\na. Throw a TypeError exception.\n","features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/prototype/numeric/name.js","esid":" sec-intl.locale.prototype.numeric","description":" >Checks the \"name\" property of Intl.Locale.prototype.numeric.\n","info":" |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, that is not identified as an anonymous function has a name property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification. Functions that are specified as get or set accessor functions of built-in properties have \"get \" or \"set \" prepended to the property name string.\nUnless otherwise specified, the name property of a built-in function object, if it exists, has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/prototype/numeric/prop-desc.js","esid":" sec-intl.locale","description":" >Checks the \"numeric\" property of the Locale prototype object.\n","info":" |Intl.Locale.prototype.numeric\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\n\nEvery accessor property described in clauses 18 through 26 and in Annex B.2 has the attributes { [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified. If only a get accessor function is described, the set accessor function is the default value, undefined.\n","includes":["propertyHelper.js"],"features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/prototype/prop-desc.js","esid":" sec-intl.locale.prototype","description":" >Checks the \"prototype\" property of the Locale constructor.\n","info":" |Intl.Locale.prototype\n\nThe value of Intl.Locale.prototype is %LocalePrototype%.\n\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\n","includes":["propertyHelper.js"],"features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/prototype/region/branding.js","esid":" sec-Intl.Locale.prototype.region","description":" >Verifies the branding check for the \"region\" property of the Locale prototype object.\n","info":" |Intl.Locale.prototype.region\n\n2. If Type(loc) is not Object or loc does not have an [[InitializedLocale]] internal slot, then\na. Throw a TypeError exception.\n","features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/prototype/region/name.js","esid":" sec-intl.locale.prototype.region","description":" >Checks the \"name\" property of Intl.Locale.prototype.region.\n","info":" |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, that is not identified as an anonymous function has a name property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification. Functions that are specified as get or set accessor functions of built-in properties have \"get \" or \"set \" prepended to the property name string.\nUnless otherwise specified, the name property of a built-in function object, if it exists, has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/prototype/region/prop-desc.js","esid":" sec-intl.locale","description":" >Checks the \"region\" property of the Locale prototype object.\n","info":" |Intl.Locale.prototype.region\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAregion objects in the ECMAregion 2019 region Specification, 10th edition, clause 17, or successor.\n\nEvery accessor property described in clauses 18 through 26 and in Annex B.2 has the attributes { [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified. If only a get accessor function is described, the set accessor function is the default value, undefined.\n","includes":["propertyHelper.js"],"features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/prototype/script/branding.js","esid":" sec-Intl.Locale.prototype.script","description":" >Verifies the branding check for the \"script\" property of the Locale prototype object.\n","info":" |Intl.Locale.prototype.script\n\n2. If Type(loc) is not Object or loc does not have an [[InitializedLocale]] internal slot, then\na. Throw a TypeError exception.\n","features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/prototype/script/name.js","esid":" sec-intl.locale.prototype.script","description":" >Checks the \"name\" property of Intl.Locale.prototype.script.\n","info":" |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, that is not identified as an anonymous function has a name property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification. Functions that are specified as get or set accessor functions of built-in properties have \"get \" or \"set \" prepended to the property name string.\nUnless otherwise specified, the name property of a built-in function object, if it exists, has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/prototype/script/prop-desc.js","esid":" sec-intl.locale","description":" >Checks the \"script\" property of the Locale prototype object.\n","info":" |Intl.Locale.prototype.script\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 script Specification, 10th edition, clause 17, or successor.\n\nEvery accessor property described in clauses 18 through 26 and in Annex B.2 has the attributes { [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified. If only a get accessor function is described, the set accessor function is the default value, undefined.\n","includes":["propertyHelper.js"],"features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/prototype/toString/branding.js","esid":" sec-Intl.Locale.prototype.toString","description":" >Verifies the branding check for the \"toString\" function of the Locale prototype object.\n","info":" |Intl.Locale.prototype.toString\n\n2. If Type(loc) is not Object or loc does not have an [[InitializedLocale]] internal slot, then\na. Throw a TypeError exception.\n","features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/prototype/toString/prop-desc.js","esid":" sec-intl.locale","description":" >Checks the \"toString\" property of the Locale prototype object.\n","info":" |Intl.Locale.prototype.toString ()\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\n","includes":["propertyHelper.js"],"features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/prototype/toStringTag/toString-removed-tag.js","esid":" sec-intl.locale.prototype-@@tostringtag","description":" >Checks Object.prototype.toString with Intl.Locale objects.\n","info":" |Intl.Locale.prototype[ @@toStringTag ]\n\nThe initial value of the @@toStringTag property is the string value \"Intl.Locale\".\n","features":["Intl.Locale","Symbol.toStringTag"]},{"path":"./test262-main/test/intl402/Locale/prototype/toStringTag/toString.js","esid":" sec-intl.locale.prototype-@@tostringtag","description":" >Checks Object.prototype.toString with Intl.Locale objects.\n","info":" |Intl.Locale.prototype[ @@toStringTag ]\n\nThe initial value of the @@toStringTag property is the string value \"Intl.Locale\".\n","features":["Intl.Locale","Symbol.toStringTag"]},{"path":"./test262-main/test/intl402/Locale/prototype/toStringTag/toStringTag.js","esid":" sec-intl.locale.prototype-@@tostringtag","description":" >Checks the @@toStringTag property of the Locale prototype object.\n","info":" |Intl.Locale.prototype[ @@toStringTag ]\n\nThe initial value of the @@toStringTag property is the string value \"Intl.Locale\".\n\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["Intl.Locale","Symbol.toStringTag"]},{"path":"./test262-main/test/intl402/Locale/reject-duplicate-variants-in-tlang.js","esid":" sec-isstructurallyvalidlanguagetag","description":" >Verifies that just as duplicate variants in a tag (\"en-emodeng-emodeng\") make\nthe tag structurally invalid, so too do duplicate variants in the tlang\ncomponent of an otherwise structurally valid tag (\"de-t-emodeng-emodeng\"),\nmake it structurally invalid.\n","info":" |if a `transformed_extensions` component that contains a `tlang` component is\npresent, then\nthe `tlang` component contains no duplicate `unicode_variant_subtag`\nsubtags.\n","features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/reject-duplicate-variants.js","esid":" sec-isstructurallyvalidlanguagetag","description":" >Verifies that duplicate variants in a tag (\"en-emodeng-emodeng\") make the tag\nstructurally invalid.\n","info":" |the `unicode_language_id` within _locale_ contains no duplicate\n`unicode_variant_subtag` subtags\n","features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Locale/subclassing.js","esid":" sec-Intl.Locale","description":" Checks that Locale can be subclassed.","info":" |Intl.Locale( tag [, options] )\n\n6. Let locale be ? OrdinaryCreateFromConstructor(NewTarget, %LocalePrototype%, internalSlotsList).\n\n","features":["Intl.Locale"]},{"path":"./test262-main/test/intl402/Number/prototype/toLocaleString/builtin.js","version":5,"esid":" 13.2.1_L15","description":" >Tests that Number.prototype.toLocaleString meets the requirements\nfor built-in objects defined by the introduction of chapter 17 of\nthe ECMAScript Language Specification.\n","author":" Norbert Lindenberg","includes":["isConstructor.js"],"features":["Reflect.construct"]},{"path":"./test262-main/test/intl402/Number/prototype/toLocaleString/default-options-object-prototype.js","esid":" sec-initializenumberformat","description":" >Monkey-patching Object.prototype does not change the default\noptions for NumberFormat as a null prototype is used.\n","info":" |InitializeNumberFormat ( numberFormat, locales, options )\n\n1. If _options_ is *undefined*, then\n1. Let _options_ be ObjectCreate(*null*).\n"},{"path":"./test262-main/test/intl402/Number/prototype/toLocaleString/length.js","esid":" sup-number.prototype.tolocalestring","description":" >Number.prototype.toLocaleString.length is 0.\n","info":" |Number.prototype.toLocaleString ( [ locales [ , options ] ] )\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery built-in function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description. Optional parameters\n(which are indicated with brackets: [ ]) or rest parameters (which\nare shown using the form «...name») are not included in the default\nargument count.\nUnless otherwise specified, the length property of a built-in function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n\n","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/Number/prototype/toLocaleString/returns-same-results-as-NumberFormat.js","version":5,"esid":" 13.2.1_5","description":" >Tests that Number.prototype.toLocaleString produces the same\nresults as Intl.NumberFormat.\n","author":" Norbert Lindenberg","includes":["compareArray.js"]},{"path":"./test262-main/test/intl402/Number/prototype/toLocaleString/taint-Intl-NumberFormat.js","version":5,"esid":" 13.2.1_4_2","description":" >Tests that Number.prototype.toLocaleString uses the standard\nbuilt-in Intl.NumberFormat constructor.\n","author":" Norbert Lindenberg","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/Number/prototype/toLocaleString/this-number-value.js","version":5,"esid":" 13.2.1_1","description":" Tests that toLocaleString handles \"this Number value\" correctly.","author":" Norbert Lindenberg"},{"path":"./test262-main/test/intl402/Number/prototype/toLocaleString/throws-same-exceptions-as-NumberFormat.js","version":5,"esid":" 13.2.1_4_1","description":" >Tests that Number.prototype.toLocaleString throws the same\nexceptions as Intl.NumberFormat.\n","author":" Norbert Lindenberg"},{"path":"./test262-main/test/intl402/NumberFormat/builtin.js","version":5,"esid":" 11.1_L15","description":" >Tests that Intl.NumberFormat meets the requirements for built-in\nobjects defined by the introduction of chapter 17 of the\nECMAScript Language Specification.\n","author":" Norbert Lindenberg"},{"path":"./test262-main/test/intl402/NumberFormat/casing-numbering-system-options.js","esid":" sec-initializenumberformat","description":" >Tests that the options numberingSystem are mapped to lower case.\n","author":" Caio Lima"},{"path":"./test262-main/test/intl402/NumberFormat/constructor-compactDisplay-compact.js","esid":" sec-initializenumberformat","description":" Checks handling of the compactDisplay option to the NumberFormat constructor.","info":" |InitializeNumberFormat ( numberFormat, locales, options )\n\n19. Let compactDisplay be ? GetOption(options, \"compactDisplay\", \"string\", « \"short\", \"long\" », \"short\").\n20. If notation is \"compact\", then\na. Set numberFormat.[[CompactDisplay]] to compactDisplay.\n\n","includes":["compareArray.js"],"features":["Intl.NumberFormat-unified"]},{"path":"./test262-main/test/intl402/NumberFormat/constructor-compactDisplay-no-compact.js","esid":" sec-initializenumberformat","description":" Checks handling of the compactDisplay option to the NumberFormat constructor.","info":" |InitializeNumberFormat ( numberFormat, locales, options )\n\n19. Let compactDisplay be ? GetOption(options, \"compactDisplay\", \"string\", « \"short\", \"long\" », \"short\").\n20. If notation is \"compact\", then\na. Set numberFormat.[[CompactDisplay]] to compactDisplay.\n\n","includes":["compareArray.js"],"features":["Intl.NumberFormat-unified"]},{"path":"./test262-main/test/intl402/NumberFormat/constructor-default-value.js","esid":" sec-initializenumberformat","description":" >Tests that the constructor for Intl.NumberFormat uses appropriate default\nvalues for its arguments (locales and options).\n"},{"path":"./test262-main/test/intl402/NumberFormat/constructor-locales-arraylike.js","esid":" sec-initializenumberformat","description":" >Tests that the Intl.NumberFormat constructor accepts Array-like values for the\nlocales argument and treats them well.\n"},{"path":"./test262-main/test/intl402/NumberFormat/constructor-locales-get-tostring.js","esid":" sec-initializenumberformat","description":" >Tests that Get(O, P) and ToString(arg) are properly called within the\nconstructor for Intl.NumberFormat\n","info":" |9.2.1 CanonicalizeLocaleList ( locales )\n\n5. Let len be ? ToLength(? Get(O, \"length\")).\n\n7.a. Let Pk be ToString(k).\n\n7.c.i. Let kValue be ? Get(O, Pk).\n"},{"path":"./test262-main/test/intl402/NumberFormat/constructor-locales-hasproperty.js","esid":" sec-initializenumberformat","description":" >Tests that HasProperty(O, Pk) is properly called within the constructor for\nIntl.NumberFormat\n","info":" |9.2.1 CanonicalizeLocaleList ( locales )\n\n7.b. Let kPresent be ? HasProperty(O, Pk).\n"},{"path":"./test262-main/test/intl402/NumberFormat/constructor-locales-string.js","esid":" sec-initializenumberformat","description":" >Tests that passing a string value to the Intl.NumberFormat constructor is\nequivalent to passing an Array containing the same string value.\n","info":" |9.2.1 CanonicalizeLocaleList ( locales )\n\n3 .If Type(locales) is String, then\na. Let O be CreateArrayFromList(« locales »).\n"},{"path":"./test262-main/test/intl402/NumberFormat/constructor-locales-toobject.js","esid":" sec-initializenumberformat","description":" >Tests that Intl.NumberFormat contructor converts the locales argument\nto an object using `ToObject` (7.1.13).\n","info":" |9.2.1 CanonicalizeLocaleList\n\n4.a. Let O be ? ToObject(locales).\n"},{"path":"./test262-main/test/intl402/NumberFormat/constructor-no-instanceof.js","esid":" sec-Intl.NumberFormat.prototype.resolvedOptions","description":" >Tests that Intl.NumberFormat.prototype.resolvedOptions calls\nOrdinaryHasInstance instead of the instanceof operator which includes a\nSymbol.hasInstance lookup and call among other things.\n"},{"path":"./test262-main/test/intl402/NumberFormat/constructor-notation.js","esid":" sec-initializenumberformat","description":" Checks handling of the notation option to the NumberFormat constructor.","info":" |InitializeNumberFormat ( numberFormat, locales, options )\n\n16. Let notation be ? GetOption(options, \"notation\", \"string\", « \"standard\", \"scientific\", \"engineering\", \"compact\" », \"standard\").\n17. Set numberFormat.[[Notation]] to notation.\n\n","features":["Intl.NumberFormat-unified"]},{"path":"./test262-main/test/intl402/NumberFormat/constructor-numberingSystem-order.js","esid":" sec-initializenumberformat","description":" >Checks the order of getting \"numberingSystem\" option in the\nNumberFormat is between \"localeMatcher\" and \"style\" options.\n","info":" |InitializeNumberFormat ( _numberFormat_, _locales_, _options_ )\n\n5. Let _matcher_ be ? GetOption(_options_, `\"localeMatcher\"`, `\"string\"`, &laquo; `\"lookup\"`, `\"best fit\"` &raquo;, `\"best fit\"`).\n...\n7. Let _numberingSystem_ be ? GetOption(_options_, `\"numberingSystem\"`, `\"string\"`, *undefined*, *undefined*).\n...\n17. Let _style_ be ? GetOption(_options_, `\"style\"`, `\"string\"`, &laquo; `\"decimal\"`, `\"percent\"`, `\"currency\"` &raquo;, `\"decimal\"`).\n","includes":["compareArray.js"]},{"path":"./test262-main/test/intl402/NumberFormat/constructor-options-numberingSystem-invalid.js","esid":" sec-initializenumberformat","description":" >Checks error cases for the options argument to the NumberFormat constructor.\n","info":" |InitializeNumberFormat ( numberFormat, locales, options )\n\n...\n8. If numberingSystem is not undefined, then\na. If numberingSystem does not match the Unicode Locale Identifier type nonterminal, throw a RangeError exception.\n"},{"path":"./test262-main/test/intl402/NumberFormat/constructor-options-throwing-getters.js","esid":" sec-initializenumberformat","description":" Checks the propagation of exceptions from the options for the NumberFormat constructor."},{"path":"./test262-main/test/intl402/NumberFormat/constructor-options-toobject.js","esid":" sec-initializenumberformat","description":" >Tests that Intl.NumberFormat contructor converts the options argument\nto an object using `ToObject` (7.1.13).\n","info":" |11.1.2 InitializeNumberFormat\n\n3.a. Let options be ? ToObject(options).\n"},{"path":"./test262-main/test/intl402/NumberFormat/constructor-order.js","esid":" sec-initializenumberformat","description":" Checks handling of the unit option with the currency style.","info":" |SetNumberFormatUnitOptions ( intlObj, options )\n\n5. Let currency be ? GetOption(options, \"currency\", \"string\", undefined, undefined).\n6. If currency is not undefined, then\na. If the result of IsWellFormedCurrencyCode(currency) is false, throw a RangeError exception.\n7. If style is \"currency\" and currency is undefined, throw a TypeError exception.\n...\n10. Let unit be ? GetOption(options, \"unit\", \"string\", undefined, undefined).\n11. If unit is not undefined, then\na. If the result of IsWellFormedUnitIdentifier(unit) is false, throw a RangeError exception.\n12. If style is \"unit\" and unit is undefined, throw a TypeError exception.\n","features":["Intl.NumberFormat-unified"]},{"path":"./test262-main/test/intl402/NumberFormat/constructor-signDisplay.js","esid":" sec-initializenumberformat","description":" Checks handling of the compactDisplay option to the NumberFormat constructor.","info":" |InitializeNumberFormat ( numberFormat, locales, options )\n\n23. Let signDisplay be ? GetOption(options, \"signDisplay\", \"string\", « \"auto\", \"never\", \"always\", \"exceptZero\" », \"auto\").\n24. Set numberFormat.[[SignDisplay]] to signDisplay.\n\n","features":["Intl.NumberFormat-unified"]},{"path":"./test262-main/test/intl402/NumberFormat/constructor-unit.js","esid":" sec-initializenumberformat","description":" Checks handling of the unit style.","features":["Intl.NumberFormat-unified"]},{"path":"./test262-main/test/intl402/NumberFormat/constructor-unitDisplay.js","esid":" sec-initializenumberformat","description":" Checks handling of the compactDisplay option to the NumberFormat constructor.","info":" |InitializeNumberFormat ( numberFormat, locales, options )\n\n23. Let signDisplay be ? GetOption(options, \"signDisplay\", \"string\", « \"auto\", \"never\", \"always\", \"exceptZero\" », \"auto\").\n24. Set numberFormat.[[SignDisplay]] to signDisplay.\n\n","features":["Intl.NumberFormat-unified"]},{"path":"./test262-main/test/intl402/NumberFormat/currency-code-invalid.js","version":5,"esid":" 6.3.1_b","description":" Tests that invalid currency codes are not accepted.","author":" Norbert Lindenberg"},{"path":"./test262-main/test/intl402/NumberFormat/currency-code-well-formed.js","version":5,"esid":" 6.3.1_a","description":" Tests that well-formed currency codes are accepted.","author":" Norbert Lindenberg"},{"path":"./test262-main/test/intl402/NumberFormat/currency-digits.js","version":5,"esid":" 11.1.1_20_c","description":" >Tests that the number of fractional digits is determined correctly\nfor currencies.\n","author":" Norbert Lindenberg"},{"path":"./test262-main/test/intl402/NumberFormat/currencyDisplay-unit.js","esid":" sec-setnumberformatunitoptions","description":" Checks handling of valid values for the numeric option to the NumberFormat constructor.","info":" |SetNumberFormatUnitOptions ( intlObj, options )\n\n6. Let currencyDisplay be ? GetOption(options, \"currencyDisplay\", \"string\", « \"code\", \"symbol\", \"narrowSymbol\", \"name\" », \"symbol\").\n11. If style is \"currency\", then\nf. Set intlObj.[[CurrencyDisplay]] to currencyDisplay.\n\n","features":["Intl.NumberFormat-unified"]},{"path":"./test262-main/test/intl402/NumberFormat/default-minimum-singificant-digits.js","description":" Tests that the default value of minimumSignificantDigits is 1.","esid":" sec-setnfdigitoptions"},{"path":"./test262-main/test/intl402/NumberFormat/default-options-object-prototype.js","esid":" sec-initializenumberformat","description":" >Monkey-patching Object.prototype does not change the default\noptions for NumberFormat as a null prototype is used.\n","info":" |InitializeNumberFormat ( numberFormat, locales, options )\n\n1. If _options_ is *undefined*, then\n1. Let _options_ be ObjectCreate(*null*).\n"},{"path":"./test262-main/test/intl402/NumberFormat/dft-currency-mnfd-range-check-mxfd.js","esid":" sec-setnfdigitoptions","description":" >When a currency is used in Intl.NumberFormat and minimumFractionDigits is\nnot provided, maximumFractionDigits should be set as provided.\n"},{"path":"./test262-main/test/intl402/NumberFormat/fraction-digit-options-read-once.js","esid":" sec-setnfdigitoptions","description":" >The maximum and minimum fraction digits properties should be read from\nthe options bag exactly once from the NumberFormat constructor.\n","info":" Regression test for https"},{"path":"./test262-main/test/intl402/NumberFormat/ignore-invalid-unicode-ext-values.js","version":5,"esid":" 11.2.3_b","description":" >Tests that Intl.NumberFormat does not accept Unicode locale\nextension keys and values that are not allowed.\n","author":" Norbert Lindenberg"},{"path":"./test262-main/test/intl402/NumberFormat/instance-proto-and-extensible.js","version":5,"esid":" 11.1.3","description":" >Tests that objects constructed by Intl.NumberFormat have the\nspecified internal properties.\n","author":" Norbert Lindenberg"},{"path":"./test262-main/test/intl402/NumberFormat/intl-legacy-constructed-symbol-on-unwrap.js","esid":" sec-unwrapnumberformat","description":" >Tests that [[FallbackSymbol]]'s [[Description]] is \"IntlLegacyConstructedSymbol\" if normative optional is implemented.\n","author":" Yusuke Suzuki","features":["intl-normative-optional"]},{"path":"./test262-main/test/intl402/NumberFormat/intl-legacy-constructed-symbol.js","esid":" sec-intl.numberformat","description":" >Tests that [[FallbackSymbol]]'s [[Description]] is \"IntlLegacyConstructedSymbol\" if normative optional is implemented.\n","author":" Yusuke Suzuki","features":["intl-normative-optional"]},{"path":"./test262-main/test/intl402/NumberFormat/legacy-regexp-statics-not-modified.js","version":5,"esid":" 11.1.1_a","description":" >Tests that constructing a NumberFormat doesn't create or modify\nunwanted properties on the RegExp constructor.\n","author":" Norbert Lindenberg","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/NumberFormat/length.js","esid":" sec-intl.numberformat","description":" >Intl.NumberFormat.length is 0.\n","info":" |Intl.NumberFormat ( [ locales [ , options ] ] )\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery built-in function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description. Optional parameters\n(which are indicated with brackets: [ ]) or rest parameters (which\nare shown using the form «...name») are not included in the default\nargument count.\nUnless otherwise specified, the length property of a built-in function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n\n","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/NumberFormat/name.js","esid":" sec-Intl.NumberFormat","description":" >Intl.NumberFormat.name is \"NumberFormat\".\n","info":" |11.2.1 Intl.NumberFormat ([ locales [ , options ]])\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/NumberFormat/numbering-system-options.js","esid":" sec-initializenumberformat","description":" >Tests that the options numberingSystem and calendar can beset through\neither the locale or the options.\n","author":" Norbert Lindenberg, Daniel Ehrenberg"},{"path":"./test262-main/test/intl402/NumberFormat/prop-desc.js","esid":" sec-intl.numberformat-intro","description":" >\"NumberFormat\" property of Intl.\n","info":" |Intl.NumberFormat (...)\n\n7 Requirements for Standard Built-in ECMAScript Objects\n\nUnless specified otherwise in this document, the objects, functions, and constructors\ndescribed in this standard are subject to the generic requirements and restrictions\nspecified for standard built-in ECMAScript objects in the ECMAScript 2018 Language\nSpecification, 9th edition, clause 17, or successor.\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the\nattributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true }\nunless otherwise specified.\n\n","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/NumberFormat/proto-from-ctor-realm.js","esid":" sec-intl.numberformat","description":" Default [[Prototype]] value derived from realm of the NewTarget.","info":" |Intl.NumberFormat ( [ locales [ , options ] ] )\n\n1. If NewTarget is undefined, let newTarget be the active function object, else let newTarget be NewTarget.\n2. Let numberFormat be ? OrdinaryCreateFromConstructor(newTarget, \"%NumberFormatPrototype%\", « ... »).\n...\n6. Return numberFormat.\n\nOrdinaryCreateFromConstructor ( constructor, intrinsicDefaultProto [ , internalSlotsList ] )\n\n...\n2. Let proto be ? GetPrototypeFromConstructor(constructor, intrinsicDefaultProto).\n3. Return ObjectCreate(proto, internalSlotsList).\n\nGetPrototypeFromConstructor ( constructor, intrinsicDefaultProto )\n\n...\n3. Let proto be ? Get(constructor, 'prototype').\n4. If Type(proto) is not Object, then\na. Let realm be ? GetFunctionRealm(constructor).\nb. Set proto to realm's intrinsic object named intrinsicDefaultProto.\n5. Return proto.\n","features":["cross-realm","Reflect","Symbol"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/builtin.js","version":5,"esid":" 11.3_L15","description":" >Tests that Intl.NumberFormat.prototype meets the requirements for\nbuilt-in objects defined by the introduction of chapter 17 of the\nECMAScript Language Specification.\n","author":" Norbert Lindenberg"},{"path":"./test262-main/test/intl402/NumberFormat/prototype/constructor/prop-desc.js","esid":" sec-intl.numberformat.prototype.constructor","description":" >\"constructor\" property of Intl.NumberFormat.prototype.\n","info":" |Intl.NumberFormat.prototype.constructor\n\n7 Requirements for Standard Built-in ECMAScript Objects\n\nUnless specified otherwise in this document, the objects, functions, and constructors\ndescribed in this standard are subject to the generic requirements and restrictions\nspecified for standard built-in ECMAScript objects in the ECMAScript 2018 Language\nSpecification, 9th edition, clause 17, or successor.\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the\nattributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true }\nunless otherwise specified.\n\n","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/constructor/value.js","version":5,"esid":" 11.3.1","description":" >Tests that Intl.NumberFormat.prototype.constructor is the\nIntl.NumberFormat.\n","author":" Roozbeh Pournader"},{"path":"./test262-main/test/intl402/NumberFormat/prototype/format/bound-to-numberformat-instance.js","version":5,"esid":" 11.3.2_1_c","description":" Tests that format function is bound to its Intl.NumberFormat.","author":" Norbert Lindenberg"},{"path":"./test262-main/test/intl402/NumberFormat/prototype/format/builtin.js","version":5,"esid":" 11.3.2_L15","description":" >Tests that the getter for Intl.NumberFormat.prototype.format\nmeets the requirements for built-in objects defined by the\nintroduction of chapter 17 of the ECMAScript Language\nSpecification.\n","author":" Norbert Lindenberg","includes":["isConstructor.js"],"features":["Reflect.construct"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/format/default-value.js","esid":" sec-number-format-functions","description":" >Tests that the default value for the argument of\nIntl.NumberFormat.prototype.format (value) is undefined.\n","info":" |11.1.4 Number Format Functions\n\n3. If value is not provided, let value be undefined.\n4. Let x be ? ToNumber(value).\n"},{"path":"./test262-main/test/intl402/NumberFormat/prototype/format/engineering-scientific-de-DE.js","esid":" sec-intl.numberformat.prototype.format","description":" Checks handling of the engineering and scientific notations.","features":["Intl.NumberFormat-unified"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/format/engineering-scientific-en-US.js","esid":" sec-intl.numberformat.prototype.format","description":" Checks handling of the engineering and scientific notations.","features":["Intl.NumberFormat-unified"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/format/engineering-scientific-ja-JP.js","esid":" sec-intl.numberformat.prototype.format","description":" Checks handling of the engineering and scientific notations.","features":["Intl.NumberFormat-unified"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/format/engineering-scientific-ko-KR.js","esid":" sec-intl.numberformat.prototype.format","description":" Checks handling of the engineering and scientific notations.","features":["Intl.NumberFormat-unified"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/format/engineering-scientific-zh-TW.js","esid":" sec-intl.numberformat.prototype.format","description":" Checks handling of the engineering and scientific notations.","features":["Intl.NumberFormat-unified"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/format/format-fraction-digits-precision.js","version":5,"esid":" 11.3.2_TRF","description":" >Tests that the digits are determined correctly when specifying\npre/post decimal digits.\n","author":" Norbert Lindenberg","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/format/format-fraction-digits.js","version":5,"esid":" 11.3.2_TRF","description":" >Tests that the digits are determined correctly when specifying\npre/post decimal digits.\n","author":" Norbert Lindenberg","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/format/format-function-builtin.js","version":5,"esid":" 11.3.2_1_a_L15","description":" >Tests that the function returned by\nIntl.NumberFormat.prototype.format meets the requirements for\nbuilt-in objects defined by the introduction of chapter 17 of the\nECMAScript Language Specification.\n","author":" Norbert Lindenberg","includes":["isConstructor.js"],"features":["Reflect.construct"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/format/format-function-length.js","esid":" sec-intl.numberformat.prototype.format","description":" >The length of the bound Number Format function is 1.\n","info":" |get Intl.NumberFormat.prototype.format\n\n...\n4. If nf.[[BoundFormat]] is undefined, then\na. Let F be a new built-in function object as defined in Number Format Functions (11.1.4).\nb. Let bf be BoundFunctionCreate(F, nf, « »).\nc. Perform ! DefinePropertyOrThrow(bf, \"length\", PropertyDescriptor {[[Value]]: 1,\n[[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true}).\n...\n\n","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/format/format-function-name.js","esid":" sec-Intl.NumberFormat.prototype.format","description":" >The bound NumberFormat format function is an anonymous function.\n","info":" |11.4.3 get Intl.NumberFormat.prototype.compare\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in function object, including constructors, has a `name`\nproperty whose value is a String. Functions that are identified as\nanonymous functions use the empty string as the value of the `name`\nproperty.\nUnless otherwise specified, the `name` property of a built-in function\nobject has the attributes { [[Writable]]: *false*, [[Enumerable]]: *false*,\n[[Configurable]]: *true* }.\n","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/format/format-function-property-order.js","esid":" sec-createbuiltinfunction","description":" NumberFormat bound format function property order","info":" |Set order: \"length\", \"name\"\n","includes":["compareArray.js"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/format/format-negative-numbers.js","version":5,"esid":" 11.3.2_FN_1","description":" >Tests that Intl.NumberFormat.prototype.formatdoesn't treat all\nnumbers as negative.\n","info":" |PartitionNumberPattern ( numberFormat, x )\n1. If x is not NaN and x < 0 or _x_ is -0, then\na. Let _x_ be -_x_.\nb. Let _pattern_ be _numberFormat_.[[NegativePattern]].\n","author":" Roozbeh Pournader"},{"path":"./test262-main/test/intl402/NumberFormat/prototype/format/format-non-finite-numbers.js","version":5,"esid":" 11.3.2_FN_2","description":" >Tests that Intl.NumberFormat.prototype.formathandles NaN,\nInfinity, and -Infinity properly.\n","author":" Roozbeh Pournader"},{"path":"./test262-main/test/intl402/NumberFormat/prototype/format/format-significant-digits-precision.js","version":5,"esid":" 11.3.2_TRP","description":" >Tests that the digits are determined correctly when specifying\nsignificant digits.\n","author":" Norbert Lindenberg","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/format/format-significant-digits.js","version":5,"esid":" 11.3.2_TRP","description":" >Tests that the digits are determined correctly when specifying\nsignificant digits.\n","author":" Norbert Lindenberg","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/format/length.js","esid":" sec-intl.numberformat.prototype.format","description":" >get Intl.NumberFormat.prototype.format.length is 0.\n","info":" |get Intl.NumberFormat.prototype.format\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery built-in function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description. Optional parameters\n(which are indicated with brackets: [ ]) or rest parameters (which\nare shown using the form «...name») are not included in the default\nargument count.\nUnless otherwise specified, the length property of a built-in function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n\n","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/format/name.js","esid":" sec-Intl.NumberFormat.prototype.format","description":" >get Intl.NumberFormat.prototype.format.name is \"get format\".\n","info":" |11.4.3 get Intl.NumberFormat.prototype.format\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/format/no-instanceof.js","esid":" sec-Intl.NumberFormat.prototype.resolvedOptions","description":" >Tests that Intl.NumberFormat.prototype.resolvedOptions calls\nOrdinaryHasInstance instead of the instanceof operator which includes a\nSymbol.hasInstance lookup and call among other things.\n"},{"path":"./test262-main/test/intl402/NumberFormat/prototype/format/notation-compact-de-DE.js","esid":" sec-intl.numberformat.prototype.format","description":" Checks handling of the compactDisplay option to the NumberFormat constructor.","features":["Intl.NumberFormat-unified"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/format/notation-compact-en-US.js","esid":" sec-intl.numberformat.prototype.format","description":" Checks handling of the compactDisplay option to the NumberFormat constructor.","features":["Intl.NumberFormat-unified"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/format/notation-compact-ja-JP.js","esid":" sec-intl.numberformat.prototype.format","description":" Checks handling of the compactDisplay option to the NumberFormat constructor.","features":["Intl.NumberFormat-unified"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/format/notation-compact-ko-KR.js","esid":" sec-intl.numberformat.prototype.format","description":" Checks handling of the compactDisplay option to the NumberFormat constructor.","features":["Intl.NumberFormat-unified"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/format/notation-compact-zh-TW.js","esid":" sec-intl.numberformat.prototype.format","description":" Checks handling of the compactDisplay option to the NumberFormat constructor.","features":["Intl.NumberFormat-unified"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/format/numbering-systems.js","esid":" table-numbering-system-digits","description":" >Tests that Intl.NumberFormat.prototype.format supports all\nnumbering systems with simple digit mappings.\n","author":" Roozbeh Pournader"},{"path":"./test262-main/test/intl402/NumberFormat/prototype/format/percent-formatter.js","version":5,"esid":" 11.3.2_FN_3_b","description":" >Tests that Intl.NumberFormat.prototype.formatformats percent\nvalues properly.\n","author":" Roozbeh Pournader"},{"path":"./test262-main/test/intl402/NumberFormat/prototype/format/prop-desc.js","esid":" sec-intl.numberformat.prototype.format","description":" >\"format\" property of Intl.NumberFormat.prototype.\n","info":" |get Intl.NumberFormat.prototype.format\n\n7 Requirements for Standard Built-in ECMAScript Objects\n\nUnless specified otherwise in this document, the objects, functions, and constructors\ndescribed in this standard are subject to the generic requirements and restrictions\nspecified for standard built-in ECMAScript objects in the ECMAScript 2018 Language\nSpecification, 9th edition, clause 17, or successor.\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery accessor property described in clauses 18 through 26 and in Annex B.2 has the\nattributes { [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\nIf only a get accessor function is described, the set accessor function is the default\nvalue, undefined. If only a set accessor is described the get accessor is the default\nvalue, undefined.\n\n","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/format/signDisplay-currency-de-DE.js","esid":" sec-intl.numberformat.prototype.format","description":" Checks handling of the compactDisplay option to the NumberFormat constructor.","features":["Intl.NumberFormat-unified"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/format/signDisplay-currency-en-US.js","esid":" sec-intl.numberformat.prototype.format","description":" Checks handling of the compactDisplay option to the NumberFormat constructor.","features":["Intl.NumberFormat-unified"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/format/signDisplay-currency-ja-JP.js","esid":" sec-intl.numberformat.prototype.format","description":" Checks handling of the compactDisplay option to the NumberFormat constructor.","features":["Intl.NumberFormat-unified"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/format/signDisplay-currency-ko-KR.js","esid":" sec-intl.numberformat.prototype.format","description":" Checks handling of the compactDisplay option to the NumberFormat constructor.","features":["Intl.NumberFormat-unified"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/format/signDisplay-currency-zh-TW.js","esid":" sec-intl.numberformat.prototype.format","description":" Checks handling of the compactDisplay option to the NumberFormat constructor.","features":["Intl.NumberFormat-unified"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/format/signDisplay-de-DE.js","esid":" sec-intl.numberformat.prototype.format","description":" Checks handling of the signDisplay option to the NumberFormat constructor.","features":["Intl.NumberFormat-unified"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/format/signDisplay-en-US.js","esid":" sec-intl.numberformat.prototype.format","description":" Checks handling of the signDisplay option to the NumberFormat constructor.","features":["Intl.NumberFormat-unified"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/format/signDisplay-ja-JP.js","esid":" sec-intl.numberformat.prototype.format","description":" Checks handling of the signDisplay option to the NumberFormat constructor.","features":["Intl.NumberFormat-unified"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/format/signDisplay-ko-KR.js","esid":" sec-intl.numberformat.prototype.format","description":" Checks handling of the signDisplay option to the NumberFormat constructor.","features":["Intl.NumberFormat-unified"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/format/signDisplay-rounding.js","esid":" sec-intl.numberformat.prototype.format","description":" Checks handling of the signDisplay option to the NumberFormat constructor.","features":["Intl.NumberFormat-unified"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/format/signDisplay-zh-TW.js","esid":" sec-intl.numberformat.prototype.format","description":" Checks handling of the signDisplay option to the NumberFormat constructor.","features":["Intl.NumberFormat-unified"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/format/this-value-not-numberformat.js","esid":" sec-intl.numberformat.prototype.format","description":" >Tests that Intl.NumberFormat.prototype.format throws a TypeError\nif called on a non-object value or an object that hasn't been\ninitialized as a NumberFormat.\n"},{"path":"./test262-main/test/intl402/NumberFormat/prototype/format/unit-de-DE.js","esid":" sec-intl.numberformat.prototype.format","description":" Checks handling of the unit style.","features":["Intl.NumberFormat-unified"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/format/unit-en-US.js","esid":" sec-intl.numberformat.prototype.format","description":" Checks handling of the unit style.","features":["Intl.NumberFormat-unified"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/format/unit-ja-JP.js","esid":" sec-intl.numberformat.prototype.format","description":" Checks handling of the unit style.","features":["Intl.NumberFormat-unified"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/format/unit-ko-KR.js","esid":" sec-intl.numberformat.prototype.format","description":" Checks handling of the unit style.","features":["Intl.NumberFormat-unified"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/format/unit-zh-TW.js","esid":" sec-intl.numberformat.prototype.format","description":" Checks handling of the unit style.","features":["Intl.NumberFormat-unified"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/format/units-invalid.js","esid":" sec-intl.numberformat.prototype.format","description":" Checks handling of units.","features":["Intl.NumberFormat-unified"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/format/units.js","esid":" sec-intl.numberformat.prototype.format","description":" Checks handling of units.","features":["Intl.NumberFormat-unified"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/format/value-arg-coerced-to-number.js","version":5,"esid":" 11.3.2_1_a_ii","description":" >Tests that Intl.NumberFormat.prototype.formatconverts other\ntypes to numbers.\n","author":" Roozbeh Pournader"},{"path":"./test262-main/test/intl402/NumberFormat/prototype/format/value-tonumber.js","esid":" sec-number-format-functions","description":" >Tests that Intl.NumberFormat.prototype.format converts its argument\n(called value) to a number using ToNumber (7.1.3).\n","info":" |11.1.4Number Format Functions\n\n4. Let x be ? ToNumber(value).\n","features":["Symbol"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/formatToParts/default-parameter.js","esid":" sec-intl.numberformat.prototype.formattoparts","description":" Intl.NumberFormat.prototype.formatToParts called with no parameters","info":" |Intl.NumberFormat.prototype.formatToParts ([ value ])\n\n3. If value is not provided, let value be undefined.\n"},{"path":"./test262-main/test/intl402/NumberFormat/prototype/formatToParts/engineering-scientific-de-DE.js","esid":" sec-intl.numberformat.prototype.formattoparts","description":" Checks handling of the engineering and scientific notations.","features":["Intl.NumberFormat-unified"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/formatToParts/engineering-scientific-en-US.js","esid":" sec-intl.numberformat.prototype.formattoparts","description":" Checks handling of the engineering and scientific notations.","features":["Intl.NumberFormat-unified"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/formatToParts/engineering-scientific-ja-JP.js","esid":" sec-intl.numberformat.prototype.formattoparts","description":" Checks handling of the engineering and scientific notations.","features":["Intl.NumberFormat-unified"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/formatToParts/engineering-scientific-ko-KR.js","esid":" sec-intl.numberformat.prototype.formattoparts","description":" Checks handling of the engineering and scientific notations.","features":["Intl.NumberFormat-unified"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/formatToParts/engineering-scientific-zh-TW.js","esid":" sec-intl.numberformat.prototype.formattoparts","description":" Checks handling of the engineering and scientific notations.","features":["Intl.NumberFormat-unified"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/formatToParts/length.js","description":" Intl.NumberFormat.prototype.formatToParts.length. ","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/formatToParts/main.js","description":" Tests for existance and behavior of Intl.NumberFormat.prototype.formatToParts"},{"path":"./test262-main/test/intl402/NumberFormat/prototype/formatToParts/name.js","description":" Intl.NumberFormat.prototype.formatToParts.name value and descriptor. ","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/formatToParts/notation-compact-de-DE.js","esid":" sec-intl.numberformat.prototype.formattoparts","description":" Checks handling of the compactDisplay option to the NumberFormat constructor.","features":["Intl.NumberFormat-unified"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/formatToParts/notation-compact-en-US.js","esid":" sec-intl.numberformat.prototype.formattoparts","description":" Checks handling of the compactDisplay option to the NumberFormat constructor.","features":["Intl.NumberFormat-unified"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/formatToParts/notation-compact-ja-JP.js","esid":" sec-intl.numberformat.prototype.formattoparts","description":" Checks handling of the compactDisplay option to the NumberFormat constructor.","features":["Intl.NumberFormat-unified"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/formatToParts/notation-compact-ko-KR.js","esid":" sec-intl.numberformat.prototype.formattoparts","description":" Checks handling of the compactDisplay option to the NumberFormat constructor.","features":["Intl.NumberFormat-unified"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/formatToParts/notation-compact-zh-TW.js","esid":" sec-intl.numberformat.prototype.formattoparts","description":" Checks handling of the compactDisplay option to the NumberFormat constructor.","features":["Intl.NumberFormat-unified"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/formatToParts/percent-en-US.js","esid":" sec-intl.numberformat.prototype.formattoparts","description":" Checks handling of the percent style and unit.","features":["Intl.NumberFormat-unified"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/formatToParts/prop-desc.js","esid":" sec-intl.numberformat.prototype.formattoparts","description":" >\"formatToParts\" property of Intl.NumberFormat.prototype.\n","info":" |11.4.4 Intl.NumberFormat.prototype.formatToParts\n\n7 Requirements for Standard Built-in ECMAScript Objects\n\nUnless specified otherwise in this document, the objects, functions, and constructors\ndescribed in this standard are subject to the generic requirements and restrictions\nspecified for standard built-in ECMAScript objects in the ECMAScript 2018 Language\nSpecification, 9th edition, clause 17, or successor.\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery accessor property described in clauses 18 through 26 and in Annex B.2 has the\nattributes { [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\nIf only a get accessor function is described, the set accessor function is the default\nvalue, undefined. If only a set accessor is described the get accessor is the default\nvalue, undefined.\n\n","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/formatToParts/signDisplay-currency-de-DE.js","esid":" sec-intl.numberformat.prototype.formattoparts","description":" Checks handling of the compactDisplay option to the NumberFormat constructor.","features":["Intl.NumberFormat-unified"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/formatToParts/signDisplay-currency-en-US.js","esid":" sec-intl.numberformat.prototype.formattoparts","description":" Checks handling of the compactDisplay option to the NumberFormat constructor.","features":["Intl.NumberFormat-unified"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/formatToParts/signDisplay-currency-ja-JP.js","esid":" sec-intl.numberformat.prototype.formattoparts","description":" Checks handling of the compactDisplay option to the NumberFormat constructor.","features":["Intl.NumberFormat-unified"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/formatToParts/signDisplay-currency-ko-KR.js","esid":" sec-intl.numberformat.prototype.formattoparts","description":" Checks handling of the compactDisplay option to the NumberFormat constructor.","features":["Intl.NumberFormat-unified"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/formatToParts/signDisplay-currency-zh-TW.js","esid":" sec-intl.numberformat.prototype.formattoparts","description":" Checks handling of the compactDisplay option to the NumberFormat constructor.","features":["Intl.NumberFormat-unified"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/formatToParts/signDisplay-de-DE.js","esid":" sec-intl.numberformat.prototype.formattoparts","description":" Checks handling of the signDisplay option to the NumberFormat constructor.","features":["Intl.NumberFormat-unified"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/formatToParts/signDisplay-en-US.js","esid":" sec-intl.numberformat.prototype.formattoparts","description":" Checks handling of the signDisplay option to the NumberFormat constructor.","features":["Intl.NumberFormat-unified"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/formatToParts/signDisplay-ja-JP.js","esid":" sec-intl.numberformat.prototype.formattoparts","description":" Checks handling of the signDisplay option to the NumberFormat constructor.","features":["Intl.NumberFormat-unified"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/formatToParts/signDisplay-ko-KR.js","esid":" sec-intl.numberformat.prototype.formattoparts","description":" Checks handling of the signDisplay option to the NumberFormat constructor.","features":["Intl.NumberFormat-unified"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/formatToParts/signDisplay-zh-TW.js","esid":" sec-intl.numberformat.prototype.formattoparts","description":" Checks handling of the signDisplay option to the NumberFormat constructor.","features":["Intl.NumberFormat-unified"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/formatToParts/this-value-not-numberformat.js","esid":" sec-Intl.NumberFormat.prototype.formatToParts","description":" >Tests that Intl.NumberFormat.prototype.formatToParts throws a\nTypeError if called on a non-object value or an object that hasn't\nbeen initialized as a NumberFormat.\n"},{"path":"./test262-main/test/intl402/NumberFormat/prototype/formatToParts/unit-de-DE.js","esid":" sec-intl.numberformat.prototype.formattoparts","description":" Checks handling of the unit style.","features":["Intl.NumberFormat-unified"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/formatToParts/unit-en-US.js","esid":" sec-intl.numberformat.prototype.formattoparts","description":" Checks handling of the unit style.","features":["Intl.NumberFormat-unified"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/formatToParts/unit-ja-JP.js","esid":" sec-intl.numberformat.prototype.formattoparts","description":" Checks handling of the unit style.","features":["Intl.NumberFormat-unified"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/formatToParts/unit-ko-KR.js","esid":" sec-intl.numberformat.prototype.formattoparts","description":" Checks handling of the unit style.","features":["Intl.NumberFormat-unified"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/formatToParts/unit-zh-TW.js","esid":" sec-intl.numberformat.prototype.formattoparts","description":" Checks handling of the unit style.","features":["Intl.NumberFormat-unified"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/formatToParts/unit.js","esid":" sec-intl.numberformat.prototype.formattoparts","description":" Checks handling of the unit style.","features":["Intl.NumberFormat-unified"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/formatToParts/value-tonumber.js","esid":" sec-intl.numberformat.prototype.formattoparts","description":" >Tests that Intl.NumberFormat.prototype.formatToParts converts\nits argument (called value) to a number using ToNumber (7.1.3).\n","info":" |11.1.4 Number Format Functions\n\n4. Let x be ? ToNumber(value).\n","features":["Symbol"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/prop-desc.js","version":5,"esid":" 11.2.1","description":" Tests that Intl.NumberFormat.prototype has the required attributes.","author":" Norbert Lindenberg","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/resolvedOptions/basic.js","version":5,"esid":" 11.3.3","description":" >Tests that the object returned by\nIntl.NumberFormat.prototype.resolvedOptionshas the right\nproperties.\n","author":" Norbert Lindenberg","includes":["testIntl.js","propertyHelper.js"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/resolvedOptions/builtin.js","version":5,"esid":" 11.3.3_L15","description":" >Tests that Intl.NumberFormat.prototype.resolvedOptions meets the\nrequirements for built-in objects defined by the introduction of\nchapter 17 of the ECMAScript Language Specification.\n","author":" Norbert Lindenberg","includes":["isConstructor.js"],"features":["Reflect.construct"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/resolvedOptions/compactDisplay.js","esid":" sec-intl.numberformat.prototype.resolvedoptions","description":" Verifies the existence of the compactDisplay property for the object returned by resolvedOptions().","features":["Intl.NumberFormat-unified"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/resolvedOptions/length.js","esid":" sec-intl.numberformat.prototype.resolvedoptions","description":" >Intl.NumberFormat.prototype.resolvedOptions.length is 0.\n","info":" |Intl.NumberFormat.prototype.resolvedOptions ()\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery built-in function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description. Optional parameters\n(which are indicated with brackets: [ ]) or rest parameters (which\nare shown using the form «...name») are not included in the default\nargument count.\nUnless otherwise specified, the length property of a built-in function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n\n","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/resolvedOptions/name.js","esid":" sec-Intl.NumberFormat.prototype.resolvedOptions","description":" >Intl.NumberFormat.prototype.resolvedOptions.name is \"resolvedOptions\".\n","info":" |11.4.4 Intl.NumberFormat.prototype.resolvedOptions ()\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/resolvedOptions/no-instanceof.js","esid":" sec-Intl.NumberFormat.prototype.resolvedOptions","description":" >Tests that Intl.NumberFormat.prototype.resolvedOptions calls\nOrdinaryHasInstance instead of the instanceof operator which includes a\nSymbol.hasInstance lookup and call among other things.\n"},{"path":"./test262-main/test/intl402/NumberFormat/prototype/resolvedOptions/order.js","esid":" sec-intl.numberformat.prototype.resolvedoptions","description":" Verifies the property order for the object returned by resolvedOptions().","includes":["compareArray.js"],"features":["Intl.NumberFormat-unified"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/resolvedOptions/prop-desc.js","esid":" sec-intl.numberformat.prototype.resolvedoptions","description":" >\"resolvedOptions\" property of Intl.NumberFormat.prototype.\n","info":" |Intl.NumberFormat.prototype.resolvedOptions ()\n\n7 Requirements for Standard Built-in ECMAScript Objects\n\nUnless specified otherwise in this document, the objects, functions, and constructors\ndescribed in this standard are subject to the generic requirements and restrictions\nspecified for standard built-in ECMAScript objects in the ECMAScript 2018 Language\nSpecification, 9th edition, clause 17, or successor.\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the\nattributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true }\nunless otherwise specified.\n\n","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/NumberFormat/prototype/resolvedOptions/this-value-not-numberformat.js","esid":" sec-Intl.NumberFormat.prototype.resolvedOptions","description":" >Tests that Intl.NumberFormat.prototype.resolvedOptions throws a\nTypeError if called on a non-object value or an object that hasn't\nbeen initialized as a NumberFormat.\n"},{"path":"./test262-main/test/intl402/NumberFormat/prototype/this-value-numberformat-prototype.js","esid":" sec-properties-of-intl-numberformat-prototype-object","description":" >Tests that Intl.NumberFormat.prototype is not an object that has been\ninitialized as an Intl.NumberFormat.\n","author":" Roozbeh Pournader"},{"path":"./test262-main/test/intl402/NumberFormat/prototype/toStringTag/configurable.js","esid":" sec-intl.numberformat.prototype-@@tostringtag","description":" >Check that the initial value of the property is \"Intl.NumberFormat\" and that any changes\nmade by reconfiguring are reflected.\n"},{"path":"./test262-main/test/intl402/NumberFormat/prototype/toStringTag/prop-desc.js","esid":" sec-intl.numberformat.prototype-@@tostringtag","description":" >Tests that Intl.NumberFormat.prototype[@@toStringTag] has the required attributes.\n","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/NumberFormat/significant-digits-options-get-sequence.js","version":5,"esid":" 11.1.1_32","description":" >Tests that the options minimumSignificantDigits and\nmaximumSignificantDigits are read in the right sequence.\n","author":" Norbert Lindenberg"},{"path":"./test262-main/test/intl402/NumberFormat/style-unit.js","esid":" sec-setnumberformatunitoptions","description":" Checks handling of valid values for the numeric option to the RelativeTimeFormat constructor.","info":" |SetNumberFormatUnitOptions ( intlObj, options )\n\n3. Let style be ? GetOption(options, \"style\", \"string\", « \"decimal\", \"percent\", \"currency\", \"unit\" », \"decimal\").\n4. Set intlObj.[[Style]] to style.\n\n","features":["Intl.NumberFormat-unified"]},{"path":"./test262-main/test/intl402/NumberFormat/subclassing.js","version":5,"esid":" 11.1.2","description":" Tests that Intl.NumberFormat can be subclassed.","author":" Norbert Lindenberg","includes":["compareArray.js"]},{"path":"./test262-main/test/intl402/NumberFormat/supportedLocalesOf/basic.js","version":5,"esid":" 11.2.2_a","description":" >Tests that Intl.NumberFormat has a supportedLocalesOfproperty,\nand it works as planned.\n","author":" Roozbeh Pournader"},{"path":"./test262-main/test/intl402/NumberFormat/supportedLocalesOf/builtin.js","version":5,"esid":" 11.2.2_L15","description":" >Tests that Intl.NumberFormat.supportedLocalesOf meets the\nrequirements for built-in objects defined by the introduction of\nchapter 17 of the ECMAScript Language Specification.\n","author":" Norbert Lindenberg","includes":["isConstructor.js"],"features":["Reflect.construct"]},{"path":"./test262-main/test/intl402/NumberFormat/supportedLocalesOf/length.js","esid":" sec-intl.numberformat.supportedlocalesof","description":" >Intl.NumberFormat.supportedLocalesOf.length is 1.\n","info":" |Intl.NumberFormat.supportedLocalesOf ( locales [ , options ] )\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery built-in function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description. Optional parameters\n(which are indicated with brackets: [ ]) or rest parameters (which\nare shown using the form «...name») are not included in the default\nargument count.\nUnless otherwise specified, the length property of a built-in function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n\n","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/NumberFormat/supportedLocalesOf/name.js","esid":" sec-Intl.NumberFormat.supportedLocalesOf","description":" >Intl.NumberFormat.supportedLocalesOf.name is \"supportedLocalesOf\".\n","info":" |11.3.2 Intl.NumberFormat.supportedLocalesOf (locales [ , options ])\n\n17 ECMAScript Standard Built-in Objects:\nEvery built-in Function object, including constructors, that is not\nidentified as an anonymous function has a name property whose value\nis a String.\n\nUnless otherwise specified, the name property of a built-in Function\nobject, if it exists, has the attributes { [[Writable]]: false,\n[[Enumerable]]: false, [[Configurable]]: true }.\n","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/NumberFormat/supportedLocalesOf/prop-desc.js","esid":" sec-intl.numberformat.supportedlocalesof","description":" >\"supportedLocalesOf\" property of Intl.NumberFormat.\n","info":" |Intl.NumberFormat.supportedLocalesOf ( locales [ , options ] )\n\n7 Requirements for Standard Built-in ECMAScript Objects\n\nUnless specified otherwise in this document, the objects, functions, and constructors\ndescribed in this standard are subject to the generic requirements and restrictions\nspecified for standard built-in ECMAScript objects in the ECMAScript 2018 Language\nSpecification, 9th edition, clause 17, or successor.\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the\nattributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true }\nunless otherwise specified.\n\n","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/NumberFormat/supportedLocalesOf/taint-Object-prototype.js","version":5,"esid":" 11.2.2_b","description":" >Tests that Intl.NumberFormat.supportedLocalesOfdoesn't access\narguments that it's not given.\n","author":" Norbert Lindenberg","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/NumberFormat/taint-Object-prototype.js","version":5,"esid":" 11.1.1_6","description":" >Tests that the behavior of a Record is not affected by\nadversarialchanges to Object.prototype.\n","author":" Norbert Lindenberg","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/NumberFormat/test-option-currency.js","version":5,"esid":" 11.1.1_17","description":" Tests that the option currency is processed correctly.","author":" Norbert Lindenberg"},{"path":"./test262-main/test/intl402/NumberFormat/test-option-currencyDisplay.js","version":5,"esid":" 11.1.1_21","description":" Tests that the option currencyDisplay is processed correctly.","author":" Norbert Lindenberg","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/NumberFormat/test-option-localeMatcher.js","version":5,"esid":" 11.1.1_7","description":" Tests that the option localeMatcher is processed correctly.","author":" Norbert Lindenberg","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/NumberFormat/test-option-style.js","version":5,"esid":" 11.1.1_15","description":" Tests that the option style is processed correctly.","author":" Norbert Lindenberg","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/NumberFormat/test-option-useGrouping.js","version":5,"esid":" 11.1.1_34","description":" Tests that the option useGrouping is processed correctly.","author":" Norbert Lindenberg","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/NumberFormat/this-value-ignored.js","esid":" sec-intl-numberformat-constructor","description":" >Tests that the this-value is ignored in NumberFormat, if the this-value\nisn't a NumberFormat instance.\n","author":" Norbert Lindenberg","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/NumberFormat/throws-for-currency-style-without-currency-option.js","version":5,"esid":" 11.1.1_19","description":" >Tests that the currency style can not be used without a specified\ncurrency.\n","author":" Norbert Lindenberg"},{"path":"./test262-main/test/intl402/PluralRules/builtin.js","esid":" sec-Intl.PluralRules","description":" >Tests that Intl.PluralRules meets the requirements for\nbuilt-in objects defined by the introduction of chapter 17 of the\nECMAScript Language Specification.\n","author":" Zibi Braniecki"},{"path":"./test262-main/test/intl402/PluralRules/can-be-subclassed.js","esid":" sec-intl-pluralrules-constructor","description":" Tests that Intl.PluralRules can be subclassed.","author":" Zibi Braniecki","includes":["compareArray.js"]},{"path":"./test262-main/test/intl402/PluralRules/constructor-options-throwing-getters.js","esid":" sec-initializepluralrules","description":" Checks the propagation of exceptions from the options for the NumberFormat constructor."},{"path":"./test262-main/test/intl402/PluralRules/default-options-object-prototype.js","esid":" sec-initializepluralrules","description":" >Monkey-patching Object.prototype does not change the default\noptions for PluralRules as a null prototype is used.\n","info":" |InitializePluralRules ( collator, locales, options )\n\n1. If _options_ is *undefined*, then\n1. Let _options_ be ObjectCreate(*null*).\n"},{"path":"./test262-main/test/intl402/PluralRules/internals.js","esid":" sec-intl-pluralrules-constructor","description":" >Tests that objects constructed by Intl.PluralRules have the specified\ninternal properties.\n","author":" Zibi Braniecki"},{"path":"./test262-main/test/intl402/PluralRules/length.js","esid":" sec-Intl.PluralRules","description":" Intl.PluralRules.length.","author":" Zibi Braniecki","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/PluralRules/name.js","esid":" sec-Intl.PluralRules","description":" Intl.PluralRules.name is \"PluralRules\"","author":" Zibi Braniecki","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/PluralRules/prop-desc.js","esid":" sec-Intl.PluralRules","description":" >\"PluralRules\" property of Intl.\n","info":" |Intl.PluralRules (...)\n\n7 Requirements for Standard Built-in ECMAScript Objects\n\nUnless specified otherwise in this document, the objects, functions, and constructors\ndescribed in this standard are subject to the generic requirements and restrictions\nspecified for standard built-in ECMAScript objects in the ECMAScript 2018 Language\nSpecification, 9th edition, clause 17, or successor.\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the\nattributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true }\nunless otherwise specified.\n\n","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/PluralRules/proto-from-ctor-realm.js","esid":" sec-intl.pluralrules","description":" Default [[Prototype]] value derived from realm of the NewTarget.","info":" |Intl.PluralRules ( [ locales [ , options ] ] )\n\n1. If NewTarget is undefined, throw a TypeError exception.\n2. Let pluralRules be ? OrdinaryCreateFromConstructor(newTarget, \"%PluralRulesPrototype%\", « ... »).\n3. Return ? InitializePluralRules(pluralRules, locales, options).\n\nOrdinaryCreateFromConstructor ( constructor, intrinsicDefaultProto [ , internalSlotsList ] )\n\n...\n2. Let proto be ? GetPrototypeFromConstructor(constructor, intrinsicDefaultProto).\n3. Return ObjectCreate(proto, internalSlotsList).\n\nGetPrototypeFromConstructor ( constructor, intrinsicDefaultProto )\n\n...\n3. Let proto be ? Get(constructor, 'prototype').\n4. If Type(proto) is not Object, then\na. Let realm be ? GetFunctionRealm(constructor).\nb. Set proto to realm's intrinsic object named intrinsicDefaultProto.\n5. Return proto.\n","features":["cross-realm","Reflect","Symbol"]},{"path":"./test262-main/test/intl402/PluralRules/prototype/bind.js","esid":" sec-properties-of-intl-pluralrules-prototype-object","description":" >Tests that Intl.PluralRules.prototype functions throw a TypeError if\ncalled on a non-object value or an object that hasn't been\ninitialized as a PluralRules.\n","author":" Zibi Braniecki"},{"path":"./test262-main/test/intl402/PluralRules/prototype/builtins.js","esid":" sec-properties-of-intl-pluralrules-prototype-object","description":" >Tests that Intl.PluralRules.prototype meets the requirements for\nbuilt-in objects defined by the introduction of chapter 17 of the\nECMAScript Language Specification.\n","author":" Zibi Braniecki"},{"path":"./test262-main/test/intl402/PluralRules/prototype/constructor/main.js","esid":" sec-Intl.PluralRules.prototype.constructor","description":" >Tests that Intl.PluralRules.prototype is an object that has been\ninitialized as an Intl.PluralRules.\n","author":" Zibi Braniecki"},{"path":"./test262-main/test/intl402/PluralRules/prototype/constructor/prop-desc.js","esid":" sec-intl.pluralrules.prototype.constructor","description":" >\"constructor\" property of Intl.PluralRules.prototype.\n","info":" |Intl.PluralRules.prototype.constructor\n\n7 Requirements for Standard Built-in ECMAScript Objects\n\nUnless specified otherwise in this document, the objects, functions, and constructors\ndescribed in this standard are subject to the generic requirements and restrictions\nspecified for standard built-in ECMAScript objects in the ECMAScript 2018 Language\nSpecification, 9th edition, clause 17, or successor.\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the\nattributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true }\nunless otherwise specified.\n\n","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/PluralRules/prototype/properties.js","esid":" sec-properties-of-intl-pluralrules-prototype-object","description":" Tests that Intl.PluralRules.prototype has the required attributes.","author":" Zibi Braniecki","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/PluralRules/prototype/prototype.js","esid":" sec-properties-of-intl-pluralrules-prototype-object","description":" >Tests that Intl.PluralRules.prototype is not an object that has been\ninitialized as an Intl.PluralRules.\n","author":" Zibi Braniecki"},{"path":"./test262-main/test/intl402/PluralRules/prototype/resolvedOptions/builtins.js","esid":" sec-Intl.PluralRules.prototype.resolvedOptions","description":" >Tests that Intl.PluralRules.prototype.resolvedOptions meets the requirements for\nbuilt-in objects defined by the introduction of chapter 17 of the\nECMAScript Language Specification.\n","author":" Zibi Braniecki","includes":["isConstructor.js"],"features":["Reflect.construct"]},{"path":"./test262-main/test/intl402/PluralRules/prototype/resolvedOptions/length.js","esid":" sec-intl.pluralrules.prototype.resolvedoptions","description":" >Intl.PluralRules.prototype.resolvedOptions.length is 0.\n","info":" |Intl.PluralRules.prototype.resolvedOptions ()\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery built-in function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description. Optional parameters\n(which are indicated with brackets: [ ]) or rest parameters (which\nare shown using the form «...name») are not included in the default\nargument count.\nUnless otherwise specified, the length property of a built-in function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n\n","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/PluralRules/prototype/resolvedOptions/name.js","esid":" sec-Intl.PluralRules.resolvedOptions.name","description":" Intl.PluralRules.resolvedOptions.name is \"resolvedOptions\"","author":" Zibi Braniecki","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/PluralRules/prototype/resolvedOptions/order.js","esid":" sec-intl.numberformat.prototype.resolvedoptions","description":" Verifies the property order for the object returned by resolvedOptions().","includes":["compareArray.js"],"features":["Intl.NumberFormat-unified"]},{"path":"./test262-main/test/intl402/PluralRules/prototype/resolvedOptions/pluralCategories.js","esid":" sec-Intl.PluralRules.prototype.resolvedOptions","description":" >Tests that Intl.PluralRules.prototype.resolvedOptions creates a new array\nfor the pluralCategories property on every call.\n","includes":["propertyHelper.js","compareArray.js"]},{"path":"./test262-main/test/intl402/PluralRules/prototype/resolvedOptions/prop-desc.js","esid":" sec-intl.pluralrules.prototype.resolvedoptions","description":" >\"resolvedOptions\" property of Intl.PluralRules.prototype.\n","info":" |Intl.PluralRules.prototype.resolvedOptions ()\n\n7 Requirements for Standard Built-in ECMAScript Objects\n\nUnless specified otherwise in this document, the objects, functions, and constructors\ndescribed in this standard are subject to the generic requirements and restrictions\nspecified for standard built-in ECMAScript objects in the ECMAScript 2018 Language\nSpecification, 9th edition, clause 17, or successor.\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the\nattributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true }\nunless otherwise specified.\n\n","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/PluralRules/prototype/resolvedOptions/properties.js","esid":" sec-Intl.PluralRules.prototype.resolvedOptions","description":" >Tests that the object returned by\nIntl.PluralRules.prototype.resolvedOptionshas the right\nproperties.\n","author":" Zibi Braniecki","includes":["testIntl.js","propertyHelper.js"]},{"path":"./test262-main/test/intl402/PluralRules/prototype/select/length.js","esid":" sec-intl.pluralrules.prototype.select","description":" >Intl.PluralRules.prototype.select is 1.\n","info":" |Intl.PluralRules.prototype.select( value )\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery built-in function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description. Optional parameters\n(which are indicated with brackets: [ ]) or rest parameters (which\nare shown using the form «...name») are not included in the default\nargument count.\nUnless otherwise specified, the length property of a built-in function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n\n","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/PluralRules/prototype/select/name.js","esid":" sec-Intl.PluralRules.prototype.select","description":" Intl.PluralRules.prototype.select.name is \"select\"","author":" Zibi Braniecki","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/PluralRules/prototype/select/non-finite.js","esid":" sec-Intl.PluralRules.prototype.select","description":" Tests that select function returns \"other\" for non finite values.","info":" |1.1.4. ResolvePlural (pluralRules, n)\n(...)\n1.1.4_3. If isFinite(n) is false, then\n1.1.4_3.a. Return \"other\".\n","author":" Zibi Braniecki"},{"path":"./test262-main/test/intl402/PluralRules/prototype/select/prop-desc.js","esid":" sec-intl.pluralrules.prototype.select","description":" >\"select\" property of Intl.PluralRules.prototype.\n","info":" |Intl.PluralRules.prototype.select( value )\n\n7 Requirements for Standard Built-in ECMAScript Objects\n\nUnless specified otherwise in this document, the objects, functions, and constructors\ndescribed in this standard are subject to the generic requirements and restrictions\nspecified for standard built-in ECMAScript objects in the ECMAScript 2018 Language\nSpecification, 9th edition, clause 17, or successor.\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the\nattributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true }\nunless otherwise specified.\n\n","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/PluralRules/prototype/select/tainting.js","esid":" sec-intl-pluralrules-abstracts","description":" >Tests that the behavior of a Record is not affected by\nadversarialchanges to Object.prototype.\n","info":" |1.1.1. InitializePluralRules (pluralRules, locales, options)\n(...)\n1.1.1_6. Let t be ? GetOption(options, \"type\", \"string\", « \"cardinal\", \"ordinal\" », \"cardinal\").\n","author":" Zibi Braniecki","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/PluralRules/prototype/toStringTag/toString-changed-tag.js","esid":" sec-intl.pluralrules.prototype-tostringtag","description":" >Object.prototype.toString utilizes Intl.PluralRules.prototype[@@toStringTag].\n","info":" |Object.prototype.toString ( )\n\n[...]\n14. Else, let builtinTag be \"Object\".\n15. Let tag be ? Get(O, @@toStringTag).\n16. If Type(tag) is not String, set tag to builtinTag.\n17. Return the string-concatenation of \"[object \", tag, and \"]\".\n\nIntl.PluralRules.prototype [ @@toStringTag ]\n\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n","features":["Symbol.toStringTag"]},{"path":"./test262-main/test/intl402/PluralRules/prototype/toStringTag/toString-removed-tag.js","esid":" sec-intl.pluralrules.prototype-tostringtag","description":" >Object.prototype.toString doesn't special-case neither Intl.PluralRules instances nor its prototype.\n","info":" |Object.prototype.toString ( )\n\n[...]\n14. Else, let builtinTag be \"Object\".\n15. Let tag be ? Get(O, @@toStringTag).\n16. If Type(tag) is not String, set tag to builtinTag.\n17. Return the string-concatenation of \"[object \", tag, and \"]\".\n","features":["Symbol.toStringTag"]},{"path":"./test262-main/test/intl402/PluralRules/prototype/toStringTag/toString.js","esid":" sec-intl.pluralrules.prototype-tostringtag","description":" >Object.prototype.toString utilizes Intl.PluralRules.prototype[@@toStringTag].\n","info":" |Object.prototype.toString ( )\n\n[...]\n14. Else, let builtinTag be \"Object\".\n15. Let tag be ? Get(O, @@toStringTag).\n16. If Type(tag) is not String, set tag to builtinTag.\n17. Return the string-concatenation of \"[object \", tag, and \"]\".\n\nIntl.PluralRules.prototype [ @@toStringTag ]\n\nThe initial value of the @@toStringTag property is the String value \"Intl.PluralRules\".\n","features":["Symbol.toStringTag"]},{"path":"./test262-main/test/intl402/PluralRules/prototype/toStringTag/toStringTag.js","esid":" sec-intl.pluralrules.prototype-tostringtag","description":" >Property descriptor of Intl.PluralRules.prototype[@@toStringTag].\n","info":" |Intl.PluralRules.prototype [ @@toStringTag ]\n\nThe initial value of the @@toStringTag property is the String value \"Intl.PluralRules\".\n\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n","features":["Symbol.toStringTag"],"includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/PluralRules/supportedLocalesOf/arguments.js","esid":" sec-Intl.PluralRules.supportedLocalesOf","description":" >Tests that Intl.PluralRules.supportedLocalesOf doesn't access\narguments that it's not given.\n","author":" Zibi Braniecki","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/PluralRules/supportedLocalesOf/length.js","esid":" sec-intl.pluralrules.supportedlocalesof","description":" >Intl.PluralRules.supportedLocalesOf.length is 1.\n","info":" |Intl.PluralRules.supportedLocalesOf ( locales [ , options ] )\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery built-in function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description. Optional parameters\n(which are indicated with brackets: [ ]) or rest parameters (which\nare shown using the form «...name») are not included in the default\nargument count.\nUnless otherwise specified, the length property of a built-in function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n\n","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/PluralRules/supportedLocalesOf/main.js","esid":" sec-Intl.PluralRules.supportedLocalesOf","description":" >Tests that Intl.PluralRules has a supportedLocalesOf property, and\nit works as planned.\n","author":" Zibi Braniecki"},{"path":"./test262-main/test/intl402/PluralRules/supportedLocalesOf/name.js","esid":" sec-Intl.PluralRules.supportedLocalesOf","description":" Tests that Intl.PluralRules.supportedLocalesOf.name is \"supportedLocalesOf\"","author":" Zibi Braniecki","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/PluralRules/supportedLocalesOf/prop-desc.js","esid":" sec-intl.pluralrules.supportedlocalesof","description":" >\"supportedLocalesOf\" property of Intl.PluralRules.\n","info":" |Intl.PluralRules.supportedLocalesOf ( locales [ , options ] )\n\n7 Requirements for Standard Built-in ECMAScript Objects\n\nUnless specified otherwise in this document, the objects, functions, and constructors\ndescribed in this standard are subject to the generic requirements and restrictions\nspecified for standard built-in ECMAScript objects in the ECMAScript 2018 Language\nSpecification, 9th edition, clause 17, or successor.\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the\nattributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true }\nunless otherwise specified.\n\n","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/PluralRules/supportedLocalesOf/supportedLocalesOf.js","esid":" sec-Intl.PluralRules.supportedLocalesOf","description":" >Tests that Intl.PluralRules.supportedLocalesOf meets the requirements for\nbuilt-in objects defined by the introduction of chapter 17 of the\nECMAScript Language Specification.\n","author":" Zibi Braniecki","includes":["isConstructor.js"],"features":["Reflect.construct"]},{"path":"./test262-main/test/intl402/PluralRules/undefined-newtarget-throws.js","esid":" sec-Intl.PluralRules","description":" Tests that PluralRules throws when called as a function","author":" Zibi Braniecki","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/constructor/constructor/locales-invalid.js","esid":" sec-Intl.RelativeTimeFormat","description":" Checks error cases for the locales argument to the RelativeTimeFormat constructor.","info":" |InitializeRelativeTimeFormat (relativeTimeFormat, locales, options)\n3. Let _requestedLocales_ be ? CanonicalizeLocaleList(_locales_).\n","includes":["testIntl.js"],"features":["Intl.RelativeTimeFormat"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/constructor/constructor/locales-valid.js","esid":" sec-Intl.RelativeTimeFormat","description":" Checks various cases for the locales argument to the RelativeTimeFormat constructor.","info":" |InitializeRelativeTimeFormat (relativeTimeFormat, locales, options)\n3. Let _requestedLocales_ be ? CanonicalizeLocaleList(_locales_).\n","features":["Intl.RelativeTimeFormat"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/constructor/constructor/newtarget-undefined.js","esid":" sec-intl.RelativeTimeFormat","description":" >Verifies the NewTarget check for Intl.RelativeTimeFormat.\n","info":" |Intl.RelativeTimeFormat ([ locales [ , options ]])\n\n1. If NewTarget is undefined, throw a TypeError exception.\n","features":["Intl.RelativeTimeFormat"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/constructor/constructor/options-invalid.js","esid":" sec-Intl.RelativeTimeFormat","description":" Checks handling of a null options argument to the RelativeTimeFormat constructor.","info":" |InitializeRelativeTimeFormat (relativeTimeFormat, locales, options)\n5. Else\na. Let options be ? ToObject(options).\n","features":["Intl.RelativeTimeFormat"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/constructor/constructor/options-localeMatcher-invalid.js","esid":" sec-Intl.RelativeTimeFormat","description":" Checks handling of invalid value for the localeMatcher option to the RelativeTimeFormat constructor.","info":" |InitializeRelativeTimeFormat (relativeTimeFormat, locales, options)\n7. Let matcher be ? GetOption(options, \"localeMatcher\", \"string\", «\"lookup\", \"best fit\"», \"best fit\").\n","features":["Intl.RelativeTimeFormat"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/constructor/constructor/options-numberingSystem-invalid.js","esid":" sec-Intl.RelativeTimeFormat","description":" >Checks error cases for the options argument to the RelativeTimeFormat constructor.\n","info":" |InitializeRelativeTimeFormat (relativeTimeFormat, locales, options)\n\n...\n8. If numberingSystem is not undefined, then\na. If numberingSystem does not match the type sequence (from UTS 35 Unicode Locale Identifier, section 3.2), throw a RangeError exception.\n\n","features":["Intl.RelativeTimeFormat"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/constructor/constructor/options-numberingSystem-valid.js","esid":" sec-Intl.RelativeTimeFormat","description":" Checks valid cases for the options argument to the RelativeTimeFormat constructor.","features":["Intl.RelativeTimeFormat"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/constructor/constructor/options-numeric-invalid.js","esid":" sec-Intl.RelativeTimeFormat","description":" Checks handling of invalid value for the numeric option to the RelativeTimeFormat constructor.","info":" |InitializeRelativeTimeFormat (relativeTimeFormat, locales, options)\n16. Let numeric be ? GetOption(options, \"numeric\", \"string\", «\"always\", \"auto\"», \"always\").\n","features":["Intl.RelativeTimeFormat"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/constructor/constructor/options-numeric-valid.js","esid":" sec-Intl.RelativeTimeFormat","description":" Checks handling of valid values for the numeric option to the RelativeTimeFormat constructor.","info":" |InitializeRelativeTimeFormat (relativeTimeFormat, locales, options)\n16. Let numeric be ? GetOption(options, \"numeric\", \"string\", «\"always\", \"auto\"», \"always\").\n17. Set relativeTimeFormat.[[Numeric]] to numeric.\n","features":["Intl.RelativeTimeFormat"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/constructor/constructor/options-order.js","esid":" sec-Intl.RelativeTimeFormat","description":" Checks the order of operations on the options argument to the RelativeTimeFormat constructor.","info":" |InitializeRelativeTimeFormat (relativeTimeFormat, locales, options)\n7. Let matcher be ? GetOption(options, \"localeMatcher\", \"string\", «\"lookup\", \"best fit\"», \"best fit\").\n14. Let s be ? GetOption(options, \"style\", \"string\", «\"long\", \"short\", \"narrow\"», \"long\").\n16. Let numeric be ? GetOption(options, \"numeric\", \"string\", «\"always\", \"auto\"», \"always\").\n","includes":["compareArray.js"],"features":["Intl.RelativeTimeFormat"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/constructor/constructor/options-proto.js","esid":" sec-Intl.RelativeTimeFormat","description":" |Checks that the RelativeTimeFormat constructor does not cause the\nNumberFormat and PluralRules constructors to get properties off\nObject.prototype through the options objects it creates.\n","info":" |InitializeRelativeTimeFormat (relativeTimeFormat, locales, options)\n20. Let nfOptions be ObjectCreate(null).\n25. Let prOptions be ObjectCreate(null).\n","features":["Intl.RelativeTimeFormat"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/constructor/constructor/options-style-invalid.js","esid":" sec-Intl.RelativeTimeFormat","description":" Checks handling of invalid value for the style option to the RelativeTimeFormat constructor.","info":" |InitializeRelativeTimeFormat (relativeTimeFormat, locales, options)\n14. Let s be ? GetOption(options, \"style\", \"string\", «\"long\", \"short\", \"narrow\"», \"long\").\n","features":["Intl.RelativeTimeFormat"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/constructor/constructor/options-style-valid.js","esid":" sec-Intl.RelativeTimeFormat","description":" Checks handling of valid values for the style option to the RelativeTimeFormat constructor.","info":" |InitializeRelativeTimeFormat (relativeTimeFormat, locales, options)\n14. Let s be ? GetOption(options, \"style\", \"string\", «\"long\", \"short\", \"narrow\"», \"long\").\n15. Set relativeTimeFormat.[[Style]] to s.\n","features":["Intl.RelativeTimeFormat"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/constructor/constructor/options-throwing-getters.js","esid":" sec-InitializeRelativeTimeFormat","description":" Checks the propagation of exceptions from the options for the RelativeTimeFormat constructor.","info":" |InitializeRelativeTimeFormat\n\n5. Let matcher be ? GetOption(options, \"localeMatcher\", \"string\", «\"lookup\", \"best fit\"», \"best fit\").\n...\n7. Let numberingSystem be ? GetOption(options, \"numberingSystem\", \"string\", undefined, undefined).\n...\n16. Let s be ? GetOption(options, \"style\", \"string\", «\"long\", \"short\", \"narrow\"», \"long\").\n...\n18. Let numeric be ? GetOption(options, \"numeric\", \"string\", «\"always\", \"auto\"», \"always\").\n\nGetOption ( options, property, type, values, fallback )\n\n1. Let value be ? Get(options, property).\n2. If value is not undefined, then\na. Assert: type is \"boolean\" or \"string\".\nb. If type is \"boolean\", then\ni. Let value be ToBoolean(value).\nc. If type is \"string\", then\ni. Let value be ? ToString(value).\nd. If values is not undefined, then\ni. If values does not contain an element equal to value, throw a RangeError exception.\ne. Return value.\n3. Else, return fallback.\n","features":["Intl.RelativeTimeFormat"],"includes":["compareArray.js"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/constructor/constructor/options-toobject-prototype.js","esid":" sec-Intl.RelativeTimeFormat","description":" Checks handling of non-object option arguments to the RelativeTimeFormat constructor.","info":" |InitializeRelativeTimeFormat (relativeTimeFormat, locales, options)\n","features":["Intl.RelativeTimeFormat"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/constructor/constructor/options-toobject.js","esid":" sec-Intl.RelativeTimeFormat","description":" Checks handling of non-object option arguments to the RelativeTimeFormat constructor.","info":" |InitializeRelativeTimeFormat (relativeTimeFormat, locales, options)\n","features":["Intl.RelativeTimeFormat"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/constructor/constructor/options-undefined.js","esid":" sec-Intl.RelativeTimeFormat","description":" Checks handling of non-object option arguments to the RelativeTimeFormat constructor.","info":" |InitializeRelativeTimeFormat (relativeTimeFormat, locales, options)\n","features":["Intl.RelativeTimeFormat"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/constructor/constructor/proto-from-ctor-realm.js","esid":" sec-Intl.RelativeTimeFormat","description":" Default [[Prototype]] value derived from realm of the NewTarget.","info":" |Intl.RelativeTimeFormat ([ locales [ , options ]])\n\n1. If NewTarget is undefined, throw a TypeError exception.\n2. Let relativeTimeFormat be ? OrdinaryCreateFromConstructor(NewTarget, \"%RelativeTimeFormatPrototype%\", « ... »).\n3. Return ? InitializeRelativeTimeFormat(relativeTimeFormat, locales, options).\n\nOrdinaryCreateFromConstructor ( constructor, intrinsicDefaultProto [ , internalSlotsList ] )\n\n...\n2. Let proto be ? GetPrototypeFromConstructor(constructor, intrinsicDefaultProto).\n3. Return ObjectCreate(proto, internalSlotsList).\n\nGetPrototypeFromConstructor ( constructor, intrinsicDefaultProto )\n\n...\n3. Let proto be ? Get(constructor, 'prototype').\n4. If Type(proto) is not Object, then\na. Let realm be ? GetFunctionRealm(constructor).\nb. Set proto to realm's intrinsic object named intrinsicDefaultProto.\n5. Return proto.\n","features":["Intl.RelativeTimeFormat","cross-realm","Reflect","Symbol"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/constructor/constructor/subclassing.js","esid":" sec-Intl.RelativeTimeFormat","description":" Checks that RelativeTimeFormat can be subclassed.","info":" |Intl.RelativeTimeFormat ( [ locales [ , options ] ] )\n\n2. Let relativeTimeFormat be ! OrdinaryCreateFromConstructor(NewTarget, \"%RelativeTimeFormatPrototype%\", « [[InitializedRelativeTimeFormat]] »).\n\n","features":["Intl.RelativeTimeFormat"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/constructor/length.js","esid":" sec-Intl.RelativeTimeFormat","description":" >Checks the \"length\" property of the RelativeTimeFormat constructor.\n","info":" |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nThe RelativeTimeFormat constructor is a standard built-in property of the Intl object.\nEvery built-in function object, including constructors, has a length property whose value is an integer. Unless otherwise specified, this value is equal to the largest number of named arguments shown in the subclause headings for the function description. Optional parameters (which are indicated with brackets: [ ]) or rest parameters (which are shown using the form «...name») are not included in the default argument count.\nUnless otherwise specified, the length property of a built-in function object has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["Intl.RelativeTimeFormat"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/constructor/name.js","esid":" sec-Intl.RelativeTimeFormat","description":" >Checks the \"name\" property of the RelativeTimeFormat constructor.\n","info":" |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, that is not identified as an anonymous function has a name property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification.\nUnless otherwise specified, the name property of a built-in function object, if it exists, has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["Intl.RelativeTimeFormat"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/constructor/prop-desc.js","esid":" sec-Intl.RelativeTimeFormat","description":" >\"RelativeTimeFormat\" property of Intl.\n","info":" |Intl.RelativeTimeFormat (...)\n\n7 Requirements for Standard Built-in ECMAScript Objects\n\nUnless specified otherwise in this document, the objects, functions, and constructors\ndescribed in this standard are subject to the generic requirements and restrictions\nspecified for standard built-in ECMAScript objects in the ECMAScript 2018 Language\nSpecification, 9th edition, clause 17, or successor.\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the\nattributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true }\nunless otherwise specified.\n\n","includes":["propertyHelper.js"],"features":["Intl.RelativeTimeFormat"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/constructor/prototype.js","esid":" sec-Intl.RelativeTimeFormat","description":" The prototype of the Intl.RelativeTimeFormat constructor is %FunctionPrototype%.","info":" |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nUnless otherwise specified every built-in function object has the %FunctionPrototype% object as the initial value of its [[Prototype]] internal slot.\n","features":["Intl.RelativeTimeFormat"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/constructor/supportedLocalesOf/basic.js","esid":" sec-Intl.RelativeTimeFormat.supportedLocalesOf","description":" >Tests that Intl.RelativeTimeFormat has a supportedLocalesOf property,\nand it works as planned.\n","features":["Intl.RelativeTimeFormat"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/constructor/supportedLocalesOf/branding.js","esid":" sec-Intl.RelativeTimeFormat.supportedLocalesOf","description":" >Verifies there's no branding check for Intl.RelativeTimeFormat.supportedLocalesOf().\n","info":" |Intl.RelativeTimeFormat.supportedLocalesOf ( locales [, options ])\n","features":["Intl.RelativeTimeFormat"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/constructor/supportedLocalesOf/length.js","esid":" sec-Intl.RelativeTimeFormat.supportedLocalesOf","description":" >Checks the \"length\" property of Intl.RelativeTimeFormat.supportedLocalesOf().\n","info":" |The value of the length property of the supportedLocalesOf method is 1.\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, has a length property whose value is an integer.\nUnless otherwise specified, the length property of a built-in function object has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["Intl.RelativeTimeFormat"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/constructor/supportedLocalesOf/locales-invalid.js","esid":" sec-Intl.RelativeTimeFormat.supportedLocalesOf","description":" Checks error cases for the locales argument to the supportedLocalesOf function.","info":" |Intl.RelativeTimeFormat.supportedLocalesOf ( locales [, options ])\n\n2. Let requestedLocales be CanonicalizeLocaleList(locales).\n","includes":["testIntl.js"],"features":["Intl.RelativeTimeFormat"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/constructor/supportedLocalesOf/name.js","esid":" sec-Intl.RelativeTimeFormat.supportedLocalesOf","description":" >Checks the \"name\" property of Intl.RelativeTimeFormat.supportedLocalesOf().\n","info":" |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, that is not identified as an anonymous function has a name property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification.\nUnless otherwise specified, the name property of a built-in function object, if it exists, has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["Intl.RelativeTimeFormat"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/constructor/supportedLocalesOf/options-localeMatcher-invalid.js","esid":" sec-Intl.RelativeTimeFormat.supportedLocalesOf","description":" Checks handling of invalid values for the localeMatcher option to the supportedLocalesOf function.","info":" |SupportedLocales ( availableLocales, requestedLocales, options )\n\n1. If options is not undefined, then\nb. Let matcher be ? GetOption(options, \"localeMatcher\", \"string\", «\"lookup\", \"best fit\"», \"best fit\").\n","features":["Intl.RelativeTimeFormat"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/constructor/supportedLocalesOf/options-null.js","esid":" sec-Intl.RelativeTimeFormat.supportedLocalesOf","description":" Checks handling of a null options argument to the supportedLocalesOf function.","info":" |SupportedLocales ( availableLocales, requestedLocales, options )\n\n1. If options is not undefined, then\na. Let options be ? ToObject(options).\n","features":["Intl.RelativeTimeFormat"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/constructor/supportedLocalesOf/options-toobject.js","esid":" sec-Intl.RelativeTimeFormat.supportedLocalesOf","description":" Checks handling of non-object options arguments to the supportedLocalesOf function.","info":" |SupportedLocales ( availableLocales, requestedLocales, options )\n\n1. If options is not undefined, then\na. Let options be ? ToObject(options).\n","features":["Intl.RelativeTimeFormat"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/constructor/supportedLocalesOf/options-undefined.js","esid":" sec-Intl.RelativeTimeFormat.supportedLocalesOf","description":" Checks handling of an undefined options argument to the supportedLocalesOf function.","info":" |SupportedLocales ( availableLocales, requestedLocales, options )\n\n1. If options is not undefined, then\nb. Let matcher be ? GetOption(options, \"localeMatcher\", \"string\", «\"lookup\", \"best fit\"», \"best fit\").\n","features":["Intl.RelativeTimeFormat"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/constructor/supportedLocalesOf/prop-desc.js","esid":" sec-Intl.RelativeTimeFormat.supportedLocalesOf","description":" >Checks the \"supportedLocalesOf\" property of the RelativeTimeFormat prototype object.\n","info":" |Intl.RelativeTimeFormat.supportedLocalesOf ( locales [, options ])\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\n","includes":["propertyHelper.js"],"features":["Intl.RelativeTimeFormat"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/constructor/supportedLocalesOf/result-type.js","esid":" sec-Intl.RelativeTimeFormat.supportedLocalesOf","description":" Verifies the type of the return value of Intl.RelativeTimeFormat.supportedLocalesOf().","info":" |Intl.RelativeTimeFormat.supportedLocalesOf ( locales [, options ])\n","includes":["propertyHelper.js"],"features":["Intl.RelativeTimeFormat"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/instance/extensibility.js","esid":" sec-Intl.RelativeTimeFormat","description":" >Intl.RelativeTimeFormat instance object extensibility\n","info":" |17 ECMAScript Standard Built-in Objects:\n\nUnless specified otherwise, the [[Extensible]] internal slot\nof a built-in object initially has the value true.\n","features":["Intl.RelativeTimeFormat"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/instance/prototype.js","esid":" sec-Intl.RelativeTimeFormat","description":" >Intl.RelativeTimeFormat instance object is created from %RelativeTimeFormatPrototype%.\n","info":" |Intl.RelativeTimeFormat ([ locales [ , options ]])\n\n2. Let relativeTimeFormat be ! OrdinaryCreateFromConstructor(NewTarget, \"%RelativeTimeFormatPrototype%\").\n","features":["Intl.RelativeTimeFormat"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/prototype/constructor/prop-desc.js","esid":" sec-Intl.RelativeTimeFormat.prototype.constructor","description":" Checks the \"constructor\" property of the RelativeTimeFormat prototype object.","info":" |Intl.RelativeTimeFormat.prototype.constructor\n\nThe initial value of Intl.RelativeTimeFormat.prototype.constructor is %RelativeTimeFormat%.\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\n","includes":["propertyHelper.js"],"features":["Intl.RelativeTimeFormat"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/prototype/format/branding.js","esid":" sec-Intl.RelativeTimeFormat.prototype.format","description":" Verifies the branding check for the \"format\" function of the RelativeTimeFormat prototype object.","info":" |Intl.RelativeTimeFormat.prototype.format( value, unit )\n\n2. If Type(relativeTimeFormat) is not Object or relativeTimeFormat does not have an [[InitializedRelativeTimeFormat]] internal slot whose value is true, throw a TypeError exception.\n","features":["Intl.RelativeTimeFormat"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/prototype/format/en-us-numeric-always.js","esid":" sec-Intl.RelativeTimeFormat.prototype.format","description":" Checks the behavior of Intl.RelativeTimeFormat.prototype.format() in English.","features":["Intl.RelativeTimeFormat"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/prototype/format/en-us-numeric-auto.js","esid":" sec-Intl.RelativeTimeFormat.prototype.format","description":" Checks the behavior of Intl.RelativeTimeFormat.prototype.format() in English.","features":["Intl.RelativeTimeFormat"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/prototype/format/en-us-style-short.js","esid":" sec-Intl.RelativeTimeFormat.prototype.format","description":" Checks the behavior of Intl.RelativeTimeFormat.prototype.format() in English.","features":["Intl.RelativeTimeFormat"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/prototype/format/length.js","esid":" sec-Intl.RelativeTimeFormat.prototype.format","description":" Checks the \"length\" property of Intl.RelativeTimeFormat.prototype.format().","info":" |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nThe RelativeTimeFormat constructor is a standard built-in property of the Intl object.\nEvery built-in function object, including constructors, has a length property whose value is an integer. Unless otherwise specified, this value is equal to the largest number of named arguments shown in the subclause headings for the function description. Optional parameters (which are indicated with brackets: [ ]) or rest parameters (which are shown using the form «...name») are not included in the default argument count.\nUnless otherwise specified, the length property of a built-in function object has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["Intl.RelativeTimeFormat"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/prototype/format/name.js","esid":" sec-Intl.RelativeTimeFormat.prototype.format","description":" Checks the \"name\" property of Intl.RelativeTimeFormat.prototype.format().","info":" |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, that is not identified as an anonymous function has a name property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification.\nUnless otherwise specified, the name property of a built-in function object, if it exists, has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["Intl.RelativeTimeFormat"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/prototype/format/pl-pl-style-long.js","esid":" sec-Intl.RelativeTimeFormat.prototype.format","description":" Checks the behavior of Intl.RelativeTimeFormat.prototype.format() in Polish.","features":["Intl.RelativeTimeFormat"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/prototype/format/pl-pl-style-narrow.js","esid":" sec-Intl.RelativeTimeFormat.prototype.format","description":" Checks the behavior of Intl.RelativeTimeFormat.prototype.format() in Polish.","features":["Intl.RelativeTimeFormat"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/prototype/format/pl-pl-style-short.js","esid":" sec-Intl.RelativeTimeFormat.prototype.format","description":" Checks the behavior of Intl.RelativeTimeFormat.prototype.format() in Polish.","features":["Intl.RelativeTimeFormat"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/prototype/format/prop-desc.js","esid":" sec-Intl.RelativeTimeFormat.prototype.format","description":" Checks the \"format\" property of the RelativeTimeFormat prototype object.","info":" |Intl.RelativeTimeFormat.prototype.format ()\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\n","includes":["propertyHelper.js"],"features":["Intl.RelativeTimeFormat"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/prototype/format/unit-invalid.js","esid":" sec-Intl.RelativeTimeFormat.prototype.format","description":" Checks the handling of invalid unit arguments to Intl.RelativeTimeFormat.prototype.format().","info":" |SingularRelativeTimeUnit ( unit )\n\n10. If unit is not one of \"second\", \"minute\", \"hour\", \"day\", \"week\", \"month\", \"quarter\", \"year\", throw a RangeError exception.\n\n","features":["Intl.RelativeTimeFormat"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/prototype/format/unit-plural.js","esid":" sec-Intl.RelativeTimeFormat.prototype.format","description":" Checks the handling of plural unit arguments to Intl.RelativeTimeFormat.prototype.format().","info":" |SingularRelativeTimeUnit ( unit )\n\n2. If unit is \"seconds\", return \"second\".\n3. If unit is \"minutes\", return \"minute\".\n4. If unit is \"hours\", return \"hour\".\n5. If unit is \"days\", return \"day\".\n6. If unit is \"weeks\", return \"week\".\n7. If unit is \"months\", return \"month\".\n8. If unit is \"quarters\", return \"quarter\".\n9. If unit is \"years\", return \"year\".\n\n","features":["Intl.RelativeTimeFormat"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/prototype/format/value-non-finite.js","esid":" sec-Intl.RelativeTimeFormat.prototype.format","description":" Checks the handling of invalid value arguments to Intl.RelativeTimeFormat.prototype.format().","info":" |Intl.RelativeTimeFormat.prototype.format( value, unit )\n\n3. Let value be ? ToNumber(value).\n\nPartitionRelativeTimePattern ( relativeTimeFormat, value, unit )\n\n4. If isFinite(value) is false, then throw a RangeError exception.\n\n","features":["Intl.RelativeTimeFormat"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/prototype/format/value-symbol.js","esid":" sec-Intl.RelativeTimeFormat.prototype.format","description":" Checks the handling of invalid value arguments to Intl.RelativeTimeFormat.prototype.format().","info":" |Intl.RelativeTimeFormat.prototype.format( value, unit )\n\n3. Let value be ? ToNumber(value).\n\n","features":["Intl.RelativeTimeFormat"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/prototype/format/value-tonumber.js","esid":" sec-Intl.RelativeTimeFormat.prototype.format","description":" Checks the handling of non-number value arguments to Intl.RelativeTimeFormat.prototype.format().","info":" |Intl.RelativeTimeFormat.prototype.format( value, unit )\n\n3. Let value be ? ToNumber(value).\n\n","features":["Intl.RelativeTimeFormat"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/prototype/formatToParts/branding.js","esid":" sec-Intl.RelativeTimeFormat.prototype.formatToParts","description":" Verifies the branding check for the \"formatToParts\" function of the RelativeTimeFormat prototype object.","info":" |Intl.RelativeTimeFormat.prototype.formatToParts( value, unit )\n\n2. If Type(relativeTimeFormat) is not Object or relativeTimeFormat does not have an [[InitializedRelativeTimeFormat]] internal slot whose value is true, throw a TypeError exception.\n","features":["Intl.RelativeTimeFormat"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/prototype/formatToParts/en-us-numeric-always.js","esid":" sec-Intl.RelativeTimeFormat.prototype.formatToParts","description":" Checks the behavior of Intl.RelativeTimeFormat.prototype.formatToParts() in English.","features":["Intl.RelativeTimeFormat"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/prototype/formatToParts/en-us-numeric-auto.js","esid":" sec-Intl.RelativeTimeFormat.prototype.formatToParts","description":" Checks the behavior of Intl.RelativeTimeFormat.prototype.formatToParts() in English.","features":["Intl.RelativeTimeFormat"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/prototype/formatToParts/en-us-style-short.js","esid":" sec-Intl.RelativeTimeFormat.prototype.formatToParts","description":" Checks the behavior of Intl.RelativeTimeFormat.prototype.formatToParts() in English.","features":["Intl.RelativeTimeFormat"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/prototype/formatToParts/length.js","esid":" sec-Intl.RelativeTimeFormat.prototype.formatToParts","description":" Checks the \"length\" property of Intl.RelativeTimeFormat.prototype.formatToParts().","info":" |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nThe RelativeTimeFormat constructor is a standard built-in property of the Intl object.\nEvery built-in function object, including constructors, has a length property whose value is an integer. Unless otherwise specified, this value is equal to the largest number of named arguments shown in the subclause headings for the function description. Optional parameters (which are indicated with brackets: [ ]) or rest parameters (which are shown using the form «...name») are not included in the default argument count.\nUnless otherwise specified, the length property of a built-in function object has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["Intl.RelativeTimeFormat"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/prototype/formatToParts/name.js","esid":" sec-Intl.RelativeTimeFormat.prototype.formatToParts","description":" Checks the \"name\" property of Intl.RelativeTimeFormat.prototype.formatToParts().","info":" |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, that is not identified as an anonymous function has a name property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification.\nUnless otherwise specified, the name property of a built-in function object, if it exists, has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["Intl.RelativeTimeFormat"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/prototype/formatToParts/pl-pl-style-long.js","esid":" sec-Intl.RelativeTimeFormat.prototype.format","description":" Checks the behavior of Intl.RelativeTimeFormat.prototype.format() in Polish.","features":["Intl.RelativeTimeFormat"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/prototype/formatToParts/pl-pl-style-narrow.js","esid":" sec-Intl.RelativeTimeFormat.prototype.format","description":" Checks the behavior of Intl.RelativeTimeFormat.prototype.format() in Polish.","features":["Intl.RelativeTimeFormat"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/prototype/formatToParts/pl-pl-style-short.js","esid":" sec-Intl.RelativeTimeFormat.prototype.format","description":" Checks the behavior of Intl.RelativeTimeFormat.prototype.format() in Polish.","features":["Intl.RelativeTimeFormat"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/prototype/formatToParts/prop-desc.js","esid":" sec-Intl.RelativeTimeFormat.prototype.formatToParts","description":" Checks the \"formatToParts\" property of the RelativeTimeFormat prototype object.","info":" |Intl.RelativeTimeFormat.prototype.formatToParts ()\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\n","includes":["propertyHelper.js"],"features":["Intl.RelativeTimeFormat"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/prototype/formatToParts/result-type.js","esid":" sec-Intl.RelativeTimeFormat.prototype.formatToParts","description":" Checks the handling of plural unit arguments to Intl.RelativeTimeFormat.prototype.formatToParts().","info":" |FormatRelativeTimeToParts ( relativeTimeFormat, value, unit )\n\n3. Let n be 0.\n4. For each part in parts, do:\na. Let O be ObjectCreate(%ObjectPrototype%).\nb. Perform ! CreateDataPropertyOrThrow(O, \"type\", part.[[Type]]).\nc. Perform ! CreateDataPropertyOrThrow(O, \"value\", part.[[Value]]).\nd. If part has a [[Unit]] field,\ni. Perform ! CreateDataPropertyOrThrow(O, \"unit\", part.[[Unit]]).\ne. Perform ! CreateDataPropertyOrThrow(result, ! ToString(n), O).\nf. Increment n by 1.\n\n","features":["Intl.RelativeTimeFormat"],"includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/prototype/formatToParts/unit-invalid.js","esid":" sec-Intl.RelativeTimeFormat.prototype.formatToParts","description":" Checks the handling of invalid unit arguments to Intl.RelativeTimeFormat.prototype.formatToParts().","info":" |SingularRelativeTimeUnit ( unit )\n\n10. If unit is not one of \"second\", \"minute\", \"hour\", \"day\", \"week\", \"month\", \"quarter\", \"year\", throw a RangeError exception.\n\n","features":["Intl.RelativeTimeFormat"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/prototype/formatToParts/unit-plural.js","esid":" sec-Intl.RelativeTimeFormat.prototype.formatToParts","description":" Checks the handling of plural unit arguments to Intl.RelativeTimeFormat.prototype.formatToParts().","info":" |SingularRelativeTimeUnit ( unit )\n\n2. If unit is \"seconds\", return \"second\".\n3. If unit is \"minutes\", return \"minute\".\n4. If unit is \"hours\", return \"hour\".\n5. If unit is \"days\", return \"day\".\n6. If unit is \"weeks\", return \"week\".\n7. If unit is \"months\", return \"month\".\n8. If unit is \"quarters\", return \"quarter\".\n9. If unit is \"years\", return \"year\".\n\n","features":["Intl.RelativeTimeFormat"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/prototype/formatToParts/value-non-finite.js","esid":" sec-Intl.RelativeTimeFormat.prototype.formatToParts","description":" Checks the handling of invalid value arguments to Intl.RelativeTimeFormat.prototype.formatToParts().","info":" |Intl.RelativeTimeFormat.prototype.formatToParts( value, unit )\n\n3. Let value be ? ToNumber(value).\n\nPartitionRelativeTimePattern ( relativeTimeFormat, value, unit )\n\n4. If isFinite(value) is false, then throw a RangeError exception.\n\n","features":["Intl.RelativeTimeFormat"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/prototype/formatToParts/value-symbol.js","esid":" sec-Intl.RelativeTimeFormat.prototype.formatToParts","description":" Checks the handling of invalid value arguments to Intl.RelativeTimeFormat.prototype.formatToParts().","info":" |Intl.RelativeTimeFormat.prototype.formatToParts( value, unit )\n\n3. Let value be ? ToNumber(value).\n\n","features":["Intl.RelativeTimeFormat"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/prototype/formatToParts/value-tonumber.js","esid":" sec-Intl.RelativeTimeFormat.prototype.format","description":" Checks the handling of non-number value arguments to Intl.RelativeTimeFormat.prototype.format().","info":" |Intl.RelativeTimeFormat.prototype.format( value, unit )\n\n3. Let value be ? ToNumber(value).\n\n","features":["Intl.RelativeTimeFormat"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/prototype/prop-desc.js","esid":" sec-Intl.RelativeTimeFormat.prototype","description":" >Checks the \"prototype\" property of the RelativeTimeFormat constructor.\n","info":" |Intl.RelativeTimeFormat.prototype\n\nThe value of Intl.RelativeTimeFormat.prototype is %RelativeTimeFormatPrototype%.\n\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\n","includes":["propertyHelper.js"],"features":["Intl.RelativeTimeFormat"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/prototype/resolvedOptions/branding.js","esid":" sec-Intl.RelativeTimeFormat.prototype.resolvedOptions","description":" Verifies the branding check for the \"resolvedOptions\" function of the RelativeTimeFormat prototype object.","info":" |Intl.RelativeTimeFormat.prototype.resolvedOptions ()\n\n2. If Type(relativeTimeFormat) is not Object or relativeTimeFormat does not have an [[InitializedRelativeTimeFormat]] internal slot whose value is true, throw a TypeError exception.\n","features":["Intl.RelativeTimeFormat"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/prototype/resolvedOptions/caching.js","esid":" sec-Intl.RelativeTimeFormat.prototype.resolvedOptions","description":" Verifies that the return value of Intl.RelativeTimeFormat.prototype.resolvedOptions() is not cached.","info":" |Intl.RelativeTimeFormat.prototype.resolvedOptions ()\n\n4. Let options be ! ObjectCreate(%ObjectPrototype%).\n","features":["Intl.RelativeTimeFormat"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/prototype/resolvedOptions/length.js","esid":" sec-Intl.RelativeTimeFormat.prototype.resolvedOptions","description":" Checks the \"length\" property of Intl.RelativeTimeFormat.prototype.resolvedOptions().","info":" |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nThe RelativeTimeFormat constructor is a standard built-in property of the Intl object.\nEvery built-in function object, including constructors, has a length property whose value is an integer. Unless otherwise specified, this value is equal to the largest number of named arguments shown in the subclause headings for the function description. Optional parameters (which are indicated with brackets: [ ]) or rest parameters (which are shown using the form «...name») are not included in the default argument count.\nUnless otherwise specified, the length property of a built-in function object has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["Intl.RelativeTimeFormat"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/prototype/resolvedOptions/name.js","esid":" sec-Intl.RelativeTimeFormat.prototype.resolvedOptions","description":" Checks the \"name\" property of Intl.RelativeTimeFormat.prototype.resolvedOptions().","info":" |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, that is not identified as an anonymous function has a name property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification.\nUnless otherwise specified, the name property of a built-in function object, if it exists, has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["Intl.RelativeTimeFormat"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/prototype/resolvedOptions/order.js","esid":" sec-intl.relativetimeformat.prototype.resolvedoptions","description":" Verifies the property order for the object returned by resolvedOptions().","includes":["compareArray.js"],"features":["Intl.RelativeTimeFormat"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/prototype/resolvedOptions/prop-desc.js","esid":" sec-Intl.RelativeTimeFormat.prototype.resolvedOptions","description":" Checks the \"resolvedOptions\" property of the RelativeTimeFormat prototype object.","info":" |Intl.RelativeTimeFormat.prototype.resolvedOptions ()\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\n","includes":["propertyHelper.js"],"features":["Intl.RelativeTimeFormat"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/prototype/resolvedOptions/type.js","esid":" sec-Intl.RelativeTimeFormat.prototype.resolvedOptions","description":" Checks the properties of the result of Intl.RelativeTimeFormat.prototype.resolvedOptions().","info":" |Intl.RelativeTimeFormat.prototype.resolvedOptions ()\n\n4. Let options be ! ObjectCreate(%ObjectPrototype%).\n5. For each row of Table 1, except the header row, do\nd. Perform ! CreateDataPropertyOrThrow(options, p, v).\n","includes":["propertyHelper.js"],"features":["Intl.RelativeTimeFormat"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/prototype/toStringTag/toString.js","esid":" sec-intl.RelativeTimeFormat.prototype-@@tostringtag","description":" >Checks Object.prototype.toString with Intl.RelativeTimeFormat objects.\n","info":" |Intl.RelativeTimeFormat.prototype[ @@toStringTag ]\n\nThe initial value of the @@toStringTag property is the string value \"Intl.RelativeTimeFormat\".\n","features":["Intl.RelativeTimeFormat"]},{"path":"./test262-main/test/intl402/RelativeTimeFormat/prototype/toStringTag/toStringTag.js","esid":" sec-intl.RelativeTimeFormat.prototype-@@tostringtag","description":" >Checks the @@toStringTag property of the RelativeTimeFormat prototype object.\n","info":" |Intl.RelativeTimeFormat.prototype[ @@toStringTag ]\n\nThe initial value of the @@toStringTag property is the string value \"Intl.RelativeTimeFormat\".\n\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["Intl.RelativeTimeFormat","Symbol.toStringTag"]},{"path":"./test262-main/test/intl402/Segmenter/constructor/constructor/locales-invalid.js","esid":" sec-Intl.Segmenter","description":" Checks error cases for the locales argument to the Segmenter constructor.","info":" |Intl.Segmenter ([ locales [ , options ]])\n\n3. Let _requestedLocales_ be ? CanonicalizeLocaleList(_locales_).\n","includes":["testIntl.js"],"features":["Intl.Segmenter"]},{"path":"./test262-main/test/intl402/Segmenter/constructor/constructor/locales-valid.js","esid":" sec-Intl.Segmenter","description":" Checks various cases for the locales argument to the Segmenter constructor.","info":" |Intl.Segmenter ([ locales [ , options ]])\n\n3. Let _requestedLocales_ be ? CanonicalizeLocaleList(_locales_).\n","features":["Intl.Segmenter"]},{"path":"./test262-main/test/intl402/Segmenter/constructor/constructor/newtarget-undefined.js","esid":" sec-Intl.Segmenter","description":" Verifies the NewTarget check for Intl.Segmenter.","info":" |Intl.Segmenter ([ locales [ , options ]])\n\n1. If NewTarget is undefined, throw a TypeError exception.\n","features":["Intl.Segmenter"]},{"path":"./test262-main/test/intl402/Segmenter/constructor/constructor/options-granularity-abrupt-throws.js","esid":" sec-intl.segmenter","description":" Return abrupt completion from GetOption granularity","info":" |Intl.Segmenter ([ locales [ , options ]])\n\n13. Let granularity be ? GetOption(options, \"granularity\", \"string\", « \"grapheme\", \"word\", \"sentence\" », \"grapheme\").\n\nGetOption ( options, property, type, values, fallback )\n1. Let value be ? Get(options, property).\n","features":["Intl.Segmenter"]},{"path":"./test262-main/test/intl402/Segmenter/constructor/constructor/options-granularity-invalid.js","esid":" sec-Intl.Segmenter","description":" Checks handling of invalid value for the style option to the Segmenter constructor.","info":" |Intl.Segmenter ([ locales [ , options ]])\n\n13. Let granularity be ? GetOption(options, \"granularity\", \"string\", « \"grapheme\", \"word\", \"sentence\" », \"grapheme\").\n14. Set segmenter.[[SegmenterGranularity]] to granularity.\n","features":["Intl.Segmenter"]},{"path":"./test262-main/test/intl402/Segmenter/constructor/constructor/options-granularity-toString-abrupt-throws.js","esid":" sec-intl.segmenter","description":" Return abrupt completion from GetOption granularity\n","info":" |Intl.Segmenter ([ locales [ , options ]])\n\n13. Let granularity be ? GetOption(options, \"granularity\", \"string\", « \"grapheme\", \"word\", \"sentence\" », \"grapheme\").\n\nGetOption ( options, property, type, values, fallback )\n6. If type is \"string\", then\na. Let value be ? ToString(value).\n","features":["Intl.Segmenter","Symbol"]},{"path":"./test262-main/test/intl402/Segmenter/constructor/constructor/options-granularity-valid.js","esid":" sec-Intl.Segmenter","description":" Checks handling of valid values for the granularity option to the Segmenter constructor.","info":" |Intl.Segmenter ([ locales [ , options ]])\n\n11. Let granularity be ? GetOption(options, \"granularity\", \"string\", « \"grapheme\", \"word\", \"sentence\" », \"grapheme\").\n12. Set segmenter.[[SegmenterGranularity]] to granularity.\n","features":["Intl.Segmenter"]},{"path":"./test262-main/test/intl402/Segmenter/constructor/constructor/options-invalid.js","esid":" sec-Intl.Segmenter","description":" Checks handling of a null options argument to the Segmenter constructor.","info":" |Intl.Segmenter ([ locales [ , options ]])\n\n5. Else\na. Let options be ? ToObject(options).\n","features":["Intl.Segmenter"]},{"path":"./test262-main/test/intl402/Segmenter/constructor/constructor/options-localeMatcher-abrupt-throws.js","esid":" sec-intl.segmenter","description":" >Return abrupt completion from GetOption localeMatcher\n","info":" |Intl.Segmenter ([ locales [ , options ]])\n1. If NewTarget is undefined, throw a TypeError exception.\n...\n4. If options is undefined, then\na. Let options be ObjectCreate(null).\n5. Else\na. Let options be ? ToObject(options).\n...\n8. Let matcher be ? GetOption(options, \"localeMatcher\", \"string\", « \"lookup\", \"best fit\" », \"best fit\").\nGetOption ( options, property, type, values, fallback )\n1. Let value be ? Get(options, property).\n...\n","features":["Intl.Segmenter"]},{"path":"./test262-main/test/intl402/Segmenter/constructor/constructor/options-localeMatcher-invalid.js","esid":" sec-Intl.Segmenter","description":" Checks handling of invalid value for the localeMatcher option to the Segmenter constructor.","info":" |Intl.Segmenter ([ locales [ , options ]])\n\n7. Let matcher be ? GetOption(options, \"localeMatcher\", \"string\", «\"lookup\", \"best fit\"», \"best fit\").\n","features":["Intl.Segmenter"]},{"path":"./test262-main/test/intl402/Segmenter/constructor/constructor/options-localeMatcher-toString-abrupt-throws.js","esid":" sec-intl.segmenter","description":" >Return abrupt completion from GetOption localeMatcher\n","info":" |Intl.Segmenter ([ locales [ , options ]])\n\n1. If NewTarget is undefined, throw a TypeError exception.\n3. Let segmenter be ? OrdinaryCreateFromConstructor(NewTarget, \"%Segmenter.prototype%\", internalSlotsList).\n...\n4. If options is undefined, then\na. Let options be ObjectCreate(null).\n5. Else\na. Let options be ? ToObject(options).\n...\n8. Let matcher be ? GetOption(options, \"localeMatcher\", \"string\", « \"lookup\", \"best fit\" », \"best fit\").\n\nGetOption ( options, property, type, values, fallback )\n6. If type is \"string\", then\na. Let value be ? ToString(value).\n...\n","features":["Intl.Segmenter","Symbol"]},{"path":"./test262-main/test/intl402/Segmenter/constructor/constructor/options-localeMatcher-valid.js","esid":" sec-intl.segmenter","description":" >Valid options for localeMatcher\n","info":" |Intl.Segmenter ([ locales [ , options ]])\n\n1. If NewTarget is undefined, throw a TypeError exception.\n3. Let segmenter be ? OrdinaryCreateFromConstructor(NewTarget, \"%Segmenter.prototype%\", internalSlotsList).\n...\n8. Let matcher be ? GetOption(options, \"localeMatcher\", \"string\", « \"lookup\", \"best fit\" », \"best fit\").\n...\n\nGetOption ( options, property, type, values, fallback )\n\n1. Let value be ? Get(options, property).\n...\n","features":["Intl.Segmenter"]},{"path":"./test262-main/test/intl402/Segmenter/constructor/constructor/options-null.js","esid":" sec-intl.Segmenter","description":" >Throws TypeError if options is null\n","info":" |Intl.Segmenter ([ locales [ , options ]])\n1. If NewTarget is undefined, throw a TypeError exception.\n3. Let segmenter be ? OrdinaryCreateFromConstructor(NewTarget, \"%Segmenter.prototype%\", internalSlotsList).\n...\n4. If options is undefined, then\na. Let options be ObjectCreate(null).\n5. Else\na. Let options be ? ToObject(options).\n...\n","features":["Intl.Segmenter"]},{"path":"./test262-main/test/intl402/Segmenter/constructor/constructor/options-order.js","esid":" sec-Intl.Segmenter","description":" Checks the order of operations on the options argument to the Segmenter constructor.","info":" |Intl.Segmenter ([ locales [ , options ]])\n\n7. Let matcher be ? GetOption(options, \"localeMatcher\", \"string\", « \"lookup\", \"best fit\" », \"best fit\").\n11. Let granularity be ? GetOption(options, \"granularity\", \"string\", « \"grapheme\", \"word\", \"sentence\" », \"grapheme\").\n","includes":["compareArray.js"],"features":["Intl.Segmenter"]},{"path":"./test262-main/test/intl402/Segmenter/constructor/constructor/options-throwing-getters.js","esid":" sec-Intl.Segmenter","description":" Checks the propagation of exceptions from the options for the Segmenter constructor.","features":["Intl.Segmenter"]},{"path":"./test262-main/test/intl402/Segmenter/constructor/constructor/options-toobject-prototype.js","esid":" sec-Intl.Segmenter","description":" Checks handling of non-object option arguments to the Segmenter constructor.","info":" |Intl.Segmenter ([ locales [ , options ]])\n\n5. Else\na. Let options be ? ToObject(options).\n","features":["Intl.Segmenter"]},{"path":"./test262-main/test/intl402/Segmenter/constructor/constructor/options-toobject.js","esid":" sec-Intl.Segmenter","description":" Checks handling of non-object option arguments to the Segmenter constructor.","info":" |Intl.Segmenter ([ locales [ , options ]])\n\n5. Else\na. Let options be ? ToObject(options).\n","features":["Intl.Segmenter"]},{"path":"./test262-main/test/intl402/Segmenter/constructor/constructor/options-undefined.js","esid":" sec-Intl.Segmenter","description":" Checks handling of non-object option arguments to the Segmenter constructor.","info":" |Intl.Segmenter ([ locales [ , options ]])\n\n4. If options is undefined, then\na. Let options be ObjectCreate(null).\n","features":["Intl.Segmenter"]},{"path":"./test262-main/test/intl402/Segmenter/constructor/constructor/options-valid-combinations.js","esid":" sec-Intl.Segmenter","description":" Checks handling of valid values for the granularity option to the Segmenter constructor.","info":" |Intl.Segmenter ([ locales [ , options ]])\n\n11. Let granularity be ? GetOption(options, \"granularity\", \"string\", « \"grapheme\", \"word\", \"sentence\" », \"grapheme\").\n12. Set segmenter.[[SegmenterGranularity]] to granularity.\n","features":["Intl.Segmenter"]},{"path":"./test262-main/test/intl402/Segmenter/constructor/constructor/proto-from-ctor-realm.js","esid":" sec-Intl.Segmenter","description":" Default [[Prototype]] value derived from realm of the NewTarget.","info":" |Intl.Segmenter ([ locales [ , options ]])\n\n1. If NewTarget is undefined, throw a TypeError exception.\n2. Let segmenter be ? OrdinaryCreateFromConstructor(NewTarget, \"%SegmenterPrototype%\", « [[InitializedSegmenter]] »).\n...\n14. Return segmenter.\n\nOrdinaryCreateFromConstructor ( constructor, intrinsicDefaultProto [ , internalSlotsList ] )\n\n...\n2. Let proto be ? GetPrototypeFromConstructor(constructor, intrinsicDefaultProto).\n3. Return ObjectCreate(proto, internalSlotsList).\n\nGetPrototypeFromConstructor ( constructor, intrinsicDefaultProto )\n\n...\n3. Let proto be ? Get(constructor, 'prototype').\n4. If Type(proto) is not Object, then\na. Let realm be ? GetFunctionRealm(constructor).\nb. Set proto to realm's intrinsic object named intrinsicDefaultProto.\n5. Return proto.\n","features":["Intl.Segmenter","cross-realm","Reflect","Symbol"]},{"path":"./test262-main/test/intl402/Segmenter/constructor/constructor/subclassing.js","esid":" sec-Intl.Segmenter","description":" Checks that Segmenter can be subclassed.","info":" |Intl.Segmenter ( [ locales [ , options ] ] )\n\n2. Let segmenter be ? OrdinaryCreateFromConstructor(NewTarget, \"%SegmenterPrototype%\", « [[InitializedSegmenter]] »).\n","includes":["compareArray.js"],"features":["Intl.Segmenter"]},{"path":"./test262-main/test/intl402/Segmenter/constructor/length.js","esid":" sec-Intl.Segmenter","description":" >Checks the \"length\" property of the Segmenter constructor.\n","info":" |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nThe Segmenter constructor is a standard built-in property of the Intl object.\nEvery built-in function object, including constructors, has a length property whose value is an integer. Unless otherwise specified, this value is equal to the largest number of named arguments shown in the subclause headings for the function description. Optional parameters (which are indicated with brackets: [ ]) or rest parameters (which are shown using the form «...name») are not included in the default argument count.\nUnless otherwise specified, the length property of a built-in function object has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["Intl.Segmenter"]},{"path":"./test262-main/test/intl402/Segmenter/constructor/name.js","esid":" sec-Intl.Segmenter","description":" Checks the \"name\" property of the Segmenter constructor.","info":" |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, that is not identified as an anonymous function has a name property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification.\nUnless otherwise specified, the name property of a built-in function object, if it exists, has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["Intl.Segmenter"]},{"path":"./test262-main/test/intl402/Segmenter/constructor/prop-desc.js","esid":" sec-Intl.Segmenter","description":" Verifies the \"Segmenter\" property of Intl.","info":" |Requirements for Standard Built-in ECMAScript Objects\n\nUnless specified otherwise in this document, the objects, functions, and constructors\ndescribed in this standard are subject to the generic requirements and restrictions\nspecified for standard built-in ECMAScript objects in the ECMAScript 2018 Language\nSpecification, 9th edition, clause 17, or successor.\n\nECMAScript Standard Built-in Objects:\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the\nattributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true }\nunless otherwise specified.\n\n","includes":["propertyHelper.js"],"features":["Intl.Segmenter"]},{"path":"./test262-main/test/intl402/Segmenter/constructor/prototype.js","esid":" sec-Intl.Segmenter","description":" The prototype of the Intl.Segmenter constructor is %FunctionPrototype%.","info":" |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nUnless otherwise specified every built-in function object has the %FunctionPrototype% object as the initial value of its [[Prototype]] internal slot.\n","features":["Intl.Segmenter"]},{"path":"./test262-main/test/intl402/Segmenter/constructor/supportedLocalesOf/basic.js","esid":" sec-Intl.Segmenter.supportedLocalesOf","description":" Tests that Intl.Segmenter has a supportedLocalesOf property, and it works as expected.","features":["Intl.Segmenter"]},{"path":"./test262-main/test/intl402/Segmenter/constructor/supportedLocalesOf/branding.js","esid":" sec-Intl.Segmenter.supportedLocalesOf","description":" >Verifies there's no branding check for Intl.Segmenter.supportedLocalesOf().\n","info":" |Intl.Segmenter.supportedLocalesOf ( locales [, options ])\n","features":["Intl.Segmenter"]},{"path":"./test262-main/test/intl402/Segmenter/constructor/supportedLocalesOf/length.js","esid":" sec-Intl.Segmenter.supportedLocalesOf","description":" >Checks the \"length\" property of Intl.Segmenter.supportedLocalesOf().\n","info":" |The value of the length property of the supportedLocalesOf method is 1.\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, has a length property whose value is an integer.\nUnless otherwise specified, the length property of a built-in function object has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["Intl.Segmenter"]},{"path":"./test262-main/test/intl402/Segmenter/constructor/supportedLocalesOf/locales-empty.js","esid":" sec-Intl.Segmenter.supportedLocalesOf","description":" Checks handling of an empty locales argument to the supportedLocalesOf function.","info":" |Intl.Segmenter.supportedLocalesOf ( locales [, options ])\n\n3. Return ? SupportedLocales(availableLocales, requestedLocales, options).\n","includes":["compareArray.js"],"features":["Intl.Segmenter"]},{"path":"./test262-main/test/intl402/Segmenter/constructor/supportedLocalesOf/locales-invalid.js","esid":" sec-Intl.Segmenter.supportedLocalesOf","description":" Checks error cases for the locales argument to the supportedLocalesOf function.","info":" |Intl.Segmenter.supportedLocalesOf ( locales [, options ])\n\n2. Let requestedLocales be CanonicalizeLocaleList(locales).\n","includes":["testIntl.js"],"features":["Intl.Segmenter"]},{"path":"./test262-main/test/intl402/Segmenter/constructor/supportedLocalesOf/locales-specific.js","esid":" sec-Intl.Segmenter.supportedLocalesOf","description":" Checks handling of specific locales arguments to the supportedLocalesOf function.","info":" |Intl.Segmenter.supportedLocalesOf ( locales [, options ])\n\n3. Return ? SupportedLocales(availableLocales, requestedLocales, options).\n","includes":["compareArray.js"],"features":["Intl.Segmenter"]},{"path":"./test262-main/test/intl402/Segmenter/constructor/supportedLocalesOf/name.js","esid":" sec-Intl.Segmenter.supportedLocalesOf","description":" >Checks the \"name\" property of Intl.Segmenter.supportedLocalesOf().\n","info":" |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, that is not identified as an anonymous function has a name property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification.\nUnless otherwise specified, the name property of a built-in function object, if it exists, has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["Intl.Segmenter"]},{"path":"./test262-main/test/intl402/Segmenter/constructor/supportedLocalesOf/options-localeMatcher-invalid.js","esid":" sec-Intl.Segmenter.supportedLocalesOf","description":" Checks handling of invalid values for the localeMatcher option to the supportedLocalesOf function.","info":" |SupportedLocales ( availableLocales, requestedLocales, options )\n\n1. If options is not undefined, then\nb. Let matcher be ? GetOption(options, \"localeMatcher\", \"string\", «\"lookup\", \"best fit\"», \"best fit\").\n","features":["Intl.Segmenter"]},{"path":"./test262-main/test/intl402/Segmenter/constructor/supportedLocalesOf/options-null.js","esid":" sec-Intl.Segmenter.supportedLocalesOf","description":" Checks handling of a null options argument to the supportedLocalesOf function.","info":" |SupportedLocales ( availableLocales, requestedLocales, options )\n\n1. If options is not undefined, then\na. Let options be ? ToObject(options).\n","features":["Intl.Segmenter"]},{"path":"./test262-main/test/intl402/Segmenter/constructor/supportedLocalesOf/options-toobject.js","esid":" sec-Intl.Segmenter.supportedLocalesOf","description":" Checks handling of non-object options arguments to the supportedLocalesOf function.","info":" |SupportedLocales ( availableLocales, requestedLocales, options )\n\n1. If options is not undefined, then\na. Let options be ? ToObject(options).\n","features":["Intl.Segmenter"]},{"path":"./test262-main/test/intl402/Segmenter/constructor/supportedLocalesOf/options-undefined.js","esid":" sec-Intl.Segmenter.supportedLocalesOf","description":" Checks handling of an undefined options argument to the supportedLocalesOf function.","info":" |SupportedLocales ( availableLocales, requestedLocales, options )\n\n1. If options is not undefined, then\nb. Let matcher be ? GetOption(options, \"localeMatcher\", \"string\", «\"lookup\", \"best fit\"», \"best fit\").\n","features":["Intl.Segmenter"]},{"path":"./test262-main/test/intl402/Segmenter/constructor/supportedLocalesOf/prop-desc.js","esid":" sec-Intl.Segmenter.supportedLocalesOf","description":" >Checks the \"supportedLocalesOf\" property of the Segmenter prototype object.\n","info":" |Intl.Segmenter.supportedLocalesOf ( locales [, options ])\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\n","includes":["propertyHelper.js"],"features":["Intl.Segmenter"]},{"path":"./test262-main/test/intl402/Segmenter/constructor/supportedLocalesOf/result-type.js","esid":" sec-Intl.Segmenter.supportedLocalesOf","description":" Verifies the type of the return value of Intl.Segmenter.supportedLocalesOf().","info":" |Intl.Segmenter.supportedLocalesOf ( locales [, options ])\n","includes":["propertyHelper.js"],"features":["Intl.Segmenter"]},{"path":"./test262-main/test/intl402/Segmenter/ctor-custom-get-prototype-poison-throws.js","esid":" sec-intl.segmenter","description":" >Return abrupt from Get Prototype from a custom NewTarget\n","info":" |Intl.Segmenter ([ locales [ , options ]])\n1. If NewTarget is undefined, throw a TypeError exception.\n3. Let segmenter be ? OrdinaryCreateFromConstructor(NewTarget, \"%Segmenter.prototype%\", internalSlotsList).\n...\nOrdinaryCreateFromConstructor ( constructor, intrinsicDefaultProto [ , internalSlotsList ] )\n...\n2. Let proto be ? GetPrototypeFromConstructor(constructor, intrinsicDefaultProto).\n...\nGetPrototypeFromConstructor ( constructor, intrinsicDefaultProto )\n3. Let proto be ? Get(constructor, \"prototype\").\n","features":["Intl.Segmenter","Reflect","Proxy"]},{"path":"./test262-main/test/intl402/Segmenter/ctor-custom-prototype.js","esid":" sec-intl.segmenter","description":" >Custom Prototype of the returned object based on the NewTarget\n","info":" |Intl.Segmenter ([ locales [ , options ]])\n1. If NewTarget is undefined, throw a TypeError exception.\n3. Let segmenter be ? OrdinaryCreateFromConstructor(NewTarget, \"%Segmenter.prototype%\", internalSlotsList).\n...\nOrdinaryCreateFromConstructor ( constructor, intrinsicDefaultProto [ , internalSlotsList ] )\n...\n2. Let proto be ? GetPrototypeFromConstructor(constructor, intrinsicDefaultProto).\n...\nGetPrototypeFromConstructor ( constructor, intrinsicDefaultProto )\n3. Let proto be ? Get(constructor, \"prototype\").\n4. If Type(proto) is not Object, then\na. Let realm be ? GetFunctionRealm(constructor).\nb. Set proto to realm's intrinsic object named intrinsicDefaultProto.\n5. Return proto.\n","features":["Intl.Segmenter","Reflect"]},{"path":"./test262-main/test/intl402/Segmenter/ctor-default-prototype.js","esid":" sec-intl.segmenter","description":" >Prototype of the returned object is Segmenter.prototype\n","info":" |Intl.Segmenter ([ locales [ , options ]])\n1. If NewTarget is undefined, throw a TypeError exception.\n3. Let segmenter be ? OrdinaryCreateFromConstructor(NewTarget, \"%Segmenter.prototype%\", internalSlotsList).\n","features":["Intl.Segmenter"]},{"path":"./test262-main/test/intl402/Segmenter/instance/extensibility.js","esid":" sec-Intl.Segmenter","description":" Intl.Segmenter instance object extensibility","info":" |17 ECMAScript Standard Built-in Objects:\n\nUnless specified otherwise, the [[Extensible]] internal slot\nof a built-in object initially has the value true.\n","features":["Intl.Segmenter"]},{"path":"./test262-main/test/intl402/Segmenter/instance/prototype.js","esid":" sec-Intl.Segmenter","description":" Intl.Segmenter instance object is created from %SegmenterPrototype%.","info":" |Intl.Segmenter ([ locales [ , options ]])\n\n2. Let segmenter be ? OrdinaryCreateFromConstructor(NewTarget, \"%SegmenterPrototype%\", « [[InitializedSegmenter]] »).\n","features":["Intl.Segmenter"]},{"path":"./test262-main/test/intl402/Segmenter/proto-from-ctor-realm.js","esid":" sec-intl.segmenter","description":" Default [[Prototype]] value derived from realm of the NewTarget.","info":" |Intl.Segmenter ([ locales [ , options ]])\n1. If NewTarget is undefined, throw a TypeError exception.\n3. Let segmenter be ? OrdinaryCreateFromConstructor(NewTarget, \"%Segmenter.prototype%\", internalSlotsList).\n...\n15. Return segmenter.\nOrdinaryCreateFromConstructor ( constructor, intrinsicDefaultProto [ , internalSlotsList ] )\n...\n2. Let proto be ? GetPrototypeFromConstructor(constructor, intrinsicDefaultProto).\n3. Return ObjectCreate(proto, internalSlotsList).\nGetPrototypeFromConstructor ( constructor, intrinsicDefaultProto )\n...\n3. Let proto be ? Get(constructor, 'prototype').\n4. If Type(proto) is not Object, then\na. Let realm be ? GetFunctionRealm(constructor).\nb. Set proto to realm's intrinsic object named intrinsicDefaultProto.\n5. Return proto.\n","features":["cross-realm","Reflect","Symbol","Intl.Segmenter"]},{"path":"./test262-main/test/intl402/Segmenter/prototype/Symbol.toStringTag.js","esid":" sec-intl.segmenter.prototype-@@tostringtag","description":" >Property descriptor of Segmenter.prototype[@@toStringTag]\n","info":" |The initial value of the @@toStringTag property is the string value \"Intl.Segmenter\".\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["Intl.Segmenter","Symbol.toStringTag"]},{"path":"./test262-main/test/intl402/Segmenter/prototype/constructor/prop-desc.js","esid":" sec-Intl.Segmenter.prototype.constructor","description":" Checks the \"constructor\" property of the Segmenter prototype object.","info":" |Intl.Segmenter.prototype.constructor\n\nThe initial value of Intl.Segmenter.prototype.constructor is %Segmenter%.\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\n","includes":["propertyHelper.js"],"features":["Intl.Segmenter"]},{"path":"./test262-main/test/intl402/Segmenter/prototype/prop-desc.js","esid":" sec-Intl.Segmenter.prototype","description":" Checks the \"prototype\" property of the Segmenter constructor.","info":" |Intl.Segmenter.prototype\n\nThe value of Intl.Segmenter.prototype is %SegmenterPrototype%.\n\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.\n","includes":["propertyHelper.js"],"features":["Intl.Segmenter"]},{"path":"./test262-main/test/intl402/Segmenter/prototype/resolvedOptions/branding.js","esid":" sec-Intl.Segmenter.prototype.resolvedOptions","description":" Verifies the branding check for the \"resolvedOptions\" function of the Segmenter prototype object.","info":" |Intl.Segmenter.prototype.resolvedOptions ()\n\n2. If Type(pr) is not Object or pr does not have an [[InitializedSegmenter]] internal slot, throw a TypeError exception.\n","features":["Intl.Segmenter"]},{"path":"./test262-main/test/intl402/Segmenter/prototype/resolvedOptions/caching.js","esid":" sec-Intl.Segmenter.prototype.resolvedOptions","description":" Verifies that the return value of Intl.Segmenter.prototype.resolvedOptions() is not cached.","info":" |Intl.Segmenter.prototype.resolvedOptions ()\n\n3. Let options be ! ObjectCreate(%ObjectPrototype%).\n","features":["Intl.Segmenter"]},{"path":"./test262-main/test/intl402/Segmenter/prototype/resolvedOptions/length.js","esid":" sec-Intl.Segmenter.prototype.resolvedOptions","description":" Checks the \"length\" property of Intl.Segmenter.prototype.resolvedOptions().","info":" |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nThe Segmenter constructor is a standard built-in property of the Intl object.\nEvery built-in function object, including constructors, has a length property whose value is an integer. Unless otherwise specified, this value is equal to the largest number of named arguments shown in the subclause headings for the function description. Optional parameters (which are indicated with brackets: [ ]) or rest parameters (which are shown using the form «...name») are not included in the default argument count.\nUnless otherwise specified, the length property of a built-in function object has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["Intl.Segmenter"]},{"path":"./test262-main/test/intl402/Segmenter/prototype/resolvedOptions/name.js","esid":" sec-Intl.Segmenter.prototype.resolvedOptions","description":" Checks the \"name\" property of Intl.Segmenter.prototype.resolvedOptions().","info":" |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, that is not identified as an anonymous function has a name property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification.\nUnless otherwise specified, the name property of a built-in function object, if it exists, has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["Intl.Segmenter"]},{"path":"./test262-main/test/intl402/Segmenter/prototype/resolvedOptions/order.js","esid":" sec-Intl.Segmenter.prototype.resolvedOptions","description":" Verifies the property order for the object returned by resolvedOptions().","includes":["compareArray.js"],"features":["Intl.Segmenter"]},{"path":"./test262-main/test/intl402/Segmenter/prototype/resolvedOptions/prop-desc.js","esid":" sec-Intl.Segmenter.prototype.resolvedOptions","description":" Checks the \"resolvedOptions\" property of the Segmenter prototype object.","info":" |Intl.Segmenter.prototype.resolvedOptions ()\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\n","includes":["propertyHelper.js"],"features":["Intl.Segmenter"]},{"path":"./test262-main/test/intl402/Segmenter/prototype/resolvedOptions/type-without-lbs.js","esid":" sec-Intl.Segmenter.prototype.resolvedOptions","description":" Checks the properties of the result of Intl.Segmenter.prototype.resolvedOptions().","info":" |Intl.Segmenter.prototype.resolvedOptions ()\n\n3. Let options be ! ObjectCreate(%ObjectPrototype%).\n4. For each row of Table 1, except the header row, do\nc. If v is not undefined, then\ni. Perform ! CreateDataPropertyOrThrow(options, p, v).\n","includes":["propertyHelper.js"],"features":["Intl.Segmenter"]},{"path":"./test262-main/test/intl402/Segmenter/prototype/segment/branding.js","esid":" sec-Intl.Segmenter.prototype.segment","description":" Verifies the branding check for the \"segment\" function of the Segmenter prototype object.","info":" |Intl.Segmenter.prototype.segment( string )\n\n2. If Type(segment) is not Object or segment does not have an [[InitializedSegmenter]] internal slot, throw a TypeError exception.\n","features":["Intl.Segmenter"]},{"path":"./test262-main/test/intl402/Segmenter/prototype/segment/containing/branding.js","esid":" sec-%segmentsprototype%.containing","description":" Verifies the branding check for the \"segment\" function of the %Segments.prototype%.containing.","info":" |%Segments.prototype%.containing ( index )\n1. Let segments be the this value.\n2. Perform ? RequireInternalSlot(segments, [[SegmentsSegmenter]]).\n\n","features":["Intl.Segmenter"]},{"path":"./test262-main/test/intl402/Segmenter/prototype/segment/containing/breakable-input.js","esid":" sec-%segmentsprototype%.containing","description":" Verifies the cases which the input is breakable.","info":" |%Segments.prototype%.containing ( index )\n\n8. Let startIndex be ! FindBoundary(segmenter, string, n, before).\n9. Let endIndex be ! FindBoundary(segmenter, string, n, after).\n\n","features":["Intl.Segmenter"]},{"path":"./test262-main/test/intl402/Segmenter/prototype/segment/containing/index-throws.js","esid":" sec-%segmentsprototype%.containing","description":" Verifies the cases which the value of index which throws.","info":" |%Segments.prototype%.containing ( index )\n\n6. Let n be ? ToInteger(index).\n7. If n < 0 or n ≥ len, return undefined.\n8. Let startIndex be ! FindBoundary(segmenter, string, n, before).\n\nToInteger ( argument )\n1. Let number be ? ToNumber(argument).\n\nToNumber ( argument )\nSymbol | Throw a TypeError exception.\nBigInt | Throw a TypeError exception.\n\n","features":["Intl.Segmenter"]},{"path":"./test262-main/test/intl402/Segmenter/prototype/segment/containing/iswordlike.js","esid":" sec-%segmentsprototype%.containing","description":" Verifies the isWordLike in the result when granularity is not \"word\".","info":" |%Segments.prototype%.containing ( index )\n\n10. Return ! CreateSegmentDataObject(segmenter, string, startIndex, endIndex).\n\nCreateSegmentDataObject ( segmenter, string, startIndex, endIndex )\n11. If granularity is \"word\", then\na. Let isWordLike be a Boolean value indicating whether the segment in string is \"word-like\" according to locale segmenter.[[Locale]].\nb. Perform ! CreateDataPropertyOrThrow(result, \"isWordLike\", isWordLike).\n\n","features":["Intl.Segmenter"]},{"path":"./test262-main/test/intl402/Segmenter/prototype/segment/containing/length.js","esid":" sec-%segmentsprototype%.containing","description":" Checks the \"length\" property of %Segments.prototype%.containing()","info":" |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nThe Segmenter constructor is a standard built-in property of the Intl object.\nEvery built-in function object, including constructors, has a length property whose value is an integer. Unless otherwise specified, this value is equal to the largest number of named arguments shown in the subclause headings for the function description. Optional parameters (which are indicated with brackets: [ ]) or rest parameters (which are shown using the form «...name») are not included in the default argument count.\nUnless otherwise specified, the length property of a built-in function object has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["Intl.Segmenter"]},{"path":"./test262-main/test/intl402/Segmenter/prototype/segment/containing/name.js","esid":" sec-%segmentsprototype%.containing","description":" Checks the \"name\" property of %Segments.prototype%.containing ( index )","info":" |%Segments.prototype%.containing ( index )\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2020 Language Specification, 11th edition, clause 17, or successor.\nEvery built-in function object, including constructors, that is not identified as an anonymous function has a name property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification.\nUnless otherwise specified, the name property of a built-in function object, if it exists, has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n\n","includes":["propertyHelper.js"],"features":["Intl.Segmenter"]},{"path":"./test262-main/test/intl402/Segmenter/prototype/segment/containing/one-index.js","esid":" sec-%segmentsprototype%.containing","description":" Verifies the cases which the value of index turn into 1.","info":" |%Segments.prototype%.containing ( index )\n\n6. Let n be ? ToInteger(index).\n7. If n < 0 or n ≥ len, return undefined.\n8. Let startIndex be ! FindBoundary(segmenter, string, n, before).\n\nToInteger ( argument )\n1. Let number be ? ToNumber(argument).\n2. If number is NaN, +0, or -0, return +0.\n4. Let integer be the Number value that is the same sign as number and whose magnitude is floor(abs(number)).\n5. If integer is -0, return +0.\n6. Return integer.\n\nToNumber ( argument )\nUndefined | Return NaN.\nNull| Return +0.\nBoolean| If argument is true, return 1. If argument is false, return +0.\n\n","features":["Intl.Segmenter"]},{"path":"./test262-main/test/intl402/Segmenter/prototype/segment/containing/out-of-bound-index.js","esid":" sec-%segmentsprototype%.containing","description":" Verifies the cases which the value of index turn into out of bound.","info":" |%Segments.prototype%.containing ( index )\n\n6. Let n be ? ToInteger(index).\n7. If n < 0 or n ≥ len, return undefined.\n8. Let startIndex be ! FindBoundary(segmenter, string, n, before).\n\nToInteger ( argument )\n1. Let number be ? ToNumber(argument).\n2. If number is NaN, +0, or -0, return +0.\n4. Let integer be the Number value that is the same sign as number and whose magnitude is floor(abs(number)).\n5. If integer is -0, return +0.\n6. Return integer.\n\nToNumber ( argument )\nString | See grammar and conversion algorithm below.\n\n","features":["Intl.Segmenter"]},{"path":"./test262-main/test/intl402/Segmenter/prototype/segment/containing/prop-desc.js","esid":" sec-%segmentsprototype%.containing","description":" Checks the \"containing\" property of the %Segments.prototype% object.","info":" |%Segments.prototype%.containing ( index )\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\n\n","features":["Intl.Segmenter"]},{"path":"./test262-main/test/intl402/Segmenter/prototype/segment/containing/unbreakable-input.js","esid":" sec-%segmentsprototype%.containing","description":" Verifies the cases which the input is unbreakable.","info":" |%Segments.prototype%.containing ( index )\n\n8. Let startIndex be ! FindBoundary(segmenter, string, n, before).\n9. Let endIndex be ! FindBoundary(segmenter, string, n, after).\n\n","features":["Intl.Segmenter"]},{"path":"./test262-main/test/intl402/Segmenter/prototype/segment/containing/word-iswordlike.js","esid":" sec-%segmentsprototype%.containing","description":" Verifies the isWordLike in the result when granularity is \"word\".","info":" |%Segments.prototype%.containing ( index )\n\n10. Return ! CreateSegmentDataObject(segmenter, string, startIndex, endIndex).\n\nCreateSegmentDataObject ( segmenter, string, startIndex, endIndex )\n11. If granularity is \"word\", then\na. Let isWordLike be a Boolean value indicating whether the segment in string is \"word-like\" according to locale segmenter.[[Locale]].\nb. Perform ! CreateDataPropertyOrThrow(result, \"isWordLike\", isWordLike).\n\n","features":["Intl.Segmenter"]},{"path":"./test262-main/test/intl402/Segmenter/prototype/segment/containing/zero-index.js","esid":" sec-%segmentsprototype%.containing","description":" Verifies the cases which the value of index turn into 0.","info":" |%Segments.prototype%.containing ( index )\n\n6. Let n be ? ToInteger(index).\n7. If n < 0 or n ≥ len, return undefined.\n8. Let startIndex be ! FindBoundary(segmenter, string, n, before).\n\nToInteger ( argument )\n1. Let number be ? ToNumber(argument).\n2. If number is NaN, +0, or -0, return +0.\n4. Let integer be the Number value that is the same sign as number and whose magnitude is floor(abs(number)).\n5. If integer is -0, return +0.\n6. Return integer.\n\nToNumber ( argument )\nUndefined | Return NaN.\nNull| Return +0.\nBoolean| If argument is true, return 1. If argument is false, return +0.\n\n","features":["Intl.Segmenter"]},{"path":"./test262-main/test/intl402/Segmenter/prototype/segment/length.js","esid":" sec-Intl.Segmenter.prototype.segment","description":" Checks the \"length\" property of Intl.Segmenter.prototype.segment().","info":" |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nThe Segmenter constructor is a standard built-in property of the Intl object.\nEvery built-in function object, including constructors, has a length property whose value is an integer. Unless otherwise specified, this value is equal to the largest number of named arguments shown in the subclause headings for the function description. Optional parameters (which are indicated with brackets: [ ]) or rest parameters (which are shown using the form «...name») are not included in the default argument count.\nUnless otherwise specified, the length property of a built-in function object has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["Intl.Segmenter"]},{"path":"./test262-main/test/intl402/Segmenter/prototype/segment/name.js","esid":" sec-Intl.Segmenter.prototype.segment","description":" Checks the \"name\" property of Intl.Segmenter.prototype.segment().","info":" |Unless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\nEvery built-in function object, including constructors, that is not identified as an anonymous function has a name property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification.\nUnless otherwise specified, the name property of a built-in function object, if it exists, has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["Intl.Segmenter"]},{"path":"./test262-main/test/intl402/Segmenter/prototype/segment/nested-next.js","esid":" sec-%segmentsprototype%-@@iterator","description":" Test to ensure the nested calling of the next method won't caused confusion to each other.","info":" |%Segments.prototype% [ @@iterator ] ()\n5. Return ! CreateSegmentIterator(segmenter, string)\n\nCreateSegmentIterator ( segmenter, string )\n1. Let internalSlotsList be « [[IteratingSegmenter]], [[IteratedString]], [[IteratedStringNextSegmentCodeUnitIndex]] ».\n2. Let iterator be ! ObjectCreate(%SegmentIterator.prototype%, internalSlotsList).\n3. Set iterator.[[IteratingSegmenter]] to segmenter.\n4. Set iterator.[[IteratedString]] to string.\n5. Set iterator.[[IteratedStringNextSegmentCodeUnitIndex]] to 0.\n6. Return iterator.\n\n%SegmentIterator.prototype%.next ()\n5. Let startIndex be iterator.[[IteratedStringNextSegmentCodeUnitIndex]].\n\n","features":["Intl.Segmenter"]},{"path":"./test262-main/test/intl402/Segmenter/prototype/segment/next-inside-next.js","esid":" sec-%segmentsprototype%-@@iterator","description":" Test to ensure the next on two segments of the segmenter won't interfer each other.","info":" |%Segments.prototype% [ @@iterator ] ()\n5. Return ! CreateSegmentIterator(segmenter, string)\n\nCreateSegmentIterator ( segmenter, string )\n1. Let internalSlotsList be « [[IteratingSegmenter]], [[IteratedString]], [[IteratedStringNextSegmentCodeUnitIndex]] ».\n2. Let iterator be ! ObjectCreate(%SegmentIterator.prototype%, internalSlotsList).\n3. Set iterator.[[IteratingSegmenter]] to segmenter.\n4. Set iterator.[[IteratedString]] to string.\n5. Set iterator.[[IteratedStringNextSegmentCodeUnitIndex]] to 0.\n6. Return iterator.\n\n%SegmentIterator.prototype%.next ()\n5. Let startIndex be iterator.[[IteratedStringNextSegmentCodeUnitIndex]].\n\n","features":["Intl.Segmenter"]},{"path":"./test262-main/test/intl402/Segmenter/prototype/segment/next-mix-with-containing.js","esid":" sec-%segmentsprototype%-@@iterator","description":" Test to ensure the the calling of containing() won't impact the calling of the next().","info":" |%Segments.prototype% [ @@iterator ] ()\n5. Return ! CreateSegmentIterator(segmenter, string)\n\nCreateSegmentIterator ( segmenter, string )\n1. Let internalSlotsList be « [[IteratingSegmenter]], [[IteratedString]], [[IteratedStringNextSegmentCodeUnitIndex]] ».\n2. Let iterator be ! ObjectCreate(%SegmentIterator.prototype%, internalSlotsList).\n3. Set iterator.[[IteratingSegmenter]] to segmenter.\n4. Set iterator.[[IteratedString]] to string.\n5. Set iterator.[[IteratedStringNextSegmentCodeUnitIndex]] to 0.\n6. Return iterator.\n\n%SegmentIterator.prototype%.next ()\n5. Let startIndex be iterator.[[IteratedStringNextSegmentCodeUnitIndex]].\n\n%Segments.prototype%.containing ( index )\n3. Let segmenter be segments.[[SegmentsSegmenter]].\n4. Let string be segments.[[SegmentsString]].\n\n\n","features":["Intl.Segmenter"]},{"path":"./test262-main/test/intl402/Segmenter/prototype/segment/prop-desc.js","esid":" sec-Intl.Segmenter.prototype.segment","description":" Checks the \"segment\" property of the Segmenter prototype object.","info":" |Intl.Segmenter.prototype.segment( string )\n\nUnless specified otherwise in this document, the objects, functions, and constructors described in this standard are subject to the generic requirements and restrictions specified for standard built-in ECMAScript objects in the ECMAScript 2019 Language Specification, 10th edition, clause 17, or successor.\n\nEvery other data property described in clauses 18 through 26 and in Annex B.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\n","includes":["propertyHelper.js"],"features":["Intl.Segmenter"]},{"path":"./test262-main/test/intl402/Segmenter/prototype/segment/segment-grapheme-iterable.js","esid":" sec-Intl.Segmenter.prototype.segment","description":" Verifies the behavior for the \"segment\" function of the Segmenter prototype object.","info":" |Intl.Segmenter.prototype.segment( string )\n","features":["Intl.Segmenter"]},{"path":"./test262-main/test/intl402/Segmenter/prototype/segment/segment-sentence-iterable.js","esid":" sec-Intl.Segmenter.prototype.segment","description":" Verifies the behavior for the \"segment\" function of the Segmenter prototype object.","info":" |Intl.Segmenter.prototype.segment( string )\n","features":["Intl.Segmenter"]},{"path":"./test262-main/test/intl402/Segmenter/prototype/segment/segment-tostring.js","esid":" sec-Intl.Segmenter.prototype.segment","description":" Verifies the string coercion in the \"segment\" function of the Segmenter prototype object.","info":" |Intl.Segmenter.prototype.segment( string )\n\n3. Let string be ? ToString(string).\n","features":["Intl.Segmenter"]},{"path":"./test262-main/test/intl402/Segmenter/prototype/segment/segment-word-iterable.js","esid":" sec-Intl.Segmenter.prototype.segment","description":" Verifies the behavior for the \"segment\" function of the Segmenter prototype object.","info":" |Intl.Segmenter.prototype.segment( string )\n","features":["Intl.Segmenter"]},{"path":"./test262-main/test/intl402/Segmenter/prototype/toStringTag/toString.js","esid":" sec-intl.Segmenter.prototype-@@tostringtag","description":" >Checks Object.prototype.toString with Intl.Segmenter objects.\n","info":" |Intl.Segmenter.prototype[ @@toStringTag ]\n\nThe initial value of the @@toStringTag property is the string value \"Intl.Segmenter\".\n","features":["Intl.Segmenter"]},{"path":"./test262-main/test/intl402/Segmenter/prototype/toStringTag/toStringTag.js","esid":" sec-intl.Segmenter.prototype-@@tostringtag","description":" >Checks the @@toStringTag property of the Segmenter prototype object.\n","info":" |Intl.Segmenter.prototype[ @@toStringTag ]\n\nThe initial value of the @@toStringTag property is the string value \"Intl.Segmenter\".\n\nThis property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.\n","includes":["propertyHelper.js"],"features":["Intl.Segmenter","Symbol.toStringTag"]},{"path":"./test262-main/test/intl402/String/prototype/localeCompare/builtin.js","version":5,"esid":" 13.1.1_L15","description":" >Tests that String.prototype.localeCompare meets the requirements\nfor built-in objects defined by the introduction of chapter 17 of\nthe ECMAScript Language Specification.\n","author":" Norbert Lindenberg","includes":["isConstructor.js"],"features":["Reflect.construct"]},{"path":"./test262-main/test/intl402/String/prototype/localeCompare/default-options-object-prototype.js","esid":" sec-initializecollator","description":" >Monkey-patching Object.prototype does not change the default\noptions for Collator as a null prototype is used.\n","info":" |InitializeCollator ( collator, locales, options )\n\n1. If _options_ is *undefined*, then\n1. Let _options_ be ObjectCreate(*null*).\n"},{"path":"./test262-main/test/intl402/String/prototype/localeCompare/length.js","esid":" sup-String.prototype.localeCompare","description":" >String.prototype.localeCompare.length is 1.\n","info":" |String.prototype.localeCompare ( that [ , locales [ , options ] ] )\n\n17 ECMAScript Standard Built-in Objects:\n\nEvery built-in function object, including constructors, has a length\nproperty whose value is an integer. Unless otherwise specified, this\nvalue is equal to the largest number of named arguments shown in the\nsubclause headings for the function description. Optional parameters\n(which are indicated with brackets: [ ]) or rest parameters (which\nare shown using the form «...name») are not included in the default\nargument count.\nUnless otherwise specified, the length property of a built-in function\nobject has the attributes { [[Writable]]: false, [[Enumerable]]: false,\n[[Configurable]]: true }.\n\n","includes":["propertyHelper.js"]},{"path":"./test262-main/test/intl402/String/prototype/localeCompare/missing-arguments-coerced-to-undefined.js","version":5,"esid":" 13.1.1_3_2","description":" >Tests that String.prototype.localeCompare treats a missing\"that\"\nargument, undefined, and \"undefined\" as equivalent.\n","author":" Norbert Lindenberg"},{"path":"./test262-main/test/intl402/String/prototype/localeCompare/return-abrupt-this-value.js","version":5,"esid":" 13.1.1_1","description":" >Tests that localeCompare rejects values that can't be coerced to\nan object.\n","author":" Norbert Lindenberg"},{"path":"./test262-main/test/intl402/String/prototype/localeCompare/returns-same-results-as-Collator.js","version":5,"esid":" 13.1.1_7","description":" >Tests that localeCompare produces the same results as\nIntl.Collator.\n","author":" Norbert Lindenberg","includes":["compareArray.js"]},{"path":"./test262-main/test/intl402/String/prototype/localeCompare/taint-Intl-Collator.js","version":5,"esid":" 13.1.1_6_2","description":" >Tests that String.prototype.localeCompare uses the standard\nbuilt-in Intl.Collator constructor.\n","author":" Norbert Lindenberg","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/String/prototype/localeCompare/that-arg-coerced-to-string.js","version":5,"esid":" 13.1.1_3_1","description":" Tests that localeCompare coerces that to a string.","author":" Norbert Lindenberg"},{"path":"./test262-main/test/intl402/String/prototype/localeCompare/this-value-coerced-to-string.js","version":5,"esid":" 13.1.1_2","description":" Tests that localeCompare coerces this to a string.","author":" Norbert Lindenberg"},{"path":"./test262-main/test/intl402/String/prototype/localeCompare/throws-same-exceptions-as-Collator.js","version":5,"esid":" 13.1.1_6_1","description":" >Tests that String.prototype.localeCompare throws the same\nexceptions as Intl.Collator.\n","author":" Norbert Lindenberg"},{"path":"./test262-main/test/intl402/String/prototype/toLocaleLowerCase/capital_I_with_dot.js","description":" >Check if String.prototype.toLocaleLowerCase supports mappings defined in SpecialCasings\n","info":" |The result must be derived according to the case mappings in the Unicode character database (this explicitly\nincludes not only the UnicodeData.txt file, but also the SpecialCasings.txt file that accompanies it).\n","version":6,"esid":" 21.1.3.20"},{"path":"./test262-main/test/intl402/String/prototype/toLocaleLowerCase/special_casing_Azeri.js","description":" >Check if String.prototype.toLocaleLowerCase supports language-sensitive mappings defined in SpecialCasings (Azeri)\n","info":" |The result must be derived according to the case mappings in the Unicode character database (this explicitly\nincludes not only the UnicodeData.txt file, but also the SpecialCasings.txt file that accompanies it).\n","version":6,"esid":" 21.1.3.20"},{"path":"./test262-main/test/intl402/String/prototype/toLocaleLowerCase/special_casing_Lithuanian.js","description":" >Check if String.prototype.toLocaleLowerCase supports language-sensitive mappings defined in SpecialCasings (Lithuanian)\n","info":" |The result must be derived according to the case mappings in the Unicode character database (this explicitly\nincludes not only the UnicodeData.txt file, but also the SpecialCasings.txt file that accompanies it).\n","version":6,"esid":" 21.1.3.20"},{"path":"./test262-main/test/intl402/String/prototype/toLocaleLowerCase/special_casing_Turkish.js","description":" >Check if String.prototype.toLocaleLowerCase supports language-sensitive mappings defined in SpecialCasings (Turkish)\n","info":" |The result must be derived according to the case mappings in the Unicode character database (this explicitly\nincludes not only the UnicodeData.txt file, but also the SpecialCasings.txt file that accompanies it).\n","version":6,"esid":" 21.1.3.20"},{"path":"./test262-main/test/intl402/String/prototype/toLocaleUpperCase/special_casing_Azeri.js","description":" >Check if String.prototype.toLocaleUpperCase supports language-sensitive mappings defined in SpecialCasings (Azeri)\n","info":" |The result must be derived according to the case mappings in the Unicode character database (this explicitly\nincludes not only the UnicodeData.txt file, but also the SpecialCasings.txt file that accompanies it).\n","version":6,"esid":" 21.1.3.21"},{"path":"./test262-main/test/intl402/String/prototype/toLocaleUpperCase/special_casing_Lithuanian.js","description":" >Check if String.prototype.toLocaleUpperCase supports language-sensitive mappings defined in SpecialCasings (Lithuanian)\n","info":" |The result must be derived according to the case mappings in the Unicode character database (this explicitly\nincludes not only the UnicodeData.txt file, but also the SpecialCasings.txt file that accompanies it).\n","version":6,"esid":" 21.1.3.21"},{"path":"./test262-main/test/intl402/String/prototype/toLocaleUpperCase/special_casing_Turkish.js","description":" >Check if String.prototype.toLocaleUpperCase supports language-sensitive mappings defined in SpecialCasings (Turkish)\n","info":" |The result must be derived according to the case mappings in the Unicode character database (this explicitly\nincludes not only the UnicodeData.txt file, but also the SpecialCasings.txt file that accompanies it).\n","version":6,"esid":" 21.1.3.21"},{"path":"./test262-main/test/intl402/TypedArray/prototype/toLocaleString/calls-toLocaleString-number-elements.js","esid":" sup-array.prototype.tolocalestring","description":" >Ensure \"toLocaleString\" is called with locale and options on number elements.\n","includes":["testTypedArray.js"],"features":["TypedArray"]},{"path":"./test262-main/test/intl402/constructors-string-and-single-element-array.js","version":5,"esid":" 9.2.1_3","description":" >Tests that a single string instead of a locale list is treatedas\nthe locale list containing that string.\n","author":" Norbert Lindenberg","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/constructors-taint-Object-prototype-2.js","version":5,"esid":" 9.2.5_6","description":" >Tests that the behavior of a Record is not affected by\nadversarialchanges to Object.prototype.\n","author":" Norbert Lindenberg","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/constructors-taint-Object-prototype.js","version":5,"esid":" 9.2.3_5","description":" >Tests that the behavior of a Record is not affected by\nadversarialchanges to Object.prototype.\n","author":" Norbert Lindenberg","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/default-locale-is-canonicalized.js","version":5,"esid":" 6.2.4","description":" >Tests that the default locale is a String value representing the\nstructurally valid and canonicalized BCP 47 language tag.\n","author":" Norbert Lindenberg","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/default-locale-is-supported.js","version":5,"esid":" 9.1_a","description":" Tests that default locale is available.","author":" Norbert Lindenberg","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/fallback-locales-are-supported.js","version":5,"esid":" 9.1_b","description":" >Tests that appropriate fallback locales are provided for\nsupported locales.\n","author":" Norbert Lindenberg","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/language-tags-canonicalized.js","version":5,"esid":" 6.2.3","description":" Tests that language tags are canonicalized in return values.","author":" Norbert Lindenberg","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/language-tags-invalid.js","version":5,"esid":" 6.2.2_c","description":" >Tests that language tags with invalid subtag sequences are not\naccepted.\n","author":" Norbert Lindenberg","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/language-tags-valid.js","version":5,"esid":" 6.2.2_a","description":" Tests that structurally valid language tags are accepted.","author":" Norbert Lindenberg","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/language-tags-with-underscore.js","version":5,"esid":" 6.2.2_b","description":" Tests that language tags with \"_\" are not accepted.","author":" Norbert Lindenberg","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/supportedLocalesOf-consistent-with-resolvedOptions.js","version":5,"esid":" 9.2.2","description":" >Tests that locales that are reported by resolvedOptionsare also\nreported by supportedLocalesOf.\n","author":" Norbert Lindenberg","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/supportedLocalesOf-default-locale-and-zxx-locale.js","version":5,"esid":" 9.2.6_4_c","description":" >Tests that LookupSupportedLocales includes the default localeand\ndoesn't include the \"no linguistic content\" locale.\n","author":" Norbert Lindenberg","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/supportedLocalesOf-duplicate-elements-removed.js","version":5,"esid":" 9.2.1_8_c_vi","description":" >Tests that canonicalization of locale lists removes duplicate\nlanguage tags.\n","author":" Norbert Lindenberg","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/supportedLocalesOf-empty-and-undefined.js","version":5,"esid":" 9.2.1_1","description":" >Tests that canonicalization of locale lists treats undefined and\nempty lists the same.\n","author":" Norbert Lindenberg","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/supportedLocalesOf-locales-arg-coered-to-object.js","version":5,"esid":" 9.2.1_4","description":" >Tests that non-objects are converted to objects before\ncanonicalization.\n","author":" Norbert Lindenberg","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/supportedLocalesOf-locales-arg-empty-array.js","version":5,"esid":" 9.2.6_4","description":" >Tests that LookupSupportedLocales returns an empty list when\ngiven an empty list.\n","author":" Norbert Lindenberg","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/supportedLocalesOf-returned-array-elements-are-not-frozen.js","version":5,"esid":" 9.2.8_4","description":" >Tests that the array returned by SupportedLocales is extensible,\nwritable and configurable.\n","author":" Norbert Lindenberg","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/supportedLocalesOf-taint-Array-2.js","version":5,"esid":" 9.2.6_2","description":" >Tests that the behavior of a List is not affected by adversarial\nchanges to Array.prototype.\n","author":" Norbert Lindenberg","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/supportedLocalesOf-taint-Array.js","version":5,"esid":" 9.2.1_2","description":" >Tests that the behavior of a List is not affected by adversarial\nchanges to Array.prototype.\n","author":" Norbert Lindenberg","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/supportedLocalesOf-test-option-localeMatcher.js","version":5,"esid":" 9.2.8_1_c","description":" Tests that the option localeMatcher is processed correctly.","author":" Norbert Lindenberg","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/supportedLocalesOf-throws-if-element-not-string-or-object.js","version":5,"esid":" 9.2.1_8_c_ii","description":" Tests that values other than strings are not accepted as locales.","author":" Norbert Lindenberg","includes":["testIntl.js"]},{"path":"./test262-main/test/intl402/supportedLocalesOf-unicode-extensions-ignored.js","version":5,"esid":" 9.2.6_4_b","description":" >Tests that Unicode locale extension sequences do not affect\nwhether a locale is considered supported, but are reported back.\n","author":" Norbert Lindenberg","includes":["testIntl.js"]}]